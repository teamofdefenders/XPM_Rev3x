
U575_XPC_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002af30  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056b3  0802b168  0802b168  0002c168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803081c  0803081c  0003181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08030824  08030824  00031824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08030828  08030828  00031828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005b0  20000000  0803082c  00032000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000bb74c  200005b0  08030ddc  000325b0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200bbcfc  08030ddc  00032cfc  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000481a0  00000000  00000000  000325e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007e2d  00000000  00000000  0007a786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000030a8  00000000  00000000  000825b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000260a  00000000  00000000  00085660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000419d2  00000000  00000000  00087c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004338b  00000000  00000000  000c963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177dac  00000000  00000000  0010c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00284773  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000eed8  00000000  00000000  002847b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  00293690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200005b0 	.word	0x200005b0
 8000254:	00000000 	.word	0x00000000
 8000258:	0802b150 	.word	0x0802b150

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200005b4 	.word	0x200005b4
 8000274:	0802b150 	.word	0x0802b150

08000278 <strcmp>:
 8000278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800027c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000280:	2a01      	cmp	r2, #1
 8000282:	bf28      	it	cs
 8000284:	429a      	cmpcs	r2, r3
 8000286:	d0f7      	beq.n	8000278 <strcmp>
 8000288:	1ad0      	subs	r0, r2, r3
 800028a:	4770      	bx	lr

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_drsub>:
 800029c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	e002      	b.n	80002a8 <__adddf3>
 80002a2:	bf00      	nop

080002a4 <__aeabi_dsub>:
 80002a4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a8 <__adddf3>:
 80002a8:	b530      	push	{r4, r5, lr}
 80002aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b2:	ea94 0f05 	teq	r4, r5
 80002b6:	bf08      	it	eq
 80002b8:	ea90 0f02 	teqeq	r0, r2
 80002bc:	bf1f      	itttt	ne
 80002be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ce:	f000 80e2 	beq.w	8000496 <__adddf3+0x1ee>
 80002d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002da:	bfb8      	it	lt
 80002dc:	426d      	neglt	r5, r5
 80002de:	dd0c      	ble.n	80002fa <__adddf3+0x52>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea80 0202 	eor.w	r2, r0, r2
 80002e6:	ea81 0303 	eor.w	r3, r1, r3
 80002ea:	ea82 0000 	eor.w	r0, r2, r0
 80002ee:	ea83 0101 	eor.w	r1, r3, r1
 80002f2:	ea80 0202 	eor.w	r2, r0, r2
 80002f6:	ea81 0303 	eor.w	r3, r1, r3
 80002fa:	2d36      	cmp	r5, #54	@ 0x36
 80002fc:	bf88      	it	hi
 80002fe:	bd30      	pophi	{r4, r5, pc}
 8000300:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000308:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800030c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x70>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800031c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000320:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x84>
 8000326:	4252      	negs	r2, r2
 8000328:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032c:	ea94 0f05 	teq	r4, r5
 8000330:	f000 80a7 	beq.w	8000482 <__adddf3+0x1da>
 8000334:	f1a4 0401 	sub.w	r4, r4, #1
 8000338:	f1d5 0e20 	rsbs	lr, r5, #32
 800033c:	db0d      	blt.n	800035a <__adddf3+0xb2>
 800033e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000342:	fa22 f205 	lsr.w	r2, r2, r5
 8000346:	1880      	adds	r0, r0, r2
 8000348:	f141 0100 	adc.w	r1, r1, #0
 800034c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000350:	1880      	adds	r0, r0, r2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	4159      	adcs	r1, r3
 8000358:	e00e      	b.n	8000378 <__adddf3+0xd0>
 800035a:	f1a5 0520 	sub.w	r5, r5, #32
 800035e:	f10e 0e20 	add.w	lr, lr, #32
 8000362:	2a01      	cmp	r2, #1
 8000364:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000368:	bf28      	it	cs
 800036a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	18c0      	adds	r0, r0, r3
 8000374:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000378:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800037c:	d507      	bpl.n	800038e <__adddf3+0xe6>
 800037e:	f04f 0e00 	mov.w	lr, #0
 8000382:	f1dc 0c00 	rsbs	ip, ip, #0
 8000386:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038a:	eb6e 0101 	sbc.w	r1, lr, r1
 800038e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000392:	d31b      	bcc.n	80003cc <__adddf3+0x124>
 8000394:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000398:	d30c      	bcc.n	80003b4 <__adddf3+0x10c>
 800039a:	0849      	lsrs	r1, r1, #1
 800039c:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a4:	f104 0401 	add.w	r4, r4, #1
 80003a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ac:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b0:	f080 809a 	bcs.w	80004e8 <__adddf3+0x240>
 80003b4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b8:	bf08      	it	eq
 80003ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003be:	f150 0000 	adcs.w	r0, r0, #0
 80003c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c6:	ea41 0105 	orr.w	r1, r1, r5
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d0:	4140      	adcs	r0, r0
 80003d2:	eb41 0101 	adc.w	r1, r1, r1
 80003d6:	3c01      	subs	r4, #1
 80003d8:	bf28      	it	cs
 80003da:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003de:	d2e9      	bcs.n	80003b4 <__adddf3+0x10c>
 80003e0:	f091 0f00 	teq	r1, #0
 80003e4:	bf04      	itt	eq
 80003e6:	4601      	moveq	r1, r0
 80003e8:	2000      	moveq	r0, #0
 80003ea:	fab1 f381 	clz	r3, r1
 80003ee:	bf08      	it	eq
 80003f0:	3320      	addeq	r3, #32
 80003f2:	f1a3 030b 	sub.w	r3, r3, #11
 80003f6:	f1b3 0220 	subs.w	r2, r3, #32
 80003fa:	da0c      	bge.n	8000416 <__adddf3+0x16e>
 80003fc:	320c      	adds	r2, #12
 80003fe:	dd08      	ble.n	8000412 <__adddf3+0x16a>
 8000400:	f102 0c14 	add.w	ip, r2, #20
 8000404:	f1c2 020c 	rsb	r2, r2, #12
 8000408:	fa01 f00c 	lsl.w	r0, r1, ip
 800040c:	fa21 f102 	lsr.w	r1, r1, r2
 8000410:	e00c      	b.n	800042c <__adddf3+0x184>
 8000412:	f102 0214 	add.w	r2, r2, #20
 8000416:	bfd8      	it	le
 8000418:	f1c2 0c20 	rsble	ip, r2, #32
 800041c:	fa01 f102 	lsl.w	r1, r1, r2
 8000420:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000424:	bfdc      	itt	le
 8000426:	ea41 010c 	orrle.w	r1, r1, ip
 800042a:	4090      	lslle	r0, r2
 800042c:	1ae4      	subs	r4, r4, r3
 800042e:	bfa2      	ittt	ge
 8000430:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000434:	4329      	orrge	r1, r5
 8000436:	bd30      	popge	{r4, r5, pc}
 8000438:	ea6f 0404 	mvn.w	r4, r4
 800043c:	3c1f      	subs	r4, #31
 800043e:	da1c      	bge.n	800047a <__adddf3+0x1d2>
 8000440:	340c      	adds	r4, #12
 8000442:	dc0e      	bgt.n	8000462 <__adddf3+0x1ba>
 8000444:	f104 0414 	add.w	r4, r4, #20
 8000448:	f1c4 0220 	rsb	r2, r4, #32
 800044c:	fa20 f004 	lsr.w	r0, r0, r4
 8000450:	fa01 f302 	lsl.w	r3, r1, r2
 8000454:	ea40 0003 	orr.w	r0, r0, r3
 8000458:	fa21 f304 	lsr.w	r3, r1, r4
 800045c:	ea45 0103 	orr.w	r1, r5, r3
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	f1c4 040c 	rsb	r4, r4, #12
 8000466:	f1c4 0220 	rsb	r2, r4, #32
 800046a:	fa20 f002 	lsr.w	r0, r0, r2
 800046e:	fa01 f304 	lsl.w	r3, r1, r4
 8000472:	ea40 0003 	orr.w	r0, r0, r3
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	fa21 f004 	lsr.w	r0, r1, r4
 800047e:	4629      	mov	r1, r5
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	f094 0f00 	teq	r4, #0
 8000486:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048a:	bf06      	itte	eq
 800048c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000490:	3401      	addeq	r4, #1
 8000492:	3d01      	subne	r5, #1
 8000494:	e74e      	b.n	8000334 <__adddf3+0x8c>
 8000496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049a:	bf18      	it	ne
 800049c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a0:	d029      	beq.n	80004f6 <__adddf3+0x24e>
 80004a2:	ea94 0f05 	teq	r4, r5
 80004a6:	bf08      	it	eq
 80004a8:	ea90 0f02 	teqeq	r0, r2
 80004ac:	d005      	beq.n	80004ba <__adddf3+0x212>
 80004ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b2:	bf04      	itt	eq
 80004b4:	4619      	moveq	r1, r3
 80004b6:	4610      	moveq	r0, r2
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	ea91 0f03 	teq	r1, r3
 80004be:	bf1e      	ittt	ne
 80004c0:	2100      	movne	r1, #0
 80004c2:	2000      	movne	r0, #0
 80004c4:	bd30      	popne	{r4, r5, pc}
 80004c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ca:	d105      	bne.n	80004d8 <__adddf3+0x230>
 80004cc:	0040      	lsls	r0, r0, #1
 80004ce:	4149      	adcs	r1, r1
 80004d0:	bf28      	it	cs
 80004d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d6:	bd30      	pop	{r4, r5, pc}
 80004d8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004dc:	bf3c      	itt	cc
 80004de:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e2:	bd30      	popcc	{r4, r5, pc}
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004ec:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fa:	bf1a      	itte	ne
 80004fc:	4619      	movne	r1, r3
 80004fe:	4610      	movne	r0, r2
 8000500:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000504:	bf1c      	itt	ne
 8000506:	460b      	movne	r3, r1
 8000508:	4602      	movne	r2, r0
 800050a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050e:	bf06      	itte	eq
 8000510:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000514:	ea91 0f03 	teqeq	r1, r3
 8000518:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	bf00      	nop

08000520 <__aeabi_ui2d>:
 8000520:	f090 0f00 	teq	r0, #0
 8000524:	bf04      	itt	eq
 8000526:	2100      	moveq	r1, #0
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000530:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000534:	f04f 0500 	mov.w	r5, #0
 8000538:	f04f 0100 	mov.w	r1, #0
 800053c:	e750      	b.n	80003e0 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_i2d>:
 8000540:	f090 0f00 	teq	r0, #0
 8000544:	bf04      	itt	eq
 8000546:	2100      	moveq	r1, #0
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000550:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000554:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000558:	bf48      	it	mi
 800055a:	4240      	negmi	r0, r0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e73e      	b.n	80003e0 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_f2d>:
 8000564:	0042      	lsls	r2, r0, #1
 8000566:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056a:	ea4f 0131 	mov.w	r1, r1, rrx
 800056e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000572:	bf1f      	itttt	ne
 8000574:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000578:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800057c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000580:	4770      	bxne	lr
 8000582:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000586:	bf08      	it	eq
 8000588:	4770      	bxeq	lr
 800058a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058e:	bf04      	itt	eq
 8000590:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a4:	e71c      	b.n	80003e0 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_ul2d>:
 80005a8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ac:	bf08      	it	eq
 80005ae:	4770      	bxeq	lr
 80005b0:	b530      	push	{r4, r5, lr}
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	e00a      	b.n	80005ce <__aeabi_l2d+0x16>

080005b8 <__aeabi_l2d>:
 80005b8:	ea50 0201 	orrs.w	r2, r0, r1
 80005bc:	bf08      	it	eq
 80005be:	4770      	bxeq	lr
 80005c0:	b530      	push	{r4, r5, lr}
 80005c2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c6:	d502      	bpl.n	80005ce <__aeabi_l2d+0x16>
 80005c8:	4240      	negs	r0, r0
 80005ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ce:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005da:	f43f aed8 	beq.w	800038e <__adddf3+0xe6>
 80005de:	f04f 0203 	mov.w	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ee:	bf18      	it	ne
 80005f0:	3203      	addne	r2, #3
 80005f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f6:	f1c2 0320 	rsb	r3, r2, #32
 80005fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000602:	fa01 fe03 	lsl.w	lr, r1, r3
 8000606:	ea40 000e 	orr.w	r0, r0, lr
 800060a:	fa21 f102 	lsr.w	r1, r1, r2
 800060e:	4414      	add	r4, r2
 8000610:	e6bd      	b.n	800038e <__adddf3+0xe6>
 8000612:	bf00      	nop

08000614 <__aeabi_dmul>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000622:	bf1d      	ittte	ne
 8000624:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000628:	ea94 0f0c 	teqne	r4, ip
 800062c:	ea95 0f0c 	teqne	r5, ip
 8000630:	f000 f8de 	bleq	80007f0 <__aeabi_dmul+0x1dc>
 8000634:	442c      	add	r4, r5
 8000636:	ea81 0603 	eor.w	r6, r1, r3
 800063a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000642:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000646:	bf18      	it	ne
 8000648:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000654:	d038      	beq.n	80006c8 <__aeabi_dmul+0xb4>
 8000656:	fba0 ce02 	umull	ip, lr, r0, r2
 800065a:	f04f 0500 	mov.w	r5, #0
 800065e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000662:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000666:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066a:	f04f 0600 	mov.w	r6, #0
 800066e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000672:	f09c 0f00 	teq	ip, #0
 8000676:	bf18      	it	ne
 8000678:	f04e 0e01 	orrne.w	lr, lr, #1
 800067c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000680:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000684:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000688:	d204      	bcs.n	8000694 <__aeabi_dmul+0x80>
 800068a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068e:	416d      	adcs	r5, r5
 8000690:	eb46 0606 	adc.w	r6, r6, r6
 8000694:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000698:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800069c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ac:	bf88      	it	hi
 80006ae:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b2:	d81e      	bhi.n	80006f2 <__aeabi_dmul+0xde>
 80006b4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b8:	bf08      	it	eq
 80006ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006be:	f150 0000 	adcs.w	r0, r0, #0
 80006c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006cc:	ea46 0101 	orr.w	r1, r6, r1
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006dc:	bfc2      	ittt	gt
 80006de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e6:	bd70      	popgt	{r4, r5, r6, pc}
 80006e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006ec:	f04f 0e00 	mov.w	lr, #0
 80006f0:	3c01      	subs	r4, #1
 80006f2:	f300 80ab 	bgt.w	800084c <__aeabi_dmul+0x238>
 80006f6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fa:	bfde      	ittt	le
 80006fc:	2000      	movle	r0, #0
 80006fe:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000702:	bd70      	pople	{r4, r5, r6, pc}
 8000704:	f1c4 0400 	rsb	r4, r4, #0
 8000708:	3c20      	subs	r4, #32
 800070a:	da35      	bge.n	8000778 <__aeabi_dmul+0x164>
 800070c:	340c      	adds	r4, #12
 800070e:	dc1b      	bgt.n	8000748 <__aeabi_dmul+0x134>
 8000710:	f104 0414 	add.w	r4, r4, #20
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f305 	lsl.w	r3, r0, r5
 800071c:	fa20 f004 	lsr.w	r0, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800072c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	fa21 f604 	lsr.w	r6, r1, r4
 8000738:	eb42 0106 	adc.w	r1, r2, r6
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f1c4 040c 	rsb	r4, r4, #12
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f304 	lsl.w	r3, r0, r4
 8000754:	fa20 f005 	lsr.w	r0, r0, r5
 8000758:	fa01 f204 	lsl.w	r2, r1, r4
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	f141 0100 	adc.w	r1, r1, #0
 800076c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000770:	bf08      	it	eq
 8000772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000776:	bd70      	pop	{r4, r5, r6, pc}
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f205 	lsl.w	r2, r0, r5
 8000780:	ea4e 0e02 	orr.w	lr, lr, r2
 8000784:	fa20 f304 	lsr.w	r3, r0, r4
 8000788:	fa01 f205 	lsl.w	r2, r1, r5
 800078c:	ea43 0302 	orr.w	r3, r3, r2
 8000790:	fa21 f004 	lsr.w	r0, r1, r4
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	fa21 f204 	lsr.w	r2, r1, r4
 800079c:	ea20 0002 	bic.w	r0, r0, r2
 80007a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f094 0f00 	teq	r4, #0
 80007b4:	d10f      	bne.n	80007d6 <__aeabi_dmul+0x1c2>
 80007b6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ba:	0040      	lsls	r0, r0, #1
 80007bc:	eb41 0101 	adc.w	r1, r1, r1
 80007c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3c01      	subeq	r4, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1a6>
 80007ca:	ea41 0106 	orr.w	r1, r1, r6
 80007ce:	f095 0f00 	teq	r5, #0
 80007d2:	bf18      	it	ne
 80007d4:	4770      	bxne	lr
 80007d6:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007da:	0052      	lsls	r2, r2, #1
 80007dc:	eb43 0303 	adc.w	r3, r3, r3
 80007e0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e4:	bf08      	it	eq
 80007e6:	3d01      	subeq	r5, #1
 80007e8:	d0f7      	beq.n	80007da <__aeabi_dmul+0x1c6>
 80007ea:	ea43 0306 	orr.w	r3, r3, r6
 80007ee:	4770      	bx	lr
 80007f0:	ea94 0f0c 	teq	r4, ip
 80007f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f8:	bf18      	it	ne
 80007fa:	ea95 0f0c 	teqne	r5, ip
 80007fe:	d00c      	beq.n	800081a <__aeabi_dmul+0x206>
 8000800:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000804:	bf18      	it	ne
 8000806:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080a:	d1d1      	bne.n	80007b0 <__aeabi_dmul+0x19c>
 800080c:	ea81 0103 	eor.w	r1, r1, r3
 8000810:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000814:	f04f 0000 	mov.w	r0, #0
 8000818:	bd70      	pop	{r4, r5, r6, pc}
 800081a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081e:	bf06      	itte	eq
 8000820:	4610      	moveq	r0, r2
 8000822:	4619      	moveq	r1, r3
 8000824:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000828:	d019      	beq.n	800085e <__aeabi_dmul+0x24a>
 800082a:	ea94 0f0c 	teq	r4, ip
 800082e:	d102      	bne.n	8000836 <__aeabi_dmul+0x222>
 8000830:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000834:	d113      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000836:	ea95 0f0c 	teq	r5, ip
 800083a:	d105      	bne.n	8000848 <__aeabi_dmul+0x234>
 800083c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000840:	bf1c      	itt	ne
 8000842:	4610      	movne	r0, r2
 8000844:	4619      	movne	r1, r3
 8000846:	d10a      	bne.n	800085e <__aeabi_dmul+0x24a>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000850:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000854:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000862:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__aeabi_ddiv>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000872:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000876:	bf1d      	ittte	ne
 8000878:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800087c:	ea94 0f0c 	teqne	r4, ip
 8000880:	ea95 0f0c 	teqne	r5, ip
 8000884:	f000 f8a7 	bleq	80009d6 <__aeabi_ddiv+0x16e>
 8000888:	eba4 0405 	sub.w	r4, r4, r5
 800088c:	ea81 0e03 	eor.w	lr, r1, r3
 8000890:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000898:	f000 8088 	beq.w	80009ac <__aeabi_ddiv+0x144>
 800089c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008bc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c0:	429d      	cmp	r5, r3
 80008c2:	bf08      	it	eq
 80008c4:	4296      	cmpeq	r6, r2
 80008c6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ca:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ce:	d202      	bcs.n	80008d6 <__aeabi_ddiv+0x6e>
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	1ab6      	subs	r6, r6, r2
 80008d8:	eb65 0503 	sbc.w	r5, r5, r3
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000944:	ea55 0e06 	orrs.w	lr, r5, r6
 8000948:	d018      	beq.n	800097c <__aeabi_ddiv+0x114>
 800094a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000952:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000956:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000962:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000966:	d1c0      	bne.n	80008ea <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	d10b      	bne.n	8000986 <__aeabi_ddiv+0x11e>
 800096e:	ea41 0100 	orr.w	r1, r1, r0
 8000972:	f04f 0000 	mov.w	r0, #0
 8000976:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097a:	e7b6      	b.n	80008ea <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	bf04      	itt	eq
 8000982:	4301      	orreq	r1, r0
 8000984:	2000      	moveq	r0, #0
 8000986:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098a:	bf88      	it	hi
 800098c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000990:	f63f aeaf 	bhi.w	80006f2 <__aeabi_dmul+0xde>
 8000994:	ebb5 0c03 	subs.w	ip, r5, r3
 8000998:	bf04      	itt	eq
 800099a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a2:	f150 0000 	adcs.w	r0, r0, #0
 80009a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b8:	bfc2      	ittt	gt
 80009ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	popgt	{r4, r5, r6, pc}
 80009c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c8:	f04f 0e00 	mov.w	lr, #0
 80009cc:	3c01      	subs	r4, #1
 80009ce:	e690      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d0:	ea45 0e06 	orr.w	lr, r5, r6
 80009d4:	e68d      	b.n	80006f2 <__aeabi_dmul+0xde>
 80009d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009da:	ea94 0f0c 	teq	r4, ip
 80009de:	bf08      	it	eq
 80009e0:	ea95 0f0c 	teqeq	r5, ip
 80009e4:	f43f af3b 	beq.w	800085e <__aeabi_dmul+0x24a>
 80009e8:	ea94 0f0c 	teq	r4, ip
 80009ec:	d10a      	bne.n	8000a04 <__aeabi_ddiv+0x19c>
 80009ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f2:	f47f af34 	bne.w	800085e <__aeabi_dmul+0x24a>
 80009f6:	ea95 0f0c 	teq	r5, ip
 80009fa:	f47f af25 	bne.w	8000848 <__aeabi_dmul+0x234>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e72c      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a04:	ea95 0f0c 	teq	r5, ip
 8000a08:	d106      	bne.n	8000a18 <__aeabi_ddiv+0x1b0>
 8000a0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0e:	f43f aefd 	beq.w	800080c <__aeabi_dmul+0x1f8>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e722      	b.n	800085e <__aeabi_dmul+0x24a>
 8000a18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a1c:	bf18      	it	ne
 8000a1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a22:	f47f aec5 	bne.w	80007b0 <__aeabi_dmul+0x19c>
 8000a26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2a:	f47f af0d 	bne.w	8000848 <__aeabi_dmul+0x234>
 8000a2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a32:	f47f aeeb 	bne.w	800080c <__aeabi_dmul+0x1f8>
 8000a36:	e712      	b.n	800085e <__aeabi_dmul+0x24a>

08000a38 <__gedf2>:
 8000a38:	f04f 3cff 	mov.w	ip, #4294967295
 8000a3c:	e006      	b.n	8000a4c <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__ledf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	e002      	b.n	8000a4c <__cmpdf2+0x4>
 8000a46:	bf00      	nop

08000a48 <__cmpdf2>:
 8000a48:	f04f 0c01 	mov.w	ip, #1
 8000a4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a62:	d01b      	beq.n	8000a9c <__cmpdf2+0x54>
 8000a64:	b001      	add	sp, #4
 8000a66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6a:	bf0c      	ite	eq
 8000a6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a70:	ea91 0f03 	teqne	r1, r3
 8000a74:	bf02      	ittt	eq
 8000a76:	ea90 0f02 	teqeq	r0, r2
 8000a7a:	2000      	moveq	r0, #0
 8000a7c:	4770      	bxeq	lr
 8000a7e:	f110 0f00 	cmn.w	r0, #0
 8000a82:	ea91 0f03 	teq	r1, r3
 8000a86:	bf58      	it	pl
 8000a88:	4299      	cmppl	r1, r3
 8000a8a:	bf08      	it	eq
 8000a8c:	4290      	cmpeq	r0, r2
 8000a8e:	bf2c      	ite	cs
 8000a90:	17d8      	asrcs	r0, r3, #31
 8000a92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a96:	f040 0001 	orr.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__cmpdf2+0x64>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d107      	bne.n	8000abc <__cmpdf2+0x74>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d1d6      	bne.n	8000a64 <__cmpdf2+0x1c>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d0d3      	beq.n	8000a64 <__cmpdf2+0x1c>
 8000abc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_cdrcmple>:
 8000ac4:	4684      	mov	ip, r0
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4662      	mov	r2, ip
 8000aca:	468c      	mov	ip, r1
 8000acc:	4619      	mov	r1, r3
 8000ace:	4663      	mov	r3, ip
 8000ad0:	e000      	b.n	8000ad4 <__aeabi_cdcmpeq>
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_cdcmpeq>:
 8000ad4:	b501      	push	{r0, lr}
 8000ad6:	f7ff ffb7 	bl	8000a48 <__cmpdf2>
 8000ada:	2800      	cmp	r0, #0
 8000adc:	bf48      	it	mi
 8000ade:	f110 0f00 	cmnmi.w	r0, #0
 8000ae2:	bd01      	pop	{r0, pc}

08000ae4 <__aeabi_dcmpeq>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff fff4 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000aec:	bf0c      	ite	eq
 8000aee:	2001      	moveq	r0, #1
 8000af0:	2000      	movne	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmplt>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffea 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b00:	bf34      	ite	cc
 8000b02:	2001      	movcc	r0, #1
 8000b04:	2000      	movcs	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmple>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffe0 	bl	8000ad4 <__aeabi_cdcmpeq>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpge>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffce 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpgt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffc4 	bl	8000ac4 <__aeabi_cdrcmple>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpun>:
 8000b48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b50:	d102      	bne.n	8000b58 <__aeabi_dcmpun+0x10>
 8000b52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b56:	d10a      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b60:	d102      	bne.n	8000b68 <__aeabi_dcmpun+0x20>
 8000b62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_dcmpun+0x26>
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0001 	mov.w	r0, #1
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_d2uiz>:
 8000bc4:	004a      	lsls	r2, r1, #1
 8000bc6:	d211      	bcs.n	8000bec <__aeabi_d2uiz+0x28>
 8000bc8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bcc:	d211      	bcs.n	8000bf2 <__aeabi_d2uiz+0x2e>
 8000bce:	d50d      	bpl.n	8000bec <__aeabi_d2uiz+0x28>
 8000bd0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd8:	d40e      	bmi.n	8000bf8 <__aeabi_d2uiz+0x34>
 8000bda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bea:	4770      	bx	lr
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf6:	d102      	bne.n	8000bfe <__aeabi_d2uiz+0x3a>
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_uldivmod>:
 8000ca4:	b953      	cbnz	r3, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca6:	b94a      	cbnz	r2, 8000cbc <__aeabi_uldivmod+0x18>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	bf08      	it	eq
 8000cac:	2800      	cmpeq	r0, #0
 8000cae:	bf1c      	itt	ne
 8000cb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb8:	f000 b9b4 	b.w	8001024 <__aeabi_idiv0>
 8000cbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc4:	f000 f83c 	bl	8000d40 <__udivmoddi4>
 8000cc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd0:	b004      	add	sp, #16
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_d2lz>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	460d      	mov	r5, r1
 8000cde:	f7ff ff0b 	bl	8000af8 <__aeabi_dcmplt>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <__aeabi_d2lz+0x1c>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cec:	f000 b80a 	b.w	8000d04 <__aeabi_d2ulz>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cf6:	f000 f805 	bl	8000d04 <__aeabi_d2ulz>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	bd38      	pop	{r3, r4, r5, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_d2ulz>:
 8000d04:	b5d0      	push	{r4, r6, r7, lr}
 8000d06:	2200      	movs	r2, #0
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <__aeabi_d2ulz+0x34>)
 8000d0a:	4606      	mov	r6, r0
 8000d0c:	460f      	mov	r7, r1
 8000d0e:	f7ff fc81 	bl	8000614 <__aeabi_dmul>
 8000d12:	f7ff ff57 	bl	8000bc4 <__aeabi_d2uiz>
 8000d16:	4604      	mov	r4, r0
 8000d18:	f7ff fc02 	bl	8000520 <__aeabi_ui2d>
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <__aeabi_d2ulz+0x38>)
 8000d20:	f7ff fc78 	bl	8000614 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4630      	mov	r0, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	f7ff faba 	bl	80002a4 <__aeabi_dsub>
 8000d30:	f7ff ff48 	bl	8000bc4 <__aeabi_d2uiz>
 8000d34:	4621      	mov	r1, r4
 8000d36:	bdd0      	pop	{r4, r6, r7, pc}
 8000d38:	3df00000 	.word	0x3df00000
 8000d3c:	41f00000 	.word	0x41f00000

08000d40 <__udivmoddi4>:
 8000d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d44:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d46:	460c      	mov	r4, r1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d14d      	bne.n	8000de8 <__udivmoddi4+0xa8>
 8000d4c:	428a      	cmp	r2, r1
 8000d4e:	460f      	mov	r7, r1
 8000d50:	4684      	mov	ip, r0
 8000d52:	4696      	mov	lr, r2
 8000d54:	fab2 f382 	clz	r3, r2
 8000d58:	d960      	bls.n	8000e1c <__udivmoddi4+0xdc>
 8000d5a:	b14b      	cbz	r3, 8000d70 <__udivmoddi4+0x30>
 8000d5c:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d60:	f1c3 0220 	rsb	r2, r3, #32
 8000d64:	409f      	lsls	r7, r3
 8000d66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d74:	fa1f f48e 	uxth.w	r4, lr
 8000d78:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d7c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d80:	fb06 7711 	mls	r7, r6, r1, r7
 8000d84:	fb01 f004 	mul.w	r0, r1, r4
 8000d88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x62>
 8000d90:	eb1e 0202 	adds.w	r2, lr, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x60>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f200 812d 	bhi.w	8000ffa <__udivmoddi4+0x2ba>
 8000da0:	4639      	mov	r1, r7
 8000da2:	1a12      	subs	r2, r2, r0
 8000da4:	fa1f fc8c 	uxth.w	ip, ip
 8000da8:	fbb2 f0f6 	udiv	r0, r2, r6
 8000dac:	fb06 2210 	mls	r2, r6, r0, r2
 8000db0:	fb00 f404 	mul.w	r4, r0, r4
 8000db4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000db8:	4564      	cmp	r4, ip
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x8e>
 8000dbc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x8c>
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	f200 811a 	bhi.w	8001000 <__udivmoddi4+0x2c0>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd2:	ebac 0c04 	sub.w	ip, ip, r4
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	b125      	cbz	r5, 8000de4 <__udivmoddi4+0xa4>
 8000dda:	fa2c f303 	lsr.w	r3, ip, r3
 8000dde:	2200      	movs	r2, #0
 8000de0:	e9c5 3200 	strd	r3, r2, [r5]
 8000de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d905      	bls.n	8000df8 <__udivmoddi4+0xb8>
 8000dec:	b10d      	cbz	r5, 8000df2 <__udivmoddi4+0xb2>
 8000dee:	e9c5 0100 	strd	r0, r1, [r5]
 8000df2:	2100      	movs	r1, #0
 8000df4:	4608      	mov	r0, r1
 8000df6:	e7f5      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000df8:	fab3 f183 	clz	r1, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d14d      	bne.n	8000e9c <__udivmoddi4+0x15c>
 8000e00:	42a3      	cmp	r3, r4
 8000e02:	f0c0 80f2 	bcc.w	8000fea <__udivmoddi4+0x2aa>
 8000e06:	4290      	cmp	r0, r2
 8000e08:	f080 80ef 	bcs.w	8000fea <__udivmoddi4+0x2aa>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	4623      	mov	r3, r4
 8000e10:	4608      	mov	r0, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e6      	beq.n	8000de4 <__udivmoddi4+0xa4>
 8000e16:	e9c5 6300 	strd	r6, r3, [r5]
 8000e1a:	e7e3      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f040 80a2 	bne.w	8000f66 <__udivmoddi4+0x226>
 8000e22:	1a8a      	subs	r2, r1, r2
 8000e24:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e28:	fa1f f68e 	uxth.w	r6, lr
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e32:	fb07 2014 	mls	r0, r7, r4, r2
 8000e36:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb06 f004 	mul.w	r0, r6, r4
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d90f      	bls.n	8000e66 <__udivmoddi4+0x126>
 8000e46:	eb1e 0202 	adds.w	r2, lr, r2
 8000e4a:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0901 	movcs.w	r9, #1
 8000e54:	f04f 0900 	movcc.w	r9, #0
 8000e58:	4290      	cmp	r0, r2
 8000e5a:	d903      	bls.n	8000e64 <__udivmoddi4+0x124>
 8000e5c:	f1b9 0f00 	cmp.w	r9, #0
 8000e60:	f000 80c8 	beq.w	8000ff4 <__udivmoddi4+0x2b4>
 8000e64:	4644      	mov	r4, r8
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	fa1f fc8c 	uxth.w	ip, ip
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	fb00 f606 	mul.w	r6, r0, r6
 8000e78:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e7c:	4566      	cmp	r6, ip
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x152>
 8000e80:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x150>
 8000e8a:	4566      	cmp	r6, ip
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c6>
 8000e90:	4610      	mov	r0, r2
 8000e92:	ebac 0c06 	sub.w	ip, ip, r6
 8000e96:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9a:	e79d      	b.n	8000dd8 <__udivmoddi4+0x98>
 8000e9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa04 fe01 	lsl.w	lr, r4, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eae:	40f4      	lsrs	r4, r6
 8000eb0:	408a      	lsls	r2, r1
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	ea4e 030c 	orr.w	r3, lr, ip
 8000eb8:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ebc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ec0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec4:	fa1f fc87 	uxth.w	ip, r7
 8000ec8:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ecc:	fb08 4410 	mls	r4, r8, r0, r4
 8000ed0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed4:	fb00 f90c 	mul.w	r9, r0, ip
 8000ed8:	45a1      	cmp	r9, r4
 8000eda:	d90e      	bls.n	8000efa <__udivmoddi4+0x1ba>
 8000edc:	193c      	adds	r4, r7, r4
 8000ede:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee2:	bf2c      	ite	cs
 8000ee4:	f04f 0b01 	movcs.w	fp, #1
 8000ee8:	f04f 0b00 	movcc.w	fp, #0
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	d903      	bls.n	8000ef8 <__udivmoddi4+0x1b8>
 8000ef0:	f1bb 0f00 	cmp.w	fp, #0
 8000ef4:	f000 8093 	beq.w	800101e <__udivmoddi4+0x2de>
 8000ef8:	4650      	mov	r0, sl
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f06:	fb08 4413 	mls	r4, r8, r3, r4
 8000f0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d906      	bls.n	8000f24 <__udivmoddi4+0x1e4>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f1c:	d201      	bcs.n	8000f22 <__udivmoddi4+0x1e2>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d87a      	bhi.n	8001018 <__udivmoddi4+0x2d8>
 8000f22:	4643      	mov	r3, r8
 8000f24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f28:	eba4 040c 	sub.w	r4, r4, ip
 8000f2c:	fba0 9802 	umull	r9, r8, r0, r2
 8000f30:	4544      	cmp	r4, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	4643      	mov	r3, r8
 8000f36:	d302      	bcc.n	8000f3e <__udivmoddi4+0x1fe>
 8000f38:	d106      	bne.n	8000f48 <__udivmoddi4+0x208>
 8000f3a:	45ce      	cmp	lr, r9
 8000f3c:	d204      	bcs.n	8000f48 <__udivmoddi4+0x208>
 8000f3e:	3801      	subs	r0, #1
 8000f40:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f44:	eb68 0307 	sbc.w	r3, r8, r7
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x222>
 8000f4a:	ebbe 020c 	subs.w	r2, lr, ip
 8000f4e:	eb64 0403 	sbc.w	r4, r4, r3
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	40cc      	lsrs	r4, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e73e      	b.n	8000de4 <__udivmoddi4+0xa4>
 8000f66:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f6a:	f1c3 0120 	rsb	r1, r3, #32
 8000f6e:	fa04 f203 	lsl.w	r2, r4, r3
 8000f72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f7c:	fa20 f101 	lsr.w	r1, r0, r1
 8000f80:	fa1f f68e 	uxth.w	r6, lr
 8000f84:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	fb07 4410 	mls	r4, r7, r0, r4
 8000f8e:	0c11      	lsrs	r1, r2, #16
 8000f90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f94:	fb00 f406 	mul.w	r4, r0, r6
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d90e      	bls.n	8000fba <__udivmoddi4+0x27a>
 8000f9c:	eb1e 0101 	adds.w	r1, lr, r1
 8000fa0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fa4:	bf2c      	ite	cs
 8000fa6:	f04f 0901 	movcs.w	r9, #1
 8000faa:	f04f 0900 	movcc.w	r9, #0
 8000fae:	428c      	cmp	r4, r1
 8000fb0:	d902      	bls.n	8000fb8 <__udivmoddi4+0x278>
 8000fb2:	f1b9 0f00 	cmp.w	r9, #0
 8000fb6:	d02c      	beq.n	8001012 <__udivmoddi4+0x2d2>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	1b09      	subs	r1, r1, r4
 8000fbc:	b292      	uxth	r2, r2
 8000fbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000fc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fca:	fb04 f106 	mul.w	r1, r4, r6
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d907      	bls.n	8000fe2 <__udivmoddi4+0x2a2>
 8000fd2:	eb1e 0202 	adds.w	r2, lr, r2
 8000fd6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fda:	d201      	bcs.n	8000fe0 <__udivmoddi4+0x2a0>
 8000fdc:	4291      	cmp	r1, r2
 8000fde:	d815      	bhi.n	800100c <__udivmoddi4+0x2cc>
 8000fe0:	4644      	mov	r4, r8
 8000fe2:	1a52      	subs	r2, r2, r1
 8000fe4:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000fe8:	e721      	b.n	8000e2e <__udivmoddi4+0xee>
 8000fea:	1a86      	subs	r6, r0, r2
 8000fec:	eb64 0303 	sbc.w	r3, r4, r3
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	e70e      	b.n	8000e12 <__udivmoddi4+0xd2>
 8000ff4:	3c02      	subs	r4, #2
 8000ff6:	4472      	add	r2, lr
 8000ff8:	e735      	b.n	8000e66 <__udivmoddi4+0x126>
 8000ffa:	3902      	subs	r1, #2
 8000ffc:	4472      	add	r2, lr
 8000ffe:	e6d0      	b.n	8000da2 <__udivmoddi4+0x62>
 8001000:	44f4      	add	ip, lr
 8001002:	3802      	subs	r0, #2
 8001004:	e6e3      	b.n	8000dce <__udivmoddi4+0x8e>
 8001006:	44f4      	add	ip, lr
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x152>
 800100c:	3c02      	subs	r4, #2
 800100e:	4472      	add	r2, lr
 8001010:	e7e7      	b.n	8000fe2 <__udivmoddi4+0x2a2>
 8001012:	3802      	subs	r0, #2
 8001014:	4471      	add	r1, lr
 8001016:	e7d0      	b.n	8000fba <__udivmoddi4+0x27a>
 8001018:	3b02      	subs	r3, #2
 800101a:	443c      	add	r4, r7
 800101c:	e782      	b.n	8000f24 <__udivmoddi4+0x1e4>
 800101e:	3802      	subs	r0, #2
 8001020:	443c      	add	r4, r7
 8001022:	e76a      	b.n	8000efa <__udivmoddi4+0x1ba>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <accelInit>:
 * 		   possibly interrupting during i2c communication, causing a hanging program
 * @param  void
 * @retval void
 */
void accelInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	PRINTF("____ACCELEROMETER BEGIN INITIALIZATION_____\r\n\r\n");
 800102c:	4923      	ldr	r1, [pc, #140]	@ (80010bc <accelInit+0x94>)
 800102e:	2001      	movs	r0, #1
 8001030:	f005 fea0 	bl	8006d74 <TraceSend>
	accelDevice.partNumber = LIS2DW; // default to be changed below
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <accelInit+0x98>)
 8001036:	2244      	movs	r2, #68	@ 0x44
 8001038:	701a      	strb	r2, [r3, #0]
	accelDevice.address = LIS2_SLAVE_ADDREESS;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <accelInit+0x98>)
 800103c:	2232      	movs	r2, #50	@ 0x32
 800103e:	805a      	strh	r2, [r3, #2]
	accelDevice.state = ACC_OK;
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <accelInit+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	711a      	strb	r2, [r3, #4]
// KCS do who ami  and set the device part number
	accelWhoAmI();
 8001046:	f000 f9f5 	bl	8001434 <accelWhoAmI>
//	HAL_NVIC_DisableIRQ(EXTI6_IRQn); //Disable Interrupts
//	HAL_NVIC_DisableIRQ(GPIO_PIN_5);
	accelWriteRegisterCommand(LIS2DW_CTRL_2, LIS2DW_SOFT_RESET); //Reset
 800104a:	2140      	movs	r1, #64	@ 0x40
 800104c:	2021      	movs	r0, #33	@ 0x21
 800104e:	f000 f8b1 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_CTRL_2, LIS2DW_REBOOOT); //Reboot
 8001052:	2180      	movs	r1, #128	@ 0x80
 8001054:	2021      	movs	r0, #33	@ 0x21
 8001056:	f000 f8ad 	bl	80011b4 <accelWriteRegisterCommand>
	//Device needs up to 20 ms to reset according to data sheet
	HAL_Delay(20);
 800105a:	2014      	movs	r0, #20
 800105c:	f015 fa12 	bl	8016484 <HAL_Delay>
	setAccelMode(LIS_MODE_LOW_POWER); //Set power mode
 8001060:	2000      	movs	r0, #0
 8001062:	f000 fbd7 	bl	8001814 <setAccelMode>
	setAccelResolution(LIS_RESOLUTION_14); //Set resolution
 8001066:	2001      	movs	r0, #1
 8001068:	f000 fc30 	bl	80018cc <setAccelResolution>
	setAccelDataRate(LIS_DATA_RATE_50); //Set output data rate
 800106c:	2004      	movs	r0, #4
 800106e:	f000 fad1 	bl	8001614 <setAccelDataRate>
	accelWriteRegisterCommand(LIS2DW_CTRL_3, LIS2DW_CTRL_3_LIR); //Set latched interrupts
 8001072:	2110      	movs	r1, #16
 8001074:	2022      	movs	r0, #34	@ 0x22
 8001076:	f000 f89d 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_CTRL_6, LIS2DW_CTRL_6_SET); //Low noise selection
 800107a:	2104      	movs	r1, #4
 800107c:	2025      	movs	r0, #37	@ 0x25
 800107e:	f000 f899 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_WAKE_DURATION, WRITE_ZERO); //Set wake duration
 8001082:	2100      	movs	r1, #0
 8001084:	2035      	movs	r0, #53	@ 0x35
 8001086:	f000 f895 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_WAKE_THRESH_REG, LIS2DW_WAKE_THRESH_VAL); //Set wakeup threshold
 800108a:	210d      	movs	r1, #13
 800108c:	2034      	movs	r0, #52	@ 0x34
 800108e:	f000 f891 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_FF_REG, LIS2DW_FREE_SET);
 8001092:	2125      	movs	r1, #37	@ 0x25
 8001094:	2036      	movs	r0, #54	@ 0x36
 8001096:	f000 f88d 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_INT1_CTRL_4, LIS2DW_CTRL_4_SET); //Set Wake Up and FF interrupt
 800109a:	2130      	movs	r1, #48	@ 0x30
 800109c:	2023      	movs	r0, #35	@ 0x23
 800109e:	f000 f889 	bl	80011b4 <accelWriteRegisterCommand>
	accelWriteRegisterCommand(LIS2DW_CTRL_7, LIS2DW_CTRL_7_SET); //Enable interrupts INT_Enable
 80010a2:	2120      	movs	r1, #32
 80010a4:	203f      	movs	r0, #63	@ 0x3f
 80010a6:	f000 f885 	bl	80011b4 <accelWriteRegisterCommand>
//	HAL_NVIC_EnableIRQ(EXTI6_IRQn); //Reenable
//	HAL_NVIC_EnableIRQ(GPIO_PIN_5);
	accelClearLatch();
 80010aa:	f000 f9fd 	bl	80014a8 <accelClearLatch>
	PRINTF("____ACCELEROMETER END INITIALIZATION_____\r\n\r\n");
 80010ae:	4905      	ldr	r1, [pc, #20]	@ (80010c4 <accelInit+0x9c>)
 80010b0:	2001      	movs	r0, #1
 80010b2:	f005 fe5f 	bl	8006d74 <TraceSend>
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	0802b168 	.word	0x0802b168
 80010c0:	200005d0 	.word	0x200005d0
 80010c4:	0802b198 	.word	0x0802b198

080010c8 <accelDataInit>:
 * @note
 * @param  void
 * @retval void
 */
void accelDataInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	privateAccelData.Accel_X = 0;
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <accelDataInit+0x28>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	801a      	strh	r2, [r3, #0]
	privateAccelData.Accel_Y = 0;
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <accelDataInit+0x28>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	805a      	strh	r2, [r3, #2]
	privateAccelData.Accel_Z = 0;
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <accelDataInit+0x28>)
 80010da:	2200      	movs	r2, #0
 80010dc:	809a      	strh	r2, [r3, #4]
	deviceID = 0;
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <accelDataInit+0x2c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200005d8 	.word	0x200005d8
 80010f4:	200005cc 	.word	0x200005cc

080010f8 <accelParametersInit>:
 * @note
 * @param  void
 * @retval void
 */
void accelParametersInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
	privateAccelParameters.hysteresis = DEF_HYSTERESIS_ACCEL;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <accelParametersInit+0x38>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
	privateAccelParameters.mode = DEF_MODE_ACCEL;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <accelParametersInit+0x38>)
 8001104:	2203      	movs	r2, #3
 8001106:	701a      	strb	r2, [r3, #0]
	privateAccelParameters.range = DEF_RANGE_ACCEL;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <accelParametersInit+0x38>)
 800110a:	2201      	movs	r2, #1
 800110c:	705a      	strb	r2, [r3, #1]
	privateAccelParameters.threshold = DEF_THRESH_ACCEL;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <accelParametersInit+0x38>)
 8001110:	2205      	movs	r2, #5
 8001112:	605a      	str	r2, [r3, #4]
	privateAccelParameters.duration = DEF_DURATION;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <accelParametersInit+0x38>)
 8001116:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800111a:	819a      	strh	r2, [r3, #12]
	privateAccelParameters.mutePeriod = DEF_MUTE_ACCEL;
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <accelParametersInit+0x38>)
 800111e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8001122:	81da      	strh	r2, [r3, #14]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200005e0 	.word	0x200005e0

08001134 <accelReadRegister>:
 * @param  ACC_I2C_Command
 * 		   Typedefined enumerated list of registers and commands
 * @retval uint8_t representing the value of the register
 */
uint8_t accelReadRegister(ACCEL_I2C_Command readReg)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af02      	add	r7, sp, #8
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	uint8_t reg;
	uint8_t regVal = 255;
 800113e:	23ff      	movs	r3, #255	@ 0xff
 8001140:	737b      	strb	r3, [r7, #13]

	// KCS make this a Switch statement, Bomb out if part number is "unknown"
	switch(accelDevice.partNumber)
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <accelReadRegister+0x74>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b44      	cmp	r3, #68	@ 0x44
 8001148:	d001      	beq.n	800114e <accelReadRegister+0x1a>
 800114a:	2b47      	cmp	r3, #71	@ 0x47
 800114c:	d122      	bne.n	8001194 <accelReadRegister+0x60>
	{
		case LIS2DW: //Fall through because they have the same address
		case LIS2DUX:
			reg = readReg;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	73bb      	strb	r3, [r7, #14]
			//csc for synchronous operation
			ret = HAL_I2C_Master_Transmit(&hi2c1, accelDevice.address, &reg, 1, 0xFF);
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <accelReadRegister+0x74>)
 8001154:	8859      	ldrh	r1, [r3, #2]
 8001156:	f107 020e 	add.w	r2, r7, #14
 800115a:	23ff      	movs	r3, #255	@ 0xff
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	4812      	ldr	r0, [pc, #72]	@ (80011ac <accelReadRegister+0x78>)
 8001162:	f019 f96d 	bl	801a440 <HAL_I2C_Master_Transmit>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
			ret = HAL_I2C_Master_Receive(&hi2c1, accelDevice.address + 1, &regVal, 1, 0xFF);
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <accelReadRegister+0x74>)
 800116c:	885b      	ldrh	r3, [r3, #2]
 800116e:	3301      	adds	r3, #1
 8001170:	b299      	uxth	r1, r3
 8001172:	f107 020d 	add.w	r2, r7, #13
 8001176:	23ff      	movs	r3, #255	@ 0xff
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	480b      	ldr	r0, [pc, #44]	@ (80011ac <accelReadRegister+0x78>)
 800117e:	f019 fa53 	bl	801a628 <HAL_I2C_Master_Receive>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]

			if(ret == HAL_OK)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <accelReadRegister+0x5c>
			{
				return regVal;
 800118c:	7b7b      	ldrb	r3, [r7, #13]
 800118e:	e006      	b.n	800119e <accelReadRegister+0x6a>
			}
			else
			{
				return 0;
 8001190:	2300      	movs	r3, #0
 8001192:	e004      	b.n	800119e <accelReadRegister+0x6a>
			}
			break;
		default:
			PRINTF("Can not read unknown address\r\n");
 8001194:	4906      	ldr	r1, [pc, #24]	@ (80011b0 <accelReadRegister+0x7c>)
 8001196:	2001      	movs	r0, #1
 8001198:	f005 fdec 	bl	8006d74 <TraceSend>
			return regVal;
 800119c:	7b7b      	ldrb	r3, [r7, #13]
	}
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200005d0 	.word	0x200005d0
 80011ac:	2007d068 	.word	0x2007d068
 80011b0:	0802b1c8 	.word	0x0802b1c8

080011b4 <accelWriteRegisterCommand>:
 * @param  ACC_I2C_Command representing the register to write
 * 		   ACC_I2C_Command representing the data to write
 * @retval void - May want to change to boolean
 */
void accelWriteRegisterCommand(ACCEL_I2C_Command accReg, ACCEL_I2C_Command command)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b099      	sub	sp, #100	@ 0x64
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	char failureAck[20] = "";
 80011c4:	2300      	movs	r3, #0
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80011c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
	uint8_t txReg[2];
	txReg[0] = accReg;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txReg[1] = command;
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	switch(accelDevice.partNumber)
 80011e2:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <accelWriteRegisterCommand+0x124>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b44      	cmp	r3, #68	@ 0x44
 80011e8:	d001      	beq.n	80011ee <accelWriteRegisterCommand+0x3a>
 80011ea:	2b47      	cmp	r3, #71	@ 0x47
 80011ec:	d169      	bne.n	80012c2 <accelWriteRegisterCommand+0x10e>
	{
		case LIS2DW:
		case LIS2DUX:
			ret = HAL_I2C_Master_Transmit(&hi2c1, accelDevice.address, txReg, 2, 0xFFFF);
 80011ee:	4b3a      	ldr	r3, [pc, #232]	@ (80012d8 <accelWriteRegisterCommand+0x124>)
 80011f0:	8859      	ldrh	r1, [r3, #2]
 80011f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80011f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	4837      	ldr	r0, [pc, #220]	@ (80012dc <accelWriteRegisterCommand+0x128>)
 8001200:	f019 f91e 	bl	801a440 <HAL_I2C_Master_Transmit>
 8001204:	4603      	mov	r3, r0
 8001206:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			//	HAL_ERROR    = 0x01,
			//	HAL_BUSY     = 0x02,
			//	HAL_TIMEOUT  = 0x03
			if(ret != HAL_OK)
 800120a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800120e:	2b00      	cmp	r3, #0
 8001210:	d05c      	beq.n	80012cc <accelWriteRegisterCommand+0x118>
			{
				//Consider doing a retry
				//PRINTF needs reason for error
				if(ret == HAL_ERROR)
 8001212:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001216:	2b01      	cmp	r3, #1
 8001218:	d118      	bne.n	800124c <accelWriteRegisterCommand+0x98>
				{
					char err[] = "HAL_ERROR\0";
 800121a:	4a31      	ldr	r2, [pc, #196]	@ (80012e0 <accelWriteRegisterCommand+0x12c>)
 800121c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001220:	ca07      	ldmia	r2, {r0, r1, r2}
 8001222:	c303      	stmia	r3!, {r0, r1}
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	3302      	adds	r3, #2
 8001228:	0c12      	lsrs	r2, r2, #16
 800122a:	701a      	strb	r2, [r3, #0]
					int len = strlen(err);
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f82b 	bl	800028c <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	64bb      	str	r3, [r7, #72]	@ 0x48
					strncpy(failureAck, err, len);
 800123a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800123c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001240:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001244:	4618      	mov	r0, r3
 8001246:	f025 ffda 	bl	80271fe <strncpy>
 800124a:	e032      	b.n	80012b2 <accelWriteRegisterCommand+0xfe>
				}
				else if(ret == HAL_BUSY)
 800124c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001250:	2b02      	cmp	r3, #2
 8001252:	d115      	bne.n	8001280 <accelWriteRegisterCommand+0xcc>
				{
					char err[] = "HAL_BUSY\0";
 8001254:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <accelWriteRegisterCommand+0x130>)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	ca07      	ldmia	r2, {r0, r1, r2}
 800125c:	c303      	stmia	r3!, {r0, r1}
 800125e:	801a      	strh	r2, [r3, #0]
					int len = strlen(err);
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f811 	bl	800028c <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	64fb      	str	r3, [r7, #76]	@ 0x4c
					strncpy(failureAck, err, len);
 800126e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001270:	f107 0118 	add.w	r1, r7, #24
 8001274:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001278:	4618      	mov	r0, r3
 800127a:	f025 ffc0 	bl	80271fe <strncpy>
 800127e:	e018      	b.n	80012b2 <accelWriteRegisterCommand+0xfe>
				}
				else if(ret == HAL_TIMEOUT)
 8001280:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001284:	2b03      	cmp	r3, #3
 8001286:	d114      	bne.n	80012b2 <accelWriteRegisterCommand+0xfe>
				{
					char err[] = "HAL_TIMEOUT\0";
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <accelWriteRegisterCommand+0x134>)
 800128a:	f107 0408 	add.w	r4, r7, #8
 800128e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001290:	c407      	stmia	r4!, {r0, r1, r2}
 8001292:	7023      	strb	r3, [r4, #0]
					int len = strlen(err);
 8001294:	f107 0308 	add.w	r3, r7, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f7fe fff7 	bl	800028c <strlen>
 800129e:	4603      	mov	r3, r0
 80012a0:	653b      	str	r3, [r7, #80]	@ 0x50
					strncpy(failureAck, err, len);
 80012a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80012a4:	f107 0108 	add.w	r1, r7, #8
 80012a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012ac:	4618      	mov	r0, r3
 80012ae:	f025 ffa6 	bl	80271fe <strncpy>
				}
				PRINTF("Unsuccessful transmission: %s\r\n", failureAck);
 80012b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012b6:	461a      	mov	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <accelWriteRegisterCommand+0x138>)
 80012ba:	2001      	movs	r0, #1
 80012bc:	f005 fd5a 	bl	8006d74 <TraceSend>
			}
			break;
 80012c0:	e004      	b.n	80012cc <accelWriteRegisterCommand+0x118>
		default:
			PRINTF("Accelerometer not supported, can not write to register\r\n");
 80012c2:	490b      	ldr	r1, [pc, #44]	@ (80012f0 <accelWriteRegisterCommand+0x13c>)
 80012c4:	2001      	movs	r0, #1
 80012c6:	f005 fd55 	bl	8006d74 <TraceSend>
	}
}
 80012ca:	e000      	b.n	80012ce <accelWriteRegisterCommand+0x11a>
			break;
 80012cc:	bf00      	nop
}
 80012ce:	bf00      	nop
 80012d0:	375c      	adds	r7, #92	@ 0x5c
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200005d0 	.word	0x200005d0
 80012dc:	2007d068 	.word	0x2007d068
 80012e0:	0802b244 	.word	0x0802b244
 80012e4:	0802b250 	.word	0x0802b250
 80012e8:	0802b25c 	.word	0x0802b25c
 80012ec:	0802b1e8 	.word	0x0802b1e8
 80012f0:	0802b208 	.word	0x0802b208

080012f4 <accelWriteRegisterRaw>:
 * @param  ACC_I2C_Command representing the register to write
 * 		   uint8_t representing the data to write
 * @retval void - May want to change to boolean
 */
void accelWriteRegisterRaw(ACCEL_I2C_Command accReg, uint8_t command)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b099      	sub	sp, #100	@ 0x64
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	char failureAck[20] = "";
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
 8001308:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
	uint8_t txReg[2];
	txReg[0] = accReg;
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txReg[1] = command;
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	switch(accelDevice.partNumber)
 8001322:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <accelWriteRegisterRaw+0x124>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b44      	cmp	r3, #68	@ 0x44
 8001328:	d001      	beq.n	800132e <accelWriteRegisterRaw+0x3a>
 800132a:	2b47      	cmp	r3, #71	@ 0x47
 800132c:	d169      	bne.n	8001402 <accelWriteRegisterRaw+0x10e>
	{
		case LIS2DW:
		case LIS2DUX:
			ret = HAL_I2C_Master_Transmit(&hi2c1, accelDevice.address, txReg, 2, 0xFFFF);
 800132e:	4b3a      	ldr	r3, [pc, #232]	@ (8001418 <accelWriteRegisterRaw+0x124>)
 8001330:	8859      	ldrh	r1, [r3, #2]
 8001332:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2302      	movs	r3, #2
 800133e:	4837      	ldr	r0, [pc, #220]	@ (800141c <accelWriteRegisterRaw+0x128>)
 8001340:	f019 f87e 	bl	801a440 <HAL_I2C_Master_Transmit>
 8001344:	4603      	mov	r3, r0
 8001346:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			//	HAL_ERROR    = 0x01,
			//	HAL_BUSY     = 0x02,
			//	HAL_TIMEOUT  = 0x03
			if(ret != HAL_OK)
 800134a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800134e:	2b00      	cmp	r3, #0
 8001350:	d05c      	beq.n	800140c <accelWriteRegisterRaw+0x118>
			{
				//Consider doing a retry
				//PRINTF needs reason for error
				if(ret == HAL_ERROR)
 8001352:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001356:	2b01      	cmp	r3, #1
 8001358:	d118      	bne.n	800138c <accelWriteRegisterRaw+0x98>
				{
					char err[] = "HAL_ERROR\0";
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <accelWriteRegisterRaw+0x12c>)
 800135c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001360:	ca07      	ldmia	r2, {r0, r1, r2}
 8001362:	c303      	stmia	r3!, {r0, r1}
 8001364:	801a      	strh	r2, [r3, #0]
 8001366:	3302      	adds	r3, #2
 8001368:	0c12      	lsrs	r2, r2, #16
 800136a:	701a      	strb	r2, [r3, #0]
					int len = strlen(err);
 800136c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001370:	4618      	mov	r0, r3
 8001372:	f7fe ff8b 	bl	800028c <strlen>
 8001376:	4603      	mov	r3, r0
 8001378:	64bb      	str	r3, [r7, #72]	@ 0x48
					strncpy(failureAck, err, len);
 800137a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800137c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001380:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001384:	4618      	mov	r0, r3
 8001386:	f025 ff3a 	bl	80271fe <strncpy>
 800138a:	e032      	b.n	80013f2 <accelWriteRegisterRaw+0xfe>
				}
				else if(ret == HAL_BUSY)
 800138c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001390:	2b02      	cmp	r3, #2
 8001392:	d115      	bne.n	80013c0 <accelWriteRegisterRaw+0xcc>
				{
					char err[] = "HAL_BUSY\0";
 8001394:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <accelWriteRegisterRaw+0x130>)
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	ca07      	ldmia	r2, {r0, r1, r2}
 800139c:	c303      	stmia	r3!, {r0, r1}
 800139e:	801a      	strh	r2, [r3, #0]
					int len = strlen(err);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff71 	bl	800028c <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
					strncpy(failureAck, err, len);
 80013ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013b0:	f107 0118 	add.w	r1, r7, #24
 80013b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013b8:	4618      	mov	r0, r3
 80013ba:	f025 ff20 	bl	80271fe <strncpy>
 80013be:	e018      	b.n	80013f2 <accelWriteRegisterRaw+0xfe>
				}
				else if(ret == HAL_TIMEOUT)
 80013c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d114      	bne.n	80013f2 <accelWriteRegisterRaw+0xfe>
				{
					char err[] = "HAL_TIMEOUT\0";
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <accelWriteRegisterRaw+0x134>)
 80013ca:	f107 0408 	add.w	r4, r7, #8
 80013ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d0:	c407      	stmia	r4!, {r0, r1, r2}
 80013d2:	7023      	strb	r3, [r4, #0]
					int len = strlen(err);
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4618      	mov	r0, r3
 80013da:	f7fe ff57 	bl	800028c <strlen>
 80013de:	4603      	mov	r3, r0
 80013e0:	653b      	str	r3, [r7, #80]	@ 0x50
					strncpy(failureAck, err, len);
 80013e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80013e4:	f107 0108 	add.w	r1, r7, #8
 80013e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013ec:	4618      	mov	r0, r3
 80013ee:	f025 ff06 	bl	80271fe <strncpy>
				}
				PRINTF("Unsuccessful transmission: %s\r\n", failureAck);
 80013f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013f6:	461a      	mov	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	@ (800142c <accelWriteRegisterRaw+0x138>)
 80013fa:	2001      	movs	r0, #1
 80013fc:	f005 fcba 	bl	8006d74 <TraceSend>
			}
			break;
 8001400:	e004      	b.n	800140c <accelWriteRegisterRaw+0x118>
		default:
			PRINTF("Accelerometer not supported, can not write to register\r\n");
 8001402:	490b      	ldr	r1, [pc, #44]	@ (8001430 <accelWriteRegisterRaw+0x13c>)
 8001404:	2001      	movs	r0, #1
 8001406:	f005 fcb5 	bl	8006d74 <TraceSend>
	}
}
 800140a:	e000      	b.n	800140e <accelWriteRegisterRaw+0x11a>
			break;
 800140c:	bf00      	nop
}
 800140e:	bf00      	nop
 8001410:	375c      	adds	r7, #92	@ 0x5c
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	200005d0 	.word	0x200005d0
 800141c:	2007d068 	.word	0x2007d068
 8001420:	0802b244 	.word	0x0802b244
 8001424:	0802b250 	.word	0x0802b250
 8001428:	0802b25c 	.word	0x0802b25c
 800142c:	0802b1e8 	.word	0x0802b1e8
 8001430:	0802b208 	.word	0x0802b208

08001434 <accelWhoAmI>:
 * @note   May be worth checking the address space on i2c bus to check for unknown devices.
 * @param  void
 * @retval void
 */
void accelWhoAmI(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	uint8_t partNum = accelReadRegister(LIS2_ID);
 800143a:	200f      	movs	r0, #15
 800143c:	f7ff fe7a 	bl	8001134 <accelReadRegister>
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]

	if(partNum == LIS2DW)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	2b44      	cmp	r3, #68	@ 0x44
 8001448:	d10a      	bne.n	8001460 <accelWhoAmI+0x2c>
	{
		PRINTF("LIS2DW12 Identified\r\n");
 800144a:	4913      	ldr	r1, [pc, #76]	@ (8001498 <accelWhoAmI+0x64>)
 800144c:	2001      	movs	r0, #1
 800144e:	f005 fc91 	bl	8006d74 <TraceSend>
		accelDevice.partNumber = LIS2DW;
 8001452:	4b12      	ldr	r3, [pc, #72]	@ (800149c <accelWhoAmI+0x68>)
 8001454:	2244      	movs	r2, #68	@ 0x44
 8001456:	701a      	strb	r2, [r3, #0]
		accelDevice.address = LIS2_SLAVE_ADDREESS;
 8001458:	4b10      	ldr	r3, [pc, #64]	@ (800149c <accelWhoAmI+0x68>)
 800145a:	2232      	movs	r2, #50	@ 0x32
 800145c:	805a      	strh	r2, [r3, #2]
	{
		PRINTF("No accelerometer identified, setting address unknown\r\n");
		accelDevice.partNumber = ACC_UNKNOWN_DEVICE;
		accelDevice.address = UNKNOWN_SLAVE_ADDRESS;
	}
}
 800145e:	e017      	b.n	8001490 <accelWhoAmI+0x5c>
	else if(partNum == LIS2DUX)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b47      	cmp	r3, #71	@ 0x47
 8001464:	d10a      	bne.n	800147c <accelWhoAmI+0x48>
		PRINTF("LIS2DUX12 Identified\r\n");
 8001466:	490e      	ldr	r1, [pc, #56]	@ (80014a0 <accelWhoAmI+0x6c>)
 8001468:	2001      	movs	r0, #1
 800146a:	f005 fc83 	bl	8006d74 <TraceSend>
		accelDevice.partNumber = LIS2DUX;
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <accelWhoAmI+0x68>)
 8001470:	2247      	movs	r2, #71	@ 0x47
 8001472:	701a      	strb	r2, [r3, #0]
		accelDevice.address = LIS2_SLAVE_ADDREESS;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <accelWhoAmI+0x68>)
 8001476:	2232      	movs	r2, #50	@ 0x32
 8001478:	805a      	strh	r2, [r3, #2]
}
 800147a:	e009      	b.n	8001490 <accelWhoAmI+0x5c>
		PRINTF("No accelerometer identified, setting address unknown\r\n");
 800147c:	4909      	ldr	r1, [pc, #36]	@ (80014a4 <accelWhoAmI+0x70>)
 800147e:	2001      	movs	r0, #1
 8001480:	f005 fc78 	bl	8006d74 <TraceSend>
		accelDevice.partNumber = ACC_UNKNOWN_DEVICE;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <accelWhoAmI+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
		accelDevice.address = UNKNOWN_SLAVE_ADDRESS;
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <accelWhoAmI+0x68>)
 800148c:	2200      	movs	r2, #0
 800148e:	805a      	strh	r2, [r3, #2]
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	0802b26c 	.word	0x0802b26c
 800149c:	200005d0 	.word	0x200005d0
 80014a0:	0802b284 	.word	0x0802b284
 80014a4:	0802b29c 	.word	0x0802b29c

080014a8 <accelClearLatch>:
 * @note
 * @param  void
 * @retval void
 */
void accelClearLatch(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
	switch(accelDevice.partNumber)
 80014ae:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <accelClearLatch+0xcc>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b44      	cmp	r3, #68	@ 0x44
 80014b4:	d002      	beq.n	80014bc <accelClearLatch+0x14>
 80014b6:	2b47      	cmp	r3, #71	@ 0x47
 80014b8:	d04d      	beq.n	8001556 <accelClearLatch+0xae>
 80014ba:	e051      	b.n	8001560 <accelClearLatch+0xb8>
	{
		case LIS2DW:
			uint8_t sourceVal = accelReadRegister(LIS2DW_ALL_INT_SRC);
 80014bc:	203b      	movs	r0, #59	@ 0x3b
 80014be:	f7ff fe39 	bl	8001134 <accelReadRegister>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
			uint8_t wakeVal = accelReadRegister(LIS2DW_WAKE_SRC);
 80014c6:	2038      	movs	r0, #56	@ 0x38
 80014c8:	f7ff fe34 	bl	8001134 <accelReadRegister>
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
			//PRINTF("Wake Value: %d\r\n", wakeVal);
			uint8_t statusVal = accelReadRegister(LIS2DW_STATUS_REG);
 80014d0:	2027      	movs	r0, #39	@ 0x27
 80014d2:	f7ff fe2f 	bl	8001134 <accelReadRegister>
 80014d6:	4603      	mov	r3, r0
 80014d8:	71bb      	strb	r3, [r7, #6]
			//PRINTF("Status Value: %d\r\n", statusVal);
			sourceVal = accelReadRegister(LIS2DW_ALL_INT_SRC);
 80014da:	203b      	movs	r0, #59	@ 0x3b
 80014dc:	f7ff fe2a 	bl	8001134 <accelReadRegister>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]

			int counter = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
			while(sourceVal != 0)
 80014e8:	e014      	b.n	8001514 <accelClearLatch+0x6c>
			{
				sourceVal = accelReadRegister(LIS2DW_ALL_INT_SRC);
 80014ea:	203b      	movs	r0, #59	@ 0x3b
 80014ec:	f7ff fe22 	bl	8001134 <accelReadRegister>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
				wakeVal = accelReadRegister(LIS2DW_WAKE_SRC);
 80014f4:	2038      	movs	r0, #56	@ 0x38
 80014f6:	f7ff fe1d 	bl	8001134 <accelReadRegister>
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
				statusVal = accelReadRegister(LIS2DW_STATUS_REG);
 80014fe:	2027      	movs	r0, #39	@ 0x27
 8001500:	f7ff fe18 	bl	8001134 <accelReadRegister>
 8001504:	4603      	mov	r3, r0
 8001506:	71bb      	strb	r3, [r7, #6]
				if(counter == 10)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d006      	beq.n	800151c <accelClearLatch+0x74>
				{
					break;
				}
				counter++;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
			while(sourceVal != 0)
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1e7      	bne.n	80014ea <accelClearLatch+0x42>
 800151a:	e000      	b.n	800151e <accelClearLatch+0x76>
					break;
 800151c:	bf00      	nop
			}

			if(sourceVal == 0)
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10a      	bne.n	800153a <accelClearLatch+0x92>
			{
				PRINTF("Latched interrupt cleared\r\n");
 8001524:	4914      	ldr	r1, [pc, #80]	@ (8001578 <accelClearLatch+0xd0>)
 8001526:	2001      	movs	r0, #1
 8001528:	f005 fc24 	bl	8006d74 <TraceSend>
				PRINTF("Source: %d\r\n\r\n", sourceVal);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	461a      	mov	r2, r3
 8001530:	4912      	ldr	r1, [pc, #72]	@ (800157c <accelClearLatch+0xd4>)
 8001532:	2001      	movs	r0, #1
 8001534:	f005 fc1e 	bl	8006d74 <TraceSend>
 8001538:	e009      	b.n	800154e <accelClearLatch+0xa6>
			}
			else
			{
				PRINTF("Latched interrupt NOT cleared\r\n");
 800153a:	4911      	ldr	r1, [pc, #68]	@ (8001580 <accelClearLatch+0xd8>)
 800153c:	2001      	movs	r0, #1
 800153e:	f005 fc19 	bl	8006d74 <TraceSend>
				PRINTF("Source: %d\r\n\r\n", sourceVal);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	461a      	mov	r2, r3
 8001546:	490d      	ldr	r1, [pc, #52]	@ (800157c <accelClearLatch+0xd4>)
 8001548:	2001      	movs	r0, #1
 800154a:	f005 fc13 	bl	8006d74 <TraceSend>
			}

			accelTrigger = false;
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <accelClearLatch+0xdc>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
			break;
 8001554:	e009      	b.n	800156a <accelClearLatch+0xc2>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <accelClearLatch+0xe0>)
 8001558:	2001      	movs	r0, #1
 800155a:	f005 fc0b 	bl	8006d74 <TraceSend>
			break;
 800155e:	e004      	b.n	800156a <accelClearLatch+0xc2>
		default:
			PRINTF("Accelerometer not supported, can not clear latch\r\n");
 8001560:	490a      	ldr	r1, [pc, #40]	@ (800158c <accelClearLatch+0xe4>)
 8001562:	2001      	movs	r0, #1
 8001564:	f005 fc06 	bl	8006d74 <TraceSend>
	}
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200005d0 	.word	0x200005d0
 8001578:	0802b358 	.word	0x0802b358
 800157c:	0802b374 	.word	0x0802b374
 8001580:	0802b384 	.word	0x0802b384
 8001584:	200005cd 	.word	0x200005cd
 8001588:	0802b3a4 	.word	0x0802b3a4
 800158c:	0802b3bc 	.word	0x0802b3bc

08001590 <getAccelMode>:
 * @note   Returns LIS_MODE_ERROR on any error getting mode from the device
 * @param  void
 * @retval ACCEL_POWER_MODE  enum representing the power mode
 */
ACCEL_POWER_MODE getAccelMode(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t regVal = 255;
 8001596:	23ff      	movs	r3, #255	@ 0xff
 8001598:	71bb      	strb	r3, [r7, #6]
	ACCEL_POWER_MODE retMode = LIS_MODE_ERROR;
 800159a:	2303      	movs	r3, #3
 800159c:	71fb      	strb	r3, [r7, #7]

	switch(accelDevice.partNumber)
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <getAccelMode+0x78>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b44      	cmp	r3, #68	@ 0x44
 80015a4:	d002      	beq.n	80015ac <getAccelMode+0x1c>
 80015a6:	2b47      	cmp	r3, #71	@ 0x47
 80015a8:	d020      	beq.n	80015ec <getAccelMode+0x5c>
 80015aa:	e024      	b.n	80015f6 <getAccelMode+0x66>
	{
		case LIS2DW:
			regVal = accelReadRegister(LIS2DW_CTRL_1);
 80015ac:	2020      	movs	r0, #32
 80015ae:	f7ff fdc1 	bl	8001134 <accelReadRegister>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71bb      	strb	r3, [r7, #6]
			if((regVal & ACCEL_MODE_MASK) == 8)
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d102      	bne.n	80015c6 <getAccelMode+0x36>
			{
				retMode = LIS_MODE_SINGLE_DATA;
 80015c0:	2302      	movs	r3, #2
 80015c2:	71fb      	strb	r3, [r7, #7]
			}
			else
			{
				retMode = LIS_MODE_ERROR;
			}
			break;
 80015c4:	e01b      	b.n	80015fe <getAccelMode+0x6e>
			else if((regVal & ACCEL_MODE_MASK) == 4)
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d102      	bne.n	80015d6 <getAccelMode+0x46>
				retMode = LIS_MODE_HIGH_PERFORMANCE;
 80015d0:	2301      	movs	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
			break;
 80015d4:	e013      	b.n	80015fe <getAccelMode+0x6e>
			else if((regVal & ACCEL_MODE_MASK) == 0)
 80015d6:	79bb      	ldrb	r3, [r7, #6]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <getAccelMode+0x56>
				retMode = LIS_MODE_LOW_POWER;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
			break;
 80015e4:	e00b      	b.n	80015fe <getAccelMode+0x6e>
				retMode = LIS_MODE_ERROR;
 80015e6:	2303      	movs	r3, #3
 80015e8:	71fb      	strb	r3, [r7, #7]
			break;
 80015ea:	e008      	b.n	80015fe <getAccelMode+0x6e>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 80015ec:	4907      	ldr	r1, [pc, #28]	@ (800160c <getAccelMode+0x7c>)
 80015ee:	2001      	movs	r0, #1
 80015f0:	f005 fbc0 	bl	8006d74 <TraceSend>
			break;
 80015f4:	e003      	b.n	80015fe <getAccelMode+0x6e>
		default:
			PRINTF("Accelerometer not supported, can not get mode\r\n");
 80015f6:	4906      	ldr	r1, [pc, #24]	@ (8001610 <getAccelMode+0x80>)
 80015f8:	2001      	movs	r0, #1
 80015fa:	f005 fbbb 	bl	8006d74 <TraceSend>
	}

	return retMode;
 80015fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200005d0 	.word	0x200005d0
 800160c:	0802b3a4 	.word	0x0802b3a4
 8001610:	0802b43c 	.word	0x0802b43c

08001614 <setAccelDataRate>:
 * @note   ODR depends on power mode selection, best practice is to set the mode first
 * @param  ACCEL_DATA_RATE setRate
 * @retval void
 */
void setAccelDataRate(ACCEL_DATA_RATE setRate)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	uint8_t writeVal = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
	uint8_t regVal = 255;
 8001622:	23ff      	movs	r3, #255	@ 0xff
 8001624:	73bb      	strb	r3, [r7, #14]
	ACCEL_POWER_MODE mode = LIS_MODE_ERROR;
 8001626:	2303      	movs	r3, #3
 8001628:	737b      	strb	r3, [r7, #13]
	uint8_t mask;

	switch(accelDevice.partNumber)
 800162a:	4b73      	ldr	r3, [pc, #460]	@ (80017f8 <setAccelDataRate+0x1e4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b44      	cmp	r3, #68	@ 0x44
 8001630:	d003      	beq.n	800163a <setAccelDataRate+0x26>
 8001632:	2b47      	cmp	r3, #71	@ 0x47
 8001634:	f000 80d2 	beq.w	80017dc <setAccelDataRate+0x1c8>
 8001638:	e0d5      	b.n	80017e6 <setAccelDataRate+0x1d2>
	{
		case LIS2DW:
			mode = getAccelMode();
 800163a:	f7ff ffa9 	bl	8001590 <getAccelMode>
 800163e:	4603      	mov	r3, r0
 8001640:	737b      	strb	r3, [r7, #13]
			regVal = accelReadRegister(LIS2DW_CTRL_1);
 8001642:	2020      	movs	r0, #32
 8001644:	f7ff fd76 	bl	8001134 <accelReadRegister>
 8001648:	4603      	mov	r3, r0
 800164a:	73bb      	strb	r3, [r7, #14]
			mask = ACCEL_RESOLUTION_MASK + ACCEL_MODE_MASK;
 800164c:	230f      	movs	r3, #15
 800164e:	733b      	strb	r3, [r7, #12]

			if(mode != LIS_MODE_ERROR)
 8001650:	7b7b      	ldrb	r3, [r7, #13]
 8001652:	2b03      	cmp	r3, #3
 8001654:	f000 80bc 	beq.w	80017d0 <setAccelDataRate+0x1bc>
			{
				writeVal = mask & regVal; //Zeros out the ODR bits
 8001658:	7b3a      	ldrb	r2, [r7, #12]
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	4013      	ands	r3, r2
 800165e:	73fb      	strb	r3, [r7, #15]
				switch (setRate)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b09      	cmp	r3, #9
 8001664:	f200 80af 	bhi.w	80017c6 <setAccelDataRate+0x1b2>
 8001668:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <setAccelDataRate+0x5c>)
 800166a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800166e:	bf00      	nop
 8001670:	08001699 	.word	0x08001699
 8001674:	080016a5 	.word	0x080016a5
 8001678:	080016d7 	.word	0x080016d7
 800167c:	080016e9 	.word	0x080016e9
 8001680:	080016fb 	.word	0x080016fb
 8001684:	0800170d 	.word	0x0800170d
 8001688:	0800171f 	.word	0x0800171f
 800168c:	08001731 	.word	0x08001731
 8001690:	08001763 	.word	0x08001763
 8001694:	08001795 	.word	0x08001795
				{
					case LIS_DATA_RATE_POWER_DOWN:
						accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	4619      	mov	r1, r3
 800169c:	2020      	movs	r0, #32
 800169e:	f7ff fe29 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 80016a2:	e09a      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_1:
						if(mode != LIS_MODE_HIGH_PERFORMANCE)
 80016a4:	7b7b      	ldrb	r3, [r7, #13]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d008      	beq.n	80016bc <setAccelDataRate+0xa8>
						{
							writeVal += (1 << 4);
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	3310      	adds	r3, #16
 80016ae:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4619      	mov	r1, r3
 80016b4:	2020      	movs	r0, #32
 80016b6:	f7ff fe1d 	bl	80012f4 <accelWriteRegisterRaw>
						{
							PRINTF("Can not set 1.6Hz ODR from high performance mode. ODR set to 12.5Hz\r\n");
							writeVal += (2 << 4);
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
						}
						break;
 80016ba:	e08e      	b.n	80017da <setAccelDataRate+0x1c6>
							PRINTF("Can not set 1.6Hz ODR from high performance mode. ODR set to 12.5Hz\r\n");
 80016bc:	494f      	ldr	r1, [pc, #316]	@ (80017fc <setAccelDataRate+0x1e8>)
 80016be:	2001      	movs	r0, #1
 80016c0:	f005 fb58 	bl	8006d74 <TraceSend>
							writeVal += (2 << 4);
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	3320      	adds	r3, #32
 80016c8:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2020      	movs	r0, #32
 80016d0:	f7ff fe10 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 80016d4:	e081      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_12:
						writeVal += (2 << 4);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	3320      	adds	r3, #32
 80016da:	73fb      	strb	r3, [r7, #15]
						accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4619      	mov	r1, r3
 80016e0:	2020      	movs	r0, #32
 80016e2:	f7ff fe07 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 80016e6:	e078      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_25:
						writeVal += (3 << 4);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3330      	adds	r3, #48	@ 0x30
 80016ec:	73fb      	strb	r3, [r7, #15]
						accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	4619      	mov	r1, r3
 80016f2:	2020      	movs	r0, #32
 80016f4:	f7ff fdfe 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 80016f8:	e06f      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_50:
						writeVal += (4 << 4);
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	3340      	adds	r3, #64	@ 0x40
 80016fe:	73fb      	strb	r3, [r7, #15]
						accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	4619      	mov	r1, r3
 8001704:	2020      	movs	r0, #32
 8001706:	f7ff fdf5 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 800170a:	e066      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_100:
						writeVal += (5 << 4);
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	3350      	adds	r3, #80	@ 0x50
 8001710:	73fb      	strb	r3, [r7, #15]
						accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	4619      	mov	r1, r3
 8001716:	2020      	movs	r0, #32
 8001718:	f7ff fdec 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 800171c:	e05d      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_200:
						writeVal += (6 << 4);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	3360      	adds	r3, #96	@ 0x60
 8001722:	73fb      	strb	r3, [r7, #15]
						accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4619      	mov	r1, r3
 8001728:	2020      	movs	r0, #32
 800172a:	f7ff fde3 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 800172e:	e054      	b.n	80017da <setAccelDataRate+0x1c6>
					case LIS_DATA_RATE_400:
						if(mode != LIS_MODE_HIGH_PERFORMANCE)
 8001730:	7b7b      	ldrb	r3, [r7, #13]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d00c      	beq.n	8001750 <setAccelDataRate+0x13c>
						{
							PRINTF("Can not set ODR above 200Hz in low power mode. ODR set to 200Hz\r\n");
 8001736:	4932      	ldr	r1, [pc, #200]	@ (8001800 <setAccelDataRate+0x1ec>)
 8001738:	2001      	movs	r0, #1
 800173a:	f005 fb1b 	bl	8006d74 <TraceSend>
							writeVal += (6 << 4);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	3360      	adds	r3, #96	@ 0x60
 8001742:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	4619      	mov	r1, r3
 8001748:	2020      	movs	r0, #32
 800174a:	f7ff fdd3 	bl	80012f4 <accelWriteRegisterRaw>
						else
						{
							writeVal += (7 << 4);
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
						}
						break;
 800174e:	e044      	b.n	80017da <setAccelDataRate+0x1c6>
							writeVal += (7 << 4);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	3370      	adds	r3, #112	@ 0x70
 8001754:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4619      	mov	r1, r3
 800175a:	2020      	movs	r0, #32
 800175c:	f7ff fdca 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 8001760:	e03b      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_800:
						if(mode != LIS_MODE_HIGH_PERFORMANCE)
 8001762:	7b7b      	ldrb	r3, [r7, #13]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d00c      	beq.n	8001782 <setAccelDataRate+0x16e>
						{
							PRINTF("Can not set ODR above 200Hz in low power mode. ODR set to 200Hz\r\n");
 8001768:	4925      	ldr	r1, [pc, #148]	@ (8001800 <setAccelDataRate+0x1ec>)
 800176a:	2001      	movs	r0, #1
 800176c:	f005 fb02 	bl	8006d74 <TraceSend>
							writeVal += (6 << 4);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	3360      	adds	r3, #96	@ 0x60
 8001774:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	4619      	mov	r1, r3
 800177a:	2020      	movs	r0, #32
 800177c:	f7ff fdba 	bl	80012f4 <accelWriteRegisterRaw>
						else
						{
							writeVal += (8 << 4);
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
						}
						break;
 8001780:	e02b      	b.n	80017da <setAccelDataRate+0x1c6>
							writeVal += (8 << 4);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	3b80      	subs	r3, #128	@ 0x80
 8001786:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	4619      	mov	r1, r3
 800178c:	2020      	movs	r0, #32
 800178e:	f7ff fdb1 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 8001792:	e022      	b.n	80017da <setAccelDataRate+0x1c6>

					case LIS_DATA_RATE_1600:
						if(mode != LIS_MODE_HIGH_PERFORMANCE)
 8001794:	7b7b      	ldrb	r3, [r7, #13]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d00c      	beq.n	80017b4 <setAccelDataRate+0x1a0>
						{
							PRINTF("Can not set ODR above 200Hz in low power mode. ODR set to 200Hz\r\n");
 800179a:	4919      	ldr	r1, [pc, #100]	@ (8001800 <setAccelDataRate+0x1ec>)
 800179c:	2001      	movs	r0, #1
 800179e:	f005 fae9 	bl	8006d74 <TraceSend>
							writeVal += (6 << 4);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	3360      	adds	r3, #96	@ 0x60
 80017a6:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	4619      	mov	r1, r3
 80017ac:	2020      	movs	r0, #32
 80017ae:	f7ff fda1 	bl	80012f4 <accelWriteRegisterRaw>
						else
						{
							writeVal += (9 << 4);
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
						}
						break;
 80017b2:	e012      	b.n	80017da <setAccelDataRate+0x1c6>
							writeVal += (9 << 4);
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	3b70      	subs	r3, #112	@ 0x70
 80017b8:	73fb      	strb	r3, [r7, #15]
							accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	4619      	mov	r1, r3
 80017be:	2020      	movs	r0, #32
 80017c0:	f7ff fd98 	bl	80012f4 <accelWriteRegisterRaw>
						break;
 80017c4:	e009      	b.n	80017da <setAccelDataRate+0x1c6>
					default:
						PRINTF("Invalid data rate passed to setAccelDataRate. This should never happen\r\n");
 80017c6:	490f      	ldr	r1, [pc, #60]	@ (8001804 <setAccelDataRate+0x1f0>)
 80017c8:	2001      	movs	r0, #1
 80017ca:	f005 fad3 	bl	8006d74 <TraceSend>
			}
			else
			{
				PRINTF("Accel mode error detected when trying to set ODR. This should never happen\r\n");
			}
			break;
 80017ce:	e00f      	b.n	80017f0 <setAccelDataRate+0x1dc>
				PRINTF("Accel mode error detected when trying to set ODR. This should never happen\r\n");
 80017d0:	490d      	ldr	r1, [pc, #52]	@ (8001808 <setAccelDataRate+0x1f4>)
 80017d2:	2001      	movs	r0, #1
 80017d4:	f005 face 	bl	8006d74 <TraceSend>
			break;
 80017d8:	e00a      	b.n	80017f0 <setAccelDataRate+0x1dc>
 80017da:	e009      	b.n	80017f0 <setAccelDataRate+0x1dc>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 80017dc:	490b      	ldr	r1, [pc, #44]	@ (800180c <setAccelDataRate+0x1f8>)
 80017de:	2001      	movs	r0, #1
 80017e0:	f005 fac8 	bl	8006d74 <TraceSend>
			break;
 80017e4:	e004      	b.n	80017f0 <setAccelDataRate+0x1dc>
		default:
			PRINTF("Accelerometer not supported, can not set rate\r\n");
 80017e6:	490a      	ldr	r1, [pc, #40]	@ (8001810 <setAccelDataRate+0x1fc>)
 80017e8:	2001      	movs	r0, #1
 80017ea:	f005 fac3 	bl	8006d74 <TraceSend>
	}
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200005d0 	.word	0x200005d0
 80017fc:	0802b540 	.word	0x0802b540
 8001800:	0802b588 	.word	0x0802b588
 8001804:	0802b5cc 	.word	0x0802b5cc
 8001808:	0802b618 	.word	0x0802b618
 800180c:	0802b3a4 	.word	0x0802b3a4
 8001810:	0802b668 	.word	0x0802b668

08001814 <setAccelMode>:
 * 		   Not sure if we will ever use single data mode but I included it in both set and get mode functions
 * @param  ACCEL_POWER_MODE setMode
 * @retval void
 */
void setAccelMode(ACCEL_POWER_MODE setMode)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	uint8_t writeVal = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
	uint8_t regVal = 255;
 8001822:	23ff      	movs	r3, #255	@ 0xff
 8001824:	73bb      	strb	r3, [r7, #14]
	uint8_t mask = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	737b      	strb	r3, [r7, #13]

	switch(accelDevice.partNumber)
 800182a:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <setAccelMode+0xa8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b44      	cmp	r3, #68	@ 0x44
 8001830:	d002      	beq.n	8001838 <setAccelMode+0x24>
 8001832:	2b47      	cmp	r3, #71	@ 0x47
 8001834:	d033      	beq.n	800189e <setAccelMode+0x8a>
 8001836:	e037      	b.n	80018a8 <setAccelMode+0x94>
	{
		case LIS2DW:
			regVal = accelReadRegister(LIS2DW_CTRL_1);
 8001838:	2020      	movs	r0, #32
 800183a:	f7ff fc7b 	bl	8001134 <accelReadRegister>
 800183e:	4603      	mov	r3, r0
 8001840:	73bb      	strb	r3, [r7, #14]
			mask = ACCEL_ODR_MASK + ACCEL_RESOLUTION_MASK;
 8001842:	23f3      	movs	r3, #243	@ 0xf3
 8001844:	737b      	strb	r3, [r7, #13]
			writeVal = mask & regVal; //Zeros out the mode bits
 8001846:	7b7a      	ldrb	r2, [r7, #13]
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	4013      	ands	r3, r2
 800184c:	73fb      	strb	r3, [r7, #15]
			switch (setMode)
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d015      	beq.n	8001880 <setAccelMode+0x6c>
 8001854:	2b02      	cmp	r3, #2
 8001856:	dc1c      	bgt.n	8001892 <setAccelMode+0x7e>
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <setAccelMode+0x4e>
 800185c:	2b01      	cmp	r3, #1
 800185e:	d006      	beq.n	800186e <setAccelMode+0x5a>
 8001860:	e017      	b.n	8001892 <setAccelMode+0x7e>
			{
				case LIS_MODE_LOW_POWER:
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	4619      	mov	r1, r3
 8001866:	2020      	movs	r0, #32
 8001868:	f7ff fd44 	bl	80012f4 <accelWriteRegisterRaw>
					break;
 800186c:	e016      	b.n	800189c <setAccelMode+0x88>
				case LIS_MODE_HIGH_PERFORMANCE:
					writeVal += (1 << 2);
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	3304      	adds	r3, #4
 8001872:	73fb      	strb	r3, [r7, #15]
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	4619      	mov	r1, r3
 8001878:	2020      	movs	r0, #32
 800187a:	f7ff fd3b 	bl	80012f4 <accelWriteRegisterRaw>
					break;
 800187e:	e00d      	b.n	800189c <setAccelMode+0x88>
				case LIS_MODE_SINGLE_DATA:
					writeVal += (2 << 2);
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	3308      	adds	r3, #8
 8001884:	73fb      	strb	r3, [r7, #15]
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4619      	mov	r1, r3
 800188a:	2020      	movs	r0, #32
 800188c:	f7ff fd32 	bl	80012f4 <accelWriteRegisterRaw>
					break;
 8001890:	e004      	b.n	800189c <setAccelMode+0x88>
				default:
					PRINTF("Invalid mode passed during set mode. Mode is unchanged\r\n");
 8001892:	490b      	ldr	r1, [pc, #44]	@ (80018c0 <setAccelMode+0xac>)
 8001894:	2001      	movs	r0, #1
 8001896:	f005 fa6d 	bl	8006d74 <TraceSend>
					break;
 800189a:	bf00      	nop
			}
			break;
 800189c:	e009      	b.n	80018b2 <setAccelMode+0x9e>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 800189e:	4909      	ldr	r1, [pc, #36]	@ (80018c4 <setAccelMode+0xb0>)
 80018a0:	2001      	movs	r0, #1
 80018a2:	f005 fa67 	bl	8006d74 <TraceSend>
			break;
 80018a6:	e004      	b.n	80018b2 <setAccelMode+0x9e>
		default:
			PRINTF("Accelerometer not supported, can not set mode\r\n");
 80018a8:	4907      	ldr	r1, [pc, #28]	@ (80018c8 <setAccelMode+0xb4>)
 80018aa:	2001      	movs	r0, #1
 80018ac:	f005 fa62 	bl	8006d74 <TraceSend>
	}
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200005d0 	.word	0x200005d0
 80018c0:	0802b698 	.word	0x0802b698
 80018c4:	0802b3a4 	.word	0x0802b3a4
 80018c8:	0802b6d4 	.word	0x0802b6d4

080018cc <setAccelResolution>:
 * 		   Expansion for these modes will be added if necessary but complexity will severely increase.
 * @param  ACCEL_RESOLUTION setResolution
 * @retval void
 */
void setAccelResolution(ACCEL_RESOLUTION setResolution)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
	uint8_t writeVal = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	73fb      	strb	r3, [r7, #15]
	uint8_t regVal = 255;
 80018da:	23ff      	movs	r3, #255	@ 0xff
 80018dc:	73bb      	strb	r3, [r7, #14]
	ACCEL_POWER_MODE mode = LIS_MODE_ERROR;
 80018de:	2303      	movs	r3, #3
 80018e0:	737b      	strb	r3, [r7, #13]
	uint8_t mask = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	733b      	strb	r3, [r7, #12]

	switch(accelDevice.partNumber)
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <setAccelResolution+0xf8>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b44      	cmp	r3, #68	@ 0x44
 80018ec:	d002      	beq.n	80018f4 <setAccelResolution+0x28>
 80018ee:	2b47      	cmp	r3, #71	@ 0x47
 80018f0:	d05a      	beq.n	80019a8 <setAccelResolution+0xdc>
 80018f2:	e05e      	b.n	80019b2 <setAccelResolution+0xe6>
	{
		case LIS2DW:
			regVal = accelReadRegister(LIS2DW_CTRL_1);
 80018f4:	2020      	movs	r0, #32
 80018f6:	f7ff fc1d 	bl	8001134 <accelReadRegister>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73bb      	strb	r3, [r7, #14]
			mode = getAccelMode();
 80018fe:	f7ff fe47 	bl	8001590 <getAccelMode>
 8001902:	4603      	mov	r3, r0
 8001904:	737b      	strb	r3, [r7, #13]
			mask = ACCEL_ODR_MASK + ACCEL_MODE_MASK;
 8001906:	23fc      	movs	r3, #252	@ 0xfc
 8001908:	733b      	strb	r3, [r7, #12]
			if(mode != LIS_MODE_ERROR)
 800190a:	7b7b      	ldrb	r3, [r7, #13]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d045      	beq.n	800199c <setAccelResolution+0xd0>
			{
				writeVal = mask & regVal; //Zeros out the resolution bits
 8001910:	7b3a      	ldrb	r2, [r7, #12]
 8001912:	7bbb      	ldrb	r3, [r7, #14]
 8001914:	4013      	ands	r3, r2
 8001916:	73fb      	strb	r3, [r7, #15]
				if((mode == LIS_MODE_HIGH_PERFORMANCE) && (setResolution == LIS_RESOLUTION_12))
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d10f      	bne.n	800193e <setAccelResolution+0x72>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10c      	bne.n	800193e <setAccelResolution+0x72>
				{
					PRINTF("Can not set 12 bit resolution in high performance mode. Setting LP_MODE 2 for resolution\r\n");
 8001924:	4928      	ldr	r1, [pc, #160]	@ (80019c8 <setAccelResolution+0xfc>)
 8001926:	2001      	movs	r0, #1
 8001928:	f005 fa24 	bl	8006d74 <TraceSend>
					writeVal += 1;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	3301      	adds	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	4619      	mov	r1, r3
 8001936:	2020      	movs	r0, #32
 8001938:	f7ff fcdc 	bl	80012f4 <accelWriteRegisterRaw>
 800193c:	e033      	b.n	80019a6 <setAccelResolution+0xda>
				}
				else if((mode == LIS_MODE_LOW_POWER) && (setResolution == LIS_RESOLUTION_12))
 800193e:	7b7b      	ldrb	r3, [r7, #13]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d108      	bne.n	8001956 <setAccelResolution+0x8a>
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <setAccelResolution+0x8a>
				{
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	4619      	mov	r1, r3
 800194e:	2020      	movs	r0, #32
 8001950:	f7ff fcd0 	bl	80012f4 <accelWriteRegisterRaw>
 8001954:	e027      	b.n	80019a6 <setAccelResolution+0xda>
				}
				else if((mode == LIS_MODE_LOW_POWER) && (setResolution == LIS_RESOLUTION_14))
 8001956:	7b7b      	ldrb	r3, [r7, #13]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10b      	bne.n	8001974 <setAccelResolution+0xa8>
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <setAccelResolution+0xa8>
				{
					writeVal += 1;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	3301      	adds	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4619      	mov	r1, r3
 800196c:	2020      	movs	r0, #32
 800196e:	f7ff fcc1 	bl	80012f4 <accelWriteRegisterRaw>
 8001972:	e018      	b.n	80019a6 <setAccelResolution+0xda>
				}
				else if((mode == LIS_MODE_HIGH_PERFORMANCE) && (setResolution == LIS_RESOLUTION_14))
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d10b      	bne.n	8001992 <setAccelResolution+0xc6>
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d108      	bne.n	8001992 <setAccelResolution+0xc6>
				{
					writeVal += 3;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3303      	adds	r3, #3
 8001984:	73fb      	strb	r3, [r7, #15]
					accelWriteRegisterRaw(LIS2DW_CTRL_1, writeVal);
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	4619      	mov	r1, r3
 800198a:	2020      	movs	r0, #32
 800198c:	f7ff fcb2 	bl	80012f4 <accelWriteRegisterRaw>
 8001990:	e009      	b.n	80019a6 <setAccelResolution+0xda>
				}
				else
				{
					PRINTF("Invalid resolution being set. Resolution unchanged\r\n");
 8001992:	490e      	ldr	r1, [pc, #56]	@ (80019cc <setAccelResolution+0x100>)
 8001994:	2001      	movs	r0, #1
 8001996:	f005 f9ed 	bl	8006d74 <TraceSend>
			}
			else
			{
				PRINTF("Accel mode error detected when trying to set resolution. This should never happen\r\n");
			}
			break;
 800199a:	e00f      	b.n	80019bc <setAccelResolution+0xf0>
				PRINTF("Accel mode error detected when trying to set resolution. This should never happen\r\n");
 800199c:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <setAccelResolution+0x104>)
 800199e:	2001      	movs	r0, #1
 80019a0:	f005 f9e8 	bl	8006d74 <TraceSend>
			break;
 80019a4:	e00a      	b.n	80019bc <setAccelResolution+0xf0>
 80019a6:	e009      	b.n	80019bc <setAccelResolution+0xf0>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 80019a8:	490a      	ldr	r1, [pc, #40]	@ (80019d4 <setAccelResolution+0x108>)
 80019aa:	2001      	movs	r0, #1
 80019ac:	f005 f9e2 	bl	8006d74 <TraceSend>
			break;
 80019b0:	e004      	b.n	80019bc <setAccelResolution+0xf0>
		default:
			PRINTF("Accelerometer not supported, can not set resolution\r\n");
 80019b2:	4909      	ldr	r1, [pc, #36]	@ (80019d8 <setAccelResolution+0x10c>)
 80019b4:	2001      	movs	r0, #1
 80019b6:	f005 f9dd 	bl	8006d74 <TraceSend>
	}
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200005d0 	.word	0x200005d0
 80019c8:	0802b704 	.word	0x0802b704
 80019cc:	0802b760 	.word	0x0802b760
 80019d0:	0802b798 	.word	0x0802b798
 80019d4:	0802b3a4 	.word	0x0802b3a4
 80019d8:	0802b7ec 	.word	0x0802b7ec

080019dc <getAccelParameters>:
 * @param  ACCELERATION_PARAM_TYPE extAccelParameters
 *         Reference to external acceleration parameter type
 * @retval void
 */
void getAccelParameters(ACCELERATION_PARAM_TYPE *extAccelParameters)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	extAccelParameters->hysteresis = privateAccelParameters.hysteresis;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <getAccelParameters+0x44>)
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
	extAccelParameters->mode = privateAccelParameters.mode;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <getAccelParameters+0x44>)
 80019ee:	781a      	ldrb	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	701a      	strb	r2, [r3, #0]
	extAccelParameters->range = privateAccelParameters.range;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <getAccelParameters+0x44>)
 80019f6:	785a      	ldrb	r2, [r3, #1]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	705a      	strb	r2, [r3, #1]
	extAccelParameters->threshold = privateAccelParameters.threshold;
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <getAccelParameters+0x44>)
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
	extAccelParameters->duration = privateAccelParameters.duration;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <getAccelParameters+0x44>)
 8001a06:	899a      	ldrh	r2, [r3, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	819a      	strh	r2, [r3, #12]
	extAccelParameters->mutePeriod = privateAccelParameters.mutePeriod;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <getAccelParameters+0x44>)
 8001a0e:	89da      	ldrh	r2, [r3, #14]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	81da      	strh	r2, [r3, #14]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	200005e0 	.word	0x200005e0

08001a24 <setAccelParameters>:
 * @param  ACCELERATION_PARAM_TYPE extAccelParameters
 *         External acceleration parameter type
 * @retval void
 */
void setAccelParameters(ACCELERATION_PARAM_TYPE extAccelParameters)
{
 8001a24:	b490      	push	{r4, r7}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	463c      	mov	r4, r7
 8001a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	privateAccelParameters.hysteresis = extAccelParameters.hysteresis;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4a0b      	ldr	r2, [pc, #44]	@ (8001a60 <setAccelParameters+0x3c>)
 8001a34:	6093      	str	r3, [r2, #8]
	privateAccelParameters.mode = extAccelParameters.mode;
 8001a36:	783a      	ldrb	r2, [r7, #0]
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <setAccelParameters+0x3c>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	privateAccelParameters.range = extAccelParameters.range;
 8001a3c:	787a      	ldrb	r2, [r7, #1]
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <setAccelParameters+0x3c>)
 8001a40:	705a      	strb	r2, [r3, #1]
	privateAccelParameters.threshold = extAccelParameters.threshold;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a06      	ldr	r2, [pc, #24]	@ (8001a60 <setAccelParameters+0x3c>)
 8001a46:	6053      	str	r3, [r2, #4]
	privateAccelParameters.duration = extAccelParameters.duration;
 8001a48:	89ba      	ldrh	r2, [r7, #12]
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <setAccelParameters+0x3c>)
 8001a4c:	819a      	strh	r2, [r3, #12]
	privateAccelParameters.mutePeriod = extAccelParameters.mutePeriod;
 8001a4e:	89fa      	ldrh	r2, [r7, #14]
 8001a50:	4b03      	ldr	r3, [pc, #12]	@ (8001a60 <setAccelParameters+0x3c>)
 8001a52:	81da      	strh	r2, [r3, #14]
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc90      	pop	{r4, r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200005e0 	.word	0x200005e0

08001a64 <handleAccelTrigger>:
 * 		   caused the device to trigger
 * @param  Void
 * @retval void
 */
void handleAccelTrigger(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	switch(accelDevice.partNumber)
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b28 <handleAccelTrigger+0xc4>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b44      	cmp	r3, #68	@ 0x44
 8001a70:	d002      	beq.n	8001a78 <handleAccelTrigger+0x14>
 8001a72:	2b47      	cmp	r3, #71	@ 0x47
 8001a74:	d049      	beq.n	8001b0a <handleAccelTrigger+0xa6>
 8001a76:	e04d      	b.n	8001b14 <handleAccelTrigger+0xb0>
	{
		case LIS2DW:
			uint8_t sourceVal = accelReadRegister(LIS2DW_ALL_INT_SRC);
 8001a78:	203b      	movs	r0, #59	@ 0x3b
 8001a7a:	f7ff fb5b 	bl	8001134 <accelReadRegister>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]

			//	uint8_t sourceVal = accelReadRegister(LIS2DW_STATUS_REG);

			//CSC handles case where nothing is detected. 63 is the max value this register can be
			if(sourceVal == 0)
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <handleAccelTrigger+0x32>
			{
				PRINTF("No source detected: %d\r\n", sourceVal);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4927      	ldr	r1, [pc, #156]	@ (8001b2c <handleAccelTrigger+0xc8>)
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f005 f970 	bl	8006d74 <TraceSend>
 8001a94:	e008      	b.n	8001aa8 <handleAccelTrigger+0x44>
			}
			else if(sourceVal > 63)
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a9a:	d905      	bls.n	8001aa8 <handleAccelTrigger+0x44>
			{
				PRINTF("Interrupt source value invalid: %d\r\n", sourceVal);
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4923      	ldr	r1, [pc, #140]	@ (8001b30 <handleAccelTrigger+0xcc>)
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f005 f966 	bl	8006d74 <TraceSend>
			}

			//CSC not mutually exclusive, can't use else if
			if((sourceVal & 1) == 1)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <handleAccelTrigger+0x56>
			{
				//Handle Free Fall event detection
				PRINTF("Free Fall detected\r\n\r\n");
 8001ab2:	4920      	ldr	r1, [pc, #128]	@ (8001b34 <handleAccelTrigger+0xd0>)
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f005 f95d 	bl	8006d74 <TraceSend>
			}

			if((sourceVal & 2) == 2)
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00d      	beq.n	8001ae0 <handleAccelTrigger+0x7c>
			{
				//Handle Wake-Up Event
				PRINTF("Wake-Up Event Detected: %d\r\n", sourceVal);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	491b      	ldr	r1, [pc, #108]	@ (8001b38 <handleAccelTrigger+0xd4>)
 8001aca:	2001      	movs	r0, #1
 8001acc:	f005 f952 	bl	8006d74 <TraceSend>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ad6:	4819      	ldr	r0, [pc, #100]	@ (8001b3c <handleAccelTrigger+0xd8>)
 8001ad8:	f018 fb5c 	bl	801a194 <HAL_GPIO_WritePin>
				handleAccelWakeUp();
 8001adc:	f000 f838 	bl	8001b50 <handleAccelWakeUp>
			if((sourceVal & 32) == 32)
			{
				//Handle sleep change status
			}

			sourceVal = accelReadRegister(LIS2DW_ALL_INT_SRC);
 8001ae0:	203b      	movs	r0, #59	@ 0x3b
 8001ae2:	f7ff fb27 	bl	8001134 <accelReadRegister>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
			PRINTF("New source val: %d\r\n", sourceVal);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4914      	ldr	r1, [pc, #80]	@ (8001b40 <handleAccelTrigger+0xdc>)
 8001af0:	2001      	movs	r0, #1
 8001af2:	f005 f93f 	bl	8006d74 <TraceSend>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afc:	480f      	ldr	r0, [pc, #60]	@ (8001b3c <handleAccelTrigger+0xd8>)
 8001afe:	f018 fb49 	bl	801a194 <HAL_GPIO_WritePin>
			accelTrigger = false; //Reset trigger
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <handleAccelTrigger+0xe0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
			break;
 8001b08:	e009      	b.n	8001b1e <handleAccelTrigger+0xba>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 8001b0a:	490f      	ldr	r1, [pc, #60]	@ (8001b48 <handleAccelTrigger+0xe4>)
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f005 f931 	bl	8006d74 <TraceSend>
			break;
 8001b12:	e004      	b.n	8001b1e <handleAccelTrigger+0xba>
		default:
			PRINTF("Accelerometer not supported, no interrupt handler\r\n");
 8001b14:	490d      	ldr	r1, [pc, #52]	@ (8001b4c <handleAccelTrigger+0xe8>)
 8001b16:	2001      	movs	r0, #1
 8001b18:	f005 f92c 	bl	8006d74 <TraceSend>
	}
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200005d0 	.word	0x200005d0
 8001b2c:	0802b824 	.word	0x0802b824
 8001b30:	0802b840 	.word	0x0802b840
 8001b34:	0802b868 	.word	0x0802b868
 8001b38:	0802b880 	.word	0x0802b880
 8001b3c:	42020400 	.word	0x42020400
 8001b40:	0802b8a0 	.word	0x0802b8a0
 8001b44:	200005cd 	.word	0x200005cd
 8001b48:	0802b3a4 	.word	0x0802b3a4
 8001b4c:	0802b8b8 	.word	0x0802b8b8

08001b50 <handleAccelWakeUp>:
 * @note   Reads WAKE_SRC register 0x38 to determine cause of wake up
 * @param  void
 * @retval void
 */
void handleAccelWakeUp(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	switch(accelDevice.partNumber)
 8001b56:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <handleAccelWakeUp+0x98>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b44      	cmp	r3, #68	@ 0x44
 8001b5c:	d002      	beq.n	8001b64 <handleAccelWakeUp+0x14>
 8001b5e:	2b47      	cmp	r3, #71	@ 0x47
 8001b60:	d032      	beq.n	8001bc8 <handleAccelWakeUp+0x78>
 8001b62:	e036      	b.n	8001bd2 <handleAccelWakeUp+0x82>
	{
		case LIS2DW:
			uint8_t wakeVal = accelReadRegister(LIS2DW_WAKE_SRC);
 8001b64:	2038      	movs	r0, #56	@ 0x38
 8001b66:	f7ff fae5 	bl	8001134 <accelReadRegister>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
			PRINTF("Wake Value: %d\r\n", wakeVal);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	461a      	mov	r2, r3
 8001b72:	491e      	ldr	r1, [pc, #120]	@ (8001bec <handleAccelWakeUp+0x9c>)
 8001b74:	2001      	movs	r0, #1
 8001b76:	f005 f8fd 	bl	8006d74 <TraceSend>
			uint8_t statusVal = accelReadRegister(LIS2DW_STATUS_REG);
 8001b7a:	2027      	movs	r0, #39	@ 0x27
 8001b7c:	f7ff fada 	bl	8001134 <accelReadRegister>
 8001b80:	4603      	mov	r3, r0
 8001b82:	71bb      	strb	r3, [r7, #6]
			PRINTF("Status Value: %d\r\n", statusVal);
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	461a      	mov	r2, r3
 8001b88:	4919      	ldr	r1, [pc, #100]	@ (8001bf0 <handleAccelWakeUp+0xa0>)
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f005 f8f2 	bl	8006d74 <TraceSend>

			//CSC not mutually exclusive, can't use else if
			if((wakeVal & 4) == 4)
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <handleAccelWakeUp+0x52>
			{
				PRINTF("X-Axis over threshold\r\n");
 8001b9a:	4916      	ldr	r1, [pc, #88]	@ (8001bf4 <handleAccelWakeUp+0xa4>)
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f005 f8e9 	bl	8006d74 <TraceSend>
			}

			if((wakeVal & 2) == 2)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d003      	beq.n	8001bb4 <handleAccelWakeUp+0x64>
			{
				PRINTF("Y-Axis over threshold\r\n");
 8001bac:	4912      	ldr	r1, [pc, #72]	@ (8001bf8 <handleAccelWakeUp+0xa8>)
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f005 f8e0 	bl	8006d74 <TraceSend>
			}

			if((wakeVal & 1) == 1)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00e      	beq.n	8001bdc <handleAccelWakeUp+0x8c>
			{
				PRINTF("Z-Axis over threshold\r\n");
 8001bbe:	490f      	ldr	r1, [pc, #60]	@ (8001bfc <handleAccelWakeUp+0xac>)
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f005 f8d7 	bl	8006d74 <TraceSend>
			}
			break;
 8001bc6:	e009      	b.n	8001bdc <handleAccelWakeUp+0x8c>
		case LIS2DUX:
			PRINTF("LIS2DUX unimplemented\r\n");
 8001bc8:	490d      	ldr	r1, [pc, #52]	@ (8001c00 <handleAccelWakeUp+0xb0>)
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f005 f8d2 	bl	8006d74 <TraceSend>
			break;
 8001bd0:	e005      	b.n	8001bde <handleAccelWakeUp+0x8e>
		default:
			PRINTF("Accelerometer not supported, can not handle interrupt\r\n");
 8001bd2:	490c      	ldr	r1, [pc, #48]	@ (8001c04 <handleAccelWakeUp+0xb4>)
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f005 f8cd 	bl	8006d74 <TraceSend>
	}
}
 8001bda:	e000      	b.n	8001bde <handleAccelWakeUp+0x8e>
			break;
 8001bdc:	bf00      	nop
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200005d0 	.word	0x200005d0
 8001bec:	0802b8ec 	.word	0x0802b8ec
 8001bf0:	0802b900 	.word	0x0802b900
 8001bf4:	0802b914 	.word	0x0802b914
 8001bf8:	0802b92c 	.word	0x0802b92c
 8001bfc:	0802b944 	.word	0x0802b944
 8001c00:	0802b3a4 	.word	0x0802b3a4
 8001c04:	0802b95c 	.word	0x0802b95c

08001c08 <getAccelConfigStr>:
 * @note
 * @param  void
 * @retval returns config string or an error message if something goes wrong
 */
char* getAccelConfigStr(void)
{
 8001c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0a:	b0a7      	sub	sp, #156	@ 0x9c
 8001c0c:	af08      	add	r7, sp, #32
	static char accelBuff[ACCEL_MSG_SIZE] = {0};
	static char failed[500] = "Failed to build location message\r\n";
	char timebuff[100] = {""}; //
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2260      	movs	r2, #96	@ 0x60
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f025 faa8 	bl	8027170 <memset>
	int buffSize = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	677b      	str	r3, [r7, #116]	@ 0x74

	Time_StampISO(timebuff);
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f005 fbb7 	bl	800739c <Time_StampISO>

	float thresh = (float)privateAccelParameters.threshold / 1000.0;
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <getAccelConfigStr+0xb8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c3a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001cc4 <getAccelConfigStr+0xbc>
 8001c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c42:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	float hyster = (float) privateAccelParameters.hysteresis / 1000.0;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <getAccelConfigStr+0xb8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c52:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001cc4 <getAccelConfigStr+0xbc>
 8001c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c5a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	buffSize = snprintf(accelBuff, ACCEL_MSG_SIZE, "\"accelerometer\":{\"version\":%u,\"mode\":%u,\"range\":%u,\"threshold\":%g,\"hysteresis\":%g,\"duration\":%u}",
			ACCEL_CONFIG_VERSION, privateAccelParameters.mode, privateAccelParameters.range, thresh, hyster, privateAccelParameters.duration);
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <getAccelConfigStr+0xb8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
	buffSize = snprintf(accelBuff, ACCEL_MSG_SIZE, "\"accelerometer\":{\"version\":%u,\"mode\":%u,\"range\":%u,\"threshold\":%g,\"hysteresis\":%g,\"duration\":%u}",
 8001c62:	461e      	mov	r6, r3
			ACCEL_CONFIG_VERSION, privateAccelParameters.mode, privateAccelParameters.range, thresh, hyster, privateAccelParameters.duration);
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <getAccelConfigStr+0xb8>)
 8001c66:	785b      	ldrb	r3, [r3, #1]
	buffSize = snprintf(accelBuff, ACCEL_MSG_SIZE, "\"accelerometer\":{\"version\":%u,\"mode\":%u,\"range\":%u,\"threshold\":%g,\"hysteresis\":%g,\"duration\":%u}",
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001c6c:	f7fe fc7a 	bl	8000564 <__aeabi_f2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001c76:	f7fe fc75 	bl	8000564 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
			ACCEL_CONFIG_VERSION, privateAccelParameters.mode, privateAccelParameters.range, thresh, hyster, privateAccelParameters.duration);
 8001c7e:	4910      	ldr	r1, [pc, #64]	@ (8001cc0 <getAccelConfigStr+0xb8>)
 8001c80:	8989      	ldrh	r1, [r1, #12]
	buffSize = snprintf(accelBuff, ACCEL_MSG_SIZE, "\"accelerometer\":{\"version\":%u,\"mode\":%u,\"range\":%u,\"threshold\":%g,\"hysteresis\":%g,\"duration\":%u}",
 8001c82:	9106      	str	r1, [sp, #24]
 8001c84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	9600      	str	r6, [sp, #0]
 8001c92:	2301      	movs	r3, #1
 8001c94:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <getAccelConfigStr+0xc0>)
 8001c96:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001c9a:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <getAccelConfigStr+0xc4>)
 8001c9c:	f025 f986 	bl	8026fac <sniprintf>
 8001ca0:	6778      	str	r0, [r7, #116]	@ 0x74

	if(buffSize > 0 && buffSize < ACCEL_MSG_SIZE)
 8001ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	dd05      	ble.n	8001cb4 <getAccelConfigStr+0xac>
 8001ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001caa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cae:	da01      	bge.n	8001cb4 <getAccelConfigStr+0xac>
	{
		return accelBuff;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <getAccelConfigStr+0xc4>)
 8001cb2:	e000      	b.n	8001cb6 <getAccelConfigStr+0xae>
	}
	else
	{
		return failed;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <getAccelConfigStr+0xc8>)
	}
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	377c      	adds	r7, #124	@ 0x7c
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200005e0 	.word	0x200005e0
 8001cc4:	447a0000 	.word	0x447a0000
 8001cc8:	0802be28 	.word	0x0802be28
 8001ccc:	200005f0 	.word	0x200005f0
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <getAccelMutePeriod>:
 * @brief  Accessor function for Accelerometer cooldown (mute) period
 * @note
 * @retval uint16_t mutePeriod
 */
uint16_t getAccelMutePeriod(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
	return privateAccelParameters.mutePeriod;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <getAccelMutePeriod+0x14>)
 8001cda:	89db      	ldrh	r3, [r3, #14]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200005e0 	.word	0x200005e0

08001cec <cameraParametersInit>:
        0x7e, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff };

extern SPI_HandleTypeDef hspi2;

void cameraParametersInit()
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	privateCameraParameters.mode = DEF_CAM_MODE;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <cameraParametersInit+0x38>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
	privateCameraParameters.warmUp = DEF_CAM_WARMUP;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <cameraParametersInit+0x38>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
	privateCameraParameters.picturesPerEvent = DEF_CAM_PIC_PER_MOTION;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <cameraParametersInit+0x38>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	709a      	strb	r2, [r3, #2]
	privateCameraParameters.pictureInterval = DEF_CAM_PIC_INTERVAL;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <cameraParametersInit+0x38>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	70da      	strb	r2, [r3, #3]
	privateCameraParameters.samplePictureTime.hours = DEF_CAM_SAMPLE_HOUR;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <cameraParametersInit+0x38>)
 8001d0a:	220d      	movs	r2, #13
 8001d0c:	711a      	strb	r2, [r3, #4]
	privateCameraParameters.samplePictureTime.minutes = DEF_CAM_SAMPLE_MIN;
 8001d0e:	4b05      	ldr	r3, [pc, #20]	@ (8001d24 <cameraParametersInit+0x38>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	715a      	strb	r2, [r3, #5]
	privateCameraParameters.samplePicNumber = DEF_CAM_NUM_SAMPLES;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <cameraParametersInit+0x38>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	719a      	strb	r2, [r3, #6]
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20000dc0 	.word	0x20000dc0

08001d28 <getCameraParameters>:

void getCameraParameters(CAMERA_PARAMETER_TYPE *extCamParams)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	extCamParams->mode = privateCameraParameters.mode;
 8001d30:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	701a      	strb	r2, [r3, #0]
	extCamParams->warmUp = privateCameraParameters.warmUp;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d3a:	785a      	ldrb	r2, [r3, #1]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	705a      	strb	r2, [r3, #1]
	extCamParams->picturesPerEvent = privateCameraParameters.picturesPerEvent;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d42:	789a      	ldrb	r2, [r3, #2]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	709a      	strb	r2, [r3, #2]
	extCamParams->pictureInterval = privateCameraParameters.pictureInterval;
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d4a:	78da      	ldrb	r2, [r3, #3]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	70da      	strb	r2, [r3, #3]
	extCamParams->samplePictureTime.hours = privateCameraParameters.samplePictureTime.hours;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d52:	791a      	ldrb	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	711a      	strb	r2, [r3, #4]
	extCamParams->samplePictureTime.minutes = privateCameraParameters.samplePictureTime.minutes;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d5a:	795a      	ldrb	r2, [r3, #5]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	715a      	strb	r2, [r3, #5]
	extCamParams->samplePicNumber = privateCameraParameters.samplePicNumber;
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <getCameraParameters+0x4c>)
 8001d62:	799a      	ldrb	r2, [r3, #6]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	719a      	strb	r2, [r3, #6]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	20000dc0 	.word	0x20000dc0

08001d78 <setCameraParameters>:

void setCameraParameters(CAMERA_PARAMETER_TYPE extCamParams)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	463b      	mov	r3, r7
 8001d80:	e883 0003 	stmia.w	r3, {r0, r1}
	privateCameraParameters.mode = extCamParams.mode;
 8001d84:	783a      	ldrb	r2, [r7, #0]
 8001d86:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <setCameraParameters+0x44>)
 8001d88:	701a      	strb	r2, [r3, #0]
	privateCameraParameters.warmUp = extCamParams.warmUp;
 8001d8a:	787a      	ldrb	r2, [r7, #1]
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <setCameraParameters+0x44>)
 8001d8e:	705a      	strb	r2, [r3, #1]
	privateCameraParameters.picturesPerEvent = extCamParams.picturesPerEvent;
 8001d90:	78ba      	ldrb	r2, [r7, #2]
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <setCameraParameters+0x44>)
 8001d94:	709a      	strb	r2, [r3, #2]
	privateCameraParameters.pictureInterval = extCamParams.pictureInterval;
 8001d96:	78fa      	ldrb	r2, [r7, #3]
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <setCameraParameters+0x44>)
 8001d9a:	70da      	strb	r2, [r3, #3]
	privateCameraParameters.samplePictureTime.hours = extCamParams.samplePictureTime.hours;
 8001d9c:	793a      	ldrb	r2, [r7, #4]
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <setCameraParameters+0x44>)
 8001da0:	711a      	strb	r2, [r3, #4]
	privateCameraParameters.samplePictureTime.minutes = extCamParams.samplePictureTime.minutes;
 8001da2:	797a      	ldrb	r2, [r7, #5]
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <setCameraParameters+0x44>)
 8001da6:	715a      	strb	r2, [r3, #5]
	privateCameraParameters.samplePicNumber = extCamParams.samplePicNumber;
 8001da8:	79ba      	ldrb	r2, [r7, #6]
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <setCameraParameters+0x44>)
 8001dac:	719a      	strb	r2, [r3, #6]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000dc0 	.word	0x20000dc0

08001dc0 <decodeCameraConfigs>:
 * 		   Represents message to be decoded
 * @retval bool isError
 * 		   If no error, will return false
 */
bool decodeCameraConfigs(uint8_t* mqttMsg)
{
 8001dc0:	b5b0      	push	{r4, r5, r7, lr}
 8001dc2:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001dce:	f843 0c6c 	str.w	r0, [r3, #-108]
	bool isError = false;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001dd8:	f102 020f 	add.w	r2, r2, #15
 8001ddc:	7013      	strb	r3, [r2, #0]
	uint8_t version = 255;
 8001dde:	23ff      	movs	r3, #255	@ 0xff
 8001de0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001de4:	f102 0217 	add.w	r2, r2, #23
 8001de8:	7013      	strb	r3, [r2, #0]
	uint8_t mode = 255;
 8001dea:	23ff      	movs	r3, #255	@ 0xff
 8001dec:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001df0:	f102 020e 	add.w	r2, r2, #14
 8001df4:	7013      	strb	r3, [r2, #0]
	uint16_t warmup = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001dfc:	f102 020c 	add.w	r2, r2, #12
 8001e00:	8013      	strh	r3, [r2, #0]
	uint16_t picPerMotion = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e08:	f102 020a 	add.w	r2, r2, #10
 8001e0c:	8013      	strh	r3, [r2, #0]
	uint16_t picInterval = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e14:	f102 0208 	add.w	r2, r2, #8
 8001e18:	8013      	strh	r3, [r2, #0]
	uint16_t samplePerDay = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e20:	f102 0206 	add.w	r2, r2, #6
 8001e24:	8013      	strh	r3, [r2, #0]
	uint8_t sampleTimeH = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e2c:	f102 0205 	add.w	r2, r2, #5
 8001e30:	7013      	strb	r3, [r2, #0]
	uint8_t sampleTimeM = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e38:	f102 0204 	add.w	r2, r2, #4
 8001e3c:	7013      	strb	r3, [r2, #0]
	bool picPerMotionValid = false;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e44:	f102 0203 	add.w	r2, r2, #3
 8001e48:	7013      	strb	r3, [r2, #0]
	bool warmupValid = false;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e50:	f102 0202 	add.w	r2, r2, #2
 8001e54:	7013      	strb	r3, [r2, #0]
	bool samplePerDayValid = false;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e5c:	f102 0201 	add.w	r2, r2, #1
 8001e60:	7013      	strb	r3, [r2, #0]
	bool picIntervalValid = false;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001e68:	7013      	strb	r3, [r2, #0]
	bool sampleTimeValid = false;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e70:	f102 021f 	add.w	r2, r2, #31
 8001e74:	7013      	strb	r3, [r2, #0]
	bool modeValid = false;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e7c:	f102 021e 	add.w	r2, r2, #30
 8001e80:	7013      	strb	r3, [r2, #0]
	char localBuff[MEMORY_MAX] = " ";
 8001e82:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001e86:	f103 0310 	add.w	r3, r3, #16
 8001e8a:	f5a3 637e 	sub.w	r3, r3, #4064	@ 0xfe0
 8001e8e:	2220      	movs	r2, #32
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	3304      	adds	r3, #4
 8001e94:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f025 f968 	bl	8027170 <memset>
	char camTest [] = "\"camera\":{";
 8001ea0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001ea4:	f103 0310 	add.w	r3, r3, #16
 8001ea8:	f6a3 73ec 	subw	r3, r3, #4076	@ 0xfec
 8001eac:	4aa3      	ldr	r2, [pc, #652]	@ (800213c <decodeCameraConfigs+0x37c>)
 8001eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eb0:	c303      	stmia	r3!, {r0, r1}
 8001eb2:	801a      	strh	r2, [r3, #0]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	0c12      	lsrs	r2, r2, #16
 8001eb8:	701a      	strb	r2, [r3, #0]
	char modeTest [] = "\"mode\":";
 8001eba:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001ebe:	f103 0310 	add.w	r3, r3, #16
 8001ec2:	f6a3 73f4 	subw	r3, r3, #4084	@ 0xff4
 8001ec6:	4a9e      	ldr	r2, [pc, #632]	@ (8002140 <decodeCameraConfigs+0x380>)
 8001ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ecc:	e883 0003 	stmia.w	r3, {r0, r1}
	char versionTest [] = "\"version\":";
 8001ed0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ed4:	4a9b      	ldr	r2, [pc, #620]	@ (8002144 <decodeCameraConfigs+0x384>)
 8001ed6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ed8:	c303      	stmia	r3!, {r0, r1}
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	3302      	adds	r3, #2
 8001ede:	0c12      	lsrs	r2, r2, #16
 8001ee0:	701a      	strb	r2, [r3, #0]
	char warmTest [] = "\"warm_up\":";
 8001ee2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ee6:	4a98      	ldr	r2, [pc, #608]	@ (8002148 <decodeCameraConfigs+0x388>)
 8001ee8:	3b0c      	subs	r3, #12
 8001eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eec:	c303      	stmia	r3!, {r0, r1}
 8001eee:	801a      	strh	r2, [r3, #0]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	0c12      	lsrs	r2, r2, #16
 8001ef4:	701a      	strb	r2, [r3, #0]
	char picPerMotionTest [] = "\"pictures_per_motion\":";
 8001ef6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001efa:	4a94      	ldr	r2, [pc, #592]	@ (800214c <decodeCameraConfigs+0x38c>)
 8001efc:	f1a3 0424 	sub.w	r4, r3, #36	@ 0x24
 8001f00:	4615      	mov	r5, r2
 8001f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f0a:	6020      	str	r0, [r4, #0]
 8001f0c:	3404      	adds	r4, #4
 8001f0e:	8021      	strh	r1, [r4, #0]
 8001f10:	3402      	adds	r4, #2
 8001f12:	0c0b      	lsrs	r3, r1, #16
 8001f14:	7023      	strb	r3, [r4, #0]
	char picIntervalTest [] = "\"picture_interval\":";
 8001f16:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001f1a:	4a8d      	ldr	r2, [pc, #564]	@ (8002150 <decodeCameraConfigs+0x390>)
 8001f1c:	f1a3 0438 	sub.w	r4, r3, #56	@ 0x38
 8001f20:	4615      	mov	r5, r2
 8001f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	6023      	str	r3, [r4, #0]
	char samplePerDayTest [] = "\"sample_pictures_day\":";
 8001f2a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001f2e:	4a89      	ldr	r2, [pc, #548]	@ (8002154 <decodeCameraConfigs+0x394>)
 8001f30:	f1a3 0450 	sub.w	r4, r3, #80	@ 0x50
 8001f34:	4615      	mov	r5, r2
 8001f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f3e:	6020      	str	r0, [r4, #0]
 8001f40:	3404      	adds	r4, #4
 8001f42:	8021      	strh	r1, [r4, #0]
 8001f44:	3402      	adds	r4, #2
 8001f46:	0c0b      	lsrs	r3, r1, #16
 8001f48:	7023      	strb	r3, [r4, #0]
	char sampleTimeTest [] = "\"sample_picture_time\":";
 8001f4a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001f4e:	4a82      	ldr	r2, [pc, #520]	@ (8002158 <decodeCameraConfigs+0x398>)
 8001f50:	f1a3 0468 	sub.w	r4, r3, #104	@ 0x68
 8001f54:	4615      	mov	r5, r2
 8001f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f5e:	6020      	str	r0, [r4, #0]
 8001f60:	3404      	adds	r4, #4
 8001f62:	8021      	strh	r1, [r4, #0]
 8001f64:	3402      	adds	r4, #2
 8001f66:	0c0b      	lsrs	r3, r1, #16
 8001f68:	7023      	strb	r3, [r4, #0]

	// Transfer MQTT message to a local buffer to prevent tampering original mqtt message
	Word_Transfer(localBuff, (char*)mqttMsg);
 8001f6a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001f74:	f852 1c6c 	ldr.w	r1, [r2, #-108]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 fbdb 	bl	8006734 <Word_Transfer>

	char *subStr = strstr(localBuff, camTest);
 8001f7e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8001f82:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f025 f976 	bl	802727a <strstr>
 8001f8e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f92:	f103 0310 	add.w	r3, r3, #16
 8001f96:	6018      	str	r0, [r3, #0]
	if(subStr && !isError)
 8001f98:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f9c:	f103 0310 	add.w	r3, r3, #16
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 83d6 	beq.w	8002754 <decodeCameraConfigs+0x994>
 8001fa8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001fac:	f103 030f 	add.w	r3, r3, #15
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	f083 0301 	eor.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 83cb 	beq.w	8002754 <decodeCameraConfigs+0x994>
	{
		char *verStr = strstr(subStr, versionTest);
 8001fbe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001fc8:	f103 0310 	add.w	r3, r3, #16
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	f025 f954 	bl	802727a <strstr>
 8001fd2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001fd6:	f103 030c 	add.w	r3, r3, #12
 8001fda:	6018      	str	r0, [r3, #0]
		if(verStr)
 8001fdc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001fe0:	f103 030c 	add.w	r3, r3, #12
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8391 	beq.w	800270e <decodeCameraConfigs+0x94e>
		{
			verStr += strlen(versionTest);
 8001fec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe f94b 	bl	800028c <strlen>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001ffc:	f103 030c 	add.w	r3, r3, #12
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002008:	f102 020c 	add.w	r2, r2, #12
 800200c:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 800200e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002012:	f103 030c 	add.w	r3, r3, #12
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	3301      	adds	r3, #1
 800201c:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <decodeCameraConfigs+0x39c>)
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8366 	beq.w	80026f8 <decodeCameraConfigs+0x938>
			{
				version = atoi(verStr);
 800202c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002030:	f103 030c 	add.w	r3, r3, #12
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	f023 f951 	bl	80252dc <atoi>
 800203a:	4603      	mov	r3, r0
 800203c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002040:	f102 0217 	add.w	r2, r2, #23
 8002044:	7013      	strb	r3, [r2, #0]
				if(version == 0)
 8002046:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800204a:	f103 0317 	add.w	r3, r3, #23
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 8340 	bne.w	80026d6 <decodeCameraConfigs+0x916>
				{
					char *warmStr = strstr(subStr, warmTest);
 8002056:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800205a:	3b0c      	subs	r3, #12
 800205c:	4619      	mov	r1, r3
 800205e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002062:	f103 0310 	add.w	r3, r3, #16
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	f025 f907 	bl	802727a <strstr>
 800206c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002070:	f103 0318 	add.w	r3, r3, #24
 8002074:	6018      	str	r0, [r3, #0]
					if(warmStr && !isError)
 8002076:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800207a:	f103 0318 	add.w	r3, r3, #24
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d071      	beq.n	8002168 <decodeCameraConfigs+0x3a8>
 8002084:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002088:	f103 030f 	add.w	r3, r3, #15
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d067      	beq.n	8002168 <decodeCameraConfigs+0x3a8>
					{
						warmStr += strlen(warmTest);
 8002098:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800209c:	3b0c      	subs	r3, #12
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f8f4 	bl	800028c <strlen>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80020aa:	f103 0318 	add.w	r3, r3, #24
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80020b6:	f102 0218 	add.w	r2, r2, #24
 80020ba:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)warmStr[0]))
 80020bc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80020c0:	f103 0318 	add.w	r3, r3, #24
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	4a24      	ldr	r2, [pc, #144]	@ (800215c <decodeCameraConfigs+0x39c>)
 80020cc:	4413      	add	r3, r2
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02c      	beq.n	8002132 <decodeCameraConfigs+0x372>
						{
							warmup = atoi(warmStr);
 80020d8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80020dc:	f103 0318 	add.w	r3, r3, #24
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	f023 f8fb 	bl	80252dc <atoi>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80020ec:	f102 020c 	add.w	r2, r2, #12
 80020f0:	8013      	strh	r3, [r2, #0]
							if(warmup >= 1 && warmup <= 255)
 80020f2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80020f6:	f103 030c 	add.w	r3, r3, #12
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <decodeCameraConfigs+0x35c>
 8002100:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002104:	f103 030c 	add.w	r3, r3, #12
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	2bff      	cmp	r3, #255	@ 0xff
 800210c:	d806      	bhi.n	800211c <decodeCameraConfigs+0x35c>
							{
								warmupValid = true;
 800210e:	2301      	movs	r3, #1
 8002110:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002114:	f102 0202 	add.w	r2, r2, #2
 8002118:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)warmStr[0]))
 800211a:	e02f      	b.n	800217c <decodeCameraConfigs+0x3bc>
							}
							else
							{
								PRINTF("Warm up out of range: %d\r\n", warmup);
 800211c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002120:	f103 030c 	add.w	r3, r3, #12
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	490d      	ldr	r1, [pc, #52]	@ (8002160 <decodeCameraConfigs+0x3a0>)
 800212a:	2001      	movs	r0, #1
 800212c:	f004 fe22 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)warmStr[0]))
 8002130:	e024      	b.n	800217c <decodeCameraConfigs+0x3bc>
							}
						}
						else
						{
							PRINTF("Invalid data type for mode\r\n");
 8002132:	490c      	ldr	r1, [pc, #48]	@ (8002164 <decodeCameraConfigs+0x3a4>)
 8002134:	2001      	movs	r0, #1
 8002136:	f004 fe1d 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)warmStr[0]))
 800213a:	e01f      	b.n	800217c <decodeCameraConfigs+0x3bc>
 800213c:	0802c21c 	.word	0x0802c21c
 8002140:	0802c228 	.word	0x0802c228
 8002144:	0802c230 	.word	0x0802c230
 8002148:	0802c23c 	.word	0x0802c23c
 800214c:	0802c248 	.word	0x0802c248
 8002150:	0802c260 	.word	0x0802c260
 8002154:	0802c274 	.word	0x0802c274
 8002158:	0802c28c 	.word	0x0802c28c
 800215c:	0803031d 	.word	0x0803031d
 8002160:	0802be94 	.word	0x0802be94
 8002164:	0802beb0 	.word	0x0802beb0
						}
					}
					else
					{
						PRINTF("Warm up parameter not found in camera configs\r\n");
 8002168:	49b3      	ldr	r1, [pc, #716]	@ (8002438 <decodeCameraConfigs+0x678>)
 800216a:	2001      	movs	r0, #1
 800216c:	f004 fe02 	bl	8006d74 <TraceSend>
						isError = true;
 8002170:	2301      	movs	r3, #1
 8002172:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002176:	f102 020f 	add.w	r2, r2, #15
 800217a:	7013      	strb	r3, [r2, #0]
					}

					char *modeStr = strstr(subStr, modeTest);
 800217c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002180:	4619      	mov	r1, r3
 8002182:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002186:	f103 0310 	add.w	r3, r3, #16
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	f025 f875 	bl	802727a <strstr>
 8002190:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002194:	f103 0308 	add.w	r3, r3, #8
 8002198:	6018      	str	r0, [r3, #0]
					if(modeStr && !isError)
 800219a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800219e:	f103 0308 	add.w	r3, r3, #8
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05a      	beq.n	800225e <decodeCameraConfigs+0x49e>
 80021a8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80021ac:	f103 030f 	add.w	r3, r3, #15
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f083 0301 	eor.w	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d050      	beq.n	800225e <decodeCameraConfigs+0x49e>
					{
						modeStr += strlen(modeTest);
 80021bc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f863 	bl	800028c <strlen>
 80021c6:	4602      	mov	r2, r0
 80021c8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80021cc:	f103 0308 	add.w	r3, r3, #8
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80021d8:	f102 0208 	add.w	r2, r2, #8
 80021dc:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)modeStr[0]))
 80021de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80021e2:	f103 0308 	add.w	r3, r3, #8
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a93      	ldr	r2, [pc, #588]	@ (800243c <decodeCameraConfigs+0x67c>)
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d02c      	beq.n	8002254 <decodeCameraConfigs+0x494>
						{
							mode = atoi(modeStr);
 80021fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80021fe:	f103 0308 	add.w	r3, r3, #8
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f023 f86a 	bl	80252dc <atoi>
 8002208:	4603      	mov	r3, r0
 800220a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800220e:	f102 020e 	add.w	r2, r2, #14
 8002212:	7013      	strb	r3, [r2, #0]
							if(warmup >= 1 && warmup <= 255)
 8002214:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002218:	f103 030c 	add.w	r3, r3, #12
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <decodeCameraConfigs+0x47e>
 8002222:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002226:	f103 030c 	add.w	r3, r3, #12
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2bff      	cmp	r3, #255	@ 0xff
 800222e:	d806      	bhi.n	800223e <decodeCameraConfigs+0x47e>
							{
								modeValid = true;
 8002230:	2301      	movs	r3, #1
 8002232:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002236:	f102 021e 	add.w	r2, r2, #30
 800223a:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)modeStr[0]))
 800223c:	e019      	b.n	8002272 <decodeCameraConfigs+0x4b2>
							}
							else
							{
								PRINTF("Mode out of range: %d\r\n", mode);
 800223e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002242:	f103 030e 	add.w	r3, r3, #14
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	497d      	ldr	r1, [pc, #500]	@ (8002440 <decodeCameraConfigs+0x680>)
 800224c:	2001      	movs	r0, #1
 800224e:	f004 fd91 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)modeStr[0]))
 8002252:	e00e      	b.n	8002272 <decodeCameraConfigs+0x4b2>
							}
						}
						else
						{
							PRINTF("Invalid data type for mode\r\n");
 8002254:	497b      	ldr	r1, [pc, #492]	@ (8002444 <decodeCameraConfigs+0x684>)
 8002256:	2001      	movs	r0, #1
 8002258:	f004 fd8c 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)modeStr[0]))
 800225c:	e009      	b.n	8002272 <decodeCameraConfigs+0x4b2>
						}
					}
					else
					{
						PRINTF("Mode parameter not found in camera configs\r\n");
 800225e:	497a      	ldr	r1, [pc, #488]	@ (8002448 <decodeCameraConfigs+0x688>)
 8002260:	2001      	movs	r0, #1
 8002262:	f004 fd87 	bl	8006d74 <TraceSend>
						isError = true;
 8002266:	2301      	movs	r3, #1
 8002268:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800226c:	f102 020f 	add.w	r2, r2, #15
 8002270:	7013      	strb	r3, [r2, #0]
					}

					char *picPerMotionStr = strstr(subStr, picPerMotionTest);
 8002272:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002276:	3b04      	subs	r3, #4
 8002278:	4619      	mov	r1, r3
 800227a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800227e:	f103 0310 	add.w	r3, r3, #16
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	f024 fff9 	bl	802727a <strstr>
 8002288:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800228c:	f103 0304 	add.w	r3, r3, #4
 8002290:	6018      	str	r0, [r3, #0]
					if(picPerMotionStr && !isError)
 8002292:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002296:	f103 0304 	add.w	r3, r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d05b      	beq.n	8002358 <decodeCameraConfigs+0x598>
 80022a0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80022a4:	f103 030f 	add.w	r3, r3, #15
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	f083 0301 	eor.w	r3, r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d051      	beq.n	8002358 <decodeCameraConfigs+0x598>
					{
						picPerMotionStr += strlen(picPerMotionTest);
 80022b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80022b8:	3b04      	subs	r3, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fd ffe6 	bl	800028c <strlen>
 80022c0:	4602      	mov	r2, r0
 80022c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80022c6:	f103 0304 	add.w	r3, r3, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80022d2:	f102 0204 	add.w	r2, r2, #4
 80022d6:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)warmStr[0]))
 80022d8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80022dc:	f103 0318 	add.w	r3, r3, #24
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a55      	ldr	r2, [pc, #340]	@ (800243c <decodeCameraConfigs+0x67c>)
 80022e8:	4413      	add	r3, r2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02c      	beq.n	800234e <decodeCameraConfigs+0x58e>
						{
							picPerMotion = atoi(picPerMotionStr);
 80022f4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80022f8:	f103 0304 	add.w	r3, r3, #4
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	f022 ffed 	bl	80252dc <atoi>
 8002302:	4603      	mov	r3, r0
 8002304:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002308:	f102 020a 	add.w	r2, r2, #10
 800230c:	8013      	strh	r3, [r2, #0]
							if(picPerMotion >= 1 && picPerMotion <= 255)
 800230e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002312:	f103 030a 	add.w	r3, r3, #10
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <decodeCameraConfigs+0x578>
 800231c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002320:	f103 030a 	add.w	r3, r3, #10
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	2bff      	cmp	r3, #255	@ 0xff
 8002328:	d806      	bhi.n	8002338 <decodeCameraConfigs+0x578>
							{
								picPerMotionValid = true;
 800232a:	2301      	movs	r3, #1
 800232c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002330:	f102 0203 	add.w	r2, r2, #3
 8002334:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)warmStr[0]))
 8002336:	e019      	b.n	800236c <decodeCameraConfigs+0x5ac>
							}
							else
							{
								PRINTF("Warm up out of range: %d\r\n", picPerMotion);
 8002338:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800233c:	f103 030a 	add.w	r3, r3, #10
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	4941      	ldr	r1, [pc, #260]	@ (800244c <decodeCameraConfigs+0x68c>)
 8002346:	2001      	movs	r0, #1
 8002348:	f004 fd14 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)warmStr[0]))
 800234c:	e00e      	b.n	800236c <decodeCameraConfigs+0x5ac>
							}
						}
						else
						{
							PRINTF("Invalid data type for pictures per motion\r\n");
 800234e:	4940      	ldr	r1, [pc, #256]	@ (8002450 <decodeCameraConfigs+0x690>)
 8002350:	2001      	movs	r0, #1
 8002352:	f004 fd0f 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)warmStr[0]))
 8002356:	e009      	b.n	800236c <decodeCameraConfigs+0x5ac>
						}
					}
					else
					{
						PRINTF("Pictures per motion parameter not found in camera configs\r\n");
 8002358:	493e      	ldr	r1, [pc, #248]	@ (8002454 <decodeCameraConfigs+0x694>)
 800235a:	2001      	movs	r0, #1
 800235c:	f004 fd0a 	bl	8006d74 <TraceSend>
						isError = true;
 8002360:	2301      	movs	r3, #1
 8002362:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002366:	f102 020f 	add.w	r2, r2, #15
 800236a:	7013      	strb	r3, [r2, #0]
					}

					char *picIntervalStr = strstr(subStr, picIntervalTest);
 800236c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002370:	3b18      	subs	r3, #24
 8002372:	4619      	mov	r1, r3
 8002374:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002378:	f103 0310 	add.w	r3, r3, #16
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f024 ff7c 	bl	802727a <strstr>
 8002382:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002386:	6018      	str	r0, [r3, #0]
					if(picIntervalStr && !isError)
 8002388:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d066      	beq.n	8002460 <decodeCameraConfigs+0x6a0>
 8002392:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002396:	f103 030f 	add.w	r3, r3, #15
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d05c      	beq.n	8002460 <decodeCameraConfigs+0x6a0>
					{
						picIntervalStr += strlen(picIntervalTest);
 80023a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80023aa:	3b18      	subs	r3, #24
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fd ff6d 	bl	800028c <strlen>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80023c0:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)picIntervalStr[0]))
 80023c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a1b      	ldr	r2, [pc, #108]	@ (800243c <decodeCameraConfigs+0x67c>)
 80023ce:	4413      	add	r3, r2
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d028      	beq.n	800242c <decodeCameraConfigs+0x66c>
						{
							picInterval = atoi(picIntervalStr);
 80023da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	f022 ff7c 	bl	80252dc <atoi>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80023ea:	f102 0208 	add.w	r2, r2, #8
 80023ee:	8013      	strh	r3, [r2, #0]
							if(picInterval >= 1 && picInterval <= 255)
 80023f0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80023f4:	f103 0308 	add.w	r3, r3, #8
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <decodeCameraConfigs+0x656>
 80023fe:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002402:	f103 0308 	add.w	r3, r3, #8
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2bff      	cmp	r3, #255	@ 0xff
 800240a:	d804      	bhi.n	8002416 <decodeCameraConfigs+0x656>
							{
								picIntervalValid = true;
 800240c:	2301      	movs	r3, #1
 800240e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002412:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)picIntervalStr[0]))
 8002414:	e02e      	b.n	8002474 <decodeCameraConfigs+0x6b4>
							}
							else
							{
								PRINTF("Picture interval out of range: %d\r\n", picInterval);
 8002416:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800241a:	f103 0308 	add.w	r3, r3, #8
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	490d      	ldr	r1, [pc, #52]	@ (8002458 <decodeCameraConfigs+0x698>)
 8002424:	2001      	movs	r0, #1
 8002426:	f004 fca5 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)picIntervalStr[0]))
 800242a:	e023      	b.n	8002474 <decodeCameraConfigs+0x6b4>
							}
						}
						else
						{
							PRINTF("Invalid data type for picture interval\r\n");
 800242c:	490b      	ldr	r1, [pc, #44]	@ (800245c <decodeCameraConfigs+0x69c>)
 800242e:	2001      	movs	r0, #1
 8002430:	f004 fca0 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)picIntervalStr[0]))
 8002434:	e01e      	b.n	8002474 <decodeCameraConfigs+0x6b4>
 8002436:	bf00      	nop
 8002438:	0802bed0 	.word	0x0802bed0
 800243c:	0803031d 	.word	0x0803031d
 8002440:	0802bf00 	.word	0x0802bf00
 8002444:	0802beb0 	.word	0x0802beb0
 8002448:	0802bf18 	.word	0x0802bf18
 800244c:	0802be94 	.word	0x0802be94
 8002450:	0802bf48 	.word	0x0802bf48
 8002454:	0802bf74 	.word	0x0802bf74
 8002458:	0802bfb0 	.word	0x0802bfb0
 800245c:	0802bfd4 	.word	0x0802bfd4
						}
					}
					else
					{
						PRINTF("Picture interval parameter not found in camera configs\r\n");
 8002460:	49b1      	ldr	r1, [pc, #708]	@ (8002728 <decodeCameraConfigs+0x968>)
 8002462:	2001      	movs	r0, #1
 8002464:	f004 fc86 	bl	8006d74 <TraceSend>
						isError = true;
 8002468:	2301      	movs	r3, #1
 800246a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800246e:	f102 020f 	add.w	r2, r2, #15
 8002472:	7013      	strb	r3, [r2, #0]
					}

					char *samplePerDayStr = strstr(subStr, samplePerDayTest);
 8002474:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002478:	3b10      	subs	r3, #16
 800247a:	4619      	mov	r1, r3
 800247c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002480:	f103 0310 	add.w	r3, r3, #16
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	f024 fef8 	bl	802727a <strstr>
 800248a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800248e:	f103 031c 	add.w	r3, r3, #28
 8002492:	6018      	str	r0, [r3, #0]
					if(samplePerDayStr && !isError)
 8002494:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002498:	f103 031c 	add.w	r3, r3, #28
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d05b      	beq.n	800255a <decodeCameraConfigs+0x79a>
 80024a2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80024a6:	f103 030f 	add.w	r3, r3, #15
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	f083 0301 	eor.w	r3, r3, #1
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d051      	beq.n	800255a <decodeCameraConfigs+0x79a>
					{
						samplePerDayStr += strlen(samplePerDayTest);
 80024b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80024ba:	3b10      	subs	r3, #16
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd fee5 	bl	800028c <strlen>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80024c8:	f103 031c 	add.w	r3, r3, #28
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80024d4:	f102 021c 	add.w	r2, r2, #28
 80024d8:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)samplePerDayStr[0]))
 80024da:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80024de:	f103 031c 	add.w	r3, r3, #28
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a90      	ldr	r2, [pc, #576]	@ (800272c <decodeCameraConfigs+0x96c>)
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02c      	beq.n	8002550 <decodeCameraConfigs+0x790>
						{
							samplePerDay = atoi(samplePerDayStr);
 80024f6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80024fa:	f103 031c 	add.w	r3, r3, #28
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f022 feec 	bl	80252dc <atoi>
 8002504:	4603      	mov	r3, r0
 8002506:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800250a:	f102 0206 	add.w	r2, r2, #6
 800250e:	8013      	strh	r3, [r2, #0]
							if(samplePerDay >= 1 && samplePerDay <= 255)
 8002510:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002514:	f103 0306 	add.w	r3, r3, #6
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00d      	beq.n	800253a <decodeCameraConfigs+0x77a>
 800251e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002522:	f103 0306 	add.w	r3, r3, #6
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2bff      	cmp	r3, #255	@ 0xff
 800252a:	d806      	bhi.n	800253a <decodeCameraConfigs+0x77a>
							{
								samplePerDayValid = true;
 800252c:	2301      	movs	r3, #1
 800252e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002532:	f102 0201 	add.w	r2, r2, #1
 8002536:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)samplePerDayStr[0]))
 8002538:	e019      	b.n	800256e <decodeCameraConfigs+0x7ae>
							}
							else
							{
								PRINTF("Sample pictures per day out of range: %d\r\n", samplePerDay);
 800253a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800253e:	f103 0306 	add.w	r3, r3, #6
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	497a      	ldr	r1, [pc, #488]	@ (8002730 <decodeCameraConfigs+0x970>)
 8002548:	2001      	movs	r0, #1
 800254a:	f004 fc13 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)samplePerDayStr[0]))
 800254e:	e00e      	b.n	800256e <decodeCameraConfigs+0x7ae>
							}
						}
						else
						{
							PRINTF("Invalid data type for sample pictures per day\r\n");
 8002550:	4978      	ldr	r1, [pc, #480]	@ (8002734 <decodeCameraConfigs+0x974>)
 8002552:	2001      	movs	r0, #1
 8002554:	f004 fc0e 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)samplePerDayStr[0]))
 8002558:	e009      	b.n	800256e <decodeCameraConfigs+0x7ae>
						}
					}
					else
					{
						PRINTF("Sample pictures per day parameter not found in camera configs\r\n");
 800255a:	4977      	ldr	r1, [pc, #476]	@ (8002738 <decodeCameraConfigs+0x978>)
 800255c:	2001      	movs	r0, #1
 800255e:	f004 fc09 	bl	8006d74 <TraceSend>
						isError = true;
 8002562:	2301      	movs	r3, #1
 8002564:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002568:	f102 020f 	add.w	r2, r2, #15
 800256c:	7013      	strb	r3, [r2, #0]
					}

					char *sampleTimeStr = strstr(subStr, sampleTimeTest);
 800256e:	f107 0310 	add.w	r3, r7, #16
 8002572:	3b08      	subs	r3, #8
 8002574:	4619      	mov	r1, r3
 8002576:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800257a:	f103 0310 	add.w	r3, r3, #16
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	f024 fe7b 	bl	802727a <strstr>
 8002584:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002588:	f103 0318 	add.w	r3, r3, #24
 800258c:	6018      	str	r0, [r3, #0]
					if(sampleTimeStr && !isError)
 800258e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002592:	f103 0318 	add.w	r3, r3, #24
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8091 	beq.w	80026c0 <decodeCameraConfigs+0x900>
 800259e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80025a2:	f103 030f 	add.w	r3, r3, #15
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8086 	beq.w	80026c0 <decodeCameraConfigs+0x900>
					{
						char *sampleTimeStrH = sampleTimeStr + (strlen(sampleTimeTest) + 1);
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	3b08      	subs	r3, #8
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd fe66 	bl	800028c <strlen>
 80025c0:	4603      	mov	r3, r0
 80025c2:	3301      	adds	r3, #1
 80025c4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80025c8:	f102 0218 	add.w	r2, r2, #24
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80025d4:	f102 0214 	add.w	r2, r2, #20
 80025d8:	6013      	str	r3, [r2, #0]
						char *sampleTimeStrM = sampleTimeStr + (strlen(sampleTimeTest) + 4);
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	3b08      	subs	r3, #8
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd fe53 	bl	800028c <strlen>
 80025e6:	4603      	mov	r3, r0
 80025e8:	3304      	adds	r3, #4
 80025ea:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80025ee:	f102 0218 	add.w	r2, r2, #24
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80025fa:	f102 0210 	add.w	r2, r2, #16
 80025fe:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)sampleTimeStrH[0]) && isdigit((unsigned char)sampleTimeStrM[0]))
 8002600:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002604:	f103 0314 	add.w	r3, r3, #20
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a47      	ldr	r2, [pc, #284]	@ (800272c <decodeCameraConfigs+0x96c>)
 8002610:	4413      	add	r3, r2
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d04b      	beq.n	80026b4 <decodeCameraConfigs+0x8f4>
 800261c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002620:	f103 0310 	add.w	r3, r3, #16
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	4a40      	ldr	r2, [pc, #256]	@ (800272c <decodeCameraConfigs+0x96c>)
 800262c:	4413      	add	r3, r2
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d03d      	beq.n	80026b4 <decodeCameraConfigs+0x8f4>
						{
							sampleTimeH = atoi(sampleTimeStrH);
 8002638:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800263c:	f103 0314 	add.w	r3, r3, #20
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f022 fe4b 	bl	80252dc <atoi>
 8002646:	4603      	mov	r3, r0
 8002648:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800264c:	f102 0205 	add.w	r2, r2, #5
 8002650:	7013      	strb	r3, [r2, #0]
							sampleTimeM = atoi(sampleTimeStrM);
 8002652:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002656:	f103 0310 	add.w	r3, r3, #16
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f022 fe3e 	bl	80252dc <atoi>
 8002660:	4603      	mov	r3, r0
 8002662:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002666:	f102 0204 	add.w	r2, r2, #4
 800266a:	7013      	strb	r3, [r2, #0]
							if(sampleTimeH >= 0 && sampleTimeH <= 23 && sampleTimeH >= 0 && sampleTimeH <= 59)
 800266c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002670:	f103 0305 	add.w	r3, r3, #5
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b17      	cmp	r3, #23
 8002678:	d80d      	bhi.n	8002696 <decodeCameraConfigs+0x8d6>
 800267a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800267e:	f103 0305 	add.w	r3, r3, #5
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b3b      	cmp	r3, #59	@ 0x3b
 8002686:	d806      	bhi.n	8002696 <decodeCameraConfigs+0x8d6>
							{
								sampleTimeValid = true;
 8002688:	2301      	movs	r3, #1
 800268a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800268e:	f102 021f 	add.w	r2, r2, #31
 8002692:	7013      	strb	r3, [r2, #0]
							if(sampleTimeH >= 0 && sampleTimeH <= 23 && sampleTimeH >= 0 && sampleTimeH <= 59)
 8002694:	e013      	b.n	80026be <decodeCameraConfigs+0x8fe>
							}
							else
							{
								PRINTF("Sample time out out of range: %d hours, %d minutes\r\n", sampleTimeH, sampleTimeM);
 8002696:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800269a:	f103 0305 	add.w	r3, r3, #5
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80026a4:	f103 0304 	add.w	r3, r3, #4
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4924      	ldr	r1, [pc, #144]	@ (800273c <decodeCameraConfigs+0x97c>)
 80026ac:	2001      	movs	r0, #1
 80026ae:	f004 fb61 	bl	8006d74 <TraceSend>
							if(sampleTimeH >= 0 && sampleTimeH <= 23 && sampleTimeH >= 0 && sampleTimeH <= 59)
 80026b2:	e004      	b.n	80026be <decodeCameraConfigs+0x8fe>
							}
						}
						else
						{
							PRINTF("Invalid data type for sample time\r\n");
 80026b4:	4922      	ldr	r1, [pc, #136]	@ (8002740 <decodeCameraConfigs+0x980>)
 80026b6:	2001      	movs	r0, #1
 80026b8:	f004 fb5c 	bl	8006d74 <TraceSend>
					{
 80026bc:	e032      	b.n	8002724 <decodeCameraConfigs+0x964>
 80026be:	e031      	b.n	8002724 <decodeCameraConfigs+0x964>
						}
					}
					else
					{
						PRINTF("Sample time parameter not found in camera configs\r\n");
 80026c0:	4920      	ldr	r1, [pc, #128]	@ (8002744 <decodeCameraConfigs+0x984>)
 80026c2:	2001      	movs	r0, #1
 80026c4:	f004 fb56 	bl	8006d74 <TraceSend>
						isError = true;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80026ce:	f102 020f 	add.w	r2, r2, #15
 80026d2:	7013      	strb	r3, [r2, #0]
	{
 80026d4:	e048      	b.n	8002768 <decodeCameraConfigs+0x9a8>
					}
				}
				else
				{
					PRINTF("Wrong version. Expecting 0, received: %d", version);
 80026d6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80026da:	f103 0317 	add.w	r3, r3, #23
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	4919      	ldr	r1, [pc, #100]	@ (8002748 <decodeCameraConfigs+0x988>)
 80026e4:	2001      	movs	r0, #1
 80026e6:	f004 fb45 	bl	8006d74 <TraceSend>
					isError = true;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80026f0:	f102 020f 	add.w	r2, r2, #15
 80026f4:	7013      	strb	r3, [r2, #0]
	{
 80026f6:	e037      	b.n	8002768 <decodeCameraConfigs+0x9a8>
				}
			}
			else
			{
				PRINTF("Invalid type for version\r\n");
 80026f8:	4914      	ldr	r1, [pc, #80]	@ (800274c <decodeCameraConfigs+0x98c>)
 80026fa:	2001      	movs	r0, #1
 80026fc:	f004 fb3a 	bl	8006d74 <TraceSend>
				isError = true;
 8002700:	2301      	movs	r3, #1
 8002702:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002706:	f102 020f 	add.w	r2, r2, #15
 800270a:	7013      	strb	r3, [r2, #0]
	{
 800270c:	e02c      	b.n	8002768 <decodeCameraConfigs+0x9a8>
			}
		}
		else
		{
			PRINTF("Version not found in Camera downlink string\r\n");
 800270e:	4910      	ldr	r1, [pc, #64]	@ (8002750 <decodeCameraConfigs+0x990>)
 8002710:	2001      	movs	r0, #1
 8002712:	f004 fb2f 	bl	8006d74 <TraceSend>
			isError = true;
 8002716:	2301      	movs	r3, #1
 8002718:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800271c:	f102 020f 	add.w	r2, r2, #15
 8002720:	7013      	strb	r3, [r2, #0]
	{
 8002722:	e021      	b.n	8002768 <decodeCameraConfigs+0x9a8>
 8002724:	e020      	b.n	8002768 <decodeCameraConfigs+0x9a8>
 8002726:	bf00      	nop
 8002728:	0802c000 	.word	0x0802c000
 800272c:	0803031d 	.word	0x0803031d
 8002730:	0802c03c 	.word	0x0802c03c
 8002734:	0802c068 	.word	0x0802c068
 8002738:	0802c098 	.word	0x0802c098
 800273c:	0802c0d8 	.word	0x0802c0d8
 8002740:	0802c110 	.word	0x0802c110
 8002744:	0802c134 	.word	0x0802c134
 8002748:	0802c168 	.word	0x0802c168
 800274c:	0802c194 	.word	0x0802c194
 8002750:	0802c1b0 	.word	0x0802c1b0
		}
	}
	else
	{
		PRINTF("Camera configurations not found in configuration string\r\n");
 8002754:	493d      	ldr	r1, [pc, #244]	@ (800284c <decodeCameraConfigs+0xa8c>)
 8002756:	2001      	movs	r0, #1
 8002758:	f004 fb0c 	bl	8006d74 <TraceSend>
		isError = true;
 800275c:	2301      	movs	r3, #1
 800275e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8002762:	f102 020f 	add.w	r2, r2, #15
 8002766:	7013      	strb	r3, [r2, #0]
	}


	if(!isError && picPerMotionValid && warmupValid && samplePerDayValid && picIntervalValid && sampleTimeValid && modeValid)
 8002768:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800276c:	f103 030f 	add.w	r3, r3, #15
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05c      	beq.n	8002836 <decodeCameraConfigs+0xa76>
 800277c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002780:	f103 0303 	add.w	r3, r3, #3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d055      	beq.n	8002836 <decodeCameraConfigs+0xa76>
 800278a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800278e:	f103 0302 	add.w	r3, r3, #2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d04e      	beq.n	8002836 <decodeCameraConfigs+0xa76>
 8002798:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800279c:	f103 0301 	add.w	r3, r3, #1
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d047      	beq.n	8002836 <decodeCameraConfigs+0xa76>
 80027a6:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d042      	beq.n	8002836 <decodeCameraConfigs+0xa76>
 80027b0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80027b4:	f103 031f 	add.w	r3, r3, #31
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03b      	beq.n	8002836 <decodeCameraConfigs+0xa76>
 80027be:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80027c2:	f103 031e 	add.w	r3, r3, #30
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d034      	beq.n	8002836 <decodeCameraConfigs+0xa76>
	{
		privateCameraParameters.mode = mode;
 80027cc:	4a20      	ldr	r2, [pc, #128]	@ (8002850 <decodeCameraConfigs+0xa90>)
 80027ce:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80027d2:	f103 030e 	add.w	r3, r3, #14
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	7013      	strb	r3, [r2, #0]
		privateCameraParameters.pictureInterval = picInterval;
 80027da:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80027de:	f103 0308 	add.w	r3, r3, #8
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <decodeCameraConfigs+0xa90>)
 80027e8:	70da      	strb	r2, [r3, #3]
		privateCameraParameters.picturesPerEvent = picPerMotion;
 80027ea:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80027ee:	f103 030a 	add.w	r3, r3, #10
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <decodeCameraConfigs+0xa90>)
 80027f8:	709a      	strb	r2, [r3, #2]
		privateCameraParameters.warmUp = warmup;
 80027fa:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80027fe:	f103 030c 	add.w	r3, r3, #12
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <decodeCameraConfigs+0xa90>)
 8002808:	705a      	strb	r2, [r3, #1]
		privateCameraParameters.samplePicNumber = samplePerDay;
 800280a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800280e:	f103 0306 	add.w	r3, r3, #6
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <decodeCameraConfigs+0xa90>)
 8002818:	719a      	strb	r2, [r3, #6]
		privateCameraParameters.samplePictureTime.hours = sampleTimeH;
 800281a:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <decodeCameraConfigs+0xa90>)
 800281c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8002820:	f103 0305 	add.w	r3, r3, #5
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	7113      	strb	r3, [r2, #4]
		privateCameraParameters.samplePictureTime.hours = sampleTimeM;
 8002828:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <decodeCameraConfigs+0xa90>)
 800282a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800282e:	f103 0304 	add.w	r3, r3, #4
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	7113      	strb	r3, [r2, #4]
	}

	return isError;
 8002836:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800283a:	f103 030f 	add.w	r3, r3, #15
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bdb0      	pop	{r4, r5, r7, pc}
 800284c:	0802c1e0 	.word	0x0802c1e0
 8002850:	20000dc0 	.word	0x20000dc0

08002854 <getCamConfigStr>:
 * @note
 * @param  void
 * @retval returns config string or an error message if something goes wrong
 */
char* getCamConfigStr(void)
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002856:	b093      	sub	sp, #76	@ 0x4c
 8002858:	af0e      	add	r7, sp, #56	@ 0x38
	static char buffer[CAM_MSG_SIZE] = {0};
	bool valid = false;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]

	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 800285e:	4b22      	ldr	r3, [pc, #136]	@ (80028e8 <getCamConfigStr+0x94>)
 8002860:	781b      	ldrb	r3, [r3, #0]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 8002862:	461a      	mov	r2, r3
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 8002864:	4b20      	ldr	r3, [pc, #128]	@ (80028e8 <getCamConfigStr+0x94>)
 8002866:	785b      	ldrb	r3, [r3, #1]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 8002868:	4619      	mov	r1, r3
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 800286a:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <getCamConfigStr+0x94>)
 800286c:	789b      	ldrb	r3, [r3, #2]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 800286e:	4618      	mov	r0, r3
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <getCamConfigStr+0x94>)
 8002872:	78db      	ldrb	r3, [r3, #3]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 8002874:	461c      	mov	r4, r3
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 8002876:	4b1c      	ldr	r3, [pc, #112]	@ (80028e8 <getCamConfigStr+0x94>)
 8002878:	791b      	ldrb	r3, [r3, #4]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 800287a:	461d      	mov	r5, r3
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 800287c:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <getCamConfigStr+0x94>)
 800287e:	795b      	ldrb	r3, [r3, #5]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 8002880:	461e      	mov	r6, r3
			CAM_CONFIG_VERSION, privateCameraParameters.mode, privateCameraParameters.warmUp, privateCameraParameters.picturesPerEvent, privateCameraParameters.pictureInterval, privateCameraParameters.samplePictureTime.hours, privateCameraParameters.samplePictureTime.minutes, privateCameraParameters.samplePicNumber,123,123,123,123,123,123);
 8002882:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <getCamConfigStr+0x94>)
 8002884:	799b      	ldrb	r3, [r3, #6]
	int buffSize = snprintf(buffer, CAM_MSG_SIZE, "\"camera\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u,\"pictures_per_motion\":%u,\"picture_interval\":%u,\"sample_picture_time\":\"%2u:%2u\",\"sample_pictures_day\":%u,\"exposure\":%u,\"iso\":%u,\"white_balance\":%u,\"white_balance_mode\":%u,\"ev\":%u,\"image_quality\":%u}",
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	237b      	movs	r3, #123	@ 0x7b
 800288a:	930c      	str	r3, [sp, #48]	@ 0x30
 800288c:	237b      	movs	r3, #123	@ 0x7b
 800288e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002890:	237b      	movs	r3, #123	@ 0x7b
 8002892:	930a      	str	r3, [sp, #40]	@ 0x28
 8002894:	237b      	movs	r3, #123	@ 0x7b
 8002896:	9309      	str	r3, [sp, #36]	@ 0x24
 8002898:	237b      	movs	r3, #123	@ 0x7b
 800289a:	9308      	str	r3, [sp, #32]
 800289c:	237b      	movs	r3, #123	@ 0x7b
 800289e:	9307      	str	r3, [sp, #28]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	9306      	str	r3, [sp, #24]
 80028a4:	9605      	str	r6, [sp, #20]
 80028a6:	9504      	str	r5, [sp, #16]
 80028a8:	9403      	str	r4, [sp, #12]
 80028aa:	9002      	str	r0, [sp, #8]
 80028ac:	9101      	str	r1, [sp, #4]
 80028ae:	9200      	str	r2, [sp, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <getCamConfigStr+0x98>)
 80028b4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80028b8:	480d      	ldr	r0, [pc, #52]	@ (80028f0 <getCamConfigStr+0x9c>)
 80028ba:	f024 fb77 	bl	8026fac <sniprintf>
 80028be:	60b8      	str	r0, [r7, #8]

	if(buffSize > 0 && buffSize < CAM_MSG_SIZE)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	dd05      	ble.n	80028d2 <getCamConfigStr+0x7e>
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80028cc:	da01      	bge.n	80028d2 <getCamConfigStr+0x7e>
	{
		valid = true;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
	}

	if(valid)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <getCamConfigStr+0x88>
	{
		return buffer;
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <getCamConfigStr+0x9c>)
 80028da:	e000      	b.n	80028de <getCamConfigStr+0x8a>
	}
	else
	{
		return "Failed to build GPS message\r\n";
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <getCamConfigStr+0xa0>)
	}
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000dc0 	.word	0x20000dc0
 80028ec:	0802c2a4 	.word	0x0802c2a4
 80028f0:	20000ed0 	.word	0x20000ed0
 80028f4:	0802c398 	.word	0x0802c398

080028f8 <cameraInit>:
void cameraInit ( ArducamCamera *camera )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
//    arducamSpiBegin();
//    arducamCsOutputMode(camera->csPin);
	cameraCsLow ( camera );
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fcbd 	bl	8003280 <cameraCsLow>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <cameraGetSensorConfig>:

void cameraGetSensorConfig ( ArducamCamera *camera )
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	uint8_t cameraIdx = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]
	camera->cameraId = readReg ( camera , CAM_REG_SENSOR_ID );
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fe69 	bl	80035f6 <readReg>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	735a      	strb	r2, [r3, #13]
	waitI2cIdle ( camera );
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fef2 	bl	8003716 <waitI2cIdle>
	switch (camera->cameraId)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7b5b      	ldrb	r3, [r3, #13]
 8002936:	3b81      	subs	r3, #129	@ 0x81
 8002938:	2b03      	cmp	r3, #3
 800293a:	d814      	bhi.n	8002966 <cameraGetSensorConfig+0x56>
 800293c:	a201      	add	r2, pc, #4	@ (adr r2, 8002944 <cameraGetSensorConfig+0x34>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	0800295b 	.word	0x0800295b
 8002948:	08002961 	.word	0x08002961
 800294c:	08002955 	.word	0x08002955
 8002950:	08002961 	.word	0x08002961
	{
		case SENSOR_5MP_2:
			CameraInfo_5MP.cameraId = "5MP_2";
 8002954:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <cameraGetSensorConfig+0x7c>)
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <cameraGetSensorConfig+0x80>)
 8002958:	601a      	str	r2, [r3, #0]
		case SENSOR_5MP_1:
			cameraIdx = 0x00;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
			break;
 800295e:	e002      	b.n	8002966 <cameraGetSensorConfig+0x56>
		case SENSOR_3MP_1:
		case SENSOR_3MP_2:
			cameraIdx = 0x01;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
			break;
 8002964:	bf00      	nop
	}

	camera->myCameraInfo = *CameraType [ cameraIdx ];
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <cameraGetSensorConfig+0x84>)
 800296a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f103 0414 	add.w	r4, r3, #20
 8002974:	4615      	mov	r5, r2
 8002976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800297a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800297e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// camera->currentPixelFormat = cameraDefaultInfo[cameraIdx]->cameraDefaultFormat;
	// camera->currentPictureMode = cameraDefaultInfo[cameraIdx]->cameraDefaultResolution;
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bdb0      	pop	{r4, r5, r7, pc}
 800298a:	bf00      	nop
 800298c:	200001f8 	.word	0x200001f8
 8002990:	0802c3b8 	.word	0x0802c3b8
 8002994:	20000dc8 	.word	0x20000dc8

08002998 <cameraBegin>:

CamStatus cameraBegin ( ArducamCamera *camera )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	// reset cpld and camera
	writeReg ( camera , CAM_REG_SENSOR_RESET , CAM_SENSOR_RESET_ENABLE );
 80029a0:	2240      	movs	r2, #64	@ 0x40
 80029a2:	2107      	movs	r1, #7
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fe13 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 feb3 	bl	8003716 <waitI2cIdle>
	cameraGetSensorConfig ( camera );
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ffad 	bl	8002910 <cameraGetSensorConfig>
	camera->verDateAndNumber [ 0 ] = readReg ( camera , CAM_REG_YEAR_ID ) & 0x3F; // year
 80029b6:	2141      	movs	r1, #65	@ 0x41
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fe1c 	bl	80035f6 <readReg>
 80029be:	4603      	mov	r3, r0
 80029c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	waitI2cIdle ( camera );
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fea2 	bl	8003716 <waitI2cIdle>
	camera->verDateAndNumber [ 1 ] = readReg ( camera , CAM_REG_MONTH_ID ) & 0x0F; // month
 80029d2:	2142      	movs	r1, #66	@ 0x42
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fe0e 	bl	80035f6 <readReg>
 80029da:	4603      	mov	r3, r0
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	waitI2cIdle ( camera );
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fe94 	bl	8003716 <waitI2cIdle>
	camera->verDateAndNumber [ 2 ] = readReg ( camera , CAM_REG_DAY_ID ) & 0x1F; // day
 80029ee:	2143      	movs	r1, #67	@ 0x43
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fe00 	bl	80035f6 <readReg>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	waitI2cIdle ( camera );
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fe86 	bl	8003716 <waitI2cIdle>
	camera->verDateAndNumber [ 3 ] = readReg ( camera , CAM_REG_FPGA_VERSION_NUMBER ) & 0xFF; // day
 8002a0a:	2149      	movs	r1, #73	@ 0x49
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fdf2 	bl	80035f6 <readReg>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	waitI2cIdle ( camera );
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fe7a 	bl	8003716 <waitI2cIdle>

	writeReg ( camera , CAM_REG_DEBUG_DEVICE_ADDRESS , camera->myCameraInfo.deviceAddress );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002a28:	461a      	mov	r2, r3
 8002a2a:	210a      	movs	r1, #10
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fdcf 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fe6f 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <cameraSetCapture>:

void cameraSetCapture ( ArducamCamera *camera )
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	flushFifo ( camera );
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fe7f 	bl	800374e <flushFifo>
	clearFifoFlag ( camera );
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fe12 	bl	800367a <clearFifoFlag>
	startCapture ( camera );
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 fe01 	bl	800365e <startCapture>
	while (getBit ( camera , ARDUCHIP_TRIG , CAP_DONE_MASK ) == 0)
 8002a5c:	bf00      	nop
 8002a5e:	2204      	movs	r2, #4
 8002a60:	2144      	movs	r1, #68	@ 0x44
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fe26 	bl	80036b4 <getBit>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f7      	beq.n	8002a5e <cameraSetCapture+0x1c>
		;;
	camera->receivedLength = readFifoLength ( camera );
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fe11 	bl	8003696 <readFifoLength>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]
	camera->totalLength = camera->receivedLength;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	605a      	str	r2, [r3, #4]
	camera->burstFirstFlag = 0;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	739a      	strb	r2, [r3, #14]
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <cameraImageAvailable>:

uint32_t cameraImageAvailable ( ArducamCamera *camera )
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
	return camera->receivedLength;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <cameraSetAutoFocus>:

CamStatus cameraSetAutoFocus ( ArducamCamera *camera , uint8_t val )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_AUTO_FOCUS_CONTROL , val ); // auto focus control
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2129      	movs	r1, #41	@ 0x29
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fd88 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                               // Wait I2c Idle
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fe28 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <cameraTakePicture>:

CamStatus cameraTakePicture ( ArducamCamera *camera , CAM_IMAGE_MODE mode , CAM_IMAGE_PIX_FMT pixel_format )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
 8002adc:	4613      	mov	r3, r2
 8002ade:	70bb      	strb	r3, [r7, #2]
	if (camera->currentPixelFormat != pixel_format)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7c1b      	ldrb	r3, [r3, #16]
 8002ae4:	78ba      	ldrb	r2, [r7, #2]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00b      	beq.n	8002b02 <cameraTakePicture+0x32>
	{
		camera->currentPixelFormat = pixel_format;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	78ba      	ldrb	r2, [r7, #2]
 8002aee:	741a      	strb	r2, [r3, #16]
		writeReg ( camera , CAM_REG_FORMAT , pixel_format ); // set the data format
 8002af0:	78bb      	ldrb	r3, [r7, #2]
 8002af2:	461a      	mov	r2, r3
 8002af4:	2120      	movs	r1, #32
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fd6a 	bl	80035d0 <writeReg>
		waitI2cIdle ( camera );                            // Wait I2c Idle
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fe0a 	bl	8003716 <waitI2cIdle>
	}

	if (camera->currentPictureMode != mode)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7c5b      	ldrb	r3, [r3, #17]
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d00b      	beq.n	8002b24 <cameraTakePicture+0x54>
	{
		camera->currentPictureMode = mode;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	745a      	strb	r2, [r3, #17]
		writeReg ( camera , CAM_REG_CAPTURE_RESOLUTION , CAM_SET_CAPTURE_MODE | mode );
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	461a      	mov	r2, r3
 8002b16:	2121      	movs	r1, #33	@ 0x21
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fd59 	bl	80035d0 <writeReg>
		waitI2cIdle ( camera ); // Wait I2c Idle
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fdf9 	bl	8003716 <waitI2cIdle>
	}

	setCapture ( camera );
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fde8 	bl	80036fa <setCapture>
	return CAM_ERR_SUCCESS;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <cameratakeMultiPictures>:

CamStatus cameratakeMultiPictures ( ArducamCamera *camera , CAM_IMAGE_MODE mode , CAM_IMAGE_PIX_FMT pixel_format ,
        uint8_t num )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	70fb      	strb	r3, [r7, #3]
 8002b46:	460b      	mov	r3, r1
 8002b48:	70bb      	strb	r3, [r7, #2]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	707b      	strb	r3, [r7, #1]
	if (camera->currentPixelFormat != pixel_format)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7c1b      	ldrb	r3, [r3, #16]
 8002b52:	78ba      	ldrb	r2, [r7, #2]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d00b      	beq.n	8002b70 <cameratakeMultiPictures+0x3c>
	{
		camera->currentPixelFormat = pixel_format;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	78ba      	ldrb	r2, [r7, #2]
 8002b5c:	741a      	strb	r2, [r3, #16]
		writeReg ( camera , CAM_REG_FORMAT , pixel_format ); // set the data format
 8002b5e:	78bb      	ldrb	r3, [r7, #2]
 8002b60:	461a      	mov	r2, r3
 8002b62:	2120      	movs	r1, #32
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fd33 	bl	80035d0 <writeReg>
		waitI2cIdle ( camera );                            // Wait I2c Idle
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fdd3 	bl	8003716 <waitI2cIdle>
	}

	if (camera->currentPictureMode != mode)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7c5b      	ldrb	r3, [r3, #17]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d00b      	beq.n	8002b92 <cameratakeMultiPictures+0x5e>
	{
		camera->currentPictureMode = mode;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	745a      	strb	r2, [r3, #17]
		writeReg ( camera , CAM_REG_CAPTURE_RESOLUTION , CAM_SET_CAPTURE_MODE | mode );
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	461a      	mov	r2, r3
 8002b84:	2121      	movs	r1, #33	@ 0x21
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fd22 	bl	80035d0 <writeReg>
		waitI2cIdle ( camera ); // Wait I2c Idle
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fdc2 	bl	8003716 <waitI2cIdle>
	if (num > CAPRURE_MAX_NUM)
	{
		num = CAPRURE_MAX_NUM;
	}

	writeReg ( camera , ARDUCHIP_FRAMES , num );
 8002b92:	787b      	ldrb	r3, [r7, #1]
 8002b94:	461a      	mov	r2, r3
 8002b96:	2101      	movs	r1, #1
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fd19 	bl	80035d0 <writeReg>
	setCapture ( camera );
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fdab 	bl	80036fa <setCapture>
	return CAM_ERR_SUCCESS;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <cameraRegisterCallback>:

void cameraRegisterCallback ( ArducamCamera *camera , BUFFER_CALLBACK function , uint8_t size , STOP_HANDLE handle )
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	71fb      	strb	r3, [r7, #7]
	camera->callBackFunction = function;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38
	camera->blockSize = size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	79fa      	ldrb	r2, [r7, #7]
 8002bc8:	731a      	strb	r2, [r3, #12]
	camera->handle = handle;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <cameraStartPreview>:

CamStatus cameraStartPreview ( ArducamCamera *camera , CAM_VIDEO_MODE mode )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]

	// camera->cameraDataFormat = CAM_IMAGE_PIX_FMT_JPG;
	camera->previewMode = TRUE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	73da      	strb	r2, [r3, #15]
	if (!camera->callBackFunction)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <cameraStartPreview+0x20>
	{
		return CAM_ERR_NO_CALLBACK;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	e017      	b.n	8002c2c <cameraStartPreview+0x50>
	}
	writeReg ( camera , CAM_REG_FORMAT , CAM_IMAGE_PIX_FMT_JPG ); // set  jpeg format
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2120      	movs	r1, #32
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fce5 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                     // Wait I2c Idle
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fd85 	bl	8003716 <waitI2cIdle>
	writeReg ( camera , CAM_REG_CAPTURE_RESOLUTION ,
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	2121      	movs	r1, #33	@ 0x21
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fcd9 	bl	80035d0 <writeReg>
	CAM_SET_VIDEO_MODE | mode ); // set  video mode
	waitI2cIdle ( camera );                 // Wait I2c Idle
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fd79 	bl	8003716 <waitI2cIdle>
	setCapture ( camera );
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fd68 	bl	80036fa <setCapture>

	return CAM_ERR_SUCCESS;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <cameraCaptureThread>:
static uint8_t callBackBuff [ PREVIEW_BUF_LEN ];

void cameraCaptureThread ( ArducamCamera *camera )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
	if (camera->previewMode)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7bdb      	ldrb	r3, [r3, #15]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <cameraCaptureThread+0x3c>
	{
		uint8_t callBackLength = readBuff ( camera , callBackBuff , camera->blockSize );
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7b1b      	ldrb	r3, [r3, #12]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	490b      	ldr	r1, [pc, #44]	@ (8002c78 <cameraCaptureThread+0x44>)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fcad 	bl	80035ac <readBuff>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
		if (callBackLength != FALSE)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d006      	beq.n	8002c6a <cameraCaptureThread+0x36>
		{
			camera->callBackFunction ( callBackBuff , callBackLength );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4804      	ldr	r0, [pc, #16]	@ (8002c78 <cameraCaptureThread+0x44>)
 8002c66:	4798      	blx	r3
		else
		{
			setCapture ( camera );
		}
	}
}
 8002c68:	e002      	b.n	8002c70 <cameraCaptureThread+0x3c>
			setCapture ( camera );
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fd45 	bl	80036fa <setCapture>
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000dd0 	.word	0x20000dd0

08002c7c <cameraStopPreview>:

CamStatus cameraStopPreview ( ArducamCamera *camera )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	if (camera->previewMode == TRUE && camera->handle != 0)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7bdb      	ldrb	r3, [r3, #15]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d106      	bne.n	8002c9a <cameraStopPreview+0x1e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <cameraStopPreview+0x1e>
	{
		camera->handle ();
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	4798      	blx	r3
	}

	camera->currentPixelFormat = CAM_IMAGE_PIX_FMT_JPG;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	741a      	strb	r2, [r3, #16]
	camera->currentPictureMode = CAM_IMAGE_MODE_QVGA;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	745a      	strb	r2, [r3, #17]
	camera->previewMode = FALSE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	73da      	strb	r2, [r3, #15]
	camera->receivedLength = 0;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
	camera->totalLength = 0;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
	writeReg ( camera , CAM_REG_FORMAT , CAM_IMAGE_PIX_FMT_JPG ); // set  jpeg format
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2120      	movs	r1, #32
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fc87 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                     // Wait I2c Idle
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fd27 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <cameraSetImageQuality>:

CamStatus cameraSetImageQuality ( ArducamCamera *camera , IMAGE_QUALITY qualtiy )
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_IMAGE_QUALITY , qualtiy );
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	212a      	movs	r1, #42	@ 0x2a
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fc73 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fd13 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <cameraReset>:

CamStatus cameraReset ( ArducamCamera *camera )
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
	writeReg ( camera , CAM_REG_SENSOR_RESET , CAM_SENSOR_RESET_ENABLE );
 8002d02:	2240      	movs	r2, #64	@ 0x40
 8002d04:	2107      	movs	r1, #7
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fc62 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fd02 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <cameraSetAutoWhiteBalanceMode>:

CamStatus cameraSetAutoWhiteBalanceMode ( ArducamCamera *camera , CAM_WHITE_BALANCE mode )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_WHILEBALANCE_MODE_CONTROL , mode ); // set Light Mode
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2126      	movs	r1, #38	@ 0x26
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fc4e 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                       // Wait I2c Idle
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fcee 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <cameraSetAutoWhiteBalance>:

CamStatus cameraSetAutoWhiteBalance ( ArducamCamera *camera , uint8_t val )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
	unsigned char symbol = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
	if (val == TRUE)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d103      	bne.n	8002d62 <cameraSetAutoWhiteBalance+0x1e>
	{
		symbol |= 0x80;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d60:	73fb      	strb	r3, [r7, #15]
	}
	symbol |= SET_WHILEBALANCE;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	73fb      	strb	r3, [r7, #15]
	writeReg ( camera , CAM_REG_EXPOSURE_GAIN_WHILEBALANCE_CONTROL , symbol );    // while balance control
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2130      	movs	r1, #48	@ 0x30
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fc2d 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fccd 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <cameraSetAutoISOSensitive>:

CamStatus cameraSetAutoISOSensitive ( ArducamCamera *camera , uint8_t val )
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
	unsigned char symbol = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
	if (val == TRUE)
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d103      	bne.n	8002da4 <cameraSetAutoISOSensitive+0x1e>
	{
		symbol |= 0x80;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002da2:	73fb      	strb	r3, [r7, #15]
	}
	symbol |= SET_GAIN;
	writeReg ( camera , CAM_REG_EXPOSURE_GAIN_WHILEBALANCE_CONTROL , symbol );    // auto gain control
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	461a      	mov	r2, r3
 8002da8:	2130      	movs	r1, #48	@ 0x30
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fc10 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fcb0 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <cameraSetISOSensitivity>:

CamStatus cameraSetISOSensitivity ( ArducamCamera *camera , int iso_sense )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
	if (camera->cameraId == SENSOR_3MP_1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7b5b      	ldrb	r3, [r3, #13]
 8002dce:	2b82      	cmp	r3, #130	@ 0x82
 8002dd0:	d104      	bne.n	8002ddc <cameraSetISOSensitivity+0x1c>
	{
		iso_sense = ov3640GainValue [ iso_sense - 1 ];
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002e10 <cameraSetISOSensitivity+0x50>)
 8002dd8:	5cd3      	ldrb	r3, [r2, r3]
 8002dda:	603b      	str	r3, [r7, #0]
	}
	writeReg ( camera , CAM_REG_MANUAL_GAIN_BIT_9_8 , iso_sense >> 8 ); // set AGC VALUE
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	121b      	asrs	r3, r3, #8
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	2131      	movs	r1, #49	@ 0x31
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fbf2 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fc92 	bl	8003716 <waitI2cIdle>
	writeReg ( camera , CAM_REG_MANUAL_GAIN_BIT_7_0 , iso_sense & 0xff );
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	2132      	movs	r1, #50	@ 0x32
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fbe8 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fc88 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000238 	.word	0x20000238

08002e14 <cameraSetAutoExposure>:

CamStatus cameraSetAutoExposure ( ArducamCamera *camera , uint8_t val )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
	unsigned char symbol = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
	if (val == TRUE)
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d103      	bne.n	8002e32 <cameraSetAutoExposure+0x1e>
	{
		symbol |= 0x80;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e30:	73fb      	strb	r3, [r7, #15]
	}
	symbol |= SET_EXPOSURE;
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
	writeReg ( camera , CAM_REG_EXPOSURE_GAIN_WHILEBALANCE_CONTROL , symbol );    // auto EXPOSURE control
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2130      	movs	r1, #48	@ 0x30
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fbc5 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fc65 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <cameraSetAbsoluteExposure>:

CamStatus cameraSetAbsoluteExposure ( ArducamCamera *camera , uint32_t exposure_time )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	6039      	str	r1, [r7, #0]
	// set exposure output [19:16]
	writeReg ( camera , CAM_REG_MANUAL_EXPOSURE_BIT_19_16 , (uint8_t) ((exposure_time >> 16) & 0xff) );
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	0c1b      	lsrs	r3, r3, #16
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	2133      	movs	r1, #51	@ 0x33
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fbb0 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fc50 	bl	8003716 <waitI2cIdle>
	// set exposure output [15:8]
	writeReg ( camera , CAM_REG_MANUAL_EXPOSURE_BIT_15_8 , (uint8_t) ((exposure_time >> 8) & 0xff) );
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2134      	movs	r1, #52	@ 0x34
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fba5 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fc45 	bl	8003716 <waitI2cIdle>
	// set exposure output [7:0]
	writeReg ( camera , CAM_REG_MANUAL_EXPOSURE_BIT_7_0 , (uint8_t) (exposure_time & 0xff) );
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	2135      	movs	r1, #53	@ 0x35
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fb9b 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fc3b 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <cameraSetColorEffect>:

CamStatus cameraSetColorEffect ( ArducamCamera *camera , CAM_COLOR_FX effect )
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_COLOR_EFFECT_CONTROL , effect ); // set effect
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2127      	movs	r1, #39	@ 0x27
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fb87 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                    // Wait I2c Idle
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fc27 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <cameraSetSaturation>:
CamStatus cameraSetSaturation ( ArducamCamera *camera , CAM_STAURATION_LEVEL level )
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_SATURATION_CONTROL , level ); // set Saturation Level
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2124      	movs	r1, #36	@ 0x24
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fb73 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                 // Wait I2c Idle
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fc13 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <cameraSetEV>:
CamStatus cameraSetEV ( ArducamCamera *camera , CAM_EV_LEVEL level )
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
	// set Exposure  Compensation Level
	writeReg ( camera , CAM_REG_EV_CONTROL , level );
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	2125      	movs	r1, #37	@ 0x25
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 fb5f 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera ); // Wait I2c Idle
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fbff 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <cameraSetContrast>:
CamStatus cameraSetContrast ( ArducamCamera *camera , CAM_CONTRAST_LEVEL level )
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_CONTRAST_CONTROL , level ); // set Contrast Level
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	461a      	mov	r2, r3
 8002f32:	2123      	movs	r1, #35	@ 0x23
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 fb4b 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                               // Wait I2c Idle
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fbeb 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <cameraSetSharpness>:
CamStatus cameraSetSharpness ( ArducamCamera *camera , CAM_SHARPNESS_LEVEL level )
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_SHARPNESS_CONTROL , level ); // set Brightness Level
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2128      	movs	r1, #40	@ 0x28
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fb37 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                // Wait I2c Idle
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fbd7 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <cameraSetBrightness>:

CamStatus cameraSetBrightness ( ArducamCamera *camera , CAM_BRIGHTNESS_LEVEL level )
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
	writeReg ( camera , CAM_REG_BRIGHTNESS_CONTROL , level ); // set Brightness Level
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	461a      	mov	r2, r3
 8002f82:	2122      	movs	r1, #34	@ 0x22
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fb23 	bl	80035d0 <writeReg>
	waitI2cIdle ( camera );                                 // Wait I2c Idle
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fbc3 	bl	8003716 <waitI2cIdle>
	return CAM_ERR_SUCCESS;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <cameraFlushFifo>:
void cameraFlushFifo ( ArducamCamera *camera )
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
	writeReg ( camera , ARDUCHIP_FIFO_2 , FIFO_CLEAR_MASK );
 8002fa2:	2280      	movs	r2, #128	@ 0x80
 8002fa4:	2107      	movs	r1, #7
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fb12 	bl	80035d0 <writeReg>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <cameraStartCapture>:

void cameraStartCapture ( ArducamCamera *camera )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	writeReg ( camera , ARDUCHIP_FIFO , FIFO_START_MASK );
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fb05 	bl	80035d0 <writeReg>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <cameraClearFifoFlag>:

void cameraClearFifoFlag ( ArducamCamera *camera )
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
	writeReg ( camera , ARDUCHIP_FIFO , FIFO_CLEAR_ID_MASK );
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2104      	movs	r1, #4
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 faf8 	bl	80035d0 <writeReg>
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <cameraReadFifoLength>:

uint32_t cameraReadFifoLength ( ArducamCamera *camera )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	uint32_t len1, len2, len3, length = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
	len1 = readReg ( camera , FIFO_SIZE1 );
 8002ff4:	2145      	movs	r1, #69	@ 0x45
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fafd 	bl	80035f6 <readReg>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	613b      	str	r3, [r7, #16]
	len2 = readReg ( camera , FIFO_SIZE2 );
 8003000:	2146      	movs	r1, #70	@ 0x46
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 faf7 	bl	80035f6 <readReg>
 8003008:	4603      	mov	r3, r0
 800300a:	60fb      	str	r3, [r7, #12]
	len3 = readReg ( camera , FIFO_SIZE3 );
 800300c:	2147      	movs	r1, #71	@ 0x47
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 faf1 	bl	80035f6 <readReg>
 8003014:	4603      	mov	r3, r0
 8003016:	60bb      	str	r3, [r7, #8]
	length = ((len3 << 16) | (len2 << 8) | len1) & 0xffffff;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	041a      	lsls	r2, r3, #16
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	431a      	orrs	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800302a:	617b      	str	r3, [r7, #20]
	return length;
 800302c:	697b      	ldr	r3, [r7, #20]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <cameraGetBit>:

uint8_t cameraGetBit ( ArducamCamera *camera , uint8_t addr , uint8_t bit )
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
 8003042:	4613      	mov	r3, r2
 8003044:	70bb      	strb	r3, [r7, #2]
	return (readReg ( camera , addr ) & bit);
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fad3 	bl	80035f6 <readReg>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	78bb      	ldrb	r3, [r7, #2]
 8003056:	4013      	ands	r3, r2
 8003058:	b2db      	uxtb	r3, r3
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <cameraSetFifoBurst>:

void cameraSetFifoBurst ( ArducamCamera *camera )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af02      	add	r7, sp, #8
 800306a:	6078      	str	r0, [r7, #4]
	uint8_t rx = 0, tx = BURST_FIFO_READ;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	233c      	movs	r3, #60	@ 0x3c
 8003072:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive ( &hspi2 , &tx , &rx , 1 , 0x10 );
 8003074:	f107 020f 	add.w	r2, r7, #15
 8003078:	f107 010e 	add.w	r1, r7, #14
 800307c:	2310      	movs	r3, #16
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2301      	movs	r3, #1
 8003082:	4803      	ldr	r0, [pc, #12]	@ (8003090 <cameraSetFifoBurst+0x2c>)
 8003084:	f01e fff4 	bl	8022070 <HAL_SPI_TransmitReceive>
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2007d3dc 	.word	0x2007d3dc

08003094 <cameraReadByte>:

uint8_t cameraReadByte ( ArducamCamera *camera )
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	6078      	str	r0, [r7, #4]
	uint8_t rx [ 3 ] = { 0x00, 0x00, 0x00 }, tx [ 3 ] = { SINGLE_FIFO_READ, 0x00, 0x00 };
 800309c:	4a15      	ldr	r2, [pc, #84]	@ (80030f4 <cameraReadByte+0x60>)
 800309e:	f107 030c 	add.w	r3, r7, #12
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	4611      	mov	r1, r2
 80030a6:	8019      	strh	r1, [r3, #0]
 80030a8:	3302      	adds	r3, #2
 80030aa:	0c12      	lsrs	r2, r2, #16
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <cameraReadByte+0x64>)
 80030b0:	f107 0308 	add.w	r3, r7, #8
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	4611      	mov	r1, r2
 80030b8:	8019      	strh	r1, [r3, #0]
 80030ba:	3302      	adds	r3, #2
 80030bc:	0c12      	lsrs	r2, r2, #16
 80030be:	701a      	strb	r2, [r3, #0]

	cameraCsLow ( camera );
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f8dd 	bl	8003280 <cameraCsLow>
	HAL_SPI_TransmitReceive ( &hspi2 , tx , rx , 3 , 0x10 );
 80030c6:	f107 020c 	add.w	r2, r7, #12
 80030ca:	f107 0108 	add.w	r1, r7, #8
 80030ce:	2310      	movs	r3, #16
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2303      	movs	r3, #3
 80030d4:	4809      	ldr	r0, [pc, #36]	@ (80030fc <cameraReadByte+0x68>)
 80030d6:	f01e ffcb 	bl	8022070 <HAL_SPI_TransmitReceive>
	cameraCsHigh ( camera );
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8c0 	bl	8003260 <cameraCsHigh>

//    HAL_GPIO_WritePin(Camera_CS_GPIO_Port, Camera_CS_Pin,GPIO_PIN_SET);
	camera->receivedLength -= 1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	1e5a      	subs	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]
	return rx [ 2 ];
 80030ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	0802c3c0 	.word	0x0802c3c0
 80030f8:	0802c3c4 	.word	0x0802c3c4
 80030fc:	2007d3dc 	.word	0x2007d3dc

08003100 <cameraReadBuff>:

uint32_t cameraReadBuff ( ArducamCamera *camera , uint8_t *buff , uint32_t length )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	uint8_t rx = 0, tx = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	747b      	strb	r3, [r7, #17]
 8003110:	2300      	movs	r3, #0
 8003112:	743b      	strb	r3, [r7, #16]

	if (imageAvailable ( camera ) == 0 || (length == 0))
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fb0c 	bl	8003732 <imageAvailable>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <cameraReadBuff+0x26>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <cameraReadBuff+0x2a>
	{
		return 0;
 8003126:	2300      	movs	r3, #0
 8003128:	e044      	b.n	80031b4 <cameraReadBuff+0xb4>
	}

	if (camera->receivedLength < length)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	d902      	bls.n	800313a <cameraReadBuff+0x3a>
	{
		length = camera->receivedLength;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	607b      	str	r3, [r7, #4]
	}

	cameraCsLow ( camera );
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f8a0 	bl	8003280 <cameraCsLow>

	setFifoBurst ( camera );
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 facc 	bl	80036de <setFifoBurst>
	if (camera->burstFirstFlag == 0)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	7b9b      	ldrb	r3, [r3, #14]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <cameraReadBuff+0x6c>
	{
		camera->burstFirstFlag = 1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	739a      	strb	r2, [r3, #14]
		tx = 0x00;
 8003154:	2300      	movs	r3, #0
 8003156:	743b      	strb	r3, [r7, #16]
		HAL_SPI_TransmitReceive ( &hspi2 , &tx , &rx , 1 , 0x10 );
 8003158:	f107 0211 	add.w	r2, r7, #17
 800315c:	f107 0110 	add.w	r1, r7, #16
 8003160:	2310      	movs	r3, #16
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2301      	movs	r3, #1
 8003166:	4815      	ldr	r0, [pc, #84]	@ (80031bc <cameraReadBuff+0xbc>)
 8003168:	f01e ff82 	bl	8022070 <HAL_SPI_TransmitReceive>
	}

#ifndef arducamSpiReadBlock
	uint16_t spi_length = 32;  // 1, 2, 8, 16 work   32,64, 128 do not work with 1024 passed in for length
 800316c:	2320      	movs	r3, #32
 800316e:	827b      	strh	r3, [r7, #18]
    for (uint32_t count = 0; count < length; count+=spi_length)
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e010      	b.n	8003198 <cameraReadBuff+0x98>
    {
    	tx = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	743b      	strb	r3, [r7, #16]
        HAL_SPI_TransmitReceive(&hspi2, &tx, &buff[count], spi_length, 0x10);
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	441a      	add	r2, r3
 8003180:	8a7b      	ldrh	r3, [r7, #18]
 8003182:	f107 0110 	add.w	r1, r7, #16
 8003186:	2010      	movs	r0, #16
 8003188:	9000      	str	r0, [sp, #0]
 800318a:	480c      	ldr	r0, [pc, #48]	@ (80031bc <cameraReadBuff+0xbc>)
 800318c:	f01e ff70 	bl	8022070 <HAL_SPI_TransmitReceive>
    for (uint32_t count = 0; count < length; count+=spi_length)
 8003190:	8a7b      	ldrh	r3, [r7, #18]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4413      	add	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	429a      	cmp	r2, r3
 800319e:	d3ea      	bcc.n	8003176 <cameraReadBuff+0x76>
    }
#else
    arducamSpiReadBlock(buff, length);
#endif
	cameraCsHigh ( camera );
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f85d 	bl	8003260 <cameraCsHigh>
	camera->receivedLength -= length;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	1ad2      	subs	r2, r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	609a      	str	r2, [r3, #8]
	return length;
 80031b2:	687b      	ldr	r3, [r7, #4]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	2007d3dc 	.word	0x2007d3dc

080031c0 <cameraWriteReg>:

void cameraWriteReg ( ArducamCamera *camera , uint8_t addr , uint8_t val )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
 80031cc:	4613      	mov	r3, r2
 80031ce:	70bb      	strb	r3, [r7, #2]
	busWrite ( camera , addr | 0x80 , val );
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	78bb      	ldrb	r3, [r7, #2]
 80031dc:	461a      	mov	r2, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa2b 	bl	800363a <busWrite>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <cameraReadReg>:

uint8_t cameraReadReg ( ArducamCamera *camera , uint8_t addr )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	70fb      	strb	r3, [r7, #3]
	return busRead ( camera , addr & 0x7F );;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fa0a 	bl	800361a <busRead>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <cameraBusWrite>:

uint8_t cameraBusWrite ( ArducamCamera *camera , int address , int value )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
	uint8_t rx [ 2 ] = { 0, 0 }, tx [ 2 ] = { address, value };
 800321c:	2300      	movs	r3, #0
 800321e:	82bb      	strh	r3, [r7, #20]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	743b      	strb	r3, [r7, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	747b      	strb	r3, [r7, #17]
	cameraCsLow ( camera );
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f827 	bl	8003280 <cameraCsLow>
	HAL_SPI_TransmitReceive ( &hspi2 , tx , rx , 2 , 0xFF );
 8003232:	f107 0214 	add.w	r2, r7, #20
 8003236:	f107 0110 	add.w	r1, r7, #16
 800323a:	23ff      	movs	r3, #255	@ 0xff
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2302      	movs	r3, #2
 8003240:	4806      	ldr	r0, [pc, #24]	@ (800325c <cameraBusWrite+0x4c>)
 8003242:	f01e ff15 	bl	8022070 <HAL_SPI_TransmitReceive>
	cameraCsHigh ( camera );
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f80a 	bl	8003260 <cameraCsHigh>
	HAL_Delay ( 100 );
 800324c:	2064      	movs	r0, #100	@ 0x64
 800324e:	f013 f919 	bl	8016484 <HAL_Delay>
	return 1;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	2007d3dc 	.word	0x2007d3dc

08003260 <cameraCsHigh>:

void cameraCsHigh ( ArducamCamera *camera )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( Camera_CS_GPIO_Port , Camera_CS_Pin , GPIO_PIN_SET );
 8003268:	2201      	movs	r2, #1
 800326a:	2180      	movs	r1, #128	@ 0x80
 800326c:	4803      	ldr	r0, [pc, #12]	@ (800327c <cameraCsHigh+0x1c>)
 800326e:	f016 ff91 	bl	801a194 <HAL_GPIO_WritePin>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	42020800 	.word	0x42020800

08003280 <cameraCsLow>:

void cameraCsLow ( ArducamCamera *camera )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin ( Camera_CS_GPIO_Port , Camera_CS_Pin , GPIO_PIN_RESET );
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	@ 0x80
 800328c:	4803      	ldr	r0, [pc, #12]	@ (800329c <cameraCsLow+0x1c>)
 800328e:	f016 ff81 	bl	801a194 <HAL_GPIO_WritePin>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	42020800 	.word	0x42020800

080032a0 <cameraBusRead>:

uint8_t cameraBusRead ( ArducamCamera *camera , int address )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	uint8_t rx [ 3 ] = { 0, 0x00, 0x00 }, tx [ 3 ] = { address, 0x00, 0x00 };
 80032aa:	4a15      	ldr	r2, [pc, #84]	@ (8003300 <cameraBusRead+0x60>)
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4611      	mov	r1, r2
 80032b4:	8019      	strh	r1, [r3, #0]
 80032b6:	3302      	adds	r3, #2
 80032b8:	0c12      	lsrs	r2, r2, #16
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	723b      	strb	r3, [r7, #8]
 80032c2:	2300      	movs	r3, #0
 80032c4:	727b      	strb	r3, [r7, #9]
 80032c6:	2300      	movs	r3, #0
 80032c8:	72bb      	strb	r3, [r7, #10]

	cameraCsLow ( camera );
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffd8 	bl	8003280 <cameraCsLow>
	if (HAL_SPI_TransmitReceive ( &hspi2 , tx , rx , 3 , 0xFF ) != HAL_OK)
 80032d0:	f107 020c 	add.w	r2, r7, #12
 80032d4:	f107 0108 	add.w	r1, r7, #8
 80032d8:	23ff      	movs	r3, #255	@ 0xff
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2303      	movs	r3, #3
 80032de:	4809      	ldr	r0, [pc, #36]	@ (8003304 <cameraBusRead+0x64>)
 80032e0:	f01e fec6 	bl	8022070 <HAL_SPI_TransmitReceive>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <cameraBusRead+0x4e>
	{
		Error_Handler ();
 80032ea:	f012 fa53 	bl	8015794 <Error_Handler>
	}
	cameraCsHigh ( camera );
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffb6 	bl	8003260 <cameraCsHigh>
	return rx [ 2 ];
 80032f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	0802c3c0 	.word	0x0802c3c0
 8003304:	2007d3dc 	.word	0x2007d3dc

08003308 <cameraWaitI2cIdle>:
#include "Camera.h" // these are not working
extern CAM_STATUS_REG cameraDataAndState; // these are not working
void cameraWaitI2cIdle ( ArducamCamera *camera )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	int8_t Counter = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
	while ((readReg ( camera , CAM_REG_SENSOR_STATE ) & 0X03) != CAM_REG_SENSOR_STATE_IDLE)
 8003314:	e019      	b.n	800334a <cameraWaitI2cIdle+0x42>
	{
		cameraDataAndState.stateStatus = CAM_OK; // these are not working
 8003316:	4b13      	ldr	r3, [pc, #76]	@ (8003364 <cameraWaitI2cIdle+0x5c>)
 8003318:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2f95 	strb.w	r2, [r3, #3989]	@ 0xf95
		HAL_Delay ( 100 );
 8003322:	2064      	movs	r0, #100	@ 0x64
 8003324:	f013 f8ae 	bl	8016484 <HAL_Delay>
		if (Counter == 15)
 8003328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d106      	bne.n	800333e <cameraWaitI2cIdle+0x36>
		{
			cameraDataAndState.stateStatus = CAM_NOT_OK; // these are not working
 8003330:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <cameraWaitI2cIdle+0x5c>)
 8003332:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2f95 	strb.w	r2, [r3, #3989]	@ 0xf95
			return;
 800333c:	e00f      	b.n	800335e <cameraWaitI2cIdle+0x56>
		}
		else Counter++;
 800333e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	73fb      	strb	r3, [r7, #15]
	while ((readReg ( camera , CAM_REG_SENSOR_STATE ) & 0X03) != CAM_REG_SENSOR_STATE_IDLE)
 800334a:	2144      	movs	r1, #68	@ 0x44
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f952 	bl	80035f6 <readReg>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d1dc      	bne.n	8003316 <cameraWaitI2cIdle+0xe>
	}
	__NOP( );
 800335c:	bf00      	nop
}
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200016a4 	.word	0x200016a4

08003368 <cameraDebugWriteRegister>:
{
	return (readReg ( camera , CAM_REG_SENSOR_STATE ) & 0X03) == CAM_REG_SENSOR_STATE_IDLE;
}

void cameraDebugWriteRegister ( ArducamCamera *camera , uint8_t *buff )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	uint8_t register_high = buff [ 0 ];
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	73fb      	strb	r3, [r7, #15]
	uint8_t register_low = buff [ 1 ];
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	73bb      	strb	r3, [r7, #14]
	uint8_t value = buff [ 2 ];
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	789b      	ldrb	r3, [r3, #2]
 8003382:	737b      	strb	r3, [r7, #13]
	writeReg ( camera , CAM_REG_DEBUG_REGISTER_HIGH , register_high );
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	461a      	mov	r2, r3
 8003388:	210b      	movs	r1, #11
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f920 	bl	80035d0 <writeReg>
	writeReg ( camera , CAM_REG_DEBUG_REGISTER_LOW , register_low );
 8003390:	7bbb      	ldrb	r3, [r7, #14]
 8003392:	461a      	mov	r2, r3
 8003394:	210c      	movs	r1, #12
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f91a 	bl	80035d0 <writeReg>
	writeReg ( camera , CAM_REG_DEBUG_REGISTER_VALUE , value );
 800339c:	7b7b      	ldrb	r3, [r7, #13]
 800339e:	461a      	mov	r2, r3
 80033a0:	210d      	movs	r1, #13
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f914 	bl	80035d0 <writeReg>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <cameraLowPowerOn>:

void cameraLowPowerOn ( ArducamCamera *camera )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	writeReg ( camera , CAM_REG_POWER_CONTROL , 0X07 );
 80033b8:	2207      	movs	r2, #7
 80033ba:	2102      	movs	r1, #2
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f907 	bl	80035d0 <writeReg>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <cameraLowPowerOff>:

void cameraLowPowerOff ( ArducamCamera *camera )
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
	writeReg ( camera , CAM_REG_POWER_CONTROL , 0X05 );
 80033d2:	2205      	movs	r2, #5
 80033d4:	2102      	movs	r1, #2
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f8fa 	bl	80035d0 <writeReg>
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <begin>:
{
	return camera->arducamCameraOp->reset ( camera );
}

CamStatus begin ( ArducamCamera *camera )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	return camera->arducamCameraOp->begin ( camera );
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
 80033f6:	4603      	mov	r3, r0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <takePicture>:

CamStatus takePicture ( ArducamCamera *camera , CAM_IMAGE_MODE mode , CAM_IMAGE_PIX_FMT pixel_format )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
 800340c:	4613      	mov	r3, r2
 800340e:	70bb      	strb	r3, [r7, #2]
	return camera->arducamCameraOp->takePicture ( camera , mode , pixel_format );
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	78ba      	ldrb	r2, [r7, #2]
 8003418:	78f9      	ldrb	r1, [r7, #3]
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	4798      	blx	r3
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <stopPreview>:
{
	camera->arducamCameraOp->captureThread ( camera );
}

CamStatus stopPreview ( ArducamCamera *camera )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	return camera->arducamCameraOp->stopPreview ( camera );
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	4603      	mov	r3, r0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <setAutoExposure>:

CamStatus setAutoExposure ( ArducamCamera *camera , uint8_t val )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setAutoExposure ( camera , val );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4611      	mov	r1, r2
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <setAutoISOSensitive>:
CamStatus setAbsoluteExposure ( ArducamCamera *camera , uint32_t val )
{
	return camera->arducamCameraOp->setAbsoluteExposure ( camera , val );
}
CamStatus setAutoISOSensitive ( ArducamCamera *camera , uint8_t val )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setAutoISOSensitive ( camera , val );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	4611      	mov	r1, r2
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <setAutoWhiteBalance>:
{
	return camera->arducamCameraOp->setISOSensitivity ( camera , iso_sense );
}

CamStatus setAutoWhiteBalance ( ArducamCamera *camera , uint8_t val )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setAutoWhiteBalance ( camera , val );
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	4611      	mov	r1, r2
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	4798      	blx	r3
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <setAutoWhiteBalanceMode>:

CamStatus setAutoWhiteBalanceMode ( ArducamCamera *camera , CAM_WHITE_BALANCE mode )
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setAutoWhiteBalanceMode ( camera , mode );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4611      	mov	r1, r2
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4798      	blx	r3
 80034ca:	4603      	mov	r3, r0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <setColorEffect>:
CamStatus setColorEffect ( ArducamCamera *camera , CAM_COLOR_FX effect )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setColorEffect ( camera , effect );
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4798      	blx	r3
 80034ee:	4603      	mov	r3, r0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <setSaturation>:
{
	return camera->arducamCameraOp->setAutoFocus ( camera , val );
}

CamStatus setSaturation ( ArducamCamera *camera , CAM_STAURATION_LEVEL level )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setSaturation ( camera , level );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	4603      	mov	r3, r0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <setEV>:

CamStatus setEV ( ArducamCamera *camera , CAM_EV_LEVEL level )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setEV ( camera , level );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	4611      	mov	r1, r2
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
 8003536:	4603      	mov	r3, r0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <setContrast>:

CamStatus setContrast ( ArducamCamera *camera , CAM_CONTRAST_LEVEL level )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setContrast ( camera , level );
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	4611      	mov	r1, r2
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
 800355a:	4603      	mov	r3, r0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <setBrightness>:

CamStatus setBrightness ( ArducamCamera *camera , CAM_BRIGHTNESS_LEVEL level )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setBrightness ( camera , level );
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	4603      	mov	r3, r0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <setSharpness>:

CamStatus setSharpness ( ArducamCamera *camera , CAM_SHARPNESS_LEVEL level )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setSharpness ( camera , level );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	4611      	mov	r1, r2
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
 80035a2:	4603      	mov	r3, r0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <readBuff>:

uint32_t readBuff ( ArducamCamera *camera , uint8_t *buff , uint32_t length )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	return camera->arducamCameraOp->readBuff ( camera , buff , length );
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	4798      	blx	r3
 80035c6:	4603      	mov	r3, r0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <writeReg>:
{
	camera->arducamCameraOp->csLow ( camera );
}

void writeReg ( ArducamCamera *camera , uint8_t addr , uint8_t val )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	4613      	mov	r3, r2
 80035de:	70bb      	strb	r3, [r7, #2]
	camera->arducamCameraOp->writeReg ( camera , addr , val );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e6:	78ba      	ldrb	r2, [r7, #2]
 80035e8:	78f9      	ldrb	r1, [r7, #3]
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <readReg>:

uint8_t readReg ( ArducamCamera *camera , uint8_t addr )
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->readReg ( camera , addr );
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	4611      	mov	r1, r2
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
 8003610:	4603      	mov	r3, r0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <busRead>:

uint8_t busRead ( ArducamCamera *camera , int address )
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
	return camera->arducamCameraOp->busRead ( camera , address );
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <busWrite>:

uint8_t busWrite ( ArducamCamera *camera , int address , int value )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	607a      	str	r2, [r7, #4]
	return camera->arducamCameraOp->busWrite ( camera , address , value );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	4798      	blx	r3
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <startCapture>:

void startCapture ( ArducamCamera *camera )
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
	camera->arducamCameraOp->startCapture ( camera );
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <clearFifoFlag>:
void clearFifoFlag ( ArducamCamera *camera )
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
	camera->arducamCameraOp->clearFifoFlag ( camera );
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <readFifoLength>:
uint32_t readFifoLength ( ArducamCamera *camera )
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
	return camera->arducamCameraOp->readFifoLength ( camera );
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	4798      	blx	r3
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <getBit>:
uint8_t getBit ( ArducamCamera *camera , uint8_t addr , uint8_t bit )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
 80036c0:	4613      	mov	r3, r2
 80036c2:	70bb      	strb	r3, [r7, #2]
	return camera->arducamCameraOp->getBit ( camera , addr , bit );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036cc:	78ba      	ldrb	r2, [r7, #2]
 80036ce:	78f9      	ldrb	r1, [r7, #3]
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <setFifoBurst>:
void setFifoBurst ( ArducamCamera *camera )
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
	camera->arducamCameraOp->setFifoBurst ( camera );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <setCapture>:
void setCapture ( ArducamCamera *camera )
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
	camera->arducamCameraOp->setCapture ( camera );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <waitI2cIdle>:
void waitI2cIdle ( ArducamCamera *camera )
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
	camera->arducamCameraOp->waitI2cIdle ( camera );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	4798      	blx	r3
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <imageAvailable>:

uint32_t imageAvailable ( ArducamCamera *camera )
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
	return camera->arducamCameraOp->imageAvailable ( camera );
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
 8003744:	4603      	mov	r3, r0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <flushFifo>:

void flushFifo ( ArducamCamera *camera )
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
	camera->arducamCameraOp->flushFifo ( camera );
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <setImageQuality>:
CamStatus setImageQuality ( ArducamCamera *camera , IMAGE_QUALITY qualtiy )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
	return camera->arducamCameraOp->setImageQuality ( camera , qualtiy );
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	4611      	mov	r1, r2
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	4603      	mov	r3, r0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <createArducamCamera>:
        .readFifoLength = cameraReadFifoLength, .getBit = cameraGetBit, .setFifoBurst = cameraSetFifoBurst,
        .setCapture = cameraSetCapture, .waitI2cIdle = cameraWaitI2cIdle, .lowPowerOn = cameraLowPowerOn, .lowPowerOff =
                cameraLowPowerOff, .setImageQuality = cameraSetImageQuality, };

ArducamCamera createArducamCamera ( int CS )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b094      	sub	sp, #80	@ 0x50
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
	ArducamCamera camera;
	CameraType [ 0 ] = &CameraInfo_5MP;
 8003796:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <createArducamCamera+0x58>)
 8003798:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <createArducamCamera+0x5c>)
 800379a:	601a      	str	r2, [r3, #0]
	CameraType [ 1 ] = &CameraInfo_3MP;
 800379c:	4b11      	ldr	r3, [pc, #68]	@ (80037e4 <createArducamCamera+0x58>)
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <createArducamCamera+0x60>)
 80037a0:	605a      	str	r2, [r3, #4]
	// cameraDefaultInfo[0] = &DefaultState_5mp;
	// cameraDefaultInfo[1] = &DefaultState_3mp;
	camera.cameraId = FALSE;
 80037a2:	2300      	movs	r3, #0
 80037a4:	757b      	strb	r3, [r7, #21]
	camera.currentPixelFormat = CAM_IMAGE_PIX_FMT_NONE;
 80037a6:	2304      	movs	r3, #4
 80037a8:	763b      	strb	r3, [r7, #24]
	camera.currentPictureMode = CAM_IMAGE_MODE_NONE;
 80037aa:	2311      	movs	r3, #17
 80037ac:	767b      	strb	r3, [r7, #25]
	camera.burstFirstFlag = FALSE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75bb      	strb	r3, [r7, #22]
	camera.previewMode = FALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
	camera.csPin = CS;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	60bb      	str	r3, [r7, #8]
	camera.arducamCameraOp = &ArducamcameraOperations;
 80037ba:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <createArducamCamera+0x64>)
 80037bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	camera.currentSDK = &currentSDK;
 80037be:	4b0d      	ldr	r3, [pc, #52]	@ (80037f4 <createArducamCamera+0x68>)
 80037c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	cameraInit ( &camera );
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f896 	bl	80028f8 <cameraInit>
	return camera;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f107 0308 	add.w	r3, r7, #8
 80037d4:	2248      	movs	r2, #72	@ 0x48
 80037d6:	4619      	mov	r1, r3
 80037d8:	f024 fb61 	bl	8027e9e <memcpy>
}
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	3750      	adds	r7, #80	@ 0x50
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000dc8 	.word	0x20000dc8
 80037e8:	200001f8 	.word	0x200001f8
 80037ec:	20000218 	.word	0x20000218
 80037f0:	08030074 	.word	0x08030074
 80037f4:	200001f4 	.word	0x200001f4

080037f8 <Boot_Change>:
/******************************************************
 Selects Boot Flash.Address
 Note: Set new boot address
 ******************************************************/
void Boot_Change(BANK_TYPE currentBank)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b090      	sub	sp, #64	@ 0x40
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef OptionsBytesInit;
	//	__root FLASH_TypeDef * const FLASH_DBG = FLASH;

#ifdef Log_Level_1
	Write_Log ( LOG_BOOTLOAD );
 8003802:	4815      	ldr	r0, [pc, #84]	@ (8003858 <Boot_Change+0x60>)
 8003804:	f003 f992 	bl	8006b2c <Write_Log>
	Write_Log ( LOG_TAIL );
 8003808:	4814      	ldr	r0, [pc, #80]	@ (800385c <Boot_Change+0x64>)
 800380a:	f003 f98f 	bl	8006b2c <Write_Log>
#endif

	/* Unlock Flash Control register and Option Bytes */
	HAL_FLASH_Unlock ();
 800380e:	f015 fc8f 	bl	8019130 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock ();
 8003812:	f015 fcc9 	bl	80191a8 <HAL_FLASH_OB_Unlock>
	//	OptionsBytesInit.BootAddrConfig = OB_BOOTADDR_NS0; // OB_BOOTADDR_NS0 or OB_BOOTADDR_NS1
	//	OptionsBytesInit.BootAddr = ADDR_FLASH_PAGE_0 + 0x7F; // Range : 0x0 and 0xFFFFFF00
	/* Program Option Bytes */
	//	HAL_FLASHEx_OBProgram(&OptionsBytesInit);

	if (currentBank == BANK2)
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d108      	bne.n	800382e <Boot_Change+0x36>
	{
		OptionsBytesInit.OptionType = OPTIONBYTE_USER;
 800381c:	2304      	movs	r3, #4
 800381e:	60fb      	str	r3, [r7, #12]
		OptionsBytesInit.USERConfig = OB_SWAP_BANK_DISABLE + OB_DUALBANK_DUAL; // OB_BOOTADDR_NS0 or OB_BOOTADDR_NS1
 8003820:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
		OptionsBytesInit.USERType = OB_USER_SWAP_BANK + OB_USER_DUALBANK;
 8003826:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
 800382c:	e007      	b.n	800383e <Boot_Change+0x46>

	}
	else
	{
		OptionsBytesInit.OptionType = OPTIONBYTE_USER;
 800382e:	2304      	movs	r3, #4
 8003830:	60fb      	str	r3, [r7, #12]
		OptionsBytesInit.USERConfig = OB_SWAP_BANK_ENABLE + OB_DUALBANK_DUAL; // OB_BOOTADDR_NS0 or OB_BOOTADDR_NS1
 8003832:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
		OptionsBytesInit.USERType = OB_USER_SWAP_BANK + OB_USER_DUALBANK;
 8003838:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
	////	OptionsBytesInit.USERConfig = OB_SWAP_BANK_ENABLE ; // OB_BOOTADDR_NS0 or OB_BOOTADDR_NS1
	////	OptionsBytesInit.USERType = OB_USER_SWAP_BANK ;
	//	OptionsBytesInit.BootAddr = 0x08080000;

	/* Program Option Bytes */
	HAL_FLASHEx_OBProgram ( &OptionsBytesInit );
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	4618      	mov	r0, r3
 8003844:	f015 fe12 	bl	801946c <HAL_FLASHEx_OBProgram>

	/* Launch Option Bytes Loading */
	HAL_FLASH_OB_Launch ();
 8003848:	f015 fcd0 	bl	80191ec <HAL_FLASH_OB_Launch>
	HAL_FLASH_Lock ();	// Lock the Flash to disable the flash control register access
 800384c:	f015 fc92 	bl	8019174 <HAL_FLASH_Lock>

	//	NVIC_SystemReset();
}
 8003850:	bf00      	nop
 8003852:	3740      	adds	r7, #64	@ 0x40
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	0802c3c8 	.word	0x0802c3c8
 800385c:	0802c3e8 	.word	0x0802c3e8

08003860 <Reflash>:
/******************************************************
 Flash Function
 Note: Flash a predefined page to memory
 ******************************************************/
void Reflash ( MEM_PTR *bigData, BANK_TYPE isBank1 )
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b091      	sub	sp, #68	@ 0x44
 8003864:	af02      	add	r7, sp, #8
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
    uint8_t quadWord[ Quad_Word_Shift ] = { 0 };
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
	uint32_t currentFlashAddress = 0x08080000; // bank 2
 800387c:	4bac      	ldr	r3, [pc, #688]	@ (8003b30 <Reflash+0x2d0>)
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t bankStartAddress = 0x08080000; // bank 2
 8003880:	4bab      	ldr	r3, [pc, #684]	@ (8003b30 <Reflash+0x2d0>)
 8003882:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	FLASH_EraseInitTypeDef EraseInitStruct;
	bool isVerifyWhileProgram = true;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	#ifdef Log_Level_1
	Write_Log(LOG_FLASHING);
 8003890:	48a8      	ldr	r0, [pc, #672]	@ (8003b34 <Reflash+0x2d4>)
 8003892:	f003 f94b 	bl	8006b2c <Write_Log>
	Write_Log(LOG_TAIL);
 8003896:	48a8      	ldr	r0, [pc, #672]	@ (8003b38 <Reflash+0x2d8>)
 8003898:	f003 f948 	bl	8006b2c <Write_Log>
	#endif

	// Watchdog refresh before the process starts
	status = HAL_IWDG_Refresh(&hiwdg);
 800389c:	48a7      	ldr	r0, [pc, #668]	@ (8003b3c <Reflash+0x2dc>)
 800389e:	f017 fc98 	bl	801b1d2 <HAL_IWDG_Refresh>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK)
 80038a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <Reflash+0x62>
	{
	    PRINTF("Watchdog refresh failed with status %d\r\n", (uint8_t)status);
 80038b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038b4:	461a      	mov	r2, r3
 80038b6:	49a2      	ldr	r1, [pc, #648]	@ (8003b40 <Reflash+0x2e0>)
 80038b8:	2001      	movs	r0, #1
 80038ba:	f003 fa5b 	bl	8006d74 <TraceSend>
	    Error_Handler();
 80038be:	f011 ff69 	bl	8015794 <Error_Handler>
	}

	/* Disable instruction cache prior to internal cache-able memory update */
	status = HAL_ICACHE_Disable();
 80038c2:	f017 fbe9 	bl	801b098 <HAL_ICACHE_Disable>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK)
 80038cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <Reflash+0x86>
	{
	    PRINTF("Cache disable failed with status %d\r\n", (uint8_t)status);
 80038d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038d8:	461a      	mov	r2, r3
 80038da:	499a      	ldr	r1, [pc, #616]	@ (8003b44 <Reflash+0x2e4>)
 80038dc:	2001      	movs	r0, #1
 80038de:	f003 fa49 	bl	8006d74 <TraceSend>
	    Error_Handler();
 80038e2:	f011 ff57 	bl	8015794 <Error_Handler>
	}
	status = HAL_FLASH_Unlock();
 80038e6:	f015 fc23 	bl	8019130 <HAL_FLASH_Unlock>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	    if ( status != HAL_OK)
 80038f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <Reflash+0xa4>
	    {
	        PRINTF("Flash unlock failed with status %d\r\n");
 80038f8:	4993      	ldr	r1, [pc, #588]	@ (8003b48 <Reflash+0x2e8>)
 80038fa:	2001      	movs	r0, #1
 80038fc:	f003 fa3a 	bl	8006d74 <TraceSend>
	        Error_Handler();
 8003900:	f011 ff48 	bl	8015794 <Error_Handler>
	    }
	if (isBank1 == BANK2)
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d105      	bne.n	8003916 <Reflash+0xb6>
	{
		currentFlashAddress = 0x08000000;
 800390a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
		bankStartAddress = 0x08000000;
 8003910:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003914:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	PRINTF("Erasing at Address %x\r\n",bankStartAddress);
 8003916:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003918:	498c      	ldr	r1, [pc, #560]	@ (8003b4c <Reflash+0x2ec>)
 800391a:	2001      	movs	r0, #1
 800391c:	f003 fa2a 	bl	8006d74 <TraceSend>

	// Prepare flash erase structure
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003920:	2302      	movs	r3, #2
 8003922:	60bb      	str	r3, [r7, #8]
	EraseInitStruct.Banks = GetBank(bankStartAddress);  // Get the flash bank
 8003924:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003926:	f000 f977 	bl	8003c18 <GetBank>
 800392a:	4603      	mov	r3, r0
 800392c:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Page = GetPage(bankStartAddress);  // Get the first page to erase
 800392e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003930:	f000 f92e 	bl	8003b90 <GetPage>
 8003934:	4603      	mov	r3, r0
 8003936:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = FLASH_PAGE_NB;  // Get the number of pages to erase
 8003938:	4b85      	ldr	r3, [pc, #532]	@ (8003b50 <Reflash+0x2f0>)
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <Reflash+0xfc>
 8003944:	4b82      	ldr	r3, [pc, #520]	@ (8003b50 <Reflash+0x2f0>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <Reflash+0xf8>
 800394c:	4b80      	ldr	r3, [pc, #512]	@ (8003b50 <Reflash+0x2f0>)
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	029b      	lsls	r3, r3, #10
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	0b5b      	lsrs	r3, r3, #13
 8003956:	e002      	b.n	800395e <Reflash+0xfe>
 8003958:	2380      	movs	r3, #128	@ 0x80
 800395a:	e000      	b.n	800395e <Reflash+0xfe>
 800395c:	2380      	movs	r3, #128	@ 0x80
 800395e:	617b      	str	r3, [r7, #20]
	PRINTF("Erasing Bank %d, Starting at Page %d, for number of pages %d\r\n",
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	460b      	mov	r3, r1
 800396a:	497a      	ldr	r1, [pc, #488]	@ (8003b54 <Reflash+0x2f4>)
 800396c:	2001      	movs	r0, #1
 800396e:	f003 fa01 	bl	8006d74 <TraceSend>
	       EraseInitStruct.Banks, EraseInitStruct.Page, EraseInitStruct.NbPages);

	// Erase the flash memory
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &bigData->Flash.Page);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f015 fd05 	bl	801938c <HAL_FLASHEx_Erase>
 8003982:	4603      	mov	r3, r0
 8003984:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK)
 8003988:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <Reflash+0x13c>
	{
	    PRINTF("Flash erase failed with status %d\r\n");
 8003990:	4971      	ldr	r1, [pc, #452]	@ (8003b58 <Reflash+0x2f8>)
 8003992:	2001      	movs	r0, #1
 8003994:	f003 f9ee 	bl	8006d74 <TraceSend>
	    Error_Handler();
 8003998:	f011 fefc 	bl	8015794 <Error_Handler>
	}

	PRINTF("Flash erase passed, starting flashing\r\n");
 800399c:	496f      	ldr	r1, [pc, #444]	@ (8003b5c <Reflash+0x2fc>)
 800399e:	2001      	movs	r0, #1
 80039a0:	f003 f9e8 	bl	8006d74 <TraceSend>


	// maybe due to swap bank always flash to bank2
	//currentFlashAddress = 0x08080000;
	//bankStartAddress = 0x08080000;
	PRINTF("Size of arr: %d\r\n", sizeof(bigData->Flash.Image));
 80039a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b60 <Reflash+0x300>)
 80039a6:	496f      	ldr	r1, [pc, #444]	@ (8003b64 <Reflash+0x304>)
 80039a8:	2001      	movs	r0, #1
 80039aa:	f003 f9e3 	bl	8006d74 <TraceSend>
	// Program the flash memory in steps of quad-word (128 bits, 16 bytes)
	for (uint32_t buff = 0; buff < sizeof(bigData->Flash.Image); buff += Quad_Word_Shift)
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039b2:	e05d      	b.n	8003a70 <Reflash+0x210>
	{
	    // Ensure that the data pointer is aligned to 16-byte boundaries
	    if ((currentFlashAddress % Quad_Word_Shift) != 0)
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <Reflash+0x16a>
	    {
	        PRINTF("Error: Flash address is not 16-byte aligned.\r\n");
 80039be:	496a      	ldr	r1, [pc, #424]	@ (8003b68 <Reflash+0x308>)
 80039c0:	2001      	movs	r0, #1
 80039c2:	f003 f9d7 	bl	8006d74 <TraceSend>
	        Error_Handler();  // Handle misalignment case
 80039c6:	f011 fee5 	bl	8015794 <Error_Handler>
	    }
	    memcpy( quadWord, &bigData->Flash.Image[buff], Quad_Word_Shift );
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	3308      	adds	r3, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4413      	add	r3, r2
 80039d2:	3306      	adds	r3, #6
 80039d4:	f107 0418 	add.w	r4, r7, #24
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	    status = HAL_IWDG_Refresh(&hiwdg);
 80039e2:	4856      	ldr	r0, [pc, #344]	@ (8003b3c <Reflash+0x2dc>)
 80039e4:	f017 fbf5 	bl	801b1d2 <HAL_IWDG_Refresh>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	    if ( status != HAL_OK)
 80039ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <Reflash+0x1a2>
		{
		    PRINTF("Watchdog refresh failed during flashing with status %d\r\n");
 80039f6:	495d      	ldr	r1, [pc, #372]	@ (8003b6c <Reflash+0x30c>)
 80039f8:	2001      	movs	r0, #1
 80039fa:	f003 f9bb 	bl	8006d74 <TraceSend>
		    Error_Handler();
 80039fe:	f011 fec9 	bl	8015794 <Error_Handler>
		}
//HAL_FLASH_Program( FLASH_TYPEPROGRAM_QUADWORD, destination, ( uint32_t ) quadWord );
	    // Program flash
	    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, currentFlashAddress,(uint32_t)quadWord);
 8003a02:	f107 0318 	add.w	r3, r7, #24
 8003a06:	461a      	mov	r2, r3
 8003a08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	f015 fb46 	bl	801909c <HAL_FLASH_Program>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	    if ( status != HAL_OK)
 8003a16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <Reflash+0x1ce>
	    {
	        PRINTF("HAL_FLASH_Program failed at buff = %lu with status %d\r\n", buff);
 8003a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a20:	4953      	ldr	r1, [pc, #332]	@ (8003b70 <Reflash+0x310>)
 8003a22:	2001      	movs	r0, #1
 8003a24:	f003 f9a6 	bl	8006d74 <TraceSend>
	        Error_Handler();
 8003a28:	f011 feb4 	bl	8015794 <Error_Handler>
 8003a2c:	e010      	b.n	8003a50 <Reflash+0x1f0>
	    }
	    else
	    {
	    	if (isVerifyWhileProgram)
 8003a2e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <Reflash+0x1f0>
	    	{
	            // Check the written value
	            if( memcmp( ( void * ) currentFlashAddress, quadWord, Quad_Word_Shift ) != 0 )
 8003a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a38:	f107 0118 	add.w	r1, r7, #24
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f023 fb86 	bl	8027150 <memcmp>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <Reflash+0x1f0>
	            {
	                /* Flash content doesn't match SRAM content */
	                status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	            }
	    	}
	    }

	    // Increment to next quad-word address
		currentFlashAddress += Quad_Word_Shift;
 8003a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a52:	3310      	adds	r3, #16
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34

	    // Ensure we do not exceed the allowed address range
		// kcs check Max_Page_Shift parameter
	    if (currentFlashAddress > (bankStartAddress + Max_Page_Shift) ||
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	f503 23fc 	add.w	r3, r3, #516096	@ 0x7e000
 8003a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d80a      	bhi.n	8003a78 <Reflash+0x218>
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	4a43      	ldr	r2, [pc, #268]	@ (8003b74 <Reflash+0x314>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d806      	bhi.n	8003a78 <Reflash+0x218>
	for (uint32_t buff = 0; buff < sizeof(bigData->Flash.Image); buff += Quad_Word_Shift)
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	3310      	adds	r3, #16
 8003a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	4a40      	ldr	r2, [pc, #256]	@ (8003b74 <Reflash+0x314>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d99d      	bls.n	80039b4 <Reflash+0x154>
	        break;  // Exit if we reach the limit
	    }

	    // Optionally refresh the watchdog during flashing to avoid reset
	}
	status = HAL_FLASH_Lock();
 8003a78:	f015 fb7c 	bl	8019174 <HAL_FLASH_Lock>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK)
 8003a82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <Reflash+0x236>
	{
	    PRINTF("Flash lock failed with status %d\r\n");
 8003a8a:	493b      	ldr	r1, [pc, #236]	@ (8003b78 <Reflash+0x318>)
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f003 f971 	bl	8006d74 <TraceSend>
	    Error_Handler();
 8003a92:	f011 fe7f 	bl	8015794 <Error_Handler>
	}

	// Re-enable the instruction cache after flash programming
	status = HAL_ICACHE_Enable();
 8003a96:	f017 faef 	bl	801b078 <HAL_ICACHE_Enable>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK) {
 8003aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <Reflash+0x254>
	    PRINTF("Cache enable failed with status %d\r\n");
 8003aa8:	4934      	ldr	r1, [pc, #208]	@ (8003b7c <Reflash+0x31c>)
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f003 f962 	bl	8006d74 <TraceSend>
	    Error_Handler();
 8003ab0:	f011 fe70 	bl	8015794 <Error_Handler>
	}

	PRINTF("Flash programming completed successfully.\r\n");
 8003ab4:	4932      	ldr	r1, [pc, #200]	@ (8003b80 <Reflash+0x320>)
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f003 f95c 	bl	8006d74 <TraceSend>

	PRINTF("Programming Passed, starting verification\r\n");
 8003abc:	4931      	ldr	r1, [pc, #196]	@ (8003b84 <Reflash+0x324>)
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f003 f958 	bl	8006d74 <TraceSend>
	status = HAL_IWDG_Refresh ( &hiwdg );
 8003ac4:	481d      	ldr	r0, [pc, #116]	@ (8003b3c <Reflash+0x2dc>)
 8003ac6:	f017 fb84 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK)
 8003ad0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <Reflash+0x284>
		{
			PRINTF("Watchdog refresh Failed with status %d\r\n");
 8003ad8:	492b      	ldr	r1, [pc, #172]	@ (8003b88 <Reflash+0x328>)
 8003ada:	2001      	movs	r0, #1
 8003adc:	f003 f94a 	bl	8006d74 <TraceSend>
			Error_Handler ();
 8003ae0:	f011 fe58 	bl	8015794 <Error_Handler>
		}
	// Re-enable instruction cache
	status = HAL_ICACHE_Enable ();
 8003ae4:	f017 fac8 	bl	801b078 <HAL_ICACHE_Enable>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	if ( status != HAL_OK)
 8003aee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <Reflash+0x2a2>
	{
		PRINTF("HAL_ICACHE_Enable Failed with status %d\r\n");
 8003af6:	4925      	ldr	r1, [pc, #148]	@ (8003b8c <Reflash+0x32c>)
 8003af8:	2001      	movs	r0, #1
 8003afa:	f003 f93b 	bl	8006d74 <TraceSend>
		Error_Handler ();
 8003afe:	f011 fe49 	bl	8015794 <Error_Handler>
	}

	// Verify in steps of quad-word (128-bit)

	if (!isVerifyWhileProgram)
 8003b02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <Reflash+0x2c8>
	{

	}
	else
		bigData->State |= FLASH_COMPLETE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8003b16:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8003b1a:	f043 0310 	orr.w	r3, r3, #16
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8003b24:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

	/*Check if there is an issue to program data*/
	//	if (State & FAIL_FLASH)
	//		{while(1){;};}
}
 8003b28:	bf00      	nop
 8003b2a:	373c      	adds	r7, #60	@ 0x3c
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	08080000 	.word	0x08080000
 8003b34:	0802c3ec 	.word	0x0802c3ec
 8003b38:	0802c3e8 	.word	0x0802c3e8
 8003b3c:	2007d0bc 	.word	0x2007d0bc
 8003b40:	0802c408 	.word	0x0802c408
 8003b44:	0802c434 	.word	0x0802c434
 8003b48:	0802c45c 	.word	0x0802c45c
 8003b4c:	0802c484 	.word	0x0802c484
 8003b50:	0bfa07a0 	.word	0x0bfa07a0
 8003b54:	0802c49c 	.word	0x0802c49c
 8003b58:	0802c4dc 	.word	0x0802c4dc
 8003b5c:	0802c500 	.word	0x0802c500
 8003b60:	00027100 	.word	0x00027100
 8003b64:	0802c528 	.word	0x0802c528
 8003b68:	0802c53c 	.word	0x0802c53c
 8003b6c:	0802c56c 	.word	0x0802c56c
 8003b70:	0802c5a8 	.word	0x0802c5a8
 8003b74:	000270ff 	.word	0x000270ff
 8003b78:	0802c5e0 	.word	0x0802c5e0
 8003b7c:	0802c604 	.word	0x0802c604
 8003b80:	0802c62c 	.word	0x0802c62c
 8003b84:	0802c658 	.word	0x0802c658
 8003b88:	0802c684 	.word	0x0802c684
 8003b8c:	0802c6b0 	.word	0x0802c6b0

08003b90 <GetPage>:
 * @brief  Gets the page of a given FLASH_Address
 * @param  Addr: FLASH_Address of the FLASH Memory
 * @retval The page of a given FLASH_Address
 */
uint32_t GetPage ( uint32_t Addr )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8003b98:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <GetPage+0x84>)
 8003b9a:	881b      	ldrh	r3, [r3, #0]
 8003b9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00d      	beq.n	8003bc0 <GetPage+0x30>
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <GetPage+0x84>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <GetPage+0x2a>
 8003bac:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <GetPage+0x84>)
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	029b      	lsls	r3, r3, #10
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003bb8:	e004      	b.n	8003bc4 <GetPage+0x34>
 8003bba:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8003bbe:	e001      	b.n	8003bc4 <GetPage+0x34>
 8003bc0:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d904      	bls.n	8003bd4 <GetPage+0x44>
	{ /* Bank 1 */
		return ((Addr - FLASH_BASE) / FLASH_PAGE_SIZE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8003bd0:	0b5b      	lsrs	r3, r3, #13
 8003bd2:	e018      	b.n	8003c06 <GetPage+0x76>
	}
	else
	{ /* Bank 2 */
		return ((Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE);
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <GetPage+0x84>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00d      	beq.n	8003bfc <GetPage+0x6c>
 8003be0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <GetPage+0x84>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <GetPage+0x66>
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <GetPage+0x84>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	029b      	lsls	r3, r3, #10
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003bf4:	e004      	b.n	8003c00 <GetPage+0x70>
 8003bf6:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8003bfa:	e001      	b.n	8003c00 <GetPage+0x70>
 8003bfc:	f04f 6301 	mov.w	r3, #135266304	@ 0x8100000
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	0b5b      	lsrs	r3, r3, #13
	}
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	0bfa07a0 	.word	0x0bfa07a0

08003c18 <GetBank>:
/******************************************************
 Flash Function
 Note: returns the bank of a given Address
 ******************************************************/
uint32_t GetBank ( uint32_t Addr )
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	if (Addr < ADDR_FLASH_PAGE_64)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a09      	ldr	r2, [pc, #36]	@ (8003c48 <GetBank+0x30>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d801      	bhi.n	8003c2c <GetBank+0x14>
	{
		return FLASH_BANK_1;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e006      	b.n	8003c3a <GetBank+0x22>
	}
	else if (Addr >= ADDR_FLASH_PAGE_64)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a06      	ldr	r2, [pc, #24]	@ (8003c48 <GetBank+0x30>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <GetBank+0x20>
	{
		return FLASH_BANK_2;
 8003c34:	2302      	movs	r3, #2
 8003c36:	e000      	b.n	8003c3a <GetBank+0x22>
	}
	else
	{
		return FLASH_BANK_1;
 8003c38:	2301      	movs	r3, #1
	}
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	0807ffff 	.word	0x0807ffff

08003c4c <getSwapBank>:
BANK_TYPE getSwapBank(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08e      	sub	sp, #56	@ 0x38
 8003c50:	af00      	add	r7, sp, #0
	BANK_TYPE currentBank = BANK1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	FLASH_OBProgramInitTypeDef OptionsBytes;

	HAL_FLASH_Unlock ();
 8003c58:	f015 fa6a 	bl	8019130 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock ();
 8003c5c:	f015 faa4 	bl	80191a8 <HAL_FLASH_OB_Unlock>

	HAL_FLASHEx_OBGetConfig(&OptionsBytes);
 8003c60:	463b      	mov	r3, r7
 8003c62:	4618      	mov	r0, r3
 8003c64:	f015 fc7a 	bl	801955c <HAL_FLASHEx_OBGetConfig>

	if((OptionsBytes.USERConfig & OB_SWAP_BANK_ENABLE)== OB_SWAP_BANK_ENABLE)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <getSwapBank+0x2c>
	{
		currentBank = BANK2;
 8003c72:	2302      	movs	r3, #2
 8003c74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}

	HAL_FLASH_Lock ();	// Lock the Flash to disable the flash control register access
 8003c78:	f015 fa7c 	bl	8019174 <HAL_FLASH_Lock>
	return currentBank;
 8003c7c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37

}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3738      	adds	r7, #56	@ 0x38
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <BUZ_Init>:
#define Buzzer_State _Buzzer_Control
#define SET_CLOCK_SCALE LPTIM_PRESCALER_DIV128

//  ********************  Public Functions  ****************************************************
void BUZ_Init ( void )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	Log_Single ( "\1 Buzz \r\n\0" );
 8003c8c:	4810      	ldr	r0, [pc, #64]	@ (8003cd0 <BUZ_Init+0x48>)
 8003c8e:	f002 ff0d 	bl	8006aac <Log_Single>

	if (Buzzer_State & Buzzer_Locked) return;
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <BUZ_Init+0x4c>)
 8003c94:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8003c98:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d113      	bne.n	8003ccc <BUZ_Init+0x44>
	else Buzzer_State = Buzzer_Locked + Single_Length_Enabled;
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <BUZ_Init+0x4c>)
 8003ca6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8003caa:	2224      	movs	r2, #36	@ 0x24
 8003cac:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f

	if (memory.buzzerData.Single_Repeat == 0) Buzzer_State = Buzzer_Locked + Cycles_Length_Enabled;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	@ (8003cd4 <BUZ_Init+0x4c>)
 8003cb2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8003cb6:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d107      	bne.n	8003cce <BUZ_Init+0x46>
 8003cbe:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <BUZ_Init+0x4c>)
 8003cc0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8003cc4:	2230      	movs	r2, #48	@ 0x30
 8003cc6:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
 8003cca:	e000      	b.n	8003cce <BUZ_Init+0x46>
	if (Buzzer_State & Buzzer_Locked) return;
 8003ccc:	bf00      	nop
//	hlptim1.Init.RepetitionCounter = 0;
//
//	HAL_LPTIM_Init ( &hlptim1 );

//	if (HAL_LPTIM_Counter_Start_IT ( &hlptim1 ) != HAL_OK) Error_Handler ();
}
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	0802c6dc 	.word	0x0802c6dc
 8003cd4:	2007d870 	.word	0x2007d870

08003cd8 <cameraInitialize>:
#define ARDRU_XFER_SIZE 1024
#define CAMERA_UART_BUF_SIZE 64
/******************************************************/

void cameraInitialize ( void )
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b093      	sub	sp, #76	@ 0x4c
 8003cdc:	af00      	add	r7, sp, #0
	if ((powerStatus) & (!isArcucamConfigured))
 8003cde:	4b50      	ldr	r3, [pc, #320]	@ (8003e20 <cameraInitialize+0x148>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8003e24 <cameraInitialize+0x14c>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f083 0301 	eor.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8090 	beq.w	8003e16 <cameraInitialize+0x13e>
	{
		HAL_Delay(100);    //GAV is this necessary?
 8003cf6:	2064      	movs	r0, #100	@ 0x64
 8003cf8:	f012 fbc4 	bl	8016484 <HAL_Delay>
		// stateStatus is set in ArducamCamra.c file in the cameraWaitI2cIdle function not working
		cameraDataAndState.stateStatus = CAM_OK; // have to initialize this to "OK"
 8003cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8003e28 <cameraInitialize+0x150>)
 8003cfe:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2f95 	strb.w	r2, [r3, #3989]	@ 0xf95
		cameraDataAndState.readyStatus = CAM_IS_NOT_READY;
 8003d08:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <cameraInitialize+0x150>)
 8003d0a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2f94 	strb.w	r2, [r3, #3988]	@ 0xf94

        // chip select is 1
		(Arducamera) = createArducamCamera ( 1 );
 8003d14:	4b44      	ldr	r3, [pc, #272]	@ (8003e28 <cameraInitialize+0x150>)
 8003d16:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fd33 	bl	800378c <createArducamCamera>
 8003d26:	f604 7398 	addw	r3, r4, #3992	@ 0xf98
 8003d2a:	4639      	mov	r1, r7
 8003d2c:	2248      	movs	r2, #72	@ 0x48
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f024 f8b5 	bl	8027e9e <memcpy>

		begin ( &(Arducamera) );
 8003d34:	483d      	ldr	r0, [pc, #244]	@ (8003e2c <cameraInitialize+0x154>)
 8003d36:	f7ff fb55 	bl	80033e4 <begin>
		printCameraStatus (  );
 8003d3a:	f000 f87b 	bl	8003e34 <printCameraStatus>

		Refresh_Watchdog;
 8003d3e:	483c      	ldr	r0, [pc, #240]	@ (8003e30 <cameraInitialize+0x158>)
 8003d40:	f017 fa47 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <cameraInitialize+0x76>
 8003d4a:	f011 fd23 	bl	8015794 <Error_Handler>

		setAutoExposure ( &(Arducamera) , 1 );
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4836      	ldr	r0, [pc, #216]	@ (8003e2c <cameraInitialize+0x154>)
 8003d52:	f7ff fb77 	bl	8003444 <setAutoExposure>
		printCameraStatus (  );
 8003d56:	f000 f86d 	bl	8003e34 <printCameraStatus>

		setAutoISOSensitive ( &(Arducamera) , 1 );
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4833      	ldr	r0, [pc, #204]	@ (8003e2c <cameraInitialize+0x154>)
 8003d5e:	f7ff fb83 	bl	8003468 <setAutoISOSensitive>
		printCameraStatus (  );
 8003d62:	f000 f867 	bl	8003e34 <printCameraStatus>

		//GAV are the following two settings reversed?
		setAutoWhiteBalance ( &(Arducamera) , 1 );
 8003d66:	2101      	movs	r1, #1
 8003d68:	4830      	ldr	r0, [pc, #192]	@ (8003e2c <cameraInitialize+0x154>)
 8003d6a:	f7ff fb8f 	bl	800348c <setAutoWhiteBalance>
		printCameraStatus (  );
 8003d6e:	f000 f861 	bl	8003e34 <printCameraStatus>

		setAutoWhiteBalanceMode ( &(Arducamera) , CAM_WHITE_BALANCE_MODE_OFFICE );
 8003d72:	2102      	movs	r1, #2
 8003d74:	482d      	ldr	r0, [pc, #180]	@ (8003e2c <cameraInitialize+0x154>)
 8003d76:	f7ff fb9b 	bl	80034b0 <setAutoWhiteBalanceMode>
		printCameraStatus (  );
 8003d7a:	f000 f85b 	bl	8003e34 <printCameraStatus>

		setColorEffect ( &(Arducamera) , CAM_COLOR_FX_NONE );
 8003d7e:	2100      	movs	r1, #0
 8003d80:	482a      	ldr	r0, [pc, #168]	@ (8003e2c <cameraInitialize+0x154>)
 8003d82:	f7ff fba7 	bl	80034d4 <setColorEffect>
		printCameraStatus (  );
 8003d86:	f000 f855 	bl	8003e34 <printCameraStatus>

		setSaturation ( &(Arducamera) , CAM_STAURATION_LEVEL_DEFAULT );
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4827      	ldr	r0, [pc, #156]	@ (8003e2c <cameraInitialize+0x154>)
 8003d8e:	f7ff fbb3 	bl	80034f8 <setSaturation>
		printCameraStatus (  );
 8003d92:	f000 f84f 	bl	8003e34 <printCameraStatus>

		setEV ( &(Arducamera) , CAM_EV_LEVEL_DEFAULT );
 8003d96:	2100      	movs	r1, #0
 8003d98:	4824      	ldr	r0, [pc, #144]	@ (8003e2c <cameraInitialize+0x154>)
 8003d9a:	f7ff fbbf 	bl	800351c <setEV>
		printCameraStatus (  );
 8003d9e:	f000 f849 	bl	8003e34 <printCameraStatus>

		setContrast ( &(Arducamera) , CAM_CONTRAST_LEVEL_DEFAULT );
 8003da2:	2100      	movs	r1, #0
 8003da4:	4821      	ldr	r0, [pc, #132]	@ (8003e2c <cameraInitialize+0x154>)
 8003da6:	f7ff fbcb 	bl	8003540 <setContrast>
		printCameraStatus (  );
 8003daa:	f000 f843 	bl	8003e34 <printCameraStatus>

		setBrightness ( &(Arducamera) , CAM_BRIGHTNESS_LEVEL_DEFAULT );
 8003dae:	2100      	movs	r1, #0
 8003db0:	481e      	ldr	r0, [pc, #120]	@ (8003e2c <cameraInitialize+0x154>)
 8003db2:	f7ff fbd7 	bl	8003564 <setBrightness>
		printCameraStatus (  );
 8003db6:	f000 f83d 	bl	8003e34 <printCameraStatus>

		setSharpness ( &(Arducamera) , CAM_SHARPNESS_LEVEL_AUTO );
 8003dba:	2100      	movs	r1, #0
 8003dbc:	481b      	ldr	r0, [pc, #108]	@ (8003e2c <cameraInitialize+0x154>)
 8003dbe:	f7ff fbe3 	bl	8003588 <setSharpness>
		printCameraStatus (  );
 8003dc2:	f000 f837 	bl	8003e34 <printCameraStatus>

		setImageQuality ( &(Arducamera) , LOW_QUALITY );
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4818      	ldr	r0, [pc, #96]	@ (8003e2c <cameraInitialize+0x154>)
 8003dca:	f7ff fccd 	bl	8003768 <setImageQuality>
		printCameraStatus (  );
 8003dce:	f000 f831 	bl	8003e34 <printCameraStatus>
		//		printCameraStatus (  );
		//
		//		cameraHeartBeat ( &(Arducamera) );
		//		printCameraStatus (  );

		Refresh_Watchdog;
 8003dd2:	4817      	ldr	r0, [pc, #92]	@ (8003e30 <cameraInitialize+0x158>)
 8003dd4:	f017 f9fd 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <cameraInitialize+0x10a>
 8003dde:	f011 fcd9 	bl	8015794 <Error_Handler>

		HAL_Delay ( 500 );
 8003de2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003de6:	f012 fb4d 	bl	8016484 <HAL_Delay>
		stopPreview ( &(Arducamera) );
 8003dea:	4810      	ldr	r0, [pc, #64]	@ (8003e2c <cameraInitialize+0x154>)
 8003dec:	f7ff fb1c 	bl	8003428 <stopPreview>
		printCameraStatus ( );
 8003df0:	f000 f820 	bl	8003e34 <printCameraStatus>

		cameraDataAndState.readyStatus = CAM_IS_READY;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <cameraInitialize+0x150>)
 8003df6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2f94 	strb.w	r2, [r3, #3988]	@ 0xf94

		Refresh_Watchdog;
 8003e00:	480b      	ldr	r0, [pc, #44]	@ (8003e30 <cameraInitialize+0x158>)
 8003e02:	f017 f9e6 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <cameraInitialize+0x138>
 8003e0c:	f011 fcc2 	bl	8015794 <Error_Handler>

		isArcucamConfigured = true;
 8003e10:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <cameraInitialize+0x14c>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]
	}
}
 8003e16:	bf00      	nop
 8003e18:	374c      	adds	r7, #76	@ 0x4c
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd90      	pop	{r4, r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200016a0 	.word	0x200016a0
 8003e24:	200016a1 	.word	0x200016a1
 8003e28:	200016a4 	.word	0x200016a4
 8003e2c:	2001763c 	.word	0x2001763c
 8003e30:	2007d0bc 	.word	0x2007d0bc

08003e34 <printCameraStatus>:

void printCameraStatus ( void )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	Refresh_Watchdog;
 8003e38:	480d      	ldr	r0, [pc, #52]	@ (8003e70 <printCameraStatus+0x3c>)
 8003e3a:	f017 f9ca 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <printCameraStatus+0x14>
 8003e44:	f011 fca6 	bl	8015794 <Error_Handler>

	if (cameraDataAndState.stateStatus == CAM_OK) Log_Single ( CAM_Success );
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <printCameraStatus+0x40>)
 8003e4a:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003e4e:	f893 3f95 	ldrb.w	r3, [r3, #3989]	@ 0xf95
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <printCameraStatus+0x2a>
 8003e56:	4808      	ldr	r0, [pc, #32]	@ (8003e78 <printCameraStatus+0x44>)
 8003e58:	f002 fe28 	bl	8006aac <Log_Single>
 8003e5c:	e002      	b.n	8003e64 <printCameraStatus+0x30>
	else Log_Single ( CAM_Fail );
 8003e5e:	4807      	ldr	r0, [pc, #28]	@ (8003e7c <printCameraStatus+0x48>)
 8003e60:	f002 fe24 	bl	8006aac <Log_Single>

	HAL_Delay ( ARDUCAM_COMMAND_DELAY );
 8003e64:	2082      	movs	r0, #130	@ 0x82
 8003e66:	f012 fb0d 	bl	8016484 <HAL_Delay>
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	2007d0bc 	.word	0x2007d0bc
 8003e74:	200016a4 	.word	0x200016a4
 8003e78:	0802c6e8 	.word	0x0802c6e8
 8003e7c:	0802c704 	.word	0x0802c704

08003e80 <takeCameraImage>:

/******************************************************/
void takeCameraImage ( CAMERA_DATA_TYPE * cameraData,  bool printImage )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
	cameraDataAndState.readyStatus = CAM_IS_NOT_READY;
 8003e8c:	4b42      	ldr	r3, [pc, #264]	@ (8003f98 <takeCameraImage+0x118>)
 8003e8e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2f94 	strb.w	r2, [r3, #3988]	@ 0xf94

	// High Definition mode is  CAM_IMAGE_MODE_HD
	takePicture ( &(Arducamera) , CAM_IMAGE_MODE_QVGA , CAM_IMAGE_PIX_FMT_JPG );
 8003e98:	2201      	movs	r2, #1
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	483f      	ldr	r0, [pc, #252]	@ (8003f9c <takeCameraImage+0x11c>)
 8003e9e:	f7ff faaf 	bl	8003400 <takePicture>

	HAL_Delay ( 100 );
 8003ea2:	2064      	movs	r0, #100	@ 0x64
 8003ea4:	f012 faee 	bl	8016484 <HAL_Delay>

	Refresh_Watchdog;
 8003ea8:	483d      	ldr	r0, [pc, #244]	@ (8003fa0 <takeCameraImage+0x120>)
 8003eaa:	f017 f992 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <takeCameraImage+0x38>
 8003eb4:	f011 fc6e 	bl	8015794 <Error_Handler>

	uint32_t cameraDataReadSize = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
	uint32_t cameraReadItterator = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
	while (Arducamera.receivedLength)
 8003ec0:	e010      	b.n	8003ee4 <takeCameraImage+0x64>
	{
		cameraDataReadSize += readBuff ( &(Arducamera) , &(cameraDataAndState.pictureBuffer [ cameraReadItterator ]) , ARDRU_XFER_SIZE );
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4a34      	ldr	r2, [pc, #208]	@ (8003f98 <takeCameraImage+0x118>)
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4833      	ldr	r0, [pc, #204]	@ (8003f9c <takeCameraImage+0x11c>)
 8003ed0:	f7ff fb6c 	bl	80035ac <readBuff>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
		cameraReadItterator += ARDRU_XFER_SIZE;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
	while (Arducamera.receivedLength)
 8003ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f98 <takeCameraImage+0x118>)
 8003ee6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003eea:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	@ 0xfa0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e7      	bne.n	8003ec2 <takeCameraImage+0x42>

	// KCS ADD XPS SAVE for multiple pictures taken per PIR event
	//	HAL_GPIO_WritePin ( USB_Power_Enable_GPIO_Port , USB_Power_Enable_Pin , GPIO_PIN_RESET );    //for simulated battery power operation

	// encode requires the destination buffer size to be passed in and passes out in the same variable the actual encoded size
	size_t encodBuffSize = PIC_MAX;
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8003fa4 <takeCameraImage+0x124>)
 8003ef4:	60bb      	str	r3, [r7, #8]

	base64_encode ( cameraData->encoded , &encodBuffSize ,
 8003ef6:	6878      	ldr	r0, [r7, #4]
			(const unsigned char*) cameraDataAndState.pictureBuffer ,
			Arducamera.totalLength );
 8003ef8:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <takeCameraImage+0x118>)
 8003efa:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003efe:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	@ 0xf9c
	base64_encode ( cameraData->encoded , &encodBuffSize ,
 8003f02:	f107 0108 	add.w	r1, r7, #8
 8003f06:	4a24      	ldr	r2, [pc, #144]	@ (8003f98 <takeCameraImage+0x118>)
 8003f08:	f002 fa1a 	bl	8006340 <base64_encode>

	cameraDataAndState.pictureSize = (uint32_t) encodBuffSize;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a22      	ldr	r2, [pc, #136]	@ (8003f98 <takeCameraImage+0x118>)
 8003f10:	f502 32a8 	add.w	r2, r2, #86016	@ 0x15000
 8003f14:	f8c2 3f90 	str.w	r3, [r2, #3984]	@ 0xf90
	cameraData->encodedSize = (uint32_t) encodBuffSize;;
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f502 32a8 	add.w	r2, r2, #86016	@ 0x15000
 8003f20:	f8c2 3f90 	str.w	r3, [r2, #3984]	@ 0xf90

	Refresh_Watchdog;
 8003f24:	481e      	ldr	r0, [pc, #120]	@ (8003fa0 <takeCameraImage+0x120>)
 8003f26:	f017 f954 	bl	801b1d2 <HAL_IWDG_Refresh>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <takeCameraImage+0xb4>
 8003f30:	f011 fc30 	bl	8015794 <Error_Handler>

	Log_Single ( LOG_Image_Data );
 8003f34:	481c      	ldr	r0, [pc, #112]	@ (8003fa8 <takeCameraImage+0x128>)
 8003f36:	f002 fdb9 	bl	8006aac <Log_Single>

	if (printImage)
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <takeCameraImage+0xee>
	{
		for (size_t iter = 0; iter <= encodBuffSize; iter += CAMERA_UART_BUF_SIZE)
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e00a      	b.n	8003f5c <takeCameraImage+0xdc>
		{
			vcom_Trace ( &cameraData->encoded [ iter ] , CAMERA_UART_BUF_SIZE , 1 );
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	2140      	movs	r1, #64	@ 0x40
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 fef1 	bl	8006d38 <vcom_Trace>
		for (size_t iter = 0; iter <= encodBuffSize; iter += CAMERA_UART_BUF_SIZE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	3340      	adds	r3, #64	@ 0x40
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d9f0      	bls.n	8003f46 <takeCameraImage+0xc6>
		}
		vcom_Trace ( (uint8_t*) "\r\n\r\n" , 4 , 1 );
 8003f64:	2201      	movs	r2, #1
 8003f66:	2104      	movs	r1, #4
 8003f68:	4810      	ldr	r0, [pc, #64]	@ (8003fac <takeCameraImage+0x12c>)
 8003f6a:	f002 fee5 	bl	8006d38 <vcom_Trace>
	}

	// KCS remove before release of 0.4.x
	// Print read size and compare to arducam structure value
	PRINTF("Camera read size, calculated %ul vs Stored %ul\r\n" , cameraDataReadSize, Arducamera.totalLength );
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f98 <takeCameraImage+0x118>)
 8003f70:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003f74:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	@ 0xf9c
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	490d      	ldr	r1, [pc, #52]	@ (8003fb0 <takeCameraImage+0x130>)
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f002 fef9 	bl	8006d74 <TraceSend>

	cameraDataAndState.readyStatus = CAM_IS_READY;
 8003f82:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <takeCameraImage+0x118>)
 8003f84:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2f94 	strb.w	r2, [r3, #3988]	@ 0xf94
}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200016a4 	.word	0x200016a4
 8003f9c:	2001763c 	.word	0x2001763c
 8003fa0:	2007d0bc 	.word	0x2007d0bc
 8003fa4:	00015f90 	.word	0x00015f90
 8003fa8:	0802c720 	.word	0x0802c720
 8003fac:	0802c760 	.word	0x0802c760
 8003fb0:	0802c768 	.word	0x0802c768

08003fb4 <CAM_Get_State>:

CAM_STATE CAM_Get_State ( void )
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
	return cameraDataAndState.stateStatus;
 8003fb8:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <CAM_Get_State+0x18>)
 8003fba:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003fbe:	f893 3f95 	ldrb.w	r3, [r3, #3989]	@ 0xf95
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	200016a4 	.word	0x200016a4

08003fd0 <setCameraPower>:
{
	return powerStatus;
}

void setCameraPower ( bool cameraPower )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
	powerStatus =  cameraPower;
 8003fda:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <setCameraPower+0x30>)
 8003fdc:	79fb      	ldrb	r3, [r7, #7]
 8003fde:	7013      	strb	r3, [r2, #0]
	if (!powerStatus)
 8003fe0:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <setCameraPower+0x30>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f083 0301 	eor.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <setCameraPower+0x24>
	{
		isArcucamConfigured = false;
 8003fee:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <setCameraPower+0x34>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
	}
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	200016a0 	.word	0x200016a0
 8004004:	200016a1 	.word	0x200016a1

08004008 <dayNightInit>:

BUSINESS_DATA_TYPE privateBusiness;

/************************ Public Function Definitions ************************/
void dayNightInit(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
	privateBusiness.DayNightSwitchEnabled = false;
 800400c:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <dayNightInit+0x38>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
	privateBusiness.dayTime.hours = DEFAULT_DAY_HOURS;
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <dayNightInit+0x38>)
 8004014:	220f      	movs	r2, #15
 8004016:	705a      	strb	r2, [r3, #1]
	privateBusiness.dayTime.minutes = DEFAULT_DAY_MINUTES;
 8004018:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <dayNightInit+0x38>)
 800401a:	221e      	movs	r2, #30
 800401c:	709a      	strb	r2, [r3, #2]
	privateBusiness.nightTime.hours = DEFAULT_NIGHT_HOURS;
 800401e:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <dayNightInit+0x38>)
 8004020:	2202      	movs	r2, #2
 8004022:	70da      	strb	r2, [r3, #3]
	privateBusiness.nightTime.minutes = DEFAULT_NIGHT_MINUTES;
 8004024:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <dayNightInit+0x38>)
 8004026:	2201      	movs	r2, #1
 8004028:	711a      	strb	r2, [r3, #4]
	privateBusiness.lastEventTime.hours = DEFAULT_LAST_COOLDOWN;
 800402a:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <dayNightInit+0x38>)
 800402c:	220f      	movs	r2, #15
 800402e:	715a      	strb	r2, [r3, #5]
	privateBusiness.lastEventTime.minutes = DEFAULT_LAST_COOLDOWN;
 8004030:	4b03      	ldr	r3, [pc, #12]	@ (8004040 <dayNightInit+0x38>)
 8004032:	220f      	movs	r2, #15
 8004034:	719a      	strb	r2, [r3, #6]
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	20017684 	.word	0x20017684

08004044 <getBusinessHours>:

void getBusinessHours(BUSINESS_DATA_TYPE *extBusinessHours)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	extBusinessHours->DayNightSwitchEnabled = privateBusiness.DayNightSwitchEnabled;
 800404c:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <getBusinessHours+0x4c>)
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	701a      	strb	r2, [r3, #0]
	extBusinessHours->dayTime.hours = privateBusiness.dayTime.hours;
 8004054:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <getBusinessHours+0x4c>)
 8004056:	785a      	ldrb	r2, [r3, #1]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	705a      	strb	r2, [r3, #1]
	extBusinessHours->dayTime.minutes = privateBusiness.dayTime.minutes;
 800405c:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <getBusinessHours+0x4c>)
 800405e:	789a      	ldrb	r2, [r3, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	709a      	strb	r2, [r3, #2]
	extBusinessHours->nightTime.hours = privateBusiness.nightTime.hours;
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <getBusinessHours+0x4c>)
 8004066:	78da      	ldrb	r2, [r3, #3]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	70da      	strb	r2, [r3, #3]
	extBusinessHours->nightTime.minutes = privateBusiness.nightTime.minutes;
 800406c:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <getBusinessHours+0x4c>)
 800406e:	791a      	ldrb	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	711a      	strb	r2, [r3, #4]
	extBusinessHours->lastEventTime.hours = privateBusiness.lastEventTime.hours;
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <getBusinessHours+0x4c>)
 8004076:	795a      	ldrb	r2, [r3, #5]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	715a      	strb	r2, [r3, #5]
	extBusinessHours->lastEventTime.minutes = privateBusiness.lastEventTime.minutes;
 800407c:	4b04      	ldr	r3, [pc, #16]	@ (8004090 <getBusinessHours+0x4c>)
 800407e:	799a      	ldrb	r2, [r3, #6]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	719a      	strb	r2, [r3, #6]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	20017684 	.word	0x20017684

08004094 <setBusinessHours>:

// Function to set from flash memory
void setBusinessHours(BUSINESS_DATA_TYPE extBusinessHours)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	463b      	mov	r3, r7
 800409c:	e883 0003 	stmia.w	r3, {r0, r1}
	privateBusiness.DayNightSwitchEnabled =	extBusinessHours.DayNightSwitchEnabled;
 80040a0:	783a      	ldrb	r2, [r7, #0]
 80040a2:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <setBusinessHours+0x44>)
 80040a4:	701a      	strb	r2, [r3, #0]
	privateBusiness.dayTime.hours = extBusinessHours.dayTime.hours;
 80040a6:	787a      	ldrb	r2, [r7, #1]
 80040a8:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <setBusinessHours+0x44>)
 80040aa:	705a      	strb	r2, [r3, #1]
	privateBusiness.dayTime.minutes = extBusinessHours.dayTime.minutes;
 80040ac:	78ba      	ldrb	r2, [r7, #2]
 80040ae:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <setBusinessHours+0x44>)
 80040b0:	709a      	strb	r2, [r3, #2]
	privateBusiness.nightTime.hours = extBusinessHours.nightTime.hours;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <setBusinessHours+0x44>)
 80040b6:	70da      	strb	r2, [r3, #3]
	privateBusiness.nightTime.minutes = extBusinessHours.nightTime.minutes;
 80040b8:	793a      	ldrb	r2, [r7, #4]
 80040ba:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <setBusinessHours+0x44>)
 80040bc:	711a      	strb	r2, [r3, #4]
	privateBusiness.lastEventTime.hours = extBusinessHours.lastEventTime.hours;
 80040be:	797a      	ldrb	r2, [r7, #5]
 80040c0:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <setBusinessHours+0x44>)
 80040c2:	715a      	strb	r2, [r3, #5]
	privateBusiness.lastEventTime.minutes = extBusinessHours.lastEventTime.minutes;
 80040c4:	79ba      	ldrb	r2, [r7, #6]
 80040c6:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <setBusinessHours+0x44>)
 80040c8:	719a      	strb	r2, [r3, #6]

}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20017684 	.word	0x20017684

080040dc <isNight2>:
  * @brief  Checks current time against business hours to determine if it is night
  * @note
  * @retval return value isNight - true if night, false if day
  */
bool isNight2(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af00      	add	r7, sp, #0
	bool isNightTime = false;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	TIME_DATE_TYPE currentTime;

	// Get the current time from the RTC
	HAL_RTC_GetTime(&hrtc, &currentTime.rtcTime, RTC_FORMAT_BIN);
 80040e8:	463b      	mov	r3, r7
 80040ea:	2200      	movs	r2, #0
 80040ec:	4619      	mov	r1, r3
 80040ee:	482e      	ldr	r0, [pc, #184]	@ (80041a8 <isNight2+0xcc>)
 80040f0:	f01d f896 	bl	8021220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &currentTime.rtcDate , RTC_FORMAT_BIN );
 80040f4:	463b      	mov	r3, r7
 80040f6:	331c      	adds	r3, #28
 80040f8:	2200      	movs	r2, #0
 80040fa:	4619      	mov	r1, r3
 80040fc:	482a      	ldr	r0, [pc, #168]	@ (80041a8 <isNight2+0xcc>)
 80040fe:	f01d f987 	bl	8021410 <HAL_RTC_GetDate>

	//This converts the time to minutes to handle business hours spanning midnight
	uint16_t currentMinutes = currentTime.rtcTime.Hours * 60 + currentTime.rtcTime.Minutes;
 8004102:	783b      	ldrb	r3, [r7, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	b29b      	uxth	r3, r3
 800410e:	787a      	ldrb	r2, [r7, #1]
 8004110:	4413      	add	r3, r2
 8004112:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t nightStartMinutes = privateBusiness.nightTime.hours * 60 + privateBusiness.nightTime.minutes;
 8004114:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <isNight2+0xd0>)
 8004116:	78db      	ldrb	r3, [r3, #3]
 8004118:	461a      	mov	r2, r3
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	b29b      	uxth	r3, r3
 8004122:	4a22      	ldr	r2, [pc, #136]	@ (80041ac <isNight2+0xd0>)
 8004124:	7912      	ldrb	r2, [r2, #4]
 8004126:	4413      	add	r3, r2
 8004128:	847b      	strh	r3, [r7, #34]	@ 0x22
	uint16_t dayStartMinutes = privateBusiness.dayTime.hours * 60 + privateBusiness.dayTime.minutes;
 800412a:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <isNight2+0xd0>)
 800412c:	785b      	ldrb	r3, [r3, #1]
 800412e:	461a      	mov	r2, r3
 8004130:	0112      	lsls	r2, r2, #4
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	b29b      	uxth	r3, r3
 8004138:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <isNight2+0xd0>)
 800413a:	7892      	ldrb	r2, [r2, #2]
 800413c:	4413      	add	r3, r2
 800413e:	843b      	strh	r3, [r7, #32]

	PRINTF("Night Minutes %d, Current Minutes %d \r\n", nightStartMinutes, currentMinutes);
 8004140:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004142:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004144:	491a      	ldr	r1, [pc, #104]	@ (80041b0 <isNight2+0xd4>)
 8004146:	2001      	movs	r0, #1
 8004148:	f002 fe14 	bl	8006d74 <TraceSend>
	if (nightStartMinutes > dayStartMinutes) // Night time spans across midnight
 800414c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800414e:	8c3b      	ldrh	r3, [r7, #32]
 8004150:	429a      	cmp	r2, r3
 8004152:	d90b      	bls.n	800416c <isNight2+0x90>
	{
		if (currentMinutes >= nightStartMinutes || currentMinutes < dayStartMinutes)
 8004154:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004156:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004158:	429a      	cmp	r2, r3
 800415a:	d203      	bcs.n	8004164 <isNight2+0x88>
 800415c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800415e:	8c3b      	ldrh	r3, [r7, #32]
 8004160:	429a      	cmp	r2, r3
 8004162:	d20e      	bcs.n	8004182 <isNight2+0xa6>
		{
			isNightTime = true;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800416a:	e00a      	b.n	8004182 <isNight2+0xa6>
		}
	}
	else // Night time does not span across midnight
	{
		if (currentMinutes >= nightStartMinutes && currentMinutes < dayStartMinutes)
 800416c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800416e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004170:	429a      	cmp	r2, r3
 8004172:	d306      	bcc.n	8004182 <isNight2+0xa6>
 8004174:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004176:	8c3b      	ldrh	r3, [r7, #32]
 8004178:	429a      	cmp	r2, r3
 800417a:	d202      	bcs.n	8004182 <isNight2+0xa6>
		{
			isNightTime = true;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}
	if (isNightTime)
 8004182:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <isNight2+0xb8>
	{
		PRINTF("isNight2 returning Night\r\n");
 800418a:	490a      	ldr	r1, [pc, #40]	@ (80041b4 <isNight2+0xd8>)
 800418c:	2001      	movs	r0, #1
 800418e:	f002 fdf1 	bl	8006d74 <TraceSend>
 8004192:	e003      	b.n	800419c <isNight2+0xc0>
	}
	else
	{
		PRINTF("isNight2 returning Day\r\n");
 8004194:	4908      	ldr	r1, [pc, #32]	@ (80041b8 <isNight2+0xdc>)
 8004196:	2001      	movs	r0, #1
 8004198:	f002 fdec 	bl	8006d74 <TraceSend>
	}

	return isNightTime;
 800419c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3728      	adds	r7, #40	@ 0x28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2007d344 	.word	0x2007d344
 80041ac:	20017684 	.word	0x20017684
 80041b0:	0802c7b4 	.word	0x0802c7b4
 80041b4:	0802c7dc 	.word	0x0802c7dc
 80041b8:	0802c7f8 	.word	0x0802c7f8

080041bc <isTimeDefault>:


bool isTimeDefault(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	@ 0x28
 80041c0:	af00      	add	r7, sp, #0
	bool isDefaultTime = false;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	TIME_DATE_TYPE currentTime;

	// Get the current time from the RTC
	HAL_RTC_GetTime(&hrtc, &currentTime.rtcTime, RTC_FORMAT_BIN);
 80041c8:	463b      	mov	r3, r7
 80041ca:	2200      	movs	r2, #0
 80041cc:	4619      	mov	r1, r3
 80041ce:	480c      	ldr	r0, [pc, #48]	@ (8004200 <isTimeDefault+0x44>)
 80041d0:	f01d f826 	bl	8021220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &currentTime.rtcDate , RTC_FORMAT_BIN );
 80041d4:	463b      	mov	r3, r7
 80041d6:	331c      	adds	r3, #28
 80041d8:	2200      	movs	r2, #0
 80041da:	4619      	mov	r1, r3
 80041dc:	4808      	ldr	r0, [pc, #32]	@ (8004200 <isTimeDefault+0x44>)
 80041de:	f01d f917 	bl	8021410 <HAL_RTC_GetDate>

	uint32_t sysTime = currentTime.rtcDate.Year;
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	623b      	str	r3, [r7, #32]
	if (sysTime <= 23) // check that RTC has set system clock (our date defaults to 08/07/23)
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	2b17      	cmp	r3, #23
 80041ea:	d802      	bhi.n	80041f2 <isTimeDefault+0x36>
	{
		isDefaultTime = true;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}
	return isDefaultTime;
 80041f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3728      	adds	r7, #40	@ 0x28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2007d344 	.word	0x2007d344

08004204 <decodeDayNightConfigs>:
	extBusinessHours->lastEventTime.minutes = currentTime.rtcTime.Minutes;
}

// pass in MQTTMsg
bool decodeDayNightConfigs(uint8_t *mqttMsg)
{
 8004204:	b5b0      	push	{r4, r5, r7, lr}
 8004206:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800420a:	b082      	sub	sp, #8
 800420c:	af04      	add	r7, sp, #16
 800420e:	f107 0318 	add.w	r3, r7, #24
 8004212:	f843 0c14 	str.w	r0, [r3, #-20]
	bool isError = false;
 8004216:	2300      	movs	r3, #0
 8004218:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800421c:	f102 0217 	add.w	r2, r2, #23
 8004220:	7013      	strb	r3, [r2, #0]
	bool validDay = false;
 8004222:	2300      	movs	r3, #0
 8004224:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004228:	f102 0216 	add.w	r2, r2, #22
 800422c:	7013      	strb	r3, [r2, #0]
	bool validNight = false;
 800422e:	2300      	movs	r3, #0
 8004230:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004234:	f102 0215 	add.w	r2, r2, #21
 8004238:	7013      	strb	r3, [r2, #0]
	uint8_t version = 255;
 800423a:	23ff      	movs	r3, #255	@ 0xff
 800423c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004240:	f102 0214 	add.w	r2, r2, #20
 8004244:	7013      	strb	r3, [r2, #0]
	uint8_t dayH = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800424c:	f102 0213 	add.w	r2, r2, #19
 8004250:	7013      	strb	r3, [r2, #0]
	uint8_t dayM = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004258:	f102 0212 	add.w	r2, r2, #18
 800425c:	7013      	strb	r3, [r2, #0]
	uint8_t nightH = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004264:	f102 0211 	add.w	r2, r2, #17
 8004268:	7013      	strb	r3, [r2, #0]
	uint8_t nightM = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004270:	f102 0210 	add.w	r2, r2, #16
 8004274:	7013      	strb	r3, [r2, #0]
	BUSINESS_DATA_TYPE decodedBusHours;
	char Buff[MEMORY_MAX] = " ";
 8004276:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800427a:	f103 0318 	add.w	r3, r3, #24
 800427e:	f6a3 73c8 	subw	r3, r3, #4040	@ 0xfc8
 8004282:	2220      	movs	r2, #32
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	3304      	adds	r3, #4
 8004288:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f022 ff6e 	bl	8027170 <memset>
	char test[] = "\"day_night\":{";
 8004294:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004298:	f103 0318 	add.w	r3, r3, #24
 800429c:	f6a3 73d8 	subw	r3, r3, #4056	@ 0xfd8
 80042a0:	4ac0      	ldr	r2, [pc, #768]	@ (80045a4 <decodeDayNightConfigs+0x3a0>)
 80042a2:	461c      	mov	r4, r3
 80042a4:	4613      	mov	r3, r2
 80042a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042a8:	c407      	stmia	r4!, {r0, r1, r2}
 80042aa:	8023      	strh	r3, [r4, #0]
	char verTest [] = "\"version\":";
 80042ac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80042b0:	f103 0318 	add.w	r3, r3, #24
 80042b4:	f6a3 73e4 	subw	r3, r3, #4068	@ 0xfe4
 80042b8:	4abb      	ldr	r2, [pc, #748]	@ (80045a8 <decodeDayNightConfigs+0x3a4>)
 80042ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80042bc:	c303      	stmia	r3!, {r0, r1}
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	3302      	adds	r3, #2
 80042c2:	0c12      	lsrs	r2, r2, #16
 80042c4:	701a      	strb	r2, [r3, #0]
	char dayTest [] = "\"day_start_time\":";
 80042c6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80042ca:	f103 0318 	add.w	r3, r3, #24
 80042ce:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 80042d2:	4ab6      	ldr	r2, [pc, #728]	@ (80045ac <decodeDayNightConfigs+0x3a8>)
 80042d4:	461c      	mov	r4, r3
 80042d6:	4615      	mov	r5, r2
 80042d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	8023      	strh	r3, [r4, #0]
	char nightTest [] = "\"night_start_time\":";
 80042e0:	f107 0318 	add.w	r3, r7, #24
 80042e4:	4ab2      	ldr	r2, [pc, #712]	@ (80045b0 <decodeDayNightConfigs+0x3ac>)
 80042e6:	f1a3 040c 	sub.w	r4, r3, #12
 80042ea:	4615      	mov	r5, r2
 80042ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	6023      	str	r3, [r4, #0]

	// Transfer MQTT message to a local buffer
	Word_Transfer(Buff, (char *)mqttMsg);
 80042f4:	f107 0318 	add.w	r3, r7, #24
 80042f8:	461a      	mov	r2, r3
 80042fa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80042fe:	f852 1c14 	ldr.w	r1, [r2, #-20]
 8004302:	4618      	mov	r0, r3
 8004304:	f002 fa16 	bl	8006734 <Word_Transfer>

	// Check for day_night configuration
	char *substr = strstr(Buff, test);
 8004308:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800430c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004310:	4611      	mov	r1, r2
 8004312:	4618      	mov	r0, r3
 8004314:	f022 ffb1 	bl	802727a <strstr>
 8004318:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800431c:	f103 030c 	add.w	r3, r3, #12
 8004320:	6018      	str	r0, [r3, #0]
	if (substr)
 8004322:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004326:	f103 030c 	add.w	r3, r3, #12
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 81c6 	beq.w	80046be <decodeDayNightConfigs+0x4ba>
	{
		// Find version
		char *verStr = strstr(substr, verTest);
 8004332:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004336:	4619      	mov	r1, r3
 8004338:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800433c:	f103 030c 	add.w	r3, r3, #12
 8004340:	6818      	ldr	r0, [r3, #0]
 8004342:	f022 ff9a 	bl	802727a <strstr>
 8004346:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800434a:	f103 0308 	add.w	r3, r3, #8
 800434e:	6018      	str	r0, [r3, #0]
		if (verStr)
 8004350:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004354:	f103 0308 	add.w	r3, r3, #8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8132 	beq.w	80045c4 <decodeDayNightConfigs+0x3c0>
		{
			verStr += strlen(verTest);
 8004360:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004364:	4618      	mov	r0, r3
 8004366:	f7fb ff91 	bl	800028c <strlen>
 800436a:	4602      	mov	r2, r0
 800436c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004370:	f103 0308 	add.w	r3, r3, #8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4413      	add	r3, r2
 8004378:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800437c:	f102 0208 	add.w	r2, r2, #8
 8004380:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 8004382:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004386:	f103 0308 	add.w	r3, r3, #8
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a88      	ldr	r2, [pc, #544]	@ (80045b4 <decodeDayNightConfigs+0x3b0>)
 8004392:	4413      	add	r3, r2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <decodeDayNightConfigs+0x1b6>
			{
				version = atoi(verStr);
 800439e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80043a2:	f103 0308 	add.w	r3, r3, #8
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	f020 ff98 	bl	80252dc <atoi>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80043b2:	f102 0214 	add.w	r2, r2, #20
 80043b6:	7013      	strb	r3, [r2, #0]
 80043b8:	e005      	b.n	80043c6 <decodeDayNightConfigs+0x1c2>
			}
			else
			{
				isError = true;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80043c0:	f102 0217 	add.w	r2, r2, #23
 80043c4:	7013      	strb	r3, [r2, #0]
			}
			if(version == 1)
 80043c6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80043ca:	f103 0314 	add.w	r3, r3, #20
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	f040 80f7 	bne.w	80045c4 <decodeDayNightConfigs+0x3c0>
			{
				// Find day start time (HH:MM)
				char *dayStr = strstr(substr, dayTest);
 80043d6:	f107 0320 	add.w	r3, r7, #32
 80043da:	4619      	mov	r1, r3
 80043dc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80043e0:	f103 030c 	add.w	r3, r3, #12
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	f022 ff48 	bl	802727a <strstr>
 80043ea:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80043ee:	f103 0304 	add.w	r3, r3, #4
 80043f2:	6018      	str	r0, [r3, #0]
				if (dayStr && !isError)
 80043f4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80043f8:	f103 0304 	add.w	r3, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d06a      	beq.n	80044d8 <decodeDayNightConfigs+0x2d4>
 8004402:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004406:	f103 0317 	add.w	r3, r3, #23
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f083 0301 	eor.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d060      	beq.n	80044d8 <decodeDayNightConfigs+0x2d4>
				{
					dayStr += strlen(dayTest) + 1;
 8004416:	f107 0320 	add.w	r3, r7, #32
 800441a:	4618      	mov	r0, r3
 800441c:	f7fb ff36 	bl	800028c <strlen>
 8004420:	4603      	mov	r3, r0
 8004422:	3301      	adds	r3, #1
 8004424:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004428:	f102 0204 	add.w	r2, r2, #4
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	4413      	add	r3, r2
 8004430:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004434:	f102 0204 	add.w	r2, r2, #4
 8004438:	6013      	str	r3, [r2, #0]
					char *dayMin = dayStr + 3;
 800443a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800443e:	f103 0304 	add.w	r3, r3, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3303      	adds	r3, #3
 8004446:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800444a:	6013      	str	r3, [r2, #0]
					// Convert hours and minutes if they are integers. Set validDay to true
					if(isdigit((unsigned char)dayStr[0]))
 800444c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004450:	f103 0304 	add.w	r3, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	4a56      	ldr	r2, [pc, #344]	@ (80045b4 <decodeDayNightConfigs+0x3b0>)
 800445c:	4413      	add	r3, r2
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d031      	beq.n	80044cc <decodeDayNightConfigs+0x2c8>
					{
						dayH = atoi(dayStr);
 8004468:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800446c:	f103 0304 	add.w	r3, r3, #4
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f020 ff33 	bl	80252dc <atoi>
 8004476:	4603      	mov	r3, r0
 8004478:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800447c:	f102 0213 	add.w	r2, r2, #19
 8004480:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)dayMin[0]))
 8004482:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	3301      	adds	r3, #1
 800448c:	4a49      	ldr	r2, [pc, #292]	@ (80045b4 <decodeDayNightConfigs+0x3b0>)
 800448e:	4413      	add	r3, r2
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	d011      	beq.n	80044be <decodeDayNightConfigs+0x2ba>
						{
							dayM = atoi(dayMin);
 800449a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	f020 ff1c 	bl	80252dc <atoi>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80044aa:	f102 0212 	add.w	r2, r2, #18
 80044ae:	7013      	strb	r3, [r2, #0]
							validDay = true;
 80044b0:	2301      	movs	r3, #1
 80044b2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80044b6:	f102 0216 	add.w	r2, r2, #22
 80044ba:	7013      	strb	r3, [r2, #0]
 80044bc:	e00c      	b.n	80044d8 <decodeDayNightConfigs+0x2d4>
						}
						else
						{
							isError = true;
 80044be:	2301      	movs	r3, #1
 80044c0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80044c4:	f102 0217 	add.w	r2, r2, #23
 80044c8:	7013      	strb	r3, [r2, #0]
 80044ca:	e005      	b.n	80044d8 <decodeDayNightConfigs+0x2d4>
						}
					}
					else
					{
						isError = true;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80044d2:	f102 0217 	add.w	r2, r2, #23
 80044d6:	7013      	strb	r3, [r2, #0]
					}
				}

				// Find night start time (HH:MM)
				char *nightStr = strstr(substr, nightTest);
 80044d8:	f107 0318 	add.w	r3, r7, #24
 80044dc:	3b0c      	subs	r3, #12
 80044de:	4619      	mov	r1, r3
 80044e0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80044e4:	f103 030c 	add.w	r3, r3, #12
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	f022 fec6 	bl	802727a <strstr>
 80044ee:	f8c7 0ffc 	str.w	r0, [r7, #4092]	@ 0xffc
				if (nightStr && !isError)
 80044f2:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	@ 0xffc
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d064      	beq.n	80045c4 <decodeDayNightConfigs+0x3c0>
 80044fa:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80044fe:	f103 0317 	add.w	r3, r3, #23
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	f083 0301 	eor.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d05a      	beq.n	80045c4 <decodeDayNightConfigs+0x3c0>
				{
					nightStr += strlen(nightTest) + 1;
 800450e:	f107 0318 	add.w	r3, r7, #24
 8004512:	3b0c      	subs	r3, #12
 8004514:	4618      	mov	r0, r3
 8004516:	f7fb feb9 	bl	800028c <strlen>
 800451a:	4603      	mov	r3, r0
 800451c:	3301      	adds	r3, #1
 800451e:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	@ 0xffc
 8004522:	4413      	add	r3, r2
 8004524:	f8c7 3ffc 	str.w	r3, [r7, #4092]	@ 0xffc
					char *nightMin = nightStr + 3;
 8004528:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	@ 0xffc
 800452c:	3303      	adds	r3, #3
 800452e:	f8c7 3ff8 	str.w	r3, [r7, #4088]	@ 0xff8
					// Convert hours and minutes if they are integers. Set validDay to true
					if(isdigit((unsigned char)nightStr[0]))
 8004532:	f8d7 3ffc 	ldr.w	r3, [r7, #4092]	@ 0xffc
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <decodeDayNightConfigs+0x3b0>)
 800453c:	4413      	add	r3, r2
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d037      	beq.n	80045b8 <decodeDayNightConfigs+0x3b4>
					{
						nightH = atoi(nightStr);
 8004548:	f8d7 0ffc 	ldr.w	r0, [r7, #4092]	@ 0xffc
 800454c:	f020 fec6 	bl	80252dc <atoi>
 8004550:	4603      	mov	r3, r0
 8004552:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004556:	f102 0211 	add.w	r2, r2, #17
 800455a:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)nightMin[0]))
 800455c:	f8d7 3ff8 	ldr.w	r3, [r7, #4088]	@ 0xff8
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a13      	ldr	r2, [pc, #76]	@ (80045b4 <decodeDayNightConfigs+0x3b0>)
 8004566:	4413      	add	r3, r2
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <decodeDayNightConfigs+0x390>
						{
							nightM = atoi(nightMin);
 8004572:	f8d7 0ff8 	ldr.w	r0, [r7, #4088]	@ 0xff8
 8004576:	f020 feb1 	bl	80252dc <atoi>
 800457a:	4603      	mov	r3, r0
 800457c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8004580:	f102 0210 	add.w	r2, r2, #16
 8004584:	7013      	strb	r3, [r2, #0]
							validNight = true;
 8004586:	2301      	movs	r3, #1
 8004588:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800458c:	f102 0215 	add.w	r2, r2, #21
 8004590:	7013      	strb	r3, [r2, #0]
 8004592:	e017      	b.n	80045c4 <decodeDayNightConfigs+0x3c0>
						}
						else
						{
							isError = true;
 8004594:	2301      	movs	r3, #1
 8004596:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800459a:	f102 0217 	add.w	r2, r2, #23
 800459e:	7013      	strb	r3, [r2, #0]
 80045a0:	e010      	b.n	80045c4 <decodeDayNightConfigs+0x3c0>
 80045a2:	bf00      	nop
 80045a4:	0802c908 	.word	0x0802c908
 80045a8:	0802c918 	.word	0x0802c918
 80045ac:	0802c924 	.word	0x0802c924
 80045b0:	0802c938 	.word	0x0802c938
 80045b4:	0803031d 	.word	0x0803031d
						}
					}
					else
					{
						isError = true;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80045be:	f102 0217 	add.w	r2, r2, #23
 80045c2:	7013      	strb	r3, [r2, #0]
				}
			}
		}
//		Refresh_Watchdog; // For debugging

		if(validDay && validNight)
 80045c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80045c8:	f103 0316 	add.w	r3, r3, #22
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d067      	beq.n	80046a2 <decodeDayNightConfigs+0x49e>
 80045d2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80045d6:	f103 0315 	add.w	r3, r3, #21
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d060      	beq.n	80046a2 <decodeDayNightConfigs+0x49e>
		{
			if((dayH >= 0 && dayH <=  23) && (dayM >= 0 && dayM <= 59) && (nightH >= 0 && nightH <= 23) && (nightM >= 0 && nightM <= 59))
 80045e0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80045e4:	f103 0313 	add.w	r3, r3, #19
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b17      	cmp	r3, #23
 80045ec:	d854      	bhi.n	8004698 <decodeDayNightConfigs+0x494>
 80045ee:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80045f2:	f103 0312 	add.w	r3, r3, #18
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b3b      	cmp	r3, #59	@ 0x3b
 80045fa:	d84d      	bhi.n	8004698 <decodeDayNightConfigs+0x494>
 80045fc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004600:	f103 0311 	add.w	r3, r3, #17
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b17      	cmp	r3, #23
 8004608:	d846      	bhi.n	8004698 <decodeDayNightConfigs+0x494>
 800460a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800460e:	f103 0310 	add.w	r3, r3, #16
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b3b      	cmp	r3, #59	@ 0x3b
 8004616:	d83f      	bhi.n	8004698 <decodeDayNightConfigs+0x494>
			{
				// KCS fix this
				decodedBusHours.DayNightSwitchEnabled = true;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3ff0 	strb.w	r3, [r7, #4080]	@ 0xff0
				decodedBusHours.dayTime.hours = dayH;
 800461e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004622:	f103 0313 	add.w	r3, r3, #19
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	f887 3ff1 	strb.w	r3, [r7, #4081]	@ 0xff1
				decodedBusHours.dayTime.minutes = dayM;
 800462c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8004630:	f103 0312 	add.w	r3, r3, #18
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f887 3ff2 	strb.w	r3, [r7, #4082]	@ 0xff2
				decodedBusHours.nightTime.hours = nightH;
 800463a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800463e:	f103 0311 	add.w	r3, r3, #17
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	f887 3ff3 	strb.w	r3, [r7, #4083]	@ 0xff3
				decodedBusHours.nightTime.minutes = nightM;
 8004648:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800464c:	f103 0310 	add.w	r3, r3, #16
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	f887 3ff4 	strb.w	r3, [r7, #4084]	@ 0xff4
				setBusinessHours(decodedBusHours);
 8004656:	f507 637f 	add.w	r3, r7, #4080	@ 0xff0
 800465a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800465e:	f7ff fd19 	bl	8004094 <setBusinessHours>

				// KCS configuration should no longer contain dayTime/Nighttime switching enable; should be individual modes
				PRINTF("Values for hours and minutes; Day Hours %02d:%02d, Night Hours %02d:%02d, Version is %d\r\n", decodedBusHours.dayTime.hours, decodedBusHours.dayTime.minutes, decodedBusHours.nightTime.hours, decodedBusHours.nightTime.minutes, version);
 8004662:	f897 3ff1 	ldrb.w	r3, [r7, #4081]	@ 0xff1
 8004666:	4618      	mov	r0, r3
 8004668:	f897 3ff2 	ldrb.w	r3, [r7, #4082]	@ 0xff2
 800466c:	461c      	mov	r4, r3
 800466e:	f897 3ff3 	ldrb.w	r3, [r7, #4083]	@ 0xff3
 8004672:	461a      	mov	r2, r3
 8004674:	f897 3ff4 	ldrb.w	r3, [r7, #4084]	@ 0xff4
 8004678:	4619      	mov	r1, r3
 800467a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800467e:	f103 0314 	add.w	r3, r3, #20
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	9101      	str	r1, [sp, #4]
 8004688:	9200      	str	r2, [sp, #0]
 800468a:	4623      	mov	r3, r4
 800468c:	4602      	mov	r2, r0
 800468e:	4911      	ldr	r1, [pc, #68]	@ (80046d4 <decodeDayNightConfigs+0x4d0>)
 8004690:	2001      	movs	r0, #1
 8004692:	f002 fb6f 	bl	8006d74 <TraceSend>
			if((dayH >= 0 && dayH <=  23) && (dayM >= 0 && dayM <= 59) && (nightH >= 0 && nightH <= 23) && (nightM >= 0 && nightM <= 59))
 8004696:	e012      	b.n	80046be <decodeDayNightConfigs+0x4ba>

			}
			else
			{
				PRINTF("Values for hours and minutes in day night configs are out of range\r\n");
 8004698:	490f      	ldr	r1, [pc, #60]	@ (80046d8 <decodeDayNightConfigs+0x4d4>)
 800469a:	2001      	movs	r0, #1
 800469c:	f002 fb6a 	bl	8006d74 <TraceSend>
			if((dayH >= 0 && dayH <=  23) && (dayM >= 0 && dayM <= 59) && (nightH >= 0 && nightH <= 23) && (nightM >= 0 && nightM <= 59))
 80046a0:	e00d      	b.n	80046be <decodeDayNightConfigs+0x4ba>
			}
		}
		else
		{
			PRINTF("Invalid parsing of day night configs, valid day is %d and valid night is %d\r\n", validDay, validNight);
 80046a2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80046a6:	f103 0316 	add.w	r3, r3, #22
 80046aa:	781a      	ldrb	r2, [r3, #0]
 80046ac:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80046b0:	f103 0315 	add.w	r3, r3, #21
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4909      	ldr	r1, [pc, #36]	@ (80046dc <decodeDayNightConfigs+0x4d8>)
 80046b8:	2001      	movs	r0, #1
 80046ba:	f002 fb5b 	bl	8006d74 <TraceSend>
		}
	} //End of big if subStr
	return isError;
 80046be:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80046c2:	f103 0317 	add.w	r3, r3, #23
 80046c6:	781b      	ldrb	r3, [r3, #0]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	0802c814 	.word	0x0802c814
 80046d8:	0802c870 	.word	0x0802c870
 80046dc:	0802c8b8 	.word	0x0802c8b8

080046e0 <dayNightConfigStr>:

char* dayNightConfigStr()
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af04      	add	r7, sp, #16
	static char buffer[DOWNLINK_TEST_MSG_SIZE] = " ";
	bool valid = false;
 80046e6:	2300      	movs	r3, #0
 80046e8:	71fb      	strb	r3, [r7, #7]

	int buffSize = snprintf(buffer, DOWNLINK_TEST_MSG_SIZE, "\"day_night\":{\"version\":%u,\"day_start_time\":\"%02u:%02u\",\"night_start_time\":\"%02u:%02u\"}",
			privateBusiness.DayNightSwitchEnabled,privateBusiness.dayTime.hours, privateBusiness.dayTime.minutes, privateBusiness.nightTime.hours, privateBusiness.nightTime.minutes);
 80046ea:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <dayNightConfigStr+0x60>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
	int buffSize = snprintf(buffer, DOWNLINK_TEST_MSG_SIZE, "\"day_night\":{\"version\":%u,\"day_start_time\":\"%02u:%02u\",\"night_start_time\":\"%02u:%02u\"}",
 80046ee:	461c      	mov	r4, r3
			privateBusiness.DayNightSwitchEnabled,privateBusiness.dayTime.hours, privateBusiness.dayTime.minutes, privateBusiness.nightTime.hours, privateBusiness.nightTime.minutes);
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <dayNightConfigStr+0x60>)
 80046f2:	785b      	ldrb	r3, [r3, #1]
	int buffSize = snprintf(buffer, DOWNLINK_TEST_MSG_SIZE, "\"day_night\":{\"version\":%u,\"day_start_time\":\"%02u:%02u\",\"night_start_time\":\"%02u:%02u\"}",
 80046f4:	461a      	mov	r2, r3
			privateBusiness.DayNightSwitchEnabled,privateBusiness.dayTime.hours, privateBusiness.dayTime.minutes, privateBusiness.nightTime.hours, privateBusiness.nightTime.minutes);
 80046f6:	4b12      	ldr	r3, [pc, #72]	@ (8004740 <dayNightConfigStr+0x60>)
 80046f8:	789b      	ldrb	r3, [r3, #2]
	int buffSize = snprintf(buffer, DOWNLINK_TEST_MSG_SIZE, "\"day_night\":{\"version\":%u,\"day_start_time\":\"%02u:%02u\",\"night_start_time\":\"%02u:%02u\"}",
 80046fa:	4619      	mov	r1, r3
			privateBusiness.DayNightSwitchEnabled,privateBusiness.dayTime.hours, privateBusiness.dayTime.minutes, privateBusiness.nightTime.hours, privateBusiness.nightTime.minutes);
 80046fc:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <dayNightConfigStr+0x60>)
 80046fe:	78db      	ldrb	r3, [r3, #3]
	int buffSize = snprintf(buffer, DOWNLINK_TEST_MSG_SIZE, "\"day_night\":{\"version\":%u,\"day_start_time\":\"%02u:%02u\",\"night_start_time\":\"%02u:%02u\"}",
 8004700:	4618      	mov	r0, r3
			privateBusiness.DayNightSwitchEnabled,privateBusiness.dayTime.hours, privateBusiness.dayTime.minutes, privateBusiness.nightTime.hours, privateBusiness.nightTime.minutes);
 8004702:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <dayNightConfigStr+0x60>)
 8004704:	791b      	ldrb	r3, [r3, #4]
	int buffSize = snprintf(buffer, DOWNLINK_TEST_MSG_SIZE, "\"day_night\":{\"version\":%u,\"day_start_time\":\"%02u:%02u\",\"night_start_time\":\"%02u:%02u\"}",
 8004706:	9303      	str	r3, [sp, #12]
 8004708:	9002      	str	r0, [sp, #8]
 800470a:	9101      	str	r1, [sp, #4]
 800470c:	9200      	str	r2, [sp, #0]
 800470e:	4623      	mov	r3, r4
 8004710:	4a0c      	ldr	r2, [pc, #48]	@ (8004744 <dayNightConfigStr+0x64>)
 8004712:	21fa      	movs	r1, #250	@ 0xfa
 8004714:	480c      	ldr	r0, [pc, #48]	@ (8004748 <dayNightConfigStr+0x68>)
 8004716:	f022 fc49 	bl	8026fac <sniprintf>
 800471a:	6038      	str	r0, [r7, #0]

	if(buffSize > 0 && buffSize < DOWNLINK_TEST_MSG_SIZE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	dd04      	ble.n	800472c <dayNightConfigStr+0x4c>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2bf9      	cmp	r3, #249	@ 0xf9
 8004726:	dc01      	bgt.n	800472c <dayNightConfigStr+0x4c>
	{
		valid = true;
 8004728:	2301      	movs	r3, #1
 800472a:	71fb      	strb	r3, [r7, #7]
	}

	if(valid)
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <dayNightConfigStr+0x56>
	{
		return buffer;
 8004732:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <dayNightConfigStr+0x68>)
 8004734:	e000      	b.n	8004738 <dayNightConfigStr+0x58>
	}
	else
	{
		return "Failed to build Day/Night test Configure String";
 8004736:	4b05      	ldr	r3, [pc, #20]	@ (800474c <dayNightConfigStr+0x6c>)
	}
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bd90      	pop	{r4, r7, pc}
 8004740:	20017684 	.word	0x20017684
 8004744:	0802c94c 	.word	0x0802c94c
 8004748:	20000258 	.word	0x20000258
 800474c:	0802c9a4 	.word	0x0802c9a4

08004750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004754:	f3bf 8f4f 	dsb	sy
}
 8004758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <__NVIC_SystemReset+0x24>)
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004762:	4904      	ldr	r1, [pc, #16]	@ (8004774 <__NVIC_SystemReset+0x24>)
 8004764:	4b04      	ldr	r3, [pc, #16]	@ (8004778 <__NVIC_SystemReset+0x28>)
 8004766:	4313      	orrs	r3, r2
 8004768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800476a:	f3bf 8f4f 	dsb	sy
}
 800476e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004770:	bf00      	nop
 8004772:	e7fd      	b.n	8004770 <__NVIC_SystemReset+0x20>
 8004774:	e000ed00 	.word	0xe000ed00
 8004778:	05fa0004 	.word	0x05fa0004

0800477c <PACKAGE_Init>:
/******************************************************
 Data_Ptr Initialize
 MEM_PTR constructor
 ******************************************************/
void PACKAGE_Init ( MEM_PTR *Data_Ptr )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	_Page = 0;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800478a:	461a      	mov	r2, r3
 800478c:	2300      	movs	r3, #0
 800478e:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	_Shift = 0;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	_Size = 1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80047a4:	461a      	mov	r2, r3
 80047a6:	2301      	movs	r3, #1
 80047a8:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	_State = DEFAULT_STATE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80047b2:	461a      	mov	r2, r3
 80047b4:	2380      	movs	r3, #128	@ 0x80
 80047b6:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	_Init_Flags = SYS_INIT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80047c0:	22ff      	movs	r2, #255	@ 0xff
 80047c2:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

	_Temp_Device_ID = 0;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
	_Temperature = Default_Temperature;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80047d8:	22ff      	movs	r2, #255	@ 0xff
 80047da:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
	_Humidity = Default_Humidity;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80047e4:	22ff      	movs	r2, #255	@ 0xff
 80047e6:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
	//	_Acce_Device_ID = 0;
	//	_X_Axis = Default_X_Axis;
	//	_Y_Axis = Default_Y_Axis;
	//	_Z_Axis = Default_Z_Axis;

	mqttDataAvailable = false;
 80047ea:	4b20      	ldr	r3, [pc, #128]	@ (800486c <PACKAGE_Init+0xf0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
	Clear_Memory ( Data_Ptr );
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 ff46 	bl	8006682 <Clear_Memory>
	clearShadowMemory();
 80047f6:	f00e fd21 	bl	801323c <clearShadowMemory>
	memory_Init(Data_Ptr );
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f83a 	bl	8004874 <memory_Init>

	Clear_Command ( Data_Ptr );
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f00c faf7 	bl	8010df4 <Clear_Command>
	gpsClearLocation();
 8004806:	f006 f921 	bl	800aa4c <gpsClearLocation>
	clearOTAFlashArray ( Data_Ptr );
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 ff76 	bl	80066fc <clearOTAFlashArray>

	buf = 0;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004816:	461a      	mov	r2, r3
 8004818:	2300      	movs	r3, #0
 800481a:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	//	gpsHbItteration = 0;
	_Pointer = 0;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004824:	461a      	mov	r2, r3
 8004826:	2300      	movs	r3, #0
 8004828:	f8c2 3364 	str.w	r3, [r2, #868]	@ 0x364
	Data_Ptr->Mode = START_MODE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308

#ifdef SKYWIRE_MODEM
	CELL_Set_PDP ( PDP_NOT_SET );
 8004838:	2001      	movs	r0, #1
 800483a:	f00c fb19 	bl	8010e70 <CELL_Set_PDP>
#endif // SKYWIRE_MODEM
	// Added charger detect, subtracted GPS update for Gage demo
	_State = CHARGER_DETECT + WAKE_STATE + PIC_UPDT + UPDATE_SERVER + ACCEL_UPDT + GPS_UPDT + BUZZER_TOGGLE; //main flags
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004844:	461a      	mov	r2, r3
 8004846:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <PACKAGE_Init+0xf4>)
 8004848:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	//	_State = WAKE_STATE + PIC_UPDT + UPDATE_SERVER + GPS_UPDT + ACCEL_UPDT + HUMD_UPDT + TEMP_UPDT + BUZZER_TOGGLE;
	//	_State = WAKE_STATE + PIC_UPDT + PIC_SEND + PIR_UPDT + PIR_START + GPS_UPDT + BUZZER_TOGGLE;
	//	_State = WAKE_STATE + PIC_UPDT;
	//	_State = SLEEP_STATE;

	_Init_Flags = XPS_INIT + TEMP_INIT + ACCEL_INIT + CAM_INIT + PIR_INIT;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004852:	225d      	movs	r2, #93	@ 0x5d
 8004854:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
	_Setting = LOG_LEVEL_1 + LOG_LEVEL_2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800485e:	2206      	movs	r2, #6
 8004860:	f883 2361 	strb.w	r2, [r3, #865]	@ 0x361
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	2007a271 	.word	0x2007a271
 8004870:	00606281 	.word	0x00606281

08004874 <memory_Init>:

void memory_Init (MEM_PTR *Data_Ptr )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b090      	sub	sp, #64	@ 0x40
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	bool defaultSet = false;
 800487c:	2300      	movs	r3, #0
 800487e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	readDataValidFromFlash(Data_Ptr );
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f00e fe24 	bl	80134d0 <readDataValidFromFlash>
	// check if data good
	if (getDataValid())
 8004888:	f00e fe7a 	bl	8013580 <getDataValid>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <memory_Init+0x2c>
	{
		readParamDataFromFlash(Data_Ptr); // populate shadow RAM
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f00e fdc4 	bl	8013420 <readParamDataFromFlash>
		// get all parameters
		XPS_paramRetrieve(Data_Ptr);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f00e fed3 	bl	8013644 <XPS_paramRetrieve>
 800489e:	e06d      	b.n	800497c <memory_Init+0x108>
	}
	else
	{
		dayNightInit();       //Initialize business hours
 80048a0:	f7ff fbb2 	bl	8004008 <dayNightInit>
		gpsParametersInit();  //Initialize GPS status parameters
 80048a4:	f004 ff9e 	bl	80097e4 <gpsParametersInit>
		gpsDataInit();        //Initialize GPS data
 80048a8:	f004 ffba 	bl	8009820 <gpsDataInit>
		pirDataInit();        //Initialize PIR data
 80048ac:	f006 feba 	bl	800b624 <pirDataInit>
		accelDataInit(); //Initialize accelerometer data
 80048b0:	f7fc fc0a 	bl	80010c8 <accelDataInit>
		accelParametersInit(); //Initialize accelerometer parameters
 80048b4:	f7fc fc20 	bl	80010f8 <accelParametersInit>
		cameraParametersInit();
 80048b8:	f7fd fa18 	bl	8001cec <cameraParametersInit>

		if ( latencyMin )
 80048bc:	4b6c      	ldr	r3, [pc, #432]	@ (8004a70 <memory_Init+0x1fc>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <memory_Init+0x54>
			//			pirData.nightTime.Motion_Blackout = 5;
			//			pirData.nightTime.No_Motion_Detection_Window =  2;
		}
		else
		{
			pirParametersInit();  //Initialize PIR Filter parameters
 80048c4:	f006 feca 	bl	800b65c <pirParametersInit>
		}

		Data_Ptr->buzzerData.Single_Repeat = 2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
		Data_Ptr->buzzerData.Single_Length = 0x00001000;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80048da:	461a      	mov	r2, r3
 80048dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048e0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
		Data_Ptr->buzzerData.Single_Delay = 0x00003900;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80048ea:	461a      	mov	r2, r3
 80048ec:	f44f 5364 	mov.w	r3, #14592	@ 0x3900
 80048f0:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
		Data_Ptr->buzzerData.Cycles_Repeat = 0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
		Data_Ptr->buzzerData.Cycles_Length = 0x00001000;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004906:	461a      	mov	r2, r3
 8004908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800490c:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
		Data_Ptr->buzzerData.Cycles_Delay = 0x00001000;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004916:	461a      	mov	r2, r3
 8004918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800491c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
		Data_Ptr->buzzerData.Start_Delay = 100;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004926:	461a      	mov	r2, r3
 8004928:	2364      	movs	r3, #100	@ 0x64
 800492a:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124
		Data_Ptr->buzzerData.State = Short;    //GageDemo
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004934:	2200      	movs	r2, #0
 8004936:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
		Data_Ptr->buzzerData.Control = 0;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004940:	2200      	movs	r2, #0
 8004942:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f

		//	Data_Ptr->Temperature_Data.Timer = 0xFFF;
		Data_Ptr->Temperature_Data.Failed_Temperature_ID_Check = 0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
		Data_Ptr->Temperature_Data.Default_Temperature_Timer = 0;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2111 	strb.w	r2, [r3, #273]	@ 0x111

		//Data_Ptr->heartBeatData.modemWarmUp = MODEM_WARM_DEFAULT;
		// KCS call sensor parameter initialize default function (to be written)
		//thSensorParams.sensorWarmUp = SENSOR_WARM_DEFAULT;

		Data_Ptr->Flash.Page = 0;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	605a      	str	r2, [r3, #4]
		Data_Ptr->Flash.Index = 0;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
		Data_Ptr->Flash.Total_Size = 0;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	819a      	strh	r2, [r3, #12]
		Data_Ptr->Flash.currentFlashBank = BANK1;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
		defaultSet = true;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	// KCS these functions should be in GPS.c file
	//Check each section critical parameter and if param is 0, initialize all parameters for that section
	GPS_PARAMETER_TYPE localGpsCheck;
	getGpsParameters(&localGpsCheck);
 800497c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004980:	4618      	mov	r0, r3
 8004982:	f004 ff8f 	bl	80098a4 <getGpsParameters>
	if(localGpsCheck.gpsInterval == 0)
 8004986:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <memory_Init+0x126>
	{
		gpsParametersInit(); //Initialize GPS status parameters
 800498c:	f004 ff2a 	bl	80097e4 <gpsParametersInit>
		gpsDataInit(); //Initialize GPS data
 8004990:	f004 ff46 	bl	8009820 <gpsDataInit>
		defaultSet = true;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	ACCELERATION_PARAM_TYPE localAccCheck;
	getAccelParameters(&localAccCheck);
 800499a:	f107 0320 	add.w	r3, r7, #32
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd f81c 	bl	80019dc <getAccelParameters>
	if(localAccCheck.mutePeriod == 0)
 80049a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d106      	bne.n	80049b8 <memory_Init+0x144>
	{
		accelDataInit(); //Initialize accelerometer data
 80049aa:	f7fc fb8d 	bl	80010c8 <accelDataInit>
		accelParametersInit(); //Initialize accelerometer parameters
 80049ae:	f7fc fba3 	bl	80010f8 <accelParametersInit>
		defaultSet = true;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	BUSINESS_DATA_TYPE localDayNightCheck;
	getBusinessHours(&localDayNightCheck);
 80049b8:	f107 0318 	add.w	r3, r7, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fb41 	bl	8004044 <getBusinessHours>
	if(localDayNightCheck.dayTime.hours == 0 && localDayNightCheck.nightTime.hours == 0)
 80049c2:	7e7b      	ldrb	r3, [r7, #25]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <memory_Init+0x164>
 80049c8:	7efb      	ldrb	r3, [r7, #27]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <memory_Init+0x164>
	{
		dayNightInit(); //Initialize business hours
 80049ce:	f7ff fb1b 	bl	8004008 <dayNightInit>
		defaultSet = true;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	// KCS these functions should be in PIR.c file
	PIR_PARAMETER_TYPE localPirCheck;
	getPirParameters(&localPirCheck);
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	4618      	mov	r0, r3
 80049de:	f006 fe89 	bl	800b6f4 <getPirParameters>
	if(localPirCheck.coolDown == 0)
 80049e2:	8afb      	ldrh	r3, [r7, #22]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <memory_Init+0x186>
	{
		PRINTF("No PIR information in XPS, setting to default\r\n");
 80049e8:	4922      	ldr	r1, [pc, #136]	@ (8004a74 <memory_Init+0x200>)
 80049ea:	2001      	movs	r0, #1
 80049ec:	f002 f9c2 	bl	8006d74 <TraceSend>
		pirParametersInit();//Initialize PIR parameters
 80049f0:	f006 fe34 	bl	800b65c <pirParametersInit>
		defaultSet = true;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(Data_Ptr->heartBeatData.hbInterval == 0)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004a00:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d113      	bne.n	8004a30 <memory_Init+0x1bc>
	{
		PRINTF("No HB information, setting to default\r\n");
 8004a08:	491b      	ldr	r1, [pc, #108]	@ (8004a78 <memory_Init+0x204>)
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f002 f9b2 	bl	8006d74 <TraceSend>
		Data_Ptr->heartBeatData.hbInterval = DEFAULT_HB;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004a16:	f64a 02c0 	movw	r2, #43200	@ 0xa8c0
 8004a1a:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
		Data_Ptr->heartBeatData.mode = DEFAULT_HB_MODE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004a24:	2203      	movs	r2, #3
 8004a26:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
		defaultSet = true;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	//KCS add Camera param check
	CAMERA_PARAMETER_TYPE localCamCheck;
	getCameraParameters(&localCamCheck);
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd f977 	bl	8001d28 <getCameraParameters>
	if(localCamCheck.warmUp == 0)
 8004a3a:	7b7b      	ldrb	r3, [r7, #13]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d108      	bne.n	8004a52 <memory_Init+0x1de>
	{
		PRINTF("No Camera info found, setting to default \r\n");
 8004a40:	490e      	ldr	r1, [pc, #56]	@ (8004a7c <memory_Init+0x208>)
 8004a42:	2001      	movs	r0, #1
 8004a44:	f002 f996 	bl	8006d74 <TraceSend>
		cameraParametersInit();
 8004a48:	f7fd f950 	bl	8001cec <cameraParametersInit>
		defaultSet = true;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	if(defaultSet)
 8004a52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d005      	beq.n	8004a66 <memory_Init+0x1f2>
	{
		XPS_paramStore(Data_Ptr);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f00e ffe8 	bl	8013a30 <XPS_paramStore>
		saveParamDataToFlash(Data_Ptr);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f00e fc8f 	bl	8013384 <saveParamDataToFlash>
	}
}
 8004a66:	bf00      	nop
 8004a68:	3740      	adds	r7, #64	@ 0x40
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200bbb7c 	.word	0x200bbb7c
 8004a74:	0802c9d4 	.word	0x0802c9d4
 8004a78:	0802ca04 	.word	0x0802ca04
 8004a7c:	0802ca2c 	.word	0x0802ca2c

08004a80 <Component_Initalizer>:
 Initializer
 This functions resets and recalls any component
 that has a fail status
 ******************************************************/
void Component_Initalizer ( MEM_PTR *Data_Ptr )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	//	HAL_NVIC_DisableIRQ ( PIR_EXTI_IRQn );	// Turn off event
	cameraPowerControl (false);
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f001 fc2b 	bl	80062e4 <cameraPowerControl>

	if ( _State == DEFAULT_STATE )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004a94:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004a98:	2b80      	cmp	r3, #128	@ 0x80
 8004a9a:	d13e      	bne.n	8004b1a <Component_Initalizer+0x9a>
	{
		Refresh_Watchdog;
 8004a9c:	48ad      	ldr	r0, [pc, #692]	@ (8004d54 <Component_Initalizer+0x2d4>)
 8004a9e:	f016 fb98 	bl	801b1d2 <HAL_IWDG_Refresh>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <Component_Initalizer+0x2c>
 8004aa8:	f010 fe74 	bl	8015794 <Error_Handler>
		HAL_Delay ( 1000 );
 8004aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ab0:	f011 fce8 	bl	8016484 <HAL_Delay>
		_State = DEVICE_LISTEN;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004aba:	461a      	mov	r2, r3
 8004abc:	2304      	movs	r3, #4
 8004abe:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		_State |= WAKE_STATE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004ac8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8004ad6:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

#ifdef Log_Level_1
		_Setting |= LOG_LEVEL_1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004ae0:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004af0:	f883 2361 	strb.w	r2, [r3, #865]	@ 0x361

#ifdef Log_2_Start
		_Setting |= LOG_LEVEL_2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004afa:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8004afe:	f043 0304 	orr.w	r3, r3, #4
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b0a:	f883 2361 	strb.w	r2, [r3, #865]	@ 0x361
#endif // Log_2_Start
		Write_Log ( LOG_INITIALIZE );
 8004b0e:	4892      	ldr	r0, [pc, #584]	@ (8004d58 <Component_Initalizer+0x2d8>)
 8004b10:	f002 f80c 	bl	8006b2c <Write_Log>
		Write_Log ( LOG_TAIL );
 8004b14:	4891      	ldr	r0, [pc, #580]	@ (8004d5c <Component_Initalizer+0x2dc>)
 8004b16:	f002 f809 	bl	8006b2c <Write_Log>
#endif  //Log_Level_1
	}

	if ( _Init_Flags & XPS_INIT )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b20:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01e      	beq.n	8004b6a <Component_Initalizer+0xea>
	{
		_Init_Flags ^= XPS_INIT;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b32:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004b36:	f083 0301 	eor.w	r3, r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b42:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

#ifdef Log_Level_0
		Log_Single ( XPS_INIT_MSG );
 8004b46:	4886      	ldr	r0, [pc, #536]	@ (8004d60 <Component_Initalizer+0x2e0>)
 8004b48:	f001 ffb0 	bl	8006aac <Log_Single>
#endif // Log_Level_0

		XPS_Set_Command ( SETTLE );
 8004b4c:	2007      	movs	r0, #7
 8004b4e:	f00f ffe1 	bl	8014b14 <XPS_Set_Command>
		XPS_COMMAND ( Data_Ptr );
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f00f f968 	bl	8013e28 <XPS_COMMAND>

		if (XPS_Get_State () != XPS_OK)
 8004b58:	f00f ffec 	bl	8014b34 <XPS_Get_State>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <Component_Initalizer+0xea>
		{
			PRINTF("External Flash Memory Failed!\r\n");
 8004b62:	4980      	ldr	r1, [pc, #512]	@ (8004d64 <Component_Initalizer+0x2e4>)
 8004b64:	2001      	movs	r0, #1
 8004b66:	f002 f905 	bl	8006d74 <TraceSend>
		}
	}

	if ( _Init_Flags & CELL_INIT )
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b70:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d024      	beq.n	8004bc6 <Component_Initalizer+0x146>
	{
		_Init_Flags ^= CELL_INIT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b82:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004b86:	f083 0302 	eor.w	r3, r3, #2
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004b92:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

#ifdef SKYWIRE_MODEM
		//		CELL_Set_Command ( DISABLEQI );
		//		CELL_COMMAND ( Data_Ptr );

		CELL_Init ( Data_Ptr );
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f007 fc86 	bl	800c4a8 <CELL_Init>

		if ( CELL_Get_State () != CELL_OK )
 8004b9c:	f00c f97a 	bl	8010e94 <CELL_Get_State>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <Component_Initalizer+0x146>
		{
			CELL_HARDWARE_RESET ( Data_Ptr );
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f002 fb88 	bl	80072bc <CELL_HARDWARE_RESET>
			_Init_Flags |= CELL_INIT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004bb2:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004bb6:	f043 0302 	orr.w	r3, r3, #2
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004bc2:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
		}
#endif  //SKYWIRE_MODEM
	}

	if ( _Init_Flags & TEMP_INIT )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004bcc:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d011      	beq.n	8004bfc <Component_Initalizer+0x17c>
	{
		_Init_Flags ^= TEMP_INIT;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004bde:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004be2:	f083 0304 	eor.w	r3, r3, #4
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004bee:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

		tempInit();
 8004bf2:	f00e f987 	bl	8012f04 <tempInit>
#ifdef Log_Level_0
		Log_Single ( TEM_INIT_MSG );
 8004bf6:	485c      	ldr	r0, [pc, #368]	@ (8004d68 <Component_Initalizer+0x2e8>)
 8004bf8:	f001 ff58 	bl	8006aac <Log_Single>
#ifdef TEMPERATURE_SENSOR
		//TEM_Init ( Data_Ptr );
#endif // TEMPERATURE_SENSOR
	}

	if ( _Init_Flags & ACCEL_INIT )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c02:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00f      	beq.n	8004c2e <Component_Initalizer+0x1ae>
	{
		_Init_Flags ^= ACCEL_INIT;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c14:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004c18:	f083 0308 	eor.w	r3, r3, #8
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c24:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
#ifdef Log_Level_0
		Log_Single ( ACC_INIT_MSG );
 8004c28:	4850      	ldr	r0, [pc, #320]	@ (8004d6c <Component_Initalizer+0x2ec>)
 8004c2a:	f001 ff3f 	bl	8006aac <Log_Single>
#endif // Log_Level_0
	}

	if ( _Init_Flags & CAM_INIT )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c34:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01f      	beq.n	8004c80 <Component_Initalizer+0x200>
	{
		_Init_Flags ^= CAM_INIT;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c46:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004c4a:	f083 0310 	eor.w	r3, r3, #16
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c56:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

#ifdef Log_Level_0
		Log_Single ( CAM_INIT_MSG );
 8004c5a:	4845      	ldr	r0, [pc, #276]	@ (8004d70 <Component_Initalizer+0x2f0>)
 8004c5c:	f001 ff26 	bl	8006aac <Log_Single>
#endif // Log_Level_0

#ifdef Camera

		getCameraParameters(&cameraParameters);
 8004c60:	4844      	ldr	r0, [pc, #272]	@ (8004d74 <Component_Initalizer+0x2f4>)
 8004c62:	f7fd f861 	bl	8001d28 <getCameraParameters>
		PRINTF("Camera mode is %d\r\n", cameraParameters.mode);
 8004c66:	4b43      	ldr	r3, [pc, #268]	@ (8004d74 <Component_Initalizer+0x2f4>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4942      	ldr	r1, [pc, #264]	@ (8004d78 <Component_Initalizer+0x2f8>)
 8004c6e:	2001      	movs	r0, #1
 8004c70:	f002 f880 	bl	8006d74 <TraceSend>
//		cameraParameters.mode = 1;//testing

		if (cameraParameters.mode != 0)
 8004c74:	4b3f      	ldr	r3, [pc, #252]	@ (8004d74 <Component_Initalizer+0x2f4>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <Component_Initalizer+0x200>
		{
			cameraInitialize();
 8004c7c:	f7ff f82c 	bl	8003cd8 <cameraInitialize>
		}

#endif // Camera
	}

	if ( _Init_Flags & PIR_INIT )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c86:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d011      	beq.n	8004cb6 <Component_Initalizer+0x236>
	{
		_Init_Flags ^= PIR_INIT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004c98:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004c9c:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004ca8:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

#ifdef Log_Level_0
		Log_Single ( PIR_INIT_MSG );
 8004cac:	4833      	ldr	r0, [pc, #204]	@ (8004d7c <Component_Initalizer+0x2fc>)
 8004cae:	f001 fefd 	bl	8006aac <Log_Single>
#endif // Log_Level_0

		pirDataInit();
 8004cb2:	f006 fcb7 	bl	800b624 <pirDataInit>
	}

	if ( _Init_Flags & INTERRUPT_INIT )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004cbc:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d016      	beq.n	8004cf6 <Component_Initalizer+0x276>
	{
		_Init_Flags ^= INTERRUPT_INIT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004cce:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8004cd2:	f083 0320 	eor.w	r3, r3, #32
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004cde:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360

#ifdef SKYWIRE_MODEM
		HAL_UART_Receive_IT ( &hlpuart1 , _Memory , 1 );
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004ce8:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8004cec:	2201      	movs	r2, #1
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4823      	ldr	r0, [pc, #140]	@ (8004d80 <Component_Initalizer+0x300>)
 8004cf2:	f01d ff29 	bl	8022b48 <HAL_UART_Receive_IT>
#endif // SKYWIRE_MODEM
	}

	if(_State & GPS_UPDT)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004cfc:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004d00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01c      	beq.n	8004d42 <Component_Initalizer+0x2c2>
	{
		_State ^= GPS_UPDT;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004d0e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004d12:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8004d1c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		Enable_Modem_PWR(Data_Ptr);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 fa1d 	bl	8006160 <Enable_Modem_PWR>
		//Set this parameter for Active if necessary
		bool passiveAntenna = true;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
		if(passiveAntenna)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <Component_Initalizer+0x2b6>
		{
			GPSActiveAntennaON(Data_Ptr);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f005 ff0b 	bl	800ab4c <GPSActiveAntennaON>
		}
		EnableGPSXtraFunctionality(Data_Ptr);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f005 ff3e 	bl	800abb8 <EnableGPSXtraFunctionality>
		getGPS( Data_Ptr);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f005 ffa3 	bl	800ac88 <getGPS>
	}

	accelInit();
 8004d42:	f7fc f971 	bl	8001028 <accelInit>
	handleAccelTrigger();
 8004d46:	f7fc fe8d 	bl	8001a64 <handleAccelTrigger>
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	2007d0bc 	.word	0x2007d0bc
 8004d58:	0802ca58 	.word	0x0802ca58
 8004d5c:	0802ca74 	.word	0x0802ca74
 8004d60:	0802ca78 	.word	0x0802ca78
 8004d64:	0802caa8 	.word	0x0802caa8
 8004d68:	0802cac8 	.word	0x0802cac8
 8004d6c:	0802caf8 	.word	0x0802caf8
 8004d70:	0802cb28 	.word	0x0802cb28
 8004d74:	2007a264 	.word	0x2007a264
 8004d78:	0802cb58 	.word	0x0802cb58
 8004d7c:	0802cb6c 	.word	0x0802cb6c
 8004d80:	2007d1c0 	.word	0x2007d1c0

08004d84 <Update_State>:
/******************************************************
 State Update Function
 Updates device based on toggled flags
 ******************************************************/
void Update_State ( MEM_PTR *Data_Ptr )
{
 8004d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d86:	b093      	sub	sp, #76	@ 0x4c
 8004d88:	af0c      	add	r7, sp, #48	@ 0x30
 8004d8a:	6078      	str	r0, [r7, #4]
	PRINTF("Entering Update_State; State is %lu\r\n",_State );
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004d92:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004d96:	461a      	mov	r2, r3
 8004d98:	49a4      	ldr	r1, [pc, #656]	@ (800502c <Update_State+0x2a8>)
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	f001 ffea 	bl	8006d74 <TraceSend>
	if ( _State & SLEEP_STATE )
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004da6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 83ad 	beq.w	800550e <Update_State+0x78a>
	{
		PRINTF("Update_State includes SLEEP\r\n");
 8004db4:	499e      	ldr	r1, [pc, #632]	@ (8005030 <Update_State+0x2ac>)
 8004db6:	2001      	movs	r0, #1
 8004db8:	f001 ffdc 	bl	8006d74 <TraceSend>
		_State ^= SLEEP_STATE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004dc2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004dc6:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8004dd0:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		//HAL_PWR_EnableWakeUpPin ( INT1_SLEEP_WAKE_PIN );
		//HAL_PWR_EnableWakeUpPin ( INT2_SLEEP_WAKE_PIN );
		//HAL_PWR_EnableWakeUpPin ( PIR_SLEEP_WAKE_PIN );
		//HAL_UART_AbortReceive_IT ( &hlpuart1 );   //Added by Gage

		if ( _State & CHARGER_DETECT )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004dda:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 8384 	beq.w	80054f0 <Update_State+0x76c>
		{
			PRINTF("Update_State includes SLEEP and CHARGER_DETECT\r\n");
 8004de8:	4992      	ldr	r1, [pc, #584]	@ (8005034 <Update_State+0x2b0>)
 8004dea:	2001      	movs	r0, #1
 8004dec:	f001 ffc2 	bl	8006d74 <TraceSend>
#ifdef Log_Level_0
			Log_Single ( LOG_IDLE_START );
 8004df0:	4891      	ldr	r0, [pc, #580]	@ (8005038 <Update_State+0x2b4>)
 8004df2:	f001 fe5b 	bl	8006aac <Log_Single>
			//				PRINTF("Day Minutes: %d\r\n", downlinkBusinessHours.Daytime.minutes);
			//				PRINTF("Night Hours: %d\r\n", downlinkBusinessHours.Nighttime.hours);
			//				PRINTF("Night Minutes: %d\r\n", downlinkBusinessHours.Nighttime.minutes);
			//			}

			if (!latencyMin)
 8004df6:	4b91      	ldr	r3, [pc, #580]	@ (800503c <Update_State+0x2b8>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f083 0301 	eor.w	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 818c 	beq.w	800511e <Update_State+0x39a>
			{
				HAL_GPIO_WritePin ( MEM_CS_GPIO_Port , MEM_CS_Pin , GPIO_PIN_SET );    //for simulated battery power operation
 8004e06:	2201      	movs	r2, #1
 8004e08:	2110      	movs	r1, #16
 8004e0a:	488d      	ldr	r0, [pc, #564]	@ (8005040 <Update_State+0x2bc>)
 8004e0c:	f015 f9c2 	bl	801a194 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin ( Cell_Enable_GPIO_Port , Cell_Enable_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e16:	488b      	ldr	r0, [pc, #556]	@ (8005044 <Update_State+0x2c0>)
 8004e18:	f015 f9bc 	bl	801a194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( Cell_DVS_GPIO_Port , Cell_DVS_Pin , GPIO_PIN_RESET );          //for simulated battery power operation
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e22:	4889      	ldr	r0, [pc, #548]	@ (8005048 <Update_State+0x2c4>)
 8004e24:	f015 f9b6 	bl	801a194 <HAL_GPIO_WritePin>

				//HAL_GPIO_WritePin ( Sky_Reset_GPIO_Port , Sky_Reset_Pin , GPIO_PIN_SET );          //for simulated battery power operation
				//HAL_GPIO_WritePin ( Sky_On_Off_Sw_GPIO_Port , Sky_On_Off_Sw_Pin , GPIO_PIN_SET );  //for simulated battery power operation
				HAL_GPIO_WritePin ( USB_Power_Switch_On_GPIO_Port , USB_Power_Switch_On_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	4886      	ldr	r0, [pc, #536]	@ (8005048 <Update_State+0x2c4>)
 8004e2e:	f015 f9b1 	bl	801a194 <HAL_GPIO_WritePin>
				cameraPowerControl(false);
 8004e32:	2000      	movs	r0, #0
 8004e34:	f001 fa56 	bl	80062e4 <cameraPowerControl>
				isModemPowered = false;
 8004e38:	4b84      	ldr	r3, [pc, #528]	@ (800504c <Update_State+0x2c8>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]

				XPS_Set_Command (SLEEP);
 8004e3e:	2006      	movs	r0, #6
 8004e40:	f00f fe68 	bl	8014b14 <XPS_Set_Command>
				XPS_COMMAND ( Data_Ptr );
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f00e ffef 	bl	8013e28 <XPS_COMMAND>
				//HAL_OSPI_Transmit( &hospi1 , (uint8_t*)185 , HAL_OSPI_TIMEOUT_DEFAULT_VALUE );
				Refresh_Watchdog;
 8004e4a:	4881      	ldr	r0, [pc, #516]	@ (8005050 <Update_State+0x2cc>)
 8004e4c:	f016 f9c1 	bl	801b1d2 <HAL_IWDG_Refresh>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <Update_State+0xd6>
 8004e56:	f010 fc9d 	bl	8015794 <Error_Handler>

				stop3Prepare();
 8004e5a:	f003 fe69 	bl	8008b30 <stop3Prepare>

				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_ALL);
 8004e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8005054 <Update_State+0x2d0>)
 8004e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	4b7b      	ldr	r3, [pc, #492]	@ (8005054 <Update_State+0x2d0>)
 8004e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e6c:	611a      	str	r2, [r3, #16]

				if(hbTimeChanged && !firstTimeBoot)
 8004e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8005058 <Update_State+0x2d4>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01c      	beq.n	8004eb0 <Update_State+0x12c>
 8004e76:	4b79      	ldr	r3, [pc, #484]	@ (800505c <Update_State+0x2d8>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	f083 0301 	eor.w	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <Update_State+0x12c>
				{
					HAL_RTC_GetTime ( &hrtc , &nextHB.rtcTime , RTC_FORMAT_BIN );
 8004e84:	2200      	movs	r2, #0
 8004e86:	4976      	ldr	r1, [pc, #472]	@ (8005060 <Update_State+0x2dc>)
 8004e88:	4876      	ldr	r0, [pc, #472]	@ (8005064 <Update_State+0x2e0>)
 8004e8a:	f01c f9c9 	bl	8021220 <HAL_RTC_GetTime>
					HAL_RTC_GetDate ( &hrtc , &nextHB.rtcDate , RTC_FORMAT_BIN );
 8004e8e:	2200      	movs	r2, #0
 8004e90:	4975      	ldr	r1, [pc, #468]	@ (8005068 <Update_State+0x2e4>)
 8004e92:	4874      	ldr	r0, [pc, #464]	@ (8005064 <Update_State+0x2e0>)
 8004e94:	f01c fabc 	bl	8021410 <HAL_RTC_GetDate>
					calculateNextTime( &nextHB, Data_Ptr->heartBeatData.hbInterval );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004e9e:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	486e      	ldr	r0, [pc, #440]	@ (8005060 <Update_State+0x2dc>)
 8004ea6:	f003 fc91 	bl	80087cc <calculateNextTime>
					hbTimeChanged = false;
 8004eaa:	4b6b      	ldr	r3, [pc, #428]	@ (8005058 <Update_State+0x2d4>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
				}

				if (timerTriggered || pIRTriggered || accelTriggered )
 8004eb0:	4b6e      	ldr	r3, [pc, #440]	@ (800506c <Update_State+0x2e8>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d107      	bne.n	8004ec8 <Update_State+0x144>
 8004eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8005070 <Update_State+0x2ec>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <Update_State+0x144>
 8004ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8005074 <Update_State+0x2f0>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d067      	beq.n	8004f98 <Update_State+0x214>
				{
					uint16_t wakeUp = 0;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	82bb      	strh	r3, [r7, #20]

					uint16_t HBwakeUp = getTimeFromNow(nextHB);
 8004ecc:	4c64      	ldr	r4, [pc, #400]	@ (8005060 <Update_State+0x2dc>)
 8004ece:	466d      	mov	r5, sp
 8004ed0:	f104 0310 	add.w	r3, r4, #16
 8004ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ed6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004eda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ede:	f003 fde9 	bl	8008ab4 <getTimeFromNow>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	827b      	strh	r3, [r7, #18]
					uint16_t PIRwakeUp = getTimeFromNow(nextMute);
 8004ee6:	4c64      	ldr	r4, [pc, #400]	@ (8005078 <Update_State+0x2f4>)
 8004ee8:	466d      	mov	r5, sp
 8004eea:	f104 0310 	add.w	r3, r4, #16
 8004eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ef0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004ef4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004ef8:	f003 fddc 	bl	8008ab4 <getTimeFromNow>
 8004efc:	4603      	mov	r3, r0
 8004efe:	823b      	strh	r3, [r7, #16]
					uint16_t AccwakeUp = getTimeFromNow(nextAccelMute);
 8004f00:	4c5e      	ldr	r4, [pc, #376]	@ (800507c <Update_State+0x2f8>)
 8004f02:	466d      	mov	r5, sp
 8004f04:	f104 0310 	add.w	r3, r4, #16
 8004f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f12:	f003 fdcf 	bl	8008ab4 <getTimeFromNow>
 8004f16:	4603      	mov	r3, r0
 8004f18:	81fb      	strh	r3, [r7, #14]
					uint16_t PeriodicGPSWakeup = getTimeFromNow(mutePeriodGPS);
 8004f1a:	4c59      	ldr	r4, [pc, #356]	@ (8005080 <Update_State+0x2fc>)
 8004f1c:	466d      	mov	r5, sp
 8004f1e:	f104 0310 	add.w	r3, r4, #16
 8004f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f24:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004f28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f2c:	f003 fdc2 	bl	8008ab4 <getTimeFromNow>
 8004f30:	4603      	mov	r3, r0
 8004f32:	81bb      	strh	r3, [r7, #12]


					PRINTF("Heartbeat timer is %u\r\n" , HBwakeUp );
 8004f34:	8a7b      	ldrh	r3, [r7, #18]
 8004f36:	461a      	mov	r2, r3
 8004f38:	4952      	ldr	r1, [pc, #328]	@ (8005084 <Update_State+0x300>)
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f001 ff1a 	bl	8006d74 <TraceSend>
					PRINTF("PIR timer is %u\r\n" , PIRwakeUp );
 8004f40:	8a3b      	ldrh	r3, [r7, #16]
 8004f42:	461a      	mov	r2, r3
 8004f44:	4950      	ldr	r1, [pc, #320]	@ (8005088 <Update_State+0x304>)
 8004f46:	2001      	movs	r0, #1
 8004f48:	f001 ff14 	bl	8006d74 <TraceSend>
					PRINTF("pGPS timer is %u\r\n" , PeriodicGPSWakeup );
 8004f4c:	89bb      	ldrh	r3, [r7, #12]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	494e      	ldr	r1, [pc, #312]	@ (800508c <Update_State+0x308>)
 8004f52:	2001      	movs	r0, #1
 8004f54:	f001 ff0e 	bl	8006d74 <TraceSend>
					PRINTF("Accelerometer timer is %u\r\n\r\n\r\n" , AccwakeUp );
 8004f58:	89fb      	ldrh	r3, [r7, #14]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	494c      	ldr	r1, [pc, #304]	@ (8005090 <Update_State+0x30c>)
 8004f5e:	2001      	movs	r0, #1
 8004f60:	f001 ff08 	bl	8006d74 <TraceSend>


					wakeUp = minValue4(HBwakeUp,PIRwakeUp,AccwakeUp,PeriodicGPSWakeup);
 8004f64:	89bb      	ldrh	r3, [r7, #12]
 8004f66:	89fa      	ldrh	r2, [r7, #14]
 8004f68:	8a39      	ldrh	r1, [r7, #16]
 8004f6a:	8a78      	ldrh	r0, [r7, #18]
 8004f6c:	f004 f972 	bl	8009254 <minValue4>
 8004f70:	4603      	mov	r3, r0
 8004f72:	82bb      	strh	r3, [r7, #20]
					PRINTF("Wakeup timer is %u\r\n" , wakeUp );
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	461a      	mov	r2, r3
 8004f78:	4946      	ldr	r1, [pc, #280]	@ (8005094 <Update_State+0x310>)
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f001 fefa 	bl	8006d74 <TraceSend>

					//					PRINTF("Triggered by accelerometer, Wakeup timer is %u\r\n" , wakeUp);
					if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeUp, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8004f80:	8ab9      	ldrh	r1, [r7, #20]
 8004f82:	2300      	movs	r3, #0
 8004f84:	2204      	movs	r2, #4
 8004f86:	4837      	ldr	r0, [pc, #220]	@ (8005064 <Update_State+0x2e0>)
 8004f88:	f01c fd84 	bl	8021a94 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01d      	beq.n	8004fce <Update_State+0x24a>
					{
						Error_Handler();
 8004f92:	f010 fbff 	bl	8015794 <Error_Handler>
				{
 8004f96:	e01a      	b.n	8004fce <Update_State+0x24a>
					}
				}
				else
				{
					//to handle first time sleep entry
					PRINTF("Wakeup timer is %u\r\n" , Data_Ptr->heartBeatData.hbInterval );
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004f9e:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	493b      	ldr	r1, [pc, #236]	@ (8005094 <Update_State+0x310>)
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f001 fee4 	bl	8006d74 <TraceSend>
					if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, Data_Ptr->heartBeatData.hbInterval , RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8004fb2:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2204      	movs	r2, #4
 8004fbc:	4829      	ldr	r0, [pc, #164]	@ (8005064 <Update_State+0x2e0>)
 8004fbe:	f01c fd69 	bl	8021a94 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <Update_State+0x24c>
					{
						Error_Handler();
 8004fc8:	f010 fbe4 	bl	8015794 <Error_Handler>
 8004fcc:	e000      	b.n	8004fd0 <Update_State+0x24c>
				{
 8004fce:	bf00      	nop
					}

				}

				timerTriggered = false;
 8004fd0:	4b26      	ldr	r3, [pc, #152]	@ (800506c <Update_State+0x2e8>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	701a      	strb	r2, [r3, #0]
				accelTriggered = false;
 8004fd6:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <Update_State+0x2f0>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
				pIRTriggered = false;
 8004fdc:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <Update_State+0x2ec>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	701a      	strb	r2, [r3, #0]


				SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF);
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8005098 <Update_State+0x314>)
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8005098 <Update_State+0x314>)
 8004fe8:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 8004fec:	6493      	str	r3, [r2, #72]	@ 0x48

				//__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_ALL);
 8004fee:	4b19      	ldr	r3, [pc, #100]	@ (8005054 <Update_State+0x2d0>)
 8004ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ff4:	60da      	str	r2, [r3, #12]
 8004ff6:	4b17      	ldr	r3, [pc, #92]	@ (8005054 <Update_State+0x2d0>)
 8004ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ffc:	611a      	str	r2, [r3, #16]

				//HAL_Delay(3000);

				if(getMode(PIR_MODULE) != 0)
 8004ffe:	2008      	movs	r0, #8
 8005000:	f00e faca 	bl	8013598 <getMode>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04a      	beq.n	80050a0 <Update_State+0x31c>
				{
					// Enable PIR
					PRINTF("Enable PIR wakeup, PIR mode is %d\r\n", getMode(PIR_MODULE));
 800500a:	2008      	movs	r0, #8
 800500c:	f00e fac4 	bl	8013598 <getMode>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	4921      	ldr	r1, [pc, #132]	@ (800509c <Update_State+0x318>)
 8005016:	2001      	movs	r0, #1
 8005018:	f001 feac 	bl	8006d74 <TraceSend>
					HAL_PWR_EnableWakeUpPin ( GPIO_PIN_1 );
 800501c:	2002      	movs	r0, #2
 800501e:	f017 fde7 	bl	801cbf0 <HAL_PWR_EnableWakeUpPin>
					HAL_PWR_EnableWakeUpPin ( GPIO_PIN_0 );
 8005022:	2001      	movs	r0, #1
 8005024:	f017 fde4 	bl	801cbf0 <HAL_PWR_EnableWakeUpPin>
 8005028:	e03e      	b.n	80050a8 <Update_State+0x324>
 800502a:	bf00      	nop
 800502c:	0802cb9c 	.word	0x0802cb9c
 8005030:	0802cbc4 	.word	0x0802cbc4
 8005034:	0802cbe4 	.word	0x0802cbe4
 8005038:	0802cc18 	.word	0x0802cc18
 800503c:	200bbb7c 	.word	0x200bbb7c
 8005040:	42020000 	.word	0x42020000
 8005044:	42020800 	.word	0x42020800
 8005048:	42020400 	.word	0x42020400
 800504c:	2007a26e 	.word	0x2007a26e
 8005050:	2007d0bc 	.word	0x2007d0bc
 8005054:	46022000 	.word	0x46022000
 8005058:	2007a27c 	.word	0x2007a27c
 800505c:	20000353 	.word	0x20000353
 8005060:	2007a194 	.word	0x2007a194
 8005064:	2007d344 	.word	0x2007d344
 8005068:	2007a1b0 	.word	0x2007a1b0
 800506c:	2007a279 	.word	0x2007a279
 8005070:	2007a278 	.word	0x2007a278
 8005074:	2007a27a 	.word	0x2007a27a
 8005078:	2007a1f4 	.word	0x2007a1f4
 800507c:	2007a214 	.word	0x2007a214
 8005080:	2007a234 	.word	0x2007a234
 8005084:	0802cc44 	.word	0x0802cc44
 8005088:	0802cc5c 	.word	0x0802cc5c
 800508c:	0802cc70 	.word	0x0802cc70
 8005090:	0802cc84 	.word	0x0802cc84
 8005094:	0802cca4 	.word	0x0802cca4
 8005098:	46020800 	.word	0x46020800
 800509c:	0802ccbc 	.word	0x0802ccbc
				}
				else
				{
					// If PIR is "OFF" (mode == 0 )then no reason to have it on
					PRINTF("PIR is Inactive due to mode\r\n" );
 80050a0:	49af      	ldr	r1, [pc, #700]	@ (8005360 <Update_State+0x5dc>)
 80050a2:	2001      	movs	r0, #1
 80050a4:	f001 fe66 	bl	8006d74 <TraceSend>
				}

				//				HAL_PWR_EnableWakeUpPin ( PWR_WAKEUP_PIN6 );
				//				HAL_PWR_EnableWakeUpPin ( GPIO_PIN_5 );

				accelClearLatch();
 80050a8:	f7fc f9fe 	bl	80014a8 <accelClearLatch>

				//				SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF);
				//				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
				//				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_ALL);
				SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF);
 80050ac:	4bad      	ldr	r3, [pc, #692]	@ (8005364 <Update_State+0x5e0>)
 80050ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b0:	4aac      	ldr	r2, [pc, #688]	@ (8005364 <Update_State+0x5e0>)
 80050b2:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 80050b6:	6493      	str	r3, [r2, #72]	@ 0x48

				//__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
				__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_ALL);
 80050b8:	4bab      	ldr	r3, [pc, #684]	@ (8005368 <Update_State+0x5e4>)
 80050ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	4ba9      	ldr	r3, [pc, #676]	@ (8005368 <Update_State+0x5e4>)
 80050c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050c6:	611a      	str	r2, [r3, #16]

				HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN7_HIGH_3);
 80050c8:	48a8      	ldr	r0, [pc, #672]	@ (800536c <Update_State+0x5e8>)
 80050ca:	f017 fd91 	bl	801cbf0 <HAL_PWR_EnableWakeUpPin>
				HAL_NVIC_EnableIRQ(RTC_IRQn);
 80050ce:	2002      	movs	r0, #2
 80050d0:	f013 fb72 	bl	80187b8 <HAL_NVIC_EnableIRQ>

				HAL_NVIC_EnableIRQ(PWR_S3WU_IRQn);
 80050d4:	204d      	movs	r0, #77	@ 0x4d
 80050d6:	f013 fb6f 	bl	80187b8 <HAL_NVIC_EnableIRQ>


				getAccelParameters(&accellerationParameters);
 80050da:	48a5      	ldr	r0, [pc, #660]	@ (8005370 <Update_State+0x5ec>)
 80050dc:	f7fc fc7e 	bl	80019dc <getAccelParameters>

				if (accellerationParameters.mode != 0 && (!tradeshow))
 80050e0:	4ba3      	ldr	r3, [pc, #652]	@ (8005370 <Update_State+0x5ec>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <Update_State+0x37e>
 80050e8:	4ba2      	ldr	r3, [pc, #648]	@ (8005374 <Update_State+0x5f0>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	f083 0301 	eor.w	r3, r3, #1
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <Update_State+0x37e>
				{
					HAL_NVIC_EnableIRQ(EXTI6_IRQn);  //Accelerometer
 80050f6:	2011      	movs	r0, #17
 80050f8:	f013 fb5e 	bl	80187b8 <HAL_NVIC_EnableIRQ>
					HAL_PWR_EnableWakeUpPin ( PWR_WAKEUP_PIN6_HIGH_1 );
 80050fc:	489e      	ldr	r0, [pc, #632]	@ (8005378 <Update_State+0x5f4>)
 80050fe:	f017 fd77 	bl	801cbf0 <HAL_PWR_EnableWakeUpPin>
				}

				SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF6);
 8005102:	4b98      	ldr	r3, [pc, #608]	@ (8005364 <Update_State+0x5e0>)
 8005104:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005106:	4a97      	ldr	r2, [pc, #604]	@ (8005364 <Update_State+0x5e0>)
 8005108:	f043 0320 	orr.w	r3, r3, #32
 800510c:	6493      	str	r3, [r2, #72]	@ 0x48

				cellInitialized = false;
 800510e:	4b9b      	ldr	r3, [pc, #620]	@ (800537c <Update_State+0x5f8>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]

				HAL_PWREx_EnableUltraLowPowerMode ();
 8005114:	f017 fe9a 	bl	801ce4c <HAL_PWREx_EnableUltraLowPowerMode>
				//	HAL_PWREx_ConfigSRDDomain ( PWR_SRD_DOMAIN_STOP );
				//	HAL_PWREx_EnterSTOP1Mode ( PWR_SLEEPENTRY_WFI );
				//	HAL_PWREx_EnterSTOP2Mode ( PWR_SLEEPENTRY_WFE );
				HAL_PWREx_EnterSTOP3Mode ( PWR_STOPENTRY_WFI);
 8005118:	2001      	movs	r0, #1
 800511a:	f017 fe6b 	bl	801cdf4 <HAL_PWREx_EnterSTOP3Mode>

			}

			HAL_PWR_DisableWakeUpPin ( GPIO_PIN_1 );
 800511e:	2002      	movs	r0, #2
 8005120:	f017 fda4 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
			HAL_PWR_DisableWakeUpPin ( GPIO_PIN_0 );
 8005124:	2001      	movs	r0, #1
 8005126:	f017 fda1 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
			HAL_PWR_DisableWakeUpPin ( PWR_WAKEUP_PIN6 );
 800512a:	2020      	movs	r0, #32
 800512c:	f017 fd9e 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
			HAL_PWR_DisableWakeUpPin ( PWR_WAKEUP_PIN7_HIGH_3 );
 8005130:	488e      	ldr	r0, [pc, #568]	@ (800536c <Update_State+0x5e8>)
 8005132:	f017 fd9b 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
			//HAL_PWR_DisableWakeUpPin ( PWR_WAKEUP_PIN6_HIGH_1 );


			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_ALL);
 8005136:	4b8c      	ldr	r3, [pc, #560]	@ (8005368 <Update_State+0x5e4>)
 8005138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	4b8a      	ldr	r3, [pc, #552]	@ (8005368 <Update_State+0x5e4>)
 8005140:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005144:	611a      	str	r2, [r3, #16]
			HAL_GPIO_WritePin ( Buzzer_GPIO_Port , Buzzer_Pin , GPIO_PIN_RESET );  //for simulated battery power operation
 8005146:	2200      	movs	r2, #0
 8005148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800514c:	488c      	ldr	r0, [pc, #560]	@ (8005380 <Update_State+0x5fc>)
 800514e:	f015 f821 	bl	801a194 <HAL_GPIO_WritePin>


			if ( _State & WAKE_STATE )
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005158:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800515c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 81c2 	beq.w	80054ea <Update_State+0x766>
			{
				//	__enable_irq();

				Refresh_Watchdog;
 8005166:	4887      	ldr	r0, [pc, #540]	@ (8005384 <Update_State+0x600>)
 8005168:	f016 f833 	bl	801b1d2 <HAL_IWDG_Refresh>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <Update_State+0x3f2>
 8005172:	f010 fb0f 	bl	8015794 <Error_Handler>
				HAL_UART_AbortReceive_IT ( &hlpuart1 );
 8005176:	4884      	ldr	r0, [pc, #528]	@ (8005388 <Update_State+0x604>)
 8005178:	f01d feac 	bl	8022ed4 <HAL_UART_AbortReceive_IT>
				isModemPowered = false;
 800517c:	4b83      	ldr	r3, [pc, #524]	@ (800538c <Update_State+0x608>)
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
				PRINTF("THE DEVICE IS WOKEN UP\r\n" );
 8005182:	4983      	ldr	r1, [pc, #524]	@ (8005390 <Update_State+0x60c>)
 8005184:	2001      	movs	r0, #1
 8005186:	f001 fdf5 	bl	8006d74 <TraceSend>

				HAL_GPIO_WritePin ( Buzzer_GPIO_Port , Buzzer_Pin , GPIO_PIN_RESET );          //for simulated battery power operation
 800518a:	2200      	movs	r2, #0
 800518c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005190:	487b      	ldr	r0, [pc, #492]	@ (8005380 <Update_State+0x5fc>)
 8005192:	f014 ffff 	bl	801a194 <HAL_GPIO_WritePin>

				//waking up for a heartbeat, we call this calculatenexttime immediately here to minimize time drift
				if (timerTriggered && (wakeupState == hb_wu_enabled))
 8005196:	4b7f      	ldr	r3, [pc, #508]	@ (8005394 <Update_State+0x610>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d030      	beq.n	8005200 <Update_State+0x47c>
 800519e:	4b7e      	ldr	r3, [pc, #504]	@ (8005398 <Update_State+0x614>)
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	2b15      	cmp	r3, #21
 80051a4:	d12c      	bne.n	8005200 <Update_State+0x47c>
				{
					PRINTF("Calculating next HB time, HB interval is %u\r\n", Data_Ptr->heartBeatData.hbInterval);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80051ac:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 80051b0:	461a      	mov	r2, r3
 80051b2:	497a      	ldr	r1, [pc, #488]	@ (800539c <Update_State+0x618>)
 80051b4:	2001      	movs	r0, #1
 80051b6:	f001 fddd 	bl	8006d74 <TraceSend>
					calculateNextTime( &nextHB, Data_Ptr->heartBeatData.hbInterval );
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80051c0:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 80051c4:	4619      	mov	r1, r3
 80051c6:	4876      	ldr	r0, [pc, #472]	@ (80053a0 <Update_State+0x61c>)
 80051c8:	f003 fb00 	bl	80087cc <calculateNextTime>
					uint16_t testington = getTimeFromNow(nextHB);
 80051cc:	4c74      	ldr	r4, [pc, #464]	@ (80053a0 <Update_State+0x61c>)
 80051ce:	466d      	mov	r5, sp
 80051d0:	f104 0310 	add.w	r3, r4, #16
 80051d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80051da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80051de:	f003 fc69 	bl	8008ab4 <getTimeFromNow>
 80051e2:	4603      	mov	r3, r0
 80051e4:	817b      	strh	r3, [r7, #10]
					PRINTF("Next timer is %u\r\n" , testington);
 80051e6:	897b      	ldrh	r3, [r7, #10]
 80051e8:	461a      	mov	r2, r3
 80051ea:	496e      	ldr	r1, [pc, #440]	@ (80053a4 <Update_State+0x620>)
 80051ec:	2001      	movs	r0, #1
 80051ee:	f001 fdc1 	bl	8006d74 <TraceSend>
					PRINTF("Setting HBWakeupEnabled to false\r\n");
 80051f2:	496d      	ldr	r1, [pc, #436]	@ (80053a8 <Update_State+0x624>)
 80051f4:	2001      	movs	r0, #1
 80051f6:	f001 fdbd 	bl	8006d74 <TraceSend>
					HBWakeupEnabled = false;
 80051fa:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <Update_State+0x628>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
				}

				// Enter camera power off
				cameraPowerControl (false);
 8005200:	2000      	movs	r0, #0
 8005202:	f001 f86f 	bl	80062e4 <cameraPowerControl>

				if (timerTriggered)
 8005206:	4b63      	ldr	r3, [pc, #396]	@ (8005394 <Update_State+0x610>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <Update_State+0x4b8>
				{
					if ((wakeupState == pGPS_wu_enabled) || (wakeupState == hb_pGPS_pair)
 800520e:	4b62      	ldr	r3, [pc, #392]	@ (8005398 <Update_State+0x614>)
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	2b18      	cmp	r3, #24
 8005214:	d00b      	beq.n	800522e <Update_State+0x4aa>
 8005216:	4b60      	ldr	r3, [pc, #384]	@ (8005398 <Update_State+0x614>)
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	2b10      	cmp	r3, #16
 800521c:	d007      	beq.n	800522e <Update_State+0x4aa>
							|| (wakeupState == img_pGPS_pair) || (wakeupState == hb_img_pGPS_pair))
 800521e:	4b5e      	ldr	r3, [pc, #376]	@ (8005398 <Update_State+0x614>)
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	2b11      	cmp	r3, #17
 8005224:	d003      	beq.n	800522e <Update_State+0x4aa>
 8005226:	4b5c      	ldr	r3, [pc, #368]	@ (8005398 <Update_State+0x614>)
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	2b12      	cmp	r3, #18
 800522c:	d106      	bne.n	800523c <Update_State+0x4b8>
					{
						calculateNextTime( &mutePeriodGPS, getMutePeriodGPS() );
 800522e:	f005 fe29 	bl	800ae84 <getMutePeriodGPS>
 8005232:	4603      	mov	r3, r0
 8005234:	4619      	mov	r1, r3
 8005236:	485e      	ldr	r0, [pc, #376]	@ (80053b0 <Update_State+0x62c>)
 8005238:	f003 fac8 	bl	80087cc <calculateNextTime>
					}
				}

				NightConfirmed = false;
 800523c:	4b5d      	ldr	r3, [pc, #372]	@ (80053b4 <Update_State+0x630>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
				if (!tradeshow)
 8005242:	4b4c      	ldr	r3, [pc, #304]	@ (8005374 <Update_State+0x5f0>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f083 0301 	eor.w	r3, r3, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80d3 	beq.w	80053f8 <Update_State+0x674>
				{
					PRINTF("Daytime PIR Trigger\r\n");
 8005252:	4959      	ldr	r1, [pc, #356]	@ (80053b8 <Update_State+0x634>)
 8005254:	2001      	movs	r0, #1
 8005256:	f001 fd8d 	bl	8006d74 <TraceSend>
					if (checkFunctionActive(PIR_MODULE))  // Make sure Daytime is active
 800525a:	2008      	movs	r0, #8
 800525c:	f003 fd2a 	bl	8008cb4 <checkFunctionActive>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80bc 	beq.w	80053e0 <Update_State+0x65c>
					{
						if (!MuteInit && pIRTriggered)
 8005268:	4b54      	ldr	r3, [pc, #336]	@ (80053bc <Update_State+0x638>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f083 0301 	eor.w	r3, r3, #1
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d018      	beq.n	80052a8 <Update_State+0x524>
 8005276:	4b52      	ldr	r3, [pc, #328]	@ (80053c0 <Update_State+0x63c>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <Update_State+0x524>
						{
							PRINTF("Setting 1 Picture Muting period of %d seconds\r\n", getPirMutePeriod());
 800527e:	f007 f907 	bl	800c490 <getPirMutePeriod>
 8005282:	4603      	mov	r3, r0
 8005284:	461a      	mov	r2, r3
 8005286:	494f      	ldr	r1, [pc, #316]	@ (80053c4 <Update_State+0x640>)
 8005288:	2001      	movs	r0, #1
 800528a:	f001 fd73 	bl	8006d74 <TraceSend>
							calculateNextTime( &nextMute, (uint32_t)getPirMutePeriod() );
 800528e:	f007 f8ff 	bl	800c490 <getPirMutePeriod>
 8005292:	4603      	mov	r3, r0
 8005294:	4619      	mov	r1, r3
 8005296:	484c      	ldr	r0, [pc, #304]	@ (80053c8 <Update_State+0x644>)
 8005298:	f003 fa98 	bl	80087cc <calculateNextTime>
							MuteInit = true;
 800529c:	4b47      	ldr	r3, [pc, #284]	@ (80053bc <Update_State+0x638>)
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
							firstMotion = true;
 80052a2:	4b4a      	ldr	r3, [pc, #296]	@ (80053cc <Update_State+0x648>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
						}

						if ((!checkNextTime(checkMute, nextMute)) && (firstMotion == false) && (pIRTriggered))
 80052a8:	4e49      	ldr	r6, [pc, #292]	@ (80053d0 <Update_State+0x64c>)
 80052aa:	4b47      	ldr	r3, [pc, #284]	@ (80053c8 <Update_State+0x644>)
 80052ac:	ac04      	add	r4, sp, #16
 80052ae:	461d      	mov	r5, r3
 80052b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80052b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80052bc:	466c      	mov	r4, sp
 80052be:	f106 0310 	add.w	r3, r6, #16
 80052c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80052c8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80052cc:	f003 fb00 	bl	80088d0 <checkNextTime>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f083 0301 	eor.w	r3, r3, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d026      	beq.n	800532a <Update_State+0x5a6>
 80052dc:	4b3b      	ldr	r3, [pc, #236]	@ (80053cc <Update_State+0x648>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	f083 0301 	eor.w	r3, r3, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01f      	beq.n	800532a <Update_State+0x5a6>
 80052ea:	4b35      	ldr	r3, [pc, #212]	@ (80053c0 <Update_State+0x63c>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01b      	beq.n	800532a <Update_State+0x5a6>
						{
							PRINTF("WITHIN MUTE PERIOD, Powering Down\r\n");
 80052f2:	4938      	ldr	r1, [pc, #224]	@ (80053d4 <Update_State+0x650>)
 80052f4:	2001      	movs	r0, #1
 80052f6:	f001 fd3d 	bl	8006d74 <TraceSend>
							powerDownDeviceForSleep();
 80052fa:	f003 ff27 	bl	800914c <powerDownDeviceForSleep>
							if (pIRTriggered)
 80052fe:	4b30      	ldr	r3, [pc, #192]	@ (80053c0 <Update_State+0x63c>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d078      	beq.n	80053f8 <Update_State+0x674>
							{
								clearPirInterreptUpdateStates();
 8005306:	f003 fe67 	bl	8008fd8 <clearPirInterreptUpdateStates>
								PRINTF("Setting 2 Picture Muting period of %d seconds\r\n", getPirMutePeriod());
 800530a:	f007 f8c1 	bl	800c490 <getPirMutePeriod>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	4931      	ldr	r1, [pc, #196]	@ (80053d8 <Update_State+0x654>)
 8005314:	2001      	movs	r0, #1
 8005316:	f001 fd2d 	bl	8006d74 <TraceSend>
								calculateNextTime( &nextMute, (uint32_t)getPirMutePeriod() );
 800531a:	f007 f8b9 	bl	800c490 <getPirMutePeriod>
 800531e:	4603      	mov	r3, r0
 8005320:	4619      	mov	r1, r3
 8005322:	4829      	ldr	r0, [pc, #164]	@ (80053c8 <Update_State+0x644>)
 8005324:	f003 fa52 	bl	80087cc <calculateNextTime>
							if (pIRTriggered)
 8005328:	e066      	b.n	80053f8 <Update_State+0x674>
							}
						}
						else
						{
							if(pIRTriggered)
 800532a:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <Update_State+0x63c>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d062      	beq.n	80053f8 <Update_State+0x674>
							{
								PRINTF("Starting MUTE period of %d seconds\r\n", getPirMutePeriod());
 8005332:	f007 f8ad 	bl	800c490 <getPirMutePeriod>
 8005336:	4603      	mov	r3, r0
 8005338:	461a      	mov	r2, r3
 800533a:	4928      	ldr	r1, [pc, #160]	@ (80053dc <Update_State+0x658>)
 800533c:	2001      	movs	r0, #1
 800533e:	f001 fd19 	bl	8006d74 <TraceSend>
								calculateNextTime( &nextMute, (uint32_t)getPirMutePeriod());
 8005342:	f007 f8a5 	bl	800c490 <getPirMutePeriod>
 8005346:	4603      	mov	r3, r0
 8005348:	4619      	mov	r1, r3
 800534a:	481f      	ldr	r0, [pc, #124]	@ (80053c8 <Update_State+0x644>)
 800534c:	f003 fa3e 	bl	80087cc <calculateNextTime>
								firstMotion = false;
 8005350:	4b1e      	ldr	r3, [pc, #120]	@ (80053cc <Update_State+0x648>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
								NightConfirmed = true;    //added
 8005356:	4b17      	ldr	r3, [pc, #92]	@ (80053b4 <Update_State+0x630>)
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e04c      	b.n	80053f8 <Update_State+0x674>
 800535e:	bf00      	nop
 8005360:	0802cce0 	.word	0x0802cce0
 8005364:	46020800 	.word	0x46020800
 8005368:	46022000 	.word	0x46022000
 800536c:	30000040 	.word	0x30000040
 8005370:	2007a254 	.word	0x2007a254
 8005374:	20000354 	.word	0x20000354
 8005378:	04000020 	.word	0x04000020
 800537c:	2007a27b 	.word	0x2007a27b
 8005380:	42020400 	.word	0x42020400
 8005384:	2007d0bc 	.word	0x2007d0bc
 8005388:	2007d1c0 	.word	0x2007d1c0
 800538c:	2007a26e 	.word	0x2007a26e
 8005390:	0802cd00 	.word	0x0802cd00
 8005394:	2007a279 	.word	0x2007a279
 8005398:	2007a27e 	.word	0x2007a27e
 800539c:	0802cd1c 	.word	0x0802cd1c
 80053a0:	2007a194 	.word	0x2007a194
 80053a4:	0802cd4c 	.word	0x0802cd4c
 80053a8:	0802cd60 	.word	0x0802cd60
 80053ac:	2007a277 	.word	0x2007a277
 80053b0:	2007a234 	.word	0x2007a234
 80053b4:	2007a26f 	.word	0x2007a26f
 80053b8:	0802cd84 	.word	0x0802cd84
 80053bc:	2007a272 	.word	0x2007a272
 80053c0:	2007a278 	.word	0x2007a278
 80053c4:	0802cd9c 	.word	0x0802cd9c
 80053c8:	2007a1f4 	.word	0x2007a1f4
 80053cc:	20000352 	.word	0x20000352
 80053d0:	2007a1b4 	.word	0x2007a1b4
 80053d4:	0802cdcc 	.word	0x0802cdcc
 80053d8:	0802cdf0 	.word	0x0802cdf0
 80053dc:	0802ce20 	.word	0x0802ce20
							}
						}
					}
					else // Daytime not active, print message and power down
					{
						PRINTF("Picture Mode not Active, Powering Down\r\n");
 80053e0:	498c      	ldr	r1, [pc, #560]	@ (8005614 <Update_State+0x890>)
 80053e2:	2001      	movs	r0, #1
 80053e4:	f001 fcc6 	bl	8006d74 <TraceSend>
						powerDownDeviceForSleep();
 80053e8:	f003 feb0 	bl	800914c <powerDownDeviceForSleep>
						if (pIRTriggered)
 80053ec:	4b8a      	ldr	r3, [pc, #552]	@ (8005618 <Update_State+0x894>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <Update_State+0x674>
						{
							clearPirInterreptUpdateStates();
 80053f4:	f003 fdf0 	bl	8008fd8 <clearPirInterreptUpdateStates>
						}
					}
				}

				//accelerometer mute period handling
				if (accelTriggered)
 80053f8:	4b88      	ldr	r3, [pc, #544]	@ (800561c <Update_State+0x898>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d074      	beq.n	80054ea <Update_State+0x766>
				{
					// Enter camera power off
					cameraPowerControl (false);
 8005400:	2000      	movs	r0, #0
 8005402:	f000 ff6f 	bl	80062e4 <cameraPowerControl>

					if (!accelMuteInit && accelTriggered)
 8005406:	4b86      	ldr	r3, [pc, #536]	@ (8005620 <Update_State+0x89c>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d017      	beq.n	8005444 <Update_State+0x6c0>
 8005414:	4b81      	ldr	r3, [pc, #516]	@ (800561c <Update_State+0x898>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d013      	beq.n	8005444 <Update_State+0x6c0>
					{
						//use parameter instead of hardcoded value
						calculateNextTime( &nextAccelMute, getAccelMutePeriod() );
 800541c:	f7fc fc5a 	bl	8001cd4 <getAccelMutePeriod>
 8005420:	4603      	mov	r3, r0
 8005422:	4619      	mov	r1, r3
 8005424:	487f      	ldr	r0, [pc, #508]	@ (8005624 <Update_State+0x8a0>)
 8005426:	f003 f9d1 	bl	80087cc <calculateNextTime>
						calculateNextTime( &mutePeriodGPS, getMutePeriodGPS() );
 800542a:	f005 fd2b 	bl	800ae84 <getMutePeriodGPS>
 800542e:	4603      	mov	r3, r0
 8005430:	4619      	mov	r1, r3
 8005432:	487d      	ldr	r0, [pc, #500]	@ (8005628 <Update_State+0x8a4>)
 8005434:	f003 f9ca 	bl	80087cc <calculateNextTime>

						accelMuteInit = true;
 8005438:	4b79      	ldr	r3, [pc, #484]	@ (8005620 <Update_State+0x89c>)
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
						firstMovement = true;
 800543e:	4b7b      	ldr	r3, [pc, #492]	@ (800562c <Update_State+0x8a8>)
 8005440:	2201      	movs	r2, #1
 8005442:	701a      	strb	r2, [r3, #0]
					}
					if ((!checkNextTime(checkAccelMute, nextAccelMute)) && (firstMovement == false) && (accelTriggered))
 8005444:	4e7a      	ldr	r6, [pc, #488]	@ (8005630 <Update_State+0x8ac>)
 8005446:	4b77      	ldr	r3, [pc, #476]	@ (8005624 <Update_State+0x8a0>)
 8005448:	ac04      	add	r4, sp, #16
 800544a:	461d      	mov	r5, r3
 800544c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800544e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005450:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005454:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005458:	466c      	mov	r4, sp
 800545a:	f106 0310 	add.w	r3, r6, #16
 800545e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005460:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8005464:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005468:	f003 fa32 	bl	80088d0 <checkNextTime>
 800546c:	4603      	mov	r3, r0
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d022      	beq.n	80054be <Update_State+0x73a>
 8005478:	4b6c      	ldr	r3, [pc, #432]	@ (800562c <Update_State+0x8a8>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f083 0301 	eor.w	r3, r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01b      	beq.n	80054be <Update_State+0x73a>
 8005486:	4b65      	ldr	r3, [pc, #404]	@ (800561c <Update_State+0x898>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <Update_State+0x73a>
					{
						PRINTF("WITHIN ACCELEROMETER MUTE PERIOD, Powering Down\r\n");
 800548e:	4969      	ldr	r1, [pc, #420]	@ (8005634 <Update_State+0x8b0>)
 8005490:	2001      	movs	r0, #1
 8005492:	f001 fc6f 	bl	8006d74 <TraceSend>
						powerDownDeviceForSleep();
 8005496:	f003 fe59 	bl	800914c <powerDownDeviceForSleep>
						clearAccellerometerInterruptStates();
 800549a:	f003 fe0f 	bl	80090bc <clearAccellerometerInterruptStates>
						PRINTF("Setting ACCELEROMETER Picture Muting period of %d seconds\r\n", getAccelMutePeriod());
 800549e:	f7fc fc19 	bl	8001cd4 <getAccelMutePeriod>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	4964      	ldr	r1, [pc, #400]	@ (8005638 <Update_State+0x8b4>)
 80054a8:	2001      	movs	r0, #1
 80054aa:	f001 fc63 	bl	8006d74 <TraceSend>
						calculateNextTime( &nextAccelMute, getAccelMutePeriod() );
 80054ae:	f7fc fc11 	bl	8001cd4 <getAccelMutePeriod>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4619      	mov	r1, r3
 80054b6:	485b      	ldr	r0, [pc, #364]	@ (8005624 <Update_State+0x8a0>)
 80054b8:	f003 f988 	bl	80087cc <calculateNextTime>
 80054bc:	e015      	b.n	80054ea <Update_State+0x766>
					}
					else
					{
						if(accelTriggered)
 80054be:	4b57      	ldr	r3, [pc, #348]	@ (800561c <Update_State+0x898>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d011      	beq.n	80054ea <Update_State+0x766>
						{
							PRINTF("Starting ACCELEROMETER MUTE period of %d seconds\r\n", getAccelMutePeriod());
 80054c6:	f7fc fc05 	bl	8001cd4 <getAccelMutePeriod>
 80054ca:	4603      	mov	r3, r0
 80054cc:	461a      	mov	r2, r3
 80054ce:	495b      	ldr	r1, [pc, #364]	@ (800563c <Update_State+0x8b8>)
 80054d0:	2001      	movs	r0, #1
 80054d2:	f001 fc4f 	bl	8006d74 <TraceSend>
							calculateNextTime( &nextAccelMute, getAccelMutePeriod());
 80054d6:	f7fc fbfd 	bl	8001cd4 <getAccelMutePeriod>
 80054da:	4603      	mov	r3, r0
 80054dc:	4619      	mov	r1, r3
 80054de:	4851      	ldr	r0, [pc, #324]	@ (8005624 <Update_State+0x8a0>)
 80054e0:	f003 f974 	bl	80087cc <calculateNextTime>
							firstMovement = false;
 80054e4:	4b51      	ldr	r3, [pc, #324]	@ (800562c <Update_State+0x8a8>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
					}
				}
			}

#ifdef Log_Level_0
			Log_Single ( LOG_IDLE_END );
 80054ea:	4855      	ldr	r0, [pc, #340]	@ (8005640 <Update_State+0x8bc>)
 80054ec:	f001 fade 	bl	8006aac <Log_Single>
#endif // Log_Level_0
		}

		if ( !( _State & WAKE_STATE ) )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80054f6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80054fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d105      	bne.n	800550e <Update_State+0x78a>
		{
#ifdef Log_Level_0
			Log_Single ( LOG_SLEEP_START );
 8005502:	4850      	ldr	r0, [pc, #320]	@ (8005644 <Update_State+0x8c0>)
 8005504:	f001 fad2 	bl	8006aac <Log_Single>
			//		HAL_PWREx_EnterSTOP3Mode ( PWR_SLEEPENTRY_WFE );
			//		//	HAL_PWREx_EnterSHUTDOWNMode ();
			//	}

#ifdef Log_Level_0
			Log_Single ( LOG_SLEEP_END );
 8005508:	484f      	ldr	r0, [pc, #316]	@ (8005648 <Update_State+0x8c4>)
 800550a:	f001 facf 	bl	8006aac <Log_Single>
		/* Resume Tick increment */
		//	HAL_ResumeTick ();
#endif  //Device_Sleep
	}

	if ( _State & WAKE_STATE )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005514:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 840c 	beq.w	8005d3a <Update_State+0xfb6>
	{
		_State ^= WAKE_STATE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005528:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800552c:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005536:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

#ifdef Log_Level_0
		Log_Single ( LOG_WAKE_CYCLE );
 800553a:	4844      	ldr	r0, [pc, #272]	@ (800564c <Update_State+0x8c8>)
 800553c:	f001 fab6 	bl	8006aac <Log_Single>
#endif // Log_Level_0

		if ( _State & CHARGER_DETECT )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005546:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800554a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <Update_State+0x7d6>
		{
#ifdef Log_Level_0
			Log_Single ( POWER_DETECT );
 8005552:	483f      	ldr	r0, [pc, #252]	@ (8005650 <Update_State+0x8cc>)
 8005554:	f001 faaa 	bl	8006aac <Log_Single>
 8005558:	e002      	b.n	8005560 <Update_State+0x7dc>
#endif // Log_Level_0
		}
		else
		{
#ifdef Log_Level_0
			Log_Single ( POWER_FAIL_DETECT );
 800555a:	483e      	ldr	r0, [pc, #248]	@ (8005654 <Update_State+0x8d0>)
 800555c:	f001 faa6 	bl	8006aac <Log_Single>
#endif // Log_Level_0
		}
		PRINTF("Update_State includes WAKE_STATE\r\n");
 8005560:	493d      	ldr	r1, [pc, #244]	@ (8005658 <Update_State+0x8d4>)
 8005562:	2001      	movs	r0, #1
 8005564:	f001 fc06 	bl	8006d74 <TraceSend>
		if ( _State & BUZZER_TOGGLE )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800556e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005572:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 8081 	beq.w	800567e <Update_State+0x8fa>
		{
			PRINTF("Update_State includes WAKE_STATE and BUZZER_TOGGLE\r\n");
 800557c:	4937      	ldr	r1, [pc, #220]	@ (800565c <Update_State+0x8d8>)
 800557e:	2001      	movs	r0, #1
 8005580:	f001 fbf8 	bl	8006d74 <TraceSend>
			_State ^= BUZZER_TOGGLE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800558a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800558e:	f483 1300 	eor.w	r3, r3, #2097152	@ 0x200000
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005598:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

			switch ( Data_Ptr->buzzerData.State )
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80055a2:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d867      	bhi.n	800567a <Update_State+0x8f6>
 80055aa:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <Update_State+0x82c>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055c5 	.word	0x080055c5
 80055b4:	080055df 	.word	0x080055df
 80055b8:	080055f9 	.word	0x080055f9
 80055bc:	08005661 	.word	0x08005661
 80055c0:	0800567b 	.word	0x0800567b
			{
			case Short:
				Data_Ptr->buzzerData.Single_Repeat = 0;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
				Data_Ptr->buzzerData.Cycles_Repeat = 1;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
				break;
 80055dc:	e04d      	b.n	800567a <Update_State+0x8f6>
			case Short_Spam:
				Data_Ptr->buzzerData.Single_Repeat = 0;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
				Data_Ptr->buzzerData.Cycles_Repeat = 3;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80055f0:	2203      	movs	r2, #3
 80055f2:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
				break;
 80055f6:	e040      	b.n	800567a <Update_State+0x8f6>
			case Long:
				Data_Ptr->buzzerData.Single_Repeat = 2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
				Data_Ptr->buzzerData.Cycles_Repeat = 0;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800560a:	2200      	movs	r2, #0
 800560c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
				break;
 8005610:	e033      	b.n	800567a <Update_State+0x8f6>
 8005612:	bf00      	nop
 8005614:	0802ce48 	.word	0x0802ce48
 8005618:	2007a278 	.word	0x2007a278
 800561c:	2007a27a 	.word	0x2007a27a
 8005620:	2007a273 	.word	0x2007a273
 8005624:	2007a214 	.word	0x2007a214
 8005628:	2007a234 	.word	0x2007a234
 800562c:	2007a274 	.word	0x2007a274
 8005630:	2007a1d4 	.word	0x2007a1d4
 8005634:	0802ce74 	.word	0x0802ce74
 8005638:	0802cea8 	.word	0x0802cea8
 800563c:	0802cee4 	.word	0x0802cee4
 8005640:	0802cf18 	.word	0x0802cf18
 8005644:	0802cf40 	.word	0x0802cf40
 8005648:	0802cf6c 	.word	0x0802cf6c
 800564c:	0802cf94 	.word	0x0802cf94
 8005650:	0802cfac 	.word	0x0802cfac
 8005654:	0802cfd4 	.word	0x0802cfd4
 8005658:	0802cffc 	.word	0x0802cffc
 800565c:	0802d020 	.word	0x0802d020
			case Long_Spam:
				Data_Ptr->buzzerData.Single_Repeat = 5;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005666:	2205      	movs	r2, #5
 8005668:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
				Data_Ptr->buzzerData.Cycles_Repeat = 2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005672:	2202      	movs	r2, #2
 8005674:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
				break;
 8005678:	bf00      	nop
			case Custom:
				break;
			}

			BUZ_Init ();
 800567a:	f7fe fb05 	bl	8003c88 <BUZ_Init>
		}

		if ( _State & FLASH_START )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005684:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <Update_State+0x924>
		{
			_State ^= FLASH_START;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005696:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800569a:	f083 0308 	eor.w	r3, r3, #8
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80056a4:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
#ifdef New_Boot_ADDR
			Upgrade_Firmware();
#endif // New_Boot_ADDR
		}

		if ( _State & PARAM_UPDT )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80056ae:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80056b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d012      	beq.n	80056e0 <Update_State+0x95c>
		{

			PRINTF("Update_State includes WAKE_STATE and PARAM_UPDT\r\n");
 80056ba:	4941      	ldr	r1, [pc, #260]	@ (80057c0 <Update_State+0xa3c>)
 80056bc:	2001      	movs	r0, #1
 80056be:	f001 fb59 	bl	8006d74 <TraceSend>
			_State ^= PARAM_UPDT;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80056c8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80056cc:	f483 7380 	eor.w	r3, r3, #256	@ 0x100
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80056d6:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

			XPS_paramStore ( Data_Ptr );
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f00e f9a8 	bl	8013a30 <XPS_paramStore>
//			//			#endif //SKYWIRE_MODEM
//
//#endif  //TEMPERATURE_SENSOR
//		}

		if ( _State & PIC_UPDT )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80056e6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80056ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 808f 	beq.w	8005812 <Update_State+0xa8e>
		{
			_State ^= PIC_UPDT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80056fa:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80056fe:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005708:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
			getCameraParameters(&cameraParameters);
 800570c:	482d      	ldr	r0, [pc, #180]	@ (80057c4 <Update_State+0xa40>)
 800570e:	f7fc fb0b 	bl	8001d28 <getCameraParameters>
			PRINTF("Camera mode is %d\r\n", cameraParameters.mode);
 8005712:	4b2c      	ldr	r3, [pc, #176]	@ (80057c4 <Update_State+0xa40>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	492b      	ldr	r1, [pc, #172]	@ (80057c8 <Update_State+0xa44>)
 800571a:	2001      	movs	r0, #1
 800571c:	f001 fb2a 	bl	8006d74 <TraceSend>

//			cameraParameters.mode = 1;//testing

			if (cameraParameters.mode != 0)
 8005720:	4b28      	ldr	r3, [pc, #160]	@ (80057c4 <Update_State+0xa40>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d074      	beq.n	8005812 <Update_State+0xa8e>
			{
			PRINTF("Update_State includes WAKE_STATE and PIC_UPDT\r\n");
 8005728:	4928      	ldr	r1, [pc, #160]	@ (80057cc <Update_State+0xa48>)
 800572a:	2001      	movs	r0, #1
 800572c:	f001 fb22 	bl	8006d74 <TraceSend>
			cameraPowerControl(true);
 8005730:	2001      	movs	r0, #1
 8005732:	f000 fdd7 	bl	80062e4 <cameraPowerControl>
			cameraInitialize();
 8005736:	f7fe facf 	bl	8003cd8 <cameraInitialize>
			Clear_Memory( Data_Ptr );
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 ffa1 	bl	8006682 <Clear_Memory>
			HAL_Delay(1000);      //GAV camera warm up, need to make parameterized
 8005740:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005744:	f010 fe9e 	bl	8016484 <HAL_Delay>
			Refresh_Watchdog;
 8005748:	4821      	ldr	r0, [pc, #132]	@ (80057d0 <Update_State+0xa4c>)
 800574a:	f015 fd42 	bl	801b1d2 <HAL_IWDG_Refresh>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <Update_State+0x9d4>
 8005754:	f010 f81e 	bl	8015794 <Error_Handler>

			bool printCamData = false;
 8005758:	2300      	movs	r3, #0
 800575a:	75fb      	strb	r3, [r7, #23]
			if (firstTimeBoot)
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <Update_State+0xa50>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <Update_State+0x9e4>
			{
				printCamData = true;
 8005764:	2301      	movs	r3, #1
 8005766:	75fb      	strb	r3, [r7, #23]
			}
			takeCameraImage ( &Data_Ptr->Camera_Data, printCamData );
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800576e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005772:	7dfa      	ldrb	r2, [r7, #23]
 8005774:	4611      	mov	r1, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fb82 	bl	8003e80 <takeCameraImage>
			if (CAM_Get_State () != CAM_OK)
 800577c:	f7fe fc1a 	bl	8003fb4 <CAM_Get_State>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00c      	beq.n	80057a0 <Update_State+0xa1c>
				_Init_Flags ^= CAM_INIT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800578c:	f893 3360 	ldrb.w	r3, [r3, #864]	@ 0x360
 8005790:	f083 0310 	eor.w	r3, r3, #16
 8005794:	b2da      	uxtb	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800579c:	f883 2360 	strb.w	r2, [r3, #864]	@ 0x360
			HAL_GPIO_WritePin ( USB_Power_Switch_On_GPIO_Port , USB_Power_Switch_On_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 80057a0:	2200      	movs	r2, #0
 80057a2:	2104      	movs	r1, #4
 80057a4:	480c      	ldr	r0, [pc, #48]	@ (80057d8 <Update_State+0xa54>)
 80057a6:	f014 fcf5 	bl	801a194 <HAL_GPIO_WritePin>
			cameraPowerControl(false);
 80057aa:	2000      	movs	r0, #0
 80057ac:	f000 fd9a 	bl	80062e4 <cameraPowerControl>

			//	isModemPowered = false;
			//	CELL_Set_PDP ( PDP_NOT_SET );

			if (firstTimeBoot)
 80057b0:	4b08      	ldr	r3, [pc, #32]	@ (80057d4 <Update_State+0xa50>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d011      	beq.n	80057dc <Update_State+0xa58>
			{
				Clear_Memory(Data_Ptr);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 ff62 	bl	8006682 <Clear_Memory>
 80057be:	e01a      	b.n	80057f6 <Update_State+0xa72>
 80057c0:	0802d058 	.word	0x0802d058
 80057c4:	2007a264 	.word	0x2007a264
 80057c8:	0802cb58 	.word	0x0802cb58
 80057cc:	0802d08c 	.word	0x0802d08c
 80057d0:	2007d0bc 	.word	0x2007d0bc
 80057d4:	20000353 	.word	0x20000353
 80057d8:	42020400 	.word	0x42020400
				//Enable_Modem ( Data_Ptr );
				//firstTimeBoot = false; moved to end so can use in other places
			}
			else
			{
				if (!cellInitialized)
 80057dc:	4bbc      	ldr	r3, [pc, #752]	@ (8005ad0 <Update_State+0xd4c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f083 0301 	eor.w	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <Update_State+0xa72>
				{
					Enable_Modem_PWR ( Data_Ptr );
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fcb8 	bl	8006160 <Enable_Modem_PWR>
					CELL_reInit( Data_Ptr);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f006 fff5 	bl	800c7e0 <CELL_reInit>
				}
			}

			// Handle Downlinks before sending picture data
			getFirmwareDownlink(Data_Ptr, 1);
 80057f6:	2101      	movs	r1, #1
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f00b ff4d 	bl	8011698 <getFirmwareDownlink>
			if ( mqttDataAvailable )
 80057fe:	4bb5      	ldr	r3, [pc, #724]	@ (8005ad4 <Update_State+0xd50>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <Update_State+0xa8e>
			{
				universalDownlinkDecoder();
 8005806:	f001 fee1 	bl	80075cc <universalDownlinkDecoder>
				selectDownlinkOperation(Data_Ptr, IMAGE_TAKEN);
 800580a:	2100      	movs	r1, #0
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f002 f831 	bl	8007874 <selectDownlinkOperation>
			}
			}
		}
		if ( _State & PIR_UPDT )
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005818:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800581c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d02e      	beq.n	8005882 <Update_State+0xafe>
		{
			_State ^= PIR_UPDT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800582a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800582e:	f483 3300 	eor.w	r3, r3, #131072	@ 0x20000
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005838:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
			PRINTF("Update_State includes WAKE_STATE and PIR_UPDT\r\n");
 800583c:	49a6      	ldr	r1, [pc, #664]	@ (8005ad8 <Update_State+0xd54>)
 800583e:	2001      	movs	r0, #1
 8005840:	f001 fa98 	bl	8006d74 <TraceSend>

			if (!cellInitialized)
 8005844:	4ba2      	ldr	r3, [pc, #648]	@ (8005ad0 <Update_State+0xd4c>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f083 0301 	eor.w	r3, r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <Update_State+0xada>
			{
				Enable_Modem_PWR ( Data_Ptr );
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fc84 	bl	8006160 <Enable_Modem_PWR>
				CELL_reInit( Data_Ptr);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f006 ffc1 	bl	800c7e0 <CELL_reInit>
			}
			getFirmwareDownlink(Data_Ptr, 1);
 800585e:	2101      	movs	r1, #1
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f00b ff19 	bl	8011698 <getFirmwareDownlink>
			if ( mqttDataAvailable )
 8005866:	4b9b      	ldr	r3, [pc, #620]	@ (8005ad4 <Update_State+0xd50>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <Update_State+0xaf6>
			{
				universalDownlinkDecoder();
 800586e:	f001 fead 	bl	80075cc <universalDownlinkDecoder>
				selectDownlinkOperation(Data_Ptr, IDLE);
 8005872:	2105      	movs	r1, #5
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fffd 	bl	8007874 <selectDownlinkOperation>
			}
			CELL_PIRUPDT ( Data_Ptr, true );
 800587a:	2101      	movs	r1, #1
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f007 fc55 	bl	800d12c <CELL_PIRUPDT>

		}

		if ( _State & PIC_SEND )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005888:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800588c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <Update_State+0xb52>
		{
			PRINTF("Update_State includes WAKE_STATE and PIC_SEND\r\n");
 8005894:	4991      	ldr	r1, [pc, #580]	@ (8005adc <Update_State+0xd58>)
 8005896:	2001      	movs	r0, #1
 8005898:	f001 fa6c 	bl	8006d74 <TraceSend>
			_State ^= PIC_SEND;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80058a2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80058a6:	f483 2300 	eor.w	r3, r3, #524288	@ 0x80000
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80058b0:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
			//Enable_Modem ( Data_Ptr );

			getCameraParameters(&cameraParameters);
 80058b4:	488a      	ldr	r0, [pc, #552]	@ (8005ae0 <Update_State+0xd5c>)
 80058b6:	f7fc fa37 	bl	8001d28 <getCameraParameters>
			PRINTF("Camera mode is %d\r\n", cameraParameters.mode);
 80058ba:	4b89      	ldr	r3, [pc, #548]	@ (8005ae0 <Update_State+0xd5c>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	4988      	ldr	r1, [pc, #544]	@ (8005ae4 <Update_State+0xd60>)
 80058c2:	2001      	movs	r0, #1
 80058c4:	f001 fa56 	bl	8006d74 <TraceSend>
//			cameraParameters.mode = 1;//testing

			if (cameraParameters.mode != 0)
 80058c8:	4b85      	ldr	r3, [pc, #532]	@ (8005ae0 <Update_State+0xd5c>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <Update_State+0xb52>
			{
#ifdef SKYWIRE_MODEM
			CELL_PICUPDT ( Data_Ptr );
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f007 f873 	bl	800c9bc <CELL_PICUPDT>
#endif  // SKYWIRE_MODEM
			//Set_Timer_B ( Data_Ptr );
			}
		}

		if ( _State & GET_CELL_RECV_BUFF )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80058dc:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80058e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d027      	beq.n	8005938 <Update_State+0xbb4>
		{
			PRINTF("Update_State includes WAKE_STATE and GET_CELL_RECV_BUFF\r\n");
 80058e8:	497f      	ldr	r1, [pc, #508]	@ (8005ae8 <Update_State+0xd64>)
 80058ea:	2001      	movs	r0, #1
 80058ec:	f001 fa42 	bl	8006d74 <TraceSend>
			_State ^= GET_CELL_RECV_BUFF;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80058f6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80058fa:	f083 7380 	eor.w	r3, r3, #16777216	@ 0x1000000
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005904:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

			getFirmwareDownlink(Data_Ptr, 2);
 8005908:	2102      	movs	r1, #2
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f00b fec4 	bl	8011698 <getFirmwareDownlink>
			if ( mqttDataAvailable )
 8005910:	4b70      	ldr	r3, [pc, #448]	@ (8005ad4 <Update_State+0xd50>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <Update_State+0xba0>
			{
				universalDownlinkDecoder();
 8005918:	f001 fe58 	bl	80075cc <universalDownlinkDecoder>
				selectDownlinkOperation(Data_Ptr, IMAGE_COMPLETE);
 800591c:	2101      	movs	r1, #1
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 ffa8 	bl	8007874 <selectDownlinkOperation>
			}

			if ( missingPagesCount > 0 )
 8005924:	4b71      	ldr	r3, [pc, #452]	@ (8005aec <Update_State+0xd68>)
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <Update_State+0xbb4>
				resendMissingPackets(Data_Ptr, missingPagesCount);
 800592c:	4b6f      	ldr	r3, [pc, #444]	@ (8005aec <Update_State+0xd68>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	4619      	mov	r1, r3
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00b faba 	bl	8010eac <resendMissingPackets>
		}

		if(_State & PIR_END)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800593e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d02e      	beq.n	80059a8 <Update_State+0xc24>
		{
			PRINTF("Update_State includes WAKE_STATE and PIR_UPDT\r\n");
 800594a:	4963      	ldr	r1, [pc, #396]	@ (8005ad8 <Update_State+0xd54>)
 800594c:	2001      	movs	r0, #1
 800594e:	f001 fa11 	bl	8006d74 <TraceSend>
			_State ^= PIR_END;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005958:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800595c:	f083 5300 	eor.w	r3, r3, #536870912	@ 0x20000000
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005966:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

			if (!cellInitialized)
 800596a:	4b59      	ldr	r3, [pc, #356]	@ (8005ad0 <Update_State+0xd4c>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <Update_State+0xc00>
			{
				Enable_Modem_PWR ( Data_Ptr );
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fbf1 	bl	8006160 <Enable_Modem_PWR>
				CELL_reInit( Data_Ptr);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f006 ff2e 	bl	800c7e0 <CELL_reInit>
			}

			getFirmwareDownlink(Data_Ptr, 1);
 8005984:	2101      	movs	r1, #1
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f00b fe86 	bl	8011698 <getFirmwareDownlink>
			if ( mqttDataAvailable )
 800598c:	4b51      	ldr	r3, [pc, #324]	@ (8005ad4 <Update_State+0xd50>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <Update_State+0xc1c>
			{
				universalDownlinkDecoder();
 8005994:	f001 fe1a 	bl	80075cc <universalDownlinkDecoder>
				selectDownlinkOperation(Data_Ptr, IDLE);
 8005998:	2105      	movs	r1, #5
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 ff6a 	bl	8007874 <selectDownlinkOperation>
			}
			CELL_PIRUPDT ( Data_Ptr, false );
 80059a0:	2100      	movs	r1, #0
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f007 fbc2 	bl	800d12c <CELL_PIRUPDT>
		}

		if ( _State & PIC_SAVE )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80059ae:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80059b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <Update_State+0xc5c>
		{
			PRINTF("Update_State includes WAKE_STATE and PIC_SAVE\r\n");
 80059ba:	494d      	ldr	r1, [pc, #308]	@ (8005af0 <Update_State+0xd6c>)
 80059bc:	2001      	movs	r0, #1
 80059be:	f001 f9d9 	bl	8006d74 <TraceSend>
			_State ^= PIC_SAVE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80059c8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80059cc:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80059d6:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

#ifdef EXTERNAL_XPS_STORAGE
			XPS_Picture_Save ( Data_Ptr );
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f00e fa1a 	bl	8013e14 <XPS_Picture_Save>
		//			if ( _State & CELL_UPDT )
		//				CELL_PWRUPDT ( Data_Ptr );
		//#endif // SKYWIRE_MODEM
		//		}

		if ( _State & SERVER_COMMAND )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80059e6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d015      	beq.n	8005a1e <Update_State+0xc9a>
		{
			PRINTF("Update_State includes WAKE_STATE and SERVER_COMMAND\r\n");
 80059f2:	4940      	ldr	r1, [pc, #256]	@ (8005af4 <Update_State+0xd70>)
 80059f4:	2001      	movs	r0, #1
 80059f6:	f001 f9bd 	bl	8006d74 <TraceSend>
			_State ^= SERVER_COMMAND;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005a00:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005a04:	f083 0302 	eor.w	r3, r3, #2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005a0e:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

			Enable_Modem ( Data_Ptr );
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fb86 	bl	8006124 <Enable_Modem>
			//GAV insert missing pages here
			//CELL_SERVER_UPDT ( Data_Ptr );
			//Execute_Instructions ( Data_Ptr );
#endif // SKYWIRE_MODEM VALID_PACKAGE

			Clear_Memory ( Data_Ptr );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fe32 	bl	8006682 <Clear_Memory>
		}

		if ( _State & UPDATE_SERVER )
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005a24:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d027      	beq.n	8005a80 <Update_State+0xcfc>
		{
			PRINTF("Update_State includes WAKE_STATE and UPDATE_SERVER\r\n");
 8005a30:	4931      	ldr	r1, [pc, #196]	@ (8005af8 <Update_State+0xd74>)
 8005a32:	2001      	movs	r0, #1
 8005a34:	f001 f99e 	bl	8006d74 <TraceSend>
			_State ^= UPDATE_SERVER;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005a3e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005a42:	f083 0301 	eor.w	r3, r3, #1
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005a4c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

			//Enable_Modem ( Data_Ptr );

			if (!firstTimeBoot)
 8005a50:	4b2a      	ldr	r3, [pc, #168]	@ (8005afc <Update_State+0xd78>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f083 0301 	eor.w	r3, r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <Update_State+0xcfc>
			{

				//Set look for downlinks
				getFirmwareDownlink(Data_Ptr, 1);
 8005a5e:	2101      	movs	r1, #1
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f00b fe19 	bl	8011698 <getFirmwareDownlink>
				if ( mqttDataAvailable )
 8005a66:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad4 <Update_State+0xd50>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <Update_State+0xcf6>
				{
					universalDownlinkDecoder();
 8005a6e:	f001 fdad 	bl	80075cc <universalDownlinkDecoder>
					selectDownlinkOperation(Data_Ptr, WAKEUP_HB);
 8005a72:	2103      	movs	r1, #3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fefd 	bl	8007874 <selectDownlinkOperation>
				}

				Clear_Memory ( Data_Ptr );
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fe01 	bl	8006682 <Clear_Memory>
				//HAL_TIM_Base_Start_IT(&htim1);
			}
		}

		if ( _State & CELL_UPDT )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005a86:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <Update_State+0xd2e>
		{
			PRINTF("Update_State includes WAKE_STATE and CELL_UPDT\r\n");
 8005a92:	491b      	ldr	r1, [pc, #108]	@ (8005b00 <Update_State+0xd7c>)
 8005a94:	2001      	movs	r0, #1
 8005a96:	f001 f96d 	bl	8006d74 <TraceSend>
			_State |= CELL_UPDT; //GAV We can reuse this flag, rename
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005aa0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005aae:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}

		if ( _State & GET_DOWNLINKS )
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005ab8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005abc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d033      	beq.n	8005b2c <Update_State+0xda8>
		{
			PRINTF("Update_State includes WAKE_STATE and GET_DOWNLINKS\r\n");
 8005ac4:	490f      	ldr	r1, [pc, #60]	@ (8005b04 <Update_State+0xd80>)
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	f001 f954 	bl	8006d74 <TraceSend>
			_State ^= GET_DOWNLINKS;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	e01b      	b.n	8005b08 <Update_State+0xd84>
 8005ad0:	2007a27b 	.word	0x2007a27b
 8005ad4:	2007a271 	.word	0x2007a271
 8005ad8:	0802d0bc 	.word	0x0802d0bc
 8005adc:	0802d0ec 	.word	0x0802d0ec
 8005ae0:	2007a264 	.word	0x2007a264
 8005ae4:	0802cb58 	.word	0x0802cb58
 8005ae8:	0802d11c 	.word	0x0802d11c
 8005aec:	2007a26c 	.word	0x2007a26c
 8005af0:	0802d158 	.word	0x0802d158
 8005af4:	0802d188 	.word	0x0802d188
 8005af8:	0802d1c0 	.word	0x0802d1c0
 8005afc:	20000353 	.word	0x20000353
 8005b00:	0802d1f8 	.word	0x0802d1f8
 8005b04:	0802d22c 	.word	0x0802d22c
 8005b08:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005b0c:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005b10:	f083 6380 	eor.w	r3, r3, #67108864	@ 0x4000000
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005b1a:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
			Enable_Modem ( Data_Ptr );
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fb00 	bl	8006124 <Enable_Modem>
			getFirmwareDownlink(Data_Ptr, 1);
 8005b24:	2101      	movs	r1, #1
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f00b fdb6 	bl	8011698 <getFirmwareDownlink>
		}

		if (fwPending)
 8005b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8005d6c <Update_State+0xfe8>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <Update_State+0xdb6>
		{
			startOTAProcess(Data_Ptr);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 fcbd 	bl	80074b4 <startOTAProcess>
		}
		//checkTime();

		if (firstTimeBoot)
 8005b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d70 <Update_State+0xfec>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d04c      	beq.n	8005bdc <Update_State+0xe58>
		{
			PRINTF("Update_State HBonBootup added HB\r\n");
 8005b42:	498c      	ldr	r1, [pc, #560]	@ (8005d74 <Update_State+0xff0>)
 8005b44:	2001      	movs	r0, #1
 8005b46:	f001 f915 	bl	8006d74 <TraceSend>
			HeartBeat ( Data_Ptr );
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f007 fd1a 	bl	800d584 <HeartBeat>
			//  calculateNextHBTime();
			//	calculateNextTime(&checkHB, &nextHB, 300);
			if(!gpsError)
 8005b50:	4b89      	ldr	r3, [pc, #548]	@ (8005d78 <Update_State+0xff4>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f083 0301 	eor.w	r3, r3, #1
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <Update_State+0xde2>
			{
				sendGPS(Data_Ptr);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f005 f944 	bl	800adec <sendGPS>
 8005b64:	e003      	b.n	8005b6e <Update_State+0xdea>
			}
			else
			{
				sendDiagnostic(&memory, "\"gps\":[\"unknown_location\"]");
 8005b66:	4985      	ldr	r1, [pc, #532]	@ (8005d7c <Update_State+0xff8>)
 8005b68:	4885      	ldr	r0, [pc, #532]	@ (8005d80 <Update_State+0xffc>)
 8005b6a:	f00c fe7b 	bl	8012864 <sendDiagnostic>
			}

			// Send Diagnostic message battery charger cable state

			if (chargeCableReading())
 8005b6e:	f003 fe29 	bl	80097c4 <chargeCableReading>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <Update_State+0xdfe>
			{
				sendDiagnostic(&memory, "\"battery\":[\"plugged_in\"]");
 8005b78:	4982      	ldr	r1, [pc, #520]	@ (8005d84 <Update_State+0x1000>)
 8005b7a:	4881      	ldr	r0, [pc, #516]	@ (8005d80 <Update_State+0xffc>)
 8005b7c:	f00c fe72 	bl	8012864 <sendDiagnostic>
 8005b80:	e003      	b.n	8005b8a <Update_State+0xe06>
			}
			else
			{
				sendDiagnostic(&memory, "\"battery\":[\"unplugged\"]");
 8005b82:	4981      	ldr	r1, [pc, #516]	@ (8005d88 <Update_State+0x1004>)
 8005b84:	487e      	ldr	r0, [pc, #504]	@ (8005d80 <Update_State+0xffc>)
 8005b86:	f00c fe6d 	bl	8012864 <sendDiagnostic>
			}

			if (_State & HB_UPDT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005b90:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <Update_State+0xe30>
			{
				_State ^= HB_UPDT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005ba2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005ba6:	f083 6300 	eor.w	r3, r3, #134217728	@ 0x8000000
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005bb0:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
			}

			HAL_RTC_GetTime ( &hrtc , &nextHB.rtcTime , RTC_FORMAT_BIN );
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4975      	ldr	r1, [pc, #468]	@ (8005d8c <Update_State+0x1008>)
 8005bb8:	4875      	ldr	r0, [pc, #468]	@ (8005d90 <Update_State+0x100c>)
 8005bba:	f01b fb31 	bl	8021220 <HAL_RTC_GetTime>
			HAL_RTC_GetDate ( &hrtc , &nextHB.rtcDate , RTC_FORMAT_BIN );
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4974      	ldr	r1, [pc, #464]	@ (8005d94 <Update_State+0x1010>)
 8005bc2:	4873      	ldr	r0, [pc, #460]	@ (8005d90 <Update_State+0x100c>)
 8005bc4:	f01b fc24 	bl	8021410 <HAL_RTC_GetDate>
			calculateNextTime( &nextHB, Data_Ptr->heartBeatData.hbInterval );
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005bce:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	486d      	ldr	r0, [pc, #436]	@ (8005d8c <Update_State+0x1008>)
 8005bd6:	f002 fdf9 	bl	80087cc <calculateNextTime>
 8005bda:	e0ae      	b.n	8005d3a <Update_State+0xfb6>

		}
		else //if(!firstTimeBoot)
		{
			if ( _State & GPS_UPDT )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005be2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d06c      	beq.n	8005cc8 <Update_State+0xf44>
			{
				PRINTF("Update_State includes WAKE_STATE and GPS_UPDT\r\n");
 8005bee:	496a      	ldr	r1, [pc, #424]	@ (8005d98 <Update_State+0x1014>)
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f001 f8bf 	bl	8006d74 <TraceSend>
				_State ^= GPS_UPDT;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005bfc:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005c00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005c0a:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

				if(!isModemPowered)
 8005c0e:	4b63      	ldr	r3, [pc, #396]	@ (8005d9c <Update_State+0x1018>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	f083 0301 	eor.w	r3, r3, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <Update_State+0xe9e>
				{
					Enable_Modem_PWR(Data_Ptr);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa9f 	bl	8006160 <Enable_Modem_PWR>
				}
				getGPS(Data_Ptr);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f005 f830 	bl	800ac88 <getGPS>

				if (!cellInitialized)
 8005c28:	4b5d      	ldr	r3, [pc, #372]	@ (8005da0 <Update_State+0x101c>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	f083 0301 	eor.w	r3, r3, #1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <Update_State+0xebe>
				{
					CELL_Set_PDP ( PDP_NOT_SET );
 8005c36:	2001      	movs	r0, #1
 8005c38:	f00b f91a 	bl	8010e70 <CELL_Set_PDP>
					CELL_reInit(Data_Ptr);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f006 fdcf 	bl	800c7e0 <CELL_reInit>
				}
				getFirmwareDownlink(Data_Ptr, 1);
 8005c42:	2101      	movs	r1, #1
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f00b fd27 	bl	8011698 <getFirmwareDownlink>
				if ( mqttDataAvailable )
 8005c4a:	4b56      	ldr	r3, [pc, #344]	@ (8005da4 <Update_State+0x1020>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <Update_State+0xeda>
				{
					universalDownlinkDecoder();
 8005c52:	f001 fcbb 	bl	80075cc <universalDownlinkDecoder>
					selectDownlinkOperation(Data_Ptr, IDLE);
 8005c56:	2105      	movs	r1, #5
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 fe0b 	bl	8007874 <selectDownlinkOperation>
				}

				if (_State & MOVEMENT_UPDT)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005c64:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01c      	beq.n	8005caa <Update_State+0xf26>
				{
					PRINTF("Update_State includes WAKE_STATE and MOVEMENT_UPDT\r\n");
 8005c70:	494d      	ldr	r1, [pc, #308]	@ (8005da8 <Update_State+0x1024>)
 8005c72:	2001      	movs	r0, #1
 8005c74:	f001 f87e 	bl	8006d74 <TraceSend>
					_State ^= MOVEMENT_UPDT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005c7e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005c82:	f083 5380 	eor.w	r3, r3, #268435456	@ 0x10000000
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005c8c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

					if (!movementstop)
 8005c90:	4b46      	ldr	r3, [pc, #280]	@ (8005dac <Update_State+0x1028>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f083 0301 	eor.w	r3, r3, #1
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <Update_State+0xf26>
					{
						cellMovementStart(Data_Ptr, movementstop);
 8005c9e:	4b43      	ldr	r3, [pc, #268]	@ (8005dac <Update_State+0x1028>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f007 fb57 	bl	800d358 <cellMovementStart>
					}

				}
				if(!gpsError)
 8005caa:	4b33      	ldr	r3, [pc, #204]	@ (8005d78 <Update_State+0xff4>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f083 0301 	eor.w	r3, r3, #1
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <Update_State+0xf3c>
				{
					sendGPS(Data_Ptr);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f005 f897 	bl	800adec <sendGPS>
 8005cbe:	e003      	b.n	8005cc8 <Update_State+0xf44>
				}
				else
				{
					sendDiagnostic(&memory, "\"gps\":[\"unknown_location\"]");
 8005cc0:	492e      	ldr	r1, [pc, #184]	@ (8005d7c <Update_State+0xff8>)
 8005cc2:	482f      	ldr	r0, [pc, #188]	@ (8005d80 <Update_State+0xffc>)
 8005cc4:	f00c fdce 	bl	8012864 <sendDiagnostic>
				}
			}

			if (_State & HB_UPDT)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005cce:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d022      	beq.n	8005d20 <Update_State+0xf9c>
			{
				PRINTF("Update_State includes WAKE_STATE and HB_UPDT\r\n");
 8005cda:	4935      	ldr	r1, [pc, #212]	@ (8005db0 <Update_State+0x102c>)
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f001 f849 	bl	8006d74 <TraceSend>
				_State ^= HB_UPDT;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005ce8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005cec:	f083 6300 	eor.w	r3, r3, #134217728	@ 0x8000000
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005cf6:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

				if (!cellInitialized)
 8005cfa:	4b29      	ldr	r3, [pc, #164]	@ (8005da0 <Update_State+0x101c>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f083 0301 	eor.w	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <Update_State+0xf90>
				{
					Enable_Modem_PWR(Data_Ptr);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fa29 	bl	8006160 <Enable_Modem_PWR>
					CELL_reInit(Data_Ptr);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f006 fd66 	bl	800c7e0 <CELL_reInit>
				}

				NightConfirmed = true;   //GAV "fix" added to prevent extra modem enable in "sendHeartBeat
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <Update_State+0x1030>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
				sendHeartBeat(Data_Ptr);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f002 fb38 	bl	8008390 <sendHeartBeat>
			}

			if (movementstop)
 8005d20:	4b22      	ldr	r3, [pc, #136]	@ (8005dac <Update_State+0x1028>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d008      	beq.n	8005d3a <Update_State+0xfb6>
			{
				cellMovementStart(Data_Ptr, movementstop);
 8005d28:	4b20      	ldr	r3, [pc, #128]	@ (8005dac <Update_State+0x1028>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f007 fb12 	bl	800d358 <cellMovementStart>
				movementstop = false;
 8005d34:	4b1d      	ldr	r3, [pc, #116]	@ (8005dac <Update_State+0x1028>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]

	}

	//PRINTF("Night reset\r\n");

	NightConfirmed = false;
 8005d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8005db4 <Update_State+0x1030>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
	firstTimeBoot = false;
 8005d40:	4b0b      	ldr	r3, [pc, #44]	@ (8005d70 <Update_State+0xfec>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
	_State |= SLEEP_STATE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8005d4c:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8005d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8005d5a:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358

#ifdef Log
	Write_Log ( LOG_DEVICE_CYCLE );
 8005d5e:	4816      	ldr	r0, [pc, #88]	@ (8005db8 <Update_State+0x1034>)
 8005d60:	f000 fee4 	bl	8006b2c <Write_Log>
#endif // Log
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d6c:	2007a270 	.word	0x2007a270
 8005d70:	20000353 	.word	0x20000353
 8005d74:	0802d264 	.word	0x0802d264
 8005d78:	20000355 	.word	0x20000355
 8005d7c:	0802d288 	.word	0x0802d288
 8005d80:	2007d870 	.word	0x2007d870
 8005d84:	0802d2a4 	.word	0x0802d2a4
 8005d88:	0802d2c0 	.word	0x0802d2c0
 8005d8c:	2007a194 	.word	0x2007a194
 8005d90:	2007d344 	.word	0x2007d344
 8005d94:	2007a1b0 	.word	0x2007a1b0
 8005d98:	0802d2d8 	.word	0x0802d2d8
 8005d9c:	2007a26e 	.word	0x2007a26e
 8005da0:	2007a27b 	.word	0x2007a27b
 8005da4:	2007a271 	.word	0x2007a271
 8005da8:	0802d308 	.word	0x0802d308
 8005dac:	2007a275 	.word	0x2007a275
 8005db0:	0802d340 	.word	0x0802d340
 8005db4:	2007a26f 	.word	0x2007a26f
 8005db8:	0802d370 	.word	0x0802d370

08005dbc <OTAProcess>:

void OTAProcess (MEM_PTR *Data_Ptr, OTA_FILE_TYPE *OTAData )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	@ 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	OTAData->batchNum = 1;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	711a      	strb	r2, [r3, #4]
	Data_Ptr->Flash.Index = 0;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
	// TODO: set last ROM address to start of Page1
	Refresh_Watchdog;
 8005dd2:	4897      	ldr	r0, [pc, #604]	@ (8006030 <OTAProcess+0x274>)
 8005dd4:	f015 f9fd 	bl	801b1d2 <HAL_IWDG_Refresh>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <OTAProcess+0x26>
 8005dde:	f00f fcd9 	bl	8015794 <Error_Handler>
	clearFirmwareArray(OTAData);
 8005de2:	6838      	ldr	r0, [r7, #0]
 8005de4:	f00b fdac 	bl	8011940 <clearFirmwareArray>
	int errorMode = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t calCRC = 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	623b      	str	r3, [r7, #32]
	OTAData->numberOfFiles = 1;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2201      	movs	r2, #1
 8005df4:	705a      	strb	r2, [r3, #1]
	for (int fwFile = 0; fwFile < OTAData->numberOfFiles; fwFile++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	e0fe      	b.n	8005ffa <OTAProcess+0x23e>
	{
		getFirmwareDownlink(Data_Ptr, 5);
 8005dfc:	2105      	movs	r1, #5
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f00b fc4a 	bl	8011698 <getFirmwareDownlink>
		// gets 1st batch
		if(populateFirmwareArray(OTAData)>1)
 8005e04:	6838      	ldr	r0, [r7, #0]
 8005e06:	f001 ffb9 	bl	8007d7c <populateFirmwareArray>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d907      	bls.n	8005e20 <OTAProcess+0x64>
		{
			errorMode = 1;
 8005e10:	2301      	movs	r3, #1
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
			PRINTF("Break 1 error is %d\r\n", errorMode);
 8005e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e16:	4987      	ldr	r1, [pc, #540]	@ (8006034 <OTAProcess+0x278>)
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f000 ffab 	bl	8006d74 <TraceSend>
			break;
 8005e1e:	e0f3      	b.n	8006008 <OTAProcess+0x24c>
		}

		Refresh_Watchdog;
 8005e20:	4883      	ldr	r0, [pc, #524]	@ (8006030 <OTAProcess+0x274>)
 8005e22:	f015 f9d6 	bl	801b1d2 <HAL_IWDG_Refresh>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <OTAProcess+0x74>
 8005e2c:	f00f fcb2 	bl	8015794 <Error_Handler>

		decodeFwPage(OTAData);
 8005e30:	6838      	ldr	r0, [r7, #0]
 8005e32:	f001 f94f 	bl	80070d4 <decodeFwPage>

		OTAData->batchNum ++; // getting second batch
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	711a      	strb	r2, [r3, #4]
		FW_Next(Data_Ptr, &otaData);
 8005e42:	497d      	ldr	r1, [pc, #500]	@ (8006038 <OTAProcess+0x27c>)
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f008 fb3b 	bl	800e4c0 <FW_Next>

		int numBatches = ((OTAData->numberOfPages)/5);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	789b      	ldrb	r3, [r3, #2]
 8005e4e:	4a7b      	ldr	r2, [pc, #492]	@ (800603c <OTAProcess+0x280>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	089b      	lsrs	r3, r3, #2
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	61bb      	str	r3, [r7, #24]
		if (OTAData->numberOfPages % 5 != 0)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	789a      	ldrb	r2, [r3, #2]
 8005e5e:	4b77      	ldr	r3, [pc, #476]	@ (800603c <OTAProcess+0x280>)
 8005e60:	fba3 1302 	umull	r1, r3, r3, r2
 8005e64:	0899      	lsrs	r1, r3, #2
 8005e66:	460b      	mov	r3, r1
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <OTAProcess+0xbe>
		{
			numBatches++; // add another batch for the remainder
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61bb      	str	r3, [r7, #24]
		}

		for (int retreivedBatch = 2; retreivedBatch <= numBatches; retreivedBatch++)
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e02a      	b.n	8005ed6 <OTAProcess+0x11a>
		{
			getFirmwareDownlink(Data_Ptr, 5);
 8005e80:	2105      	movs	r1, #5
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f00b fc08 	bl	8011698 <getFirmwareDownlink>
			Refresh_Watchdog;
 8005e88:	4869      	ldr	r0, [pc, #420]	@ (8006030 <OTAProcess+0x274>)
 8005e8a:	f015 f9a2 	bl	801b1d2 <HAL_IWDG_Refresh>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <OTAProcess+0xdc>
 8005e94:	f00f fc7e 	bl	8015794 <Error_Handler>

			// Assemble batch in order in volatile memory
			if(populateFirmwareArray(OTAData)>1)
 8005e98:	6838      	ldr	r0, [r7, #0]
 8005e9a:	f001 ff6f 	bl	8007d7c <populateFirmwareArray>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d907      	bls.n	8005eb4 <OTAProcess+0xf8>
			{
				errorMode = 2;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24
				PRINTF("Break 2 error is %d\r\n", errorMode);
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eaa:	4965      	ldr	r1, [pc, #404]	@ (8006040 <OTAProcess+0x284>)
 8005eac:	2001      	movs	r0, #1
 8005eae:	f000 ff61 	bl	8006d74 <TraceSend>
				break;
 8005eb2:	e014      	b.n	8005ede <OTAProcess+0x122>
			}

			if (retreivedBatch < numBatches)
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	da09      	bge.n	8005ed0 <OTAProcess+0x114>
			{
				OTAData->batchNum ++;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	791b      	ldrb	r3, [r3, #4]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	711a      	strb	r2, [r3, #4]
				FW_Next(Data_Ptr, &otaData);
 8005ec8:	495b      	ldr	r1, [pc, #364]	@ (8006038 <OTAProcess+0x27c>)
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f008 faf8 	bl	800e4c0 <FW_Next>
		for (int retreivedBatch = 2; retreivedBatch <= numBatches; retreivedBatch++)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	ddd0      	ble.n	8005e80 <OTAProcess+0xc4>
			}
		}
		//fakeMissing();
		otaCheckMissingPages(OTAData);
 8005ede:	6838      	ldr	r0, [r7, #0]
 8005ee0:	f00b fc7e 	bl	80117e0 <otaCheckMissingPages>
		Refresh_Watchdog;
 8005ee4:	4852      	ldr	r0, [pc, #328]	@ (8006030 <OTAProcess+0x274>)
 8005ee6:	f015 f974 	bl	801b1d2 <HAL_IWDG_Refresh>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <OTAProcess+0x138>
 8005ef0:	f00f fc50 	bl	8015794 <Error_Handler>
		// find missing pages, add received pages string and missing pages string, uint16 missing pages

		FW_Acknowledge(Data_Ptr, OTAData);
 8005ef4:	6839      	ldr	r1, [r7, #0]
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f008 f93c 	bl	800e174 <FW_Acknowledge>

		//GAV, ONLY UNTIL EVGEN FIXES MISSING PAGES HANDLING OVER 5 ON SERVER
		if (OTAData->numberOfMissingPages > 5)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	78db      	ldrb	r3, [r3, #3]
 8005f00:	2b05      	cmp	r3, #5
 8005f02:	d902      	bls.n	8005f0a <OTAProcess+0x14e>
		{
			errorMode = 5;
 8005f04:	2305      	movs	r3, #5
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
			break;
 8005f08:	e07e      	b.n	8006008 <OTAProcess+0x24c>
		}
		if (OTAData->numberOfMissingPages != 0)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d036      	beq.n	8005f80 <OTAProcess+0x1c4>
		{
			OTAData->batchNum = 0;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	711a      	strb	r2, [r3, #4]

			numBatches = (((OTAData->numberOfMissingPages)/5)+1);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	78db      	ldrb	r3, [r3, #3]
 8005f1c:	4a47      	ldr	r2, [pc, #284]	@ (800603c <OTAProcess+0x280>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	089b      	lsrs	r3, r3, #2
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	3301      	adds	r3, #1
 8005f28:	61bb      	str	r3, [r7, #24]

			if (numBatches == 0)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <OTAProcess+0x178>
			{
				numBatches = 1;
 8005f30:	2301      	movs	r3, #1
 8005f32:	61bb      	str	r3, [r7, #24]
			}
			for (int fwPage = 0; fwPage < numBatches; fwPage++)
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	e01e      	b.n	8005f78 <OTAProcess+0x1bc>
			{
				getFirmwareDownlink(Data_Ptr, 5);
 8005f3a:	2105      	movs	r1, #5
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f00b fbab 	bl	8011698 <getFirmwareDownlink>

				if(populateFirmwareArray(OTAData)>1)
 8005f42:	6838      	ldr	r0, [r7, #0]
 8005f44:	f001 ff1a 	bl	8007d7c <populateFirmwareArray>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d902      	bls.n	8005f54 <OTAProcess+0x198>
				{
					errorMode = 3;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005f52:	e015      	b.n	8005f80 <OTAProcess+0x1c4>
				}

				if (fwPage < numBatches - 1)
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	da09      	bge.n	8005f72 <OTAProcess+0x1b6>
				{
					OTAData->batchNum ++;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	791b      	ldrb	r3, [r3, #4]
 8005f62:	3301      	adds	r3, #1
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	711a      	strb	r2, [r3, #4]
					FW_Next(Data_Ptr, &otaData);
 8005f6a:	4933      	ldr	r1, [pc, #204]	@ (8006038 <OTAProcess+0x27c>)
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f008 faa7 	bl	800e4c0 <FW_Next>
			for (int fwPage = 0; fwPage < numBatches; fwPage++)
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	3301      	adds	r3, #1
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	dbdc      	blt.n	8005f3a <OTAProcess+0x17e>
				}
			}
		}
		// kcs add the following code
		PRINTF("Break 3 error is %d\r\n", errorMode);
 8005f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f82:	4930      	ldr	r1, [pc, #192]	@ (8006044 <OTAProcess+0x288>)
 8005f84:	2001      	movs	r0, #1
 8005f86:	f000 fef5 	bl	8006d74 <TraceSend>
		// if any missing pages found or if error !=0 send crc mismatch
		if (errorMode != 0)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <OTAProcess+0x1e0>
		{
			PRINTF("Error in Receiving Data: Error is %d\r\n", errorMode);
 8005f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f92:	492d      	ldr	r1, [pc, #180]	@ (8006048 <OTAProcess+0x28c>)
 8005f94:	2001      	movs	r0, #1
 8005f96:	f000 feed 	bl	8006d74 <TraceSend>
			break;
 8005f9a:	e035      	b.n	8006008 <OTAProcess+0x24c>
		}
		if (OTAData->numberOfMissingPages > 0)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	78db      	ldrb	r3, [r3, #3]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <OTAProcess+0x1f4>
		{
			FW_CRC_Ack(Data_Ptr, true, OTAData);  //should be false, true for testing
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f008 fbed 	bl	800e788 <FW_CRC_Ack>
 8005fae:	e021      	b.n	8005ff4 <OTAProcess+0x238>
		}
		else
		{
			PRINTF("In retry loop\r\n");
 8005fb0:	4926      	ldr	r1, [pc, #152]	@ (800604c <OTAProcess+0x290>)
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	f000 fede 	bl	8006d74 <TraceSend>

			//temporary "false" until fwCRCFileCheck is built
			int testing = 0; // turn to any number other than 1 for real loop
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
			if (testing==1)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d109      	bne.n	8005fd6 <OTAProcess+0x21a>
			{
				FW_CRC_Ack(Data_Ptr, true, OTAData);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f008 fbde 	bl	800e788 <FW_CRC_Ack>
				getFirmwareDownlink(Data_Ptr, 3);
 8005fcc:	2103      	movs	r1, #3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f00b fb62 	bl	8011698 <getFirmwareDownlink>
 8005fd4:	e00e      	b.n	8005ff4 <OTAProcess+0x238>
			}
			else
			{
				PRINTF("Decoding Data\r\n");
 8005fd6:	491e      	ldr	r1, [pc, #120]	@ (8006050 <OTAProcess+0x294>)
 8005fd8:	2001      	movs	r0, #1
 8005fda:	f000 fecb 	bl	8006d74 <TraceSend>
				calCRC = FWDecodeFile(OTAData, Data_Ptr);
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	6838      	ldr	r0, [r7, #0]
 8005fe2:	f00b fcd9 	bl	8011998 <FWDecodeFile>
 8005fe6:	6238      	str	r0, [r7, #32]
				PRINTF("CRC calc is %d or hex %x\r\n",calCRC,calCRC);
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	6a3a      	ldr	r2, [r7, #32]
 8005fec:	4919      	ldr	r1, [pc, #100]	@ (8006054 <OTAProcess+0x298>)
 8005fee:	2001      	movs	r0, #1
 8005ff0:	f000 fec0 	bl	8006d74 <TraceSend>
	for (int fwFile = 0; fwFile < OTAData->numberOfFiles; fwFile++)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	461a      	mov	r2, r3
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4293      	cmp	r3, r2
 8006004:	f6ff aefa 	blt.w	8005dfc <OTAProcess+0x40>
			}
		}
	} // end of File loop

	// kcs add the following code
	PRINTF("Break 4 error is %d\r\n", errorMode);
 8006008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600a:	4913      	ldr	r1, [pc, #76]	@ (8006058 <OTAProcess+0x29c>)
 800600c:	2001      	movs	r0, #1
 800600e:	f000 feb1 	bl	8006d74 <TraceSend>

	// if error !=0 send crc mismatch
	if (errorMode != 0)
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	2b00      	cmp	r3, #0
 8006016:	d021      	beq.n	800605c <OTAProcess+0x2a0>
	{
		PRINTF("Error in Receiving Data: Error is %d\r\n", errorMode);
 8006018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601a:	490b      	ldr	r1, [pc, #44]	@ (8006048 <OTAProcess+0x28c>)
 800601c:	2001      	movs	r0, #1
 800601e:	f000 fea9 	bl	8006d74 <TraceSend>
		FW_CRC_Ack(Data_Ptr, false, OTAData);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f008 fbae 	bl	800e788 <FW_CRC_Ack>

		Boot_Change(currentBank);
		// system will reboot in the Boot_Change function
		NVIC_SystemReset();
	}
}
 800602c:	e045      	b.n	80060ba <OTAProcess+0x2fe>
 800602e:	bf00      	nop
 8006030:	2007d0bc 	.word	0x2007d0bc
 8006034:	0802d380 	.word	0x0802d380
 8006038:	2002bbe0 	.word	0x2002bbe0
 800603c:	cccccccd 	.word	0xcccccccd
 8006040:	0802d398 	.word	0x0802d398
 8006044:	0802d3b0 	.word	0x0802d3b0
 8006048:	0802d3c8 	.word	0x0802d3c8
 800604c:	0802d3f0 	.word	0x0802d3f0
 8006050:	0802d400 	.word	0x0802d400
 8006054:	0802d410 	.word	0x0802d410
 8006058:	0802d42c 	.word	0x0802d42c
		PRINTF("Break 5 error is %d\r\n", errorMode);
 800605c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605e:	4918      	ldr	r1, [pc, #96]	@ (80060c0 <OTAProcess+0x304>)
 8006060:	2001      	movs	r0, #1
 8006062:	f000 fe87 	bl	8006d74 <TraceSend>
		bool crcIsGood = fwCRCFileCheck(calCRC, OTAData);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6a38      	ldr	r0, [r7, #32]
 800606a:	f000 f82f 	bl	80060cc <fwCRCFileCheck>
 800606e:	4603      	mov	r3, r0
 8006070:	72fb      	strb	r3, [r7, #11]
		FW_CRC_Ack(Data_Ptr, crcIsGood, OTAData);
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f008 fb85 	bl	800e788 <FW_CRC_Ack>
		saveParamDataToFlash(Data_Ptr);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f00d f980 	bl	8013384 <saveParamDataToFlash>
		PRINTF("Reflashing\r\n");
 8006084:	490f      	ldr	r1, [pc, #60]	@ (80060c4 <OTAProcess+0x308>)
 8006086:	2001      	movs	r0, #1
 8006088:	f000 fe74 	bl	8006d74 <TraceSend>
		BANK_TYPE currentBank =  getSwapBank();
 800608c:	f7fd fdde 	bl	8003c4c <getSwapBank>
 8006090:	4603      	mov	r3, r0
 8006092:	72bb      	strb	r3, [r7, #10]
		Reflash(Data_Ptr, currentBank);
 8006094:	7abb      	ldrb	r3, [r7, #10]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7fd fbe1 	bl	8003860 <Reflash>
		PRINTF("Swapping Banks\r\n");
 800609e:	490a      	ldr	r1, [pc, #40]	@ (80060c8 <OTAProcess+0x30c>)
 80060a0:	2001      	movs	r0, #1
 80060a2:	f000 fe67 	bl	8006d74 <TraceSend>
		HAL_Delay ( 1000 );
 80060a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060aa:	f010 f9eb 	bl	8016484 <HAL_Delay>
		Boot_Change(currentBank);
 80060ae:	7abb      	ldrb	r3, [r7, #10]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fd fba1 	bl	80037f8 <Boot_Change>
		NVIC_SystemReset();
 80060b6:	f7fe fb4b 	bl	8004750 <__NVIC_SystemReset>
}
 80060ba:	3728      	adds	r7, #40	@ 0x28
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	0802d444 	.word	0x0802d444
 80060c4:	0802d45c 	.word	0x0802d45c
 80060c8:	0802d46c 	.word	0x0802d46c

080060cc <fwCRCFileCheck>:

bool fwCRCFileCheck(uint32_t calculated, OTA_FILE_TYPE *OTAData)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	bool crcValid = false;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]

	if(calculated == OTAData->xmitCRC)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d101      	bne.n	80060e8 <fwCRCFileCheck+0x1c>
	{
		crcValid = true;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
	}

	PRINTF("Calculated CRC: %lu\r\n", calculated);
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	490b      	ldr	r1, [pc, #44]	@ (8006118 <fwCRCFileCheck+0x4c>)
 80060ec:	2001      	movs	r0, #1
 80060ee:	f000 fe41 	bl	8006d74 <TraceSend>
	PRINTF("Transmitted CRC: %lu\r\n", OTAData->xmitCRC);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	461a      	mov	r2, r3
 80060f8:	4908      	ldr	r1, [pc, #32]	@ (800611c <fwCRCFileCheck+0x50>)
 80060fa:	2001      	movs	r0, #1
 80060fc:	f000 fe3a 	bl	8006d74 <TraceSend>
	PRINTF("CRC Valid Bool: %d\r\n", crcValid);
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	461a      	mov	r2, r3
 8006104:	4906      	ldr	r1, [pc, #24]	@ (8006120 <fwCRCFileCheck+0x54>)
 8006106:	2001      	movs	r0, #1
 8006108:	f000 fe34 	bl	8006d74 <TraceSend>
	return crcValid;
 800610c:	7bfb      	ldrb	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	0802d480 	.word	0x0802d480
 800611c:	0802d498 	.word	0x0802d498
 8006120:	0802d4b0 	.word	0x0802d4b0

08006124 <Enable_Modem>:
		XPS_COMMAND ( Data_Ptr );
	}
}

void Enable_Modem ( MEM_PTR *Data_Ptr )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	Refresh_Watchdog;
 800612c:	480a      	ldr	r0, [pc, #40]	@ (8006158 <Enable_Modem+0x34>)
 800612e:	f015 f850 	bl	801b1d2 <HAL_IWDG_Refresh>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <Enable_Modem+0x18>
 8006138:	f00f fb2c 	bl	8015794 <Error_Handler>
	//	if (CELL_Get_State () == CELL_OK)
	//		return;
	//#endif //SKYWIRE_MODEM

#ifdef Log_Level_0
	Log_Single ( MODEM_EN_MSG );
 800613c:	4807      	ldr	r0, [pc, #28]	@ (800615c <Enable_Modem+0x38>)
 800613e:	f000 fcb5 	bl	8006aac <Log_Single>
#endif //Log_Level_0

	Enable_Modem_PWR ( Data_Ptr );
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f80c 	bl	8006160 <Enable_Modem_PWR>

	CELL_Init ( Data_Ptr );
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f006 f9ad 	bl	800c4a8 <CELL_Init>

}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	2007d0bc 	.word	0x2007d0bc
 800615c:	0802d4c8 	.word	0x0802d4c8

08006160 <Enable_Modem_PWR>:

void Enable_Modem_PWR ( MEM_PTR *Data_Ptr )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
	Refresh_Watchdog;
 8006168:	4858      	ldr	r0, [pc, #352]	@ (80062cc <Enable_Modem_PWR+0x16c>)
 800616a:	f015 f832 	bl	801b1d2 <HAL_IWDG_Refresh>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <Enable_Modem_PWR+0x18>
 8006174:	f00f fb0e 	bl	8015794 <Error_Handler>

	if (!isModemPowered)
 8006178:	4b55      	ldr	r3, [pc, #340]	@ (80062d0 <Enable_Modem_PWR+0x170>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f083 0301 	eor.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 809a 	beq.w	80062bc <Enable_Modem_PWR+0x15c>
	{
		//Set GPIO off for tied modem power lines
		//HAL_GPIO_WritePin ( USB_Power_Enable_GPIO_Port , USB_Power_Enable_Pin , GPIO_PIN_SET );
		//HAL_GPIO_WritePin ( USB_Power_Switch_On_GPIO_Port , USB_Power_Switch_On_Pin , GPIO_PIN_SET );
		HAL_GPIO_WritePin ( Cell_Enable_GPIO_Port , Cell_Enable_Pin , GPIO_PIN_SET );
 8006188:	2201      	movs	r2, #1
 800618a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800618e:	4851      	ldr	r0, [pc, #324]	@ (80062d4 <Enable_Modem_PWR+0x174>)
 8006190:	f014 f800 	bl	801a194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( Cell_DVS_GPIO_Port , Cell_DVS_Pin , GPIO_PIN_SET );
 8006194:	2201      	movs	r2, #1
 8006196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800619a:	484f      	ldr	r0, [pc, #316]	@ (80062d8 <Enable_Modem_PWR+0x178>)
 800619c:	f013 fffa 	bl	801a194 <HAL_GPIO_WritePin>

		int count = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
		int end = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]
		do
		{
			if (HAL_I2C_IsDeviceReady ( &hi2c1 , MAX77801_SLAVE_ADDRESS , 20 , 0x0F ) != HAL_OK)
 80061a8:	230f      	movs	r3, #15
 80061aa:	2214      	movs	r2, #20
 80061ac:	2130      	movs	r1, #48	@ 0x30
 80061ae:	484b      	ldr	r0, [pc, #300]	@ (80062dc <Enable_Modem_PWR+0x17c>)
 80061b0:	f014 fb30 	bl	801a814 <HAL_I2C_IsDeviceReady>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <Enable_Modem_PWR+0x62>
			{
				count ++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e001      	b.n	80061c6 <Enable_Modem_PWR+0x66>
			}
			else
				end = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	60bb      	str	r3, [r7, #8]
		}
		while ((count < 20) && (end = 0));
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b13      	cmp	r3, #19
 80061ca:	dc04      	bgt.n	80061d6 <Enable_Modem_PWR+0x76>
 80061cc:	2300      	movs	r3, #0
 80061ce:	60bb      	str	r3, [r7, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e8      	bne.n	80061a8 <Enable_Modem_PWR+0x48>
		count = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
		Refresh_Watchdog;
 80061da:	483c      	ldr	r0, [pc, #240]	@ (80062cc <Enable_Modem_PWR+0x16c>)
 80061dc:	f014 fff9 	bl	801b1d2 <HAL_IWDG_Refresh>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <Enable_Modem_PWR+0x8a>
 80061e6:	f00f fad5 	bl	8015794 <Error_Handler>
		Data_Ptr->Size = 5;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80061f0:	461a      	mov	r2, r3
 80061f2:	2305      	movs	r3, #5
 80061f4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		_Memory [ 0 ] = MAX77801_CNFG_1;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
		_Memory [ 1 ] = 0b00000111;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800620a:	2207      	movs	r2, #7
 800620c:	f883 2369 	strb.w	r2, [r3, #873]	@ 0x369
		_Memory [ 2 ] = 0b01110000;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8006216:	2270      	movs	r2, #112	@ 0x70
 8006218:	f883 236a 	strb.w	r2, [r3, #874]	@ 0x36a
		_Memory [ 3 ] = MAX77801_VOUT_4V;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8006222:	227f      	movs	r2, #127	@ 0x7f
 8006224:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b
		_Memory [ 4 ] = MAX77801_VOUT_4V;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800622e:	227f      	movs	r2, #127	@ 0x7f
 8006230:	f883 236c 	strb.w	r2, [r3, #876]	@ 0x36c
		while (HAL_I2C_Master_Transmit ( &hi2c1 , MAX77801_SLAVE_ADDRESS , _Memory , Data_Ptr->Size , 0xFF ) != HAL_OK);
 8006234:	bf00      	nop
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f503 3274 	add.w	r2, r3, #249856	@ 0x3d000
 800623c:	f502 725a 	add.w	r2, r2, #872	@ 0x368
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8006246:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800624a:	b29b      	uxth	r3, r3
 800624c:	21ff      	movs	r1, #255	@ 0xff
 800624e:	9100      	str	r1, [sp, #0]
 8006250:	2130      	movs	r1, #48	@ 0x30
 8006252:	4822      	ldr	r0, [pc, #136]	@ (80062dc <Enable_Modem_PWR+0x17c>)
 8006254:	f014 f8f4 	bl	801a440 <HAL_I2C_Master_Transmit>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1eb      	bne.n	8006236 <Enable_Modem_PWR+0xd6>

		Refresh_Watchdog;
 800625e:	481b      	ldr	r0, [pc, #108]	@ (80062cc <Enable_Modem_PWR+0x16c>)
 8006260:	f014 ffb7 	bl	801b1d2 <HAL_IWDG_Refresh>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <Enable_Modem_PWR+0x10e>
 800626a:	f00f fa93 	bl	8015794 <Error_Handler>
		while (HAL_I2C_IsDeviceReady ( &hi2c1 , MAX77801_SLAVE_ADDRESS , 15 , 0x0F ) != HAL_OK);
 800626e:	bf00      	nop
 8006270:	230f      	movs	r3, #15
 8006272:	220f      	movs	r2, #15
 8006274:	2130      	movs	r1, #48	@ 0x30
 8006276:	4819      	ldr	r0, [pc, #100]	@ (80062dc <Enable_Modem_PWR+0x17c>)
 8006278:	f014 facc 	bl	801a814 <HAL_I2C_IsDeviceReady>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f6      	bne.n	8006270 <Enable_Modem_PWR+0x110>

		Refresh_Watchdog;
 8006282:	4812      	ldr	r0, [pc, #72]	@ (80062cc <Enable_Modem_PWR+0x16c>)
 8006284:	f014 ffa5 	bl	801b1d2 <HAL_IWDG_Refresh>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <Enable_Modem_PWR+0x132>
 800628e:	f00f fa81 	bl	8015794 <Error_Handler>
		HAL_Delay ( 500 );
 8006292:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006296:	f010 f8f5 	bl	8016484 <HAL_Delay>
		//		HAL_Delay ( 1000 );
		//
		//		HAL_GPIO_WritePin ( Sky_On_Off_Sw_GPIO_Port , Sky_On_Off_Sw_Pin , GPIO_PIN_RESET );
		//
		//HAL_Delay(8000);
		HAL_GPIO_WritePin ( Sky_Reset_GPIO_Port , Sky_Reset_Pin , GPIO_PIN_RESET );
 800629a:	2200      	movs	r2, #0
 800629c:	2140      	movs	r1, #64	@ 0x40
 800629e:	480d      	ldr	r0, [pc, #52]	@ (80062d4 <Enable_Modem_PWR+0x174>)
 80062a0:	f013 ff78 	bl	801a194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( Sky_On_Off_Sw_GPIO_Port , Sky_On_Off_Sw_Pin , GPIO_PIN_RESET );
 80062a4:	2200      	movs	r2, #0
 80062a6:	2120      	movs	r1, #32
 80062a8:	480b      	ldr	r0, [pc, #44]	@ (80062d8 <Enable_Modem_PWR+0x178>)
 80062aa:	f013 ff73 	bl	801a194 <HAL_GPIO_WritePin>

		HAL_Delay ( 8000 );
 80062ae:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80062b2:	f010 f8e7 	bl	8016484 <HAL_Delay>
		isModemPowered = true;
 80062b6:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <Enable_Modem_PWR+0x170>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
	}

#ifdef Log_Level_0
	Log_Single ( MODEM_FN_MSG );
 80062bc:	4808      	ldr	r0, [pc, #32]	@ (80062e0 <Enable_Modem_PWR+0x180>)
 80062be:	f000 fbf5 	bl	8006aac <Log_Single>
#endif // Log_Level_0
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	2007d0bc 	.word	0x2007d0bc
 80062d0:	2007a26e 	.word	0x2007a26e
 80062d4:	42020800 	.word	0x42020800
 80062d8:	42020400 	.word	0x42020400
 80062dc:	2007d068 	.word	0x2007d068
 80062e0:	0802d4ec 	.word	0x0802d4ec

080062e4 <cameraPowerControl>:

void cameraPowerControl (bool isOn)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]

	if (isOn)
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00c      	beq.n	800630e <cameraPowerControl+0x2a>
	{
		HAL_GPIO_WritePin ( Camera_Enable_GPIO_Port , Camera_Enable_Pin , GPIO_PIN_SET );
 80062f4:	2201      	movs	r2, #1
 80062f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80062fa:	480f      	ldr	r0, [pc, #60]	@ (8006338 <cameraPowerControl+0x54>)
 80062fc:	f013 ff4a 	bl	801a194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( USB_Power_Enable_GPIO_Port , USB_Power_Enable_Pin , GPIO_PIN_SET );
 8006300:	2201      	movs	r2, #1
 8006302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006306:	480d      	ldr	r0, [pc, #52]	@ (800633c <cameraPowerControl+0x58>)
 8006308:	f013 ff44 	bl	801a194 <HAL_GPIO_WritePin>
 800630c:	e00b      	b.n	8006326 <cameraPowerControl+0x42>
	}
	else
	{
		HAL_GPIO_WritePin ( Camera_Enable_GPIO_Port , Camera_Enable_Pin , GPIO_PIN_RESET );
 800630e:	2200      	movs	r2, #0
 8006310:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006314:	4808      	ldr	r0, [pc, #32]	@ (8006338 <cameraPowerControl+0x54>)
 8006316:	f013 ff3d 	bl	801a194 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( USB_Power_Enable_GPIO_Port , USB_Power_Enable_Pin , GPIO_PIN_RESET );
 800631a:	2200      	movs	r2, #0
 800631c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006320:	4806      	ldr	r0, [pc, #24]	@ (800633c <cameraPowerControl+0x58>)
 8006322:	f013 ff37 	bl	801a194 <HAL_GPIO_WritePin>

	}
	setCameraPower( isOn );
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	4618      	mov	r0, r3
 800632a:	f7fd fe51 	bl	8003fd0 <setCameraPower>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	42020000 	.word	0x42020000
 800633c:	42020800 	.word	0x42020800

08006340 <base64_encode>:

/*
 * Encode a buffer into base64 format
 */
int base64_encode ( unsigned char *dst , size_t *dlen , const unsigned char *src , size_t slen )
{
 8006340:	b480      	push	{r7}
 8006342:	b08b      	sub	sp, #44	@ 0x2c
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
	size_t i, n;
	int C1, C2, C3;
	unsigned char *p;

	if (slen == 0) return (0);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <base64_encode+0x18>
 8006354:	2300      	movs	r3, #0
 8006356:	e0cf      	b.n	80064f8 <base64_encode+0x1b8>

	n = (slen << 3) / 6;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	4a69      	ldr	r2, [pc, #420]	@ (8006504 <base64_encode+0x1c4>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	089b      	lsrs	r3, r3, #2
 8006364:	623b      	str	r3, [r7, #32]

	switch (( slen << 3 ) - ( n * 6 ))
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	00d9      	lsls	r1, r3, #3
 800636a:	6a3a      	ldr	r2, [r7, #32]
 800636c:	4613      	mov	r3, r2
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	4413      	add	r3, r2
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	1acb      	subs	r3, r1, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d002      	beq.n	8006380 <base64_encode+0x40>
 800637a:	2b04      	cmp	r3, #4
 800637c:	d004      	beq.n	8006388 <base64_encode+0x48>
		break;
	case 4:
		n += 2;
		break;
	default:
		break;
 800637e:	e007      	b.n	8006390 <base64_encode+0x50>
		n += 3;
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	3303      	adds	r3, #3
 8006384:	623b      	str	r3, [r7, #32]
		break;
 8006386:	e003      	b.n	8006390 <base64_encode+0x50>
		n += 2;
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	3302      	adds	r3, #2
 800638c:	623b      	str	r3, [r7, #32]
		break;
 800638e:	bf00      	nop
	}

	if ( *dlen < n + 1 )
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	3301      	adds	r3, #1
 8006398:	429a      	cmp	r2, r3
 800639a:	d206      	bcs.n	80063aa <base64_encode+0x6a>
	{
		*dlen = n + 1;
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	601a      	str	r2, [r3, #0]
		return ( POLARSSL_ERR_BASE64_BUFFER_TOO_SMALL );
 80063a4:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80063a8:	e0a6      	b.n	80064f8 <base64_encode+0x1b8>
	}

	n = (slen / 3) * 3;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	4a55      	ldr	r2, [pc, #340]	@ (8006504 <base64_encode+0x1c4>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	085a      	lsrs	r2, r3, #1
 80063b4:	4613      	mov	r3, r2
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	4413      	add	r3, r2
 80063ba:	623b      	str	r3, [r7, #32]

	for ( i = 0, p = dst; i < n; i += 3 )
 80063bc:	2300      	movs	r3, #0
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e042      	b.n	800644c <base64_encode+0x10c>
	{
		C1 = *src++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	61bb      	str	r3, [r7, #24]
		C2 = *src++;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	617b      	str	r3, [r7, #20]
		C3 = *src++;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	607a      	str	r2, [r7, #4]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	613b      	str	r3, [r7, #16]

		*p++ = base64_enc_map [ (C1 >> 2) & 0x3F ];
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	109b      	asrs	r3, r3, #2
 80063e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	61f9      	str	r1, [r7, #28]
 80063f2:	4945      	ldr	r1, [pc, #276]	@ (8006508 <base64_encode+0x1c8>)
 80063f4:	5c8a      	ldrb	r2, [r1, r2]
 80063f6:	701a      	strb	r2, [r3, #0]
		*p++ = base64_enc_map [ (((C1 & 3) << 4) + (C2 >> 4)) & 0x3F ];
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	111b      	asrs	r3, r3, #4
 8006404:	4413      	add	r3, r2
 8006406:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	1c59      	adds	r1, r3, #1
 800640e:	61f9      	str	r1, [r7, #28]
 8006410:	493d      	ldr	r1, [pc, #244]	@ (8006508 <base64_encode+0x1c8>)
 8006412:	5c8a      	ldrb	r2, [r1, r2]
 8006414:	701a      	strb	r2, [r3, #0]
		*p++ = base64_enc_map [ (((C2 & 15) << 2) + (C3 >> 6)) & 0x3F ];
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	119b      	asrs	r3, r3, #6
 8006422:	4413      	add	r3, r2
 8006424:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	1c59      	adds	r1, r3, #1
 800642c:	61f9      	str	r1, [r7, #28]
 800642e:	4936      	ldr	r1, [pc, #216]	@ (8006508 <base64_encode+0x1c8>)
 8006430:	5c8a      	ldrb	r2, [r1, r2]
 8006432:	701a      	strb	r2, [r3, #0]
		*p++ = base64_enc_map [ C3 & 0x3F ];
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	61f9      	str	r1, [r7, #28]
 8006440:	4931      	ldr	r1, [pc, #196]	@ (8006508 <base64_encode+0x1c8>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
 8006444:	701a      	strb	r2, [r3, #0]
	for ( i = 0, p = dst; i < n; i += 3 )
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	3303      	adds	r3, #3
 800644a:	627b      	str	r3, [r7, #36]	@ 0x24
 800644c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	429a      	cmp	r2, r3
 8006452:	d3b8      	bcc.n	80063c6 <base64_encode+0x86>
	}

	if ( i < slen )
 8006454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d243      	bcs.n	80064e4 <base64_encode+0x1a4>
	{
		C1 = *src++;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	607a      	str	r2, [r7, #4]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	61bb      	str	r3, [r7, #24]
		C2 = ((i + 1) < slen) ? *src++ : 0;
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	3301      	adds	r3, #1
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d904      	bls.n	800647a <base64_encode+0x13a>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	e000      	b.n	800647c <base64_encode+0x13c>
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]

		*p++ = base64_enc_map [ (C1 >> 2) & 0x3F ];
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	109b      	asrs	r3, r3, #2
 8006482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	61f9      	str	r1, [r7, #28]
 800648c:	491e      	ldr	r1, [pc, #120]	@ (8006508 <base64_encode+0x1c8>)
 800648e:	5c8a      	ldrb	r2, [r1, r2]
 8006490:	701a      	strb	r2, [r3, #0]
		*p++ = base64_enc_map [ (((C1 & 3) << 4) + (C2 >> 4)) & 0x3F ];
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	111b      	asrs	r3, r3, #4
 800649e:	4413      	add	r3, r2
 80064a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	61f9      	str	r1, [r7, #28]
 80064aa:	4917      	ldr	r1, [pc, #92]	@ (8006508 <base64_encode+0x1c8>)
 80064ac:	5c8a      	ldrb	r2, [r1, r2]
 80064ae:	701a      	strb	r2, [r3, #0]

		if ((i + 1) < slen) *p++ = base64_enc_map [ ((C2 & 15) << 2) & 0x3F ];
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	3301      	adds	r3, #1
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90a      	bls.n	80064d0 <base64_encode+0x190>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	1c59      	adds	r1, r3, #1
 80064c6:	61f9      	str	r1, [r7, #28]
 80064c8:	490f      	ldr	r1, [pc, #60]	@ (8006508 <base64_encode+0x1c8>)
 80064ca:	5c8a      	ldrb	r2, [r1, r2]
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	e004      	b.n	80064da <base64_encode+0x19a>
		else *p++ = '=';
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	61fa      	str	r2, [r7, #28]
 80064d6:	223d      	movs	r2, #61	@ 0x3d
 80064d8:	701a      	strb	r2, [r3, #0]

		*p++ = '=';
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	223d      	movs	r2, #61	@ 0x3d
 80064e2:	701a      	strb	r2, [r3, #0]
	}

	*dlen = p - dst;
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	601a      	str	r2, [r3, #0]
	*p = 0;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]

	return (0);
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	372c      	adds	r7, #44	@ 0x2c
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	aaaaaaab 	.word	0xaaaaaaab
 8006508:	0803011c 	.word	0x0803011c

0800650c <find_base64_char_index>:
//	if (c == '/') return 63;
//// KCS comment this out and uncomment the below
//	return -1; // Invalid character
//}

int find_base64_char_index(char c) {
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 64; i++) {
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e00b      	b.n	8006534 <find_base64_char_index+0x28>
		if (base64_chars[i] == c) {
 800651c:	4a0b      	ldr	r2, [pc, #44]	@ (800654c <find_base64_char_index+0x40>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	79fa      	ldrb	r2, [r7, #7]
 8006526:	429a      	cmp	r2, r3
 8006528:	d101      	bne.n	800652e <find_base64_char_index+0x22>
			return i;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	e007      	b.n	800653e <find_base64_char_index+0x32>
	for (int i = 0; i < 64; i++) {
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b3f      	cmp	r3, #63	@ 0x3f
 8006538:	ddf0      	ble.n	800651c <find_base64_char_index+0x10>
		}
	}
	return -1;
 800653a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	0803015c 	.word	0x0803015c

08006550 <onTheFlyDcodeBase64>:

int onTheFlyDcodeBase64(unsigned char *input, unsigned char *output, int sourceSize) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b08c      	sub	sp, #48	@ 0x30
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	int inputCounter = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int outputCounter = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
	int lastGoodInputBuffer = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
	int outIter = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	623b      	str	r3, [r7, #32]
	unsigned char input_buffer[4], output_buffer[3];

	while (inputCounter < sourceSize )
 800656c:	e07f      	b.n	800666e <onTheFlyDcodeBase64+0x11e>
	{
		for (int inIterator = 0; inIterator < 4; inIterator++)
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	e026      	b.n	80065c2 <onTheFlyDcodeBase64+0x72>
		{
			if (input[inputCounter] != '=')
 8006574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b3d      	cmp	r3, #61	@ 0x3d
 800657e:	d014      	beq.n	80065aa <onTheFlyDcodeBase64+0x5a>
			{
				input_buffer[inIterator] = find_base64_char_index(input[inputCounter++]);
 8006580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006586:	461a      	mov	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff ffbc 	bl	800650c <find_base64_char_index>
 8006594:	4603      	mov	r3, r0
 8006596:	b2d9      	uxtb	r1, r3
 8006598:	f107 0214 	add.w	r2, r7, #20
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	460a      	mov	r2, r1
 80065a2:	701a      	strb	r2, [r3, #0]
				lastGoodInputBuffer = inIterator;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a8:	e008      	b.n	80065bc <onTheFlyDcodeBase64+0x6c>
			}
			else
			{
				input_buffer[inIterator] = 0;
 80065aa:	f107 0214 	add.w	r2, r7, #20
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
				inputCounter++;
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	3301      	adds	r3, #1
 80065ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for (int inIterator = 0; inIterator < 4; inIterator++)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	2b03      	cmp	r3, #3
 80065c6:	ddd5      	ble.n	8006574 <onTheFlyDcodeBase64+0x24>
			}
		}

		// Decode the 4 Base64 characters into 3 bytes
		output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4);
 80065c8:	7d3b      	ldrb	r3, [r7, #20]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	7d7b      	ldrb	r3, [r7, #21]
 80065d0:	111b      	asrs	r3, r3, #4
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f003 0303 	and.w	r3, r3, #3
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	4413      	add	r3, r2
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	743b      	strb	r3, [r7, #16]
		output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2);
 80065e0:	7d7b      	ldrb	r3, [r7, #21]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	7dbb      	ldrb	r3, [r7, #22]
 80065e8:	109b      	asrs	r3, r3, #2
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	747b      	strb	r3, [r7, #17]
		output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3];
 80065f8:	7dbb      	ldrb	r3, [r7, #22]
 80065fa:	019b      	lsls	r3, r3, #6
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	4413      	add	r3, r2
 8006602:	b2db      	uxtb	r3, r3
 8006604:	74bb      	strb	r3, [r7, #18]

		for (outIter = 0; outIter < 3; outIter++)
 8006606:	2300      	movs	r3, #0
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	e02d      	b.n	8006668 <onTheFlyDcodeBase64+0x118>
		{
			if (input[inputCounter - 1] != '=')
 800660c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660e:	3b01      	subs	r3, #1
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b3d      	cmp	r3, #61	@ 0x3d
 8006618:	d00c      	beq.n	8006634 <onTheFlyDcodeBase64+0xe4>
			{
				output[outputCounter++] = output_buffer[outIter];
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006620:	461a      	mov	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4413      	add	r3, r2
 8006626:	f107 0110 	add.w	r1, r7, #16
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	440a      	add	r2, r1
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e016      	b.n	8006662 <onTheFlyDcodeBase64+0x112>
			} else
			{
				for (int i = 0; i < lastGoodInputBuffer; i++)
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e00e      	b.n	8006658 <onTheFlyDcodeBase64+0x108>
				{
					// check inIterator, add inIterator -1 bytes
					output[outputCounter++] = output_buffer[i];
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006640:	461a      	mov	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4413      	add	r3, r2
 8006646:	f107 0110 	add.w	r1, r7, #16
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	440a      	add	r2, r1
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < lastGoodInputBuffer; i++)
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3301      	adds	r3, #1
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	429a      	cmp	r2, r3
 800665e:	dbec      	blt.n	800663a <onTheFlyDcodeBase64+0xea>
				}
				break;
 8006660:	e005      	b.n	800666e <onTheFlyDcodeBase64+0x11e>
		for (outIter = 0; outIter < 3; outIter++)
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	3301      	adds	r3, #1
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b02      	cmp	r3, #2
 800666c:	ddce      	ble.n	800660c <onTheFlyDcodeBase64+0xbc>
	while (inputCounter < sourceSize )
 800666e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	f6ff af7b 	blt.w	800656e <onTheFlyDcodeBase64+0x1e>
			}
		}
	}
	// for string output terminate with \0
	// output[j] = '\0';
	return outputCounter;
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800667a:	4618      	mov	r0, r3
 800667c:	3730      	adds	r7, #48	@ 0x30
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <Clear_Memory>:
/******************************************************
 Memory Clean
 Clears Memory storage space
 ******************************************************/
void Clear_Memory ( MEM_PTR * bigStructure )
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
	int memoryItterator = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
	while ( memoryItterator < (MEMORY_MAX))
 800668e:	e00b      	b.n	80066a8 <Clear_Memory+0x26>
	{
		bigStructure->Memory [ memoryItterator ] = 0;
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800669a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
		memoryItterator ++;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3301      	adds	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
	while ( memoryItterator < (MEMORY_MAX))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80066ae:	dbef      	blt.n	8006690 <Clear_Memory+0xe>
	}
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <Clear_Memory2>:

void Clear_Memory2 ( MEM_PTR * bigStructure , uint16_t memoryClearSize)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	807b      	strh	r3, [r7, #2]
	int memoryItterator = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
	while ( memoryItterator < memoryClearSize )
 80066ce:	e00a      	b.n	80066e6 <Clear_Memory2+0x28>
		bigStructure->Memory [ memoryItterator++ ] = 0;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	60fa      	str	r2, [r7, #12]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80066de:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80066e2:	2200      	movs	r2, #0
 80066e4:	701a      	strb	r2, [r3, #0]
	while ( memoryItterator < memoryClearSize )
 80066e6:	887b      	ldrh	r3, [r7, #2]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	dbf0      	blt.n	80066d0 <Clear_Memory2+0x12>
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <clearOTAFlashArray>:

/******************************************************
 Clears OTA Flash Image Array
 ******************************************************/
void clearOTAFlashArray(MEM_PTR *bigData)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	int memoryItterator = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
	while ( memoryItterator < (OTA_FLASH_SIZE))
 8006708:	e006      	b.n	8006718 <clearOTAFlashArray+0x1c>
		bigData->Flash.Image [ memoryItterator++ ] = 0;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	60fa      	str	r2, [r7, #12]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4413      	add	r3, r2
 8006714:	2200      	movs	r2, #0
 8006716:	739a      	strb	r2, [r3, #14]
	while ( memoryItterator < (OTA_FLASH_SIZE))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a05      	ldr	r2, [pc, #20]	@ (8006730 <clearOTAFlashArray+0x34>)
 800671c:	4293      	cmp	r3, r2
 800671e:	ddf4      	ble.n	800670a <clearOTAFlashArray+0xe>
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	000270ff 	.word	0x000270ff

08006734 <Word_Transfer>:
 // Warning only works for null terminated memory values (Like strings)
 Copies the source word to target, will look for
 NULL in source to stop coping to target
 ******************************************************/
void Word_Transfer ( char *target , char *source )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
	while ( *(source) )
 800673e:	e007      	b.n	8006750 <Word_Transfer+0x1c>
	{
		*(target)++ = *(source)++;
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	1c53      	adds	r3, r2, #1
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	6079      	str	r1, [r7, #4]
 800674c:	7812      	ldrb	r2, [r2, #0]
 800674e:	701a      	strb	r2, [r3, #0]
	while ( *(source) )
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1f3      	bne.n	8006740 <Word_Transfer+0xc>
	}
	*(target)++ = *(source)++;	// last loop to carry over NULL
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	1c53      	adds	r3, r2, #1
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	6079      	str	r1, [r7, #4]
 8006764:	7812      	ldrb	r2, [r2, #0]
 8006766:	701a      	strb	r2, [r3, #0]
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <Char_Replace>:
 Character Replace Function
 Iterates through Char array to find source 1,
 after which it replaces it with source 2
 ******************************************************/
void Char_Replace ( char *target , char *source1 , char *source2 )
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
	do
	{
		if (*(target) == *(source1))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	781a      	ldrb	r2, [r3, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d103      	bne.n	8006794 <Char_Replace+0x20>
		{
			*(target) = *(source2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	781a      	ldrb	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	701a      	strb	r2, [r3, #0]
		}
	}
	while ( *(target)++ );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	60fa      	str	r2, [r7, #12]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1ef      	bne.n	8006780 <Char_Replace+0xc>
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <IsError2>:

	return false;
}

bool IsError2 ( MEM_PTR *Data_Ptr )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	char gpsValidTest[] = "+QGPSLOC:";
 80067b8:	4a11      	ldr	r2, [pc, #68]	@ (8006800 <IsError2+0x50>)
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	ca07      	ldmia	r2, {r0, r1, r2}
 80067c0:	c303      	stmia	r3!, {r0, r1}
 80067c2:	801a      	strh	r2, [r3, #0]
	char* gpsValidStr = strstr((char*)_Memory, gpsValidTest);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80067ca:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80067ce:	f107 0208 	add.w	r2, r7, #8
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f020 fd50 	bl	802727a <strstr>
 80067da:	6178      	str	r0, [r7, #20]

	if(gpsValidStr)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <IsError2+0x3e>
	{
		PRINTF("Response Validated, Status code is 1\r\n");
 80067e2:	4908      	ldr	r1, [pc, #32]	@ (8006804 <IsError2+0x54>)
 80067e4:	2001      	movs	r0, #1
 80067e6:	f000 fac5 	bl	8006d74 <TraceSend>
		return false;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e004      	b.n	80067f8 <IsError2+0x48>
	}
	else
	{
		PRINTF("Response Error, Status code is 0\r\n");
 80067ee:	4906      	ldr	r1, [pc, #24]	@ (8006808 <IsError2+0x58>)
 80067f0:	2001      	movs	r0, #1
 80067f2:	f000 fabf 	bl	8006d74 <TraceSend>
		return true;
 80067f6:	2301      	movs	r3, #1
	}

}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	0802d55c 	.word	0x0802d55c
 8006804:	0802d510 	.word	0x0802d510
 8006808:	0802d538 	.word	0x0802d538

0800680c <isFivePacketsReceived>:
	//check memory for "OK" if OK return false, if it's populated with something return true GAV
}


bool isFivePacketsReceived( char* ptr)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	f5ad 6db7 	sub.w	sp, sp, #1464	@ 0x5b8
 8006812:	af00      	add	r7, sp, #0
 8006814:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006818:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 800681c:	6018      	str	r0, [r3, #0]
	// KCS fix these hard coded values
	char Buff[280] = {""};
 800681e:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006822:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	3304      	adds	r3, #4
 800682c:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8006830:	2100      	movs	r1, #0
 8006832:	4618      	mov	r0, r3
 8006834:	f020 fc9c 	bl	8027170 <memset>
	char *RecvBuff[280] = {""};
 8006838:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800683c:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8006840:	4618      	mov	r0, r3
 8006842:	f44f 638c 	mov.w	r3, #1120	@ 0x460
 8006846:	461a      	mov	r2, r3
 8006848:	2100      	movs	r1, #0
 800684a:	f020 fc91 	bl	8027170 <memset>
 800684e:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006852:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8006856:	4a45      	ldr	r2, [pc, #276]	@ (800696c <isFivePacketsReceived+0x160>)
 8006858:	601a      	str	r2, [r3, #0]
	//PRINTF("Line 1531\r\n");
	Word_Transfer(Buff, ptr);
 800685a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800685e:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 8006862:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 8006866:	6819      	ldr	r1, [r3, #0]
 8006868:	4610      	mov	r0, r2
 800686a:	f7ff ff63 	bl	8006734 <Word_Transfer>
	RecvBuff[0] = Buff;  // this maybe the problem; have you tested this function fully with garbage inputs and miscelleneous data?
 800686e:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006872:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 8006876:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 800687a:	601a      	str	r2, [r3, #0]

	//PRINTF("Line 1535\r\n");

	int msgTokenCount = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
	char *msgTokens[7] = {""}; // needs to be at least 7 if you are trying to access the seventh one
 8006882:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006886:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 800688a:	461a      	mov	r2, r3
 800688c:	2300      	movs	r3, #0
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	6053      	str	r3, [r2, #4]
 8006892:	6093      	str	r3, [r2, #8]
 8006894:	60d3      	str	r3, [r2, #12]
 8006896:	6113      	str	r3, [r2, #16]
 8006898:	6153      	str	r3, [r2, #20]
 800689a:	6193      	str	r3, [r2, #24]
 800689c:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80068a0:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 80068a4:	4a31      	ldr	r2, [pc, #196]	@ (800696c <isFivePacketsReceived+0x160>)
 80068a6:	601a      	str	r2, [r3, #0]
	const char *colDelim = ":";
 80068a8:	4b31      	ldr	r3, [pc, #196]	@ (8006970 <isFivePacketsReceived+0x164>)
 80068aa:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
	const char *comDelim = ",";
 80068ae:	4b31      	ldr	r3, [pc, #196]	@ (8006974 <isFivePacketsReceived+0x168>)
 80068b0:	f8c7 35a8 	str.w	r3, [r7, #1448]	@ 0x5a8

	char *msgToken = strtok_r(*RecvBuff, colDelim, RecvBuff);
 80068b4:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80068b8:	f5a3 63b2 	sub.w	r3, r3, #1424	@ 0x590
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80068c2:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	@ 0x5ac
 80068c6:	4618      	mov	r0, r3
 80068c8:	f020 fcd4 	bl	8027274 <strtok_r>
 80068cc:	f8c7 05b0 	str.w	r0, [r7, #1456]	@ 0x5b0

	//PRINTF("Line 1543\r\n");
	while (msgToken != NULL && msgTokenCount < 7)
 80068d0:	e018      	b.n	8006904 <isFivePacketsReceived+0xf8>
	{
		msgTokens[msgTokenCount] = msgToken;
 80068d2:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80068d6:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 80068da:	f8d7 25b4 	ldr.w	r2, [r7, #1460]	@ 0x5b4
 80068de:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	@ 0x5b0
 80068e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		msgTokenCount++;
 80068e6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 80068ea:	3301      	adds	r3, #1
 80068ec:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4

		//PRINTF("Line 1549\r\n");
		msgToken = strtok_r(NULL, comDelim, RecvBuff);
 80068f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	@ 0x5a8
 80068fa:	2000      	movs	r0, #0
 80068fc:	f020 fcba 	bl	8027274 <strtok_r>
 8006900:	f8c7 05b0 	str.w	r0, [r7, #1456]	@ 0x5b0
	while (msgToken != NULL && msgTokenCount < 7)
 8006904:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <isFivePacketsReceived+0x108>
 800690c:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 8006910:	2b06      	cmp	r3, #6
 8006912:	ddde      	ble.n	80068d2 <isFivePacketsReceived+0xc6>
	// this is the offending line for the first command 40 error when running the "Released" code
	// KCS suggest looking at the input string "ptr" and seeing if it is "good" data
	// before processing

	//csc added to return false if not enough tokens were found.
	if(msgTokenCount < 7)
 8006914:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 8006918:	2b06      	cmp	r3, #6
 800691a:	dc05      	bgt.n	8006928 <isFivePacketsReceived+0x11c>
	{
		PRINTF("Not enough tokens, returning false.\r\n");
 800691c:	4916      	ldr	r1, [pc, #88]	@ (8006978 <isFivePacketsReceived+0x16c>)
 800691e:	2001      	movs	r0, #1
 8006920:	f000 fa28 	bl	8006d74 <TraceSend>
		return false;
 8006924:	2300      	movs	r3, #0
 8006926:	e01c      	b.n	8006962 <isFivePacketsReceived+0x156>
	}
	char *msg5 = msgTokens[6];  // does not exist when defined as an array of 6; indexes are "0" based
 8006928:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800692c:	f2a3 53ac 	subw	r3, r3, #1452	@ 0x5ac
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4

	//char test1[] = "1";

	char *_msg5 = strstr( msg5, "1" );
 8006936:	2131      	movs	r1, #49	@ 0x31
 8006938:	f8d7 05a4 	ldr.w	r0, [r7, #1444]	@ 0x5a4
 800693c:	f020 fc2f 	bl	802719e <strchr>
 8006940:	f8c7 05a0 	str.w	r0, [r7, #1440]	@ 0x5a0
	//PRINTF("Line 1559\r\n");

	if (_msg5 != NULL && strstr( msg5, "1" ) != NULL)
 8006944:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	@ 0x5a0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d009      	beq.n	8006960 <isFivePacketsReceived+0x154>
 800694c:	2131      	movs	r1, #49	@ 0x31
 800694e:	f8d7 05a4 	ldr.w	r0, [r7, #1444]	@ 0x5a4
 8006952:	f020 fc24 	bl	802719e <strchr>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <isFivePacketsReceived+0x154>
	{
		return true;
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <isFivePacketsReceived+0x156>
	}
	else return false;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	f507 67b7 	add.w	r7, r7, #1464	@ 0x5b8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	0802d580 	.word	0x0802d580
 8006970:	0802d584 	.word	0x0802d584
 8006974:	0802d588 	.word	0x0802d588
 8006978:	0802d58c 	.word	0x0802d58c

0800697c <Build_MSG>:
 Cell Command Creation Function
 Creates command with input function as well as
 parameterizes values for command
 ******************************************************/
void Build_MSG ( MEM_PTR *Data_Ptr , char *MSG )
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	if ( *(MSG) == '\1' )
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d126      	bne.n	80069dc <Build_MSG+0x60>
		//GAV potentially add a watchdog refresh
	{
		buf = 0;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8006994:	461a      	mov	r2, r3
 8006996:	2300      	movs	r3, #0
 8006998:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
		MSG++;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	3301      	adds	r3, #1
 80069a0:	603b      	str	r3, [r7, #0]
	}

	if ( buf >= 0 )
	{	//Data_Ptr->Shift = 0;
		while ( *(MSG) != '\0' )
 80069a2:	e01b      	b.n	80069dc <Build_MSG+0x60>
		{
			_Memory [ buf ] = *(MSG)++;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	603a      	str	r2, [r7, #0]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80069b0:	f8d2 234c 	ldr.w	r2, [r2, #844]	@ 0x34c
 80069b4:	7819      	ldrb	r1, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80069be:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80069c2:	460a      	mov	r2, r1
 80069c4:	701a      	strb	r2, [r3, #0]
			buf += 1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80069cc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80069d0:	3301      	adds	r3, #1
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80069d8:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
		while ( *(MSG) != '\0' )
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1df      	bne.n	80069a4 <Build_MSG+0x28>
		}
	}
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <LOG_Init>:
/******************************************************
 Logger Initialize
 Logger constructor
 ******************************************************/
void LOG_Init ( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
	Logger.Debug_Val = 0;
 80069f8:	492b      	ldr	r1, [pc, #172]	@ (8006aa8 <LOG_Init+0xb4>)
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	e9c1 2302 	strd	r2, r3, [r1, #8]
	for ( Logger.Buffer = Log_Size_Limit; Logger.Buffer != 0; --Logger.Buffer )
 8006a06:	4b28      	ldr	r3, [pc, #160]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a08:	22fa      	movs	r2, #250	@ 0xfa
 8006a0a:	701a      	strb	r2, [r3, #0]
 8006a0c:	e045      	b.n	8006a9a <LOG_Init+0xa6>
	{
		(Logger.Curr) = Logger.List [ (Logger.Curr).MSG_Size ];
 8006a0e:	4b26      	ldr	r3, [pc, #152]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a10:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a14:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4b23      	ldr	r3, [pc, #140]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a1c:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a20:	4618      	mov	r0, r3
 8006a22:	4a21      	ldr	r2, [pc, #132]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a24:	460b      	mov	r3, r1
 8006a26:	019b      	lsls	r3, r3, #6
 8006a28:	1a5b      	subs	r3, r3, r1
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f103 0210 	add.w	r2, r3, #16
 8006a32:	f500 63c5 	add.w	r3, r0, #1576	@ 0x628
 8006a36:	4611      	mov	r1, r2
 8006a38:	22fc      	movs	r2, #252	@ 0xfc
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f021 fa2f 	bl	8027e9e <memcpy>

		for ((Logger.Curr).MSG_Size = Log_MSG_SIZE - 1; (Logger.Curr).MSG_Size != 0; --(Logger.Curr).MSG_Size)
 8006a40:	4b19      	ldr	r3, [pc, #100]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a42:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a46:	22f9      	movs	r2, #249	@ 0xf9
 8006a48:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
 8006a4c:	e018      	b.n	8006a80 <LOG_Init+0x8c>
		{
			(Logger.Curr).MSG [ (Logger.Curr).MSG_Size ] = 0;
 8006a4e:	4b16      	ldr	r3, [pc, #88]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a50:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a54:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4b13      	ldr	r3, [pc, #76]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 4376 	add.w	r3, r3, #62976	@ 0xf600
 8006a62:	332a      	adds	r3, #42	@ 0x2a
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
		for ((Logger.Curr).MSG_Size = Log_MSG_SIZE - 1; (Logger.Curr).MSG_Size != 0; --(Logger.Curr).MSG_Size)
 8006a68:	4b0f      	ldr	r3, [pc, #60]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a6a:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a6e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a78:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a7c:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
 8006a80:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a82:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006a86:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1df      	bne.n	8006a4e <LOG_Init+0x5a>
	for ( Logger.Buffer = Log_Size_Limit; Logger.Buffer != 0; --Logger.Buffer )
 8006a8e:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4b04      	ldr	r3, [pc, #16]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	4b03      	ldr	r3, [pc, #12]	@ (8006aa8 <LOG_Init+0xb4>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1b5      	bne.n	8006a0e <LOG_Init+0x1a>
		}
	}
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20017690 	.word	0x20017690

08006aac <Log_Single>:

void Log_Single ( char *MSG )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
	Write_Log ( MSG );
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f839 	bl	8006b2c <Write_Log>

#ifdef UART_USB
	// KCS fix this when implementing logging
	Read_Last_UART_Log ( &memory );
 8006aba:	4803      	ldr	r0, [pc, #12]	@ (8006ac8 <Log_Single+0x1c>)
 8006abc:	f000 f910 	bl	8006ce0 <Read_Last_UART_Log>
#endif //UART_USB
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	2007d870 	.word	0x2007d870

08006acc <Log_Insert>:

void Log_Insert ( char *MSG , uint32_t Number )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
	char Command_Buffer [ 10 ];

	Write_Log ( MSG );
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f828 	bl	8006b2c <Write_Log>
	Write_Log ( utoa ( Number , Command_Buffer , DECIMAL ) );
 8006adc:	f107 030c 	add.w	r3, r7, #12
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	6838      	ldr	r0, [r7, #0]
 8006ae6:	f01f fb31 	bl	802614c <utoa>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 f81d 	bl	8006b2c <Write_Log>
}
 8006af2:	bf00      	nop
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <Log_End>:

void Log_End ( char *MSG , uint32_t Number )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	Log_Insert ( MSG , Number );
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ffdf 	bl	8006acc <Log_Insert>
	Write_Log ( LOG_TAIL );
 8006b0e:	4805      	ldr	r0, [pc, #20]	@ (8006b24 <Log_End+0x28>)
 8006b10:	f000 f80c 	bl	8006b2c <Write_Log>

#ifdef UART_USB
	// KCS fix this when implementing logging
	Read_Last_UART_Log ( &memory );
 8006b14:	4804      	ldr	r0, [pc, #16]	@ (8006b28 <Log_End+0x2c>)
 8006b16:	f000 f8e3 	bl	8006ce0 <Read_Last_UART_Log>
#endif ///UART_USB
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	0802ca74 	.word	0x0802ca74
 8006b28:	2007d870 	.word	0x2007d870

08006b2c <Write_Log>:
/******************************************************
 Write state of device to UART buffer
 Note: Will save state of all control flags in ram
 ******************************************************/
void Write_Log ( char *MSG )
{
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	if (*(MSG) == '\1')
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	f040 8099 	bne.w	8006c70 <Write_Log+0x144>
	{
		Logger.Buffer++;
 8006b3e:	4b66      	ldr	r3, [pc, #408]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	4b64      	ldr	r3, [pc, #400]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b48:	701a      	strb	r2, [r3, #0]
		Logger.Debug_Val++;
 8006b4a:	4b63      	ldr	r3, [pc, #396]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006b50:	1c54      	adds	r4, r2, #1
 8006b52:	f143 0500 	adc.w	r5, r3, #0
 8006b56:	4b60      	ldr	r3, [pc, #384]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b58:	e9c3 4502 	strd	r4, r5, [r3, #8]

		if (Logger.Buffer == Log_Size_Limit)
 8006b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2bfa      	cmp	r3, #250	@ 0xfa
 8006b62:	d102      	bne.n	8006b6a <Write_Log+0x3e>
		{
			Logger.Buffer = 0;
 8006b64:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	701a      	strb	r2, [r3, #0]
		}

		Logger.Curr = Logger.List [ Logger.Buffer ];
 8006b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4b59      	ldr	r3, [pc, #356]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b72:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006b76:	4618      	mov	r0, r3
 8006b78:	4a57      	ldr	r2, [pc, #348]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	019b      	lsls	r3, r3, #6
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	f103 0210 	add.w	r2, r3, #16
 8006b88:	f500 63c5 	add.w	r3, r0, #1576	@ 0x628
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	22fc      	movs	r2, #252	@ 0xfc
 8006b90:	4618      	mov	r0, r3
 8006b92:	f021 f984 	bl	8027e9e <memcpy>

		for ((Logger.Curr).MSG_Size = Log_MSG_SIZE - 1; (Logger.Curr).MSG_Size != 0; --(Logger.Curr).MSG_Size)
 8006b96:	4b50      	ldr	r3, [pc, #320]	@ (8006cd8 <Write_Log+0x1ac>)
 8006b98:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006b9c:	22f9      	movs	r2, #249	@ 0xf9
 8006b9e:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
 8006ba2:	e018      	b.n	8006bd6 <Write_Log+0xaa>
		{
			(Logger.Curr).MSG [ (Logger.Curr).MSG_Size ] = 0;
 8006ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8006cd8 <Write_Log+0x1ac>)
 8006ba6:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006baa:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4b49      	ldr	r3, [pc, #292]	@ (8006cd8 <Write_Log+0x1ac>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 4376 	add.w	r3, r3, #62976	@ 0xf600
 8006bb8:	332a      	adds	r3, #42	@ 0x2a
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
		for ((Logger.Curr).MSG_Size = Log_MSG_SIZE - 1; (Logger.Curr).MSG_Size != 0; --(Logger.Curr).MSG_Size)
 8006bbe:	4b46      	ldr	r3, [pc, #280]	@ (8006cd8 <Write_Log+0x1ac>)
 8006bc0:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006bc4:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	4b42      	ldr	r3, [pc, #264]	@ (8006cd8 <Write_Log+0x1ac>)
 8006bce:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006bd2:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
 8006bd6:	4b40      	ldr	r3, [pc, #256]	@ (8006cd8 <Write_Log+0x1ac>)
 8006bd8:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006bdc:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1df      	bne.n	8006ba4 <Write_Log+0x78>
		}

		Time_Stamp ( Logger.Curr.MSG );
 8006be4:	483d      	ldr	r0, [pc, #244]	@ (8006cdc <Write_Log+0x1b0>)
 8006be6:	f000 fb87 	bl	80072f8 <Time_Stamp>

		while ((Logger.Curr).MSG [ ++(Logger.Curr).MSG_Size ])
 8006bea:	bf00      	nop
 8006bec:	4b3a      	ldr	r3, [pc, #232]	@ (8006cd8 <Write_Log+0x1ac>)
 8006bee:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006bf2:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	4b37      	ldr	r3, [pc, #220]	@ (8006cd8 <Write_Log+0x1ac>)
 8006bfc:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c00:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
 8006c04:	4b34      	ldr	r3, [pc, #208]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c06:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c0a:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006c0e:	461a      	mov	r2, r3
 8006c10:	4b31      	ldr	r3, [pc, #196]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 4376 	add.w	r3, r3, #62976	@ 0xf600
 8006c18:	332a      	adds	r3, #42	@ 0x2a
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1e5      	bne.n	8006bec <Write_Log+0xc0>
			;
		(Logger.Curr).MSG_Size--;
 8006c20:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c22:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c26:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c30:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c34:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628

		(Logger.Curr).MSG [ ++(Logger.Curr).MSG_Size ] = ':';
 8006c38:	4b27      	ldr	r3, [pc, #156]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c3a:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c3e:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006c42:	3301      	adds	r3, #1
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c48:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c4c:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
 8006c50:	4b21      	ldr	r3, [pc, #132]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c52:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006c56:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 4376 	add.w	r3, r3, #62976	@ 0xf600
 8006c64:	332a      	adds	r3, #42	@ 0x2a
 8006c66:	223a      	movs	r2, #58	@ 0x3a
 8006c68:	701a      	strb	r2, [r3, #0]

		MSG++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	607b      	str	r3, [r7, #4]
	}

	do
	{
		(Logger.Curr).MSG [ (Logger.Curr).MSG_Size++ ] = *(MSG)++;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	607a      	str	r2, [r7, #4]
 8006c76:	4a18      	ldr	r2, [pc, #96]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c78:	f502 4270 	add.w	r2, r2, #61440	@ 0xf000
 8006c7c:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	@ 0x628
 8006c80:	1c51      	adds	r1, r2, #1
 8006c82:	b288      	uxth	r0, r1
 8006c84:	4914      	ldr	r1, [pc, #80]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c86:	f501 4170 	add.w	r1, r1, #61440	@ 0xf000
 8006c8a:	f8a1 0628 	strh.w	r0, [r1, #1576]	@ 0x628
 8006c8e:	4611      	mov	r1, r2
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	4b11      	ldr	r3, [pc, #68]	@ (8006cd8 <Write_Log+0x1ac>)
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 4376 	add.w	r3, r3, #62976	@ 0xf600
 8006c9a:	332a      	adds	r3, #42	@ 0x2a
 8006c9c:	701a      	strb	r2, [r3, #0]
	}
	while (*(MSG));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e4      	bne.n	8006c70 <Write_Log+0x144>

	Logger.List [ Logger.Buffer ] = Logger.Curr;
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <Write_Log+0x1ac>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	4a0a      	ldr	r2, [pc, #40]	@ (8006cd8 <Write_Log+0x1ac>)
 8006cae:	460b      	mov	r3, r1
 8006cb0:	019b      	lsls	r3, r3, #6
 8006cb2:	1a5b      	subs	r3, r3, r1
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f103 0210 	add.w	r2, r3, #16
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <Write_Log+0x1ac>)
 8006cbe:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8006cc8:	22fc      	movs	r2, #252	@ 0xfc
 8006cca:	4619      	mov	r1, r3
 8006ccc:	f021 f8e7 	bl	8027e9e <memcpy>
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006cd8:	20017690 	.word	0x20017690
 8006cdc:	20026cba 	.word	0x20026cba

08006ce0 <Read_Last_UART_Log>:
/******************************************************
 Read last log saved on UART buffer
 Note: Will read last log to UART
 ******************************************************/
void Read_Last_UART_Log ( MEM_PTR *Data_Ptr )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	if (!(_Setting & AVOID_MSG_SPAM))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8006cee:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d112      	bne.n	8006d20 <Read_Last_UART_Log+0x40>
	{
		HAL_UART_AbortReceive ( &huart2 );
 8006cfa:	480b      	ldr	r0, [pc, #44]	@ (8006d28 <Read_Last_UART_Log+0x48>)
 8006cfc:	f01c f84e 	bl	8022d9c <HAL_UART_AbortReceive>
		HAL_UART_Transmit ( &huart2 , (uint8_t*) Logger.Curr.MSG , Logger.Curr.MSG_Size , 0xFF );
 8006d00:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <Read_Last_UART_Log+0x4c>)
 8006d02:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
 8006d06:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	@ 0x628
 8006d0a:	23ff      	movs	r3, #255	@ 0xff
 8006d0c:	4908      	ldr	r1, [pc, #32]	@ (8006d30 <Read_Last_UART_Log+0x50>)
 8006d0e:	4806      	ldr	r0, [pc, #24]	@ (8006d28 <Read_Last_UART_Log+0x48>)
 8006d10:	f01b fda5 	bl	802285e <HAL_UART_Transmit>
		HAL_UART_Transmit ( &huart2 , (uint8_t*) "\r\n" , 2 , 0xFF );
 8006d14:	23ff      	movs	r3, #255	@ 0xff
 8006d16:	2202      	movs	r2, #2
 8006d18:	4906      	ldr	r1, [pc, #24]	@ (8006d34 <Read_Last_UART_Log+0x54>)
 8006d1a:	4803      	ldr	r0, [pc, #12]	@ (8006d28 <Read_Last_UART_Log+0x48>)
 8006d1c:	f01b fd9f 	bl	802285e <HAL_UART_Transmit>
	}
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2007d254 	.word	0x2007d254
 8006d2c:	20017690 	.word	0x20017690
 8006d30:	20026cba 	.word	0x20026cba
 8006d34:	0802d5b4 	.word	0x0802d5b4

08006d38 <vcom_Trace>:
#endif  //UART_USB


// KCS block = 0 does not work; we need to check DMA settings in IOC file
void vcom_Trace ( uint8_t *p_data , uint16_t size , int block )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	460b      	mov	r3, r1
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	817b      	strh	r3, [r7, #10]
	if (block) HAL_UART_Transmit ( &huart2 , p_data , size , 1000 );
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d007      	beq.n	8006d5c <vcom_Trace+0x24>
 8006d4c:	897a      	ldrh	r2, [r7, #10]
 8006d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	4806      	ldr	r0, [pc, #24]	@ (8006d70 <vcom_Trace+0x38>)
 8006d56:	f01b fd82 	bl	802285e <HAL_UART_Transmit>
	else HAL_UART_Transmit_DMA ( &huart2 , p_data , size );
}
 8006d5a:	e005      	b.n	8006d68 <vcom_Trace+0x30>
	else HAL_UART_Transmit_DMA ( &huart2 , p_data , size );
 8006d5c:	897b      	ldrh	r3, [r7, #10]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68f9      	ldr	r1, [r7, #12]
 8006d62:	4803      	ldr	r0, [pc, #12]	@ (8006d70 <vcom_Trace+0x38>)
 8006d64:	f01b ff52 	bl	8022c0c <HAL_UART_Transmit_DMA>
}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	2007d254 	.word	0x2007d254

08006d74 <TraceSend>:

// This function takes a string formatted variable array and prints it to the output UART line
int8_t TraceSend(int8_t block, const char *strFormat, ...)
{
 8006d74:	b40e      	push	{r1, r2, r3}
 8006d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d78:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8006d7c:	af06      	add	r7, sp, #24
 8006d7e:	4602      	mov	r2, r0
 8006d80:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006d84:	f6a3 73e1 	subw	r3, r3, #4065	@ 0xfe1
 8006d88:	701a      	strb	r2, [r3, #0]
	char PRINTFbuf[PRINTBUFSIZE];
	va_list vaArgs;
	uint16_t bufSize = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f8a7 3fe6 	strh.w	r3, [r7, #4070]	@ 0xfe6
	int status = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	f8c7 3fe0 	str.w	r3, [r7, #4064]	@ 0xfe0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d96:	f3ef 8310 	mrs	r3, PRIMASK
 8006d9a:	f8c7 3fd8 	str.w	r3, [r7, #4056]	@ 0xfd8
  return(result);
 8006d9e:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	@ 0xfd8

	BACKUP_PRIMASK();
 8006da2:	f8c7 3fdc 	str.w	r3, [r7, #4060]	@ 0xfdc
  __ASM volatile ("cpsid i" : : : "memory");
 8006da6:	b672      	cpsid	i
}
 8006da8:	bf00      	nop

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	/* Get the RTC Curr Time */
	HAL_RTC_GetTime ( &hrtc , &stimestructureget , RTC_FORMAT_BIN );
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	2200      	movs	r2, #0
 8006db0:	4619      	mov	r1, r3
 8006db2:	4857      	ldr	r0, [pc, #348]	@ (8006f10 <TraceSend+0x19c>)
 8006db4:	f01a fa34 	bl	8021220 <HAL_RTC_GetTime>
	/* Get the RTC Curr Date */
	HAL_RTC_GetDate ( &hrtc , &sdatestructureget , RTC_FORMAT_BIN );
 8006db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4853      	ldr	r0, [pc, #332]	@ (8006f10 <TraceSend+0x19c>)
 8006dc2:	f01a fb25 	bl	8021410 <HAL_RTC_GetDate>

	/* Display time Format : mm_dd_yy__hh_mm_ss */
	// KCS I took out the log level value at the end of the timestamp
	bufSize += snprintf( PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, "%.2d_%.2d_%.2d__%.2d_%.2d_%.2lu:",
 8006dc6:	f8b7 3fe6 	ldrh.w	r3, [r7, #4070]	@ 0xfe6
 8006dca:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006dce:	18d0      	adds	r0, r2, r3
 8006dd0:	f8b7 3fe6 	ldrh.w	r3, [r7, #4070]	@ 0xfe6
 8006dd4:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 8006dd8:	461e      	mov	r6, r3
			sdatestructureget.Month , sdatestructureget.Date ,
 8006dda:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006dde:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8006de2:	785b      	ldrb	r3, [r3, #1]
	bufSize += snprintf( PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, "%.2d_%.2d_%.2d__%.2d_%.2d_%.2lu:",
 8006de4:	469c      	mov	ip, r3
			sdatestructureget.Month , sdatestructureget.Date ,
 8006de6:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006dea:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8006dee:	789b      	ldrb	r3, [r3, #2]
	bufSize += snprintf( PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, "%.2d_%.2d_%.2d__%.2d_%.2d_%.2lu:",
 8006df0:	4619      	mov	r1, r3
			2000 + sdatestructureget.Year , stimestructureget.Hours , stimestructureget.Minutes ,
 8006df2:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006df6:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8006dfa:	78db      	ldrb	r3, [r3, #3]
	bufSize += snprintf( PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, "%.2d_%.2d_%.2d__%.2d_%.2d_%.2lu:",
 8006dfc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
			2000 + sdatestructureget.Year , stimestructureget.Hours , stimestructureget.Minutes ,
 8006e00:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8006e04:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8006e08:	7812      	ldrb	r2, [r2, #0]
	bufSize += snprintf( PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, "%.2d_%.2d_%.2d__%.2d_%.2d_%.2lu:",
 8006e0a:	4614      	mov	r4, r2
			2000 + sdatestructureget.Year , stimestructureget.Hours , stimestructureget.Minutes ,
 8006e0c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8006e10:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8006e14:	7852      	ldrb	r2, [r2, #1]
	bufSize += snprintf( PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, "%.2d_%.2d_%.2d__%.2d_%.2d_%.2lu:",
 8006e16:	4615      	mov	r5, r2
 8006e18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8006e1c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8006e20:	6852      	ldr	r2, [r2, #4]
 8006e22:	9204      	str	r2, [sp, #16]
 8006e24:	9503      	str	r5, [sp, #12]
 8006e26:	9402      	str	r4, [sp, #8]
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	9100      	str	r1, [sp, #0]
 8006e2c:	4663      	mov	r3, ip
 8006e2e:	4a39      	ldr	r2, [pc, #228]	@ (8006f14 <TraceSend+0x1a0>)
 8006e30:	4631      	mov	r1, r6
 8006e32:	f020 f8bb 	bl	8026fac <sniprintf>
 8006e36:	4603      	mov	r3, r0
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	f8b7 3fe6 	ldrh.w	r3, [r7, #4070]	@ 0xfe6
 8006e3e:	4413      	add	r3, r2
 8006e40:	f8a7 3fe6 	strh.w	r3, [r7, #4070]	@ 0xfe6
			stimestructureget.Seconds);


	va_start( vaArgs, strFormat);
 8006e44:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8006e48:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006e4c:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 8006e50:	601a      	str	r2, [r3, #0]
	bufSize += vsnprintf(PRINTFbuf + bufSize, PRINTBUFSIZE - bufSize, strFormat, vaArgs);
 8006e52:	f8b7 3fe6 	ldrh.w	r3, [r7, #4070]	@ 0xfe6
 8006e56:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8006e5a:	18d0      	adds	r0, r2, r3
 8006e5c:	f8b7 3fe6 	ldrh.w	r3, [r7, #4070]	@ 0xfe6
 8006e60:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 8006e64:	4619      	mov	r1, r3
 8006e66:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006e6a:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	@ 0xffc
 8006e74:	f020 f95e 	bl	8027134 <vsniprintf>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f8b7 3fe6 	ldrh.w	r3, [r7, #4070]	@ 0xfe6
 8006e80:	4413      	add	r3, r2
 8006e82:	f8a7 3fe6 	strh.w	r3, [r7, #4070]	@ 0xfe6
	va_end(vaArgs);

	if ( status == 0 )
 8006e86:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d12b      	bne.n	8006ee6 <TraceSend+0x172>
	{
		if (!block)
 8006e8e:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8006e92:	f6a3 73e1 	subw	r3, r3, #4065	@ 0xfe1
 8006e96:	f993 3000 	ldrsb.w	r3, [r3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d111      	bne.n	8006ec2 <TraceSend+0x14e>
 8006e9e:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 8006ea2:	f8c7 3fd4 	str.w	r3, [r7, #4052]	@ 0xfd4
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea6:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	@ 0xfd4
 8006eaa:	f383 8810 	msr	PRIMASK, r3
}
 8006eae:	bf00      	nop
		{
			RESTORE_PRIMASK();
			vcom_Trace((uint8_t*)PRINTFbuf, bufSize, 0);
 8006eb0:	f8b7 1fe6 	ldrh.w	r1, [r7, #4070]	@ 0xfe6
 8006eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff ff3c 	bl	8006d38 <vcom_Trace>
 8006ec0:	e01a      	b.n	8006ef8 <TraceSend+0x184>
 8006ec2:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 8006ec6:	f8c7 3fd0 	str.w	r3, [r7, #4048]	@ 0xfd0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eca:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	bf00      	nop
		}else
		{
			RESTORE_PRIMASK();
			vcom_Trace((uint8_t*)PRINTFbuf, bufSize, 1);
 8006ed4:	f8b7 1fe6 	ldrh.w	r1, [r7, #4070]	@ 0xfe6
 8006ed8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006edc:	2201      	movs	r2, #1
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff ff2a 	bl	8006d38 <vcom_Trace>
 8006ee4:	e008      	b.n	8006ef8 <TraceSend+0x184>
 8006ee6:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 8006eea:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 8006ef2:	f383 8810 	msr	PRIMASK, r3
}
 8006ef6:	bf00      	nop
	else
	{
		RESTORE_PRIMASK();
	}

	return status;
 8006ef8:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 8006efc:	b25b      	sxtb	r3, r3
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	f607 77e8 	addw	r7, r7, #4072	@ 0xfe8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006f0a:	b003      	add	sp, #12
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	2007d344 	.word	0x2007d344
 8006f14:	0802d5b8 	.word	0x0802d5b8

08006f18 <getOTAFileInfo>:

// KCS in future, change name to "getOtaFileInfo"
bool getOTAFileInfo ( OTA_FILE_TYPE *OTAData, uint8_t index )
{
 8006f18:	b5b0      	push	{r4, r5, r7, lr}
 8006f1a:	f5ad 6d7e 	sub.w	sp, sp, #4064	@ 0xfe0
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8006f24:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8006f28:	6018      	str	r0, [r3, #0]
 8006f2a:	460a      	mov	r2, r1
 8006f2c:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8006f30:	f6a3 73dd 	subw	r3, r3, #4061	@ 0xfdd
 8006f34:	701a      	strb	r2, [r3, #0]
	bool fwAvail = false;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f887 3fdf 	strb.w	r3, [r7, #4063]	@ 0xfdf
	char Buff[MEMORY_MAX] = { " " };
 8006f3c:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8006f40:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 8006f44:	2220      	movs	r2, #32
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8006f4e:	2100      	movs	r1, #0
 8006f50:	4618      	mov	r0, r3
 8006f52:	f020 f90d 	bl	8027170 <memset>
	char test1[] = "firmware_available";
 8006f56:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8006f5a:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8006f5e:	4a57      	ldr	r2, [pc, #348]	@ (80070bc <getOTAFileInfo+0x1a4>)
 8006f60:	461c      	mov	r4, r3
 8006f62:	4615      	mov	r5, r2
 8006f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	8022      	strh	r2, [r4, #0]
 8006f6e:	3402      	adds	r4, #2
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	7023      	strb	r3, [r4, #0]

	Word_Transfer(Buff, (char*)downLinkPackets.mQTTMessage[index]);
 8006f74:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8006f78:	f6a3 73dd 	subw	r3, r3, #4061	@ 0xfdd
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	4a4e      	ldr	r2, [pc, #312]	@ (80070c0 <getOTAFileInfo+0x1a8>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006f90:	4611      	mov	r1, r2
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fbce 	bl	8006734 <Word_Transfer>

	// Check if firmware_available
	char *msg_ptr = strstr(Buff, test1);
 8006f98:	f107 0214 	add.w	r2, r7, #20
 8006f9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f020 f969 	bl	802727a <strstr>
 8006fa8:	f8c7 0fd4 	str.w	r0, [r7, #4052]	@ 0xfd4
	if (msg_ptr)
 8006fac:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	@ 0xfd4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d07c      	beq.n	80070ae <getOTAFileInfo+0x196>
	{
		// Find file name
		char *versionStr = strstr(Buff, "\"version\":");
 8006fb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006fb8:	4942      	ldr	r1, [pc, #264]	@ (80070c4 <getOTAFileInfo+0x1ac>)
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f020 f95d 	bl	802727a <strstr>
 8006fc0:	f8c7 0fd0 	str.w	r0, [r7, #4048]	@ 0xfd0
		if (versionStr)
 8006fc4:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d034      	beq.n	8007036 <getOTAFileInfo+0x11e>
		{
			versionStr += strlen("\"version\":\"");
 8006fcc:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8006fd0:	330b      	adds	r3, #11
 8006fd2:	f8c7 3fd0 	str.w	r3, [r7, #4048]	@ 0xfd0
			int versionLength = strcspn(versionStr, "\"");
 8006fd6:	493c      	ldr	r1, [pc, #240]	@ (80070c8 <getOTAFileInfo+0x1b0>)
 8006fd8:	f8d7 0fd0 	ldr.w	r0, [r7, #4048]	@ 0xfd0
 8006fdc:	f020 f8ec 	bl	80271b8 <strcspn>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	f8c7 3fd8 	str.w	r3, [r7, #4056]	@ 0xfd8
			if (versionLength >49) //Protect string from overflow
 8006fe6:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	@ 0xfd8
 8006fea:	2b31      	cmp	r3, #49	@ 0x31
 8006fec:	dd02      	ble.n	8006ff4 <getOTAFileInfo+0xdc>
			{ versionLength = 49;}
 8006fee:	2331      	movs	r3, #49	@ 0x31
 8006ff0:	f8c7 3fd8 	str.w	r3, [r7, #4056]	@ 0xfd8
			strncpy(OTAData->otaFileName, versionStr, versionLength);
 8006ff4:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8006ff8:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3390      	adds	r3, #144	@ 0x90
 8007000:	f8d7 2fd8 	ldr.w	r2, [r7, #4056]	@ 0xfd8
 8007004:	f8d7 1fd0 	ldr.w	r1, [r7, #4048]	@ 0xfd0
 8007008:	4618      	mov	r0, r3
 800700a:	f020 f8f8 	bl	80271fe <strncpy>
			OTAData->otaFileName[versionLength] = '\0'; //
 800700e:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8007012:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	@ 0xfd8
 800701c:	4413      	add	r3, r2
 800701e:	3390      	adds	r3, #144	@ 0x90
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
			OTAData->fileNameLength = versionLength;
 8007024:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	@ 0xfd8
 8007028:	b2da      	uxtb	r2, r3
 800702a:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 800702e:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	715a      	strb	r2, [r3, #5]
		}

		// Find total_files
		char *totalFiles_str = strstr(Buff, "\"total_files\":");
 8007036:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800703a:	4924      	ldr	r1, [pc, #144]	@ (80070cc <getOTAFileInfo+0x1b4>)
 800703c:	4618      	mov	r0, r3
 800703e:	f020 f91c 	bl	802727a <strstr>
 8007042:	f8c7 0fcc 	str.w	r0, [r7, #4044]	@ 0xfcc
		if (totalFiles_str)
 8007046:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 800704a:	2b00      	cmp	r3, #0
 800704c:	d02c      	beq.n	80070a8 <getOTAFileInfo+0x190>
		{
			totalFiles_str += strlen("\"total_files\":");
 800704e:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 8007052:	330e      	adds	r3, #14
 8007054:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
			int totalFiles_length = strcspn(totalFiles_str, "}");
 8007058:	491d      	ldr	r1, [pc, #116]	@ (80070d0 <getOTAFileInfo+0x1b8>)
 800705a:	f8d7 0fcc 	ldr.w	r0, [r7, #4044]	@ 0xfcc
 800705e:	f020 f8ab 	bl	80271b8 <strcspn>
 8007062:	4603      	mov	r3, r0
 8007064:	f8c7 3fc8 	str.w	r3, [r7, #4040]	@ 0xfc8
			char totalFilesString[10] = "";
 8007068:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 800706c:	f6a3 73d8 	subw	r3, r3, #4056	@ 0xfd8
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	3304      	adds	r3, #4
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	809a      	strh	r2, [r3, #4]
			strncpy(totalFilesString, totalFiles_str, totalFiles_length);
 800707c:	f8d7 2fc8 	ldr.w	r2, [r7, #4040]	@ 0xfc8
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	f8d7 1fcc 	ldr.w	r1, [r7, #4044]	@ 0xfcc
 8007088:	4618      	mov	r0, r3
 800708a:	f020 f8b8 	bl	80271fe <strncpy>
			OTAData->numberOfFiles = (uint8_t)atoi(totalFilesString);
 800708e:	f107 0308 	add.w	r3, r7, #8
 8007092:	4618      	mov	r0, r3
 8007094:	f01e f922 	bl	80252dc <atoi>
 8007098:	4603      	mov	r3, r0
 800709a:	b2da      	uxtb	r2, r3
 800709c:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 80070a0:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	705a      	strb	r2, [r3, #1]
		}

		fwAvail =  true; // Firmware available
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3fdf 	strb.w	r3, [r7, #4063]	@ 0xfdf
	}
	return fwAvail;
 80070ae:	f897 3fdf 	ldrb.w	r3, [r7, #4063]	@ 0xfdf
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	f507 677e 	add.w	r7, r7, #4064	@ 0xfe0
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bdb0      	pop	{r4, r5, r7, pc}
 80070bc:	0802d600 	.word	0x0802d600
 80070c0:	20026db8 	.word	0x20026db8
 80070c4:	0802d5dc 	.word	0x0802d5dc
 80070c8:	0802d5e8 	.word	0x0802d5e8
 80070cc:	0802d5ec 	.word	0x0802d5ec
 80070d0:	0802d5fc 	.word	0x0802d5fc

080070d4 <decodeFwPage>:

void decodeFwPage (OTA_FILE_TYPE *OTAData )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	f5ad 6d7e 	sub.w	sp, sp, #4064	@ 0xfe0
 80070da:	af00      	add	r7, sp, #0
 80070dc:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 80070e0:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 80070e4:	6018      	str	r0, [r3, #0]
	int msgCount = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8c7 3fdc 	str.w	r3, [r7, #4060]	@ 0xfdc
	char Buff[MEMORY_MAX];
	char test1[] = "firmware_v0";
 80070ec:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 80070f0:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 80070f4:	4a6a      	ldr	r2, [pc, #424]	@ (80072a0 <decodeFwPage+0x1cc>)
 80070f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80070f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	do
	{
		//csc added watchdog for debug
		Refresh_Watchdog;
 80070fc:	4869      	ldr	r0, [pc, #420]	@ (80072a4 <decodeFwPage+0x1d0>)
 80070fe:	f014 f868 	bl	801b1d2 <HAL_IWDG_Refresh>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <decodeFwPage+0x38>
 8007108:	f00e fb44 	bl	8015794 <Error_Handler>
		//    optionally in future store the message in a "to be done in future" container
		// 3. Do the following decode

		// Transfer MQTT message to a local buffer

		Word_Transfer(Buff, (char *)downLinkPackets.mQTTMessage[msgCount]);
 800710c:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 8007110:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007114:	fb02 f303 	mul.w	r3, r2, r3
 8007118:	4a63      	ldr	r2, [pc, #396]	@ (80072a8 <decodeFwPage+0x1d4>)
 800711a:	4413      	add	r3, r2
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	f107 0320 	add.w	r3, r7, #32
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7ff fb05 	bl	8006734 <Word_Transfer>

		// Check for firmware version
		char *version_str = strstr(Buff, test1);
 800712a:	f107 0214 	add.w	r2, r7, #20
 800712e:	f107 0320 	add.w	r3, r7, #32
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f020 f8a0 	bl	802727a <strstr>
 800713a:	f8c7 0fd8 	str.w	r0, [r7, #4056]	@ 0xfd8
		if (version_str)
 800713e:	f8d7 3fd8 	ldr.w	r3, [r7, #4056]	@ 0xfd8
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 809b 	beq.w	800727e <decodeFwPage+0x1aa>
		{
			// Find page
			char *page_str = strstr(Buff, "\"total_pages\":");
 8007148:	f107 0320 	add.w	r3, r7, #32
 800714c:	4957      	ldr	r1, [pc, #348]	@ (80072ac <decodeFwPage+0x1d8>)
 800714e:	4618      	mov	r0, r3
 8007150:	f020 f893 	bl	802727a <strstr>
 8007154:	f8c7 0fd4 	str.w	r0, [r7, #4052]	@ 0xfd4
			if (page_str)
 8007158:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	@ 0xfd4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02c      	beq.n	80071ba <decodeFwPage+0xe6>
			{
				page_str += strlen("\"total_pages\":");
 8007160:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	@ 0xfd4
 8007164:	330e      	adds	r3, #14
 8007166:	f8c7 3fd4 	str.w	r3, [r7, #4052]	@ 0xfd4
				int page_length = strcspn(page_str, ",");
 800716a:	4951      	ldr	r1, [pc, #324]	@ (80072b0 <decodeFwPage+0x1dc>)
 800716c:	f8d7 0fd4 	ldr.w	r0, [r7, #4052]	@ 0xfd4
 8007170:	f020 f822 	bl	80271b8 <strcspn>
 8007174:	4603      	mov	r3, r0
 8007176:	f8c7 3fd0 	str.w	r3, [r7, #4048]	@ 0xfd0
				strncpy(OTAData->numofPagesString, page_str, page_length);
 800717a:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 800717e:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 8007188:	f8d7 2fd0 	ldr.w	r2, [r7, #4048]	@ 0xfd0
 800718c:	f8d7 1fd4 	ldr.w	r1, [r7, #4052]	@ 0xfd4
 8007190:	4618      	mov	r0, r3
 8007192:	f020 f834 	bl	80271fe <strncpy>
				OTAData->numberOfPages = atoi(OTAData->numofPagesString);
 8007196:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 800719a:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f503 73e1 	add.w	r3, r3, #450	@ 0x1c2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f01e f899 	bl	80252dc <atoi>
 80071aa:	4603      	mov	r3, r0
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 80071b2:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	709a      	strb	r2, [r3, #2]
			}

			// Find file number
			char *file_str = strstr(Buff, "\"file\":");
 80071ba:	f107 0320 	add.w	r3, r7, #32
 80071be:	493d      	ldr	r1, [pc, #244]	@ (80072b4 <decodeFwPage+0x1e0>)
 80071c0:	4618      	mov	r0, r3
 80071c2:	f020 f85a 	bl	802727a <strstr>
 80071c6:	f8c7 0fcc 	str.w	r0, [r7, #4044]	@ 0xfcc
			if (file_str)
 80071ca:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d019      	beq.n	8007206 <decodeFwPage+0x132>
			{
				file_str += strlen("\"file\":");
 80071d2:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 80071d6:	3307      	adds	r3, #7
 80071d8:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
				int file_length = strcspn(file_str, ",");
 80071dc:	4934      	ldr	r1, [pc, #208]	@ (80072b0 <decodeFwPage+0x1dc>)
 80071de:	f8d7 0fcc 	ldr.w	r0, [r7, #4044]	@ 0xfcc
 80071e2:	f01f ffe9 	bl	80271b8 <strcspn>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f8c7 3fc8 	str.w	r3, [r7, #4040]	@ 0xfc8
				strncpy(OTAData->fileNumberString, file_str, file_length);
 80071ec:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 80071f0:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3310      	adds	r3, #16
 80071f8:	f8d7 2fc8 	ldr.w	r2, [r7, #4040]	@ 0xfc8
 80071fc:	f8d7 1fcc 	ldr.w	r1, [r7, #4044]	@ 0xfcc
 8007200:	4618      	mov	r0, r3
 8007202:	f01f fffc 	bl	80271fe <strncpy>
			}

			// Find crc
			char *crc_str = strstr(Buff, "\"crc\":");
 8007206:	f107 0320 	add.w	r3, r7, #32
 800720a:	492b      	ldr	r1, [pc, #172]	@ (80072b8 <decodeFwPage+0x1e4>)
 800720c:	4618      	mov	r0, r3
 800720e:	f020 f834 	bl	802727a <strstr>
 8007212:	f8c7 0fc4 	str.w	r0, [r7, #4036]	@ 0xfc4
			if (crc_str)
 8007216:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	@ 0xfc4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d03a      	beq.n	8007294 <decodeFwPage+0x1c0>
			{
				crc_str += strlen("\"crc\":");
 800721e:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	@ 0xfc4
 8007222:	3306      	adds	r3, #6
 8007224:	f8c7 3fc4 	str.w	r3, [r7, #4036]	@ 0xfc4
				int crc_length = strcspn(crc_str, ",");
 8007228:	4921      	ldr	r1, [pc, #132]	@ (80072b0 <decodeFwPage+0x1dc>)
 800722a:	f8d7 0fc4 	ldr.w	r0, [r7, #4036]	@ 0xfc4
 800722e:	f01f ffc3 	bl	80271b8 <strcspn>
 8007232:	4603      	mov	r3, r0
 8007234:	f8c7 3fc0 	str.w	r3, [r7, #4032]	@ 0xfc0
				char xcrcString[10] = "";
 8007238:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 800723c:	f6a3 73d8 	subw	r3, r3, #4056	@ 0xfd8
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	3304      	adds	r3, #4
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	809a      	strh	r2, [r3, #4]
				strncpy(xcrcString, crc_str, crc_length);
 800724c:	f8d7 2fc0 	ldr.w	r2, [r7, #4032]	@ 0xfc0
 8007250:	f107 0308 	add.w	r3, r7, #8
 8007254:	f8d7 1fc4 	ldr.w	r1, [r7, #4036]	@ 0xfc4
 8007258:	4618      	mov	r0, r3
 800725a:	f01f ffd0 	bl	80271fe <strncpy>
				OTAData->xmitCRC = strtol(xcrcString, NULL, 10);
 800725e:	f107 0308 	add.w	r3, r7, #8
 8007262:	220a      	movs	r2, #10
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f01e ff24 	bl	80260b4 <strtol>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	f507 637e 	add.w	r3, r7, #4064	@ 0xfe0
 8007274:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	609a      	str	r2, [r3, #8]
			}

			break; // Exit the loop as we've successfully extracted data
 800727c:	e00a      	b.n	8007294 <decodeFwPage+0x1c0>
		}

		msgCount++;
 800727e:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 8007282:	3301      	adds	r3, #1
 8007284:	f8c7 3fdc 	str.w	r3, [r7, #4060]	@ 0xfdc

	} while (msgCount < 6);
 8007288:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 800728c:	2b05      	cmp	r3, #5
 800728e:	f77f af35 	ble.w	80070fc <decodeFwPage+0x28>
}
 8007292:	e000      	b.n	8007296 <decodeFwPage+0x1c2>
			break; // Exit the loop as we've successfully extracted data
 8007294:	bf00      	nop
}
 8007296:	bf00      	nop
 8007298:	f507 677e 	add.w	r7, r7, #4064	@ 0xfe0
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	0802d634 	.word	0x0802d634
 80072a4:	2007d0bc 	.word	0x2007d0bc
 80072a8:	20026db8 	.word	0x20026db8
 80072ac:	0802d614 	.word	0x0802d614
 80072b0:	0802d588 	.word	0x0802d588
 80072b4:	0802d624 	.word	0x0802d624
 80072b8:	0802d62c 	.word	0x0802d62c

080072bc <CELL_HARDWARE_RESET>:
 Cell Hardware Reset
 Reconfigures port settings and restarts device
 from initial parameters
 ******************************************************/
void CELL_HARDWARE_RESET ( MEM_PTR *Data_Ptr )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	HAL_UART_DeInit ( &hlpuart1 );
 80072c4:	480a      	ldr	r0, [pc, #40]	@ (80072f0 <CELL_HARDWARE_RESET+0x34>)
 80072c6:	f01b fa8b 	bl	80227e0 <HAL_UART_DeInit>
	//	MX_LPUART1_UART_Init();
	Clear_Memory ( Data_Ptr );
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff f9d9 	bl	8006682 <Clear_Memory>

	HAL_Delay ( 500 ); //cell warmup when implemented
 80072d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80072d4:	f00f f8d6 	bl	8016484 <HAL_Delay>
	Refresh_Watchdog;
 80072d8:	4806      	ldr	r0, [pc, #24]	@ (80072f4 <CELL_HARDWARE_RESET+0x38>)
 80072da:	f013 ff7a 	bl	801b1d2 <HAL_IWDG_Refresh>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <CELL_HARDWARE_RESET+0x2c>
 80072e4:	f00e fa56 	bl	8015794 <Error_Handler>
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	2007d1c0 	.word	0x2007d1c0
 80072f4:	2007d0bc 	.word	0x2007d0bc

080072f8 <Time_Stamp>:
	Clear_Memory ( Data_Ptr );
}
#endif //end of EXTERNAL_XPS_STORAGE

void Time_Stamp ( char *MSG )
{
 80072f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fa:	b093      	sub	sp, #76	@ 0x4c
 80072fc:	af06      	add	r7, sp, #24
 80072fe:	6078      	str	r0, [r7, #4]
	int TsLength = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	/* Get the RTC Curr Time */
	HAL_RTC_GetTime ( &hrtc , &stimestructureget , RTC_FORMAT_BIN );
 8007304:	f107 0308 	add.w	r3, r7, #8
 8007308:	2200      	movs	r2, #0
 800730a:	4619      	mov	r1, r3
 800730c:	4820      	ldr	r0, [pc, #128]	@ (8007390 <Time_Stamp+0x98>)
 800730e:	f019 ff87 	bl	8021220 <HAL_RTC_GetTime>
	/* Get the RTC Curr Date */
	HAL_RTC_GetDate ( &hrtc , &sdatestructureget , RTC_FORMAT_BIN );
 8007312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007316:	2200      	movs	r2, #0
 8007318:	4619      	mov	r1, r3
 800731a:	481d      	ldr	r0, [pc, #116]	@ (8007390 <Time_Stamp+0x98>)
 800731c:	f01a f878 	bl	8021410 <HAL_RTC_GetDate>

	uint32_t msec = 1000 * (stimestructureget.SecondFraction - stimestructureget.SubSeconds) / (stimestructureget.SecondFraction + 1);
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800732a:	fb03 f202 	mul.w	r2, r3, r2
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	3301      	adds	r3, #1
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	62bb      	str	r3, [r7, #40]	@ 0x28


	// Display time Format : mm_dd_yyyy__hh_mm_ss-fff
	// Connor, the Logger.Debug_Val will overflow this message eventually, need to change it to subseconds like ISO
	TsLength = snprintf ( MSG ,LOG_TIMESTAMP_LENGTH, "%02d_%02d_%02d__%02d_%02d_%02lu-%03lu" ,
			sdatestructureget.Month ,
 8007338:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
	TsLength = snprintf ( MSG ,LOG_TIMESTAMP_LENGTH, "%02d_%02d_%02d__%02d_%02d_%02lu-%03lu" ,
 800733c:	461e      	mov	r6, r3
			sdatestructureget.Date ,
 800733e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
	TsLength = snprintf ( MSG ,LOG_TIMESTAMP_LENGTH, "%02d_%02d_%02d__%02d_%02d_%02lu-%03lu" ,
 8007342:	4618      	mov	r0, r3
			2000 + sdatestructureget.Year ,
 8007344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	TsLength = snprintf ( MSG ,LOG_TIMESTAMP_LENGTH, "%02d_%02d_%02d__%02d_%02d_%02lu-%03lu" ,
 8007348:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
			stimestructureget.Hours ,
 800734c:	7a3a      	ldrb	r2, [r7, #8]
	TsLength = snprintf ( MSG ,LOG_TIMESTAMP_LENGTH, "%02d_%02d_%02d__%02d_%02d_%02lu-%03lu" ,
 800734e:	4614      	mov	r4, r2
			stimestructureget.Minutes ,
 8007350:	7a7a      	ldrb	r2, [r7, #9]
	TsLength = snprintf ( MSG ,LOG_TIMESTAMP_LENGTH, "%02d_%02d_%02d__%02d_%02d_%02lu-%03lu" ,
 8007352:	4615      	mov	r5, r2
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007358:	9105      	str	r1, [sp, #20]
 800735a:	9204      	str	r2, [sp, #16]
 800735c:	9503      	str	r5, [sp, #12]
 800735e:	9402      	str	r4, [sp, #8]
 8007360:	9301      	str	r3, [sp, #4]
 8007362:	9000      	str	r0, [sp, #0]
 8007364:	4633      	mov	r3, r6
 8007366:	4a0b      	ldr	r2, [pc, #44]	@ (8007394 <Time_Stamp+0x9c>)
 8007368:	2119      	movs	r1, #25
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f01f fe1e 	bl	8026fac <sniprintf>
 8007370:	62f8      	str	r0, [r7, #44]	@ 0x2c
			stimestructureget.Seconds ,
			msec );

	if((TsLength < 1)|| TsLength > LOG_TIMESTAMP_LENGTH)
 8007372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd02      	ble.n	800737e <Time_Stamp+0x86>
 8007378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737a:	2b19      	cmp	r3, #25
 800737c:	dd03      	ble.n	8007386 <Time_Stamp+0x8e>
	{
		PRINTF("Time_Stamp function returned a bad string\r\n");
 800737e:	4906      	ldr	r1, [pc, #24]	@ (8007398 <Time_Stamp+0xa0>)
 8007380:	2001      	movs	r0, #1
 8007382:	f7ff fcf7 	bl	8006d74 <TraceSend>
	}
}
 8007386:	bf00      	nop
 8007388:	3734      	adds	r7, #52	@ 0x34
 800738a:	46bd      	mov	sp, r7
 800738c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738e:	bf00      	nop
 8007390:	2007d344 	.word	0x2007d344
 8007394:	0802d64c 	.word	0x0802d64c
 8007398:	0802d674 	.word	0x0802d674

0800739c <Time_StampISO>:

void Time_StampISO( char *MSG )
{
 800739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739e:	b093      	sub	sp, #76	@ 0x4c
 80073a0:	af06      	add	r7, sp, #24
 80073a2:	6078      	str	r0, [r7, #4]
	int TsLength = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;

	/* Get the RTC Curr Time */
	HAL_RTC_GetTime ( &hrtc , &stimestructureget , RTC_FORMAT_BIN );
 80073a8:	f107 0308 	add.w	r3, r7, #8
 80073ac:	2200      	movs	r2, #0
 80073ae:	4619      	mov	r1, r3
 80073b0:	4820      	ldr	r0, [pc, #128]	@ (8007434 <Time_StampISO+0x98>)
 80073b2:	f019 ff35 	bl	8021220 <HAL_RTC_GetTime>
	/* Get the RTC Curr Date */
	HAL_RTC_GetDate ( &hrtc , &sdatestructureget , RTC_FORMAT_BIN );
 80073b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073ba:	2200      	movs	r2, #0
 80073bc:	4619      	mov	r1, r3
 80073be:	481d      	ldr	r0, [pc, #116]	@ (8007434 <Time_StampISO+0x98>)
 80073c0:	f01a f826 	bl	8021410 <HAL_RTC_GetDate>
	// Display time Format : YYYY-MM-DDThh:mm:ss.fffZ
	// "2025-02-25T03:54:12.255Z"

	// found on internet
	uint32_t msec = 1000 * (stimestructureget.SecondFraction - stimestructureget.SubSeconds) / (stimestructureget.SecondFraction + 1);
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80073ce:	fb03 f202 	mul.w	r2, r3, r2
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	3301      	adds	r3, #1
 80073d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073da:	62bb      	str	r3, [r7, #40]	@ 0x28

	TsLength = snprintf ( MSG ,ISO_TIMESTAMP_LENGTH, "%04d-%02d-%02dT%02d:%02d:%02lu.%03luZ",
			2000 + sdatestructureget.Year ,
 80073dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
	TsLength = snprintf ( MSG ,ISO_TIMESTAMP_LENGTH, "%04d-%02d-%02dT%02d:%02d:%02lu.%03luZ",
 80073e0:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
			sdatestructureget.Month ,
 80073e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
	TsLength = snprintf ( MSG ,ISO_TIMESTAMP_LENGTH, "%04d-%02d-%02dT%02d:%02d:%02lu.%03luZ",
 80073e8:	4618      	mov	r0, r3
			sdatestructureget.Date ,
 80073ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
	TsLength = snprintf ( MSG ,ISO_TIMESTAMP_LENGTH, "%04d-%02d-%02dT%02d:%02d:%02lu.%03luZ",
 80073ee:	461c      	mov	r4, r3
			stimestructureget.Hours ,
 80073f0:	7a3b      	ldrb	r3, [r7, #8]
	TsLength = snprintf ( MSG ,ISO_TIMESTAMP_LENGTH, "%04d-%02d-%02dT%02d:%02d:%02lu.%03luZ",
 80073f2:	461d      	mov	r5, r3
			stimestructureget.Minutes ,
 80073f4:	7a7b      	ldrb	r3, [r7, #9]
	TsLength = snprintf ( MSG ,ISO_TIMESTAMP_LENGTH, "%04d-%02d-%02dT%02d:%02d:%02lu.%03luZ",
 80073f6:	461e      	mov	r6, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073fc:	9205      	str	r2, [sp, #20]
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	9603      	str	r6, [sp, #12]
 8007402:	9502      	str	r5, [sp, #8]
 8007404:	9401      	str	r4, [sp, #4]
 8007406:	9000      	str	r0, [sp, #0]
 8007408:	460b      	mov	r3, r1
 800740a:	4a0b      	ldr	r2, [pc, #44]	@ (8007438 <Time_StampISO+0x9c>)
 800740c:	2119      	movs	r1, #25
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f01f fdcc 	bl	8026fac <sniprintf>
 8007414:	62f8      	str	r0, [r7, #44]	@ 0x2c
			stimestructureget.Seconds ,
			msec);

	if((TsLength < 1)|| TsLength > ISO_TIMESTAMP_LENGTH)
 8007416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007418:	2b00      	cmp	r3, #0
 800741a:	dd02      	ble.n	8007422 <Time_StampISO+0x86>
 800741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800741e:	2b19      	cmp	r3, #25
 8007420:	dd03      	ble.n	800742a <Time_StampISO+0x8e>
	{
		PRINTF("Time_StampISO function returned a bad string\r\n");
 8007422:	4906      	ldr	r1, [pc, #24]	@ (800743c <Time_StampISO+0xa0>)
 8007424:	2001      	movs	r0, #1
 8007426:	f7ff fca5 	bl	8006d74 <TraceSend>
	}

}
 800742a:	bf00      	nop
 800742c:	3734      	adds	r7, #52	@ 0x34
 800742e:	46bd      	mov	sp, r7
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	bf00      	nop
 8007434:	2007d344 	.word	0x2007d344
 8007438:	0802d6a0 	.word	0x0802d6a0
 800743c:	0802d6c8 	.word	0x0802d6c8

08007440 <bank2HandleFWDownlink>:
// Bank 2 function
//Store device state to XPS
//Store Firmware Downlink enabled flag to XPS
//Swap Instructions set to Bank 1
void bank2HandleFWDownlink(MEM_PTR *Data_Ptr, OTA_FILE_TYPE *OtaData)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
	PRINTF("Handle Downlink in Bank 2\r\n" );
 800744a:	4910      	ldr	r1, [pc, #64]	@ (800748c <bank2HandleFWDownlink+0x4c>)
 800744c:	2001      	movs	r0, #1
 800744e:	f7ff fc91 	bl	8006d74 <TraceSend>
	// Save OTA data needed
	setOTAfwAvailable(true);
 8007452:	2001      	movs	r0, #1
 8007454:	f00b ff22 	bl	801329c <setOTAfwAvailable>
	setOtaData(OtaData);
 8007458:	6838      	ldr	r0, [r7, #0]
 800745a:	f00b ff39 	bl	80132d0 <setOtaData>
	PRINTF("Saving Parameter Data to XPS\r\n" );
 800745e:	490c      	ldr	r1, [pc, #48]	@ (8007490 <bank2HandleFWDownlink+0x50>)
 8007460:	2001      	movs	r0, #1
 8007462:	f7ff fc87 	bl	8006d74 <TraceSend>
	saveParamDataToFlash(Data_Ptr);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f00b ff8c 	bl	8013384 <saveParamDataToFlash>
	PRINTF("Booting back to Bank 1\r\n" );
 800746c:	4909      	ldr	r1, [pc, #36]	@ (8007494 <bank2HandleFWDownlink+0x54>)
 800746e:	2001      	movs	r0, #1
 8007470:	f7ff fc80 	bl	8006d74 <TraceSend>
	// Make sure everything wraps up
	HAL_Delay ( 1000 );
 8007474:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007478:	f00f f804 	bl	8016484 <HAL_Delay>
	Boot_Change(BANK2);  // current bank is bank2
 800747c:	2002      	movs	r0, #2
 800747e:	f7fc f9bb 	bl	80037f8 <Boot_Change>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	0802d6f8 	.word	0x0802d6f8
 8007490:	0802d714 	.word	0x0802d714
 8007494:	0802d734 	.word	0x0802d734

08007498 <isWaitingforOTA>:
	decodeFwPage(&testOTAdata);

}

bool isWaitingforOTA(MEM_PTR *Data_Ptr)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
	// temporary KCS
	readParamDataFromFlash(Data_Ptr);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f00b ffbd 	bl	8013420 <readParamDataFromFlash>
	return getOTAfwAvailable();
 80074a6:	f00b fee3 	bl	8013270 <getOTAfwAvailable>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <startOTAProcess>:
	}
	return isAvail;
}

void startOTAProcess(MEM_PTR *Data_Ptr)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	Refresh_Watchdog;
 80074bc:	4817      	ldr	r0, [pc, #92]	@ (800751c <startOTAProcess+0x68>)
 80074be:	f013 fe88 	bl	801b1d2 <HAL_IWDG_Refresh>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <startOTAProcess+0x18>
 80074c8:	f00e f964 	bl	8015794 <Error_Handler>

	Data_Ptr->Flash.currentFlashBank = getSwapBank();
 80074cc:	f7fc fbbe 	bl	8003c4c <getSwapBank>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	701a      	strb	r2, [r3, #0]
	PRINTF("Current Program Bank is %d\r\n",(uint8_t)getSwapBank() );
 80074d8:	f7fc fbb8 	bl	8003c4c <getSwapBank>
 80074dc:	4603      	mov	r3, r0
 80074de:	461a      	mov	r2, r3
 80074e0:	490f      	ldr	r1, [pc, #60]	@ (8007520 <startOTAProcess+0x6c>)
 80074e2:	2001      	movs	r0, #1
 80074e4:	f7ff fc46 	bl	8006d74 <TraceSend>
	// kcs OTA new strategy
	// if operating Bank is Bank 1 then

	if (BANK1== Data_Ptr->Flash.currentFlashBank)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d10c      	bne.n	800750a <startOTAProcess+0x56>
	{
		FW_Ack_Pending(Data_Ptr, &otaData);
 80074f0:	490c      	ldr	r1, [pc, #48]	@ (8007524 <startOTAProcess+0x70>)
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f006 fc1e 	bl	800dd34 <FW_Ack_Pending>
		FW_Ack_Ready(Data_Ptr, &otaData);
 80074f8:	490a      	ldr	r1, [pc, #40]	@ (8007524 <startOTAProcess+0x70>)
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f006 fd2a 	bl	800df54 <FW_Ack_Ready>
		OTAProcess(Data_Ptr, &otaData);
 8007500:	4908      	ldr	r1, [pc, #32]	@ (8007524 <startOTAProcess+0x70>)
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fe fc5a 	bl	8005dbc <OTAProcess>
	}
	else   // else  call bank2 function
	{
		bank2HandleFWDownlink(Data_Ptr, &otaData);
	}
}
 8007508:	e003      	b.n	8007512 <startOTAProcess+0x5e>
		bank2HandleFWDownlink(Data_Ptr, &otaData);
 800750a:	4906      	ldr	r1, [pc, #24]	@ (8007524 <startOTAProcess+0x70>)
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff97 	bl	8007440 <bank2HandleFWDownlink>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2007d0bc 	.word	0x2007d0bc
 8007520:	0802d750 	.word	0x0802d750
 8007524:	2002bbe0 	.word	0x2002bbe0

08007528 <processQuickOTA>:
	SENSOR_ARRAY_SIZE = 0; //reinitialize sensor array counter
}


void processQuickOTA(MEM_PTR *Data_Ptr)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	int slength = 50;
 8007530:	2332      	movs	r3, #50	@ 0x32
 8007532:	60fb      	str	r3, [r7, #12]
	PRINTF("Processing quick OTA\r\n" );
 8007534:	491f      	ldr	r1, [pc, #124]	@ (80075b4 <processQuickOTA+0x8c>)
 8007536:	2001      	movs	r0, #1
 8007538:	f7ff fc1c 	bl	8006d74 <TraceSend>
	getOtaData(&otaData);
 800753c:	481e      	ldr	r0, [pc, #120]	@ (80075b8 <processQuickOTA+0x90>)
 800753e:	f00b fef3 	bl	8013328 <getOtaData>
	otaData.fileNumber = 1; // KCS hack
 8007542:	4b1d      	ldr	r3, [pc, #116]	@ (80075b8 <processQuickOTA+0x90>)
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
	PRINTF("OTA number of files is %d\r\n", otaData.numberOfFiles );
 8007548:	4b1b      	ldr	r3, [pc, #108]	@ (80075b8 <processQuickOTA+0x90>)
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	461a      	mov	r2, r3
 800754e:	491b      	ldr	r1, [pc, #108]	@ (80075bc <processQuickOTA+0x94>)
 8007550:	2001      	movs	r0, #1
 8007552:	f7ff fc0f 	bl	8006d74 <TraceSend>
	PRINTF("OTA file name length is %d\r\n", otaData.fileNameLength );
 8007556:	4b18      	ldr	r3, [pc, #96]	@ (80075b8 <processQuickOTA+0x90>)
 8007558:	795b      	ldrb	r3, [r3, #5]
 800755a:	461a      	mov	r2, r3
 800755c:	4918      	ldr	r1, [pc, #96]	@ (80075c0 <processQuickOTA+0x98>)
 800755e:	2001      	movs	r0, #1
 8007560:	f7ff fc08 	bl	8006d74 <TraceSend>
	if(otaData.fileNameLength >1)
 8007564:	4b14      	ldr	r3, [pc, #80]	@ (80075b8 <processQuickOTA+0x90>)
 8007566:	795b      	ldrb	r3, [r3, #5]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d912      	bls.n	8007592 <processQuickOTA+0x6a>
	{
		if (otaData.fileNameLength <50)
 800756c:	4b12      	ldr	r3, [pc, #72]	@ (80075b8 <processQuickOTA+0x90>)
 800756e:	795b      	ldrb	r3, [r3, #5]
 8007570:	2b31      	cmp	r3, #49	@ 0x31
 8007572:	d802      	bhi.n	800757a <processQuickOTA+0x52>
		{
			slength = otaData.fileNameLength;
 8007574:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <processQuickOTA+0x90>)
 8007576:	795b      	ldrb	r3, [r3, #5]
 8007578:	60fb      	str	r3, [r7, #12]
		}

		vcom_Trace((uint8_t*)otaData.otaFileName, slength, 1);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	b29b      	uxth	r3, r3
 800757e:	2201      	movs	r2, #1
 8007580:	4619      	mov	r1, r3
 8007582:	4810      	ldr	r0, [pc, #64]	@ (80075c4 <processQuickOTA+0x9c>)
 8007584:	f7ff fbd8 	bl	8006d38 <vcom_Trace>
		vcom_Trace((uint8_t*) "\r\n", 2, 1);
 8007588:	2201      	movs	r2, #1
 800758a:	2102      	movs	r1, #2
 800758c:	480e      	ldr	r0, [pc, #56]	@ (80075c8 <processQuickOTA+0xa0>)
 800758e:	f7ff fbd3 	bl	8006d38 <vcom_Trace>

	}

	FW_Ack_Pending(Data_Ptr, &otaData);
 8007592:	4909      	ldr	r1, [pc, #36]	@ (80075b8 <processQuickOTA+0x90>)
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f006 fbcd 	bl	800dd34 <FW_Ack_Pending>
	FW_Ack_Ready(Data_Ptr, &otaData);
 800759a:	4907      	ldr	r1, [pc, #28]	@ (80075b8 <processQuickOTA+0x90>)
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f006 fcd9 	bl	800df54 <FW_Ack_Ready>
	OTAProcess(Data_Ptr, &otaData);
 80075a2:	4905      	ldr	r1, [pc, #20]	@ (80075b8 <processQuickOTA+0x90>)
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f7fe fc09 	bl	8005dbc <OTAProcess>

}
 80075aa:	bf00      	nop
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	0802d7e0 	.word	0x0802d7e0
 80075b8:	2002bbe0 	.word	0x2002bbe0
 80075bc:	0802d7f8 	.word	0x0802d7f8
 80075c0:	0802d814 	.word	0x0802d814
 80075c4:	2002bc70 	.word	0x2002bc70
 80075c8:	0802d5b4 	.word	0x0802d5b4

080075cc <universalDownlinkDecoder>:

void universalDownlinkDecoder(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	@ 0x28
 80075d0:	af00      	add	r7, sp, #0
	const char* fwAvTest = "firmware_available_v";
 80075d2:	4b9e      	ldr	r3, [pc, #632]	@ (800784c <universalDownlinkDecoder+0x280>)
 80075d4:	623b      	str	r3, [r7, #32]
	const char* fwTest = "firmware_v";
 80075d6:	4b9e      	ldr	r3, [pc, #632]	@ (8007850 <universalDownlinkDecoder+0x284>)
 80075d8:	61fb      	str	r3, [r7, #28]
	const char* fwComplete = "firmware_completed_v";
 80075da:	4b9e      	ldr	r3, [pc, #632]	@ (8007854 <universalDownlinkDecoder+0x288>)
 80075dc:	61bb      	str	r3, [r7, #24]
	const char* configTest = "\"config\"";
 80075de:	4b9e      	ldr	r3, [pc, #632]	@ (8007858 <universalDownlinkDecoder+0x28c>)
 80075e0:	617b      	str	r3, [r7, #20]
	const char* picAckTest = "image_ack_v";
 80075e2:	4b9e      	ldr	r3, [pc, #632]	@ (800785c <universalDownlinkDecoder+0x290>)
 80075e4:	613b      	str	r3, [r7, #16]
	const char* timeTest = "\"type\":\"timestamp\"";
 80075e6:	4b9e      	ldr	r3, [pc, #632]	@ (8007860 <universalDownlinkDecoder+0x294>)
 80075e8:	60fb      	str	r3, [r7, #12]
	const char* alarmTest = "\"type\":\"alarm\"";
 80075ea:	4b9e      	ldr	r3, [pc, #632]	@ (8007864 <universalDownlinkDecoder+0x298>)
 80075ec:	60bb      	str	r3, [r7, #8]
	const char* controlTest = "\"type\":\"control\"";
 80075ee:	4b9e      	ldr	r3, [pc, #632]	@ (8007868 <universalDownlinkDecoder+0x29c>)
 80075f0:	607b      	str	r3, [r7, #4]

	downLinkPackets.numberOfPackets = 0;  //
 80075f2:	4b9e      	ldr	r3, [pc, #632]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]

	// Parse each message to figure out its type and increment the count
	for(int msgItter = 0; msgItter < 5; msgItter++)
 80075f8:	2300      	movs	r3, #0
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fc:	e11c      	b.n	8007838 <universalDownlinkDecoder+0x26c>
	{
		if(strstr((char*)downLinkPackets.mQTTMessage[msgItter],fwAvTest))
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	4a98      	ldr	r2, [pc, #608]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800760a:	4413      	add	r3, r2
 800760c:	3301      	adds	r3, #1
 800760e:	6a39      	ldr	r1, [r7, #32]
 8007610:	4618      	mov	r0, r3
 8007612:	f01f fe32 	bl	802727a <strstr>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <universalDownlinkDecoder+0x6e>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_FW_AVAIL;
 800761c:	4a93      	ldr	r2, [pc, #588]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	4413      	add	r3, r2
 8007622:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007626:	3321      	adds	r3, #33	@ 0x21
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 800762c:	4b8f      	ldr	r3, [pc, #572]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	b2da      	uxtb	r2, r3
 8007634:	4b8d      	ldr	r3, [pc, #564]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	e0fb      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter],fwTest))
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	4a89      	ldr	r2, [pc, #548]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007646:	4413      	add	r3, r2
 8007648:	3301      	adds	r3, #1
 800764a:	69f9      	ldr	r1, [r7, #28]
 800764c:	4618      	mov	r0, r3
 800764e:	f01f fe14 	bl	802727a <strstr>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <universalDownlinkDecoder+0xaa>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_FW_PACKET;
 8007658:	4a84      	ldr	r2, [pc, #528]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	4413      	add	r3, r2
 800765e:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007662:	3321      	adds	r3, #33	@ 0x21
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 8007668:	4b80      	ldr	r3, [pc, #512]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	b2da      	uxtb	r2, r3
 8007670:	4b7e      	ldr	r3, [pc, #504]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e0dd      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter],fwComplete))
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800767c:	fb02 f303 	mul.w	r3, r2, r3
 8007680:	4a7a      	ldr	r2, [pc, #488]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007682:	4413      	add	r3, r2
 8007684:	3301      	adds	r3, #1
 8007686:	69b9      	ldr	r1, [r7, #24]
 8007688:	4618      	mov	r0, r3
 800768a:	f01f fdf6 	bl	802727a <strstr>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <universalDownlinkDecoder+0xe6>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_FW_COMPLETE;
 8007694:	4a75      	ldr	r2, [pc, #468]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	4413      	add	r3, r2
 800769a:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800769e:	3321      	adds	r3, #33	@ 0x21
 80076a0:	2202      	movs	r2, #2
 80076a2:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 80076a4:	4b71      	ldr	r3, [pc, #452]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	3301      	adds	r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	4b6f      	ldr	r3, [pc, #444]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	e0bf      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter], configTest))
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	4a6b      	ldr	r2, [pc, #428]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076be:	4413      	add	r3, r2
 80076c0:	3301      	adds	r3, #1
 80076c2:	6979      	ldr	r1, [r7, #20]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f01f fdd8 	bl	802727a <strstr>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00e      	beq.n	80076ee <universalDownlinkDecoder+0x122>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_CONFIG_PKT;
 80076d0:	4a66      	ldr	r2, [pc, #408]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80076da:	3321      	adds	r3, #33	@ 0x21
 80076dc:	2203      	movs	r2, #3
 80076de:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 80076e0:	4b62      	ldr	r3, [pc, #392]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	4b60      	ldr	r3, [pc, #384]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076ea:	701a      	strb	r2, [r3, #0]
 80076ec:	e0a1      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}

		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter], picAckTest))
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	4a5c      	ldr	r2, [pc, #368]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80076fa:	4413      	add	r3, r2
 80076fc:	3301      	adds	r3, #1
 80076fe:	6939      	ldr	r1, [r7, #16]
 8007700:	4618      	mov	r0, r3
 8007702:	f01f fdba 	bl	802727a <strstr>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00e      	beq.n	800772a <universalDownlinkDecoder+0x15e>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_PICTURE_ACK;
 800770c:	4a57      	ldr	r2, [pc, #348]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	4413      	add	r3, r2
 8007712:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007716:	3321      	adds	r3, #33	@ 0x21
 8007718:	2204      	movs	r2, #4
 800771a:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 800771c:	4b53      	ldr	r3, [pc, #332]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	b2da      	uxtb	r2, r3
 8007724:	4b51      	ldr	r3, [pc, #324]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e083      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter], timeTest))
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	4a4d      	ldr	r2, [pc, #308]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007736:	4413      	add	r3, r2
 8007738:	3301      	adds	r3, #1
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	4618      	mov	r0, r3
 800773e:	f01f fd9c 	bl	802727a <strstr>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <universalDownlinkDecoder+0x19a>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_TIME_SYNC;
 8007748:	4a48      	ldr	r2, [pc, #288]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	4413      	add	r3, r2
 800774e:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007752:	3321      	adds	r3, #33	@ 0x21
 8007754:	2205      	movs	r2, #5
 8007756:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 8007758:	4b44      	ldr	r3, [pc, #272]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	b2da      	uxtb	r2, r3
 8007760:	4b42      	ldr	r3, [pc, #264]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007762:	701a      	strb	r2, [r3, #0]
 8007764:	e065      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter], alarmTest))
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800776c:	fb02 f303 	mul.w	r3, r2, r3
 8007770:	4a3e      	ldr	r2, [pc, #248]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007772:	4413      	add	r3, r2
 8007774:	3301      	adds	r3, #1
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	4618      	mov	r0, r3
 800777a:	f01f fd7e 	bl	802727a <strstr>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00e      	beq.n	80077a2 <universalDownlinkDecoder+0x1d6>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_ALARM_COMMAND;
 8007784:	4a39      	ldr	r2, [pc, #228]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	4413      	add	r3, r2
 800778a:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800778e:	3321      	adds	r3, #33	@ 0x21
 8007790:	2206      	movs	r2, #6
 8007792:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 8007794:	4b35      	ldr	r3, [pc, #212]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	b2da      	uxtb	r2, r3
 800779c:	4b33      	ldr	r3, [pc, #204]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	e047      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else if(strstr((char*)downLinkPackets.mQTTMessage[msgItter], controlTest))
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80077a8:	fb02 f303 	mul.w	r3, r2, r3
 80077ac:	4a2f      	ldr	r2, [pc, #188]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80077ae:	4413      	add	r3, r2
 80077b0:	3301      	adds	r3, #1
 80077b2:	6879      	ldr	r1, [r7, #4]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f01f fd60 	bl	802727a <strstr>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00e      	beq.n	80077de <universalDownlinkDecoder+0x212>
		{
			downLinkPackets.downLinkEnum[msgItter] = DL_CONTROL;
 80077c0:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80077ca:	3321      	adds	r3, #33	@ 0x21
 80077cc:	2207      	movs	r2, #7
 80077ce:	701a      	strb	r2, [r3, #0]
			downLinkPackets.numberOfPackets++;
 80077d0:	4b26      	ldr	r3, [pc, #152]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	4b24      	ldr	r3, [pc, #144]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	e029      	b.n	8007832 <universalDownlinkDecoder+0x266>
		}
		else
		{
			//Check for message length > 1, if greater increment, if not don't
			if(strlen((char*)downLinkPackets.mQTTMessage[msgItter]) > 1)
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80077e4:	fb02 f303 	mul.w	r3, r2, r3
 80077e8:	4a20      	ldr	r2, [pc, #128]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80077ea:	4413      	add	r3, r2
 80077ec:	3301      	adds	r3, #1
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7f8 fd4c 	bl	800028c <strlen>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d90e      	bls.n	8007818 <universalDownlinkDecoder+0x24c>
			{
				downLinkPackets.downLinkEnum[msgItter] = DL_UNKNOWN_MSG;
 80077fa:	4a1c      	ldr	r2, [pc, #112]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	4413      	add	r3, r2
 8007800:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007804:	3321      	adds	r3, #33	@ 0x21
 8007806:	2209      	movs	r2, #9
 8007808:	701a      	strb	r2, [r3, #0]
				downLinkPackets.numberOfPackets++;
 800780a:	4b18      	ldr	r3, [pc, #96]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	3301      	adds	r3, #1
 8007810:	b2da      	uxtb	r2, r3
 8007812:	4b16      	ldr	r3, [pc, #88]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	e00c      	b.n	8007832 <universalDownlinkDecoder+0x266>
			}
			else
			{
				//Debug statement
				PRINTF("No message at index: %d\r\n", msgItter);
 8007818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800781a:	4915      	ldr	r1, [pc, #84]	@ (8007870 <universalDownlinkDecoder+0x2a4>)
 800781c:	2001      	movs	r0, #1
 800781e:	f7ff faa9 	bl	8006d74 <TraceSend>
				downLinkPackets.downLinkEnum[msgItter] = DL_DONE;
 8007822:	4a12      	ldr	r2, [pc, #72]	@ (800786c <universalDownlinkDecoder+0x2a0>)
 8007824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007826:	4413      	add	r3, r2
 8007828:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800782c:	3321      	adds	r3, #33	@ 0x21
 800782e:	2208      	movs	r2, #8
 8007830:	701a      	strb	r2, [r3, #0]
	for(int msgItter = 0; msgItter < 5; msgItter++)
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	3301      	adds	r3, #1
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	2b04      	cmp	r3, #4
 800783c:	f77f aedf 	ble.w	80075fe <universalDownlinkDecoder+0x32>
			}
		} //End if / else if / else
	} //End for loop
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	3728      	adds	r7, #40	@ 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	0802d834 	.word	0x0802d834
 8007850:	0802d84c 	.word	0x0802d84c
 8007854:	0802d858 	.word	0x0802d858
 8007858:	0802d870 	.word	0x0802d870
 800785c:	0802d87c 	.word	0x0802d87c
 8007860:	0802d888 	.word	0x0802d888
 8007864:	0802d89c 	.word	0x0802d89c
 8007868:	0802d8ac 	.word	0x0802d8ac
 800786c:	20026db8 	.word	0x20026db8
 8007870:	0802d8c0 	.word	0x0802d8c0

08007874 <selectDownlinkOperation>:

void selectDownlinkOperation(MEM_PTR *Data_Ptr, MACHINE_STATE_TYPE stateOfDevice)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	70fb      	strb	r3, [r7, #3]
	int opItter;
	int num = downLinkPackets.numberOfPackets; //KCS workaround for memory leak, needs fix
 8007880:	4baf      	ldr	r3, [pc, #700]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
	for(opItter = 0; opItter < num; opItter++)
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
 800788a:	e205      	b.n	8007c98 <selectDownlinkOperation+0x424>
	{
		if(downLinkPackets.downLinkEnum[opItter] == DL_DONE)
 800788c:	4aac      	ldr	r2, [pc, #688]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007896:	3321      	adds	r3, #33	@ 0x21
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b08      	cmp	r3, #8
 800789c:	d104      	bne.n	80078a8 <selectDownlinkOperation+0x34>
		{
			PRINTF("Done\r\n");
 800789e:	49a9      	ldr	r1, [pc, #676]	@ (8007b44 <selectDownlinkOperation+0x2d0>)
 80078a0:	2001      	movs	r0, #1
 80078a2:	f7ff fa67 	bl	8006d74 <TraceSend>
 80078a6:	e1f4      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_UNKNOWN_MSG)
 80078a8:	4aa5      	ldr	r2, [pc, #660]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80078b2:	3321      	adds	r3, #33	@ 0x21
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b09      	cmp	r3, #9
 80078b8:	d104      	bne.n	80078c4 <selectDownlinkOperation+0x50>
		{
			PRINTF("Unknown Message\r\n");
 80078ba:	49a3      	ldr	r1, [pc, #652]	@ (8007b48 <selectDownlinkOperation+0x2d4>)
 80078bc:	2001      	movs	r0, #1
 80078be:	f7ff fa59 	bl	8006d74 <TraceSend>
 80078c2:	e1e6      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_CONFIG_PKT)
 80078c4:	4a9e      	ldr	r2, [pc, #632]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80078ce:	3321      	adds	r3, #33	@ 0x21
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	f040 80f5 	bne.w	8007ac2 <selectDownlinkOperation+0x24e>
		{
			bool updateShadowRegister = false;
 80078d8:	2300      	movs	r3, #0
 80078da:	74fb      	strb	r3, [r7, #19]
			PRINTF("Configure\r\n");
 80078dc:	499b      	ldr	r1, [pc, #620]	@ (8007b4c <selectDownlinkOperation+0x2d8>)
 80078de:	2001      	movs	r0, #1
 80078e0:	f7ff fa48 	bl	8006d74 <TraceSend>
			Refresh_Watchdog;
 80078e4:	489a      	ldr	r0, [pc, #616]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 80078e6:	f013 fc74 	bl	801b1d2 <HAL_IWDG_Refresh>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <selectDownlinkOperation+0x80>
 80078f0:	f00d ff50 	bl	8015794 <Error_Handler>

			//call decodeConfigurations
			if(!decodeDayNightConfigs(downLinkPackets.mQTTMessage[opItter]))
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80078fa:	fb02 f303 	mul.w	r3, r2, r3
 80078fe:	4a90      	ldr	r2, [pc, #576]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007900:	4413      	add	r3, r2
 8007902:	3301      	adds	r3, #1
 8007904:	4618      	mov	r0, r3
 8007906:	f7fc fc7d 	bl	8004204 <decodeDayNightConfigs>
 800790a:	4603      	mov	r3, r0
 800790c:	f083 0301 	eor.w	r3, r3, #1
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <selectDownlinkOperation+0xae>
			{
				PRINTF("Day/Night configuration downlink found\r\n");
 8007916:	498f      	ldr	r1, [pc, #572]	@ (8007b54 <selectDownlinkOperation+0x2e0>)
 8007918:	2001      	movs	r0, #1
 800791a:	f7ff fa2b 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 800791e:	2301      	movs	r3, #1
 8007920:	74fb      	strb	r3, [r7, #19]
			}
			Refresh_Watchdog;
 8007922:	488b      	ldr	r0, [pc, #556]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 8007924:	f013 fc55 	bl	801b1d2 <HAL_IWDG_Refresh>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <selectDownlinkOperation+0xbe>
 800792e:	f00d ff31 	bl	8015794 <Error_Handler>
			if(!decodeHBConfigs(Data_Ptr, downLinkPackets.mQTTMessage[opItter]))
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007938:	fb02 f303 	mul.w	r3, r2, r3
 800793c:	4a80      	ldr	r2, [pc, #512]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 800793e:	4413      	add	r3, r2
 8007940:	3301      	adds	r3, #1
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fd6f 	bl	8008428 <decodeHBConfigs>
 800794a:	4603      	mov	r3, r0
 800794c:	f083 0301 	eor.w	r3, r3, #1
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d008      	beq.n	8007968 <selectDownlinkOperation+0xf4>
			{
				PRINTF("Heart beat configuration downlink found\r\n");
 8007956:	4980      	ldr	r1, [pc, #512]	@ (8007b58 <selectDownlinkOperation+0x2e4>)
 8007958:	2001      	movs	r0, #1
 800795a:	f7ff fa0b 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 800795e:	2301      	movs	r3, #1
 8007960:	74fb      	strb	r3, [r7, #19]
				hbTimeChanged = true;
 8007962:	4b7e      	ldr	r3, [pc, #504]	@ (8007b5c <selectDownlinkOperation+0x2e8>)
 8007964:	2201      	movs	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
			}
			Refresh_Watchdog;
 8007968:	4879      	ldr	r0, [pc, #484]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 800796a:	f013 fc32 	bl	801b1d2 <HAL_IWDG_Refresh>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <selectDownlinkOperation+0x104>
 8007974:	f00d ff0e 	bl	8015794 <Error_Handler>
			if(!decodeGPSConfigs(downLinkPackets.mQTTMessage[opItter]))
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	4a6f      	ldr	r2, [pc, #444]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007984:	4413      	add	r3, r2
 8007986:	3301      	adds	r3, #1
 8007988:	4618      	mov	r0, r3
 800798a:	f002 f817 	bl	80099bc <decodeGPSConfigs>
 800798e:	4603      	mov	r3, r0
 8007990:	f083 0301 	eor.w	r3, r3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <selectDownlinkOperation+0x132>
			{
				PRINTF("GPS configuration downlink found\r\n");
 800799a:	4971      	ldr	r1, [pc, #452]	@ (8007b60 <selectDownlinkOperation+0x2ec>)
 800799c:	2001      	movs	r0, #1
 800799e:	f7ff f9e9 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 80079a2:	2301      	movs	r3, #1
 80079a4:	74fb      	strb	r3, [r7, #19]
			}
			Refresh_Watchdog;
 80079a6:	486a      	ldr	r0, [pc, #424]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 80079a8:	f013 fc13 	bl	801b1d2 <HAL_IWDG_Refresh>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <selectDownlinkOperation+0x142>
 80079b2:	f00d feef 	bl	8015794 <Error_Handler>
			if(!decodePIRConfigs(downLinkPackets.mQTTMessage[opItter]))
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
 80079c0:	4a5f      	ldr	r2, [pc, #380]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 80079c2:	4413      	add	r3, r2
 80079c4:	3301      	adds	r3, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f003 ff16 	bl	800b7f8 <decodePIRConfigs>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f083 0301 	eor.w	r3, r3, #1
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <selectDownlinkOperation+0x170>
			{
				PRINTF("PIR configuration downlink found\r\n");
 80079d8:	4962      	ldr	r1, [pc, #392]	@ (8007b64 <selectDownlinkOperation+0x2f0>)
 80079da:	2001      	movs	r0, #1
 80079dc:	f7ff f9ca 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 80079e0:	2301      	movs	r3, #1
 80079e2:	74fb      	strb	r3, [r7, #19]
			}
			Refresh_Watchdog;
 80079e4:	485a      	ldr	r0, [pc, #360]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 80079e6:	f013 fbf4 	bl	801b1d2 <HAL_IWDG_Refresh>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <selectDownlinkOperation+0x180>
 80079f0:	f00d fed0 	bl	8015794 <Error_Handler>
			if(!decodeMotionFilter(downLinkPackets.mQTTMessage[opItter], PIR_DAY))
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	4a50      	ldr	r2, [pc, #320]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007a00:	4413      	add	r3, r2
 8007a02:	3301      	adds	r3, #1
 8007a04:	2100      	movs	r1, #0
 8007a06:	4618      	mov	r0, r3
 8007a08:	f004 f862 	bl	800bad0 <decodeMotionFilter>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f083 0301 	eor.w	r3, r3, #1
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d005      	beq.n	8007a24 <selectDownlinkOperation+0x1b0>
			{
				PRINTF("PIR day time motion filter downlink found\r\n");
 8007a18:	4953      	ldr	r1, [pc, #332]	@ (8007b68 <selectDownlinkOperation+0x2f4>)
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	f7ff f9aa 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 8007a20:	2301      	movs	r3, #1
 8007a22:	74fb      	strb	r3, [r7, #19]
			}
			Refresh_Watchdog;
 8007a24:	484a      	ldr	r0, [pc, #296]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 8007a26:	f013 fbd4 	bl	801b1d2 <HAL_IWDG_Refresh>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <selectDownlinkOperation+0x1c0>
 8007a30:	f00d feb0 	bl	8015794 <Error_Handler>
			if(!decodeMotionFilter(downLinkPackets.mQTTMessage[opItter], PIR_NIGHT))
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
 8007a3e:	4a40      	ldr	r2, [pc, #256]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007a40:	4413      	add	r3, r2
 8007a42:	3301      	adds	r3, #1
 8007a44:	2101      	movs	r1, #1
 8007a46:	4618      	mov	r0, r3
 8007a48:	f004 f842 	bl	800bad0 <decodeMotionFilter>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f083 0301 	eor.w	r3, r3, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <selectDownlinkOperation+0x1f0>
			{
				PRINTF("PIR night time motion filter downlink found\r\n");
 8007a58:	4944      	ldr	r1, [pc, #272]	@ (8007b6c <selectDownlinkOperation+0x2f8>)
 8007a5a:	2001      	movs	r0, #1
 8007a5c:	f7ff f98a 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 8007a60:	2301      	movs	r3, #1
 8007a62:	74fb      	strb	r3, [r7, #19]
			}
			Refresh_Watchdog
 8007a64:	483a      	ldr	r0, [pc, #232]	@ (8007b50 <selectDownlinkOperation+0x2dc>)
 8007a66:	f013 fbb4 	bl	801b1d2 <HAL_IWDG_Refresh>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <selectDownlinkOperation+0x200>
 8007a70:	f00d fe90 	bl	8015794 <Error_Handler>
			if(!decodeCameraConfigs(downLinkPackets.mQTTMessage[opItter]))
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	4a30      	ldr	r2, [pc, #192]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007a80:	4413      	add	r3, r2
 8007a82:	3301      	adds	r3, #1
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fa f99b 	bl	8001dc0 <decodeCameraConfigs>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f083 0301 	eor.w	r3, r3, #1
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <selectDownlinkOperation+0x22e>
			{
				PRINTF("Camera downlink found\r\n");
 8007a96:	4936      	ldr	r1, [pc, #216]	@ (8007b70 <selectDownlinkOperation+0x2fc>)
 8007a98:	2001      	movs	r0, #1
 8007a9a:	f7ff f96b 	bl	8006d74 <TraceSend>
				updateShadowRegister = true;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	74fb      	strb	r3, [r7, #19]
			}

			if (updateShadowRegister)
 8007aa2:	7cfb      	ldrb	r3, [r7, #19]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <selectDownlinkOperation+0x23a>
			{
				XPS_paramStore(Data_Ptr);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f00b ffc1 	bl	8013a30 <XPS_paramStore>
			}

			clearMqttMsg(opItter);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 f8b6 	bl	8008c24 <clearMqttMsg>
			sendDeviceConfig(Data_Ptr, CONFIG_ACK);
 8007ab8:	2101      	movs	r1, #1
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f00a fcc6 	bl	801244c <sendDeviceConfig>
 8007ac0:	e0e7      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_FW_PACKET)
 8007ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007acc:	3321      	adds	r3, #33	@ 0x21
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d104      	bne.n	8007ade <selectDownlinkOperation+0x26a>
		{
			PRINTF("Firmware version\r\n");
 8007ad4:	4927      	ldr	r1, [pc, #156]	@ (8007b74 <selectDownlinkOperation+0x300>)
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	f7ff f94c 	bl	8006d74 <TraceSend>
 8007adc:	e0d9      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_FW_AVAIL)
 8007ade:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007ae8:	3321      	adds	r3, #33	@ 0x21
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d113      	bne.n	8007b18 <selectDownlinkOperation+0x2a4>
		{
			PRINTF("Firmware Available\r\n");
 8007af0:	4921      	ldr	r1, [pc, #132]	@ (8007b78 <selectDownlinkOperation+0x304>)
 8007af2:	2001      	movs	r0, #1
 8007af4:	f7ff f93e 	bl	8006d74 <TraceSend>
			fwPending = getOTAFileInfo (&otaData, opItter );
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	481f      	ldr	r0, [pc, #124]	@ (8007b7c <selectDownlinkOperation+0x308>)
 8007b00:	f7ff fa0a 	bl	8006f18 <getOTAFileInfo>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	4b1d      	ldr	r3, [pc, #116]	@ (8007b80 <selectDownlinkOperation+0x30c>)
 8007b0a:	701a      	strb	r2, [r3, #0]
			clearMqttMsg(opItter);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4618      	mov	r0, r3
 8007b12:	f001 f887 	bl	8008c24 <clearMqttMsg>
 8007b16:	e0bc      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_FW_COMPLETE)
 8007b18:	4a09      	ldr	r2, [pc, #36]	@ (8007b40 <selectDownlinkOperation+0x2cc>)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007b22:	3321      	adds	r3, #33	@ 0x21
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d12e      	bne.n	8007b88 <selectDownlinkOperation+0x314>
		{
			PRINTF("Firmware Complete\r\n");
 8007b2a:	4916      	ldr	r1, [pc, #88]	@ (8007b84 <selectDownlinkOperation+0x310>)
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f7ff f921 	bl	8006d74 <TraceSend>
			clearMqttMsg(opItter);
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 f874 	bl	8008c24 <clearMqttMsg>
 8007b3c:	e0a9      	b.n	8007c92 <selectDownlinkOperation+0x41e>
 8007b3e:	bf00      	nop
 8007b40:	20026db8 	.word	0x20026db8
 8007b44:	0802d8dc 	.word	0x0802d8dc
 8007b48:	0802d8e4 	.word	0x0802d8e4
 8007b4c:	0802d8f8 	.word	0x0802d8f8
 8007b50:	2007d0bc 	.word	0x2007d0bc
 8007b54:	0802d904 	.word	0x0802d904
 8007b58:	0802d930 	.word	0x0802d930
 8007b5c:	2007a27c 	.word	0x2007a27c
 8007b60:	0802d95c 	.word	0x0802d95c
 8007b64:	0802d980 	.word	0x0802d980
 8007b68:	0802d9a4 	.word	0x0802d9a4
 8007b6c:	0802d9d0 	.word	0x0802d9d0
 8007b70:	0802da00 	.word	0x0802da00
 8007b74:	0802da18 	.word	0x0802da18
 8007b78:	0802da2c 	.word	0x0802da2c
 8007b7c:	2002bbe0 	.word	0x2002bbe0
 8007b80:	2007a270 	.word	0x2007a270
 8007b84:	0802da44 	.word	0x0802da44
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_PICTURE_ACK)
 8007b88:	4a51      	ldr	r2, [pc, #324]	@ (8007cd0 <selectDownlinkOperation+0x45c>)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007b92:	3321      	adds	r3, #33	@ 0x21
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d10f      	bne.n	8007bba <selectDownlinkOperation+0x346>
		{
			PRINTF("Image Acknowledge\r\n");
 8007b9a:	494e      	ldr	r1, [pc, #312]	@ (8007cd4 <selectDownlinkOperation+0x460>)
 8007b9c:	2001      	movs	r0, #1
 8007b9e:	f7ff f8e9 	bl	8006d74 <TraceSend>
			decodeImageAck(Data_Ptr, opItter);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 fa61 	bl	8008070 <decodeImageAck>
			clearMqttMsg(opItter);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f001 f836 	bl	8008c24 <clearMqttMsg>
 8007bb8:	e06b      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_TIME_SYNC)
 8007bba:	4a45      	ldr	r2, [pc, #276]	@ (8007cd0 <selectDownlinkOperation+0x45c>)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007bc4:	3321      	adds	r3, #33	@ 0x21
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b05      	cmp	r3, #5
 8007bca:	d11e      	bne.n	8007c0a <selectDownlinkOperation+0x396>
		{
			PRINTF("Time stamp received from server\r\n");
 8007bcc:	4942      	ldr	r1, [pc, #264]	@ (8007cd8 <selectDownlinkOperation+0x464>)
 8007bce:	2001      	movs	r0, #1
 8007bd0:	f7ff f8d0 	bl	8006d74 <TraceSend>
			if(!getServerTime(downLinkPackets.mQTTMessage[opItter]))
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007bda:	fb02 f303 	mul.w	r3, r2, r3
 8007bde:	4a3c      	ldr	r2, [pc, #240]	@ (8007cd0 <selectDownlinkOperation+0x45c>)
 8007be0:	4413      	add	r3, r2
 8007be2:	3301      	adds	r3, #1
 8007be4:	4618      	mov	r0, r3
 8007be6:	f00a feeb 	bl	80129c0 <getServerTime>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <selectDownlinkOperation+0x38a>
			{
				PRINTF("Time stamp set from server\r\n");
 8007bf6:	4939      	ldr	r1, [pc, #228]	@ (8007cdc <selectDownlinkOperation+0x468>)
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f7ff f8bb 	bl	8006d74 <TraceSend>
			}
			clearMqttMsg(opItter);
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 f80e 	bl	8008c24 <clearMqttMsg>
 8007c08:	e043      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_ALARM_COMMAND)
 8007c0a:	4a31      	ldr	r2, [pc, #196]	@ (8007cd0 <selectDownlinkOperation+0x45c>)
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007c14:	3321      	adds	r3, #33	@ 0x21
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b06      	cmp	r3, #6
 8007c1a:	d109      	bne.n	8007c30 <selectDownlinkOperation+0x3bc>
		{
			PRINTF("Alarm Command received from server\r\n");
 8007c1c:	4930      	ldr	r1, [pc, #192]	@ (8007ce0 <selectDownlinkOperation+0x46c>)
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f7ff f8a8 	bl	8006d74 <TraceSend>
			// TODO
			// Call a function to decode the alarm (gps, temp, humidity, movement)
			// which will set the appropriate alarm settings and feed into the main State Machine
			clearMqttMsg(opItter);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fffb 	bl	8008c24 <clearMqttMsg>
 8007c2e:	e030      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else if(downLinkPackets.downLinkEnum[opItter] == DL_CONTROL)
 8007c30:	4a27      	ldr	r2, [pc, #156]	@ (8007cd0 <selectDownlinkOperation+0x45c>)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8007c3a:	3321      	adds	r3, #33	@ 0x21
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b07      	cmp	r3, #7
 8007c40:	d123      	bne.n	8007c8a <selectDownlinkOperation+0x416>
		{
			if(!decodeCommand(downLinkPackets.mQTTMessage[opItter], "\"command\":\"store_config_external\""))
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007c48:	fb02 f303 	mul.w	r3, r2, r3
 8007c4c:	4a20      	ldr	r2, [pc, #128]	@ (8007cd0 <selectDownlinkOperation+0x45c>)
 8007c4e:	4413      	add	r3, r2
 8007c50:	3301      	adds	r3, #1
 8007c52:	4924      	ldr	r1, [pc, #144]	@ (8007ce4 <selectDownlinkOperation+0x470>)
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 fd73 	bl	8009740 <decodeCommand>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f083 0301 	eor.w	r3, r3, #1
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <selectDownlinkOperation+0x402>
			{
				PRINTF("Save Configuration to XPS received from server\r\n");
 8007c66:	4920      	ldr	r1, [pc, #128]	@ (8007ce8 <selectDownlinkOperation+0x474>)
 8007c68:	2001      	movs	r0, #1
 8007c6a:	f7ff f883 	bl	8006d74 <TraceSend>
				saveParamDataToFlash(Data_Ptr);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f00b fb88 	bl	8013384 <saveParamDataToFlash>
 8007c74:	e003      	b.n	8007c7e <selectDownlinkOperation+0x40a>
			}
			else
			{
				PRINTF("Invalid control command received\r\n");
 8007c76:	491d      	ldr	r1, [pc, #116]	@ (8007cec <selectDownlinkOperation+0x478>)
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7ff f87b 	bl	8006d74 <TraceSend>
			}
			clearMqttMsg(opItter);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 ffce 	bl	8008c24 <clearMqttMsg>
 8007c88:	e003      	b.n	8007c92 <selectDownlinkOperation+0x41e>
		}
		else
		{
			PRINTF("How did we get here????? Something has gone terribly wrong\r\n");
 8007c8a:	4919      	ldr	r1, [pc, #100]	@ (8007cf0 <selectDownlinkOperation+0x47c>)
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f7ff f871 	bl	8006d74 <TraceSend>
	for(opItter = 0; opItter < num; opItter++)
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	3301      	adds	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	f6ff adf5 	blt.w	800788c <selectDownlinkOperation+0x18>
			//Need to handle Error
		}//End of if / else if/ else
	} //End of loop

	if (fwPending && ((stateOfDevice == WAKEUP_HB) || (stateOfDevice == IDLE)))
 8007ca2:	4b14      	ldr	r3, [pc, #80]	@ (8007cf4 <selectDownlinkOperation+0x480>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00d      	beq.n	8007cc6 <selectDownlinkOperation+0x452>
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d002      	beq.n	8007cb6 <selectDownlinkOperation+0x442>
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d107      	bne.n	8007cc6 <selectDownlinkOperation+0x452>
	{
		fwPending = false;
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf4 <selectDownlinkOperation+0x480>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
		clearMqttStruct(); //Clear structure before we get all the firmware messages
 8007cbc:	f000 ffde 	bl	8008c7c <clearMqttStruct>
		startOTAProcess(Data_Ptr);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fbf7 	bl	80074b4 <startOTAProcess>
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20026db8 	.word	0x20026db8
 8007cd4:	0802da58 	.word	0x0802da58
 8007cd8:	0802da6c 	.word	0x0802da6c
 8007cdc:	0802da90 	.word	0x0802da90
 8007ce0:	0802dab0 	.word	0x0802dab0
 8007ce4:	0802dad8 	.word	0x0802dad8
 8007ce8:	0802dafc 	.word	0x0802dafc
 8007cec:	0802db30 	.word	0x0802db30
 8007cf0:	0802db54 	.word	0x0802db54
 8007cf4:	2007a270 	.word	0x2007a270

08007cf8 <storeMqttData>:
 * @note Bit by bit array copy from source to mQTTMessage determined by length.
 * @param uint8_t mqttArrayIndex for storing message, uint8_t* source message, uint16_t length of source message, bool print data if true
 * @retval void
 */
void storeMqttData(uint8_t mqttArrayIndex, uint8_t* source, uint16_t length, bool printData)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6039      	str	r1, [r7, #0]
 8007d00:	4611      	mov	r1, r2
 8007d02:	461a      	mov	r2, r3
 8007d04:	4603      	mov	r3, r0
 8007d06:	71fb      	strb	r3, [r7, #7]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	80bb      	strh	r3, [r7, #4]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	71bb      	strb	r3, [r7, #6]
	mqttDataAvailable = true;
 8007d10:	4b17      	ldr	r3, [pc, #92]	@ (8007d70 <storeMqttData+0x78>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < length; i ++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	e012      	b.n	8007d42 <storeMqttData+0x4a>
	{
		downLinkPackets.mQTTMessage[mqttArrayIndex][i] = source[i];
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	441a      	add	r2, r3
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	7810      	ldrb	r0, [r2, #0]
 8007d26:	4a13      	ldr	r2, [pc, #76]	@ (8007d74 <storeMqttData+0x7c>)
 8007d28:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	441a      	add	r2, r3
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4413      	add	r3, r2
 8007d36:	3301      	adds	r3, #1
 8007d38:	4602      	mov	r2, r0
 8007d3a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i ++)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	88bb      	ldrh	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	dbe8      	blt.n	8007d1c <storeMqttData+0x24>
	}
	if (printData)
 8007d4a:	79bb      	ldrb	r3, [r7, #6]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <storeMqttData+0x6e>
	{
		vcom_Trace ( source , length , 1 );
 8007d50:	88bb      	ldrh	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	4619      	mov	r1, r3
 8007d56:	6838      	ldr	r0, [r7, #0]
 8007d58:	f7fe ffee 	bl	8006d38 <vcom_Trace>
		vcom_Trace ( (uint8_t*) "\r\n" , 2 , 1 );
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	2102      	movs	r1, #2
 8007d60:	4805      	ldr	r0, [pc, #20]	@ (8007d78 <storeMqttData+0x80>)
 8007d62:	f7fe ffe9 	bl	8006d38 <vcom_Trace>
	}
}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2007a271 	.word	0x2007a271
 8007d74:	20026db8 	.word	0x20026db8
 8007d78:	0802d5b4 	.word	0x0802d5b4

08007d7c <populateFirmwareArray>:
 * 3 - page not found
 * 5 - page not a number
 * 6 - data not found
 */
uint8_t populateFirmwareArray(OTA_FILE_TYPE *OTAData)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8007d88:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8007d8c:	6018      	str	r0, [r3, #0]
	uint8_t errorCode = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
	bool isError = false;
 8007d94:	2300      	movs	r3, #0
 8007d96:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
	int page = 0;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f8c7 3fd0 	str.w	r3, [r7, #4048]	@ 0xfd0
	// not all 5 packets necessarily contain data
	// KCS improvement - have valid data packets identified and only sort on that data
	for (int i = 0; i < 5; i++)
 8007da0:	2300      	movs	r3, #0
 8007da2:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
 8007da6:	e13e      	b.n	8008026 <populateFirmwareArray+0x2aa>
	{
		isError = false;
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
		if (downLinkPackets.mQTTMessage[i][0] != '\0')
 8007dae:	4aa7      	ldr	r2, [pc, #668]	@ (800804c <populateFirmwareArray+0x2d0>)
 8007db0:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 8007db4:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8007db8:	fb01 f303 	mul.w	r3, r1, r3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 8126 	beq.w	8008014 <populateFirmwareArray+0x298>
		{
			char str_copy[MEMORY_MAX] = " ";
 8007dc8:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8007dcc:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f01f f9c7 	bl	8027170 <memset>
			// look for the '}' and only copy that much not up to MEMORY_MAX
			// if it doesn't exist, exit with an error
			int end = strcspn((char *)downLinkPackets.mQTTMessage[i], "}");
 8007de2:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 8007de6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
 8007dee:	4a97      	ldr	r2, [pc, #604]	@ (800804c <populateFirmwareArray+0x2d0>)
 8007df0:	4413      	add	r3, r2
 8007df2:	3301      	adds	r3, #1
 8007df4:	4996      	ldr	r1, [pc, #600]	@ (8008050 <populateFirmwareArray+0x2d4>)
 8007df6:	4618      	mov	r0, r3
 8007df8:	f01f f9de 	bl	80271b8 <strcspn>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f8c7 3fc4 	str.w	r3, [r7, #4036]	@ 0xfc4
			if (end == 0)
 8007e02:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	@ 0xfc4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d106      	bne.n	8007e18 <populateFirmwareArray+0x9c>
			{
				isError = true;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
				errorCode = 2;
 8007e10:	2302      	movs	r3, #2
 8007e12:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
 8007e16:	e016      	b.n	8007e46 <populateFirmwareArray+0xca>
			}
			else
			{
				strncpy(str_copy, (char *)downLinkPackets.mQTTMessage[i], end);  // Copy MQTTMsg[i] to avoid modifying the original
 8007e18:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 8007e1c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007e20:	fb02 f303 	mul.w	r3, r2, r3
 8007e24:	4a89      	ldr	r2, [pc, #548]	@ (800804c <populateFirmwareArray+0x2d0>)
 8007e26:	4413      	add	r3, r2
 8007e28:	1c59      	adds	r1, r3, #1
 8007e2a:	f8d7 2fc4 	ldr.w	r2, [r7, #4036]	@ 0xfc4
 8007e2e:	f107 030c 	add.w	r3, r7, #12
 8007e32:	4618      	mov	r0, r3
 8007e34:	f01f f9e3 	bl	80271fe <strncpy>
				str_copy[MEMORY_MAX - 1] = '\0';  // Ensure null-termination
 8007e38:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8007e3c:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2f9f 	strb.w	r2, [r3, #3999]	@ 0xf9f
			}

			// Locate "page" in the string and extract its value
			char *page_str = strstr(str_copy, "\"page\":");
 8007e46:	f107 030c 	add.w	r3, r7, #12
 8007e4a:	4982      	ldr	r1, [pc, #520]	@ (8008054 <populateFirmwareArray+0x2d8>)
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f01f fa14 	bl	802727a <strstr>
 8007e52:	f8c7 0fc0 	str.w	r0, [r7, #4032]	@ 0xfc0
			if (page_str)
 8007e56:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	@ 0xfc0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d048      	beq.n	8007ef0 <populateFirmwareArray+0x174>
			{
				end = strcspn(page_str, ",");
 8007e5e:	497e      	ldr	r1, [pc, #504]	@ (8008058 <populateFirmwareArray+0x2dc>)
 8007e60:	f8d7 0fc0 	ldr.w	r0, [r7, #4032]	@ 0xfc0
 8007e64:	f01f f9a8 	bl	80271b8 <strcspn>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f8c7 3fc4 	str.w	r3, [r7, #4036]	@ 0xfc4
				int start = strlen("\"page\":");
 8007e6e:	2307      	movs	r3, #7
 8007e70:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
				int length = end - start;
 8007e74:	f8d7 2fc4 	ldr.w	r2, [r7, #4036]	@ 0xfc4
 8007e78:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
				// truncate the string at the "," delimiter
				// duplicate from above !
				if (page_str != NULL)
 8007e82:	f8d7 3fc0 	ldr.w	r3, [r7, #4032]	@ 0xfc0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d02b      	beq.n	8007ee2 <populateFirmwareArray+0x166>
				{
					char pageNumbString[3] =" ";
 8007e8a:	4b74      	ldr	r3, [pc, #464]	@ (800805c <populateFirmwareArray+0x2e0>)
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	f8a7 3fac 	strh.w	r3, [r7, #4012]	@ 0xfac
 8007e92:	2300      	movs	r3, #0
 8007e94:	f887 3fae 	strb.w	r3, [r7, #4014]	@ 0xfae
					strncpy(pageNumbString,page_str + start,length );
 8007e98:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8007e9c:	f8d7 2fc0 	ldr.w	r2, [r7, #4032]	@ 0xfc0
 8007ea0:	18d1      	adds	r1, r2, r3
 8007ea2:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 8007ea6:	f607 73ac 	addw	r3, r7, #4012	@ 0xfac
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f01f f9a7 	bl	80271fe <strncpy>
					if(isdigit((unsigned char)pageNumbString[0]))
 8007eb0:	f897 3fac 	ldrb.w	r3, [r7, #4012]	@ 0xfac
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	4a6a      	ldr	r2, [pc, #424]	@ (8008060 <populateFirmwareArray+0x2e4>)
 8007eb8:	4413      	add	r3, r2
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <populateFirmwareArray+0x158>
					{
						page = atoi(pageNumbString);
 8007ec4:	f607 73ac 	addw	r3, r7, #4012	@ 0xfac
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f01d fa07 	bl	80252dc <atoi>
 8007ece:	f8c7 0fd0 	str.w	r0, [r7, #4048]	@ 0xfd0
 8007ed2:	e013      	b.n	8007efc <populateFirmwareArray+0x180>
					}
					else
					{
						isError = true;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
						errorCode = 5;
 8007eda:	2305      	movs	r3, #5
 8007edc:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
 8007ee0:	e00c      	b.n	8007efc <populateFirmwareArray+0x180>
					}
				}
				else
				{
					isError = true;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
					errorCode = 4;
 8007ee8:	2304      	movs	r3, #4
 8007eea:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
 8007eee:	e005      	b.n	8007efc <populateFirmwareArray+0x180>
				}
			}
			else
			{
				isError = true;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
				errorCode = 3;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
			}

			if(!isError)
 8007efc:	f897 3fd6 	ldrb.w	r3, [r7, #4054]	@ 0xfd6
 8007f00:	f083 0301 	eor.w	r3, r3, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8088 	beq.w	800801c <populateFirmwareArray+0x2a0>
			{
				// Find the data
				char *data_str = strstr(str_copy, "\"data\":\"");
 8007f0c:	f107 030c 	add.w	r3, r7, #12
 8007f10:	4954      	ldr	r1, [pc, #336]	@ (8008064 <populateFirmwareArray+0x2e8>)
 8007f12:	4618      	mov	r0, r3
 8007f14:	f01f f9b1 	bl	802727a <strstr>
 8007f18:	f8c7 0fc8 	str.w	r0, [r7, #4040]	@ 0xfc8
				if (data_str)
 8007f1c:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	@ 0xfc8
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d014      	beq.n	8007f4e <populateFirmwareArray+0x1d2>
				{
					data_str += strlen("\"data\":\"");  // Move pointer to the start of the data content
 8007f24:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	@ 0xfc8
 8007f28:	3308      	adds	r3, #8
 8007f2a:	f8c7 3fc8 	str.w	r3, [r7, #4040]	@ 0xfc8
					char *data_end = strstr(data_str, "\"");  // Find the end of data
 8007f2e:	2122      	movs	r1, #34	@ 0x22
 8007f30:	f8d7 0fc8 	ldr.w	r0, [r7, #4040]	@ 0xfc8
 8007f34:	f01f f933 	bl	802719e <strchr>
 8007f38:	f8c7 0fb4 	str.w	r0, [r7, #4020]	@ 0xfb4
					if (data_end != NULL)
 8007f3c:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00a      	beq.n	8007f5a <populateFirmwareArray+0x1de>
					{
						*data_end = '\0';  // Temporarily null-terminate the data string
 8007f44:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e005      	b.n	8007f5a <populateFirmwareArray+0x1de>
					}
				}
				else
				{
					errorCode = 6;
 8007f4e:	2306      	movs	r3, #6
 8007f50:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
					isError = true;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
				}

				int len = strlen(data_str);
 8007f5a:	f8d7 0fc8 	ldr.w	r0, [r7, #4040]	@ 0xfc8
 8007f5e:	f7f8 f995 	bl	800028c <strlen>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
				// Store extracted data in the OTAData structure
				if (page >= 0 && data_str != NULL && !isError)
 8007f68:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	db4a      	blt.n	8008006 <populateFirmwareArray+0x28a>
 8007f70:	f8d7 3fc8 	ldr.w	r3, [r7, #4040]	@ 0xfc8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d046      	beq.n	8008006 <populateFirmwareArray+0x28a>
 8007f78:	f897 3fd6 	ldrb.w	r3, [r7, #4054]	@ 0xfd6
 8007f7c:	f083 0301 	eor.w	r3, r3, #1
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d03f      	beq.n	8008006 <populateFirmwareArray+0x28a>
				{
					//Copy the cleaned data to FirmwareArray
					strncpy((char*)OTAData->FirmwareArray[page - 1], data_str, len);
 8007f86:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 8007f90:	f6a2 72d4 	subw	r2, r2, #4052	@ 0xfd4
 8007f94:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8007f98:	fb01 f303 	mul.w	r3, r1, r3
 8007f9c:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8007fa0:	6812      	ldr	r2, [r2, #0]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8007faa:	f8d7 1fc8 	ldr.w	r1, [r7, #4040]	@ 0xfc8
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f01f f925 	bl	80271fe <strncpy>
					//FirmwareArray[page - 1][MEMORY_MAX - 1] = '\0';
					OTAData->dataFWLength[page - 1] = len;
 8007fb4:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8007fbe:	b291      	uxth	r1, r2
 8007fc0:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 8007fc4:	f6a2 72d4 	subw	r2, r2, #4052	@ 0xfd4
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8007fce:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	4413      	add	r3, r2
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	809a      	strh	r2, [r3, #4]
					PRINTF("Size of page %d is %d\r\n", page, OTAData->dataFWLength[page - 1]);
 8007fda:	f8d7 3fd0 	ldr.w	r3, [r7, #4048]	@ 0xfd0
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	f607 72d8 	addw	r2, r7, #4056	@ 0xfd8
 8007fe4:	f6a2 72d4 	subw	r2, r2, #4052	@ 0xfd4
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8007fee:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	889b      	ldrh	r3, [r3, #4]
 8007ff8:	f8d7 2fd0 	ldr.w	r2, [r7, #4048]	@ 0xfd0
 8007ffc:	491a      	ldr	r1, [pc, #104]	@ (8008068 <populateFirmwareArray+0x2ec>)
 8007ffe:	2001      	movs	r0, #1
 8008000:	f7fe feb8 	bl	8006d74 <TraceSend>
 8008004:	e00a      	b.n	800801c <populateFirmwareArray+0x2a0>
				}
				else
				{
					errorCode = 6;
 8008006:	2306      	movs	r3, #6
 8008008:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
					isError = true;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 3fd6 	strb.w	r3, [r7, #4054]	@ 0xfd6
					// kcs this break could be bad if only one packet is corrupt
					break;
 8008012:	e00d      	b.n	8008030 <populateFirmwareArray+0x2b4>
			}
		}
		else
		{
			// not really an error if the packet wasn't received
			errorCode = 1;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 3fd7 	strb.w	r3, [r7, #4055]	@ 0xfd7
			// kcs this break assumes the mqtt buffer array is populated in order of 0 to 4
			// that is not a good assumption
			break;
 800801a:	e009      	b.n	8008030 <populateFirmwareArray+0x2b4>
	for (int i = 0; i < 5; i++)
 800801c:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 8008020:	3301      	adds	r3, #1
 8008022:	f8c7 3fcc 	str.w	r3, [r7, #4044]	@ 0xfcc
 8008026:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	@ 0xfcc
 800802a:	2b04      	cmp	r3, #4
 800802c:	f77f aebc 	ble.w	8007da8 <populateFirmwareArray+0x2c>
		}
	}//End of loop

	PRINTF("Error is %d\r\n", errorCode);
 8008030:	f897 3fd7 	ldrb.w	r3, [r7, #4055]	@ 0xfd7
 8008034:	461a      	mov	r2, r3
 8008036:	490d      	ldr	r1, [pc, #52]	@ (800806c <populateFirmwareArray+0x2f0>)
 8008038:	2001      	movs	r0, #1
 800803a:	f7fe fe9b 	bl	8006d74 <TraceSend>
	return errorCode;
 800803e:	f897 3fd7 	ldrb.w	r3, [r7, #4055]	@ 0xfd7
}
 8008042:	4618      	mov	r0, r3
 8008044:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	20026db8 	.word	0x20026db8
 8008050:	0802d5fc 	.word	0x0802d5fc
 8008054:	0802db94 	.word	0x0802db94
 8008058:	0802d588 	.word	0x0802d588
 800805c:	0802dbd0 	.word	0x0802dbd0
 8008060:	0803031d 	.word	0x0803031d
 8008064:	0802db9c 	.word	0x0802db9c
 8008068:	0802dba8 	.word	0x0802dba8
 800806c:	0802dbc0 	.word	0x0802dbc0

08008070 <decodeImageAck>:

bool decodeImageAck(MEM_PTR *Data_Ptr, uint8_t index)
{
 8008070:	b590      	push	{r4, r7, lr}
 8008072:	f5ad 5d9e 	sub.w	sp, sp, #5056	@ 0x13c0
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800807e:	f5a3 7373 	sub.w	r3, r3, #972	@ 0x3cc
 8008082:	6018      	str	r0, [r3, #0]
 8008084:	460a      	mov	r2, r1
 8008086:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800808a:	f2a3 33cd 	subw	r3, r3, #973	@ 0x3cd
 800808e:	701a      	strb	r2, [r3, #0]
	bool test = false; // kcs for testing, set to false for normal operation
 8008090:	2300      	movs	r3, #0
 8008092:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 8008096:	f102 0207 	add.w	r2, r2, #7
 800809a:	7013      	strb	r3, [r2, #0]
	int testcounter = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 80080a2:	6013      	str	r3, [r2, #0]
	//char testString [] = "{{\r\n+QMTPUB: 0,51,0\r\nQMTRECV: 0,1,\"sensors/mobile_device/4325403/downlink\",\"{\"type\":\"image_ack_v0\",\"dev_id\":\"4325403\",\"img_id\":\"08_30_2023__00_04_35-223\",\"total_pages\":25,\"pages_missing\":[2,10,14],\"pages_received\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}\"";
	char testString [MEMORY_MAX] = "";
 80080a4:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 80080a8:	f103 0310 	add.w	r3, r3, #16
 80080ac:	f6a3 73cc 	subw	r3, r3, #4044	@ 0xfcc
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	3304      	adds	r3, #4
 80080b6:	f640 729c 	movw	r2, #3996	@ 0xf9c
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f01f f857 	bl	8027170 <memset>

	// KCS fix this by storing the Message data size in the downlinkPacket Structure
	int nonNullCounter = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 80080c8:	f102 020c 	add.w	r2, r2, #12
 80080cc:	6013      	str	r3, [r2, #0]

	for (int counter = 0; counter < 301; counter++ )
 80080ce:	2300      	movs	r3, #0
 80080d0:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 80080d4:	f102 0208 	add.w	r2, r2, #8
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	e036      	b.n	800814a <decodeImageAck+0xda>
	{
		testString[nonNullCounter] = downLinkPackets.mQTTMessage[index][counter];
 80080dc:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80080e0:	f2a3 33cd 	subw	r3, r3, #973	@ 0x3cd
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	4a9c      	ldr	r2, [pc, #624]	@ (8008358 <decodeImageAck+0x2e8>)
 80080e8:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	441a      	add	r2, r3
 80080f2:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 80080f6:	f103 0308 	add.w	r3, r3, #8
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4413      	add	r3, r2
 80080fe:	3301      	adds	r3, #1
 8008100:	7819      	ldrb	r1, [r3, #0]
 8008102:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008106:	f103 0310 	add.w	r3, r3, #16
 800810a:	f6a3 72cc 	subw	r2, r3, #4044	@ 0xfcc
 800810e:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008112:	f103 030c 	add.w	r3, r3, #12
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4413      	add	r3, r2
 800811a:	460a      	mov	r2, r1
 800811c:	701a      	strb	r2, [r3, #0]
		nonNullCounter++;
 800811e:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008122:	f103 030c 	add.w	r3, r3, #12
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3301      	adds	r3, #1
 800812a:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 800812e:	f102 020c 	add.w	r2, r2, #12
 8008132:	6013      	str	r3, [r2, #0]
	for (int counter = 0; counter < 301; counter++ )
 8008134:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008138:	f103 0308 	add.w	r3, r3, #8
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3301      	adds	r3, #1
 8008140:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 8008144:	f102 0208 	add.w	r2, r2, #8
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 800814e:	f103 0308 	add.w	r3, r3, #8
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8008158:	ddc0      	ble.n	80080dc <decodeImageAck+0x6c>
	// Psudo code
	// look for image_ack_v0 version number
	// implement switch on version number
	// look for pages missing and put [] string into array of uint16_t

	bool isError = false;
 800815a:	2300      	movs	r3, #0
 800815c:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 8008160:	f102 021f 	add.w	r2, r2, #31
 8008164:	7013      	strb	r3, [r2, #0]
	missingPagesCount = 0;
 8008166:	4b7d      	ldr	r3, [pc, #500]	@ (800835c <decodeImageAck+0x2ec>)
 8008168:	2200      	movs	r2, #0
 800816a:	801a      	strh	r2, [r3, #0]

	char target[] = "image_ack_v0";
 800816c:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008170:	f103 0310 	add.w	r3, r3, #16
 8008174:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8008178:	4a79      	ldr	r2, [pc, #484]	@ (8008360 <decodeImageAck+0x2f0>)
 800817a:	461c      	mov	r4, r3
 800817c:	4613      	mov	r3, r2
 800817e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008180:	c407      	stmia	r4!, {r0, r1, r2}
 8008182:	7023      	strb	r3, [r4, #0]
	char *p = strstr(testString, target);
 8008184:	f507 727d 	add.w	r2, r7, #1012	@ 0x3f4
 8008188:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800818c:	4611      	mov	r1, r2
 800818e:	4618      	mov	r0, r3
 8008190:	f01f f873 	bl	802727a <strstr>
 8008194:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008198:	f103 0318 	add.w	r3, r3, #24
 800819c:	6018      	str	r0, [r3, #0]

	char *missingPages;

	if (p)
 800819e:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80081a2:	f103 0318 	add.w	r3, r3, #24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d04b      	beq.n	8008244 <decodeImageAck+0x1d4>
		// string exists
		// use strstr to copy missing pages to a string along with the rest of the line
		missingPages = strstr(testString, "s_missing");
 80081ac:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 80081b0:	496c      	ldr	r1, [pc, #432]	@ (8008364 <decodeImageAck+0x2f4>)
 80081b2:	4618      	mov	r0, r3
 80081b4:	f01f f861 	bl	802727a <strstr>
 80081b8:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80081bc:	f103 0314 	add.w	r3, r3, #20
 80081c0:	6018      	str	r0, [r3, #0]
		return isError;
	}

	int start;
	int end;
	start = strcspn(missingPages, "[");
 80081c2:	4969      	ldr	r1, [pc, #420]	@ (8008368 <decodeImageAck+0x2f8>)
 80081c4:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80081c8:	f103 0314 	add.w	r3, r3, #20
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	f01e fff3 	bl	80271b8 <strcspn>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 80081d8:	f102 0210 	add.w	r2, r2, #16
 80081dc:	6013      	str	r3, [r2, #0]
	end = strcspn(missingPages, "]");
 80081de:	4963      	ldr	r1, [pc, #396]	@ (800836c <decodeImageAck+0x2fc>)
 80081e0:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80081e4:	f103 0314 	add.w	r3, r3, #20
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f01e ffe5 	bl	80271b8 <strcspn>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 80081f4:	f102 020c 	add.w	r2, r2, #12
 80081f8:	6013      	str	r3, [r2, #0]
	char missingList[1000]= "";
 80081fa:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80081fe:	f5a3 7371 	sub.w	r3, r3, #964	@ 0x3c4
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	3304      	adds	r3, #4
 8008208:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f01e ffae 	bl	8027170 <memset>
	int length = end-start;
 8008214:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008218:	f103 030c 	add.w	r3, r3, #12
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008222:	f103 0310 	add.w	r3, r3, #16
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 800822e:	f102 0208 	add.w	r2, r2, #8
 8008232:	6013      	str	r3, [r2, #0]
	// check for no pages
	if ( length==1 )
 8008234:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008238:	f103 0308 	add.w	r3, r3, #8
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d126      	bne.n	8008290 <decodeImageAck+0x220>
 8008242:	e00b      	b.n	800825c <decodeImageAck+0x1ec>
		isError = true;
 8008244:	2301      	movs	r3, #1
 8008246:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 800824a:	f102 021f 	add.w	r2, r2, #31
 800824e:	7013      	strb	r3, [r2, #0]
		return isError;
 8008250:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008254:	f103 031f 	add.w	r3, r3, #31
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	e076      	b.n	800834a <decodeImageAck+0x2da>
	{
		// no missing pages
		if ( test )
 800825c:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008260:	f103 0307 	add.w	r3, r3, #7
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d06a      	beq.n	8008340 <decodeImageAck+0x2d0>
		{
			if (testcounter < 1)
 800826a:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dc65      	bgt.n	8008340 <decodeImageAck+0x2d0>
			{
				pagesToResend[0]= 3;
 8008274:	4b3e      	ldr	r3, [pc, #248]	@ (8008370 <decodeImageAck+0x300>)
 8008276:	2203      	movs	r2, #3
 8008278:	801a      	strh	r2, [r3, #0]
				missingPagesCount=1;
 800827a:	4b38      	ldr	r3, [pc, #224]	@ (800835c <decodeImageAck+0x2ec>)
 800827c:	2201      	movs	r2, #1
 800827e:	801a      	strh	r2, [r3, #0]
				testcounter ++;
 8008280:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3301      	adds	r3, #1
 8008288:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	e057      	b.n	8008340 <decodeImageAck+0x2d0>
		}
	}
	else
	{
		// Using strncpy function to copy the substring
		strncpy(missingList,missingPages+(start+1),end-start-1);
 8008290:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008294:	f103 0310 	add.w	r3, r3, #16
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 80082a0:	f102 0214 	add.w	r2, r2, #20
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	18d1      	adds	r1, r2, r3
 80082a8:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80082ac:	f103 030c 	add.w	r3, r3, #12
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80082b6:	f103 0310 	add.w	r3, r3, #16
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	461a      	mov	r2, r3
 80082c2:	f107 0310 	add.w	r3, r7, #16
 80082c6:	3b04      	subs	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f01e ff98 	bl	80271fe <strncpy>
		// now put in array
		char* token;
		char* rest = missingList;
 80082ce:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80082d2:	f5a3 7272 	sub.w	r2, r3, #968	@ 0x3c8
 80082d6:	f107 0310 	add.w	r3, r7, #16
 80082da:	3b04      	subs	r3, #4
 80082dc:	6013      	str	r3, [r2, #0]
		missingPagesCount = 0;
 80082de:	4b1f      	ldr	r3, [pc, #124]	@ (800835c <decodeImageAck+0x2ec>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	801a      	strh	r2, [r3, #0]

		while ((token = strtok_r(rest, ",", &rest)))
 80082e4:	e014      	b.n	8008310 <decodeImageAck+0x2a0>
		{
			pagesToResend[missingPagesCount] = atoi(token);
 80082e6:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80082ea:	f103 0304 	add.w	r3, r3, #4
 80082ee:	6818      	ldr	r0, [r3, #0]
 80082f0:	f01c fff4 	bl	80252dc <atoi>
 80082f4:	4601      	mov	r1, r0
 80082f6:	4b19      	ldr	r3, [pc, #100]	@ (800835c <decodeImageAck+0x2ec>)
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	b289      	uxth	r1, r1
 80082fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008370 <decodeImageAck+0x300>)
 8008300:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			missingPagesCount++;
 8008304:	4b15      	ldr	r3, [pc, #84]	@ (800835c <decodeImageAck+0x2ec>)
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	4b13      	ldr	r3, [pc, #76]	@ (800835c <decodeImageAck+0x2ec>)
 800830e:	801a      	strh	r2, [r3, #0]
		while ((token = strtok_r(rest, ",", &rest)))
 8008310:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8008314:	f5a3 7372 	sub.w	r3, r3, #968	@ 0x3c8
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	3b08      	subs	r3, #8
 8008320:	461a      	mov	r2, r3
 8008322:	4914      	ldr	r1, [pc, #80]	@ (8008374 <decodeImageAck+0x304>)
 8008324:	f01e ffa6 	bl	8027274 <strtok_r>
 8008328:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 800832c:	f103 0304 	add.w	r3, r3, #4
 8008330:	6018      	str	r0, [r3, #0]
 8008332:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008336:	f103 0304 	add.w	r3, r3, #4
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1d2      	bne.n	80082e6 <decodeImageAck+0x276>
		}
	}
	return isError;
 8008340:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8008344:	f103 031f 	add.w	r3, r3, #31
 8008348:	781b      	ldrb	r3, [r3, #0]
}
 800834a:	4618      	mov	r0, r3
 800834c:	f507 579e 	add.w	r7, r7, #5056	@ 0x13c0
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	bd90      	pop	{r4, r7, pc}
 8008356:	bf00      	nop
 8008358:	20026db8 	.word	0x20026db8
 800835c:	2007a26c 	.word	0x2007a26c
 8008360:	0802dbe8 	.word	0x0802dbe8
 8008364:	0802dbd4 	.word	0x0802dbd4
 8008368:	0802dbe0 	.word	0x0802dbe0
 800836c:	0802dbe4 	.word	0x0802dbe4
 8008370:	2007a0cc 	.word	0x2007a0cc
 8008374:	0802d588 	.word	0x0802d588

08008378 <getMqttDataAvailable>:

bool getMqttDataAvailable(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
	return 	mqttDataAvailable;
 800837c:	4b03      	ldr	r3, [pc, #12]	@ (800838c <getMqttDataAvailable+0x14>)
 800837e:	781b      	ldrb	r3, [r3, #0]
}
 8008380:	4618      	mov	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2007a271 	.word	0x2007a271

08008390 <sendHeartBeat>:

void sendHeartBeat(MEM_PTR *Data_Ptr)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	if (!NightConfirmed)
 8008398:	4b1d      	ldr	r3, [pc, #116]	@ (8008410 <sendHeartBeat+0x80>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f083 0301 	eor.w	r3, r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <sendHeartBeat+0x22>
	{
		CELL_Set_PDP ( PDP_NOT_SET );
 80083a6:	2001      	movs	r0, #1
 80083a8:	f008 fd62 	bl	8010e70 <CELL_Set_PDP>
		Enable_Modem( Data_Ptr );
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fd feb9 	bl	8006124 <Enable_Modem>
	}
	tempInit();
 80083b2:	f00a fda7 	bl	8012f04 <tempInit>
	//	ACC_Init ( Data_Ptr );
//	tempDevice.tempHumData.Temperature =
//	uint16_t plugtest = tempReadRegister(HDC2080_TEMP_LOW, 2);

	HeartBeat ( Data_Ptr );
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f005 f8e4 	bl	800d584 <HeartBeat>
	//	calculateNextTime(&checkHB, &nextHB, 300);

	// Check for state change in charger cable and send message
	bool newChargeCableState = chargeCableReading();
 80083bc:	f001 fa02 	bl	80097c4 <chargeCableReading>
 80083c0:	4603      	mov	r3, r0
 80083c2:	73fb      	strb	r3, [r7, #15]
	if (newChargeCableState != chargerCableState)
 80083c4:	4b13      	ldr	r3, [pc, #76]	@ (8008414 <sendHeartBeat+0x84>)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d00e      	beq.n	80083ec <sendHeartBeat+0x5c>
	{
		// send message
		if (newChargeCableState)
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <sendHeartBeat+0x4e>
		{
			sendDiagnostic(&memory, "\"battery\":[\"plugged_in\"]");
 80083d4:	4910      	ldr	r1, [pc, #64]	@ (8008418 <sendHeartBeat+0x88>)
 80083d6:	4811      	ldr	r0, [pc, #68]	@ (800841c <sendHeartBeat+0x8c>)
 80083d8:	f00a fa44 	bl	8012864 <sendDiagnostic>
 80083dc:	e003      	b.n	80083e6 <sendHeartBeat+0x56>
		}
		else
		{
			sendDiagnostic(&memory, "\"battery\":[\"unplugged\"]");
 80083de:	4910      	ldr	r1, [pc, #64]	@ (8008420 <sendHeartBeat+0x90>)
 80083e0:	480e      	ldr	r0, [pc, #56]	@ (800841c <sendHeartBeat+0x8c>)
 80083e2:	f00a fa3f 	bl	8012864 <sendDiagnostic>
		}

		// save state
		chargerCableState = newChargeCableState;
 80083e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008414 <sendHeartBeat+0x84>)
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	7013      	strb	r3, [r2, #0]
	}

	getFirmwareDownlink(Data_Ptr, 1);
 80083ec:	2101      	movs	r1, #1
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f009 f952 	bl	8011698 <getFirmwareDownlink>
	if ( mqttDataAvailable )
 80083f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008424 <sendHeartBeat+0x94>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d005      	beq.n	8008408 <sendHeartBeat+0x78>
	{
		universalDownlinkDecoder();
 80083fc:	f7ff f8e6 	bl	80075cc <universalDownlinkDecoder>
		selectDownlinkOperation(Data_Ptr, WAKEUP_HB);
 8008400:	2103      	movs	r1, #3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff fa36 	bl	8007874 <selectDownlinkOperation>
	}
}
 8008408:	bf00      	nop
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	2007a26f 	.word	0x2007a26f
 8008414:	2007a27d 	.word	0x2007a27d
 8008418:	0802d2a4 	.word	0x0802d2a4
 800841c:	2007d870 	.word	0x2007d870
 8008420:	0802d2c0 	.word	0x0802d2c0
 8008424:	2007a271 	.word	0x2007a271

08008428 <decodeHBConfigs>:

bool decodeHBConfigs(MEM_PTR *Data_Ptr, uint8_t *mqttMsg)
{
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	f6ad 7dfc 	subw	sp, sp, #4092	@ 0xffc
 800842e:	af00      	add	r7, sp, #0
 8008430:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 8008434:	f6a3 73f4 	subw	r3, r3, #4084	@ 0xff4
 8008438:	6018      	str	r0, [r3, #0]
 800843a:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800843e:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8008442:	6019      	str	r1, [r3, #0]
	bool isError = false;
 8008444:	2300      	movs	r3, #0
 8008446:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
	char Buff[MEMORY_MAX] = " ";
 800844a:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800844e:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 8008452:	2220      	movs	r2, #32
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	3304      	adds	r3, #4
 8008458:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f01e fe86 	bl	8027170 <memset>
	char test[] = "\"heartbeat\":{";
 8008464:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 8008468:	f6a3 73c8 	subw	r3, r3, #4040	@ 0xfc8
 800846c:	4aac      	ldr	r2, [pc, #688]	@ (8008720 <decodeHBConfigs+0x2f8>)
 800846e:	461c      	mov	r4, r3
 8008470:	4613      	mov	r3, r2
 8008472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008474:	c407      	stmia	r4!, {r0, r1, r2}
 8008476:	8023      	strh	r3, [r4, #0]
	char verTest[] = "\"version\":";
 8008478:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800847c:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8008480:	4aa8      	ldr	r2, [pc, #672]	@ (8008724 <decodeHBConfigs+0x2fc>)
 8008482:	ca07      	ldmia	r2, {r0, r1, r2}
 8008484:	c303      	stmia	r3!, {r0, r1}
 8008486:	801a      	strh	r2, [r3, #0]
 8008488:	3302      	adds	r3, #2
 800848a:	0c12      	lsrs	r2, r2, #16
 800848c:	701a      	strb	r2, [r3, #0]
	char modeTest [] = "\"mode\":";
 800848e:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 8008492:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8008496:	4aa4      	ldr	r2, [pc, #656]	@ (8008728 <decodeHBConfigs+0x300>)
 8008498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800849c:	e883 0003 	stmia.w	r3, {r0, r1}
	char intTest [] = "\"hb_interval\":";
 80084a0:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 80084a4:	f6a3 73ec 	subw	r3, r3, #4076	@ 0xfec
 80084a8:	4aa0      	ldr	r2, [pc, #640]	@ (800872c <decodeHBConfigs+0x304>)
 80084aa:	461c      	mov	r4, r3
 80084ac:	4613      	mov	r3, r2
 80084ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084b0:	c407      	stmia	r4!, {r0, r1, r2}
 80084b2:	8023      	strh	r3, [r4, #0]
 80084b4:	3402      	adds	r4, #2
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	7023      	strb	r3, [r4, #0]
	uint8_t version = 255;
 80084ba:	23ff      	movs	r3, #255	@ 0xff
 80084bc:	f887 3ff6 	strb.w	r3, [r7, #4086]	@ 0xff6
	uint8_t mode = 255;
 80084c0:	23ff      	movs	r3, #255	@ 0xff
 80084c2:	f887 3ff5 	strb.w	r3, [r7, #4085]	@ 0xff5
	uint16_t interval = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	@ 0xff2

	// Transfer MQTT message to a local buffer
	Word_Transfer(Buff, (char*)mqttMsg);
 80084cc:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 80084d0:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 80084d4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80084d8:	6819      	ldr	r1, [r3, #0]
 80084da:	4610      	mov	r0, r2
 80084dc:	f7fe f92a 	bl	8006734 <Word_Transfer>

	char *substr = strstr(Buff, test);
 80084e0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80084e4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80084e8:	4611      	mov	r1, r2
 80084ea:	4618      	mov	r0, r3
 80084ec:	f01e fec5 	bl	802727a <strstr>
 80084f0:	f8c7 0fec 	str.w	r0, [r7, #4076]	@ 0xfec
	if(substr && !isError)
 80084f4:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	@ 0xfec
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 80ff 	beq.w	80086fc <decodeHBConfigs+0x2d4>
 80084fe:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 8008502:	f083 0301 	eor.w	r3, r3, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 80f7 	beq.w	80086fc <decodeHBConfigs+0x2d4>
	{
		char *verStr = strstr(substr, verTest);
 800850e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008512:	4619      	mov	r1, r3
 8008514:	f8d7 0fec 	ldr.w	r0, [r7, #4076]	@ 0xfec
 8008518:	f01e feaf 	bl	802727a <strstr>
 800851c:	f8c7 0fe8 	str.w	r0, [r7, #4072]	@ 0xfe8
		if(verStr && !isError)
 8008520:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80e4 	beq.w	80086f2 <decodeHBConfigs+0x2ca>
 800852a:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 800852e:	f083 0301 	eor.w	r3, r3, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 80dc 	beq.w	80086f2 <decodeHBConfigs+0x2ca>
		{
			verStr += strlen(verTest);
 800853a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800853e:	4618      	mov	r0, r3
 8008540:	f7f7 fea4 	bl	800028c <strlen>
 8008544:	4602      	mov	r2, r0
 8008546:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 800854a:	4413      	add	r3, r2
 800854c:	f8c7 3fe8 	str.w	r3, [r7, #4072]	@ 0xfe8
			if(isdigit((unsigned char)verStr[0]))
 8008550:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	3301      	adds	r3, #1
 8008558:	4a75      	ldr	r2, [pc, #468]	@ (8008730 <decodeHBConfigs+0x308>)
 800855a:	4413      	add	r3, r2
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 80c0 	beq.w	80086e8 <decodeHBConfigs+0x2c0>
			{
				version = atoi(verStr);
 8008568:	f8d7 0fe8 	ldr.w	r0, [r7, #4072]	@ 0xfe8
 800856c:	f01c feb6 	bl	80252dc <atoi>
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3ff6 	strb.w	r3, [r7, #4086]	@ 0xff6

				if(version == 0)
 8008576:	f897 3ff6 	ldrb.w	r3, [r7, #4086]	@ 0xff6
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 80a9 	bne.w	80086d2 <decodeHBConfigs+0x2aa>
				{
					char *modeStr = strstr(substr, modeTest);
 8008580:	f107 031c 	add.w	r3, r7, #28
 8008584:	4619      	mov	r1, r3
 8008586:	f8d7 0fec 	ldr.w	r0, [r7, #4076]	@ 0xfec
 800858a:	f01e fe76 	bl	802727a <strstr>
 800858e:	f8c7 0fe4 	str.w	r0, [r7, #4068]	@ 0xfe4
					if(modeStr && !isError)
 8008592:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 8008596:	2b00      	cmp	r3, #0
 8008598:	d03b      	beq.n	8008612 <decodeHBConfigs+0x1ea>
 800859a:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 800859e:	f083 0301 	eor.w	r3, r3, #1
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d034      	beq.n	8008612 <decodeHBConfigs+0x1ea>
					{
						modeStr += strlen(modeTest);
 80085a8:	f107 031c 	add.w	r3, r7, #28
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f7 fe6d 	bl	800028c <strlen>
 80085b2:	4602      	mov	r2, r0
 80085b4:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 80085b8:	4413      	add	r3, r2
 80085ba:	f8c7 3fe4 	str.w	r3, [r7, #4068]	@ 0xfe4
						if(isdigit((unsigned char)modeStr[0]))
 80085be:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4a5a      	ldr	r2, [pc, #360]	@ (8008730 <decodeHBConfigs+0x308>)
 80085c8:	4413      	add	r3, r2
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01a      	beq.n	800860a <decodeHBConfigs+0x1e2>
						{
							mode = atoi(modeStr);
 80085d4:	f8d7 0fe4 	ldr.w	r0, [r7, #4068]	@ 0xfe4
 80085d8:	f01c fe80 	bl	80252dc <atoi>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3ff5 	strb.w	r3, [r7, #4085]	@ 0xff5
							if(mode >= 0 && mode <= 255)
							{
								Data_Ptr->heartBeatData.mode = mode;
 80085e2:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 80085e6:	f6a3 73f4 	subw	r3, r3, #4084	@ 0xff4
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80085f0:	461a      	mov	r2, r3
 80085f2:	f897 3ff5 	ldrb.w	r3, [r7, #4085]	@ 0xff5
 80085f6:	f882 3138 	strb.w	r3, [r2, #312]	@ 0x138
								PRINTF("Setting Heartbeat mode to: %d\r\n", mode);
 80085fa:	f897 3ff5 	ldrb.w	r3, [r7, #4085]	@ 0xff5
 80085fe:	461a      	mov	r2, r3
 8008600:	494c      	ldr	r1, [pc, #304]	@ (8008734 <decodeHBConfigs+0x30c>)
 8008602:	2001      	movs	r0, #1
 8008604:	f7fe fbb6 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)modeStr[0]))
 8008608:	e006      	b.n	8008618 <decodeHBConfigs+0x1f0>
								PRINTF("Heartbeat mode is out of range [0-255]: %d\r\n", mode);
							}
						}
						else
						{
							isError = true;
 800860a:	2301      	movs	r3, #1
 800860c:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
						if(isdigit((unsigned char)modeStr[0]))
 8008610:	e002      	b.n	8008618 <decodeHBConfigs+0x1f0>
							//"Invalid data type for mode"
						}
					}
					else
					{
						isError = true;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
						//"Mode not found in heartbeat message"
					}

					char *intStr = strstr(substr, intTest);
 8008618:	f107 030c 	add.w	r3, r7, #12
 800861c:	4619      	mov	r1, r3
 800861e:	f8d7 0fec 	ldr.w	r0, [r7, #4076]	@ 0xfec
 8008622:	f01e fe2a 	bl	802727a <strstr>
 8008626:	f8c7 0fe0 	str.w	r0, [r7, #4064]	@ 0xfe0
					if(intStr && !isError)
 800862a:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d04b      	beq.n	80086ca <decodeHBConfigs+0x2a2>
 8008632:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 8008636:	f083 0301 	eor.w	r3, r3, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d044      	beq.n	80086ca <decodeHBConfigs+0x2a2>
					{
						intStr += strlen(intTest);
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4618      	mov	r0, r3
 8008646:	f7f7 fe21 	bl	800028c <strlen>
 800864a:	4602      	mov	r2, r0
 800864c:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 8008650:	4413      	add	r3, r2
 8008652:	f8c7 3fe0 	str.w	r3, [r7, #4064]	@ 0xfe0
						if(isdigit((unsigned char)intStr[0]))
 8008656:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	4a34      	ldr	r2, [pc, #208]	@ (8008730 <decodeHBConfigs+0x308>)
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d02a      	beq.n	80086c2 <decodeHBConfigs+0x29a>
						{
							interval = atoi(intStr);
 800866c:	f8d7 0fe0 	ldr.w	r0, [r7, #4064]	@ 0xfe0
 8008670:	f01c fe34 	bl	80252dc <atoi>
 8008674:	4603      	mov	r3, r0
 8008676:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	@ 0xff2

							if(interval >= 900 && interval <= 65535)
 800867a:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	@ 0xff2
 800867e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8008682:	d313      	bcc.n	80086ac <decodeHBConfigs+0x284>
							{
								// KCS also need to store to XPS shadow register
								Data_Ptr->heartBeatData.hbInterval = interval;
 8008684:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 8008688:	f6a3 73f4 	subw	r3, r3, #4084	@ 0xff4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8008692:	461a      	mov	r2, r3
 8008694:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	@ 0xff2
 8008698:	f8a2 313a 	strh.w	r3, [r2, #314]	@ 0x13a
								PRINTF("Setting Heartbeat interval to: %d\r\n", interval);
 800869c:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	@ 0xff2
 80086a0:	461a      	mov	r2, r3
 80086a2:	4925      	ldr	r1, [pc, #148]	@ (8008738 <decodeHBConfigs+0x310>)
 80086a4:	2001      	movs	r0, #1
 80086a6:	f7fe fb65 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)intStr[0]))
 80086aa:	e021      	b.n	80086f0 <decodeHBConfigs+0x2c8>
							}
							else
							{
								isError = true;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
								PRINTF("Heartbeat interval is invalid: %d\r\n", interval);
 80086b2:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	@ 0xff2
 80086b6:	461a      	mov	r2, r3
 80086b8:	4920      	ldr	r1, [pc, #128]	@ (800873c <decodeHBConfigs+0x314>)
 80086ba:	2001      	movs	r0, #1
 80086bc:	f7fe fb5a 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)intStr[0]))
 80086c0:	e016      	b.n	80086f0 <decodeHBConfigs+0x2c8>
							}
						}
						else
						{
							isError = true;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
						if(isdigit((unsigned char)intStr[0]))
 80086c8:	e012      	b.n	80086f0 <decodeHBConfigs+0x2c8>
							//"Invalid data type for interval"
						}
					}
					else
					{
						isError = true;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
			if(isdigit((unsigned char)verStr[0]))
 80086d0:	e013      	b.n	80086fa <decodeHBConfigs+0x2d2>
						//"Interval not found in heartbeat message"
					}
				}
				else
				{
					isError = true;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
					PRINTF("Invalid version number decoded: %d\r\n", version);
 80086d8:	f897 3ff6 	ldrb.w	r3, [r7, #4086]	@ 0xff6
 80086dc:	461a      	mov	r2, r3
 80086de:	4918      	ldr	r1, [pc, #96]	@ (8008740 <decodeHBConfigs+0x318>)
 80086e0:	2001      	movs	r0, #1
 80086e2:	f7fe fb47 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)verStr[0]))
 80086e6:	e008      	b.n	80086fa <decodeHBConfigs+0x2d2>
				}
			}
			else
			{
				isError = true;
 80086e8:	2301      	movs	r3, #1
 80086ea:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
			if(isdigit((unsigned char)verStr[0]))
 80086ee:	e004      	b.n	80086fa <decodeHBConfigs+0x2d2>
 80086f0:	e003      	b.n	80086fa <decodeHBConfigs+0x2d2>
				//"Invalid data type for version"
			}
		}
		else
		{
			isError = true;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
	{
 80086f8:	e003      	b.n	8008702 <decodeHBConfigs+0x2da>
 80086fa:	e002      	b.n	8008702 <decodeHBConfigs+0x2da>
			//"Version not found in heartbeat message"
		}
	}
	else
	{
		isError = true;
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
		//"No heartbeat configuration found."
	}

	PRINTF("Heartbeat decode error is %d\r\n", isError);
 8008702:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 8008706:	461a      	mov	r2, r3
 8008708:	490e      	ldr	r1, [pc, #56]	@ (8008744 <decodeHBConfigs+0x31c>)
 800870a:	2001      	movs	r0, #1
 800870c:	f7fe fb32 	bl	8006d74 <TraceSend>

	return isError;
 8008710:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
}
 8008714:	4618      	mov	r0, r3
 8008716:	f607 77fc 	addw	r7, r7, #4092	@ 0xffc
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}
 800871e:	bf00      	nop
 8008720:	0802dca8 	.word	0x0802dca8
 8008724:	0802d5dc 	.word	0x0802d5dc
 8008728:	0802dcb8 	.word	0x0802dcb8
 800872c:	0802dcc0 	.word	0x0802dcc0
 8008730:	0803031d 	.word	0x0803031d
 8008734:	0802dbf8 	.word	0x0802dbf8
 8008738:	0802dc18 	.word	0x0802dc18
 800873c:	0802dc3c 	.word	0x0802dc3c
 8008740:	0802dc60 	.word	0x0802dc60
 8008744:	0802dc88 	.word	0x0802dc88

08008748 <getNumDays>:
 *         DateTime structure with structures for Date and Time
 *
 * @retval uint8_t number of days
 */
uint8_t getNumDays(RTC_DateTypeDef checkDate)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
	uint8_t numOfDays = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
	if (checkDate.Month == RTC_MONTH_JANUARY || checkDate.Month == RTC_MONTH_MARCH || checkDate.Month == RTC_MONTH_MAY || checkDate.Month == RTC_MONTH_JULY
 8008754:	797b      	ldrb	r3, [r7, #5]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d011      	beq.n	800877e <getNumDays+0x36>
 800875a:	797b      	ldrb	r3, [r7, #5]
 800875c:	2b03      	cmp	r3, #3
 800875e:	d00e      	beq.n	800877e <getNumDays+0x36>
 8008760:	797b      	ldrb	r3, [r7, #5]
 8008762:	2b05      	cmp	r3, #5
 8008764:	d00b      	beq.n	800877e <getNumDays+0x36>
 8008766:	797b      	ldrb	r3, [r7, #5]
 8008768:	2b07      	cmp	r3, #7
 800876a:	d008      	beq.n	800877e <getNumDays+0x36>
			|| checkDate.Month == RTC_MONTH_AUGUST || checkDate.Month == RTC_MONTH_OCTOBER || checkDate.Month == RTC_MONTH_DECEMBER)
 800876c:	797b      	ldrb	r3, [r7, #5]
 800876e:	2b08      	cmp	r3, #8
 8008770:	d005      	beq.n	800877e <getNumDays+0x36>
 8008772:	797b      	ldrb	r3, [r7, #5]
 8008774:	2b10      	cmp	r3, #16
 8008776:	d002      	beq.n	800877e <getNumDays+0x36>
 8008778:	797b      	ldrb	r3, [r7, #5]
 800877a:	2b12      	cmp	r3, #18
 800877c:	d102      	bne.n	8008784 <getNumDays+0x3c>
	{
		numOfDays = 31;
 800877e:	231f      	movs	r3, #31
 8008780:	73fb      	strb	r3, [r7, #15]
 8008782:	e01c      	b.n	80087be <getNumDays+0x76>
	}
	else if (checkDate.Month == RTC_MONTH_FEBRUARY)
 8008784:	797b      	ldrb	r3, [r7, #5]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d10b      	bne.n	80087a2 <getNumDays+0x5a>
	{
		if((checkDate.Year % 4) == 0)   //CSC leap year
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d102      	bne.n	800879c <getNumDays+0x54>
			numOfDays = 29;
 8008796:	231d      	movs	r3, #29
 8008798:	73fb      	strb	r3, [r7, #15]
 800879a:	e010      	b.n	80087be <getNumDays+0x76>
		else
			numOfDays = 28;
 800879c:	231c      	movs	r3, #28
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	e00d      	b.n	80087be <getNumDays+0x76>
	}
	else if (checkDate.Month == RTC_MONTH_APRIL || checkDate.Month == RTC_MONTH_JUNE || checkDate.Month == RTC_MONTH_SEPTEMBER || checkDate.Month == RTC_MONTH_NOVEMBER)
 80087a2:	797b      	ldrb	r3, [r7, #5]
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d008      	beq.n	80087ba <getNumDays+0x72>
 80087a8:	797b      	ldrb	r3, [r7, #5]
 80087aa:	2b06      	cmp	r3, #6
 80087ac:	d005      	beq.n	80087ba <getNumDays+0x72>
 80087ae:	797b      	ldrb	r3, [r7, #5]
 80087b0:	2b09      	cmp	r3, #9
 80087b2:	d002      	beq.n	80087ba <getNumDays+0x72>
 80087b4:	797b      	ldrb	r3, [r7, #5]
 80087b6:	2b11      	cmp	r3, #17
 80087b8:	d101      	bne.n	80087be <getNumDays+0x76>
	{
		numOfDays = 30;
 80087ba:	231e      	movs	r3, #30
 80087bc:	73fb      	strb	r3, [r7, #15]
	}

	return numOfDays;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <calculateNextTime>:
 * @param  uint32_t timeSec
 *         number of seconds to add to the check time to calculate next time
 * @retval none
 */
void calculateNextTime(TIME_DATE_TYPE* next, uint32_t timeSec)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	// Start at current MCU time
	HAL_RTC_GetTime ( &hrtc , &next->rtcTime , RTC_FORMAT_BIN );
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	4619      	mov	r1, r3
 80087dc:	483a      	ldr	r0, [pc, #232]	@ (80088c8 <calculateNextTime+0xfc>)
 80087de:	f018 fd1f 	bl	8021220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &next->rtcDate , RTC_FORMAT_BIN );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	331c      	adds	r3, #28
 80087e6:	2200      	movs	r2, #0
 80087e8:	4619      	mov	r1, r3
 80087ea:	4837      	ldr	r0, [pc, #220]	@ (80088c8 <calculateNextTime+0xfc>)
 80087ec:	f018 fe10 	bl	8021410 <HAL_RTC_GetDate>

	uint8_t numOfDays = getNumDays(next->rtcDate);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	69d8      	ldr	r0, [r3, #28]
 80087f4:	f7ff ffa8 	bl	8008748 <getNumDays>
 80087f8:	4603      	mov	r3, r0
 80087fa:	737b      	strb	r3, [r7, #13]
	Refresh_Watchdog;
 80087fc:	4833      	ldr	r0, [pc, #204]	@ (80088cc <calculateNextTime+0x100>)
 80087fe:	f012 fce8 	bl	801b1d2 <HAL_IWDG_Refresh>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <calculateNextTime+0x40>
 8008808:	f00c ffc4 	bl	8015794 <Error_Handler>
	next->rtcTime.Seconds += timeSec;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	441a      	add	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	605a      	str	r2, [r3, #4]
	// Fix for uint8_t limitation on rtcTime.Minutes
	uint16_t minutesFromNow = next->rtcTime.Minutes;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	81fb      	strh	r3, [r7, #14]

	while (next->rtcTime.Seconds >= 60)
 800881e:	e008      	b.n	8008832 <calculateNextTime+0x66>
	{
		next->rtcTime.Seconds -= 60;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f1a3 023c 	sub.w	r2, r3, #60	@ 0x3c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	605a      	str	r2, [r3, #4]
		minutesFromNow += 1;
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	3301      	adds	r3, #1
 8008830:	81fb      	strh	r3, [r7, #14]
	while (next->rtcTime.Seconds >= 60)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b3b      	cmp	r3, #59	@ 0x3b
 8008838:	d8f2      	bhi.n	8008820 <calculateNextTime+0x54>
	}

	while (minutesFromNow >= 60)
 800883a:	e008      	b.n	800884e <calculateNextTime+0x82>
	{
		minutesFromNow -= 60;
 800883c:	89fb      	ldrh	r3, [r7, #14]
 800883e:	3b3c      	subs	r3, #60	@ 0x3c
 8008840:	81fb      	strh	r3, [r7, #14]
		next->rtcTime.Hours += 1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	b2da      	uxtb	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	701a      	strb	r2, [r3, #0]
	while (minutesFromNow >= 60)
 800884e:	89fb      	ldrh	r3, [r7, #14]
 8008850:	2b3b      	cmp	r3, #59	@ 0x3b
 8008852:	d8f3      	bhi.n	800883c <calculateNextTime+0x70>
	}
	// Restore uint8_t Minutes
	next->rtcTime.Minutes = minutesFromNow;
 8008854:	89fb      	ldrh	r3, [r7, #14]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	705a      	strb	r2, [r3, #1]

	while (next->rtcTime.Hours >= 24)
 800885c:	e00b      	b.n	8008876 <calculateNextTime+0xaa>
	{
		next->rtcTime.Hours -= 24;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	3b18      	subs	r3, #24
 8008864:	b2da      	uxtb	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	701a      	strb	r2, [r3, #0]
		next->rtcDate.Date += 1;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	7f9b      	ldrb	r3, [r3, #30]
 800886e:	3301      	adds	r3, #1
 8008870:	b2da      	uxtb	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	779a      	strb	r2, [r3, #30]
	while (next->rtcTime.Hours >= 24)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b17      	cmp	r3, #23
 800887c:	d8ef      	bhi.n	800885e <calculateNextTime+0x92>
	}

	while (next->rtcDate.Date > numOfDays)
 800887e:	e019      	b.n	80088b4 <calculateNextTime+0xe8>
	{
		next->rtcDate.Date -= numOfDays;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	7f9a      	ldrb	r2, [r3, #30]
 8008884:	7b7b      	ldrb	r3, [r7, #13]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	b2da      	uxtb	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	779a      	strb	r2, [r3, #30]
		next->rtcDate.Month += 1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7f5b      	ldrb	r3, [r3, #29]
 8008892:	3301      	adds	r3, #1
 8008894:	b2da      	uxtb	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	775a      	strb	r2, [r3, #29]
		if (next->rtcDate.Month > 12)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7f5b      	ldrb	r3, [r3, #29]
 800889e:	2b0c      	cmp	r3, #12
 80088a0:	d908      	bls.n	80088b4 <calculateNextTime+0xe8>
		{
			next->rtcDate.Month = 1;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	775a      	strb	r2, [r3, #29]
			next->rtcDate.Year += 1;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	7fdb      	ldrb	r3, [r3, #31]
 80088ac:	3301      	adds	r3, #1
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	77da      	strb	r2, [r3, #31]
	while (next->rtcDate.Date > numOfDays)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7f9b      	ldrb	r3, [r3, #30]
 80088b8:	7b7a      	ldrb	r2, [r7, #13]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d3e0      	bcc.n	8008880 <calculateNextTime+0xb4>
		}
	}
}
 80088be:	bf00      	nop
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	2007d344 	.word	0x2007d344
 80088cc:	2007d0bc 	.word	0x2007d0bc

080088d0 <checkNextTime>:
 *         DateTime structure with structures for Date and Time
 *         Time to compare with the check time
 * @retval boolean value True = time has elapsed
 */
bool checkNextTime(TIME_DATE_TYPE check, TIME_DATE_TYPE next)
{
 80088d0:	b084      	sub	sp, #16
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	f107 0c10 	add.w	ip, r7, #16
 80088dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_RTC_GetTime ( &hrtc , &check.rtcTime , RTC_FORMAT_BIN );
 80088e0:	2200      	movs	r2, #0
 80088e2:	f107 0110 	add.w	r1, r7, #16
 80088e6:	483c      	ldr	r0, [pc, #240]	@ (80089d8 <checkNextTime+0x108>)
 80088e8:	f018 fc9a 	bl	8021220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &check.rtcDate , RTC_FORMAT_BIN );
 80088ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80088f0:	2200      	movs	r2, #0
 80088f2:	4619      	mov	r1, r3
 80088f4:	4838      	ldr	r0, [pc, #224]	@ (80089d8 <checkNextTime+0x108>)
 80088f6:	f018 fd8b 	bl	8021410 <HAL_RTC_GetDate>

	Refresh_Watchdog;
 80088fa:	4838      	ldr	r0, [pc, #224]	@ (80089dc <checkNextTime+0x10c>)
 80088fc:	f012 fc69 	bl	801b1d2 <HAL_IWDG_Refresh>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <checkNextTime+0x3a>
 8008906:	f00c ff45 	bl	8015794 <Error_Handler>
	bool retBool;
	if (check.rtcDate.Year == next.rtcDate.Year)
 800890a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800890e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008912:	429a      	cmp	r2, r3
 8008914:	d14d      	bne.n	80089b2 <checkNextTime+0xe2>
	{
		if (check.rtcDate.Month == next.rtcDate.Month)
 8008916:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800891a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800891e:	429a      	cmp	r2, r3
 8008920:	d13b      	bne.n	800899a <checkNextTime+0xca>
		{
			if (check.rtcDate.Date == next.rtcDate.Date)
 8008922:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8008926:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800892a:	429a      	cmp	r2, r3
 800892c:	d129      	bne.n	8008982 <checkNextTime+0xb2>
			{
				if (check.rtcTime.Hours == next.rtcTime.Hours)
 800892e:	7c3a      	ldrb	r2, [r7, #16]
 8008930:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008934:	429a      	cmp	r2, r3
 8008936:	d119      	bne.n	800896c <checkNextTime+0x9c>
				{
					if (check.rtcTime.Minutes == next.rtcTime.Minutes)
 8008938:	7c7a      	ldrb	r2, [r7, #17]
 800893a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800893e:	429a      	cmp	r2, r3
 8008940:	d109      	bne.n	8008956 <checkNextTime+0x86>
					{
						if(check.rtcTime.Seconds < next.rtcTime.Seconds)
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008946:	429a      	cmp	r2, r3
 8008948:	d202      	bcs.n	8008950 <checkNextTime+0x80>
						{
							retBool = false;
 800894a:	2300      	movs	r3, #0
 800894c:	71fb      	strb	r3, [r7, #7]
 800894e:	e03b      	b.n	80089c8 <checkNextTime+0xf8>
						}
						else
						{
							retBool = true;
 8008950:	2301      	movs	r3, #1
 8008952:	71fb      	strb	r3, [r7, #7]
 8008954:	e038      	b.n	80089c8 <checkNextTime+0xf8>
						}
					}
					else if(check.rtcTime.Minutes < next.rtcTime.Minutes)
 8008956:	7c7a      	ldrb	r2, [r7, #17]
 8008958:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800895c:	429a      	cmp	r2, r3
 800895e:	d202      	bcs.n	8008966 <checkNextTime+0x96>
					{
						retBool = false;
 8008960:	2300      	movs	r3, #0
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	e030      	b.n	80089c8 <checkNextTime+0xf8>
					}
					else
					{
						retBool = true;
 8008966:	2301      	movs	r3, #1
 8008968:	71fb      	strb	r3, [r7, #7]
 800896a:	e02d      	b.n	80089c8 <checkNextTime+0xf8>
					}
				}
				else if (check.rtcTime.Hours < next.rtcTime.Hours)
 800896c:	7c3a      	ldrb	r2, [r7, #16]
 800896e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008972:	429a      	cmp	r2, r3
 8008974:	d202      	bcs.n	800897c <checkNextTime+0xac>
				{
					retBool = false;
 8008976:	2300      	movs	r3, #0
 8008978:	71fb      	strb	r3, [r7, #7]
 800897a:	e025      	b.n	80089c8 <checkNextTime+0xf8>
				}
				else
				{
					retBool = true;
 800897c:	2301      	movs	r3, #1
 800897e:	71fb      	strb	r3, [r7, #7]
 8008980:	e022      	b.n	80089c8 <checkNextTime+0xf8>
				}
			}
			else if (check.rtcDate.Date < next.rtcDate.Date)
 8008982:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8008986:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800898a:	429a      	cmp	r2, r3
 800898c:	d202      	bcs.n	8008994 <checkNextTime+0xc4>
			{
				retBool = false;
 800898e:	2300      	movs	r3, #0
 8008990:	71fb      	strb	r3, [r7, #7]
 8008992:	e019      	b.n	80089c8 <checkNextTime+0xf8>
			}
			else
			{
				retBool = true;
 8008994:	2301      	movs	r3, #1
 8008996:	71fb      	strb	r3, [r7, #7]
 8008998:	e016      	b.n	80089c8 <checkNextTime+0xf8>
			}
		}
		else if (check.rtcDate.Month < next.rtcDate.Month)
 800899a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800899e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d202      	bcs.n	80089ac <checkNextTime+0xdc>
		{
			retBool = false;
 80089a6:	2300      	movs	r3, #0
 80089a8:	71fb      	strb	r3, [r7, #7]
 80089aa:	e00d      	b.n	80089c8 <checkNextTime+0xf8>
		}
		else
		{
			retBool = true;
 80089ac:	2301      	movs	r3, #1
 80089ae:	71fb      	strb	r3, [r7, #7]
 80089b0:	e00a      	b.n	80089c8 <checkNextTime+0xf8>
		}
	}
	else if (check.rtcDate.Year < next.rtcDate.Year)
 80089b2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80089b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d202      	bcs.n	80089c4 <checkNextTime+0xf4>
	{
		retBool = false;
 80089be:	2300      	movs	r3, #0
 80089c0:	71fb      	strb	r3, [r7, #7]
 80089c2:	e001      	b.n	80089c8 <checkNextTime+0xf8>
	}
	else
	{
		retBool = true;
 80089c4:	2301      	movs	r3, #1
 80089c6:	71fb      	strb	r3, [r7, #7]
	}

	return retBool;
 80089c8:	79fb      	ldrb	r3, [r7, #7]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089d4:	b004      	add	sp, #16
 80089d6:	4770      	bx	lr
 80089d8:	2007d344 	.word	0x2007d344
 80089dc:	2007d0bc 	.word	0x2007d0bc

080089e0 <getTimeDifference>:
 *         DateTime structure with structures for Date and Time
 *         if stop time is before the start time, 0 will be returned
 * @retval uint32_t seconds difference between start and stop time (stop-start)
 */
uint32_t getTimeDifference(TIME_DATE_TYPE start, TIME_DATE_TYPE stop)
{
 80089e0:	b084      	sub	sp, #16
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b098      	sub	sp, #96	@ 0x60
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	f107 0c68 	add.w	ip, r7, #104	@ 0x68
 80089ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	struct tm currentTime;
	struct tm stopTime;

	//Convert current RTC time to time struct
	currentTime.tm_sec = start.rtcTime.Seconds;
 80089f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
	currentTime.tm_min = start.rtcTime.Minutes;
 80089f4:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80089f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	currentTime.tm_hour = start.rtcTime.Hours;
 80089fa:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80089fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	currentTime.tm_mday = start.rtcDate.Date;
 8008a00:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8008a04:	633b      	str	r3, [r7, #48]	@ 0x30
	currentTime.tm_mon = start.rtcDate.Month - 1;
 8008a06:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	637b      	str	r3, [r7, #52]	@ 0x34
	currentTime.tm_year = start.rtcDate.Year + 100;
 8008a0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8008a12:	3364      	adds	r3, #100	@ 0x64
 8008a14:	63bb      	str	r3, [r7, #56]	@ 0x38
	currentTime.tm_wday = start.rtcDate.WeekDay - 1;
 8008a16:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	//Convert stop RTC time to time struct
	stopTime.tm_sec = stop.rtcTime.Seconds;
 8008a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a22:	603b      	str	r3, [r7, #0]
	stopTime.tm_min = stop.rtcTime.Minutes;
 8008a24:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8008a28:	607b      	str	r3, [r7, #4]
	stopTime.tm_hour = stop.rtcTime.Hours;
 8008a2a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 8008a2e:	60bb      	str	r3, [r7, #8]
	stopTime.tm_mday = stop.rtcDate.Date;
 8008a30:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 8008a34:	60fb      	str	r3, [r7, #12]
	stopTime.tm_mon = stop.rtcDate.Month - 1;
 8008a36:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	613b      	str	r3, [r7, #16]
	stopTime.tm_year = stop.rtcDate.Year + 100;
 8008a3e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008a42:	3364      	adds	r3, #100	@ 0x64
 8008a44:	617b      	str	r3, [r7, #20]
	stopTime.tm_wday = stop.rtcDate.WeekDay - 1;
 8008a46:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	61bb      	str	r3, [r7, #24]

	//Make current and stop times
	time_t stopTimeT = mktime(&stopTime);
 8008a4e:	463b      	mov	r3, r7
 8008a50:	4618      	mov	r0, r3
 8008a52:	f01e fd05 	bl	8027460 <mktime>
 8008a56:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
	time_t currentTimeT= mktime(&currentTime);
 8008a5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f01e fcfe 	bl	8027460 <mktime>
 8008a64:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48

	//Get the difference
	double difference = difftime(stopTimeT, currentTimeT);
 8008a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008a70:	f01e fc19 	bl	80272a6 <difftime>
 8008a74:	ed87 0b16 	vstr	d0, [r7, #88]	@ 0x58
	if (difference < 0) difference = 0;
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8008a84:	f7f8 f838 	bl	8000af8 <__aeabi_dcmplt>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d005      	beq.n	8008a9a <getTimeDifference+0xba>
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	f04f 0300 	mov.w	r3, #0
 8008a96:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	return (uint32_t)difference;
 8008a9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8008a9e:	f7f8 f891 	bl	8000bc4 <__aeabi_d2uiz>
 8008aa2:	4603      	mov	r3, r0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3760      	adds	r7, #96	@ 0x60
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aae:	b004      	add	sp, #16
 8008ab0:	4770      	bx	lr
	...

08008ab4 <getTimeFromNow>:
 * @param  TIME_DATE_TYPE stop
 *         DateTime structure with structures for Date and Time
 * @retval uint16_t seconds difference between current mcu time and stop time (stop-currentTime)
 */
uint16_t getTimeFromNow(TIME_DATE_TYPE stop)
{
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	b5b0      	push	{r4, r5, r7, lr}
 8008ab8:	b096      	sub	sp, #88	@ 0x58
 8008aba:	af0c      	add	r7, sp, #48	@ 0x30
 8008abc:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8008ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t timeLeft = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
	TIME_DATE_TYPE localCurrent;

	//Get current time in local struct
	HAL_RTC_GetTime ( &hrtc , &localCurrent.rtcTime , RTC_FORMAT_BIN );
 8008ac8:	1d3b      	adds	r3, r7, #4
 8008aca:	2200      	movs	r2, #0
 8008acc:	4619      	mov	r1, r3
 8008ace:	4817      	ldr	r0, [pc, #92]	@ (8008b2c <getTimeFromNow+0x78>)
 8008ad0:	f018 fba6 	bl	8021220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &localCurrent.rtcDate , RTC_FORMAT_BIN );
 8008ad4:	1d3b      	adds	r3, r7, #4
 8008ad6:	331c      	adds	r3, #28
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4619      	mov	r1, r3
 8008adc:	4813      	ldr	r0, [pc, #76]	@ (8008b2c <getTimeFromNow+0x78>)
 8008ade:	f018 fc97 	bl	8021410 <HAL_RTC_GetDate>

	//Call getTimeDifference
	timeLeft = getTimeDifference(localCurrent, stop);
 8008ae2:	ac04      	add	r4, sp, #16
 8008ae4:	f107 0538 	add.w	r5, r7, #56	@ 0x38
 8008ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008aec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008af4:	466c      	mov	r4, sp
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008b00:	1d3b      	adds	r3, r7, #4
 8008b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b04:	f7ff ff6c 	bl	80089e0 <getTimeDifference>
 8008b08:	6278      	str	r0, [r7, #36]	@ 0x24

	//Check return value for uint16_t overflow
	if(timeLeft > 0x0FFFF)
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b10:	d302      	bcc.n	8008b18 <getTimeFromNow+0x64>
	{
		//Handle error (return  0xFFFF)
		timeLeft = 0xFFFF;
 8008b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b16:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	//return number of seconds left from now
	return (uint16_t)timeLeft;
 8008b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1a:	b29b      	uxth	r3, r3
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3728      	adds	r7, #40	@ 0x28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8008b26:	b004      	add	sp, #16
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	2007d344 	.word	0x2007d344

08008b30 <stop3Prepare>:
 * @brief  Sets all low level registers to allow stop3 sleep and wakeup
 * @note
 * @retval void
 */
void stop3Prepare (void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
	HAL_UART_AbortReceive_IT( &hlpuart1 );
 8008b36:	4835      	ldr	r0, [pc, #212]	@ (8008c0c <stop3Prepare+0xdc>)
 8008b38:	f01a f9cc 	bl	8022ed4 <HAL_UART_AbortReceive_IT>

	__HAL_RCC_PWR_CLK_ENABLE();
 8008b3c:	4b34      	ldr	r3, [pc, #208]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b42:	4a33      	ldr	r2, [pc, #204]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b44:	f043 0304 	orr.w	r3, r3, #4
 8008b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008b4c:	4b30      	ldr	r3, [pc, #192]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b52:	f003 0304 	and.w	r3, r3, #4
 8008b56:	607b      	str	r3, [r7, #4]
 8008b58:	687b      	ldr	r3, [r7, #4]
	HAL_PWR_EnableBkUpAccess();
 8008b5a:	f014 f839 	bl	801cbd0 <HAL_PWR_EnableBkUpAccess>
	//			   HAL_RCC_MODULE_ENABLED();
	__HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8008b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b68:	4a29      	ldr	r2, [pc, #164]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
	__HAL_RCC_RTC_ENABLE();
 8008b72:	4b27      	ldr	r3, [pc, #156]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b78:	4a25      	ldr	r2, [pc, #148]	@ (8008c10 <stop3Prepare+0xe0>)
 8008b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8008b82:	4b24      	ldr	r3, [pc, #144]	@ (8008c14 <stop3Prepare+0xe4>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	60da      	str	r2, [r3, #12]
 8008b88:	4b22      	ldr	r3, [pc, #136]	@ (8008c14 <stop3Prepare+0xe4>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	611a      	str	r2, [r3, #16]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8008b8e:	4b21      	ldr	r3, [pc, #132]	@ (8008c14 <stop3Prepare+0xe4>)
 8008b90:	2240      	movs	r2, #64	@ 0x40
 8008b92:	60da      	str	r2, [r3, #12]
 8008b94:	4b1f      	ldr	r3, [pc, #124]	@ (8008c14 <stop3Prepare+0xe4>)
 8008b96:	2240      	movs	r2, #64	@ 0x40
 8008b98:	611a      	str	r2, [r3, #16]

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8008b9a:	481f      	ldr	r0, [pc, #124]	@ (8008c18 <stop3Prepare+0xe8>)
 8008b9c:	f018 ffe6 	bl	8021b6c <HAL_RTCEx_DeactivateWakeUpTimer>

	__HAL_GPIO_EXTI_CLEAR_IT(EXTI6_IRQn);
 8008ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c14 <stop3Prepare+0xe4>)
 8008ba2:	2211      	movs	r2, #17
 8008ba4:	60da      	str	r2, [r3, #12]
 8008ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8008c14 <stop3Prepare+0xe4>)
 8008ba8:	2211      	movs	r2, #17
 8008baa:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(EXTI->RPR1, EXTI_RPR1_RPIF6);  // Clear the pending interrupt flag for EXTI7
 8008bac:	4b19      	ldr	r3, [pc, #100]	@ (8008c14 <stop3Prepare+0xe4>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	4a18      	ldr	r2, [pc, #96]	@ (8008c14 <stop3Prepare+0xe4>)
 8008bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb6:	60d3      	str	r3, [r2, #12]

	__HAL_GPIO_EXTI_CLEAR_IT(EXTI7_IRQn);
 8008bb8:	4b16      	ldr	r3, [pc, #88]	@ (8008c14 <stop3Prepare+0xe4>)
 8008bba:	2212      	movs	r2, #18
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	4b15      	ldr	r3, [pc, #84]	@ (8008c14 <stop3Prepare+0xe4>)
 8008bc0:	2212      	movs	r2, #18
 8008bc2:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(EXTI->RPR1, EXTI_FPR1_FPIF7);  // Clear the pending interrupt flag for EXTI7
 8008bc4:	4b13      	ldr	r3, [pc, #76]	@ (8008c14 <stop3Prepare+0xe4>)
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	4a12      	ldr	r2, [pc, #72]	@ (8008c14 <stop3Prepare+0xe4>)
 8008bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bce:	60d3      	str	r3, [r2, #12]

	__HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);
 8008bd0:	4b12      	ldr	r3, [pc, #72]	@ (8008c1c <stop3Prepare+0xec>)
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	4a11      	ldr	r2, [pc, #68]	@ (8008c1c <stop3Prepare+0xec>)
 8008bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008bda:	6193      	str	r3, [r2, #24]
	__HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);
 8008bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8008c1c <stop3Prepare+0xec>)
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	4a0e      	ldr	r2, [pc, #56]	@ (8008c1c <stop3Prepare+0xec>)
 8008be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008be6:	6193      	str	r3, [r2, #24]

	// __HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);  // Clear WUTF flag
	CLEAR_REG(RTC->ICSR);
 8008be8:	4b0c      	ldr	r3, [pc, #48]	@ (8008c1c <stop3Prepare+0xec>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	60da      	str	r2, [r3, #12]
	CLEAR_REG(RTC->WUTR);
 8008bee:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <stop3Prepare+0xec>)
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	615a      	str	r2, [r3, #20]
	CLEAR_REG(RTC->CR);
 8008bf4:	4b09      	ldr	r3, [pc, #36]	@ (8008c1c <stop3Prepare+0xec>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	619a      	str	r2, [r3, #24]
	CLEAR_REG(PWR->WUSCR);
 8008bfa:	4b09      	ldr	r3, [pc, #36]	@ (8008c20 <stop3Prepare+0xf0>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	649a      	str	r2, [r3, #72]	@ 0x48
	HAL_SuspendTick();
 8008c00:	f00d fc64 	bl	80164cc <HAL_SuspendTick>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	2007d1c0 	.word	0x2007d1c0
 8008c10:	46020c00 	.word	0x46020c00
 8008c14:	46022000 	.word	0x46022000
 8008c18:	2007d344 	.word	0x2007d344
 8008c1c:	46007800 	.word	0x46007800
 8008c20:	46020800 	.word	0x46020800

08008c24 <clearMqttMsg>:
 * @param  uint8_t index
 *         Index of the message to be cleared in the structure
 * @retval void
 */
void clearMqttMsg(uint8_t index)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
	downLinkPackets.downLinkEnum[index] = DL_DONE;
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	4a11      	ldr	r2, [pc, #68]	@ (8008c78 <clearMqttMsg+0x54>)
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 8008c38:	3321      	adds	r3, #33	@ 0x21
 8008c3a:	2208      	movs	r2, #8
 8008c3c:	701a      	strb	r2, [r3, #0]
	int memoryItterator = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	60fb      	str	r3, [r7, #12]
	while ( memoryItterator < (MEMORY_MAX))
 8008c42:	e00d      	b.n	8008c60 <clearMqttMsg+0x3c>
		downLinkPackets.mQTTMessage[index][ memoryItterator++ ] = 0;
 8008c44:	79fa      	ldrb	r2, [r7, #7]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	1c59      	adds	r1, r3, #1
 8008c4a:	60f9      	str	r1, [r7, #12]
 8008c4c:	490a      	ldr	r1, [pc, #40]	@ (8008c78 <clearMqttMsg+0x54>)
 8008c4e:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8008c52:	fb00 f202 	mul.w	r2, r0, r2
 8008c56:	440a      	add	r2, r1
 8008c58:	4413      	add	r3, r2
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
	while ( memoryItterator < (MEMORY_MAX))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8008c66:	dbed      	blt.n	8008c44 <clearMqttMsg+0x20>
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	20026db8 	.word	0x20026db8

08008c7c <clearMqttStruct>:
 * @brief  Clears entire MQTT_MSG_TYPE structure
 * @note
 * @retval void
 */
void clearMqttStruct(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
	downLinkPackets.numberOfPackets = 0;
 8008c82:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb0 <clearMqttStruct+0x34>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	701a      	strb	r2, [r3, #0]
	for(int mqttPacketIndex = 0; mqttPacketIndex < 5; mqttPacketIndex++ )
 8008c88:	2300      	movs	r3, #0
 8008c8a:	607b      	str	r3, [r7, #4]
 8008c8c:	e007      	b.n	8008c9e <clearMqttStruct+0x22>
	{
		clearMqttMsg(mqttPacketIndex);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff ffc6 	bl	8008c24 <clearMqttMsg>
	for(int mqttPacketIndex = 0; mqttPacketIndex < 5; mqttPacketIndex++ )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	607b      	str	r3, [r7, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	ddf4      	ble.n	8008c8e <clearMqttStruct+0x12>
	}
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20026db8 	.word	0x20026db8

08008cb4 <checkFunctionActive>:
 * @param  HW_MODULE_TYPE hwSubModule
 *         Sub component to be checked
 * @retval return value isActive - true is active, false is disabled
 */
bool checkFunctionActive(HW_MODULE_TYPE hwSubModule)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	71fb      	strb	r3, [r7, #7]
	bool isActive = false; //CSC default is false, handling only true cases below
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
	bool night = isNight2();
 8008cc2:	f7fb fa0b 	bl	80040dc <isNight2>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73bb      	strb	r3, [r7, #14]
	uint8_t mode = getMode(hwSubModule);
 8008cca:	79fb      	ldrb	r3, [r7, #7]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f00a fc63 	bl	8013598 <getMode>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	737b      	strb	r3, [r7, #13]
	switch (hwSubModule)
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	f200 815c 	bhi.w	8008f96 <checkFunctionActive+0x2e2>
 8008cde:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce4 <checkFunctionActive+0x30>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d09 	.word	0x08008d09
 8008ce8:	08008d4f 	.word	0x08008d4f
 8008cec:	08008d95 	.word	0x08008d95
 8008cf0:	08008ddb 	.word	0x08008ddb
 8008cf4:	08008e21 	.word	0x08008e21
 8008cf8:	08008e67 	.word	0x08008e67
 8008cfc:	08008ead 	.word	0x08008ead
 8008d00:	08008eef 	.word	0x08008eef
 8008d04:	08008f31 	.word	0x08008f31
	{
	case HEARTBEAT_MODULE:
		if((mode & 3) == 3)
 8008d08:	7b7b      	ldrb	r3, [r7, #13]
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d102      	bne.n	8008d18 <checkFunctionActive+0x64>
		{
			isActive = true;
 8008d12:	2301      	movs	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008d16:	e143      	b.n	8008fa0 <checkFunctionActive+0x2ec>
		else if(((mode & 3) == 1) && night)
 8008d18:	7b7b      	ldrb	r3, [r7, #13]
 8008d1a:	f003 0303 	and.w	r3, r3, #3
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d105      	bne.n	8008d2e <checkFunctionActive+0x7a>
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d002      	beq.n	8008d2e <checkFunctionActive+0x7a>
			isActive = true;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
		break;
 8008d2c:	e138      	b.n	8008fa0 <checkFunctionActive+0x2ec>
		else if(((mode & 3) == 2) && !night)
 8008d2e:	7b7b      	ldrb	r3, [r7, #13]
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	f040 8133 	bne.w	8008fa0 <checkFunctionActive+0x2ec>
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	f083 0301 	eor.w	r3, r3, #1
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 812c 	beq.w	8008fa0 <checkFunctionActive+0x2ec>
			isActive = true;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	73fb      	strb	r3, [r7, #15]
		break;
 8008d4c:	e128      	b.n	8008fa0 <checkFunctionActive+0x2ec>
	case GPS_MODULE:
		if((mode & 3) == 3)
 8008d4e:	7b7b      	ldrb	r3, [r7, #13]
 8008d50:	f003 0303 	and.w	r3, r3, #3
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d102      	bne.n	8008d5e <checkFunctionActive+0xaa>
		{
			isActive = true;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008d5c:	e122      	b.n	8008fa4 <checkFunctionActive+0x2f0>
		else if(((mode & 3) == 1) && night)
 8008d5e:	7b7b      	ldrb	r3, [r7, #13]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d105      	bne.n	8008d74 <checkFunctionActive+0xc0>
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <checkFunctionActive+0xc0>
			isActive = true;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	73fb      	strb	r3, [r7, #15]
		break;
 8008d72:	e117      	b.n	8008fa4 <checkFunctionActive+0x2f0>
		else if(((mode & 3) == 2) && !night)
 8008d74:	7b7b      	ldrb	r3, [r7, #13]
 8008d76:	f003 0303 	and.w	r3, r3, #3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	f040 8112 	bne.w	8008fa4 <checkFunctionActive+0x2f0>
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	f083 0301 	eor.w	r3, r3, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 810b 	beq.w	8008fa4 <checkFunctionActive+0x2f0>
			isActive = true;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
		break;
 8008d92:	e107      	b.n	8008fa4 <checkFunctionActive+0x2f0>
	case BUZZER_MODULE:
		if((mode & 12) == 12)
 8008d94:	7b7b      	ldrb	r3, [r7, #13]
 8008d96:	f003 030c 	and.w	r3, r3, #12
 8008d9a:	2b0c      	cmp	r3, #12
 8008d9c:	d102      	bne.n	8008da4 <checkFunctionActive+0xf0>
		{
			isActive = true;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 8) == 8) && !night)
		{
			isActive = true;
		}
		break;
 8008da2:	e101      	b.n	8008fa8 <checkFunctionActive+0x2f4>
		else if(((mode & 4) == 4) && night)
 8008da4:	7b7b      	ldrb	r3, [r7, #13]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <checkFunctionActive+0x106>
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <checkFunctionActive+0x106>
			isActive = true;
 8008db4:	2301      	movs	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]
		break;
 8008db8:	e0f6      	b.n	8008fa8 <checkFunctionActive+0x2f4>
		else if(((mode & 8) == 8) && !night)
 8008dba:	7b7b      	ldrb	r3, [r7, #13]
 8008dbc:	f003 0308 	and.w	r3, r3, #8
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80f1 	beq.w	8008fa8 <checkFunctionActive+0x2f4>
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	f083 0301 	eor.w	r3, r3, #1
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 80ea 	beq.w	8008fa8 <checkFunctionActive+0x2f4>
			isActive = true;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
		break;
 8008dd8:	e0e6      	b.n	8008fa8 <checkFunctionActive+0x2f4>
	case TEMPERATURE_MODULE:
		if((mode & 3) == 3)
 8008dda:	7b7b      	ldrb	r3, [r7, #13]
 8008ddc:	f003 0303 	and.w	r3, r3, #3
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d102      	bne.n	8008dea <checkFunctionActive+0x136>
		{
			isActive = true;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008de8:	e0e0      	b.n	8008fac <checkFunctionActive+0x2f8>
		else if(((mode & 3) == 1) && night)
 8008dea:	7b7b      	ldrb	r3, [r7, #13]
 8008dec:	f003 0303 	and.w	r3, r3, #3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d105      	bne.n	8008e00 <checkFunctionActive+0x14c>
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <checkFunctionActive+0x14c>
			isActive = true;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
		break;
 8008dfe:	e0d5      	b.n	8008fac <checkFunctionActive+0x2f8>
		else if(((mode & 3) == 2) && !night)
 8008e00:	7b7b      	ldrb	r3, [r7, #13]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	f040 80d0 	bne.w	8008fac <checkFunctionActive+0x2f8>
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	f083 0301 	eor.w	r3, r3, #1
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 80c9 	beq.w	8008fac <checkFunctionActive+0x2f8>
			isActive = true;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73fb      	strb	r3, [r7, #15]
		break;
 8008e1e:	e0c5      	b.n	8008fac <checkFunctionActive+0x2f8>
	case HUMIDITY_MODULE:
		if((mode & 3) == 3)
 8008e20:	7b7b      	ldrb	r3, [r7, #13]
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d102      	bne.n	8008e30 <checkFunctionActive+0x17c>
		{
			isActive = true;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008e2e:	e0bf      	b.n	8008fb0 <checkFunctionActive+0x2fc>
		else if(((mode & 3) == 1) && night)
 8008e30:	7b7b      	ldrb	r3, [r7, #13]
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d105      	bne.n	8008e46 <checkFunctionActive+0x192>
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <checkFunctionActive+0x192>
			isActive = true;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
		break;
 8008e44:	e0b4      	b.n	8008fb0 <checkFunctionActive+0x2fc>
		else if(((mode & 3) == 2) && !night)
 8008e46:	7b7b      	ldrb	r3, [r7, #13]
 8008e48:	f003 0303 	and.w	r3, r3, #3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	f040 80af 	bne.w	8008fb0 <checkFunctionActive+0x2fc>
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	f083 0301 	eor.w	r3, r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80a8 	beq.w	8008fb0 <checkFunctionActive+0x2fc>
			isActive = true;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
		break;
 8008e64:	e0a4      	b.n	8008fb0 <checkFunctionActive+0x2fc>
	case CELL_MODULE:
		if((mode & 3) == 3)
 8008e66:	7b7b      	ldrb	r3, [r7, #13]
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	2b03      	cmp	r3, #3
 8008e6e:	d102      	bne.n	8008e76 <checkFunctionActive+0x1c2>
		{
			isActive = true;
 8008e70:	2301      	movs	r3, #1
 8008e72:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008e74:	e09e      	b.n	8008fb4 <checkFunctionActive+0x300>
		else if(((mode & 3) == 1) && night)
 8008e76:	7b7b      	ldrb	r3, [r7, #13]
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d105      	bne.n	8008e8c <checkFunctionActive+0x1d8>
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <checkFunctionActive+0x1d8>
			isActive = true;
 8008e86:	2301      	movs	r3, #1
 8008e88:	73fb      	strb	r3, [r7, #15]
		break;
 8008e8a:	e093      	b.n	8008fb4 <checkFunctionActive+0x300>
		else if(((mode & 3) == 2) && !night)
 8008e8c:	7b7b      	ldrb	r3, [r7, #13]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	f040 808e 	bne.w	8008fb4 <checkFunctionActive+0x300>
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	f083 0301 	eor.w	r3, r3, #1
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 8087 	beq.w	8008fb4 <checkFunctionActive+0x300>
			isActive = true;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	73fb      	strb	r3, [r7, #15]
		break;
 8008eaa:	e083      	b.n	8008fb4 <checkFunctionActive+0x300>
	case CAMERA_MODULE:
		if((mode & 3) == 3)
 8008eac:	7b7b      	ldrb	r3, [r7, #13]
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d102      	bne.n	8008ebc <checkFunctionActive+0x208>
		{
			isActive = true;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008eba:	e07d      	b.n	8008fb8 <checkFunctionActive+0x304>
		else if(((mode & 3) == 1) && night)
 8008ebc:	7b7b      	ldrb	r3, [r7, #13]
 8008ebe:	f003 0303 	and.w	r3, r3, #3
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d105      	bne.n	8008ed2 <checkFunctionActive+0x21e>
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <checkFunctionActive+0x21e>
			isActive = true;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	73fb      	strb	r3, [r7, #15]
		break;
 8008ed0:	e072      	b.n	8008fb8 <checkFunctionActive+0x304>
		else if(((mode & 3) == 2) && !night)
 8008ed2:	7b7b      	ldrb	r3, [r7, #13]
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d16d      	bne.n	8008fb8 <checkFunctionActive+0x304>
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	f083 0301 	eor.w	r3, r3, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d067      	beq.n	8008fb8 <checkFunctionActive+0x304>
			isActive = true;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	73fb      	strb	r3, [r7, #15]
		break;
 8008eec:	e064      	b.n	8008fb8 <checkFunctionActive+0x304>
	case ACCELEROMETER_MODULE:
		if((mode & 3) == 3)
 8008eee:	7b7b      	ldrb	r3, [r7, #13]
 8008ef0:	f003 0303 	and.w	r3, r3, #3
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d102      	bne.n	8008efe <checkFunctionActive+0x24a>
		{
			isActive = true;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]
		}
		else if(((mode & 3) == 2) && !night)
		{
			isActive = true;
		}
		break;
 8008efc:	e05e      	b.n	8008fbc <checkFunctionActive+0x308>
		else if(((mode & 3) == 1) && night)
 8008efe:	7b7b      	ldrb	r3, [r7, #13]
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d105      	bne.n	8008f14 <checkFunctionActive+0x260>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d002      	beq.n	8008f14 <checkFunctionActive+0x260>
			isActive = true;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	73fb      	strb	r3, [r7, #15]
		break;
 8008f12:	e053      	b.n	8008fbc <checkFunctionActive+0x308>
		else if(((mode & 3) == 2) && !night)
 8008f14:	7b7b      	ldrb	r3, [r7, #13]
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d14e      	bne.n	8008fbc <checkFunctionActive+0x308>
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	f083 0301 	eor.w	r3, r3, #1
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d048      	beq.n	8008fbc <checkFunctionActive+0x308>
			isActive = true;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	73fb      	strb	r3, [r7, #15]
		break;
 8008f2e:	e045      	b.n	8008fbc <checkFunctionActive+0x308>
	case PIR_MODULE:
		if (isTimeDefault())
 8008f30:	f7fb f944 	bl	80041bc <isTimeDefault>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d006      	beq.n	8008f48 <checkFunctionActive+0x294>
		{
			PRINTF("Time is default, turning Active to true");
 8008f3a:	4924      	ldr	r1, [pc, #144]	@ (8008fcc <checkFunctionActive+0x318>)
 8008f3c:	2001      	movs	r0, #1
 8008f3e:	f7fd ff19 	bl	8006d74 <TraceSend>
			isActive = true;
 8008f42:	2301      	movs	r3, #1
 8008f44:	73fb      	strb	r3, [r7, #15]
			else if(((mode & 3) == 2) && !night)
			{
				isActive = true;
			}
		}
		break;
 8008f46:	e03b      	b.n	8008fc0 <checkFunctionActive+0x30c>
			PRINTF("PIR Mode is: %d\r\n", mode);
 8008f48:	7b7b      	ldrb	r3, [r7, #13]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4920      	ldr	r1, [pc, #128]	@ (8008fd0 <checkFunctionActive+0x31c>)
 8008f4e:	2001      	movs	r0, #1
 8008f50:	f7fd ff10 	bl	8006d74 <TraceSend>
			if((mode & 3) == 3)
 8008f54:	7b7b      	ldrb	r3, [r7, #13]
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d102      	bne.n	8008f64 <checkFunctionActive+0x2b0>
				isActive = true;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	73fb      	strb	r3, [r7, #15]
		break;
 8008f62:	e02d      	b.n	8008fc0 <checkFunctionActive+0x30c>
			else if(((mode & 3) == 1) && night)
 8008f64:	7b7b      	ldrb	r3, [r7, #13]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d105      	bne.n	8008f7a <checkFunctionActive+0x2c6>
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <checkFunctionActive+0x2c6>
				isActive = true;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
		break;
 8008f78:	e022      	b.n	8008fc0 <checkFunctionActive+0x30c>
			else if(((mode & 3) == 2) && !night)
 8008f7a:	7b7b      	ldrb	r3, [r7, #13]
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d11d      	bne.n	8008fc0 <checkFunctionActive+0x30c>
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	f083 0301 	eor.w	r3, r3, #1
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d017      	beq.n	8008fc0 <checkFunctionActive+0x30c>
				isActive = true;
 8008f90:	2301      	movs	r3, #1
 8008f92:	73fb      	strb	r3, [r7, #15]
		break;
 8008f94:	e014      	b.n	8008fc0 <checkFunctionActive+0x30c>
	default:
		PRINTF("Invalid module received\r\n");
 8008f96:	490f      	ldr	r1, [pc, #60]	@ (8008fd4 <checkFunctionActive+0x320>)
 8008f98:	2001      	movs	r0, #1
 8008f9a:	f7fd feeb 	bl	8006d74 <TraceSend>
		break;
 8008f9e:	e010      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fa0:	bf00      	nop
 8008fa2:	e00e      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fa4:	bf00      	nop
 8008fa6:	e00c      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fa8:	bf00      	nop
 8008faa:	e00a      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fac:	bf00      	nop
 8008fae:	e008      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fb0:	bf00      	nop
 8008fb2:	e006      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fb4:	bf00      	nop
 8008fb6:	e004      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fb8:	bf00      	nop
 8008fba:	e002      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fbc:	bf00      	nop
 8008fbe:	e000      	b.n	8008fc2 <checkFunctionActive+0x30e>
		break;
 8008fc0:	bf00      	nop

	}
	return isActive;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	0802dcd0 	.word	0x0802dcd0
 8008fd0:	0802dcf8 	.word	0x0802dcf8
 8008fd4:	0802dd0c 	.word	0x0802dd0c

08008fd8 <clearPirInterreptUpdateStates>:
/**
 * @brief  Clears Flag states For pictures, Motion detection and Buzzer
 * @retval null
 */
void clearPirInterreptUpdateStates(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
	if (memory.State & PIC_UPDT)
 8008fdc:	4b36      	ldr	r3, [pc, #216]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8008fde:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8008fe2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <clearPirInterreptUpdateStates+0x2e>
	{
		memory.State ^= PIC_UPDT;
 8008fee:	4b32      	ldr	r3, [pc, #200]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8008ff0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8008ff4:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8008ff8:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 8008ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8008ffe:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8009002:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
	if (memory.State & PIC_SEND)
 8009006:	4b2c      	ldr	r3, [pc, #176]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009008:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800900c:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8009010:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <clearPirInterreptUpdateStates+0x58>
	{
		memory.State ^= PIC_SEND;
 8009018:	4b27      	ldr	r3, [pc, #156]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 800901a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800901e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8009022:	f483 2300 	eor.w	r3, r3, #524288	@ 0x80000
 8009026:	4a24      	ldr	r2, [pc, #144]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009028:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800902c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
	if (memory.State & PIR_UPDT)
 8009030:	4b21      	ldr	r3, [pc, #132]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009032:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8009036:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800903a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <clearPirInterreptUpdateStates+0x82>
	{
		memory.State ^= PIR_UPDT;
 8009042:	4b1d      	ldr	r3, [pc, #116]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009044:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8009048:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800904c:	f483 3300 	eor.w	r3, r3, #131072	@ 0x20000
 8009050:	4a19      	ldr	r2, [pc, #100]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009052:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8009056:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
	if (memory.State & PIR_START)
 800905a:	4b17      	ldr	r3, [pc, #92]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 800905c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8009060:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8009064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <clearPirInterreptUpdateStates+0xac>
	{
		memory.State ^= PIR_START;
 800906c:	4b12      	ldr	r3, [pc, #72]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 800906e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8009072:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8009076:	f483 2380 	eor.w	r3, r3, #262144	@ 0x40000
 800907a:	4a0f      	ldr	r2, [pc, #60]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 800907c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8009080:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
	if (memory.State & BUZZER_TOGGLE)
 8009084:	4b0c      	ldr	r3, [pc, #48]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009086:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800908a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800908e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <clearPirInterreptUpdateStates+0xd6>
	{
		memory.State ^= BUZZER_TOGGLE;
 8009096:	4b08      	ldr	r3, [pc, #32]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 8009098:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800909c:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80090a0:	f483 1300 	eor.w	r3, r3, #2097152	@ 0x200000
 80090a4:	4a04      	ldr	r2, [pc, #16]	@ (80090b8 <clearPirInterreptUpdateStates+0xe0>)
 80090a6:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80090aa:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
}
 80090ae:	bf00      	nop
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2007d870 	.word	0x2007d870

080090bc <clearAccellerometerInterruptStates>:
/**
 * @brief  Clears Flag states For heartbea and movement detection
 * @retval null
 */
void clearAccellerometerInterruptStates(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
	if (memory.State & HB_UPDT)
 80090c0:	4b21      	ldr	r3, [pc, #132]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 80090c2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80090c6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80090ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00b      	beq.n	80090ea <clearAccellerometerInterruptStates+0x2e>
	{
		memory.State ^= HB_UPDT;
 80090d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 80090d4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80090d8:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80090dc:	f083 6300 	eor.w	r3, r3, #134217728	@ 0x8000000
 80090e0:	4a19      	ldr	r2, [pc, #100]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 80090e2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80090e6:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
	if (memory.State & MOVEMENT_UPDT)
 80090ea:	4b17      	ldr	r3, [pc, #92]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 80090ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80090f0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 80090f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <clearAccellerometerInterruptStates+0x58>
	{
		memory.State ^= MOVEMENT_UPDT;
 80090fc:	4b12      	ldr	r3, [pc, #72]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 80090fe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8009102:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8009106:	f083 5380 	eor.w	r3, r3, #268435456	@ 0x10000000
 800910a:	4a0f      	ldr	r2, [pc, #60]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 800910c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8009110:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}
	if (memory.State & GPS_UPDT)
 8009114:	4b0c      	ldr	r3, [pc, #48]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 8009116:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800911a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800911e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <clearAccellerometerInterruptStates+0x82>
	{
		memory.State ^= GPS_UPDT;
 8009126:	4b08      	ldr	r3, [pc, #32]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 8009128:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800912c:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 8009130:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009134:	4a04      	ldr	r2, [pc, #16]	@ (8009148 <clearAccellerometerInterruptStates+0x8c>)
 8009136:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800913a:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
	}

}
 800913e:	bf00      	nop
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	2007d870 	.word	0x2007d870

0800914c <powerDownDeviceForSleep>:

void powerDownDeviceForSleep(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( USB_Power_Enable_GPIO_Port , USB_Power_Enable_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 8009150:	2200      	movs	r2, #0
 8009152:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009156:	480f      	ldr	r0, [pc, #60]	@ (8009194 <powerDownDeviceForSleep+0x48>)
 8009158:	f011 f81c 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( USB_Power_Switch_On_GPIO_Port , USB_Power_Switch_On_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 800915c:	2200      	movs	r2, #0
 800915e:	2104      	movs	r1, #4
 8009160:	480d      	ldr	r0, [pc, #52]	@ (8009198 <powerDownDeviceForSleep+0x4c>)
 8009162:	f011 f817 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( Camera_Enable_GPIO_Port , Camera_Enable_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 8009166:	2200      	movs	r2, #0
 8009168:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800916c:	480b      	ldr	r0, [pc, #44]	@ (800919c <powerDownDeviceForSleep+0x50>)
 800916e:	f011 f811 	bl	801a194 <HAL_GPIO_WritePin>

	//	CLEAR_REG(PWR -> WUSCR);
	HAL_GPIO_WritePin ( Cell_Enable_GPIO_Port , Cell_Enable_Pin , GPIO_PIN_RESET );    //for simulated battery power operation
 8009172:	2200      	movs	r2, #0
 8009174:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009178:	4806      	ldr	r0, [pc, #24]	@ (8009194 <powerDownDeviceForSleep+0x48>)
 800917a:	f011 f80b 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( Cell_DVS_GPIO_Port , Cell_DVS_Pin , GPIO_PIN_RESET );          //for simulated battery power operation
 800917e:	2200      	movs	r2, #0
 8009180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009184:	4804      	ldr	r0, [pc, #16]	@ (8009198 <powerDownDeviceForSleep+0x4c>)
 8009186:	f011 f805 	bl	801a194 <HAL_GPIO_WritePin>
	isModemPowered = false;
 800918a:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <powerDownDeviceForSleep+0x54>)
 800918c:	2200      	movs	r2, #0
 800918e:	701a      	strb	r2, [r3, #0]
}
 8009190:	bf00      	nop
 8009192:	bd80      	pop	{r7, pc}
 8009194:	42020800 	.word	0x42020800
 8009198:	42020400 	.word	0x42020400
 800919c:	42020000 	.word	0x42020000
 80091a0:	2007a26e 	.word	0x2007a26e

080091a4 <buzzerTone>:
 * @brief  Outputs a buzzer dying tone
 * @note   Expand in the future to provide several tones and also move to a Buzzer.c file
 * @retval null
 */
void buzzerTone(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
	// KCS add case statements and many cases
	// for now just a disconnect cell case
	//Case Cell not connected
	HAL_GPIO_WritePin ( Buzzer_GPIO_Port , Buzzer_Pin, GPIO_PIN_SET );
 80091a8:	2201      	movs	r2, #1
 80091aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091ae:	481c      	ldr	r0, [pc, #112]	@ (8009220 <buzzerTone+0x7c>)
 80091b0:	f010 fff0 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_Delay ( 500 );
 80091b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80091b8:	f00d f964 	bl	8016484 <HAL_Delay>
	HAL_GPIO_TogglePin ( Buzzer_GPIO_Port , Buzzer_Pin );
 80091bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091c0:	4817      	ldr	r0, [pc, #92]	@ (8009220 <buzzerTone+0x7c>)
 80091c2:	f010 ffff 	bl	801a1c4 <HAL_GPIO_TogglePin>
	HAL_Delay ( 300 );
 80091c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80091ca:	f00d f95b 	bl	8016484 <HAL_Delay>
	HAL_GPIO_TogglePin ( Buzzer_GPIO_Port , Buzzer_Pin );
 80091ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091d2:	4813      	ldr	r0, [pc, #76]	@ (8009220 <buzzerTone+0x7c>)
 80091d4:	f010 fff6 	bl	801a1c4 <HAL_GPIO_TogglePin>
	HAL_Delay ( 500 );
 80091d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80091dc:	f00d f952 	bl	8016484 <HAL_Delay>
	HAL_GPIO_TogglePin ( Buzzer_GPIO_Port , Buzzer_Pin );
 80091e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091e4:	480e      	ldr	r0, [pc, #56]	@ (8009220 <buzzerTone+0x7c>)
 80091e6:	f010 ffed 	bl	801a1c4 <HAL_GPIO_TogglePin>
	HAL_Delay ( 300 );
 80091ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80091ee:	f00d f949 	bl	8016484 <HAL_Delay>
	HAL_GPIO_TogglePin ( Buzzer_GPIO_Port , Buzzer_Pin );
 80091f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091f6:	480a      	ldr	r0, [pc, #40]	@ (8009220 <buzzerTone+0x7c>)
 80091f8:	f010 ffe4 	bl	801a1c4 <HAL_GPIO_TogglePin>
	HAL_Delay ( 2000 );
 80091fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009200:	f00d f940 	bl	8016484 <HAL_Delay>
	HAL_GPIO_TogglePin ( Buzzer_GPIO_Port , Buzzer_Pin );
 8009204:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009208:	4805      	ldr	r0, [pc, #20]	@ (8009220 <buzzerTone+0x7c>)
 800920a:	f010 ffdb 	bl	801a1c4 <HAL_GPIO_TogglePin>
	// end of Cell not connected

	// Just in case make sure it is off at end
	HAL_GPIO_WritePin ( Buzzer_GPIO_Port , Buzzer_Pin, GPIO_PIN_RESET );
 800920e:	2200      	movs	r2, #0
 8009210:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009214:	4802      	ldr	r0, [pc, #8]	@ (8009220 <buzzerTone+0x7c>)
 8009216:	f010 ffbd 	bl	801a194 <HAL_GPIO_WritePin>

}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	42020400 	.word	0x42020400

08009224 <restartModem>:

void restartModem (void)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( Sky_Reset_GPIO_Port , Sky_Reset_Pin , GPIO_PIN_SET );
 8009228:	2201      	movs	r2, #1
 800922a:	2140      	movs	r1, #64	@ 0x40
 800922c:	4808      	ldr	r0, [pc, #32]	@ (8009250 <restartModem+0x2c>)
 800922e:	f010 ffb1 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8009232:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8009236:	f00d f925 	bl	8016484 <HAL_Delay>
	HAL_GPIO_WritePin ( Sky_Reset_GPIO_Port , Sky_Reset_Pin , GPIO_PIN_RESET );
 800923a:	2200      	movs	r2, #0
 800923c:	2140      	movs	r1, #64	@ 0x40
 800923e:	4804      	ldr	r0, [pc, #16]	@ (8009250 <restartModem+0x2c>)
 8009240:	f010 ffa8 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_Delay(6000);
 8009244:	f241 7070 	movw	r0, #6000	@ 0x1770
 8009248:	f00d f91c 	bl	8016484 <HAL_Delay>
}
 800924c:	bf00      	nop
 800924e:	bd80      	pop	{r7, pc}
 8009250:	42020800 	.word	0x42020800

08009254 <minValue4>:

uint16_t minValue4 (uint16_t HB, uint16_t PIR, uint16_t ACC, uint16_t MUTEGPS)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	4604      	mov	r4, r0
 800925c:	4608      	mov	r0, r1
 800925e:	4611      	mov	r1, r2
 8009260:	461a      	mov	r2, r3
 8009262:	4623      	mov	r3, r4
 8009264:	80fb      	strh	r3, [r7, #6]
 8009266:	4603      	mov	r3, r0
 8009268:	80bb      	strh	r3, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	807b      	strh	r3, [r7, #2]
 800926e:	4613      	mov	r3, r2
 8009270:	803b      	strh	r3, [r7, #0]
	uint16_t min = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	81fb      	strh	r3, [r7, #14]

	if ( MuteInit && accelMuteInit )
 8009276:	4b8b      	ldr	r3, [pc, #556]	@ (80094a4 <minValue4+0x250>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 8172 	beq.w	8009564 <minValue4+0x310>
 8009280:	4b89      	ldr	r3, [pc, #548]	@ (80094a8 <minValue4+0x254>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 816d 	beq.w	8009564 <minValue4+0x310>
	{
		if ((HB < PIR) && (HB < ACC) && (HB < MUTEGPS))
 800928a:	88fa      	ldrh	r2, [r7, #6]
 800928c:	88bb      	ldrh	r3, [r7, #4]
 800928e:	429a      	cmp	r2, r3
 8009290:	d211      	bcs.n	80092b6 <minValue4+0x62>
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	887b      	ldrh	r3, [r7, #2]
 8009296:	429a      	cmp	r2, r3
 8009298:	d20d      	bcs.n	80092b6 <minValue4+0x62>
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	883b      	ldrh	r3, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d209      	bcs.n	80092b6 <minValue4+0x62>
		{

			wakeupState = hb_wu_enabled;
 80092a2:	4b82      	ldr	r3, [pc, #520]	@ (80094ac <minValue4+0x258>)
 80092a4:	2215      	movs	r2, #21
 80092a6:	801a      	strh	r2, [r3, #0]
			min = HB;
 80092a8:	88fb      	ldrh	r3, [r7, #6]
 80092aa:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_wu_enabled\r\n");
 80092ac:	4980      	ldr	r1, [pc, #512]	@ (80094b0 <minValue4+0x25c>)
 80092ae:	2001      	movs	r0, #1
 80092b0:	f7fd fd60 	bl	8006d74 <TraceSend>
 80092b4:	e155      	b.n	8009562 <minValue4+0x30e>

		}
		else if ((PIR < HB) && (PIR < ACC) && (PIR < MUTEGPS))
 80092b6:	88ba      	ldrh	r2, [r7, #4]
 80092b8:	88fb      	ldrh	r3, [r7, #6]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d211      	bcs.n	80092e2 <minValue4+0x8e>
 80092be:	88ba      	ldrh	r2, [r7, #4]
 80092c0:	887b      	ldrh	r3, [r7, #2]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d20d      	bcs.n	80092e2 <minValue4+0x8e>
 80092c6:	88ba      	ldrh	r2, [r7, #4]
 80092c8:	883b      	ldrh	r3, [r7, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d209      	bcs.n	80092e2 <minValue4+0x8e>
		{
			wakeupState = img_wu_enabled;
 80092ce:	4b77      	ldr	r3, [pc, #476]	@ (80094ac <minValue4+0x258>)
 80092d0:	2217      	movs	r2, #23
 80092d2:	801a      	strh	r2, [r3, #0]
			min = PIR;
 80092d4:	88bb      	ldrh	r3, [r7, #4]
 80092d6:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is img_wu_enabled\r\n");
 80092d8:	4976      	ldr	r1, [pc, #472]	@ (80094b4 <minValue4+0x260>)
 80092da:	2001      	movs	r0, #1
 80092dc:	f7fd fd4a 	bl	8006d74 <TraceSend>
 80092e0:	e13f      	b.n	8009562 <minValue4+0x30e>

		}
		else if ((ACC < HB) && (ACC < PIR) && (ACC < MUTEGPS))
 80092e2:	887a      	ldrh	r2, [r7, #2]
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d211      	bcs.n	800930e <minValue4+0xba>
 80092ea:	887a      	ldrh	r2, [r7, #2]
 80092ec:	88bb      	ldrh	r3, [r7, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d20d      	bcs.n	800930e <minValue4+0xba>
 80092f2:	887a      	ldrh	r2, [r7, #2]
 80092f4:	883b      	ldrh	r3, [r7, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d209      	bcs.n	800930e <minValue4+0xba>
		{
			wakeupState = acc_wu_enabled;
 80092fa:	4b6c      	ldr	r3, [pc, #432]	@ (80094ac <minValue4+0x258>)
 80092fc:	2216      	movs	r2, #22
 80092fe:	801a      	strh	r2, [r3, #0]
			min = ACC;
 8009300:	887b      	ldrh	r3, [r7, #2]
 8009302:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is acc_wu_enabled\r\n");
 8009304:	496c      	ldr	r1, [pc, #432]	@ (80094b8 <minValue4+0x264>)
 8009306:	2001      	movs	r0, #1
 8009308:	f7fd fd34 	bl	8006d74 <TraceSend>
 800930c:	e129      	b.n	8009562 <minValue4+0x30e>

		}
		else if ((MUTEGPS < HB) && (MUTEGPS < PIR) && (MUTEGPS < ACC))
 800930e:	883a      	ldrh	r2, [r7, #0]
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	429a      	cmp	r2, r3
 8009314:	d211      	bcs.n	800933a <minValue4+0xe6>
 8009316:	883a      	ldrh	r2, [r7, #0]
 8009318:	88bb      	ldrh	r3, [r7, #4]
 800931a:	429a      	cmp	r2, r3
 800931c:	d20d      	bcs.n	800933a <minValue4+0xe6>
 800931e:	883a      	ldrh	r2, [r7, #0]
 8009320:	887b      	ldrh	r3, [r7, #2]
 8009322:	429a      	cmp	r2, r3
 8009324:	d209      	bcs.n	800933a <minValue4+0xe6>
		{
			wakeupState = pGPS_wu_enabled;
 8009326:	4b61      	ldr	r3, [pc, #388]	@ (80094ac <minValue4+0x258>)
 8009328:	2218      	movs	r2, #24
 800932a:	801a      	strh	r2, [r3, #0]
			min = MUTEGPS;
 800932c:	883b      	ldrh	r3, [r7, #0]
 800932e:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is pGPS_wu_enabled\r\n");
 8009330:	4962      	ldr	r1, [pc, #392]	@ (80094bc <minValue4+0x268>)
 8009332:	2001      	movs	r0, #1
 8009334:	f7fd fd1e 	bl	8006d74 <TraceSend>
 8009338:	e113      	b.n	8009562 <minValue4+0x30e>

		}

		else if ((HB == PIR) && (HB == ACC) && (HB == MUTEGPS))
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	88bb      	ldrh	r3, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d111      	bne.n	8009366 <minValue4+0x112>
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	887b      	ldrh	r3, [r7, #2]
 8009346:	429a      	cmp	r2, r3
 8009348:	d10d      	bne.n	8009366 <minValue4+0x112>
 800934a:	88fa      	ldrh	r2, [r7, #6]
 800934c:	883b      	ldrh	r3, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d109      	bne.n	8009366 <minValue4+0x112>
		{
			wakeupState = hb_img_acc_pair;
 8009352:	4b56      	ldr	r3, [pc, #344]	@ (80094ac <minValue4+0x258>)
 8009354:	220f      	movs	r2, #15
 8009356:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_img_acc_pair\r\n");
 800935c:	4958      	ldr	r1, [pc, #352]	@ (80094c0 <minValue4+0x26c>)
 800935e:	2001      	movs	r0, #1
 8009360:	f7fd fd08 	bl	8006d74 <TraceSend>
 8009364:	e0fd      	b.n	8009562 <minValue4+0x30e>

		}

		else if ((HB == PIR) && (HB = ACC) && (HB < MUTEGPS))
 8009366:	88fa      	ldrh	r2, [r7, #6]
 8009368:	88bb      	ldrh	r3, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d112      	bne.n	8009394 <minValue4+0x140>
 800936e:	887b      	ldrh	r3, [r7, #2]
 8009370:	80fb      	strh	r3, [r7, #6]
 8009372:	88fb      	ldrh	r3, [r7, #6]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00d      	beq.n	8009394 <minValue4+0x140>
 8009378:	88fa      	ldrh	r2, [r7, #6]
 800937a:	883b      	ldrh	r3, [r7, #0]
 800937c:	429a      	cmp	r2, r3
 800937e:	d209      	bcs.n	8009394 <minValue4+0x140>
		{
			wakeupState = hb_img_acc_pair;
 8009380:	4b4a      	ldr	r3, [pc, #296]	@ (80094ac <minValue4+0x258>)
 8009382:	220f      	movs	r2, #15
 8009384:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009386:	88fb      	ldrh	r3, [r7, #6]
 8009388:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_img_acc_pair\r\n");
 800938a:	494d      	ldr	r1, [pc, #308]	@ (80094c0 <minValue4+0x26c>)
 800938c:	2001      	movs	r0, #1
 800938e:	f7fd fcf1 	bl	8006d74 <TraceSend>
 8009392:	e0e6      	b.n	8009562 <minValue4+0x30e>

		}

		else if ((HB == PIR) && (HB = MUTEGPS) && (HB < ACC))
 8009394:	88fa      	ldrh	r2, [r7, #6]
 8009396:	88bb      	ldrh	r3, [r7, #4]
 8009398:	429a      	cmp	r2, r3
 800939a:	d112      	bne.n	80093c2 <minValue4+0x16e>
 800939c:	883b      	ldrh	r3, [r7, #0]
 800939e:	80fb      	strh	r3, [r7, #6]
 80093a0:	88fb      	ldrh	r3, [r7, #6]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00d      	beq.n	80093c2 <minValue4+0x16e>
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	887b      	ldrh	r3, [r7, #2]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d209      	bcs.n	80093c2 <minValue4+0x16e>
		{
			wakeupState = hb_img_pGPS_pair;
 80093ae:	4b3f      	ldr	r3, [pc, #252]	@ (80094ac <minValue4+0x258>)
 80093b0:	2212      	movs	r2, #18
 80093b2:	801a      	strh	r2, [r3, #0]
			min = HB;
 80093b4:	88fb      	ldrh	r3, [r7, #6]
 80093b6:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_img_pGPS_pair\r\n");
 80093b8:	4942      	ldr	r1, [pc, #264]	@ (80094c4 <minValue4+0x270>)
 80093ba:	2001      	movs	r0, #1
 80093bc:	f7fd fcda 	bl	8006d74 <TraceSend>
 80093c0:	e0cf      	b.n	8009562 <minValue4+0x30e>

		}
		else if ((HB == ACC) && (HB = MUTEGPS) && (HB < PIR))
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	887b      	ldrh	r3, [r7, #2]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d112      	bne.n	80093f0 <minValue4+0x19c>
 80093ca:	883b      	ldrh	r3, [r7, #0]
 80093cc:	80fb      	strh	r3, [r7, #6]
 80093ce:	88fb      	ldrh	r3, [r7, #6]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00d      	beq.n	80093f0 <minValue4+0x19c>
 80093d4:	88fa      	ldrh	r2, [r7, #6]
 80093d6:	88bb      	ldrh	r3, [r7, #4]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d209      	bcs.n	80093f0 <minValue4+0x19c>
		{
			wakeupState = hb_acc_pair;
 80093dc:	4b33      	ldr	r3, [pc, #204]	@ (80094ac <minValue4+0x258>)
 80093de:	220d      	movs	r2, #13
 80093e0:	801a      	strh	r2, [r3, #0]
			min = HB;
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_acc_pair\r\n");
 80093e6:	4938      	ldr	r1, [pc, #224]	@ (80094c8 <minValue4+0x274>)
 80093e8:	2001      	movs	r0, #1
 80093ea:	f7fd fcc3 	bl	8006d74 <TraceSend>
 80093ee:	e0b8      	b.n	8009562 <minValue4+0x30e>

		}

		else if ((PIR == ACC) && (PIR = MUTEGPS) && (PIR < HB))
 80093f0:	88ba      	ldrh	r2, [r7, #4]
 80093f2:	887b      	ldrh	r3, [r7, #2]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d112      	bne.n	800941e <minValue4+0x1ca>
 80093f8:	883b      	ldrh	r3, [r7, #0]
 80093fa:	80bb      	strh	r3, [r7, #4]
 80093fc:	88bb      	ldrh	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00d      	beq.n	800941e <minValue4+0x1ca>
 8009402:	88ba      	ldrh	r2, [r7, #4]
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	429a      	cmp	r2, r3
 8009408:	d209      	bcs.n	800941e <minValue4+0x1ca>
		{
			wakeupState = img_acc_pair;
 800940a:	4b28      	ldr	r3, [pc, #160]	@ (80094ac <minValue4+0x258>)
 800940c:	220e      	movs	r2, #14
 800940e:	801a      	strh	r2, [r3, #0]
			min = PIR;
 8009410:	88bb      	ldrh	r3, [r7, #4]
 8009412:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is img_acc_pair\r\n");
 8009414:	492d      	ldr	r1, [pc, #180]	@ (80094cc <minValue4+0x278>)
 8009416:	2001      	movs	r0, #1
 8009418:	f7fd fcac 	bl	8006d74 <TraceSend>
 800941c:	e0a1      	b.n	8009562 <minValue4+0x30e>

		}



		else if ((HB == PIR) && (HB < ACC) && (HB < MUTEGPS))
 800941e:	88fa      	ldrh	r2, [r7, #6]
 8009420:	88bb      	ldrh	r3, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d111      	bne.n	800944a <minValue4+0x1f6>
 8009426:	88fa      	ldrh	r2, [r7, #6]
 8009428:	887b      	ldrh	r3, [r7, #2]
 800942a:	429a      	cmp	r2, r3
 800942c:	d20d      	bcs.n	800944a <minValue4+0x1f6>
 800942e:	88fa      	ldrh	r2, [r7, #6]
 8009430:	883b      	ldrh	r3, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d209      	bcs.n	800944a <minValue4+0x1f6>
		{
			wakeupState = hb_img_pair;
 8009436:	4b1d      	ldr	r3, [pc, #116]	@ (80094ac <minValue4+0x258>)
 8009438:	220c      	movs	r2, #12
 800943a:	801a      	strh	r2, [r3, #0]
			min = HB;
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_img_pair\r\n");
 8009440:	4923      	ldr	r1, [pc, #140]	@ (80094d0 <minValue4+0x27c>)
 8009442:	2001      	movs	r0, #1
 8009444:	f7fd fc96 	bl	8006d74 <TraceSend>
 8009448:	e08b      	b.n	8009562 <minValue4+0x30e>

		}
		else if ((HB == ACC) && (HB < PIR) && (HB < MUTEGPS))
 800944a:	88fa      	ldrh	r2, [r7, #6]
 800944c:	887b      	ldrh	r3, [r7, #2]
 800944e:	429a      	cmp	r2, r3
 8009450:	d111      	bne.n	8009476 <minValue4+0x222>
 8009452:	88fa      	ldrh	r2, [r7, #6]
 8009454:	88bb      	ldrh	r3, [r7, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d20d      	bcs.n	8009476 <minValue4+0x222>
 800945a:	88fa      	ldrh	r2, [r7, #6]
 800945c:	883b      	ldrh	r3, [r7, #0]
 800945e:	429a      	cmp	r2, r3
 8009460:	d209      	bcs.n	8009476 <minValue4+0x222>
		{
			wakeupState = hb_acc_pair;
 8009462:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <minValue4+0x258>)
 8009464:	220d      	movs	r2, #13
 8009466:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009468:	88fb      	ldrh	r3, [r7, #6]
 800946a:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_acc_pair\r\n");
 800946c:	4916      	ldr	r1, [pc, #88]	@ (80094c8 <minValue4+0x274>)
 800946e:	2001      	movs	r0, #1
 8009470:	f7fd fc80 	bl	8006d74 <TraceSend>
 8009474:	e075      	b.n	8009562 <minValue4+0x30e>

		}
		else if ((HB == MUTEGPS) && (HB < PIR) && (HB < ACC))
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	883b      	ldrh	r3, [r7, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d12c      	bne.n	80094d8 <minValue4+0x284>
 800947e:	88fa      	ldrh	r2, [r7, #6]
 8009480:	88bb      	ldrh	r3, [r7, #4]
 8009482:	429a      	cmp	r2, r3
 8009484:	d228      	bcs.n	80094d8 <minValue4+0x284>
 8009486:	88fa      	ldrh	r2, [r7, #6]
 8009488:	887b      	ldrh	r3, [r7, #2]
 800948a:	429a      	cmp	r2, r3
 800948c:	d224      	bcs.n	80094d8 <minValue4+0x284>
		{
			wakeupState = hb_pGPS_pair;
 800948e:	4b07      	ldr	r3, [pc, #28]	@ (80094ac <minValue4+0x258>)
 8009490:	2210      	movs	r2, #16
 8009492:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009494:	88fb      	ldrh	r3, [r7, #6]
 8009496:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_pGPS_pair\r\n");
 8009498:	490e      	ldr	r1, [pc, #56]	@ (80094d4 <minValue4+0x280>)
 800949a:	2001      	movs	r0, #1
 800949c:	f7fd fc6a 	bl	8006d74 <TraceSend>
 80094a0:	e05f      	b.n	8009562 <minValue4+0x30e>
 80094a2:	bf00      	nop
 80094a4:	2007a272 	.word	0x2007a272
 80094a8:	2007a273 	.word	0x2007a273
 80094ac:	2007a27e 	.word	0x2007a27e
 80094b0:	0802dd74 	.word	0x0802dd74
 80094b4:	0802dd94 	.word	0x0802dd94
 80094b8:	0802ddb4 	.word	0x0802ddb4
 80094bc:	0802ddd4 	.word	0x0802ddd4
 80094c0:	0802ddf8 	.word	0x0802ddf8
 80094c4:	0802de1c 	.word	0x0802de1c
 80094c8:	0802de40 	.word	0x0802de40
 80094cc:	0802de60 	.word	0x0802de60
 80094d0:	0802de80 	.word	0x0802de80
 80094d4:	0802dea0 	.word	0x0802dea0

		}
		else if ((PIR == ACC) && (PIR < HB) && (PIR < MUTEGPS))
 80094d8:	88ba      	ldrh	r2, [r7, #4]
 80094da:	887b      	ldrh	r3, [r7, #2]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d111      	bne.n	8009504 <minValue4+0x2b0>
 80094e0:	88ba      	ldrh	r2, [r7, #4]
 80094e2:	88fb      	ldrh	r3, [r7, #6]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d20d      	bcs.n	8009504 <minValue4+0x2b0>
 80094e8:	88ba      	ldrh	r2, [r7, #4]
 80094ea:	883b      	ldrh	r3, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d209      	bcs.n	8009504 <minValue4+0x2b0>
		{
			wakeupState = img_acc_pair;
 80094f0:	4b87      	ldr	r3, [pc, #540]	@ (8009710 <minValue4+0x4bc>)
 80094f2:	220e      	movs	r2, #14
 80094f4:	801a      	strh	r2, [r3, #0]
			min = PIR;
 80094f6:	88bb      	ldrh	r3, [r7, #4]
 80094f8:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is img_acc_pair\r\n");
 80094fa:	4986      	ldr	r1, [pc, #536]	@ (8009714 <minValue4+0x4c0>)
 80094fc:	2001      	movs	r0, #1
 80094fe:	f7fd fc39 	bl	8006d74 <TraceSend>
 8009502:	e02e      	b.n	8009562 <minValue4+0x30e>

		}

		else if ((PIR == MUTEGPS) && (PIR < HB) && (PIR < ACC))
 8009504:	88ba      	ldrh	r2, [r7, #4]
 8009506:	883b      	ldrh	r3, [r7, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	d111      	bne.n	8009530 <minValue4+0x2dc>
 800950c:	88ba      	ldrh	r2, [r7, #4]
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	429a      	cmp	r2, r3
 8009512:	d20d      	bcs.n	8009530 <minValue4+0x2dc>
 8009514:	88ba      	ldrh	r2, [r7, #4]
 8009516:	887b      	ldrh	r3, [r7, #2]
 8009518:	429a      	cmp	r2, r3
 800951a:	d209      	bcs.n	8009530 <minValue4+0x2dc>
		{
			wakeupState = img_pGPS_pair;
 800951c:	4b7c      	ldr	r3, [pc, #496]	@ (8009710 <minValue4+0x4bc>)
 800951e:	2211      	movs	r2, #17
 8009520:	801a      	strh	r2, [r3, #0]
			min = PIR;
 8009522:	88bb      	ldrh	r3, [r7, #4]
 8009524:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is img_pGPS_pair\r\n");
 8009526:	497c      	ldr	r1, [pc, #496]	@ (8009718 <minValue4+0x4c4>)
 8009528:	2001      	movs	r0, #1
 800952a:	f7fd fc23 	bl	8006d74 <TraceSend>
 800952e:	e018      	b.n	8009562 <minValue4+0x30e>

		}


		else if ((ACC == MUTEGPS) && (ACC < HB) && (ACC < PIR))
 8009530:	887a      	ldrh	r2, [r7, #2]
 8009532:	883b      	ldrh	r3, [r7, #0]
 8009534:	429a      	cmp	r2, r3
 8009536:	f040 80e0 	bne.w	80096fa <minValue4+0x4a6>
 800953a:	887a      	ldrh	r2, [r7, #2]
 800953c:	88fb      	ldrh	r3, [r7, #6]
 800953e:	429a      	cmp	r2, r3
 8009540:	f080 80db 	bcs.w	80096fa <minValue4+0x4a6>
 8009544:	887a      	ldrh	r2, [r7, #2]
 8009546:	88bb      	ldrh	r3, [r7, #4]
 8009548:	429a      	cmp	r2, r3
 800954a:	f080 80d6 	bcs.w	80096fa <minValue4+0x4a6>
		{
			wakeupState = acc_wu_enabled;
 800954e:	4b70      	ldr	r3, [pc, #448]	@ (8009710 <minValue4+0x4bc>)
 8009550:	2216      	movs	r2, #22
 8009552:	801a      	strh	r2, [r3, #0]
			min = ACC;
 8009554:	887b      	ldrh	r3, [r7, #2]
 8009556:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is acc_wu_enabled\r\n");
 8009558:	4970      	ldr	r1, [pc, #448]	@ (800971c <minValue4+0x4c8>)
 800955a:	2001      	movs	r0, #1
 800955c:	f7fd fc0a 	bl	8006d74 <TraceSend>
		if ((HB < PIR) && (HB < ACC) && (HB < MUTEGPS))
 8009560:	e0cb      	b.n	80096fa <minValue4+0x4a6>
 8009562:	e0ca      	b.n	80096fa <minValue4+0x4a6>
		}



	}
	else if (MuteInit && (!accelMuteInit))
 8009564:	4b6e      	ldr	r3, [pc, #440]	@ (8009720 <minValue4+0x4cc>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d031      	beq.n	80095d0 <minValue4+0x37c>
 800956c:	4b6d      	ldr	r3, [pc, #436]	@ (8009724 <minValue4+0x4d0>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f083 0301 	eor.w	r3, r3, #1
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d02a      	beq.n	80095d0 <minValue4+0x37c>
	{
		if (HB < PIR)
 800957a:	88fa      	ldrh	r2, [r7, #6]
 800957c:	88bb      	ldrh	r3, [r7, #4]
 800957e:	429a      	cmp	r2, r3
 8009580:	d209      	bcs.n	8009596 <minValue4+0x342>
		{
			wakeupState = hb_wu_enabled;
 8009582:	4b63      	ldr	r3, [pc, #396]	@ (8009710 <minValue4+0x4bc>)
 8009584:	2215      	movs	r2, #21
 8009586:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_wu_enabled\r\n");
 800958c:	4966      	ldr	r1, [pc, #408]	@ (8009728 <minValue4+0x4d4>)
 800958e:	2001      	movs	r0, #1
 8009590:	f7fd fbf0 	bl	8006d74 <TraceSend>
		if (HB < PIR)
 8009594:	e0b3      	b.n	80096fe <minValue4+0x4aa>

		}
		else if (PIR < HB)
 8009596:	88ba      	ldrh	r2, [r7, #4]
 8009598:	88fb      	ldrh	r3, [r7, #6]
 800959a:	429a      	cmp	r2, r3
 800959c:	d209      	bcs.n	80095b2 <minValue4+0x35e>
		{
			wakeupState = img_wu_enabled;
 800959e:	4b5c      	ldr	r3, [pc, #368]	@ (8009710 <minValue4+0x4bc>)
 80095a0:	2217      	movs	r2, #23
 80095a2:	801a      	strh	r2, [r3, #0]
			min = PIR;
 80095a4:	88bb      	ldrh	r3, [r7, #4]
 80095a6:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is img_wu_enabled\r\n");
 80095a8:	4960      	ldr	r1, [pc, #384]	@ (800972c <minValue4+0x4d8>)
 80095aa:	2001      	movs	r0, #1
 80095ac:	f7fd fbe2 	bl	8006d74 <TraceSend>
		if (HB < PIR)
 80095b0:	e0a5      	b.n	80096fe <minValue4+0x4aa>

		}
		else if (PIR == HB)
 80095b2:	88ba      	ldrh	r2, [r7, #4]
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	f040 80a1 	bne.w	80096fe <minValue4+0x4aa>
		{
			wakeupState = hb_img_pair;
 80095bc:	4b54      	ldr	r3, [pc, #336]	@ (8009710 <minValue4+0x4bc>)
 80095be:	220c      	movs	r2, #12
 80095c0:	801a      	strh	r2, [r3, #0]
			min = HB;
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_img_pair\r\n");
 80095c6:	495a      	ldr	r1, [pc, #360]	@ (8009730 <minValue4+0x4dc>)
 80095c8:	2001      	movs	r0, #1
 80095ca:	f7fd fbd3 	bl	8006d74 <TraceSend>
		if (HB < PIR)
 80095ce:	e096      	b.n	80096fe <minValue4+0x4aa>

		}
	}

	else if (accelMuteInit && (!MuteInit))
 80095d0:	4b54      	ldr	r3, [pc, #336]	@ (8009724 <minValue4+0x4d0>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8086 	beq.w	80096e6 <minValue4+0x492>
 80095da:	4b51      	ldr	r3, [pc, #324]	@ (8009720 <minValue4+0x4cc>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	f083 0301 	eor.w	r3, r3, #1
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d07e      	beq.n	80096e6 <minValue4+0x492>
	{
		if ((HB == ACC) && (HB == MUTEGPS))
 80095e8:	88fa      	ldrh	r2, [r7, #6]
 80095ea:	887b      	ldrh	r3, [r7, #2]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d10d      	bne.n	800960c <minValue4+0x3b8>
 80095f0:	88fa      	ldrh	r2, [r7, #6]
 80095f2:	883b      	ldrh	r3, [r7, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d109      	bne.n	800960c <minValue4+0x3b8>
		{
			wakeupState = hb_acc_pair;
 80095f8:	4b45      	ldr	r3, [pc, #276]	@ (8009710 <minValue4+0x4bc>)
 80095fa:	220d      	movs	r2, #13
 80095fc:	801a      	strh	r2, [r3, #0]
			min = HB;
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_acc_pair\r\n");
 8009602:	494c      	ldr	r1, [pc, #304]	@ (8009734 <minValue4+0x4e0>)
 8009604:	2001      	movs	r0, #1
 8009606:	f7fd fbb5 	bl	8006d74 <TraceSend>
 800960a:	e06b      	b.n	80096e4 <minValue4+0x490>

		}
		else if ((HB == ACC) && (HB < MUTEGPS))
 800960c:	88fa      	ldrh	r2, [r7, #6]
 800960e:	887b      	ldrh	r3, [r7, #2]
 8009610:	429a      	cmp	r2, r3
 8009612:	d10d      	bne.n	8009630 <minValue4+0x3dc>
 8009614:	88fa      	ldrh	r2, [r7, #6]
 8009616:	883b      	ldrh	r3, [r7, #0]
 8009618:	429a      	cmp	r2, r3
 800961a:	d209      	bcs.n	8009630 <minValue4+0x3dc>
		{
			wakeupState = hb_acc_pair;
 800961c:	4b3c      	ldr	r3, [pc, #240]	@ (8009710 <minValue4+0x4bc>)
 800961e:	220d      	movs	r2, #13
 8009620:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_acc_pair\r\n");
 8009626:	4943      	ldr	r1, [pc, #268]	@ (8009734 <minValue4+0x4e0>)
 8009628:	2001      	movs	r0, #1
 800962a:	f7fd fba3 	bl	8006d74 <TraceSend>
 800962e:	e059      	b.n	80096e4 <minValue4+0x490>
		}
		else if ((HB == MUTEGPS) && (HB < ACC))
 8009630:	88fa      	ldrh	r2, [r7, #6]
 8009632:	883b      	ldrh	r3, [r7, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d10d      	bne.n	8009654 <minValue4+0x400>
 8009638:	88fa      	ldrh	r2, [r7, #6]
 800963a:	887b      	ldrh	r3, [r7, #2]
 800963c:	429a      	cmp	r2, r3
 800963e:	d209      	bcs.n	8009654 <minValue4+0x400>
		{
			wakeupState = hb_pGPS_pair;
 8009640:	4b33      	ldr	r3, [pc, #204]	@ (8009710 <minValue4+0x4bc>)
 8009642:	2210      	movs	r2, #16
 8009644:	801a      	strh	r2, [r3, #0]
			min = HB;
 8009646:	88fb      	ldrh	r3, [r7, #6]
 8009648:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_pGPS_pair\r\n");
 800964a:	493b      	ldr	r1, [pc, #236]	@ (8009738 <minValue4+0x4e4>)
 800964c:	2001      	movs	r0, #1
 800964e:	f7fd fb91 	bl	8006d74 <TraceSend>
 8009652:	e047      	b.n	80096e4 <minValue4+0x490>
		}
		else if ((ACC == MUTEGPS) && (ACC < HB))
 8009654:	887a      	ldrh	r2, [r7, #2]
 8009656:	883b      	ldrh	r3, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d10d      	bne.n	8009678 <minValue4+0x424>
 800965c:	887a      	ldrh	r2, [r7, #2]
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	429a      	cmp	r2, r3
 8009662:	d209      	bcs.n	8009678 <minValue4+0x424>
		{
			wakeupState = acc_wu_enabled;
 8009664:	4b2a      	ldr	r3, [pc, #168]	@ (8009710 <minValue4+0x4bc>)
 8009666:	2216      	movs	r2, #22
 8009668:	801a      	strh	r2, [r3, #0]
			min = ACC;
 800966a:	887b      	ldrh	r3, [r7, #2]
 800966c:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is acc_wu_enabled\r\n");
 800966e:	492b      	ldr	r1, [pc, #172]	@ (800971c <minValue4+0x4c8>)
 8009670:	2001      	movs	r0, #1
 8009672:	f7fd fb7f 	bl	8006d74 <TraceSend>
 8009676:	e035      	b.n	80096e4 <minValue4+0x490>
		}
		else if ((HB < ACC) && (HB < MUTEGPS))
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	887b      	ldrh	r3, [r7, #2]
 800967c:	429a      	cmp	r2, r3
 800967e:	d20d      	bcs.n	800969c <minValue4+0x448>
 8009680:	88fa      	ldrh	r2, [r7, #6]
 8009682:	883b      	ldrh	r3, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d209      	bcs.n	800969c <minValue4+0x448>
		{
			wakeupState = hb_wu_enabled;
 8009688:	4b21      	ldr	r3, [pc, #132]	@ (8009710 <minValue4+0x4bc>)
 800968a:	2215      	movs	r2, #21
 800968c:	801a      	strh	r2, [r3, #0]
			min = HB;
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is hb_wu_enabled\r\n");
 8009692:	4925      	ldr	r1, [pc, #148]	@ (8009728 <minValue4+0x4d4>)
 8009694:	2001      	movs	r0, #1
 8009696:	f7fd fb6d 	bl	8006d74 <TraceSend>
 800969a:	e023      	b.n	80096e4 <minValue4+0x490>
		}
		else if ((ACC < HB) && (ACC < MUTEGPS))
 800969c:	887a      	ldrh	r2, [r7, #2]
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d20d      	bcs.n	80096c0 <minValue4+0x46c>
 80096a4:	887a      	ldrh	r2, [r7, #2]
 80096a6:	883b      	ldrh	r3, [r7, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d209      	bcs.n	80096c0 <minValue4+0x46c>
		{
			wakeupState = acc_wu_enabled;
 80096ac:	4b18      	ldr	r3, [pc, #96]	@ (8009710 <minValue4+0x4bc>)
 80096ae:	2216      	movs	r2, #22
 80096b0:	801a      	strh	r2, [r3, #0]
			min = ACC;
 80096b2:	887b      	ldrh	r3, [r7, #2]
 80096b4:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is acc_wu_enabled\r\n");
 80096b6:	4919      	ldr	r1, [pc, #100]	@ (800971c <minValue4+0x4c8>)
 80096b8:	2001      	movs	r0, #1
 80096ba:	f7fd fb5b 	bl	8006d74 <TraceSend>
 80096be:	e011      	b.n	80096e4 <minValue4+0x490>
		}
		else if ((MUTEGPS < HB) && (MUTEGPS < ACC))
 80096c0:	883a      	ldrh	r2, [r7, #0]
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d21c      	bcs.n	8009702 <minValue4+0x4ae>
 80096c8:	883a      	ldrh	r2, [r7, #0]
 80096ca:	887b      	ldrh	r3, [r7, #2]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d218      	bcs.n	8009702 <minValue4+0x4ae>
		{
			wakeupState = pGPS_wu_enabled;
 80096d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009710 <minValue4+0x4bc>)
 80096d2:	2218      	movs	r2, #24
 80096d4:	801a      	strh	r2, [r3, #0]
			min = MUTEGPS;
 80096d6:	883b      	ldrh	r3, [r7, #0]
 80096d8:	81fb      	strh	r3, [r7, #14]
			PRINTF("WakeupState is pGPS_wu_enabled\r\n");
 80096da:	4918      	ldr	r1, [pc, #96]	@ (800973c <minValue4+0x4e8>)
 80096dc:	2001      	movs	r0, #1
 80096de:	f7fd fb49 	bl	8006d74 <TraceSend>
		if ((HB == ACC) && (HB == MUTEGPS))
 80096e2:	e00e      	b.n	8009702 <minValue4+0x4ae>
 80096e4:	e00d      	b.n	8009702 <minValue4+0x4ae>
		}

	}
	else
	{
		wakeupState = hb_wu_enabled;
 80096e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <minValue4+0x4bc>)
 80096e8:	2215      	movs	r2, #21
 80096ea:	801a      	strh	r2, [r3, #0]
		min = HB;
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	81fb      	strh	r3, [r7, #14]
		PRINTF("WakeupState is hb_wu_enabled\r\n");
 80096f0:	490d      	ldr	r1, [pc, #52]	@ (8009728 <minValue4+0x4d4>)
 80096f2:	2001      	movs	r0, #1
 80096f4:	f7fd fb3e 	bl	8006d74 <TraceSend>
 80096f8:	e004      	b.n	8009704 <minValue4+0x4b0>
		if ((HB < PIR) && (HB < ACC) && (HB < MUTEGPS))
 80096fa:	bf00      	nop
 80096fc:	e002      	b.n	8009704 <minValue4+0x4b0>
		if (HB < PIR)
 80096fe:	bf00      	nop
 8009700:	e000      	b.n	8009704 <minValue4+0x4b0>
		if ((HB == ACC) && (HB == MUTEGPS))
 8009702:	bf00      	nop
	}

	return min;
 8009704:	89fb      	ldrh	r3, [r7, #14]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	bd90      	pop	{r4, r7, pc}
 800970e:	bf00      	nop
 8009710:	2007a27e 	.word	0x2007a27e
 8009714:	0802de60 	.word	0x0802de60
 8009718:	0802dec0 	.word	0x0802dec0
 800971c:	0802ddb4 	.word	0x0802ddb4
 8009720:	2007a272 	.word	0x2007a272
 8009724:	2007a273 	.word	0x2007a273
 8009728:	0802dd74 	.word	0x0802dd74
 800972c:	0802dd94 	.word	0x0802dd94
 8009730:	0802de80 	.word	0x0802de80
 8009734:	0802de40 	.word	0x0802de40
 8009738:	0802dea0 	.word	0x0802dea0
 800973c:	0802ddd4 	.word	0x0802ddd4

08009740 <decodeCommand>:
 * @brief  Decodes control commands
 * @note   Expand in the future to provide several tones and also move to a Buzzer.c file
 * @retval null
 */
bool decodeCommand(uint8_t *msg, char *testStr)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	f5ad 6d7b 	sub.w	sp, sp, #4016	@ 0xfb0
 8009746:	af00      	add	r7, sp, #0
 8009748:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800974c:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 8009750:	6018      	str	r0, [r3, #0]
 8009752:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 8009756:	f5a3 637b 	sub.w	r3, r3, #4016	@ 0xfb0
 800975a:	6019      	str	r1, [r3, #0]
	bool retError = true;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3faf 	strb.w	r3, [r7, #4015]	@ 0xfaf
	char tempBuff[MEMORY_MAX] = " ";
 8009762:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 8009766:	f6a3 73a8 	subw	r3, r3, #4008	@ 0xfa8
 800976a:	2220      	movs	r2, #32
 800976c:	601a      	str	r2, [r3, #0]
 800976e:	3304      	adds	r3, #4
 8009770:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8009774:	2100      	movs	r1, #0
 8009776:	4618      	mov	r0, r3
 8009778:	f01d fcfa 	bl	8027170 <memset>

	// Transfer MQTT message to a local buffer as not to interfere with the original mqtt message
	Word_Transfer(tempBuff, (char*)msg);
 800977c:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 8009780:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 8009784:	f107 0208 	add.w	r2, r7, #8
 8009788:	6819      	ldr	r1, [r3, #0]
 800978a:	4610      	mov	r0, r2
 800978c:	f7fc ffd2 	bl	8006734 <Word_Transfer>

	char *storeStr = strstr(tempBuff, testStr);
 8009790:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 8009794:	f5a3 637b 	sub.w	r3, r3, #4016	@ 0xfb0
 8009798:	f107 0208 	add.w	r2, r7, #8
 800979c:	6819      	ldr	r1, [r3, #0]
 800979e:	4610      	mov	r0, r2
 80097a0:	f01d fd6b 	bl	802727a <strstr>
 80097a4:	f8c7 0fa8 	str.w	r0, [r7, #4008]	@ 0xfa8
	if(storeStr)
 80097a8:	f8d7 3fa8 	ldr.w	r3, [r7, #4008]	@ 0xfa8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d002      	beq.n	80097b6 <decodeCommand+0x76>
	{
		retError = false;
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 3faf 	strb.w	r3, [r7, #4015]	@ 0xfaf
	}

	return retError;
 80097b6:	f897 3faf 	ldrb.w	r3, [r7, #4015]	@ 0xfaf
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	f507 677b 	add.w	r7, r7, #4016	@ 0xfb0
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <chargeCableReading>:
 * @brief  gets the state of the charger cable; unplugged is false
 * @note   move to a battery.c file
 * @retval boolean state , false is unplugged, true is connected to power
 */
bool chargeCableReading(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
	return (Is_Pin_Low( nExt_Power_GPIO_Port , nExt_Power_Pin ));
 80097c8:	2140      	movs	r1, #64	@ 0x40
 80097ca:	4805      	ldr	r0, [pc, #20]	@ (80097e0 <chargeCableReading+0x1c>)
 80097cc:	f010 fcca 	bl	801a164 <HAL_GPIO_ReadPin>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bf0c      	ite	eq
 80097d6:	2301      	moveq	r3, #1
 80097d8:	2300      	movne	r3, #0
 80097da:	b2db      	uxtb	r3, r3
}
 80097dc:	4618      	mov	r0, r3
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	42020400 	.word	0x42020400

080097e4 <gpsParametersInit>:
char gpsLocationBuff[GPS_SIZE] = "";
bool gpsError = true;
bool gpsBoot = true;
/************************ Public Function Definitions ************************/
void gpsParametersInit(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
	privateGpsParameters.alarmSamplePeriod = DEFAULT_GPS_ALARM_SAMPLE_PERIOD;
 80097e8:	4b0c      	ldr	r3, [pc, #48]	@ (800981c <gpsParametersInit+0x38>)
 80097ea:	22b4      	movs	r2, #180	@ 0xb4
 80097ec:	805a      	strh	r2, [r3, #2]
	privateGpsParameters.alarmTime = DEFAULT_GPS_ALARM_TIME;
 80097ee:	4b0b      	ldr	r3, [pc, #44]	@ (800981c <gpsParametersInit+0x38>)
 80097f0:	f44f 5261 	mov.w	r2, #14400	@ 0x3840
 80097f4:	809a      	strh	r2, [r3, #4]
	privateGpsParameters.geofenceDistance = DEFAULT_GPS_GEOFENCE;
 80097f6:	4b09      	ldr	r3, [pc, #36]	@ (800981c <gpsParametersInit+0x38>)
 80097f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80097fc:	811a      	strh	r2, [r3, #8]
	privateGpsParameters.gpsInterval = DEFAULT_GPS_INTERVAL;
 80097fe:	4b07      	ldr	r3, [pc, #28]	@ (800981c <gpsParametersInit+0x38>)
 8009800:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8009804:	80da      	strh	r2, [r3, #6]
	privateGpsParameters.mode = DEFAULT_GPS_MODE;
 8009806:	4b05      	ldr	r3, [pc, #20]	@ (800981c <gpsParametersInit+0x38>)
 8009808:	2207      	movs	r2, #7
 800980a:	701a      	strb	r2, [r3, #0]
	privateGpsParameters.movementHysteresis = DEFAULT_GPS_HYSTERESIS;
 800980c:	4b03      	ldr	r3, [pc, #12]	@ (800981c <gpsParametersInit+0x38>)
 800980e:	2296      	movs	r2, #150	@ 0x96
 8009810:	815a      	strh	r2, [r3, #10]
}
 8009812:	bf00      	nop
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	2007a280 	.word	0x2007a280

08009820 <gpsDataInit>:

void gpsDataInit(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
	privateGpsData.CurrentPosition.latitude = 0.0;
 8009824:	4b1b      	ldr	r3, [pc, #108]	@ (8009894 <gpsDataInit+0x74>)
 8009826:	f04f 0200 	mov.w	r2, #0
 800982a:	635a      	str	r2, [r3, #52]	@ 0x34
	privateGpsData.CurrentPosition.longitude = 0.0;
 800982c:	4b19      	ldr	r3, [pc, #100]	@ (8009894 <gpsDataInit+0x74>)
 800982e:	f04f 0200 	mov.w	r2, #0
 8009832:	639a      	str	r2, [r3, #56]	@ 0x38
	privateGpsData.LastPosition.latitude = 0.0;
 8009834:	4b17      	ldr	r3, [pc, #92]	@ (8009894 <gpsDataInit+0x74>)
 8009836:	f04f 0200 	mov.w	r2, #0
 800983a:	63da      	str	r2, [r3, #60]	@ 0x3c
	privateGpsData.LastPosition.longitude = 0.0;
 800983c:	4b15      	ldr	r3, [pc, #84]	@ (8009894 <gpsDataInit+0x74>)
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	641a      	str	r2, [r3, #64]	@ 0x40
	privateGpsData.HDOP = 0.0;
 8009844:	4b13      	ldr	r3, [pc, #76]	@ (8009894 <gpsDataInit+0x74>)
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	60da      	str	r2, [r3, #12]
	strncpy(privateGpsData.UTC, "\0", sizeof(privateGpsData.UTC));
 800984c:	220b      	movs	r2, #11
 800984e:	4912      	ldr	r1, [pc, #72]	@ (8009898 <gpsDataInit+0x78>)
 8009850:	4810      	ldr	r0, [pc, #64]	@ (8009894 <gpsDataInit+0x74>)
 8009852:	f01d fcd4 	bl	80271fe <strncpy>
	strncpy(privateGpsData.date, "\0", sizeof(privateGpsData.date));
 8009856:	2207      	movs	r2, #7
 8009858:	490f      	ldr	r1, [pc, #60]	@ (8009898 <gpsDataInit+0x78>)
 800985a:	4810      	ldr	r0, [pc, #64]	@ (800989c <gpsDataInit+0x7c>)
 800985c:	f01d fccf 	bl	80271fe <strncpy>
	strncpy(privateGpsData.COG, "\0", sizeof(privateGpsData.COG));
 8009860:	2207      	movs	r2, #7
 8009862:	490d      	ldr	r1, [pc, #52]	@ (8009898 <gpsDataInit+0x78>)
 8009864:	480e      	ldr	r0, [pc, #56]	@ (80098a0 <gpsDataInit+0x80>)
 8009866:	f01d fcca 	bl	80271fe <strncpy>
	privateGpsData.altitude = 0.0;
 800986a:	4b0a      	ldr	r3, [pc, #40]	@ (8009894 <gpsDataInit+0x74>)
 800986c:	f04f 0200 	mov.w	r2, #0
 8009870:	611a      	str	r2, [r3, #16]
	privateGpsData.fix = 0;
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <gpsDataInit+0x74>)
 8009874:	2200      	movs	r2, #0
 8009876:	615a      	str	r2, [r3, #20]
	privateGpsData.nsat = 0;
 8009878:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <gpsDataInit+0x74>)
 800987a:	2200      	movs	r2, #0
 800987c:	631a      	str	r2, [r3, #48]	@ 0x30
	privateGpsData.spkm = 0.0;
 800987e:	4b05      	ldr	r3, [pc, #20]	@ (8009894 <gpsDataInit+0x74>)
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	621a      	str	r2, [r3, #32]
	privateGpsData.spkn = 0.0;
 8009886:	4b03      	ldr	r3, [pc, #12]	@ (8009894 <gpsDataInit+0x74>)
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800988e:	bf00      	nop
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	2007a28c 	.word	0x2007a28c
 8009898:	0802dee0 	.word	0x0802dee0
 800989c:	2007a2b4 	.word	0x2007a2b4
 80098a0:	2007a2a4 	.word	0x2007a2a4

080098a4 <getGpsParameters>:

// Function to get GPS parameters
void getGpsParameters(GPS_PARAMETER_TYPE *extGpsParameters)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
	extGpsParameters->alarmSamplePeriod = privateGpsParameters.alarmSamplePeriod;
 80098ac:	4b0e      	ldr	r3, [pc, #56]	@ (80098e8 <getGpsParameters+0x44>)
 80098ae:	885a      	ldrh	r2, [r3, #2]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	805a      	strh	r2, [r3, #2]
	extGpsParameters->alarmTime = privateGpsParameters.alarmTime;
 80098b4:	4b0c      	ldr	r3, [pc, #48]	@ (80098e8 <getGpsParameters+0x44>)
 80098b6:	889a      	ldrh	r2, [r3, #4]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	809a      	strh	r2, [r3, #4]
	extGpsParameters->geofenceDistance = privateGpsParameters.geofenceDistance;
 80098bc:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <getGpsParameters+0x44>)
 80098be:	891a      	ldrh	r2, [r3, #8]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	811a      	strh	r2, [r3, #8]
	extGpsParameters->gpsInterval = privateGpsParameters.gpsInterval;
 80098c4:	4b08      	ldr	r3, [pc, #32]	@ (80098e8 <getGpsParameters+0x44>)
 80098c6:	88da      	ldrh	r2, [r3, #6]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	80da      	strh	r2, [r3, #6]
	extGpsParameters->mode = privateGpsParameters.mode;
 80098cc:	4b06      	ldr	r3, [pc, #24]	@ (80098e8 <getGpsParameters+0x44>)
 80098ce:	781a      	ldrb	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	701a      	strb	r2, [r3, #0]
	extGpsParameters->movementHysteresis = privateGpsParameters.movementHysteresis;
 80098d4:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <getGpsParameters+0x44>)
 80098d6:	895a      	ldrh	r2, [r3, #10]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	815a      	strh	r2, [r3, #10]
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	2007a280 	.word	0x2007a280

080098ec <setGpsParameters>:

// Function to set GPS parameters
void setGpsParameters(GPS_PARAMETER_TYPE extGpsParameters)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	1d3b      	adds	r3, r7, #4
 80098f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	privateGpsParameters.alarmSamplePeriod = extGpsParameters.alarmSamplePeriod;
 80098f8:	88fa      	ldrh	r2, [r7, #6]
 80098fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009934 <setGpsParameters+0x48>)
 80098fc:	805a      	strh	r2, [r3, #2]
	privateGpsParameters.alarmTime = extGpsParameters.alarmTime;
 80098fe:	893a      	ldrh	r2, [r7, #8]
 8009900:	4b0c      	ldr	r3, [pc, #48]	@ (8009934 <setGpsParameters+0x48>)
 8009902:	809a      	strh	r2, [r3, #4]
	privateGpsParameters.geofenceDistance = extGpsParameters.geofenceDistance;
 8009904:	89ba      	ldrh	r2, [r7, #12]
 8009906:	4b0b      	ldr	r3, [pc, #44]	@ (8009934 <setGpsParameters+0x48>)
 8009908:	811a      	strh	r2, [r3, #8]
	privateGpsParameters.gpsInterval = extGpsParameters.gpsInterval;
 800990a:	897a      	ldrh	r2, [r7, #10]
 800990c:	4b09      	ldr	r3, [pc, #36]	@ (8009934 <setGpsParameters+0x48>)
 800990e:	80da      	strh	r2, [r3, #6]
	privateGpsParameters.mode = extGpsParameters.mode;
 8009910:	793a      	ldrb	r2, [r7, #4]
 8009912:	4b08      	ldr	r3, [pc, #32]	@ (8009934 <setGpsParameters+0x48>)
 8009914:	701a      	strb	r2, [r3, #0]
	privateGpsParameters.movementHysteresis = extGpsParameters.movementHysteresis;
 8009916:	89fa      	ldrh	r2, [r7, #14]
 8009918:	4b06      	ldr	r3, [pc, #24]	@ (8009934 <setGpsParameters+0x48>)
 800991a:	815a      	strh	r2, [r3, #10]

	PRINTF("Set GPS mode is %d\r\n", privateGpsParameters.mode);
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <setGpsParameters+0x48>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	461a      	mov	r2, r3
 8009922:	4905      	ldr	r1, [pc, #20]	@ (8009938 <setGpsParameters+0x4c>)
 8009924:	2001      	movs	r0, #1
 8009926:	f7fd fa25 	bl	8006d74 <TraceSend>
}
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	2007a280 	.word	0x2007a280
 8009938:	0802dee4 	.word	0x0802dee4

0800993c <GPSIntToFloat>:
	bool isEnabled = privateGpsParameters.mode & 0x04;
	return isEnabled;
}

float GPSIntToFloat (int32_t positionInt)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	int divider = 100000;
 8009944:	4b09      	ldr	r3, [pc, #36]	@ (800996c <GPSIntToFloat+0x30>)
 8009946:	60fb      	str	r3, [r7, #12]

	//test values below
	//Data_Ptr->LastPosition.latitudeInt = 3429648;
	//Data_Ptr->LastPosition.longitudeInt  = 9565477;
	positionInt = 9565477;
 8009948:	4b09      	ldr	r3, [pc, #36]	@ (8009970 <GPSIntToFloat+0x34>)
 800994a:	607b      	str	r3, [r7, #4]

	//Data_Ptr->LastPosition.latitude = (float)Data_Ptr->LastPosition.latitudeInt / divider;
	//Data_Ptr->LastPosition.longitude = (float)Data_Ptr->LastPosition.longitudeInt / divider;

	return (float)(positionInt/ divider);
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	fb92 f3f3 	sdiv	r3, r2, r3
 8009954:	ee07 3a90 	vmov	s15, r3
 8009958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800995c:	eeb0 0a67 	vmov.f32	s0, s15
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	000186a0 	.word	0x000186a0
 8009970:	0091f525 	.word	0x0091f525

08009974 <GPSFloatToInt>:

//GAV need to handle negative values
int32_t GPSFloatToInt (float position)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t multiplier = 100000;
 800997e:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <GPSFloatToInt+0x40>)
 8009980:	60fb      	str	r3, [r7, #12]
	//	convert out the decimal

	//test values below
	//Data_Ptr->LastPosition.latitude = 33.29647;
	//Data_Ptr->LastPosition.longitude  = -97.65473;
	position = -97.65473;
 8009982:	4b0d      	ldr	r3, [pc, #52]	@ (80099b8 <GPSFloatToInt+0x44>)
 8009984:	607b      	str	r3, [r7, #4]

	float posInt = position * multiplier;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	ee07 3a90 	vmov	s15, r3
 800998c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009990:	ed97 7a01 	vldr	s14, [r7, #4]
 8009994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009998:	edc7 7a02 	vstr	s15, [r7, #8]
	//float lonbuf = Data_Ptr->LastPosition.longitude * multiplier;

	//truncate
	//Data_Ptr->LastPosition.latitudeInt = (int)latbuf;
	//Data_Ptr->LastPosition.longitudeInt = (int)lonbuf;
	return (int32_t)posInt;
 800999c:	edd7 7a02 	vldr	s15, [r7, #8]
 80099a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099a4:	ee17 3a90 	vmov	r3, s15

}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	000186a0 	.word	0x000186a0
 80099b8:	c2c34f39 	.word	0xc2c34f39

080099bc <decodeGPSConfigs>:

bool decodeGPSConfigs(uint8_t *mqttMsg)
{
 80099bc:	b5b0      	push	{r4, r5, r7, lr}
 80099be:	f5ad 5d84 	sub.w	sp, sp, #4224	@ 0x1080
 80099c2:	af04      	add	r7, sp, #16
 80099c4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80099c8:	f843 0c6c 	str.w	r0, [r3, #-108]
	bool isError = false;
 80099cc:	2300      	movs	r3, #0
 80099ce:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80099d2:	f102 020f 	add.w	r2, r2, #15
 80099d6:	7013      	strb	r3, [r2, #0]
	uint8_t version = 255;
 80099d8:	23ff      	movs	r3, #255	@ 0xff
 80099da:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80099de:	f102 0207 	add.w	r2, r2, #7
 80099e2:	7013      	strb	r3, [r2, #0]
	uint8_t mode = 255;
 80099e4:	23ff      	movs	r3, #255	@ 0xff
 80099e6:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80099ea:	f102 0206 	add.w	r2, r2, #6
 80099ee:	7013      	strb	r3, [r2, #0]
	uint16_t acPeriod = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80099f6:	f102 0204 	add.w	r2, r2, #4
 80099fa:	8013      	strh	r3, [r2, #0]
	uint16_t distance = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009a02:	f102 020c 	add.w	r2, r2, #12
 8009a06:	8013      	strh	r3, [r2, #0]
	uint16_t alarmWindow = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009a0e:	f102 0202 	add.w	r2, r2, #2
 8009a12:	8013      	strh	r3, [r2, #0]
	uint16_t alarmSample = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009a1a:	8013      	strh	r3, [r2, #0]
	uint16_t hysteresis = 0;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009a22:	f102 021e 	add.w	r2, r2, #30
 8009a26:	8013      	strh	r3, [r2, #0]
	GPS_PARAMETER_TYPE decodedGpsParams;
	char Buff[MEMORY_MAX] = " ";
 8009a28:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a2c:	f103 0310 	add.w	r3, r3, #16
 8009a30:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 8009a34:	2220      	movs	r2, #32
 8009a36:	601a      	str	r2, [r3, #0]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8009a3e:	2100      	movs	r1, #0
 8009a40:	4618      	mov	r0, r3
 8009a42:	f01d fb95 	bl	8027170 <memset>
	char test [] = "\"gps\":{";
 8009a46:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a4a:	f103 0310 	add.w	r3, r3, #16
 8009a4e:	f6a3 73e4 	subw	r3, r3, #4068	@ 0xfe4
 8009a52:	4aa7      	ldr	r2, [pc, #668]	@ (8009cf0 <decodeGPSConfigs+0x334>)
 8009a54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a58:	e883 0003 	stmia.w	r3, {r0, r1}
	char verTest[] = "\"version\":";
 8009a5c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a60:	f103 0310 	add.w	r3, r3, #16
 8009a64:	f5a3 637f 	sub.w	r3, r3, #4080	@ 0xff0
 8009a68:	4aa2      	ldr	r2, [pc, #648]	@ (8009cf4 <decodeGPSConfigs+0x338>)
 8009a6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a6c:	c303      	stmia	r3!, {r0, r1}
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	3302      	adds	r3, #2
 8009a72:	0c12      	lsrs	r2, r2, #16
 8009a74:	701a      	strb	r2, [r3, #0]
	char modeTest [] = "\"mode\":";
 8009a76:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009a7a:	f103 0310 	add.w	r3, r3, #16
 8009a7e:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8009a82:	4a9d      	ldr	r2, [pc, #628]	@ (8009cf8 <decodeGPSConfigs+0x33c>)
 8009a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a88:	e883 0003 	stmia.w	r3, {r0, r1}
	char acPeriodTest [] = "\"gps_acquisition_period\":";
 8009a8c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009a90:	4a9a      	ldr	r2, [pc, #616]	@ (8009cfc <decodeGPSConfigs+0x340>)
 8009a92:	f1a3 0414 	sub.w	r4, r3, #20
 8009a96:	4615      	mov	r5, r2
 8009a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009aa0:	c403      	stmia	r4!, {r0, r1}
 8009aa2:	8022      	strh	r2, [r4, #0]
	char geoDistTest [] = "\"threshold_distance\":";
 8009aa4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009aa8:	4a95      	ldr	r2, [pc, #596]	@ (8009d00 <decodeGPSConfigs+0x344>)
 8009aaa:	f1a3 042c 	sub.w	r4, r3, #44	@ 0x2c
 8009aae:	4615      	mov	r5, r2
 8009ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ab4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ab8:	6020      	str	r0, [r4, #0]
 8009aba:	3404      	adds	r4, #4
 8009abc:	8021      	strh	r1, [r4, #0]
	char alarmWindowTest [] = "\"alarm_window\":";
 8009abe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009ac2:	4a90      	ldr	r2, [pc, #576]	@ (8009d04 <decodeGPSConfigs+0x348>)
 8009ac4:	f1a3 043c 	sub.w	r4, r3, #60	@ 0x3c
 8009ac8:	4613      	mov	r3, r2
 8009aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char alarmSampleTest [] = "\"alarm_sample_period\":";
 8009ad0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009ad4:	4a8c      	ldr	r2, [pc, #560]	@ (8009d08 <decodeGPSConfigs+0x34c>)
 8009ad6:	f1a3 0454 	sub.w	r4, r3, #84	@ 0x54
 8009ada:	4615      	mov	r5, r2
 8009adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ae0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ae4:	6020      	str	r0, [r4, #0]
 8009ae6:	3404      	adds	r4, #4
 8009ae8:	8021      	strh	r1, [r4, #0]
 8009aea:	3402      	adds	r4, #2
 8009aec:	0c0b      	lsrs	r3, r1, #16
 8009aee:	7023      	strb	r3, [r4, #0]
	char hysteresisTest [] = "\"hysteresis\":";
 8009af0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009af4:	4a85      	ldr	r2, [pc, #532]	@ (8009d0c <decodeGPSConfigs+0x350>)
 8009af6:	f1a3 0464 	sub.w	r4, r3, #100	@ 0x64
 8009afa:	4613      	mov	r3, r2
 8009afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009afe:	c407      	stmia	r4!, {r0, r1, r2}
 8009b00:	8023      	strh	r3, [r4, #0]

	// Transfer MQTT message to a local buffer
	Word_Transfer(Buff, (char*)mqttMsg);
 8009b02:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009b06:	461a      	mov	r2, r3
 8009b08:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009b0c:	f852 1c6c 	ldr.w	r1, [r2, #-108]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fc fe0f 	bl	8006734 <Word_Transfer>

	char *substr = strstr(Buff, test);
 8009b16:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8009b1a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f01d fbaa 	bl	802727a <strstr>
 8009b26:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009b2a:	f103 0318 	add.w	r3, r3, #24
 8009b2e:	6018      	str	r0, [r3, #0]
	Refresh_Watchdog;
 8009b30:	4877      	ldr	r0, [pc, #476]	@ (8009d10 <decodeGPSConfigs+0x354>)
 8009b32:	f011 fb4e 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <decodeGPSConfigs+0x184>
 8009b3c:	f00b fe2a 	bl	8015794 <Error_Handler>
	if(substr && !isError)
 8009b40:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009b44:	f103 0318 	add.w	r3, r3, #24
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 835e 	beq.w	800a20c <decodeGPSConfigs+0x850>
 8009b50:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009b54:	f103 030f 	add.w	r3, r3, #15
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	f083 0301 	eor.w	r3, r3, #1
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 8353 	beq.w	800a20c <decodeGPSConfigs+0x850>
	{
		char *verStr = strstr(substr, verTest);
 8009b66:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009b70:	f103 0318 	add.w	r3, r3, #24
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f01d fb80 	bl	802727a <strstr>
 8009b7a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009b7e:	f103 0314 	add.w	r3, r3, #20
 8009b82:	6018      	str	r0, [r3, #0]
		if(verStr && !isError)
 8009b84:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009b88:	f103 0314 	add.w	r3, r3, #20
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	f000 8334 	beq.w	800a1fc <decodeGPSConfigs+0x840>
 8009b94:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009b98:	f103 030f 	add.w	r3, r3, #15
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	f083 0301 	eor.w	r3, r3, #1
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 8329 	beq.w	800a1fc <decodeGPSConfigs+0x840>
		{
			Refresh_Watchdog;
 8009baa:	4859      	ldr	r0, [pc, #356]	@ (8009d10 <decodeGPSConfigs+0x354>)
 8009bac:	f011 fb11 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <decodeGPSConfigs+0x1fe>
 8009bb6:	f00b fded 	bl	8015794 <Error_Handler>
			verStr += strlen(verTest);
 8009bba:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f6 fb64 	bl	800028c <strlen>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009bca:	f103 0314 	add.w	r3, r3, #20
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009bd6:	f102 0214 	add.w	r2, r2, #20
 8009bda:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 8009bdc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009be0:	f103 0314 	add.w	r3, r3, #20
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	3301      	adds	r3, #1
 8009bea:	4a4a      	ldr	r2, [pc, #296]	@ (8009d14 <decodeGPSConfigs+0x358>)
 8009bec:	4413      	add	r3, r2
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 82f9 	beq.w	800a1ec <decodeGPSConfigs+0x830>
			{
				version = atoi(verStr);
 8009bfa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009bfe:	f103 0314 	add.w	r3, r3, #20
 8009c02:	6818      	ldr	r0, [r3, #0]
 8009c04:	f01b fb6a 	bl	80252dc <atoi>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009c0e:	f102 0207 	add.w	r2, r2, #7
 8009c12:	7013      	strb	r3, [r2, #0]
				if(version == 0)
 8009c14:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009c18:	f103 0307 	add.w	r3, r3, #7
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f040 82d3 	bne.w	800a1ca <decodeGPSConfigs+0x80e>
				{
					char *modeStr = strstr(substr, modeTest);
 8009c24:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009c28:	4619      	mov	r1, r3
 8009c2a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c2e:	f103 0318 	add.w	r3, r3, #24
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	f01d fb21 	bl	802727a <strstr>
 8009c38:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c3c:	f103 0310 	add.w	r3, r3, #16
 8009c40:	6018      	str	r0, [r3, #0]
					if(modeStr && !isError)
 8009c42:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c46:	f103 0310 	add.w	r3, r3, #16
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d063      	beq.n	8009d18 <decodeGPSConfigs+0x35c>
 8009c50:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009c54:	f103 030f 	add.w	r3, r3, #15
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	f083 0301 	eor.w	r3, r3, #1
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d059      	beq.n	8009d18 <decodeGPSConfigs+0x35c>
					{
						modeStr += strlen(modeTest);
 8009c64:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7f6 fb0f 	bl	800028c <strlen>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c74:	f103 0310 	add.w	r3, r3, #16
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009c80:	f102 0210 	add.w	r2, r2, #16
 8009c84:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)modeStr[0]))
 8009c86:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c8a:	f103 0310 	add.w	r3, r3, #16
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	4a1f      	ldr	r2, [pc, #124]	@ (8009d14 <decodeGPSConfigs+0x358>)
 8009c96:	4413      	add	r3, r2
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01f      	beq.n	8009ce2 <decodeGPSConfigs+0x326>
						{
							Refresh_Watchdog;
 8009ca2:	481b      	ldr	r0, [pc, #108]	@ (8009d10 <decodeGPSConfigs+0x354>)
 8009ca4:	f011 fa95 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <decodeGPSConfigs+0x2f6>
 8009cae:	f00b fd71 	bl	8015794 <Error_Handler>
							mode = atoi(modeStr);
 8009cb2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009cb6:	f103 0310 	add.w	r3, r3, #16
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	f01b fb0e 	bl	80252dc <atoi>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009cc6:	f102 0206 	add.w	r2, r2, #6
 8009cca:	7013      	strb	r3, [r2, #0]
							if(mode >= 0 && mode <= 255)
							{
								decodedGpsParams.mode = mode;
 8009ccc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009cd0:	f103 0306 	add.w	r3, r3, #6
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009cda:	f102 0214 	add.w	r2, r2, #20
 8009cde:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)modeStr[0]))
 8009ce0:	e020      	b.n	8009d24 <decodeGPSConfigs+0x368>
								PRINTF("GPS mode is out of range [0-255]: %d\r\n", mode);
							}
						}
						else
						{
							isError = true;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009ce8:	f102 020f 	add.w	r2, r2, #15
 8009cec:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)modeStr[0]))
 8009cee:	e019      	b.n	8009d24 <decodeGPSConfigs+0x368>
 8009cf0:	0802dff8 	.word	0x0802dff8
 8009cf4:	0802e000 	.word	0x0802e000
 8009cf8:	0802e00c 	.word	0x0802e00c
 8009cfc:	0802e014 	.word	0x0802e014
 8009d00:	0802e030 	.word	0x0802e030
 8009d04:	0802e048 	.word	0x0802e048
 8009d08:	0802e058 	.word	0x0802e058
 8009d0c:	0802e070 	.word	0x0802e070
 8009d10:	2007d0bc 	.word	0x2007d0bc
 8009d14:	0803031d 	.word	0x0803031d
							//"Invalid data type for mode"
						}
					}
					else
					{
						isError = true;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009d1e:	f102 020f 	add.w	r2, r2, #15
 8009d22:	7013      	strb	r3, [r2, #0]
						//"Mode not found in GPS message"
					}

					char *acPeriodStr = strstr(substr, acPeriodTest);
 8009d24:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009d28:	3b14      	subs	r3, #20
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d30:	f103 0318 	add.w	r3, r3, #24
 8009d34:	6818      	ldr	r0, [r3, #0]
 8009d36:	f01d faa0 	bl	802727a <strstr>
 8009d3a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d3e:	f103 030c 	add.w	r3, r3, #12
 8009d42:	6018      	str	r0, [r3, #0]
					Refresh_Watchdog;
 8009d44:	48a5      	ldr	r0, [pc, #660]	@ (8009fdc <decodeGPSConfigs+0x620>)
 8009d46:	f011 fa44 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d001      	beq.n	8009d54 <decodeGPSConfigs+0x398>
 8009d50:	f00b fd20 	bl	8015794 <Error_Handler>
					if(acPeriodStr && !isError)
 8009d54:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d58:	f103 030c 	add.w	r3, r3, #12
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d050      	beq.n	8009e04 <decodeGPSConfigs+0x448>
 8009d62:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009d66:	f103 030f 	add.w	r3, r3, #15
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f083 0301 	eor.w	r3, r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d046      	beq.n	8009e04 <decodeGPSConfigs+0x448>
					{
						Refresh_Watchdog;
 8009d76:	4899      	ldr	r0, [pc, #612]	@ (8009fdc <decodeGPSConfigs+0x620>)
 8009d78:	f011 fa2b 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d001      	beq.n	8009d86 <decodeGPSConfigs+0x3ca>
 8009d82:	f00b fd07 	bl	8015794 <Error_Handler>
						acPeriodStr += strlen(acPeriodTest);
 8009d86:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8009d8a:	3b14      	subs	r3, #20
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 fa7d 	bl	800028c <strlen>
 8009d92:	4602      	mov	r2, r0
 8009d94:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d98:	f103 030c 	add.w	r3, r3, #12
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009da4:	f102 020c 	add.w	r2, r2, #12
 8009da8:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)acPeriodStr[0]))
 8009daa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009dae:	f103 030c 	add.w	r3, r3, #12
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	3301      	adds	r3, #1
 8009db8:	4a89      	ldr	r2, [pc, #548]	@ (8009fe0 <decodeGPSConfigs+0x624>)
 8009dba:	4413      	add	r3, r2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	f003 0304 	and.w	r3, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d017      	beq.n	8009df6 <decodeGPSConfigs+0x43a>
						{
							acPeriod = atoi(acPeriodStr);
 8009dc6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009dca:	f103 030c 	add.w	r3, r3, #12
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	f01b fa84 	bl	80252dc <atoi>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009dda:	f102 0204 	add.w	r2, r2, #4
 8009dde:	8013      	strh	r3, [r2, #0]
							if(acPeriod >= 0 && acPeriod <= 65535)
							{
								decodedGpsParams.gpsInterval = acPeriod;
 8009de0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009de4:	f103 0304 	add.w	r3, r3, #4
 8009de8:	881b      	ldrh	r3, [r3, #0]
 8009dea:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009dee:	f102 021a 	add.w	r2, r2, #26
 8009df2:	8013      	strh	r3, [r2, #0]
						if(isdigit((unsigned char)acPeriodStr[0]))
 8009df4:	e00c      	b.n	8009e10 <decodeGPSConfigs+0x454>
								PRINTF("GPS acquisition period is out of range [0-65535]: %d\r\n", acPeriod);
							}
						}
						else
						{
							isError = true;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009dfc:	f102 020f 	add.w	r2, r2, #15
 8009e00:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)acPeriodStr[0]))
 8009e02:	e005      	b.n	8009e10 <decodeGPSConfigs+0x454>
							//"Invalid data type for acquisition period"
						}
					}
					else
					{
						isError = true;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009e0a:	f102 020f 	add.w	r2, r2, #15
 8009e0e:	7013      	strb	r3, [r2, #0]
						//"Acquisition period not found in GPS message"
					}

					char *geoDistStr = strstr(substr, geoDistTest);
 8009e10:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009e14:	3b0c      	subs	r3, #12
 8009e16:	4619      	mov	r1, r3
 8009e18:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009e1c:	f103 0318 	add.w	r3, r3, #24
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f01d fa2a 	bl	802727a <strstr>
 8009e26:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009e2a:	f103 0308 	add.w	r3, r3, #8
 8009e2e:	6018      	str	r0, [r3, #0]
					Refresh_Watchdog;
 8009e30:	486a      	ldr	r0, [pc, #424]	@ (8009fdc <decodeGPSConfigs+0x620>)
 8009e32:	f011 f9ce 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <decodeGPSConfigs+0x484>
 8009e3c:	f00b fcaa 	bl	8015794 <Error_Handler>
					if(geoDistStr && !isError)
 8009e40:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009e44:	f103 0308 	add.w	r3, r3, #8
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d050      	beq.n	8009ef0 <decodeGPSConfigs+0x534>
 8009e4e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009e52:	f103 030f 	add.w	r3, r3, #15
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f083 0301 	eor.w	r3, r3, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d046      	beq.n	8009ef0 <decodeGPSConfigs+0x534>
					{
						Refresh_Watchdog;
 8009e62:	485e      	ldr	r0, [pc, #376]	@ (8009fdc <decodeGPSConfigs+0x620>)
 8009e64:	f011 f9b5 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <decodeGPSConfigs+0x4b6>
 8009e6e:	f00b fc91 	bl	8015794 <Error_Handler>
						geoDistStr += strlen(geoDistTest);
 8009e72:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009e76:	3b0c      	subs	r3, #12
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7f6 fa07 	bl	800028c <strlen>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009e84:	f103 0308 	add.w	r3, r3, #8
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009e90:	f102 0208 	add.w	r2, r2, #8
 8009e94:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)geoDistStr[0]))
 8009e96:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009e9a:	f103 0308 	add.w	r3, r3, #8
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8009fe0 <decodeGPSConfigs+0x624>)
 8009ea6:	4413      	add	r3, r2
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	f003 0304 	and.w	r3, r3, #4
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d017      	beq.n	8009ee2 <decodeGPSConfigs+0x526>
						{
							distance = atoi(geoDistStr);
 8009eb2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009eb6:	f103 0308 	add.w	r3, r3, #8
 8009eba:	6818      	ldr	r0, [r3, #0]
 8009ebc:	f01b fa0e 	bl	80252dc <atoi>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009ec6:	f102 020c 	add.w	r2, r2, #12
 8009eca:	8013      	strh	r3, [r2, #0]
							if(distance >= 0 && distance <= 65535)
							{
								decodedGpsParams.geofenceDistance = distance;
 8009ecc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009ed0:	f103 030c 	add.w	r3, r3, #12
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009eda:	f102 021c 	add.w	r2, r2, #28
 8009ede:	8013      	strh	r3, [r2, #0]
						if(isdigit((unsigned char)geoDistStr[0]))
 8009ee0:	e00c      	b.n	8009efc <decodeGPSConfigs+0x540>
								PRINTF("GPS threshold distance is out of range [0-65535]: %d\r\n", distance);
							}
						}
						else
						{
							isError = true;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009ee8:	f102 020f 	add.w	r2, r2, #15
 8009eec:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)geoDistStr[0]))
 8009eee:	e005      	b.n	8009efc <decodeGPSConfigs+0x540>
							//"Invalid data type for threshold distance"
						}
					}
					else
					{
						isError = true;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009ef6:	f102 020f 	add.w	r2, r2, #15
 8009efa:	7013      	strb	r3, [r2, #0]
						//"Threshold distance not found in GPS message"
					}

					char *alarmWindowStr = strstr(substr, alarmWindowTest);
 8009efc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009f00:	3b1c      	subs	r3, #28
 8009f02:	4619      	mov	r1, r3
 8009f04:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f08:	f103 0318 	add.w	r3, r3, #24
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f01d f9b4 	bl	802727a <strstr>
 8009f12:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f16:	f103 0308 	add.w	r3, r3, #8
 8009f1a:	6018      	str	r0, [r3, #0]
					Refresh_Watchdog;
 8009f1c:	482f      	ldr	r0, [pc, #188]	@ (8009fdc <decodeGPSConfigs+0x620>)
 8009f1e:	f011 f958 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <decodeGPSConfigs+0x570>
 8009f28:	f00b fc34 	bl	8015794 <Error_Handler>
					if(geoDistStr && !isError)
 8009f2c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009f30:	f103 0308 	add.w	r3, r3, #8
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d054      	beq.n	8009fe4 <decodeGPSConfigs+0x628>
 8009f3a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009f3e:	f103 030f 	add.w	r3, r3, #15
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f083 0301 	eor.w	r3, r3, #1
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d04a      	beq.n	8009fe4 <decodeGPSConfigs+0x628>
					{
						alarmWindowStr += strlen(alarmWindowTest);
 8009f4e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009f52:	3b1c      	subs	r3, #28
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7f6 f999 	bl	800028c <strlen>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f60:	f103 0308 	add.w	r3, r3, #8
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4413      	add	r3, r2
 8009f68:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009f6c:	f102 0208 	add.w	r2, r2, #8
 8009f70:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)alarmWindowStr[0]))
 8009f72:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f76:	f103 0308 	add.w	r3, r3, #8
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	4a17      	ldr	r2, [pc, #92]	@ (8009fe0 <decodeGPSConfigs+0x624>)
 8009f82:	4413      	add	r3, r2
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01f      	beq.n	8009fce <decodeGPSConfigs+0x612>
						{
							alarmWindow = atoi(alarmWindowStr);
 8009f8e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f92:	f103 0308 	add.w	r3, r3, #8
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	f01b f9a0 	bl	80252dc <atoi>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009fa2:	f102 0202 	add.w	r2, r2, #2
 8009fa6:	8013      	strh	r3, [r2, #0]
							if(alarmWindow >= 0 && alarmWindow <= 65535)
							{
								Refresh_Watchdog;
 8009fa8:	480c      	ldr	r0, [pc, #48]	@ (8009fdc <decodeGPSConfigs+0x620>)
 8009faa:	f011 f912 	bl	801b1d2 <HAL_IWDG_Refresh>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <decodeGPSConfigs+0x5fc>
 8009fb4:	f00b fbee 	bl	8015794 <Error_Handler>
								decodedGpsParams.alarmTime = alarmWindow;
 8009fb8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8009fbc:	f103 0302 	add.w	r3, r3, #2
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8009fc6:	f102 0218 	add.w	r2, r2, #24
 8009fca:	8013      	strh	r3, [r2, #0]
						if(isdigit((unsigned char)alarmWindowStr[0]))
 8009fcc:	e010      	b.n	8009ff0 <decodeGPSConfigs+0x634>
								PRINTF("GPS alarm window is out of range [0-65535]: %d\r\n", distance);
							}
						}
						else
						{
							isError = true;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009fd4:	f102 020f 	add.w	r2, r2, #15
 8009fd8:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)alarmWindowStr[0]))
 8009fda:	e009      	b.n	8009ff0 <decodeGPSConfigs+0x634>
 8009fdc:	2007d0bc 	.word	0x2007d0bc
 8009fe0:	0803031d 	.word	0x0803031d
							//"Invalid data type for alarm window"
						}
					}
					else
					{
						isError = true;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8009fea:	f102 020f 	add.w	r2, r2, #15
 8009fee:	7013      	strb	r3, [r2, #0]
						//"Alarm window not found in GPS message"
					}

					char *alarmSampleStr = strstr(substr, alarmSampleTest);
 8009ff0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009ff4:	3b14      	subs	r3, #20
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009ffc:	f103 0318 	add.w	r3, r3, #24
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f01d f93a 	bl	802727a <strstr>
 800a006:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a00a:	f103 0304 	add.w	r3, r3, #4
 800a00e:	6018      	str	r0, [r3, #0]
					Refresh_Watchdog;
 800a010:	48ae      	ldr	r0, [pc, #696]	@ (800a2cc <decodeGPSConfigs+0x910>)
 800a012:	f011 f8de 	bl	801b1d2 <HAL_IWDG_Refresh>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <decodeGPSConfigs+0x664>
 800a01c:	f00b fbba 	bl	8015794 <Error_Handler>
					if(alarmSampleStr && !isError)
 800a020:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a024:	f103 0304 	add.w	r3, r3, #4
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d05c      	beq.n	800a0e8 <decodeGPSConfigs+0x72c>
 800a02e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a032:	f103 030f 	add.w	r3, r3, #15
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	f083 0301 	eor.w	r3, r3, #1
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d052      	beq.n	800a0e8 <decodeGPSConfigs+0x72c>
					{
						alarmSampleStr += strlen(alarmSampleTest);
 800a042:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a046:	3b14      	subs	r3, #20
 800a048:	4618      	mov	r0, r3
 800a04a:	f7f6 f91f 	bl	800028c <strlen>
 800a04e:	4602      	mov	r2, r0
 800a050:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a054:	f103 0304 	add.w	r3, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4413      	add	r3, r2
 800a05c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a060:	f102 0204 	add.w	r2, r2, #4
 800a064:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)alarmSampleStr[0]))
 800a066:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a06a:	f103 0304 	add.w	r3, r3, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	3301      	adds	r3, #1
 800a074:	4a96      	ldr	r2, [pc, #600]	@ (800a2d0 <decodeGPSConfigs+0x914>)
 800a076:	4413      	add	r3, r2
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d02b      	beq.n	800a0da <decodeGPSConfigs+0x71e>
						{
							Refresh_Watchdog;
 800a082:	4892      	ldr	r0, [pc, #584]	@ (800a2cc <decodeGPSConfigs+0x910>)
 800a084:	f011 f8a5 	bl	801b1d2 <HAL_IWDG_Refresh>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <decodeGPSConfigs+0x6d6>
 800a08e:	f00b fb81 	bl	8015794 <Error_Handler>
							alarmSample = atoi(alarmSampleStr);
 800a092:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a096:	f103 0304 	add.w	r3, r3, #4
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	f01b f91e 	bl	80252dc <atoi>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a0a6:	8013      	strh	r3, [r2, #0]
							if(alarmSample >= 0 && alarmSample <= 255)
 800a0a8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	2bff      	cmp	r3, #255	@ 0xff
 800a0b0:	d808      	bhi.n	800a0c4 <decodeGPSConfigs+0x708>
							{
								decodedGpsParams.alarmSamplePeriod = alarmSample;
 800a0b2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a0b6:	881b      	ldrh	r3, [r3, #0]
 800a0b8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800a0bc:	f102 0216 	add.w	r2, r2, #22
 800a0c0:	8013      	strh	r3, [r2, #0]
						if(isdigit((unsigned char)alarmSampleStr[0]))
 800a0c2:	e017      	b.n	800a0f4 <decodeGPSConfigs+0x738>
							}
							else
							{
								PRINTF("GPS alarm sample period is out of range [0-255]: %d\r\n", distance);
 800a0c4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a0c8:	f103 030c 	add.w	r3, r3, #12
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4980      	ldr	r1, [pc, #512]	@ (800a2d4 <decodeGPSConfigs+0x918>)
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	f7fc fe4e 	bl	8006d74 <TraceSend>
						if(isdigit((unsigned char)alarmSampleStr[0]))
 800a0d8:	e00c      	b.n	800a0f4 <decodeGPSConfigs+0x738>
							}
						}
						else
						{
							isError = true;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a0e0:	f102 020f 	add.w	r2, r2, #15
 800a0e4:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)alarmSampleStr[0]))
 800a0e6:	e005      	b.n	800a0f4 <decodeGPSConfigs+0x738>
							//"Invalid data type for alarm sample period"
						}
					}
					else
					{
						isError = true;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a0ee:	f102 020f 	add.w	r2, r2, #15
 800a0f2:	7013      	strb	r3, [r2, #0]
						//"Alarm sample period not found in GPS message"
					}

					char *hysteresisStr = strstr(substr, hysteresisTest);
 800a0f4:	f107 0310 	add.w	r3, r7, #16
 800a0f8:	3b04      	subs	r3, #4
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a100:	f103 0318 	add.w	r3, r3, #24
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	f01d f8b8 	bl	802727a <strstr>
 800a10a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a10e:	6018      	str	r0, [r3, #0]
					Refresh_Watchdog;
 800a110:	486e      	ldr	r0, [pc, #440]	@ (800a2cc <decodeGPSConfigs+0x910>)
 800a112:	f011 f85e 	bl	801b1d2 <HAL_IWDG_Refresh>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <decodeGPSConfigs+0x764>
 800a11c:	f00b fb3a 	bl	8015794 <Error_Handler>
					if(hysteresisStr && !isError)
 800a120:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d048      	beq.n	800a1bc <decodeGPSConfigs+0x800>
 800a12a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a12e:	f103 030f 	add.w	r3, r3, #15
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	f083 0301 	eor.w	r3, r3, #1
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d03e      	beq.n	800a1bc <decodeGPSConfigs+0x800>
					{
						Refresh_Watchdog;
 800a13e:	4863      	ldr	r0, [pc, #396]	@ (800a2cc <decodeGPSConfigs+0x910>)
 800a140:	f011 f847 	bl	801b1d2 <HAL_IWDG_Refresh>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d001      	beq.n	800a14e <decodeGPSConfigs+0x792>
 800a14a:	f00b fb23 	bl	8015794 <Error_Handler>
						hysteresisStr += strlen(hysteresisTest);
 800a14e:	f107 0310 	add.w	r3, r7, #16
 800a152:	3b04      	subs	r3, #4
 800a154:	4618      	mov	r0, r3
 800a156:	f7f6 f899 	bl	800028c <strlen>
 800a15a:	4602      	mov	r2, r0
 800a15c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4413      	add	r3, r2
 800a164:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a168:	6013      	str	r3, [r2, #0]
						if(isdigit((unsigned char)hysteresisStr[0]))
 800a16a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	4a56      	ldr	r2, [pc, #344]	@ (800a2d0 <decodeGPSConfigs+0x914>)
 800a176:	4413      	add	r3, r2
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d015      	beq.n	800a1ae <decodeGPSConfigs+0x7f2>
						{
							hysteresis = atoi(hysteresisStr);
 800a182:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a186:	6818      	ldr	r0, [r3, #0]
 800a188:	f01b f8a8 	bl	80252dc <atoi>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a192:	f102 021e 	add.w	r2, r2, #30
 800a196:	8013      	strh	r3, [r2, #0]
							if(hysteresis >= 0 && hysteresis <= 65535)
							{
								decodedGpsParams.movementHysteresis = hysteresis;
 800a198:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a19c:	f103 031e 	add.w	r3, r3, #30
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800a1a6:	f102 021e 	add.w	r2, r2, #30
 800a1aa:	8013      	strh	r3, [r2, #0]
						if(isdigit((unsigned char)hysteresisStr[0]))
 800a1ac:	e025      	b.n	800a1fa <decodeGPSConfigs+0x83e>
								PRINTF("GPS hysteresis is out of range [0-65535]: %d\r\n", distance);
							}
						}
						else
						{
							isError = true;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a1b4:	f102 020f 	add.w	r2, r2, #15
 800a1b8:	7013      	strb	r3, [r2, #0]
						if(isdigit((unsigned char)hysteresisStr[0]))
 800a1ba:	e01e      	b.n	800a1fa <decodeGPSConfigs+0x83e>
							//"Invalid data type for hysteresis"
						}
					}
					else
					{
						isError = true;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a1c2:	f102 020f 	add.w	r2, r2, #15
 800a1c6:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 800a1c8:	e01f      	b.n	800a20a <decodeGPSConfigs+0x84e>
						//"Hysteresis not found in GPS message"
					}
				}
				else
				{
					isError = true;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a1d0:	f102 020f 	add.w	r2, r2, #15
 800a1d4:	7013      	strb	r3, [r2, #0]
					PRINTF("Invalid version number decoded: %d\r\n", version);
 800a1d6:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a1da:	f103 0307 	add.w	r3, r3, #7
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	493d      	ldr	r1, [pc, #244]	@ (800a2d8 <decodeGPSConfigs+0x91c>)
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f7fc fdc5 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)verStr[0]))
 800a1ea:	e00e      	b.n	800a20a <decodeGPSConfigs+0x84e>
				}
			}
			else
			{
				isError = true;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a1f2:	f102 020f 	add.w	r2, r2, #15
 800a1f6:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 800a1f8:	e007      	b.n	800a20a <decodeGPSConfigs+0x84e>
 800a1fa:	e006      	b.n	800a20a <decodeGPSConfigs+0x84e>
				//"Invalid data type for version"
			}
		}
		else
		{
			isError = true;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a202:	f102 020f 	add.w	r2, r2, #15
 800a206:	7013      	strb	r3, [r2, #0]
	{
 800a208:	e006      	b.n	800a218 <decodeGPSConfigs+0x85c>
 800a20a:	e005      	b.n	800a218 <decodeGPSConfigs+0x85c>
			//"Version not found in GPS message"
		}
	}
	else
	{
		isError = true;
 800a20c:	2301      	movs	r3, #1
 800a20e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800a212:	f102 020f 	add.w	r2, r2, #15
 800a216:	7013      	strb	r3, [r2, #0]
		//"GPS data not found in configuration"
	}

	if(!isError)
 800a218:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a21c:	f103 030f 	add.w	r3, r3, #15
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f083 0301 	eor.w	r3, r3, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d039      	beq.n	800a2a0 <decodeGPSConfigs+0x8e4>
	{
		Refresh_Watchdog;
 800a22c:	4827      	ldr	r0, [pc, #156]	@ (800a2cc <decodeGPSConfigs+0x910>)
 800a22e:	f010 ffd0 	bl	801b1d2 <HAL_IWDG_Refresh>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <decodeGPSConfigs+0x880>
 800a238:	f00b faac 	bl	8015794 <Error_Handler>
		PRINTF("Setting GPS Values; mode %d, alarmSamplePeriod %d, alarmTime %d, gpsInterval %d, geofenceDistance %d, movementHysteresis %d\r\n",
 800a23c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800a240:	f103 0314 	add.w	r3, r3, #20
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	461c      	mov	r4, r3
 800a248:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800a24c:	f103 0316 	add.w	r3, r3, #22
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	461d      	mov	r5, r3
 800a254:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800a258:	f103 0318 	add.w	r3, r3, #24
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800a262:	f102 021a 	add.w	r2, r2, #26
 800a266:	8812      	ldrh	r2, [r2, #0]
 800a268:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 800a26c:	f101 011c 	add.w	r1, r1, #28
 800a270:	8809      	ldrh	r1, [r1, #0]
 800a272:	f507 5081 	add.w	r0, r7, #4128	@ 0x1020
 800a276:	f100 001e 	add.w	r0, r0, #30
 800a27a:	8800      	ldrh	r0, [r0, #0]
 800a27c:	9003      	str	r0, [sp, #12]
 800a27e:	9102      	str	r1, [sp, #8]
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	462b      	mov	r3, r5
 800a286:	4622      	mov	r2, r4
 800a288:	4914      	ldr	r1, [pc, #80]	@ (800a2dc <decodeGPSConfigs+0x920>)
 800a28a:	2001      	movs	r0, #1
 800a28c:	f7fc fd72 	bl	8006d74 <TraceSend>
				decodedGpsParams.mode, decodedGpsParams.alarmSamplePeriod, decodedGpsParams.alarmTime, decodedGpsParams.gpsInterval, decodedGpsParams.geofenceDistance,decodedGpsParams.movementHysteresis);

		setGpsParameters(decodedGpsParams);
 800a290:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800a294:	f103 0314 	add.w	r3, r3, #20
 800a298:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a29c:	f7ff fb26 	bl	80098ec <setGpsParameters>
	}

	PRINTF("GPS decode error is %d\r\n", isError);
 800a2a0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a2a4:	f103 030f 	add.w	r3, r3, #15
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	490c      	ldr	r1, [pc, #48]	@ (800a2e0 <decodeGPSConfigs+0x924>)
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f7fc fd60 	bl	8006d74 <TraceSend>
	return isError;
 800a2b4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800a2b8:	f103 030f 	add.w	r3, r3, #15
 800a2bc:	781b      	ldrb	r3, [r3, #0]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2007d0bc 	.word	0x2007d0bc
 800a2d0:	0803031d 	.word	0x0803031d
 800a2d4:	0802defc 	.word	0x0802defc
 800a2d8:	0802df34 	.word	0x0802df34
 800a2dc:	0802df5c 	.word	0x0802df5c
 800a2e0:	0802dfdc 	.word	0x0802dfdc

0800a2e4 <gpsGetData>:

bool gpsGetData(char* gpsMsg)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b0ae      	sub	sp, #184	@ 0xb8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	//Test string
	//	char gpstest[GPS_SIZE] = {"AT+QGPSLOC=2   +QGPSLOC: 225102.000,33.21912,-97.14844,2.0,173.6,3,0.00,0.0,0.0,030724,03"};

	bool isError = false;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	uint8_t nsat = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	int fix = 0.0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float latitude = 0.0;
 800a2fe:	f04f 0300 	mov.w	r3, #0
 800a302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	float longitude = 0.0;
 800a306:	f04f 0300 	mov.w	r3, #0
 800a30a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	float hdop = 0.0;
 800a30e:	f04f 0300 	mov.w	r3, #0
 800a312:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	float altitude = 0.0;
 800a316:	f04f 0300 	mov.w	r3, #0
 800a31a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	float spkm = 0.0;
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	float spkn = 0.0;
 800a326:	f04f 0300 	mov.w	r3, #0
 800a32a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	char test[] = "+QGPSLOC: ";
 800a32e:	4abd      	ldr	r2, [pc, #756]	@ (800a624 <gpsGetData+0x340>)
 800a330:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a334:	ca07      	ldmia	r2, {r0, r1, r2}
 800a336:	c303      	stmia	r3!, {r0, r1}
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	3302      	adds	r3, #2
 800a33c:	0c12      	lsrs	r2, r2, #16
 800a33e:	701a      	strb	r2, [r3, #0]
	char dateStr[GPS_DATE_LENGTH] = "";
 800a340:	2300      	movs	r3, #0
 800a342:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a344:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800a348:	2100      	movs	r1, #0
 800a34a:	460a      	mov	r2, r1
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	460a      	mov	r2, r1
 800a350:	709a      	strb	r2, [r3, #2]
	char timeStr[GPS_UTC_LENGTH] = "";
 800a352:	2300      	movs	r3, #0
 800a354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a356:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	f8c3 2003 	str.w	r2, [r3, #3]
	char cogStr[GPS_DATE_LENGTH] = "";
 800a362:	2300      	movs	r3, #0
 800a364:	647b      	str	r3, [r7, #68]	@ 0x44
 800a366:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800a36a:	2100      	movs	r1, #0
 800a36c:	460a      	mov	r2, r1
 800a36e:	801a      	strh	r2, [r3, #0]
 800a370:	460a      	mov	r2, r1
 800a372:	709a      	strb	r2, [r3, #2]
	char monthStr[GPS_DATE_SIZE] = "";
 800a374:	4bac      	ldr	r3, [pc, #688]	@ (800a628 <gpsGetData+0x344>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 800a37c:	f107 0341 	add.w	r3, r7, #65	@ 0x41
 800a380:	2200      	movs	r2, #0
 800a382:	801a      	strh	r2, [r3, #0]
	char dayStr[GPS_DATE_SIZE] = "";
 800a384:	4ba8      	ldr	r3, [pc, #672]	@ (800a628 <gpsGetData+0x344>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 800a38c:	f107 033d 	add.w	r3, r7, #61	@ 0x3d
 800a390:	2200      	movs	r2, #0
 800a392:	801a      	strh	r2, [r3, #0]
	char yearStr[GPS_DATE_SIZE] = "";
 800a394:	4ba4      	ldr	r3, [pc, #656]	@ (800a628 <gpsGetData+0x344>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800a39c:	f107 0339 	add.w	r3, r7, #57	@ 0x39
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	801a      	strh	r2, [r3, #0]
	char hourStr[GPS_DATE_SIZE] = "";
 800a3a4:	4ba0      	ldr	r3, [pc, #640]	@ (800a628 <gpsGetData+0x344>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 800a3ac:	f107 0335 	add.w	r3, r7, #53	@ 0x35
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	801a      	strh	r2, [r3, #0]
	char minStr[GPS_DATE_SIZE] = "";
 800a3b4:	4b9c      	ldr	r3, [pc, #624]	@ (800a628 <gpsGetData+0x344>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800a3bc:	f107 0331 	add.w	r3, r7, #49	@ 0x31
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	801a      	strh	r2, [r3, #0]
	char secStr[GPS_DATE_SIZE] = "";
 800a3c4:	4b98      	ldr	r3, [pc, #608]	@ (800a628 <gpsGetData+0x344>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800a3cc:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	801a      	strh	r2, [r3, #0]
	char fracStr[GPS_FRACTION_SIZE] = "";
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	Word_Transfer(gpsLocationBuff, (char*)gpsMsg);
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	4894      	ldr	r0, [pc, #592]	@ (800a62c <gpsGetData+0x348>)
 800a3dc:	f7fc f9aa 	bl	8006734 <Word_Transfer>

	char *dataStr = strstr(gpsLocationBuff, test);
 800a3e0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	4891      	ldr	r0, [pc, #580]	@ (800a62c <gpsGetData+0x348>)
 800a3e8:	f01c ff47 	bl	802727a <strstr>
 800a3ec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	if(dataStr)
 800a3f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 811f 	beq.w	800a638 <gpsGetData+0x354>
	{
		//UTC
		dataStr += strlen(test);
 800a3fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7f5 ff44 	bl	800028c <strlen>
 800a404:	4602      	mov	r2, r0
 800a406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a40a:	4413      	add	r3, r2
 800a40c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		//Lattitude
		int lenToLat = strcspn(dataStr, ",");
 800a410:	4987      	ldr	r1, [pc, #540]	@ (800a630 <gpsGetData+0x34c>)
 800a412:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a416:	f01c fecf 	bl	80271b8 <strcspn>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		strncpy(timeStr, dataStr, lenToLat);
 800a420:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800a424:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a428:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800a42c:	4618      	mov	r0, r3
 800a42e:	f01c fee6 	bl	80271fe <strncpy>
		dataStr += lenToLat + 1;
 800a432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a436:	3301      	adds	r3, #1
 800a438:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a43c:	4413      	add	r3, r2
 800a43e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		latitude = strtof(dataStr, NULL);
 800a442:	2100      	movs	r1, #0
 800a444:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a448:	f01b fd54 	bl	8025ef4 <strtof>
 800a44c:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac

		//Longitude
		int lenToLon = strcspn(dataStr, ",");
 800a450:	4977      	ldr	r1, [pc, #476]	@ (800a630 <gpsGetData+0x34c>)
 800a452:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a456:	f01c feaf 	bl	80271b8 <strcspn>
 800a45a:	4603      	mov	r3, r0
 800a45c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		dataStr += lenToLon + 1;
 800a460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a464:	3301      	adds	r3, #1
 800a466:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a46a:	4413      	add	r3, r2
 800a46c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		longitude = strtof(dataStr, NULL);
 800a470:	2100      	movs	r1, #0
 800a472:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a476:	f01b fd3d 	bl	8025ef4 <strtof>
 800a47a:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8

		//HDOP
		int lenToHDOP = strcspn(dataStr, ",");
 800a47e:	496c      	ldr	r1, [pc, #432]	@ (800a630 <gpsGetData+0x34c>)
 800a480:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a484:	f01c fe98 	bl	80271b8 <strcspn>
 800a488:	4603      	mov	r3, r0
 800a48a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		dataStr += lenToHDOP + 1;
 800a48e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a492:	3301      	adds	r3, #1
 800a494:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a498:	4413      	add	r3, r2
 800a49a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		hdop = strtof(dataStr, NULL);
 800a49e:	2100      	movs	r1, #0
 800a4a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a4a4:	f01b fd26 	bl	8025ef4 <strtof>
 800a4a8:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4

		//Altitude
		int lenToAlt = strcspn(dataStr, ",");
 800a4ac:	4960      	ldr	r1, [pc, #384]	@ (800a630 <gpsGetData+0x34c>)
 800a4ae:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a4b2:	f01c fe81 	bl	80271b8 <strcspn>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		dataStr += lenToAlt + 1;
 800a4bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		altitude = strtof(dataStr, NULL);
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a4d2:	f01b fd0f 	bl	8025ef4 <strtof>
 800a4d6:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0

		//Fix
		int lenToFix = strcspn(dataStr, ",");
 800a4da:	4955      	ldr	r1, [pc, #340]	@ (800a630 <gpsGetData+0x34c>)
 800a4dc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a4e0:	f01c fe6a 	bl	80271b8 <strcspn>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		dataStr += lenToFix + 1;
 800a4ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		fix = strtof(dataStr, NULL);
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a500:	f01b fcf8 	bl	8025ef4 <strtof>
 800a504:	eef0 7a40 	vmov.f32	s15, s0
 800a508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a50c:	ee17 3a90 	vmov	r3, s15
 800a510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if(isdigit((unsigned char)dataStr[0]))
 800a514:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a45      	ldr	r2, [pc, #276]	@ (800a634 <gpsGetData+0x350>)
 800a51e:	4413      	add	r3, r2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <gpsGetData+0x252>
		{
			fix = atoi(dataStr);
 800a52a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a52e:	f01a fed5 	bl	80252dc <atoi>
 800a532:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
		}

		//COG
		int lenToCOG = strcspn(dataStr, ",");
 800a536:	493e      	ldr	r1, [pc, #248]	@ (800a630 <gpsGetData+0x34c>)
 800a538:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a53c:	f01c fe3c 	bl	80271b8 <strcspn>
 800a540:	4603      	mov	r3, r0
 800a542:	67fb      	str	r3, [r7, #124]	@ 0x7c
		dataStr += lenToCOG + 1;
 800a544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a546:	3301      	adds	r3, #1
 800a548:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a54c:	4413      	add	r3, r2
 800a54e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		//spkm
		int lenToSPKM = strcspn(dataStr, ",");
 800a552:	4937      	ldr	r1, [pc, #220]	@ (800a630 <gpsGetData+0x34c>)
 800a554:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a558:	f01c fe2e 	bl	80271b8 <strcspn>
 800a55c:	4603      	mov	r3, r0
 800a55e:	67bb      	str	r3, [r7, #120]	@ 0x78
		strncpy(cogStr, dataStr, lenToSPKM);
 800a560:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a562:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a566:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800a56a:	4618      	mov	r0, r3
 800a56c:	f01c fe47 	bl	80271fe <strncpy>

		dataStr += lenToSPKM + 1;
 800a570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a572:	3301      	adds	r3, #1
 800a574:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a578:	4413      	add	r3, r2
 800a57a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		spkm = strtof(dataStr, NULL);
 800a57e:	2100      	movs	r1, #0
 800a580:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a584:	f01b fcb6 	bl	8025ef4 <strtof>
 800a588:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c

		//spkn
		int lenToSPKN = strcspn(dataStr, ",");
 800a58c:	4928      	ldr	r1, [pc, #160]	@ (800a630 <gpsGetData+0x34c>)
 800a58e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a592:	f01c fe11 	bl	80271b8 <strcspn>
 800a596:	4603      	mov	r3, r0
 800a598:	677b      	str	r3, [r7, #116]	@ 0x74
		dataStr += lenToSPKN + 1;
 800a59a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a59c:	3301      	adds	r3, #1
 800a59e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		spkn = strtof(dataStr, NULL);
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a5ae:	f01b fca1 	bl	8025ef4 <strtof>
 800a5b2:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98

		//date
		int lenToDate = strcspn(dataStr, ",");
 800a5b6:	491e      	ldr	r1, [pc, #120]	@ (800a630 <gpsGetData+0x34c>)
 800a5b8:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a5bc:	f01c fdfc 	bl	80271b8 <strcspn>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	673b      	str	r3, [r7, #112]	@ 0x70
		dataStr += lenToDate + 1;
 800a5c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		//nsat
		int lenToNSAT = strcspn(dataStr, ",");
 800a5d2:	4917      	ldr	r1, [pc, #92]	@ (800a630 <gpsGetData+0x34c>)
 800a5d4:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a5d8:	f01c fdee 	bl	80271b8 <strcspn>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	66fb      	str	r3, [r7, #108]	@ 0x6c
		strncpy(dateStr, dataStr, lenToNSAT);
 800a5e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a5e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a5e6:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f01c fe07 	bl	80271fe <strncpy>

		dataStr += lenToNSAT + 1;
 800a5f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		if(isdigit((unsigned char)dataStr[0]))
 800a5fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	4a0b      	ldr	r2, [pc, #44]	@ (800a634 <gpsGetData+0x350>)
 800a608:	4413      	add	r3, r2
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b00      	cmp	r3, #0
 800a612:	d018      	beq.n	800a646 <gpsGetData+0x362>
		{
			nsat = atoi(dataStr);
 800a614:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800a618:	f01a fe60 	bl	80252dc <atoi>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 800a622:	e010      	b.n	800a646 <gpsGetData+0x362>
 800a624:	0802e0e0 	.word	0x0802e0e0
 800a628:	0802e0ec 	.word	0x0802e0ec
 800a62c:	2007a9b4 	.word	0x2007a9b4
 800a630:	0802e080 	.word	0x0802e080
 800a634:	0803031d 	.word	0x0803031d
		}
	}
	else
	{
		isError = true;
 800a638:	2301      	movs	r3, #1
 800a63a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		PRINTF("GPS Data not found in get location function.\r\n");
 800a63e:	49ce      	ldr	r1, [pc, #824]	@ (800a978 <gpsGetData+0x694>)
 800a640:	2001      	movs	r0, #1
 800a642:	f7fc fb97 	bl	8006d74 <TraceSend>
	}

	if(!isError && latitude != 0.0 && longitude != 0.0)
 800a646:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800a64a:	f083 0301 	eor.w	r3, r3, #1
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 8188 	beq.w	800a966 <gpsGetData+0x682>
 800a656:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800a65a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a662:	f000 8180 	beq.w	800a966 <gpsGetData+0x682>
 800a666:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800a66a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a672:	f000 8178 	beq.w	800a966 <gpsGetData+0x682>
	{
		privateGpsData.LastPosition.latitude = privateGpsData.CurrentPosition.latitude;
 800a676:	4bc1      	ldr	r3, [pc, #772]	@ (800a97c <gpsGetData+0x698>)
 800a678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a67a:	4ac0      	ldr	r2, [pc, #768]	@ (800a97c <gpsGetData+0x698>)
 800a67c:	63d3      	str	r3, [r2, #60]	@ 0x3c
		privateGpsData.LastPosition.longitude = privateGpsData.CurrentPosition.longitude;
 800a67e:	4bbf      	ldr	r3, [pc, #764]	@ (800a97c <gpsGetData+0x698>)
 800a680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a682:	4abe      	ldr	r2, [pc, #760]	@ (800a97c <gpsGetData+0x698>)
 800a684:	6413      	str	r3, [r2, #64]	@ 0x40
		privateGpsData.CurrentPosition.latitude = latitude;
 800a686:	4abd      	ldr	r2, [pc, #756]	@ (800a97c <gpsGetData+0x698>)
 800a688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a68c:	6353      	str	r3, [r2, #52]	@ 0x34
		privateGpsData.CurrentPosition.longitude = longitude;
 800a68e:	4abb      	ldr	r2, [pc, #748]	@ (800a97c <gpsGetData+0x698>)
 800a690:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a694:	6393      	str	r3, [r2, #56]	@ 0x38
		privateGpsData.HDOP = hdop;
 800a696:	4ab9      	ldr	r2, [pc, #740]	@ (800a97c <gpsGetData+0x698>)
 800a698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a69c:	60d3      	str	r3, [r2, #12]
		privateGpsData.altitude = altitude;
 800a69e:	4ab7      	ldr	r2, [pc, #732]	@ (800a97c <gpsGetData+0x698>)
 800a6a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a6a4:	6113      	str	r3, [r2, #16]
		privateGpsData.fix = fix;
 800a6a6:	4ab5      	ldr	r2, [pc, #724]	@ (800a97c <gpsGetData+0x698>)
 800a6a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a6ac:	6153      	str	r3, [r2, #20]
		privateGpsData.spkm = spkm;
 800a6ae:	4ab3      	ldr	r2, [pc, #716]	@ (800a97c <gpsGetData+0x698>)
 800a6b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6b4:	6213      	str	r3, [r2, #32]
		privateGpsData.spkn = spkn;
 800a6b6:	4ab1      	ldr	r2, [pc, #708]	@ (800a97c <gpsGetData+0x698>)
 800a6b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6bc:	6253      	str	r3, [r2, #36]	@ 0x24
		privateGpsData.nsat = nsat;
 800a6be:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800a6c2:	4aae      	ldr	r2, [pc, #696]	@ (800a97c <gpsGetData+0x698>)
 800a6c4:	6313      	str	r3, [r2, #48]	@ 0x30
		if(cogStr[0] != '\0' && dateStr[0] != '\0' && timeStr[0] != '\0')
 800a6c6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 8148 	beq.w	800a960 <gpsGetData+0x67c>
 800a6d0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 8143 	beq.w	800a960 <gpsGetData+0x67c>
 800a6da:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 813e 	beq.w	800a960 <gpsGetData+0x67c>
		{
			strncpy(privateGpsData.COG, cogStr, GPS_DATE_LENGTH);
 800a6e4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a6e8:	2207      	movs	r2, #7
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	48a4      	ldr	r0, [pc, #656]	@ (800a980 <gpsGetData+0x69c>)
 800a6ee:	f01c fd86 	bl	80271fe <strncpy>
			strncpy(privateGpsData.date, dateStr, GPS_DATE_LENGTH);
 800a6f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a6f6:	2207      	movs	r2, #7
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	48a2      	ldr	r0, [pc, #648]	@ (800a984 <gpsGetData+0x6a0>)
 800a6fc:	f01c fd7f 	bl	80271fe <strncpy>

			//Seperate day/month/year
			strncpy(dayStr, dateStr, GPS_DATE_WIDTH);
 800a700:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800a704:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a708:	2202      	movs	r2, #2
 800a70a:	4618      	mov	r0, r3
 800a70c:	f01c fd77 	bl	80271fe <strncpy>
			strncpy(monthStr, dateStr + GPS_DATE_WIDTH, GPS_DATE_WIDTH);
 800a710:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a714:	3302      	adds	r3, #2
 800a716:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800a71a:	2202      	movs	r2, #2
 800a71c:	4619      	mov	r1, r3
 800a71e:	f01c fd6e 	bl	80271fe <strncpy>
			strncpy(yearStr, dateStr + (GPS_DATE_WIDTH + GPS_DATE_WIDTH), GPS_DATE_WIDTH);
 800a722:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a726:	3304      	adds	r3, #4
 800a728:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800a72c:	2202      	movs	r2, #2
 800a72e:	4619      	mov	r1, r3
 800a730:	f01c fd65 	bl	80271fe <strncpy>

			//Seperate hour/min/sec/frac
			strncpy(hourStr, timeStr, GPS_DATE_WIDTH);
 800a734:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800a738:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a73c:	2202      	movs	r2, #2
 800a73e:	4618      	mov	r0, r3
 800a740:	f01c fd5d 	bl	80271fe <strncpy>
			strncpy(minStr, timeStr + GPS_DATE_WIDTH, GPS_DATE_WIDTH);
 800a744:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a748:	3302      	adds	r3, #2
 800a74a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800a74e:	2202      	movs	r2, #2
 800a750:	4619      	mov	r1, r3
 800a752:	f01c fd54 	bl	80271fe <strncpy>
			strncpy(secStr, timeStr + (GPS_DATE_WIDTH + GPS_DATE_WIDTH), GPS_DATE_WIDTH);
 800a756:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a75a:	3304      	adds	r3, #4
 800a75c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800a760:	2202      	movs	r2, #2
 800a762:	4619      	mov	r1, r3
 800a764:	f01c fd4b 	bl	80271fe <strncpy>
			strncpy(fracStr, timeStr + (GPS_DATE_WIDTH + GPS_DATE_WIDTH + GPS_DATE_WIDTH + 1), GPS_DATE_WIDTH + 1);
 800a768:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a76c:	3307      	adds	r3, #7
 800a76e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800a772:	2203      	movs	r2, #3
 800a774:	4619      	mov	r1, r3
 800a776:	f01c fd42 	bl	80271fe <strncpy>

			//Set day/month/year
			if(dayStr[0] != '\0' && monthStr[0] != '\0' && yearStr[0] != '\0' && hourStr[0] != '\0' && minStr[0] != '\0' && secStr[0] != '\0' && fracStr[0] != '\0')
 800a77a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	f000 80e8 	beq.w	800a954 <gpsGetData+0x670>
 800a784:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 80e3 	beq.w	800a954 <gpsGetData+0x670>
 800a78e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 80de 	beq.w	800a954 <gpsGetData+0x670>
 800a798:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f000 80d9 	beq.w	800a954 <gpsGetData+0x670>
 800a7a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 80d4 	beq.w	800a954 <gpsGetData+0x670>
 800a7ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 80cf 	beq.w	800a954 <gpsGetData+0x670>
 800a7b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 80ca 	beq.w	800a954 <gpsGetData+0x670>
			{
				if(isdigit((unsigned char) dayStr[0]) && isdigit((unsigned char) monthStr[0]) && isdigit((unsigned char) yearStr[0]) && isdigit((unsigned char)hourStr[0]) && isdigit((unsigned char)minStr[0]) && isdigit((unsigned char)secStr[0]) && isdigit((unsigned char)fracStr[0]))
 800a7c0:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	4a70      	ldr	r2, [pc, #448]	@ (800a988 <gpsGetData+0x6a4>)
 800a7c8:	4413      	add	r3, r2
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 80c3 	beq.w	800a95c <gpsGetData+0x678>
 800a7d6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800a7da:	3301      	adds	r3, #1
 800a7dc:	4a6a      	ldr	r2, [pc, #424]	@ (800a988 <gpsGetData+0x6a4>)
 800a7de:	4413      	add	r3, r2
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 80b8 	beq.w	800a95c <gpsGetData+0x678>
 800a7ec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	4a65      	ldr	r2, [pc, #404]	@ (800a988 <gpsGetData+0x6a4>)
 800a7f4:	4413      	add	r3, r2
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	f003 0304 	and.w	r3, r3, #4
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 80ad 	beq.w	800a95c <gpsGetData+0x678>
 800a802:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800a806:	3301      	adds	r3, #1
 800a808:	4a5f      	ldr	r2, [pc, #380]	@ (800a988 <gpsGetData+0x6a4>)
 800a80a:	4413      	add	r3, r2
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	f003 0304 	and.w	r3, r3, #4
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80a2 	beq.w	800a95c <gpsGetData+0x678>
 800a818:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a81c:	3301      	adds	r3, #1
 800a81e:	4a5a      	ldr	r2, [pc, #360]	@ (800a988 <gpsGetData+0x6a4>)
 800a820:	4413      	add	r3, r2
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f000 8097 	beq.w	800a95c <gpsGetData+0x678>
 800a82e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a832:	3301      	adds	r3, #1
 800a834:	4a54      	ldr	r2, [pc, #336]	@ (800a988 <gpsGetData+0x6a4>)
 800a836:	4413      	add	r3, r2
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 808c 	beq.w	800a95c <gpsGetData+0x678>
 800a844:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a848:	3301      	adds	r3, #1
 800a84a:	4a4f      	ldr	r2, [pc, #316]	@ (800a988 <gpsGetData+0x6a4>)
 800a84c:	4413      	add	r3, r2
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 8081 	beq.w	800a95c <gpsGetData+0x678>
				{
					RTC_TimeTypeDef GPS_Time = {0};
 800a85a:	f107 030c 	add.w	r3, r7, #12
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	605a      	str	r2, [r3, #4]
 800a864:	609a      	str	r2, [r3, #8]
 800a866:	60da      	str	r2, [r3, #12]
 800a868:	611a      	str	r2, [r3, #16]
 800a86a:	615a      	str	r2, [r3, #20]
 800a86c:	619a      	str	r2, [r3, #24]
					RTC_DateTypeDef GPS_Date = {0};
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
					HAL_RTC_GetTime(&hrtc, &GPS_Time, FORMAT_BIN);
 800a872:	f107 030c 	add.w	r3, r7, #12
 800a876:	2200      	movs	r2, #0
 800a878:	4619      	mov	r1, r3
 800a87a:	4844      	ldr	r0, [pc, #272]	@ (800a98c <gpsGetData+0x6a8>)
 800a87c:	f016 fcd0 	bl	8021220 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &GPS_Date, FORMAT_BIN);
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	2200      	movs	r2, #0
 800a886:	4619      	mov	r1, r3
 800a888:	4840      	ldr	r0, [pc, #256]	@ (800a98c <gpsGetData+0x6a8>)
 800a88a:	f016 fdc1 	bl	8021410 <HAL_RTC_GetDate>

					GPS_Date.Date = atoi(dayStr);
 800a88e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a892:	4618      	mov	r0, r3
 800a894:	f01a fd22 	bl	80252dc <atoi>
 800a898:	4603      	mov	r3, r0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	72bb      	strb	r3, [r7, #10]
					GPS_Date.Month = atoi(monthStr);
 800a89e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f01a fd1a 	bl	80252dc <atoi>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	727b      	strb	r3, [r7, #9]
					GPS_Date.Year = atoi(yearStr);
 800a8ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f01a fd12 	bl	80252dc <atoi>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	72fb      	strb	r3, [r7, #11]
					GPS_Time.Hours = atoi(hourStr);
 800a8be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f01a fd0a 	bl	80252dc <atoi>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	733b      	strb	r3, [r7, #12]
					GPS_Time.Minutes = atoi(minStr);
 800a8ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f01a fd02 	bl	80252dc <atoi>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	737b      	strb	r3, [r7, #13]
					GPS_Time.Seconds = atoi(secStr);
 800a8de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f01a fcfa 	bl	80252dc <atoi>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	613b      	str	r3, [r7, #16]
					GPS_Time.SecondFraction = atoi(fracStr);
 800a8ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f01a fcf3 	bl	80252dc <atoi>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	61fb      	str	r3, [r7, #28]
					if (HAL_RTC_SetDate(&hrtc, &GPS_Date, FORMAT_BIN) != HAL_OK)
 800a8fa:	f107 0308 	add.w	r3, r7, #8
 800a8fe:	2200      	movs	r2, #0
 800a900:	4619      	mov	r1, r3
 800a902:	4822      	ldr	r0, [pc, #136]	@ (800a98c <gpsGetData+0x6a8>)
 800a904:	f016 fcfe 	bl	8021304 <HAL_RTC_SetDate>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d004      	beq.n	800a918 <gpsGetData+0x634>
					{
						Error_Handler();
 800a90e:	f00a ff41 	bl	8015794 <Error_Handler>
						isError = true;
 800a912:	2301      	movs	r3, #1
 800a914:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
					}

					if (HAL_RTC_SetTime(&hrtc, &GPS_Time, FORMAT_BIN) != HAL_OK)
 800a918:	f107 030c 	add.w	r3, r7, #12
 800a91c:	2200      	movs	r2, #0
 800a91e:	4619      	mov	r1, r3
 800a920:	481a      	ldr	r0, [pc, #104]	@ (800a98c <gpsGetData+0x6a8>)
 800a922:	f016 fbdf 	bl	80210e4 <HAL_RTC_SetTime>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <gpsGetData+0x652>
					{
						Error_Handler();
 800a92c:	f00a ff32 	bl	8015794 <Error_Handler>
						isError = true;
 800a930:	2301      	movs	r3, #1
 800a932:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
					}

					HAL_RTC_GetTime(&hrtc, &GPS_Time, FORMAT_BIN);
 800a936:	f107 030c 	add.w	r3, r7, #12
 800a93a:	2200      	movs	r2, #0
 800a93c:	4619      	mov	r1, r3
 800a93e:	4813      	ldr	r0, [pc, #76]	@ (800a98c <gpsGetData+0x6a8>)
 800a940:	f016 fc6e 	bl	8021220 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &GPS_Date, FORMAT_BIN);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	2200      	movs	r2, #0
 800a94a:	4619      	mov	r1, r3
 800a94c:	480f      	ldr	r0, [pc, #60]	@ (800a98c <gpsGetData+0x6a8>)
 800a94e:	f016 fd5f 	bl	8021410 <HAL_RTC_GetDate>
				if(isdigit((unsigned char) dayStr[0]) && isdigit((unsigned char) monthStr[0]) && isdigit((unsigned char) yearStr[0]) && isdigit((unsigned char)hourStr[0]) && isdigit((unsigned char)minStr[0]) && isdigit((unsigned char)secStr[0]) && isdigit((unsigned char)fracStr[0]))
 800a952:	e003      	b.n	800a95c <gpsGetData+0x678>
				}
			}
			else
			{
				isError = true;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
			if(dayStr[0] != '\0' && monthStr[0] != '\0' && yearStr[0] != '\0' && hourStr[0] != '\0' && minStr[0] != '\0' && secStr[0] != '\0' && fracStr[0] != '\0')
 800a95a:	e004      	b.n	800a966 <gpsGetData+0x682>
				if(isdigit((unsigned char) dayStr[0]) && isdigit((unsigned char) monthStr[0]) && isdigit((unsigned char) yearStr[0]) && isdigit((unsigned char)hourStr[0]) && isdigit((unsigned char)minStr[0]) && isdigit((unsigned char)secStr[0]) && isdigit((unsigned char)fracStr[0]))
 800a95c:	bf00      	nop
			if(dayStr[0] != '\0' && monthStr[0] != '\0' && yearStr[0] != '\0' && hourStr[0] != '\0' && minStr[0] != '\0' && secStr[0] != '\0' && fracStr[0] != '\0')
 800a95e:	e002      	b.n	800a966 <gpsGetData+0x682>
			}
		}
		else
		{
			isError = true;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		}
	}

	if(isError)
 800a966:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d012      	beq.n	800a994 <gpsGetData+0x6b0>
	{
		PRINTF("GPS Data Failed\r\n");
 800a96e:	4908      	ldr	r1, [pc, #32]	@ (800a990 <gpsGetData+0x6ac>)
 800a970:	2001      	movs	r0, #1
 800a972:	f7fc f9ff 	bl	8006d74 <TraceSend>
 800a976:	e011      	b.n	800a99c <gpsGetData+0x6b8>
 800a978:	0802e084 	.word	0x0802e084
 800a97c:	2007a28c 	.word	0x2007a28c
 800a980:	2007a2a4 	.word	0x2007a2a4
 800a984:	2007a2b4 	.word	0x2007a2b4
 800a988:	0803031d 	.word	0x0803031d
 800a98c:	2007d344 	.word	0x2007d344
 800a990:	0802e0b4 	.word	0x0802e0b4
	}
	else
	{
		PRINTF("GPS Data Validated\r\n");
 800a994:	4906      	ldr	r1, [pc, #24]	@ (800a9b0 <gpsGetData+0x6cc>)
 800a996:	2001      	movs	r0, #1
 800a998:	f7fc f9ec 	bl	8006d74 <TraceSend>
	}

	gpsError = isError;
 800a99c:	4a05      	ldr	r2, [pc, #20]	@ (800a9b4 <gpsGetData+0x6d0>)
 800a99e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800a9a2:	7013      	strb	r3, [r2, #0]
	return isError;
 800a9a4:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	37b8      	adds	r7, #184	@ 0xb8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	0802e0c8 	.word	0x0802e0c8
 800a9b4:	20000355 	.word	0x20000355

0800a9b8 <getGpsConfigStr>:


char* getGpsConfigStr(void)
{
 800a9b8:	b5b0      	push	{r4, r5, r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af06      	add	r7, sp, #24
	static char buffer[GPS_MSG_SIZE] = {0};
	bool valid = false;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	71fb      	strb	r3, [r7, #7]

	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
			GPS_CONFIG_VERSION, privateGpsParameters.mode, privateGpsParameters.gpsInterval, privateGpsParameters.geofenceDistance, privateGpsParameters.alarmTime, privateGpsParameters.alarmSamplePeriod, privateGpsParameters.movementHysteresis);
 800a9c2:	4b19      	ldr	r3, [pc, #100]	@ (800aa28 <getGpsConfigStr+0x70>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
 800a9c6:	461a      	mov	r2, r3
			GPS_CONFIG_VERSION, privateGpsParameters.mode, privateGpsParameters.gpsInterval, privateGpsParameters.geofenceDistance, privateGpsParameters.alarmTime, privateGpsParameters.alarmSamplePeriod, privateGpsParameters.movementHysteresis);
 800a9c8:	4b17      	ldr	r3, [pc, #92]	@ (800aa28 <getGpsConfigStr+0x70>)
 800a9ca:	88db      	ldrh	r3, [r3, #6]
	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
 800a9cc:	4619      	mov	r1, r3
			GPS_CONFIG_VERSION, privateGpsParameters.mode, privateGpsParameters.gpsInterval, privateGpsParameters.geofenceDistance, privateGpsParameters.alarmTime, privateGpsParameters.alarmSamplePeriod, privateGpsParameters.movementHysteresis);
 800a9ce:	4b16      	ldr	r3, [pc, #88]	@ (800aa28 <getGpsConfigStr+0x70>)
 800a9d0:	891b      	ldrh	r3, [r3, #8]
	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
 800a9d2:	4618      	mov	r0, r3
			GPS_CONFIG_VERSION, privateGpsParameters.mode, privateGpsParameters.gpsInterval, privateGpsParameters.geofenceDistance, privateGpsParameters.alarmTime, privateGpsParameters.alarmSamplePeriod, privateGpsParameters.movementHysteresis);
 800a9d4:	4b14      	ldr	r3, [pc, #80]	@ (800aa28 <getGpsConfigStr+0x70>)
 800a9d6:	889b      	ldrh	r3, [r3, #4]
	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
 800a9d8:	461c      	mov	r4, r3
			GPS_CONFIG_VERSION, privateGpsParameters.mode, privateGpsParameters.gpsInterval, privateGpsParameters.geofenceDistance, privateGpsParameters.alarmTime, privateGpsParameters.alarmSamplePeriod, privateGpsParameters.movementHysteresis);
 800a9da:	4b13      	ldr	r3, [pc, #76]	@ (800aa28 <getGpsConfigStr+0x70>)
 800a9dc:	885b      	ldrh	r3, [r3, #2]
	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
 800a9de:	461d      	mov	r5, r3
			GPS_CONFIG_VERSION, privateGpsParameters.mode, privateGpsParameters.gpsInterval, privateGpsParameters.geofenceDistance, privateGpsParameters.alarmTime, privateGpsParameters.alarmSamplePeriod, privateGpsParameters.movementHysteresis);
 800a9e0:	4b11      	ldr	r3, [pc, #68]	@ (800aa28 <getGpsConfigStr+0x70>)
 800a9e2:	895b      	ldrh	r3, [r3, #10]
	int buffSize = snprintf(buffer, GPS_MSG_SIZE, "\"gps\":{\"version\":%u,\"mode\":%u,\"gps_acquisition_period\":%u,\"threshold_distance\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"hysteresis\":%u}",
 800a9e4:	9305      	str	r3, [sp, #20]
 800a9e6:	9504      	str	r5, [sp, #16]
 800a9e8:	9403      	str	r4, [sp, #12]
 800a9ea:	9002      	str	r0, [sp, #8]
 800a9ec:	9101      	str	r1, [sp, #4]
 800a9ee:	9200      	str	r2, [sp, #0]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4a0e      	ldr	r2, [pc, #56]	@ (800aa2c <getGpsConfigStr+0x74>)
 800a9f4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a9f8:	480d      	ldr	r0, [pc, #52]	@ (800aa30 <getGpsConfigStr+0x78>)
 800a9fa:	f01c fad7 	bl	8026fac <sniprintf>
 800a9fe:	6038      	str	r0, [r7, #0]

	if(buffSize > 0 && buffSize < GPS_MSG_SIZE)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd05      	ble.n	800aa12 <getGpsConfigStr+0x5a>
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800aa0c:	da01      	bge.n	800aa12 <getGpsConfigStr+0x5a>
	{
		valid = true;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	71fb      	strb	r3, [r7, #7]
	}

	if(valid)
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <getGpsConfigStr+0x64>
	{
		return buffer;
 800aa18:	4b05      	ldr	r3, [pc, #20]	@ (800aa30 <getGpsConfigStr+0x78>)
 800aa1a:	e000      	b.n	800aa1e <getGpsConfigStr+0x66>
	}
	else
	{
		return "Failed to build GPS message\r\n";
 800aa1c:	4b05      	ldr	r3, [pc, #20]	@ (800aa34 <getGpsConfigStr+0x7c>)
	}
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bdb0      	pop	{r4, r5, r7, pc}
 800aa26:	bf00      	nop
 800aa28:	2007a280 	.word	0x2007a280
 800aa2c:	0802e0f0 	.word	0x0802e0f0
 800aa30:	2007aab4 	.word	0x2007aab4
 800aa34:	0802e180 	.word	0x0802e180

0800aa38 <gpsGetLocationBuff>:

char* gpsGetLocationBuff()
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
	return gpsLocationBuff;
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <gpsGetLocationBuff+0x10>)
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	2007a9b4 	.word	0x2007a9b4

0800aa4c <gpsClearLocation>:

void gpsClearLocation()
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
	for(int locIndex = 0; locIndex < GPS_SIZE; locIndex++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	607b      	str	r3, [r7, #4]
 800aa56:	e007      	b.n	800aa68 <gpsClearLocation+0x1c>
	{
		gpsLocationBuff[locIndex] = '\0';
 800aa58:	4a08      	ldr	r2, [pc, #32]	@ (800aa7c <gpsClearLocation+0x30>)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	2200      	movs	r2, #0
 800aa60:	701a      	strb	r2, [r3, #0]
	for(int locIndex = 0; locIndex < GPS_SIZE; locIndex++)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	3301      	adds	r3, #1
 800aa66:	607b      	str	r3, [r7, #4]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2bff      	cmp	r3, #255	@ 0xff
 800aa6c:	ddf4      	ble.n	800aa58 <gpsClearLocation+0xc>
	}
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	2007a9b4 	.word	0x2007a9b4

0800aa80 <gpsLocationMessage>:

char* gpsLocationMessage()
{
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	b095      	sub	sp, #84	@ 0x54
 800aa86:	af0c      	add	r7, sp, #48	@ 0x30
	static char gpsBuff[GPS_MSG_SIZE] = {0};
	char timebuff[ISO_TIMESTAMP_LENGTH] = {""};
 800aa88:	2300      	movs	r3, #0
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	1d3b      	adds	r3, r7, #4
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	605a      	str	r2, [r3, #4]
 800aa94:	609a      	str	r2, [r3, #8]
 800aa96:	60da      	str	r2, [r3, #12]
 800aa98:	611a      	str	r2, [r3, #16]
 800aa9a:	751a      	strb	r2, [r3, #20]
	int buffSize = 0;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]

	Time_StampISO(timebuff);
 800aaa0:	463b      	mov	r3, r7
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fc fc7a 	bl	800739c <Time_StampISO>

	buffSize = snprintf(gpsBuff, GPS_MSG_SIZE, "\1{\"dev_id\":\"%lu\",\"type\":\"location\",\"timestamp\":\"%s\",\"version\":%d,\"latitude\":%f,\"longitude\":%f,\"altitude\":%f,\"speed\":%f,\"course\":%s,\"nsat\":%d}",
 800aaa8:	4b22      	ldr	r3, [pc, #136]	@ (800ab34 <gpsLocationMessage+0xb4>)
 800aaaa:	681e      	ldr	r6, [r3, #0]
			UNIQUE_Device_ID, timebuff, GPS_LOCATION_VERSION, privateGpsData.CurrentPosition.latitude, privateGpsData.CurrentPosition.longitude, privateGpsData.altitude, privateGpsData.spkm, privateGpsData.COG, privateGpsData.nsat);
 800aaac:	4b22      	ldr	r3, [pc, #136]	@ (800ab38 <gpsLocationMessage+0xb8>)
 800aaae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
	buffSize = snprintf(gpsBuff, GPS_MSG_SIZE, "\1{\"dev_id\":\"%lu\",\"type\":\"location\",\"timestamp\":\"%s\",\"version\":%d,\"latitude\":%f,\"longitude\":%f,\"altitude\":%f,\"speed\":%f,\"course\":%s,\"nsat\":%d}",
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7f5 fd57 	bl	8000564 <__aeabi_f2d>
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
			UNIQUE_Device_ID, timebuff, GPS_LOCATION_VERSION, privateGpsData.CurrentPosition.latitude, privateGpsData.CurrentPosition.longitude, privateGpsData.altitude, privateGpsData.spkm, privateGpsData.COG, privateGpsData.nsat);
 800aaba:	4b1f      	ldr	r3, [pc, #124]	@ (800ab38 <gpsLocationMessage+0xb8>)
 800aabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
	buffSize = snprintf(gpsBuff, GPS_MSG_SIZE, "\1{\"dev_id\":\"%lu\",\"type\":\"location\",\"timestamp\":\"%s\",\"version\":%d,\"latitude\":%f,\"longitude\":%f,\"altitude\":%f,\"speed\":%f,\"course\":%s,\"nsat\":%d}",
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7f5 fd50 	bl	8000564 <__aeabi_f2d>
 800aac4:	4680      	mov	r8, r0
 800aac6:	4689      	mov	r9, r1
			UNIQUE_Device_ID, timebuff, GPS_LOCATION_VERSION, privateGpsData.CurrentPosition.latitude, privateGpsData.CurrentPosition.longitude, privateGpsData.altitude, privateGpsData.spkm, privateGpsData.COG, privateGpsData.nsat);
 800aac8:	4b1b      	ldr	r3, [pc, #108]	@ (800ab38 <gpsLocationMessage+0xb8>)
 800aaca:	691b      	ldr	r3, [r3, #16]
	buffSize = snprintf(gpsBuff, GPS_MSG_SIZE, "\1{\"dev_id\":\"%lu\",\"type\":\"location\",\"timestamp\":\"%s\",\"version\":%d,\"latitude\":%f,\"longitude\":%f,\"altitude\":%f,\"speed\":%f,\"course\":%s,\"nsat\":%d}",
 800aacc:	4618      	mov	r0, r3
 800aace:	f7f5 fd49 	bl	8000564 <__aeabi_f2d>
 800aad2:	4682      	mov	sl, r0
 800aad4:	468b      	mov	fp, r1
			UNIQUE_Device_ID, timebuff, GPS_LOCATION_VERSION, privateGpsData.CurrentPosition.latitude, privateGpsData.CurrentPosition.longitude, privateGpsData.altitude, privateGpsData.spkm, privateGpsData.COG, privateGpsData.nsat);
 800aad6:	4b18      	ldr	r3, [pc, #96]	@ (800ab38 <gpsLocationMessage+0xb8>)
 800aad8:	6a1b      	ldr	r3, [r3, #32]
	buffSize = snprintf(gpsBuff, GPS_MSG_SIZE, "\1{\"dev_id\":\"%lu\",\"type\":\"location\",\"timestamp\":\"%s\",\"version\":%d,\"latitude\":%f,\"longitude\":%f,\"altitude\":%f,\"speed\":%f,\"course\":%s,\"nsat\":%d}",
 800aada:	4618      	mov	r0, r3
 800aadc:	f7f5 fd42 	bl	8000564 <__aeabi_f2d>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4914      	ldr	r1, [pc, #80]	@ (800ab38 <gpsLocationMessage+0xb8>)
 800aae6:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800aae8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aaea:	4914      	ldr	r1, [pc, #80]	@ (800ab3c <gpsLocationMessage+0xbc>)
 800aaec:	910a      	str	r1, [sp, #40]	@ 0x28
 800aaee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aaf2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800aaf6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800aafa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aafe:	2301      	movs	r3, #1
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	463b      	mov	r3, r7
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	4633      	mov	r3, r6
 800ab08:	4a0d      	ldr	r2, [pc, #52]	@ (800ab40 <gpsLocationMessage+0xc0>)
 800ab0a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800ab0e:	480d      	ldr	r0, [pc, #52]	@ (800ab44 <gpsLocationMessage+0xc4>)
 800ab10:	f01c fa4c 	bl	8026fac <sniprintf>
 800ab14:	61f8      	str	r0, [r7, #28]

	if(buffSize > 0 && buffSize < GPS_MSG_SIZE)
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	dd05      	ble.n	800ab28 <gpsLocationMessage+0xa8>
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ab22:	da01      	bge.n	800ab28 <gpsLocationMessage+0xa8>
	{
		return gpsBuff;
 800ab24:	4b07      	ldr	r3, [pc, #28]	@ (800ab44 <gpsLocationMessage+0xc4>)
 800ab26:	e000      	b.n	800ab2a <gpsLocationMessage+0xaa>
	}
	else
	{
		return "Failed to build location message\r\n";
 800ab28:	4b07      	ldr	r3, [pc, #28]	@ (800ab48 <gpsLocationMessage+0xc8>)
	}
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3724      	adds	r7, #36	@ 0x24
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab34:	0bfa0700 	.word	0x0bfa0700
 800ab38:	2007a28c 	.word	0x2007a28c
 800ab3c:	2007a2a4 	.word	0x2007a2a4
 800ab40:	0802e1a0 	.word	0x0802e1a0
 800ab44:	2007b284 	.word	0x2007b284
 800ab48:	0802e230 	.word	0x0802e230

0800ab4c <GPSActiveAntennaON>:


void GPSActiveAntennaON (MEM_PTR *Data_Ptr)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	Clear_Memory(Data_Ptr);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7fb fd94 	bl	8006682 <Clear_Memory>
	gpsError = false;
 800ab5a:	4b14      	ldr	r3, [pc, #80]	@ (800abac <GPSActiveAntennaON+0x60>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]

	PRINTF("Turning on active GPS antenna\r\n\r\n");
 800ab60:	4913      	ldr	r1, [pc, #76]	@ (800abb0 <GPSActiveAntennaON+0x64>)
 800ab62:	2001      	movs	r0, #1
 800ab64:	f7fc f906 	bl	8006d74 <TraceSend>

	Clear_Memory(Data_Ptr);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7fb fd8a 	bl	8006682 <Clear_Memory>

	CELL.COMMAND = GPS_ACTIVE_ANTENNA_ENABLE;
 800ab6e:	4b11      	ldr	r3, [pc, #68]	@ (800abb4 <GPSActiveAntennaON+0x68>)
 800ab70:	2234      	movs	r2, #52	@ 0x34
 800ab72:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f003 ff80 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f007 f887 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7fb fd7d 	bl	8006682 <Clear_Memory>

	CELL.COMMAND = GPS_ACTIVE_ANTENNA_SET;
 800ab88:	4b0a      	ldr	r3, [pc, #40]	@ (800abb4 <GPSActiveAntennaON+0x68>)
 800ab8a:	2235      	movs	r2, #53	@ 0x35
 800ab8c:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f003 ff73 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f007 f87a 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7fb fd70 	bl	8006682 <Clear_Memory>

}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000355 	.word	0x20000355
 800abb0:	0802e254 	.word	0x0802e254
 800abb4:	2007a330 	.word	0x2007a330

0800abb8 <EnableGPSXtraFunctionality>:

void EnableGPSXtraFunctionality (MEM_PTR *Data_Ptr)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
	Clear_Memory(Data_Ptr);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7fb fd5e 	bl	8006682 <Clear_Memory>
	gpsError = false;
 800abc6:	4b2c      	ldr	r3, [pc, #176]	@ (800ac78 <EnableGPSXtraFunctionality+0xc0>)
 800abc8:	2200      	movs	r2, #0
 800abca:	701a      	strb	r2, [r3, #0]

	PRINTF("Beginning XTRA GPS file check\r\n\r\n");
 800abcc:	492b      	ldr	r1, [pc, #172]	@ (800ac7c <EnableGPSXtraFunctionality+0xc4>)
 800abce:	2001      	movs	r0, #1
 800abd0:	f7fc f8d0 	bl	8006d74 <TraceSend>
	Clear_Memory(Data_Ptr);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f7fb fd54 	bl	8006682 <Clear_Memory>

	CELL.COMMAND = XTRA_ENABLE;
 800abda:	4b29      	ldr	r3, [pc, #164]	@ (800ac80 <EnableGPSXtraFunctionality+0xc8>)
 800abdc:	2230      	movs	r2, #48	@ 0x30
 800abde:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f003 ff4a 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f007 f851 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fb fd47 	bl	8006682 <Clear_Memory>

	CELL.COMMAND = XTRA_AUTODL_ENABLE;
 800abf4:	4b22      	ldr	r3, [pc, #136]	@ (800ac80 <EnableGPSXtraFunctionality+0xc8>)
 800abf6:	2231      	movs	r2, #49	@ 0x31
 800abf8:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f003 ff3d 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f007 f844 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7fb fd3a 	bl	8006682 <Clear_Memory>

	PRINTF("Restarting modem\r\n\r\n");
 800ac0e:	491d      	ldr	r1, [pc, #116]	@ (800ac84 <EnableGPSXtraFunctionality+0xcc>)
 800ac10:	2001      	movs	r0, #1
 800ac12:	f7fc f8af 	bl	8006d74 <TraceSend>
	restartModem();
 800ac16:	f7fe fb05 	bl	8009224 <restartModem>

	CELL.COMMAND = CELLID;
 800ac1a:	4b19      	ldr	r3, [pc, #100]	@ (800ac80 <EnableGPSXtraFunctionality+0xc8>)
 800ac1c:	2221      	movs	r2, #33	@ 0x21
 800ac1e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f003 ff2a 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f007 f831 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fb fd27 	bl	8006682 <Clear_Memory>

	CELL.COMMAND = XTRA_TIME_QUERY;
 800ac34:	4b12      	ldr	r3, [pc, #72]	@ (800ac80 <EnableGPSXtraFunctionality+0xc8>)
 800ac36:	2232      	movs	r2, #50	@ 0x32
 800ac38:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f003 ff1d 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f007 f824 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7fb fd1a 	bl	8006682 <Clear_Memory>

	CELL.COMMAND = GPS_ENABLE;
 800ac4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ac80 <EnableGPSXtraFunctionality+0xc8>)
 800ac50:	2216      	movs	r2, #22
 800ac52:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f003 ff10 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f007 f817 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7fb fd0d 	bl	8006682 <Clear_Memory>

	CELL.STATE = CELL_OK;
 800ac68:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <EnableGPSXtraFunctionality+0xc8>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

}
 800ac70:	bf00      	nop
 800ac72:	3708      	adds	r7, #8
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000355 	.word	0x20000355
 800ac7c:	0802e278 	.word	0x0802e278
 800ac80:	2007a330 	.word	0x2007a330
 800ac84:	0802e29c 	.word	0x0802e29c

0800ac88 <getGPS>:




void getGPS (MEM_PTR *Data_Ptr)
{
 800ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac8a:	b08f      	sub	sp, #60	@ 0x3c
 800ac8c:	af0c      	add	r7, sp, #48	@ 0x30
 800ac8e:	6078      	str	r0, [r7, #4]

	Clear_Memory(Data_Ptr);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7fb fcf6 	bl	8006682 <Clear_Memory>
	gpsError = false;
 800ac96:	4b4d      	ldr	r3, [pc, #308]	@ (800adcc <getGPS+0x144>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	701a      	strb	r2, [r3, #0]

#ifdef Log_Level_2
	Log_Single( LOG_MSG_CELL_GPSUPDT);
 800ac9c:	484c      	ldr	r0, [pc, #304]	@ (800add0 <getGPS+0x148>)
 800ac9e:	f7fb ff05 	bl	8006aac <Log_Single>
//	CELL.COMMAND = CHECK;
//	CELL_COMMAND(Data_Ptr);
//	if (CELL.STATE != CELL_OK)
//		return;

	CELL.COMMAND = CHECK;
 800aca2:	4b4c      	ldr	r3, [pc, #304]	@ (800add4 <getGPS+0x14c>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f003 fee6 	bl	800ea7c <CELL_COMMAND>
	CELL.COMMAND = GPS_ENABLE;
 800acb0:	4b48      	ldr	r3, [pc, #288]	@ (800add4 <getGPS+0x14c>)
 800acb2:	2216      	movs	r2, #22
 800acb4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f003 fedf 	bl	800ea7c <CELL_COMMAND>
	CELL.COMMAND = CHECK;
 800acbe:	4b45      	ldr	r3, [pc, #276]	@ (800add4 <getGPS+0x14c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f003 fed8 	bl	800ea7c <CELL_COMMAND>
	//GAV GPS timeout
	//	TIME_DATE_TYPE stopTime;
	//	uint16_t timeDelay = GPS_Timeout;
	//
	//	calculateStopTime ( &stopTime, timeDelay);
	Clear_Memory(Data_Ptr);   //Added by Kevin
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7fb fcd8 	bl	8006682 <Clear_Memory>
	CELL.COMMAND = CHECK;
 800acd2:	4b40      	ldr	r3, [pc, #256]	@ (800add4 <getGPS+0x14c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f003 fece 	bl	800ea7c <CELL_COMMAND>
	CELL.COMMAND = LOCATION;
 800ace0:	4b3c      	ldr	r3, [pc, #240]	@ (800add4 <getGPS+0x14c>)
 800ace2:	2218      	movs	r2, #24
 800ace4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f003 fec7 	bl	800ea7c <CELL_COMMAND>

	calculateNextTime(&nextGps, GPS_TIMEOUT_59S);
 800acee:	213b      	movs	r1, #59	@ 0x3b
 800acf0:	4839      	ldr	r0, [pc, #228]	@ (800add8 <getGPS+0x150>)
 800acf2:	f7fd fd6b 	bl	80087cc <calculateNextTime>
	while (IsError2(Data_Ptr) && (!checkNextTime(checkGps, nextGps)))
 800acf6:	e010      	b.n	800ad1a <getGPS+0x92>
	{
		Clear_Memory(Data_Ptr);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7fb fcc2 	bl	8006682 <Clear_Memory>
		CELL.COMMAND = CHECK;
 800acfe:	4b35      	ldr	r3, [pc, #212]	@ (800add4 <getGPS+0x14c>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f003 feb8 	bl	800ea7c <CELL_COMMAND>
		CELL.COMMAND = LOCATION;
 800ad0c:	4b31      	ldr	r3, [pc, #196]	@ (800add4 <getGPS+0x14c>)
 800ad0e:	2218      	movs	r2, #24
 800ad10:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f003 feb1 	bl	800ea7c <CELL_COMMAND>
	while (IsError2(Data_Ptr) && (!checkNextTime(checkGps, nextGps)))
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fb fd48 	bl	80067b0 <IsError2>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d019      	beq.n	800ad5a <getGPS+0xd2>
 800ad26:	4e2d      	ldr	r6, [pc, #180]	@ (800addc <getGPS+0x154>)
 800ad28:	4b2b      	ldr	r3, [pc, #172]	@ (800add8 <getGPS+0x150>)
 800ad2a:	ac04      	add	r4, sp, #16
 800ad2c:	461d      	mov	r5, r3
 800ad2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ad36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad3a:	466c      	mov	r4, sp
 800ad3c:	f106 0310 	add.w	r3, r6, #16
 800ad40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800ad4a:	f7fd fdc1 	bl	80088d0 <checkNextTime>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f083 0301 	eor.w	r3, r3, #1
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1ce      	bne.n	800acf8 <getGPS+0x70>
	}

	if (!gpsGetData((char*)Data_Ptr->Memory))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ad60:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7ff fabd 	bl	800a2e4 <gpsGetData>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	f083 0301 	eor.w	r3, r3, #1
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d01f      	beq.n	800adb6 <getGPS+0x12e>
	{
#ifdef Log_Level_2
		if (Data_Ptr->Setting & LOG_LEVEL_1) // && Setting & LOG_LEVEL_2)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ad7c:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d00e      	beq.n	800ada6 <getGPS+0x11e>
		{
			Write_Log( LOG_DEVICE_ID);
 800ad88:	4815      	ldr	r0, [pc, #84]	@ (800ade0 <getGPS+0x158>)
 800ad8a:	f7fb fecf 	bl	8006b2c <Write_Log>
			Write_Log(gpsGetLocationBuff());
 800ad8e:	f7ff fe53 	bl	800aa38 <gpsGetLocationBuff>
 800ad92:	4603      	mov	r3, r0
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fb fec9 	bl	8006b2c <Write_Log>
			Write_Log( LOG_TAIL);
 800ad9a:	4812      	ldr	r0, [pc, #72]	@ (800ade4 <getGPS+0x15c>)
 800ad9c:	f7fb fec6 	bl	8006b2c <Write_Log>
#ifdef UART_USB
			Read_Last_UART_Log(Data_Ptr);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7fb ff9d 	bl	8006ce0 <Read_Last_UART_Log>
#endif
		}
#endif
		CELL.COMMAND = CHECK;
 800ada6:	4b0b      	ldr	r3, [pc, #44]	@ (800add4 <getGPS+0x14c>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f003 fe64 	bl	800ea7c <CELL_COMMAND>
	else
	{
		Log_Single ("\1 MODEM : GPS Update Failed Timeout\r\n\0" );
		gpsError = true;
	}
}
 800adb4:	e005      	b.n	800adc2 <getGPS+0x13a>
		Log_Single ("\1 MODEM : GPS Update Failed Timeout\r\n\0" );
 800adb6:	480c      	ldr	r0, [pc, #48]	@ (800ade8 <getGPS+0x160>)
 800adb8:	f7fb fe78 	bl	8006aac <Log_Single>
		gpsError = true;
 800adbc:	4b03      	ldr	r3, [pc, #12]	@ (800adcc <getGPS+0x144>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	701a      	strb	r2, [r3, #0]
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adca:	bf00      	nop
 800adcc:	20000355 	.word	0x20000355
 800add0:	0802e2b4 	.word	0x0802e2b4
 800add4:	2007a330 	.word	0x2007a330
 800add8:	2007a2f0 	.word	0x2007a2f0
 800addc:	2007a2d0 	.word	0x2007a2d0
 800ade0:	0802e2cc 	.word	0x0802e2cc
 800ade4:	0802e2dc 	.word	0x0802e2dc
 800ade8:	0802e2e0 	.word	0x0802e2e0

0800adec <sendGPS>:

void sendGPS (MEM_PTR *Data_Ptr)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	if (!gpsError)
 800adf4:	4b1f      	ldr	r3, [pc, #124]	@ (800ae74 <sendGPS+0x88>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	f083 0301 	eor.w	r3, r3, #1
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d034      	beq.n	800ae6c <sendGPS+0x80>
	{
		Clear_Memory(Data_Ptr);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7fb fc3d 	bl	8006682 <Clear_Memory>
		Data_Ptr->Buffer = 0;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ae0e:	461a      	mov	r2, r3
 800ae10:	2300      	movs	r3, #0
 800ae12:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
		Build_MSG(Data_Ptr, gpsLocationMessage());
 800ae16:	f7ff fe33 	bl	800aa80 <gpsLocationMessage>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7fb fdac 	bl	800697c <Build_MSG>
		Data_Ptr->Size = Data_Ptr->Buffer;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ae2a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800ae34:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL.COMMAND = PUBLISH;
 800ae38:	4b0f      	ldr	r3, [pc, #60]	@ (800ae78 <sendGPS+0x8c>)
 800ae3a:	2210      	movs	r2, #16
 800ae3c:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f003 fe1b 	bl	800ea7c <CELL_COMMAND>
		CELL.COMMAND = PUBLISH_MEM;
 800ae46:	4b0c      	ldr	r3, [pc, #48]	@ (800ae78 <sendGPS+0x8c>)
 800ae48:	2213      	movs	r2, #19
 800ae4a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f003 fe14 	bl	800ea7c <CELL_COMMAND>

		uint32_t seconds = (privateGpsParameters.gpsInterval * 60);
 800ae54:	4b09      	ldr	r3, [pc, #36]	@ (800ae7c <sendGPS+0x90>)
 800ae56:	88db      	ldrh	r3, [r3, #6]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	60fb      	str	r3, [r7, #12]
		calculateNextTime( &nextAcquireGPS, seconds);
 800ae64:	68f9      	ldr	r1, [r7, #12]
 800ae66:	4806      	ldr	r0, [pc, #24]	@ (800ae80 <sendGPS+0x94>)
 800ae68:	f7fd fcb0 	bl	80087cc <calculateNextTime>
	}
}
 800ae6c:	bf00      	nop
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	20000355 	.word	0x20000355
 800ae78:	2007a330 	.word	0x2007a330
 800ae7c:	2007a280 	.word	0x2007a280
 800ae80:	2007a310 	.word	0x2007a310

0800ae84 <getMutePeriodGPS>:

uint16_t getMutePeriodGPS(void)
{
 800ae84:	b480      	push	{r7}
 800ae86:	af00      	add	r7, sp, #0
	return privateGpsParameters.alarmSamplePeriod;
 800ae88:	4b03      	ldr	r3, [pc, #12]	@ (800ae98 <getMutePeriodGPS+0x14>)
 800ae8a:	885b      	ldrh	r3, [r3, #2]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	2007a280 	.word	0x2007a280

0800ae9c <HAL_RTC_AlarmAEventCallback>:
 Configures Clock Alarm A Interrupt
 Note: Updates acceleration, temperature, and
 humidity and sends heart beat to server.
 ******************************************************/
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef *hrtc )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b090      	sub	sp, #64	@ 0x40
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
	Refresh_Watchdog;
 800aea4:	4830      	ldr	r0, [pc, #192]	@ (800af68 <HAL_RTC_AlarmAEventCallback+0xcc>)
 800aea6:	f010 f994 	bl	801b1d2 <HAL_IWDG_Refresh>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <HAL_RTC_AlarmAEventCallback+0x18>
 800aeb0:	f00a fc70 	bl	8015794 <Error_Handler>

#ifdef Log_Level_2
	Log_Single ( LOG_DEVICE_CLOCK_A );
 800aeb4:	482d      	ldr	r0, [pc, #180]	@ (800af6c <HAL_RTC_AlarmAEventCallback+0xd0>)
 800aeb6:	f7fb fdf9 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	RTC_AlarmTypeDef sAlarm;

	HAL_RTC_GetAlarm ( hrtc , &sAlarm , RTC_ALARM_A , FORMAT_BIN );
 800aeba:	f107 0108 	add.w	r1, r7, #8
 800aebe:	2300      	movs	r3, #0
 800aec0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f016 fc35 	bl	8021734 <HAL_RTC_GetAlarm>
	//	}
	//	else sAlarm.AlarmTime.Hours += Alarm_Value_Hours;

	//	sAlarm.AlarmTime.Minutes += Alarm_Value_Minutes;

	sAlarm.AlarmTime.Hours += Heartbeat_Default_Hours;
 800aeca:	7a3b      	ldrb	r3, [r7, #8]
 800aecc:	3304      	adds	r3, #4
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	723b      	strb	r3, [r7, #8]

	if (sAlarm.AlarmTime.Hours > 24)
 800aed2:	7a3b      	ldrb	r3, [r7, #8]
 800aed4:	2b18      	cmp	r3, #24
 800aed6:	d903      	bls.n	800aee0 <HAL_RTC_AlarmAEventCallback+0x44>
	{
		sAlarm.AlarmTime.Hours = (sAlarm.AlarmTime.Hours - 24);
 800aed8:	7a3b      	ldrb	r3, [r7, #8]
 800aeda:	3b18      	subs	r3, #24
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	723b      	strb	r3, [r7, #8]
	}

	//KCS Possible code hang here
	while (HAL_RTC_SetAlarm_IT ( hrtc , &sAlarm , FORMAT_BIN ) != HAL_OK);
 800aee0:	bf00      	nop
 800aee2:	f107 0308 	add.w	r3, r7, #8
 800aee6:	2200      	movs	r2, #0
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f016 fade 	bl	80214ac <HAL_RTC_SetAlarm_IT>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f5      	bne.n	800aee2 <HAL_RTC_AlarmAEventCallback+0x46>

	switch (memory.Mode)
 800aef6:	4b1e      	ldr	r3, [pc, #120]	@ (800af70 <HAL_RTC_AlarmAEventCallback+0xd4>)
 800aef8:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 800aefc:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 800af00:	2b04      	cmp	r3, #4
 800af02:	d82c      	bhi.n	800af5e <HAL_RTC_AlarmAEventCallback+0xc2>
 800af04:	a201      	add	r2, pc, #4	@ (adr r2, 800af0c <HAL_RTC_AlarmAEventCallback+0x70>)
 800af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0a:	bf00      	nop
 800af0c:	0800af21 	.word	0x0800af21
 800af10:	0800af5d 	.word	0x0800af5d
 800af14:	0800af3f 	.word	0x0800af3f
 800af18:	0800af5d 	.word	0x0800af5d
 800af1c:	0800af5d 	.word	0x0800af5d
	{
	case DEV_Mode_A:
		memory.State |= WAKE_STATE + ACCEL_UPDT + HUMD_UPDT + TEMP_UPDT + UPDATE_SERVER;
 800af20:	4b13      	ldr	r3, [pc, #76]	@ (800af70 <HAL_RTC_AlarmAEventCallback+0xd4>)
 800af22:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800af26:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800af2a:	f443 6368 	orr.w	r3, r3, #3712	@ 0xe80
 800af2e:	f043 0301 	orr.w	r3, r3, #1
 800af32:	4a0f      	ldr	r2, [pc, #60]	@ (800af70 <HAL_RTC_AlarmAEventCallback+0xd4>)
 800af34:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800af38:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		break;
 800af3c:	e00f      	b.n	800af5e <HAL_RTC_AlarmAEventCallback+0xc2>
	case DEV_Mode_B:
		break;
	case DEV_Mode_C:
		memory.State |= WAKE_STATE + ACCEL_UPDT + HUMD_UPDT + TEMP_UPDT + UPDATE_SERVER;
 800af3e:	4b0c      	ldr	r3, [pc, #48]	@ (800af70 <HAL_RTC_AlarmAEventCallback+0xd4>)
 800af40:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800af44:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800af48:	f443 6368 	orr.w	r3, r3, #3712	@ 0xe80
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	4a07      	ldr	r2, [pc, #28]	@ (800af70 <HAL_RTC_AlarmAEventCallback+0xd4>)
 800af52:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800af56:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		break;
 800af5a:	e000      	b.n	800af5e <HAL_RTC_AlarmAEventCallback+0xc2>
		break;
 800af5c:	bf00      	nop
	case DEV_Mode_D:
		break;
	case DEV_Mode_E:
		break;
	}
}
 800af5e:	bf00      	nop
 800af60:	3740      	adds	r7, #64	@ 0x40
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	2007d0bc 	.word	0x2007d0bc
 800af6c:	0802e308 	.word	0x0802e308
 800af70:	2007d870 	.word	0x2007d870

0800af74 <HAL_PWREx_S3WUCallback>:
//	}
//}


void HAL_PWREx_S3WUCallback(uint32_t WakeUpPin)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800af7c:	4852      	ldr	r0, [pc, #328]	@ (800b0c8 <HAL_PWREx_S3WUCallback+0x154>)
 800af7e:	f016 fdf5 	bl	8021b6c <HAL_RTCEx_DeactivateWakeUpTimer>
	HAL_ResumeTick();
 800af82:	f00b fab3 	bl	80164ec <HAL_ResumeTick>
	HAL_Init();
 800af86:	f00b f9f9 	bl	801637c <HAL_Init>

	HAL_PWR_DisableWakeUpPin ( GPIO_PIN_1 );
 800af8a:	2002      	movs	r0, #2
 800af8c:	f011 fe6e 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
	HAL_PWR_DisableWakeUpPin ( GPIO_PIN_0 );
 800af90:	2001      	movs	r0, #1
 800af92:	f011 fe6b 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
	HAL_PWR_DisableWakeUpPin ( PWR_WAKEUP_PIN6 );
 800af96:	2020      	movs	r0, #32
 800af98:	f011 fe68 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
	HAL_PWR_DisableWakeUpPin ( PWR_WAKEUP_PIN6_HIGH_1 );
 800af9c:	484b      	ldr	r0, [pc, #300]	@ (800b0cc <HAL_PWREx_S3WUCallback+0x158>)
 800af9e:	f011 fe65 	bl	801cc6c <HAL_PWR_DisableWakeUpPin>
	HAL_NVIC_DisableIRQ(PWR_S3WU_IRQn);
 800afa2:	204d      	movs	r0, #77	@ 0x4d
 800afa4:	f00d fc1c 	bl	80187e0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);  //PIR
 800afa8:	200b      	movs	r0, #11
 800afaa:	f00d fc19 	bl	80187e0 <HAL_NVIC_DisableIRQ>
	//	HAL_NVIC_DisableIRQ(EXTI1_IRQn);  //PIR
	HAL_NVIC_DisableIRQ(EXTI6_IRQn);  //Accelerometer
 800afae:	2011      	movs	r0, #17
 800afb0:	f00d fc16 	bl	80187e0 <HAL_NVIC_DisableIRQ>

	SystemClock_Config();
 800afb4:	f009 feba 	bl	8014d2c <SystemClock_Config>
	MX_GPIO_Init();
 800afb8:	f00a fa5e 	bl	8015478 <MX_GPIO_Init>
	//		MX_ADC1_Init();
	MX_I2C1_Init();
 800afbc:	f009 ff8a 	bl	8014ed4 <MX_I2C1_Init>
	MX_OCTOSPI1_Init();
 800afc0:	f00a f878 	bl	80150b4 <MX_OCTOSPI1_Init>
	MX_USART2_UART_Init();
 800afc4:	f00a f82a 	bl	801501c <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800afc8:	f00a f9c0 	bl	801534c <MX_SPI2_Init>
	MX_LPUART1_UART_Init();
 800afcc:	f009 ffe2 	bl	8014f94 <MX_LPUART1_UART_Init>
	//		MX_LPTIM1_Init();
	MX_CRC_Init();
 800afd0:	f009 ff5e 	bl	8014e90 <MX_CRC_Init>
	//		MX_LPTIM2_Init();
	//		MX_LPTIM3_Init();
	//		PACKAGE_Init( &memory );
	LOG_Init();
 800afd4:	f7fb fd0e 	bl	80069f4 <LOG_Init>
	//		HAL_NVIC_DisableIRQ(PWR_S3WU_IRQn);

	//		PRINTF("PIR wakeup initiated\r\n");

	//	    __HAL_PWR_CLEAR_FLAG(PWR_WAKEUP_FLAG1);  // Clear wakeup interrupt flag
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_STOPF);  // Clear wakeup interrupt flag
 800afd8:	4b3d      	ldr	r3, [pc, #244]	@ (800b0d0 <HAL_PWREx_S3WUCallback+0x15c>)
 800afda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afdc:	4a3c      	ldr	r2, [pc, #240]	@ (800b0d0 <HAL_PWREx_S3WUCallback+0x15c>)
 800afde:	f043 0301 	orr.w	r3, r3, #1
 800afe2:	6393      	str	r3, [r2, #56]	@ 0x38



	if (WakeUpPin == GPIO_PIN_0)  //PIR
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d129      	bne.n	800b03e <HAL_PWREx_S3WUCallback+0xca>
	{
		memory.State |= WAKE_STATE + PIC_UPDT + PIC_SEND + PIR_UPDT + PIR_START + BUZZER_TOGGLE;
 800afea:	4b3a      	ldr	r3, [pc, #232]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800afec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800aff0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800aff4:	f443 1339 	orr.w	r3, r3, #3031040	@ 0x2e4000
 800aff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800affc:	4a35      	ldr	r2, [pc, #212]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800affe:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b002:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b006:	4b33      	ldr	r3, [pc, #204]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b008:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b00c:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <HAL_PWREx_S3WUCallback+0xbc>
		{
			memory.State ^= UPDATE_SERVER;
 800b018:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b01a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b01e:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b022:	f083 0301 	eor.w	r3, r3, #1
 800b026:	4a2b      	ldr	r2, [pc, #172]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b028:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b02c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		pIRTriggered = true;
 800b030:	4b29      	ldr	r3, [pc, #164]	@ (800b0d8 <HAL_PWREx_S3WUCallback+0x164>)
 800b032:	2201      	movs	r2, #1
 800b034:	701a      	strb	r2, [r3, #0]

		CLEAR_REG(PWR->WUSR);
 800b036:	4b26      	ldr	r3, [pc, #152]	@ (800b0d0 <HAL_PWREx_S3WUCallback+0x15c>)
 800b038:	2200      	movs	r2, #0
 800b03a:	645a      	str	r2, [r3, #68]	@ 0x44
		//			HAL_GPIO_WritePin ( Buzzer_GPIO_Port , Buzzer_Pin , GPIO_PIN_SET );          //for simulated battery power operation
	}
    // need to add temperature and charger connected/disconnected interrupts here


}
 800b03c:	e040      	b.n	800b0c0 <HAL_PWREx_S3WUCallback+0x14c>
	else if (WakeUpPin == GPIO_PIN_6)  // accelerometer
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b40      	cmp	r3, #64	@ 0x40
 800b042:	d13d      	bne.n	800b0c0 <HAL_PWREx_S3WUCallback+0x14c>
		memory.State |= WAKE_STATE + HB_UPDT + MOVEMENT_UPDT + GPS_UPDT;
 800b044:	4b23      	ldr	r3, [pc, #140]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b046:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b04a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b04e:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 800b052:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 800b056:	4a1f      	ldr	r2, [pc, #124]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b058:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b05c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b060:	4b1c      	ldr	r3, [pc, #112]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b062:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b066:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <HAL_PWREx_S3WUCallback+0x116>
			memory.State ^= UPDATE_SERVER;
 800b072:	4b18      	ldr	r3, [pc, #96]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b074:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b078:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b07c:	f083 0301 	eor.w	r3, r3, #1
 800b080:	4a14      	ldr	r2, [pc, #80]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b082:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b086:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & PIC_UPDT )
 800b08a:	4b12      	ldr	r3, [pc, #72]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b08c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b090:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <HAL_PWREx_S3WUCallback+0x140>
			memory.State ^= PIC_UPDT;
 800b09c:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b09e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b0a2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b0a6:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800b0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800b0d4 <HAL_PWREx_S3WUCallback+0x160>)
 800b0ac:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b0b0:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		accelTriggered = true;
 800b0b4:	4b09      	ldr	r3, [pc, #36]	@ (800b0dc <HAL_PWREx_S3WUCallback+0x168>)
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(PWR->WUSR);
 800b0ba:	4b05      	ldr	r3, [pc, #20]	@ (800b0d0 <HAL_PWREx_S3WUCallback+0x15c>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	645a      	str	r2, [r3, #68]	@ 0x44
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	2007d344 	.word	0x2007d344
 800b0cc:	04000020 	.word	0x04000020
 800b0d0:	46020800 	.word	0x46020800
 800b0d4:	2007d870 	.word	0x2007d870
 800b0d8:	2007a278 	.word	0x2007a278
 800b0dc:	2007a27a 	.word	0x2007a27a

0800b0e0 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

	//	HAL_NVIC_DisableIRQ(PWR_S3WU_IRQn);
	//	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	CLEAR_REG(RTC->ICSR);
 800b0e8:	4bc4      	ldr	r3, [pc, #784]	@ (800b3fc <HAL_RTCEx_WakeUpTimerEventCallback+0x31c>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	60da      	str	r2, [r3, #12]
	CLEAR_REG(RTC->WUTR);
 800b0ee:	4bc3      	ldr	r3, [pc, #780]	@ (800b3fc <HAL_RTCEx_WakeUpTimerEventCallback+0x31c>)
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	615a      	str	r2, [r3, #20]
	CLEAR_REG(RTC->CR);
 800b0f4:	4bc1      	ldr	r3, [pc, #772]	@ (800b3fc <HAL_RTCEx_WakeUpTimerEventCallback+0x31c>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	619a      	str	r2, [r3, #24]
	CLEAR_REG(PWR->WUSCR);
 800b0fa:	4bc1      	ldr	r3, [pc, #772]	@ (800b400 <HAL_RTCEx_WakeUpTimerEventCallback+0x320>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	649a      	str	r2, [r3, #72]	@ 0x48
	//
	__HAL_RTC_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);  // Clear WUTF flag
 800b100:	4bbe      	ldr	r3, [pc, #760]	@ (800b3fc <HAL_RTCEx_WakeUpTimerEventCallback+0x31c>)
 800b102:	f240 2202 	movw	r2, #514	@ 0x202
 800b106:	65da      	str	r2, [r3, #92]	@ 0x5c

	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f016 fd2f 	bl	8021b6c <HAL_RTCEx_DeactivateWakeUpTimer>
	HAL_ResumeTick();
 800b10e:	f00b f9ed 	bl	80164ec <HAL_ResumeTick>
	HAL_Init();
 800b112:	f00b f933 	bl	801637c <HAL_Init>
	SystemClock_Config();
 800b116:	f009 fe09 	bl	8014d2c <SystemClock_Config>
	MX_GPIO_Init();
 800b11a:	f00a f9ad 	bl	8015478 <MX_GPIO_Init>
	//		MX_ADC1_Init();
	MX_I2C1_Init();
 800b11e:	f009 fed9 	bl	8014ed4 <MX_I2C1_Init>
	MX_OCTOSPI1_Init();
 800b122:	f009 ffc7 	bl	80150b4 <MX_OCTOSPI1_Init>
	MX_USART2_UART_Init();
 800b126:	f009 ff79 	bl	801501c <MX_USART2_UART_Init>
	MX_SPI2_Init();
 800b12a:	f00a f90f 	bl	801534c <MX_SPI2_Init>
	MX_LPUART1_UART_Init();
 800b12e:	f009 ff31 	bl	8014f94 <MX_LPUART1_UART_Init>
	//		MX_LPTIM1_Init();
	MX_CRC_Init();
 800b132:	f009 fead 	bl	8014e90 <MX_CRC_Init>
	//		MX_LPTIM2_Init();
	//		MX_LPTIM3_Init();
	//		PACKAGE_Init( &memory );
	LOG_Init();
 800b136:	f7fb fc5d 	bl	80069f4 <LOG_Init>

	HAL_NVIC_DisableIRQ(PWR_S3WU_IRQn);
 800b13a:	204d      	movs	r0, #77	@ 0x4d
 800b13c:	f00d fb50 	bl	80187e0 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_IRQn);
 800b140:	2002      	movs	r0, #2
 800b142:	f00d fb4d 	bl	80187e0 <HAL_NVIC_DisableIRQ>

	//		PACKAGE_Init( &memory );
	//	LOG_Init();

	//	PRINTF("Timer wakeup initiated\r\n");
	PRINTF("HBWakeupEnabled is %d, accelWakeupEnabled is %d\r\n",HBWakeupEnabled, accelWakeupEnabled);
 800b146:	4baf      	ldr	r3, [pc, #700]	@ (800b404 <HAL_RTCEx_WakeUpTimerEventCallback+0x324>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	461a      	mov	r2, r3
 800b14c:	4bae      	ldr	r3, [pc, #696]	@ (800b408 <HAL_RTCEx_WakeUpTimerEventCallback+0x328>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	49ae      	ldr	r1, [pc, #696]	@ (800b40c <HAL_RTCEx_WakeUpTimerEventCallback+0x32c>)
 800b152:	2001      	movs	r0, #1
 800b154:	f7fb fe0e 	bl	8006d74 <TraceSend>

	//we need to get rid of this method that we are setting the states with
	if (wakeupState == hb_wu_enabled)
 800b158:	4bad      	ldr	r3, [pc, #692]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	2b15      	cmp	r3, #21
 800b15e:	d139      	bne.n	800b1d4 <HAL_RTCEx_WakeUpTimerEventCallback+0xf4>
	{
		memory.State |= WAKE_STATE + HB_UPDT + GPS_UPDT;
 800b160:	4bac      	ldr	r3, [pc, #688]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b162:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b166:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b16a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b16e:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 800b172:	4aa8      	ldr	r2, [pc, #672]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b174:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b178:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b17c:	4ba5      	ldr	r3, [pc, #660]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b17e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b182:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <HAL_RTCEx_WakeUpTimerEventCallback+0xc6>
		{
			memory.State ^= UPDATE_SERVER;
 800b18e:	4ba1      	ldr	r3, [pc, #644]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b190:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b194:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b198:	f083 0301 	eor.w	r3, r3, #1
 800b19c:	4a9d      	ldr	r2, [pc, #628]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b19e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b1a2:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		if (memory.State & PIC_UPDT )
 800b1a6:	4b9b      	ldr	r3, [pc, #620]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b1a8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b1ac:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b1b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 81ea 	beq.w	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
		{
			memory.State ^= PIC_UPDT;
 800b1ba:	4b96      	ldr	r3, [pc, #600]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b1bc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b1c0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b1c4:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800b1c8:	4a92      	ldr	r2, [pc, #584]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b1ca:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b1ce:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
 800b1d2:	e1dc      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
		}

	}
	else if (wakeupState == acc_wu_enabled)
 800b1d4:	4b8e      	ldr	r3, [pc, #568]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	2b16      	cmp	r3, #22
 800b1da:	d13e      	bne.n	800b25a <HAL_RTCEx_WakeUpTimerEventCallback+0x17a>
	{
		memory.State |= WAKE_STATE + HB_UPDT + MOVEMENT_UPDT + GPS_UPDT;  //movement stop
 800b1dc:	4b8d      	ldr	r3, [pc, #564]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b1de:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b1e2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b1e6:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 800b1ea:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 800b1ee:	4a89      	ldr	r2, [pc, #548]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b1f0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b1f4:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b1f8:	4b86      	ldr	r3, [pc, #536]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b1fa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b1fe:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00b      	beq.n	800b222 <HAL_RTCEx_WakeUpTimerEventCallback+0x142>
		{
			memory.State ^= UPDATE_SERVER;
 800b20a:	4b82      	ldr	r3, [pc, #520]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b20c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b210:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b214:	f083 0301 	eor.w	r3, r3, #1
 800b218:	4a7e      	ldr	r2, [pc, #504]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b21a:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b21e:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		if (memory.State & PIC_UPDT )
 800b222:	4b7c      	ldr	r3, [pc, #496]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b224:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b228:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b22c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00b      	beq.n	800b24c <HAL_RTCEx_WakeUpTimerEventCallback+0x16c>
		{
			memory.State ^= PIC_UPDT;
 800b234:	4b77      	ldr	r3, [pc, #476]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b236:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b23a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b23e:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 800b242:	4a74      	ldr	r2, [pc, #464]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b244:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b248:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		accelMuteInit = false;
 800b24c:	4b72      	ldr	r3, [pc, #456]	@ (800b418 <HAL_RTCEx_WakeUpTimerEventCallback+0x338>)
 800b24e:	2200      	movs	r2, #0
 800b250:	701a      	strb	r2, [r3, #0]
		movementstop = true;
 800b252:	4b72      	ldr	r3, [pc, #456]	@ (800b41c <HAL_RTCEx_WakeUpTimerEventCallback+0x33c>)
 800b254:	2201      	movs	r2, #1
 800b256:	701a      	strb	r2, [r3, #0]
 800b258:	e199      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
	}
	else if (wakeupState == img_wu_enabled)
 800b25a:	4b6d      	ldr	r3, [pc, #436]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b25c:	881b      	ldrh	r3, [r3, #0]
 800b25e:	2b17      	cmp	r3, #23
 800b260:	d124      	bne.n	800b2ac <HAL_RTCEx_WakeUpTimerEventCallback+0x1cc>
	{
		memory.State |= WAKE_STATE + PIC_UPDT + PIC_SEND + PIR_END;  //motion stop
 800b262:	4b6c      	ldr	r3, [pc, #432]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b264:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b268:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
 800b26c:	4b6c      	ldr	r3, [pc, #432]	@ (800b420 <HAL_RTCEx_WakeUpTimerEventCallback+0x340>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	4a68      	ldr	r2, [pc, #416]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b272:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b276:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b27a:	4b66      	ldr	r3, [pc, #408]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b27c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b280:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00b      	beq.n	800b2a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c4>
		{
			memory.State ^= UPDATE_SERVER;
 800b28c:	4b61      	ldr	r3, [pc, #388]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b28e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b292:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b296:	f083 0301 	eor.w	r3, r3, #1
 800b29a:	4a5e      	ldr	r2, [pc, #376]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b29c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b2a0:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		MuteInit = false;
 800b2a4:	4b5f      	ldr	r3, [pc, #380]	@ (800b424 <HAL_RTCEx_WakeUpTimerEventCallback+0x344>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	701a      	strb	r2, [r3, #0]
 800b2aa:	e170      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
	}
	else if (wakeupState == pGPS_wu_enabled)
 800b2ac:	4b58      	ldr	r3, [pc, #352]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	2b18      	cmp	r3, #24
 800b2b2:	d122      	bne.n	800b2fa <HAL_RTCEx_WakeUpTimerEventCallback+0x21a>
	{
		memory.State |= WAKE_STATE + GPS_UPDT;  //motion stop
 800b2b4:	4b57      	ldr	r3, [pc, #348]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b2b6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b2ba:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b2be:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 800b2c2:	4a54      	ldr	r2, [pc, #336]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b2c4:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b2c8:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b2cc:	4b51      	ldr	r3, [pc, #324]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b2ce:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b2d2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 8157 	beq.w	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
		{
			memory.State ^= UPDATE_SERVER;
 800b2e0:	4b4c      	ldr	r3, [pc, #304]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b2e2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b2e6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b2ea:	f083 0301 	eor.w	r3, r3, #1
 800b2ee:	4a49      	ldr	r2, [pc, #292]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b2f0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b2f4:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
 800b2f8:	e149      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
		}

	}
	else if (wakeupState == hb_img_pair)
 800b2fa:	4b45      	ldr	r3, [pc, #276]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	2b0c      	cmp	r3, #12
 800b300:	d124      	bne.n	800b34c <HAL_RTCEx_WakeUpTimerEventCallback+0x26c>
	{
		memory.State |= WAKE_STATE + HB_UPDT  + GPS_UPDT + PIC_UPDT + PIC_SEND + PIR_END;
 800b302:	4b44      	ldr	r3, [pc, #272]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b304:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b308:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
 800b30c:	4b46      	ldr	r3, [pc, #280]	@ (800b428 <HAL_RTCEx_WakeUpTimerEventCallback+0x348>)
 800b30e:	4313      	orrs	r3, r2
 800b310:	4a40      	ldr	r2, [pc, #256]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b312:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b316:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b31a:	4b3e      	ldr	r3, [pc, #248]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b31c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b320:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00b      	beq.n	800b344 <HAL_RTCEx_WakeUpTimerEventCallback+0x264>
		{
			memory.State ^= UPDATE_SERVER;
 800b32c:	4b39      	ldr	r3, [pc, #228]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b32e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b332:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b336:	f083 0301 	eor.w	r3, r3, #1
 800b33a:	4a36      	ldr	r2, [pc, #216]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b33c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b340:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		MuteInit = false;
 800b344:	4b37      	ldr	r3, [pc, #220]	@ (800b424 <HAL_RTCEx_WakeUpTimerEventCallback+0x344>)
 800b346:	2200      	movs	r2, #0
 800b348:	701a      	strb	r2, [r3, #0]
 800b34a:	e120      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>

	}
	else if (wakeupState == hb_acc_pair)
 800b34c:	4b30      	ldr	r3, [pc, #192]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	2b0d      	cmp	r3, #13
 800b352:	d129      	bne.n	800b3a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c8>
	{
		memory.State |= WAKE_STATE + HB_UPDT + MOVEMENT_UPDT + GPS_UPDT;
 800b354:	4b2f      	ldr	r3, [pc, #188]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b356:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b35a:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b35e:	f043 53c0 	orr.w	r3, r3, #402653184	@ 0x18000000
 800b362:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 800b366:	4a2b      	ldr	r2, [pc, #172]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b368:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b36c:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b370:	4b28      	ldr	r3, [pc, #160]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b372:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b376:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00b      	beq.n	800b39a <HAL_RTCEx_WakeUpTimerEventCallback+0x2ba>
		{
			memory.State ^= UPDATE_SERVER;
 800b382:	4b24      	ldr	r3, [pc, #144]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b384:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b388:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b38c:	f083 0301 	eor.w	r3, r3, #1
 800b390:	4a20      	ldr	r2, [pc, #128]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b392:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b396:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		accelMuteInit = false;
 800b39a:	4b1f      	ldr	r3, [pc, #124]	@ (800b418 <HAL_RTCEx_WakeUpTimerEventCallback+0x338>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	701a      	strb	r2, [r3, #0]
		movementstop = true;
 800b3a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b41c <HAL_RTCEx_WakeUpTimerEventCallback+0x33c>)
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	e0f2      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>

	}
	else if (wakeupState == hb_pGPS_pair)
 800b3a8:	4b19      	ldr	r3, [pc, #100]	@ (800b410 <HAL_RTCEx_WakeUpTimerEventCallback+0x330>)
 800b3aa:	881b      	ldrh	r3, [r3, #0]
 800b3ac:	2b10      	cmp	r3, #16
 800b3ae:	d13d      	bne.n	800b42c <HAL_RTCEx_WakeUpTimerEventCallback+0x34c>
	{
		memory.State |= WAKE_STATE + HB_UPDT + GPS_UPDT;
 800b3b0:	4b18      	ldr	r3, [pc, #96]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b3b2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b3b6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b3ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3be:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 800b3c2:	4a14      	ldr	r2, [pc, #80]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b3c4:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b3c8:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b3cc:	4b11      	ldr	r3, [pc, #68]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b3ce:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b3d2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 80d7 	beq.w	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
		{
			memory.State ^= UPDATE_SERVER;
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b3e2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b3e6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b3ea:	f083 0301 	eor.w	r3, r3, #1
 800b3ee:	4a09      	ldr	r2, [pc, #36]	@ (800b414 <HAL_RTCEx_WakeUpTimerEventCallback+0x334>)
 800b3f0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b3f4:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
 800b3f8:	e0c9      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
 800b3fa:	bf00      	nop
 800b3fc:	46007800 	.word	0x46007800
 800b400:	46020800 	.word	0x46020800
 800b404:	2007a277 	.word	0x2007a277
 800b408:	2007a276 	.word	0x2007a276
 800b40c:	0802e328 	.word	0x0802e328
 800b410:	2007a27e 	.word	0x2007a27e
 800b414:	2007d870 	.word	0x2007d870
 800b418:	2007a273 	.word	0x2007a273
 800b41c:	2007a275 	.word	0x2007a275
 800b420:	20084080 	.word	0x20084080
 800b424:	2007a272 	.word	0x2007a272
 800b428:	28086080 	.word	0x28086080
		}


	}
	else if (wakeupState == img_acc_pair)
 800b42c:	4b5d      	ldr	r3, [pc, #372]	@ (800b5a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c4>)
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	2b0e      	cmp	r3, #14
 800b432:	d12a      	bne.n	800b48a <HAL_RTCEx_WakeUpTimerEventCallback+0x3aa>
	{
		memory.State |= WAKE_STATE + HB_UPDT + MOVEMENT_UPDT + GPS_UPDT + PIC_UPDT + PIC_SEND + PIR_END;
 800b434:	4b5c      	ldr	r3, [pc, #368]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b436:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b43a:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
 800b43e:	4b5b      	ldr	r3, [pc, #364]	@ (800b5ac <HAL_RTCEx_WakeUpTimerEventCallback+0x4cc>)
 800b440:	4313      	orrs	r3, r2
 800b442:	4a59      	ldr	r2, [pc, #356]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b444:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b448:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b44c:	4b56      	ldr	r3, [pc, #344]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b44e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b452:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00b      	beq.n	800b476 <HAL_RTCEx_WakeUpTimerEventCallback+0x396>
		{
			memory.State ^= UPDATE_SERVER;
 800b45e:	4b52      	ldr	r3, [pc, #328]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b460:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b464:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b468:	f083 0301 	eor.w	r3, r3, #1
 800b46c:	4a4e      	ldr	r2, [pc, #312]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b46e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b472:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		movementstop = true;
 800b476:	4b4e      	ldr	r3, [pc, #312]	@ (800b5b0 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d0>)
 800b478:	2201      	movs	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
		accelMuteInit = false;
 800b47c:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d4>)
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
		MuteInit = false;
 800b482:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d8>)
 800b484:	2200      	movs	r2, #0
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	e081      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>

	}
	else if (wakeupState == img_pGPS_pair)
 800b48a:	4b46      	ldr	r3, [pc, #280]	@ (800b5a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c4>)
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	2b11      	cmp	r3, #17
 800b490:	d126      	bne.n	800b4e0 <HAL_RTCEx_WakeUpTimerEventCallback+0x400>
	{
		memory.State |= WAKE_STATE + GPS_UPDT + PIC_UPDT + PIC_SEND;
 800b492:	4b45      	ldr	r3, [pc, #276]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b494:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b498:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b49c:	f443 2306 	orr.w	r3, r3, #548864	@ 0x86000
 800b4a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a4:	4a40      	ldr	r2, [pc, #256]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b4a6:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b4aa:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b4ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b4b0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b4b4:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00b      	beq.n	800b4d8 <HAL_RTCEx_WakeUpTimerEventCallback+0x3f8>
		{
			memory.State ^= UPDATE_SERVER;
 800b4c0:	4b39      	ldr	r3, [pc, #228]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b4c2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b4c6:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b4ca:	f083 0301 	eor.w	r3, r3, #1
 800b4ce:	4a36      	ldr	r2, [pc, #216]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b4d0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b4d4:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}

		MuteInit = false;
 800b4d8:	4b37      	ldr	r3, [pc, #220]	@ (800b5b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d8>)
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	e056      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>

	}
	else if (wakeupState == hb_img_acc_pair)
 800b4e0:	4b30      	ldr	r3, [pc, #192]	@ (800b5a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c4>)
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	2b0f      	cmp	r3, #15
 800b4e6:	d12a      	bne.n	800b53e <HAL_RTCEx_WakeUpTimerEventCallback+0x45e>
	{
		memory.State |= WAKE_STATE + HB_UPDT + MOVEMENT_UPDT + GPS_UPDT + PIC_UPDT + PIC_SEND + PIR_END;
 800b4e8:	4b2f      	ldr	r3, [pc, #188]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b4ea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b4ee:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
 800b4f2:	4b2e      	ldr	r3, [pc, #184]	@ (800b5ac <HAL_RTCEx_WakeUpTimerEventCallback+0x4cc>)
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b4f8:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b4fc:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b500:	4b29      	ldr	r3, [pc, #164]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b502:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b506:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <HAL_RTCEx_WakeUpTimerEventCallback+0x44a>
		{
			memory.State ^= UPDATE_SERVER;
 800b512:	4b25      	ldr	r3, [pc, #148]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b514:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b518:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b51c:	f083 0301 	eor.w	r3, r3, #1
 800b520:	4a21      	ldr	r2, [pc, #132]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b522:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b526:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}
		movementstop = true;
 800b52a:	4b21      	ldr	r3, [pc, #132]	@ (800b5b0 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d0>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	701a      	strb	r2, [r3, #0]
		accelMuteInit = false;
 800b530:	4b20      	ldr	r3, [pc, #128]	@ (800b5b4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d4>)
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
		MuteInit = false;
 800b536:	4b20      	ldr	r3, [pc, #128]	@ (800b5b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d8>)
 800b538:	2200      	movs	r2, #0
 800b53a:	701a      	strb	r2, [r3, #0]
 800b53c:	e027      	b.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>

	}
	else if (wakeupState == hb_img_pGPS_pair)
 800b53e:	4b19      	ldr	r3, [pc, #100]	@ (800b5a4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c4>)
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	2b12      	cmp	r3, #18
 800b544:	d123      	bne.n	800b58e <HAL_RTCEx_WakeUpTimerEventCallback+0x4ae>
	{
		memory.State |= WAKE_STATE + HB_UPDT + GPS_UPDT + PIC_UPDT + PIC_SEND;
 800b546:	4b18      	ldr	r3, [pc, #96]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b548:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b54c:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
 800b550:	4b1a      	ldr	r3, [pc, #104]	@ (800b5bc <HAL_RTCEx_WakeUpTimerEventCallback+0x4dc>)
 800b552:	4313      	orrs	r3, r2
 800b554:	4a14      	ldr	r2, [pc, #80]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b556:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b55a:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		if (memory.State & UPDATE_SERVER)
 800b55e:	4b12      	ldr	r3, [pc, #72]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b560:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b564:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <HAL_RTCEx_WakeUpTimerEventCallback+0x4a8>
		{
			memory.State ^= UPDATE_SERVER;
 800b570:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b572:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800b576:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b57a:	f083 0301 	eor.w	r3, r3, #1
 800b57e:	4a0a      	ldr	r2, [pc, #40]	@ (800b5a8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4c8>)
 800b580:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800b584:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
		}

		MuteInit = false;
 800b588:	4b0b      	ldr	r3, [pc, #44]	@ (800b5b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x4d8>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	701a      	strb	r2, [r3, #0]

	}

	CLEAR_REG(PWR->WUSR);
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <HAL_RTCEx_WakeUpTimerEventCallback+0x4e0>)
 800b590:	2200      	movs	r2, #0
 800b592:	645a      	str	r2, [r3, #68]	@ 0x44
	timerTriggered = true;
 800b594:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c4 <HAL_RTCEx_WakeUpTimerEventCallback+0x4e4>)
 800b596:	2201      	movs	r2, #1
 800b598:	701a      	strb	r2, [r3, #0]
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	2007a27e 	.word	0x2007a27e
 800b5a8:	2007d870 	.word	0x2007d870
 800b5ac:	38086080 	.word	0x38086080
 800b5b0:	2007a275 	.word	0x2007a275
 800b5b4:	2007a273 	.word	0x2007a273
 800b5b8:	2007a272 	.word	0x2007a272
 800b5bc:	08086080 	.word	0x08086080
 800b5c0:	46020800 	.word	0x46020800
 800b5c4:	2007a279 	.word	0x2007a279

0800b5c8 <HAL_GPIO_EXTI_Rising_Callback>:
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	80fb      	strh	r3, [r7, #6]
//		if (!GageDemo)
//		{
//			if (memory.State & CHARGER_DETECT) memory.State ^= CHARGER_DETECT;
//		}
//	}
}
 800b5d2:	bf00      	nop
 800b5d4:	370c      	adds	r7, #12
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr

0800b5de <HAL_GPIO_EXTI_Falling_Callback>:
 * @brief EXTI line detection callbacks
 * @param GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Falling_Callback ( uint16_t GPIO_Pin )
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	80fb      	strh	r3, [r7, #6]
//			Log_Single ( LOG_POW_INT );
//#endif // Log_Level_2
//			memory.State ^= CHARGER_DETECT;
//		}
//	}
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_UART_RxCpltCallback>:
/******************************************************
 Configures UART RX Flag
 Note:
 ******************************************************/
void HAL_UART_RxCpltCallback ( UART_HandleTypeDef *huart )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
	{
		//		memory.State |= WAKE_STATE + SERVER_COMMAND;
		//	receivePicAckUart( &memory );
	}
	//HAL_UART_Receive
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <HAL_IWDG_EarlyWakeupCallback>:
//		//	memory.State |= Hello;
//	}
//}

void HAL_IWDG_EarlyWakeupCallback ( IWDG_HandleTypeDef *hiwdg )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	Log_Single ( "\1 WDT Trig &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\0" );
 800b610:	4803      	ldr	r0, [pc, #12]	@ (800b620 <HAL_IWDG_EarlyWakeupCallback+0x18>)
 800b612:	f7fb fa4b 	bl	8006aac <Log_Single>
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	0802e35c 	.word	0x0802e35c

0800b624 <pirDataInit>:
uint8_t counter; 	// window counter of PIR motions
uint8_t eventCounter;
/* Private function prototypes -----------------------------------------------*/

void pirDataInit ( void )
{
 800b624:	b480      	push	{r7}
 800b626:	af00      	add	r7, sp, #0
	state = PIR_IDLE;
 800b628:	4b08      	ldr	r3, [pc, #32]	@ (800b64c <pirDataInit+0x28>)
 800b62a:	2203      	movs	r2, #3
 800b62c:	701a      	strb	r2, [r3, #0]
	counter = 0;
 800b62e:	4b08      	ldr	r3, [pc, #32]	@ (800b650 <pirDataInit+0x2c>)
 800b630:	2200      	movs	r2, #0
 800b632:	701a      	strb	r2, [r3, #0]
	eventCounter = 0;
 800b634:	4b07      	ldr	r3, [pc, #28]	@ (800b654 <pirDataInit+0x30>)
 800b636:	2200      	movs	r2, #0
 800b638:	701a      	strb	r2, [r3, #0]
	percent = 0;
 800b63a:	4b07      	ldr	r3, [pc, #28]	@ (800b658 <pirDataInit+0x34>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	701a      	strb	r2, [r3, #0]
}
 800b640:	bf00      	nop
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	2007ba6f 	.word	0x2007ba6f
 800b650:	2007ba70 	.word	0x2007ba70
 800b654:	2007ba71 	.word	0x2007ba71
 800b658:	2007ba6e 	.word	0x2007ba6e

0800b65c <pirParametersInit>:

void pirParametersInit(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
	pirData2.mode = PIR_MODE_DEF;
 800b660:	4b17      	ldr	r3, [pc, #92]	@ (800b6c0 <pirParametersInit+0x64>)
 800b662:	2203      	movs	r2, #3
 800b664:	701a      	strb	r2, [r3, #0]
	PRINTF("Setting PIR mode to default: %d\r\n",pirData2.mode);
 800b666:	4b16      	ldr	r3, [pc, #88]	@ (800b6c0 <pirParametersInit+0x64>)
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	4915      	ldr	r1, [pc, #84]	@ (800b6c4 <pirParametersInit+0x68>)
 800b66e:	2001      	movs	r0, #1
 800b670:	f7fb fb80 	bl	8006d74 <TraceSend>
	pirData2.coolDown = PIR_MUTE_DEFAULT;
 800b674:	4b12      	ldr	r3, [pc, #72]	@ (800b6c0 <pirParametersInit+0x64>)
 800b676:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 800b67a:	805a      	strh	r2, [r3, #2]

	dayTimeParam.Motion_Blackout            = DAY_BLACKOUT_DEF;
 800b67c:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <pirParametersInit+0x6c>)
 800b67e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b682:	809a      	strh	r2, [r3, #4]
	dayTimeParam.Motion_Confirm_Window      = DAY_CONF_MOTION_WINDOW_DEF;
 800b684:	4b10      	ldr	r3, [pc, #64]	@ (800b6c8 <pirParametersInit+0x6c>)
 800b686:	220a      	movs	r2, #10
 800b688:	801a      	strh	r2, [r3, #0]
	dayTimeParam.Motion_Threshhold          = DAY_THRESH_DEF;
 800b68a:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c8 <pirParametersInit+0x6c>)
 800b68c:	2250      	movs	r2, #80	@ 0x50
 800b68e:	709a      	strb	r2, [r3, #2]
	dayTimeParam.Near_Motion_Threshhold     = DAY_NEAR_MOTION_DEF;
 800b690:	4b0d      	ldr	r3, [pc, #52]	@ (800b6c8 <pirParametersInit+0x6c>)
 800b692:	2246      	movs	r2, #70	@ 0x46
 800b694:	721a      	strb	r2, [r3, #8]
	dayTimeParam.No_Motion_Detection_Window = DAY_NO_MOTION_DEF;
 800b696:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c8 <pirParametersInit+0x6c>)
 800b698:	223c      	movs	r2, #60	@ 0x3c
 800b69a:	80da      	strh	r2, [r3, #6]

	nightTimeParam.Motion_Blackout            = NIGHT_BLACKOUT_DEF;
 800b69c:	4b0b      	ldr	r3, [pc, #44]	@ (800b6cc <pirParametersInit+0x70>)
 800b69e:	2278      	movs	r2, #120	@ 0x78
 800b6a0:	809a      	strh	r2, [r3, #4]
	nightTimeParam.Motion_Confirm_Window      = NIGHT_CONF_MOTION_WINDOW_DEF;
 800b6a2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <pirParametersInit+0x70>)
 800b6a4:	220a      	movs	r2, #10
 800b6a6:	801a      	strh	r2, [r3, #0]
	nightTimeParam.Motion_Threshhold          = NIGHT_THRESH_DEF;
 800b6a8:	4b08      	ldr	r3, [pc, #32]	@ (800b6cc <pirParametersInit+0x70>)
 800b6aa:	223c      	movs	r2, #60	@ 0x3c
 800b6ac:	709a      	strb	r2, [r3, #2]
	nightTimeParam.Near_Motion_Threshhold     = NIGHT_NEAR_MOTION_DEF;
 800b6ae:	4b07      	ldr	r3, [pc, #28]	@ (800b6cc <pirParametersInit+0x70>)
 800b6b0:	2232      	movs	r2, #50	@ 0x32
 800b6b2:	721a      	strb	r2, [r3, #8]
	nightTimeParam.No_Motion_Detection_Window = NIGHT_NO_MOTION_DEF;
 800b6b4:	4b05      	ldr	r3, [pc, #20]	@ (800b6cc <pirParametersInit+0x70>)
 800b6b6:	223c      	movs	r2, #60	@ 0x3c
 800b6b8:	80da      	strh	r2, [r3, #6]
}
 800b6ba:	bf00      	nop
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	2007ba54 	.word	0x2007ba54
 800b6c4:	0802e390 	.word	0x0802e390
 800b6c8:	2007ba58 	.word	0x2007ba58
 800b6cc:	2007ba64 	.word	0x2007ba64

0800b6d0 <setPirParameters>:

void setPirParameters(PIR_PARAMETER_TYPE extPirParameters)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
	pirData2.mode = extPirParameters.mode;
 800b6d8:	793a      	ldrb	r2, [r7, #4]
 800b6da:	4b05      	ldr	r3, [pc, #20]	@ (800b6f0 <setPirParameters+0x20>)
 800b6dc:	701a      	strb	r2, [r3, #0]
	pirData2.coolDown = extPirParameters.coolDown;
 800b6de:	88fa      	ldrh	r2, [r7, #6]
 800b6e0:	4b03      	ldr	r3, [pc, #12]	@ (800b6f0 <setPirParameters+0x20>)
 800b6e2:	805a      	strh	r2, [r3, #2]
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	2007ba54 	.word	0x2007ba54

0800b6f4 <getPirParameters>:

void getPirParameters(PIR_PARAMETER_TYPE *extPirParameters)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
	extPirParameters->mode = pirData2.mode;
 800b6fc:	4b06      	ldr	r3, [pc, #24]	@ (800b718 <getPirParameters+0x24>)
 800b6fe:	781a      	ldrb	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	701a      	strb	r2, [r3, #0]
	extPirParameters->coolDown = pirData2.coolDown;
 800b704:	4b04      	ldr	r3, [pc, #16]	@ (800b718 <getPirParameters+0x24>)
 800b706:	885a      	ldrh	r2, [r3, #2]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	805a      	strh	r2, [r3, #2]
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	2007ba54 	.word	0x2007ba54

0800b71c <setFilterParameters>:

void setFilterParameters(PIR_FILTER_TYPE extFilterParameters, FILTER_TYPE time)
{
 800b71c:	b490      	push	{r4, r7}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	1d3c      	adds	r4, r7, #4
 800b724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b728:	70fb      	strb	r3, [r7, #3]
	if (time == PIR_DAY)
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10f      	bne.n	800b750 <setFilterParameters+0x34>
	{
		dayTimeParam.Motion_Blackout            = extFilterParameters.Motion_Blackout;
 800b730:	893a      	ldrh	r2, [r7, #8]
 800b732:	4b11      	ldr	r3, [pc, #68]	@ (800b778 <setFilterParameters+0x5c>)
 800b734:	809a      	strh	r2, [r3, #4]
		dayTimeParam.Motion_Confirm_Window      = extFilterParameters.Motion_Confirm_Window;
 800b736:	88ba      	ldrh	r2, [r7, #4]
 800b738:	4b0f      	ldr	r3, [pc, #60]	@ (800b778 <setFilterParameters+0x5c>)
 800b73a:	801a      	strh	r2, [r3, #0]
		dayTimeParam.Motion_Threshhold          = extFilterParameters.Motion_Threshhold;
 800b73c:	79ba      	ldrb	r2, [r7, #6]
 800b73e:	4b0e      	ldr	r3, [pc, #56]	@ (800b778 <setFilterParameters+0x5c>)
 800b740:	709a      	strb	r2, [r3, #2]
		dayTimeParam.Near_Motion_Threshhold     = extFilterParameters.Near_Motion_Threshhold;
 800b742:	7b3a      	ldrb	r2, [r7, #12]
 800b744:	4b0c      	ldr	r3, [pc, #48]	@ (800b778 <setFilterParameters+0x5c>)
 800b746:	721a      	strb	r2, [r3, #8]
		dayTimeParam.No_Motion_Detection_Window = extFilterParameters.No_Motion_Detection_Window;
 800b748:	897a      	ldrh	r2, [r7, #10]
 800b74a:	4b0b      	ldr	r3, [pc, #44]	@ (800b778 <setFilterParameters+0x5c>)
 800b74c:	80da      	strh	r2, [r3, #6]
		nightTimeParam.Motion_Confirm_Window      = extFilterParameters.Motion_Confirm_Window;
		nightTimeParam.Motion_Threshhold          = extFilterParameters.Motion_Threshhold;
		nightTimeParam.Near_Motion_Threshhold     = extFilterParameters.Near_Motion_Threshhold;
		nightTimeParam.No_Motion_Detection_Window = extFilterParameters.No_Motion_Detection_Window;
	}
}
 800b74e:	e00e      	b.n	800b76e <setFilterParameters+0x52>
		nightTimeParam.Motion_Blackout            = extFilterParameters.Motion_Blackout;
 800b750:	893a      	ldrh	r2, [r7, #8]
 800b752:	4b0a      	ldr	r3, [pc, #40]	@ (800b77c <setFilterParameters+0x60>)
 800b754:	809a      	strh	r2, [r3, #4]
		nightTimeParam.Motion_Confirm_Window      = extFilterParameters.Motion_Confirm_Window;
 800b756:	88ba      	ldrh	r2, [r7, #4]
 800b758:	4b08      	ldr	r3, [pc, #32]	@ (800b77c <setFilterParameters+0x60>)
 800b75a:	801a      	strh	r2, [r3, #0]
		nightTimeParam.Motion_Threshhold          = extFilterParameters.Motion_Threshhold;
 800b75c:	79ba      	ldrb	r2, [r7, #6]
 800b75e:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <setFilterParameters+0x60>)
 800b760:	709a      	strb	r2, [r3, #2]
		nightTimeParam.Near_Motion_Threshhold     = extFilterParameters.Near_Motion_Threshhold;
 800b762:	7b3a      	ldrb	r2, [r7, #12]
 800b764:	4b05      	ldr	r3, [pc, #20]	@ (800b77c <setFilterParameters+0x60>)
 800b766:	721a      	strb	r2, [r3, #8]
		nightTimeParam.No_Motion_Detection_Window = extFilterParameters.No_Motion_Detection_Window;
 800b768:	897a      	ldrh	r2, [r7, #10]
 800b76a:	4b04      	ldr	r3, [pc, #16]	@ (800b77c <setFilterParameters+0x60>)
 800b76c:	80da      	strh	r2, [r3, #6]
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bc90      	pop	{r4, r7}
 800b776:	4770      	bx	lr
 800b778:	2007ba58 	.word	0x2007ba58
 800b77c:	2007ba64 	.word	0x2007ba64

0800b780 <getFilterParameters>:

void getFilterParameters(PIR_FILTER_TYPE *extFilterParameters, FILTER_TYPE time )
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
	if (time == PIR_DAY)
 800b78c:	78fb      	ldrb	r3, [r7, #3]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d114      	bne.n	800b7bc <getFilterParameters+0x3c>
	{
		extFilterParameters->Motion_Blackout            = dayTimeParam.Motion_Blackout;
 800b792:	4b17      	ldr	r3, [pc, #92]	@ (800b7f0 <getFilterParameters+0x70>)
 800b794:	889a      	ldrh	r2, [r3, #4]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	809a      	strh	r2, [r3, #4]
		extFilterParameters->Motion_Confirm_Window      = dayTimeParam.Motion_Confirm_Window;
 800b79a:	4b15      	ldr	r3, [pc, #84]	@ (800b7f0 <getFilterParameters+0x70>)
 800b79c:	881a      	ldrh	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	801a      	strh	r2, [r3, #0]
		extFilterParameters->Motion_Threshhold          = dayTimeParam.Motion_Threshhold;
 800b7a2:	4b13      	ldr	r3, [pc, #76]	@ (800b7f0 <getFilterParameters+0x70>)
 800b7a4:	789a      	ldrb	r2, [r3, #2]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	709a      	strb	r2, [r3, #2]
		extFilterParameters->Near_Motion_Threshhold     = dayTimeParam.Near_Motion_Threshhold;
 800b7aa:	4b11      	ldr	r3, [pc, #68]	@ (800b7f0 <getFilterParameters+0x70>)
 800b7ac:	7a1a      	ldrb	r2, [r3, #8]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	721a      	strb	r2, [r3, #8]
		extFilterParameters->No_Motion_Detection_Window = dayTimeParam.No_Motion_Detection_Window;
 800b7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b7f0 <getFilterParameters+0x70>)
 800b7b4:	88da      	ldrh	r2, [r3, #6]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	80da      	strh	r2, [r3, #6]
		extFilterParameters->Motion_Confirm_Window      = nightTimeParam.Motion_Confirm_Window;
		extFilterParameters->Motion_Threshhold          = nightTimeParam.Motion_Threshhold;
		extFilterParameters->Near_Motion_Threshhold     = nightTimeParam.Near_Motion_Threshhold;
		extFilterParameters->No_Motion_Detection_Window = nightTimeParam.No_Motion_Detection_Window;
	}
}
 800b7ba:	e013      	b.n	800b7e4 <getFilterParameters+0x64>
		extFilterParameters->Motion_Blackout            = nightTimeParam.Motion_Blackout;
 800b7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f4 <getFilterParameters+0x74>)
 800b7be:	889a      	ldrh	r2, [r3, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	809a      	strh	r2, [r3, #4]
		extFilterParameters->Motion_Confirm_Window      = nightTimeParam.Motion_Confirm_Window;
 800b7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b7f4 <getFilterParameters+0x74>)
 800b7c6:	881a      	ldrh	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	801a      	strh	r2, [r3, #0]
		extFilterParameters->Motion_Threshhold          = nightTimeParam.Motion_Threshhold;
 800b7cc:	4b09      	ldr	r3, [pc, #36]	@ (800b7f4 <getFilterParameters+0x74>)
 800b7ce:	789a      	ldrb	r2, [r3, #2]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	709a      	strb	r2, [r3, #2]
		extFilterParameters->Near_Motion_Threshhold     = nightTimeParam.Near_Motion_Threshhold;
 800b7d4:	4b07      	ldr	r3, [pc, #28]	@ (800b7f4 <getFilterParameters+0x74>)
 800b7d6:	7a1a      	ldrb	r2, [r3, #8]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	721a      	strb	r2, [r3, #8]
		extFilterParameters->No_Motion_Detection_Window = nightTimeParam.No_Motion_Detection_Window;
 800b7dc:	4b05      	ldr	r3, [pc, #20]	@ (800b7f4 <getFilterParameters+0x74>)
 800b7de:	88da      	ldrh	r2, [r3, #6]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	80da      	strh	r2, [r3, #6]
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	2007ba58 	.word	0x2007ba58
 800b7f4:	2007ba64 	.word	0x2007ba64

0800b7f8 <decodePIRConfigs>:
//
//	while (HAL_RTC_SetAlarm_IT ( &hrtc , &sAlarm , FORMAT_BIN ) != HAL_OK);
}

bool decodePIRConfigs(uint8_t *mqttMsg)
{
 800b7f8:	b5b0      	push	{r4, r5, r7, lr}
 800b7fa:	f6ad 7df8 	subw	sp, sp, #4088	@ 0xff8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b804:	f6a3 73f4 	subw	r3, r3, #4084	@ 0xff4
 800b808:	6018      	str	r0, [r3, #0]
	bool isError = false;
 800b80a:	2300      	movs	r3, #0
 800b80c:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
	uint8_t version = 255;
 800b810:	23ff      	movs	r3, #255	@ 0xff
 800b812:	f887 3ff6 	strb.w	r3, [r7, #4086]	@ 0xff6
	uint8_t mode = 255;
 800b816:	23ff      	movs	r3, #255	@ 0xff
 800b818:	f887 3ff5 	strb.w	r3, [r7, #4085]	@ 0xff5
	uint16_t mutePeriod = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	@ 0xff2
	PIR_PARAMETER_TYPE decodedPirParams;
	char Buff[MEMORY_MAX] = " ";
 800b822:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b826:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800b82a:	2220      	movs	r2, #32
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	3304      	adds	r3, #4
 800b830:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800b834:	2100      	movs	r1, #0
 800b836:	4618      	mov	r0, r3
 800b838:	f01b fc9a 	bl	8027170 <memset>
	char test [] = "\"pir\":{";
 800b83c:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b840:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 800b844:	4a9b      	ldr	r2, [pc, #620]	@ (800bab4 <decodePIRConfigs+0x2bc>)
 800b846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b84a:	e883 0003 	stmia.w	r3, {r0, r1}
	char verTest[] = "\"version\":";
 800b84e:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b852:	f5a3 637d 	sub.w	r3, r3, #4048	@ 0xfd0
 800b856:	4a98      	ldr	r2, [pc, #608]	@ (800bab8 <decodePIRConfigs+0x2c0>)
 800b858:	ca07      	ldmia	r2, {r0, r1, r2}
 800b85a:	c303      	stmia	r3!, {r0, r1}
 800b85c:	801a      	strh	r2, [r3, #0]
 800b85e:	3302      	adds	r3, #2
 800b860:	0c12      	lsrs	r2, r2, #16
 800b862:	701a      	strb	r2, [r3, #0]
	char modeTest [] = "\"mode\":";
 800b864:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b868:	f6a3 73d8 	subw	r3, r3, #4056	@ 0xfd8
 800b86c:	4a93      	ldr	r2, [pc, #588]	@ (800babc <decodePIRConfigs+0x2c4>)
 800b86e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b872:	e883 0003 	stmia.w	r3, {r0, r1}
	char muteTest [] = "\"muting_period\":";
 800b876:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b87a:	f6a3 73ec 	subw	r3, r3, #4076	@ 0xfec
 800b87e:	4a90      	ldr	r2, [pc, #576]	@ (800bac0 <decodePIRConfigs+0x2c8>)
 800b880:	461c      	mov	r4, r3
 800b882:	4615      	mov	r5, r2
 800b884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	7023      	strb	r3, [r4, #0]

	//Need to get first to prevent overwriting non passed data such as even counter
	getPirParameters(&decodedPirParams);
 800b88c:	f607 73dc 	addw	r3, r7, #4060	@ 0xfdc
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff ff2f 	bl	800b6f4 <getPirParameters>
	// Transfer MQTT message to a local buffer
	Word_Transfer(Buff, (char*)mqttMsg);
 800b896:	f607 73f8 	addw	r3, r7, #4088	@ 0xff8
 800b89a:	f6a3 73f4 	subw	r3, r3, #4084	@ 0xff4
 800b89e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800b8a2:	6819      	ldr	r1, [r3, #0]
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	f7fa ff45 	bl	8006734 <Word_Transfer>

	char* substr = strstr(Buff, test);
 800b8aa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b8ae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f01b fce0 	bl	802727a <strstr>
 800b8ba:	f8c7 0fec 	str.w	r0, [r7, #4076]	@ 0xfec
	if(substr)
 800b8be:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	@ 0xfec
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80d0 	beq.w	800ba68 <decodePIRConfigs+0x270>
	{
		Refresh_Watchdog;
 800b8c8:	487e      	ldr	r0, [pc, #504]	@ (800bac4 <decodePIRConfigs+0x2cc>)
 800b8ca:	f00f fc82 	bl	801b1d2 <HAL_IWDG_Refresh>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <decodePIRConfigs+0xe0>
 800b8d4:	f009 ff5e 	bl	8015794 <Error_Handler>
		char *verStr = strstr(substr, verTest);
 800b8d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8dc:	4619      	mov	r1, r3
 800b8de:	f8d7 0fec 	ldr.w	r0, [r7, #4076]	@ 0xfec
 800b8e2:	f01b fcca 	bl	802727a <strstr>
 800b8e6:	f8c7 0fe8 	str.w	r0, [r7, #4072]	@ 0xfe8
		if(verStr)
 800b8ea:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 80b6 	beq.w	800ba60 <decodePIRConfigs+0x268>
		{
			verStr += strlen(verTest);
 800b8f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f4 fcc7 	bl	800028c <strlen>
 800b8fe:	4602      	mov	r2, r0
 800b900:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 800b904:	4413      	add	r3, r2
 800b906:	f8c7 3fe8 	str.w	r3, [r7, #4072]	@ 0xfe8
			if(isdigit((unsigned char)verStr[0]))
 800b90a:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	3301      	adds	r3, #1
 800b912:	4a6d      	ldr	r2, [pc, #436]	@ (800bac8 <decodePIRConfigs+0x2d0>)
 800b914:	4413      	add	r3, r2
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 809b 	beq.w	800ba58 <decodePIRConfigs+0x260>
			{
				version = atoi(verStr);
 800b922:	f8d7 0fe8 	ldr.w	r0, [r7, #4072]	@ 0xfe8
 800b926:	f019 fcd9 	bl	80252dc <atoi>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f887 3ff6 	strb.w	r3, [r7, #4086]	@ 0xff6
				if(version == 0)
 800b930:	f897 3ff6 	ldrb.w	r3, [r7, #4086]	@ 0xff6
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 808b 	bne.w	800ba50 <decodePIRConfigs+0x258>
				{
					char *modeStr = strstr(substr, modeTest);
 800b93a:	f107 0320 	add.w	r3, r7, #32
 800b93e:	4619      	mov	r1, r3
 800b940:	f8d7 0fec 	ldr.w	r0, [r7, #4076]	@ 0xfec
 800b944:	f01b fc99 	bl	802727a <strstr>
 800b948:	f8c7 0fe4 	str.w	r0, [r7, #4068]	@ 0xfe4
					if(modeStr && !isError)
 800b94c:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 800b950:	2b00      	cmp	r3, #0
 800b952:	d034      	beq.n	800b9be <decodePIRConfigs+0x1c6>
 800b954:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 800b958:	f083 0301 	eor.w	r3, r3, #1
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d02d      	beq.n	800b9be <decodePIRConfigs+0x1c6>
					{
						modeStr += strlen(modeTest);
 800b962:	f107 0320 	add.w	r3, r7, #32
 800b966:	4618      	mov	r0, r3
 800b968:	f7f4 fc90 	bl	800028c <strlen>
 800b96c:	4602      	mov	r2, r0
 800b96e:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 800b972:	4413      	add	r3, r2
 800b974:	f8c7 3fe4 	str.w	r3, [r7, #4068]	@ 0xfe4
						if(isdigit((unsigned char)modeStr[0]))
 800b978:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	3301      	adds	r3, #1
 800b980:	4a51      	ldr	r2, [pc, #324]	@ (800bac8 <decodePIRConfigs+0x2d0>)
 800b982:	4413      	add	r3, r2
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	f003 0304 	and.w	r3, r3, #4
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d013      	beq.n	800b9b6 <decodePIRConfigs+0x1be>
						{
							mode = atoi(modeStr);
 800b98e:	f8d7 0fe4 	ldr.w	r0, [r7, #4068]	@ 0xfe4
 800b992:	f019 fca3 	bl	80252dc <atoi>
 800b996:	4603      	mov	r3, r0
 800b998:	f887 3ff5 	strb.w	r3, [r7, #4085]	@ 0xff5
							if(mode >= 0 && mode <= 255)
							{
								Refresh_Watchdog;
 800b99c:	4849      	ldr	r0, [pc, #292]	@ (800bac4 <decodePIRConfigs+0x2cc>)
 800b99e:	f00f fc18 	bl	801b1d2 <HAL_IWDG_Refresh>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <decodePIRConfigs+0x1b4>
 800b9a8:	f009 fef4 	bl	8015794 <Error_Handler>
								decodedPirParams.mode = mode;
 800b9ac:	f897 3ff5 	ldrb.w	r3, [r7, #4085]	@ 0xff5
 800b9b0:	f887 3fdc 	strb.w	r3, [r7, #4060]	@ 0xfdc
						if(isdigit((unsigned char)modeStr[0]))
 800b9b4:	e006      	b.n	800b9c4 <decodePIRConfigs+0x1cc>
								PRINTF("PIR mode is out of range [0-255]: %d\r\n", mode);
							}
						}
						else
						{
							isError = true;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
						if(isdigit((unsigned char)modeStr[0]))
 800b9bc:	e002      	b.n	800b9c4 <decodePIRConfigs+0x1cc>
							//"Invalid data type for mode"
						}
					}
					else
					{
						isError = true;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
					}

					char* muteStr = strstr(substr, muteTest);
 800b9c4:	f107 030c 	add.w	r3, r7, #12
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f8d7 0fec 	ldr.w	r0, [r7, #4076]	@ 0xfec
 800b9ce:	f01b fc54 	bl	802727a <strstr>
 800b9d2:	f8c7 0fe0 	str.w	r0, [r7, #4064]	@ 0xfe0
					if(muteStr && !isError)
 800b9d6:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d034      	beq.n	800ba48 <decodePIRConfigs+0x250>
 800b9de:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 800b9e2:	f083 0301 	eor.w	r3, r3, #1
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d02d      	beq.n	800ba48 <decodePIRConfigs+0x250>
					{
						muteStr += strlen(muteTest);
 800b9ec:	f107 030c 	add.w	r3, r7, #12
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f4 fc4b 	bl	800028c <strlen>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 800b9fc:	4413      	add	r3, r2
 800b9fe:	f8c7 3fe0 	str.w	r3, [r7, #4064]	@ 0xfe0
						if(isdigit((unsigned char)muteStr[0]))
 800ba02:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	4a2f      	ldr	r2, [pc, #188]	@ (800bac8 <decodePIRConfigs+0x2d0>)
 800ba0c:	4413      	add	r3, r2
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	f003 0304 	and.w	r3, r3, #4
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d013      	beq.n	800ba40 <decodePIRConfigs+0x248>
						{
							mutePeriod = atoi(muteStr);
 800ba18:	f8d7 0fe0 	ldr.w	r0, [r7, #4064]	@ 0xfe0
 800ba1c:	f019 fc5e 	bl	80252dc <atoi>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f8a7 3ff2 	strh.w	r3, [r7, #4082]	@ 0xff2
							if(mutePeriod >= 0 && mutePeriod <= 65535)
							{
								Refresh_Watchdog;
 800ba26:	4827      	ldr	r0, [pc, #156]	@ (800bac4 <decodePIRConfigs+0x2cc>)
 800ba28:	f00f fbd3 	bl	801b1d2 <HAL_IWDG_Refresh>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <decodePIRConfigs+0x23e>
 800ba32:	f009 feaf 	bl	8015794 <Error_Handler>
								decodedPirParams.coolDown = mutePeriod;
 800ba36:	f8b7 3ff2 	ldrh.w	r3, [r7, #4082]	@ 0xff2
 800ba3a:	f8a7 3fde 	strh.w	r3, [r7, #4062]	@ 0xfde
						if(isdigit((unsigned char)muteStr[0]))
 800ba3e:	e016      	b.n	800ba6e <decodePIRConfigs+0x276>
								PRINTF("PIR muting period is out of range [0-255]: %d\r\n", mutePeriod);
							}
						}
						else
						{
							isError = true;
 800ba40:	2301      	movs	r3, #1
 800ba42:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
						if(isdigit((unsigned char)muteStr[0]))
 800ba46:	e012      	b.n	800ba6e <decodePIRConfigs+0x276>
						}
					}
					else
					{
						isError = true;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
 800ba4e:	e00e      	b.n	800ba6e <decodePIRConfigs+0x276>
					}
				}
				else
				{
					isError = true;
 800ba50:	2301      	movs	r3, #1
 800ba52:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
 800ba56:	e00a      	b.n	800ba6e <decodePIRConfigs+0x276>
				}
			}
			else
			{
				isError = true;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
 800ba5e:	e006      	b.n	800ba6e <decodePIRConfigs+0x276>
			}
		}
		else
		{
			isError = true;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
 800ba66:	e002      	b.n	800ba6e <decodePIRConfigs+0x276>
		}
	}
	else
	{
		//no pir decode found
		isError = true;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	f887 3ff7 	strb.w	r3, [r7, #4087]	@ 0xff7
	}

	if(!isError)
 800ba6e:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
 800ba72:	f083 0301 	eor.w	r3, r3, #1
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d014      	beq.n	800baa6 <decodePIRConfigs+0x2ae>
	{
		Refresh_Watchdog;
 800ba7c:	4811      	ldr	r0, [pc, #68]	@ (800bac4 <decodePIRConfigs+0x2cc>)
 800ba7e:	f00f fba8 	bl	801b1d2 <HAL_IWDG_Refresh>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <decodePIRConfigs+0x294>
 800ba88:	f009 fe84 	bl	8015794 <Error_Handler>
		PRINTF("Setting PIR Params:mode %d, cool down %d\r\n", decodedPirParams.mode, decodedPirParams.coolDown);
 800ba8c:	f897 3fdc 	ldrb.w	r3, [r7, #4060]	@ 0xfdc
 800ba90:	461a      	mov	r2, r3
 800ba92:	f8b7 3fde 	ldrh.w	r3, [r7, #4062]	@ 0xfde
 800ba96:	490d      	ldr	r1, [pc, #52]	@ (800bacc <decodePIRConfigs+0x2d4>)
 800ba98:	2001      	movs	r0, #1
 800ba9a:	f7fb f96b 	bl	8006d74 <TraceSend>
		setPirParameters(decodedPirParams);
 800ba9e:	f8d7 0fdc 	ldr.w	r0, [r7, #4060]	@ 0xfdc
 800baa2:	f7ff fe15 	bl	800b6d0 <setPirParameters>
	}

	return isError;
 800baa6:	f897 3ff7 	ldrb.w	r3, [r7, #4087]	@ 0xff7
}
 800baaa:	4618      	mov	r0, r3
 800baac:	f607 77f8 	addw	r7, r7, #4088	@ 0xff8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bdb0      	pop	{r4, r5, r7, pc}
 800bab4:	0802e3e0 	.word	0x0802e3e0
 800bab8:	0802e3e8 	.word	0x0802e3e8
 800babc:	0802e3f4 	.word	0x0802e3f4
 800bac0:	0802e3fc 	.word	0x0802e3fc
 800bac4:	2007d0bc 	.word	0x2007d0bc
 800bac8:	0803031d 	.word	0x0803031d
 800bacc:	0802e3b4 	.word	0x0802e3b4

0800bad0 <decodeMotionFilter>:
 * @param  uint8_t *mqttMsg
 *         Downlink data buffer from Cell modemime
 * @retval bool is error - true = error, false = passed
 */
bool decodeMotionFilter(uint8_t *mqttMsg, FILTER_TYPE sunPeriod)
{
 800bad0:	b5b0      	push	{r4, r5, r7, lr}
 800bad2:	f5ad 5d85 	sub.w	sp, sp, #4256	@ 0x10a0
 800bad6:	af04      	add	r7, sp, #16
 800bad8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800badc:	f843 0c8c 	str.w	r0, [r3, #-140]
 800bae0:	460a      	mov	r2, r1
 800bae2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bae6:	f803 2c8d 	strb.w	r2, [r3, #-141]
	bool isError = false;
 800baea:	2300      	movs	r3, #0
 800baec:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800baf0:	f102 020f 	add.w	r2, r2, #15
 800baf4:	7013      	strb	r3, [r2, #0]
	// these have to bigger to prevent overflow and correct checking of parameters
	uint32_t version = 255;
 800baf6:	23ff      	movs	r3, #255	@ 0xff
 800baf8:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bafc:	f102 0204 	add.w	r2, r2, #4
 800bb00:	6013      	str	r3, [r2, #0]
	uint32_t motionWindow = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bb08:	6013      	str	r3, [r2, #0]
	uint32_t motionThreshold = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bb10:	f102 021c 	add.w	r2, r2, #28
 800bb14:	6013      	str	r3, [r2, #0]
	uint32_t blackout = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bb1c:	f102 0218 	add.w	r2, r2, #24
 800bb20:	6013      	str	r3, [r2, #0]
	uint32_t noMotion = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bb28:	f102 0214 	add.w	r2, r2, #20
 800bb2c:	6013      	str	r3, [r2, #0]
	uint32_t nearMotion = 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bb34:	f102 0210 	add.w	r2, r2, #16
 800bb38:	6013      	str	r3, [r2, #0]

	PIR_FILTER_TYPE decodedFilterParams;
	char Buff[MEMORY_MAX] = " ";
 800bb3a:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bb3e:	f103 0310 	add.w	r3, r3, #16
 800bb42:	f6a3 73e4 	subw	r3, r3, #4068	@ 0xfe4
 800bb46:	2220      	movs	r2, #32
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800bb50:	2100      	movs	r1, #0
 800bb52:	4618      	mov	r0, r3
 800bb54:	f01b fb0c 	bl	8027170 <memset>
	char dayFilterTest [] = "\"motion_filter_day\":{";
 800bb58:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bb5c:	f103 0310 	add.w	r3, r3, #16
 800bb60:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 800bb64:	4a98      	ldr	r2, [pc, #608]	@ (800bdc8 <decodeMotionFilter+0x2f8>)
 800bb66:	461c      	mov	r4, r3
 800bb68:	4615      	mov	r5, r2
 800bb6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb72:	6020      	str	r0, [r4, #0]
 800bb74:	3404      	adds	r4, #4
 800bb76:	8021      	strh	r1, [r4, #0]
	char nightFilterTest [] = "\"motion_filter_night\":{";
 800bb78:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bb7c:	4a93      	ldr	r2, [pc, #588]	@ (800bdcc <decodeMotionFilter+0x2fc>)
 800bb7e:	f1a3 0414 	sub.w	r4, r3, #20
 800bb82:	4615      	mov	r5, r2
 800bb84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb88:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb8c:	e884 0003 	stmia.w	r4, {r0, r1}
	char motionWindowTest [] = "\"motion_confirm_window\":";
 800bb90:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bb94:	4a8e      	ldr	r2, [pc, #568]	@ (800bdd0 <decodeMotionFilter+0x300>)
 800bb96:	f1a3 0430 	sub.w	r4, r3, #48	@ 0x30
 800bb9a:	4615      	mov	r5, r2
 800bb9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bba0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bba4:	c403      	stmia	r4!, {r0, r1}
 800bba6:	7022      	strb	r2, [r4, #0]
	char motionThreshTest [] = "\"motion_threshold\":";
 800bba8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bbac:	4a89      	ldr	r2, [pc, #548]	@ (800bdd4 <decodeMotionFilter+0x304>)
 800bbae:	f1a3 0444 	sub.w	r4, r3, #68	@ 0x44
 800bbb2:	4615      	mov	r5, r2
 800bbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	6023      	str	r3, [r4, #0]
	char blackoutTest [] = "\"motion_blackout\":";
 800bbbc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bbc0:	4a85      	ldr	r2, [pc, #532]	@ (800bdd8 <decodeMotionFilter+0x308>)
 800bbc2:	f1a3 0458 	sub.w	r4, r3, #88	@ 0x58
 800bbc6:	4615      	mov	r5, r2
 800bbc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	8022      	strh	r2, [r4, #0]
 800bbd2:	3402      	adds	r4, #2
 800bbd4:	0c1b      	lsrs	r3, r3, #16
 800bbd6:	7023      	strb	r3, [r4, #0]
	char noMotionTest [] = "\"no_motion_window\":";
 800bbd8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bbdc:	4a7f      	ldr	r2, [pc, #508]	@ (800bddc <decodeMotionFilter+0x30c>)
 800bbde:	f1a3 046c 	sub.w	r4, r3, #108	@ 0x6c
 800bbe2:	4615      	mov	r5, r2
 800bbe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	6023      	str	r3, [r4, #0]
	char nearMotionTest [] = "\"near_motion\":";
 800bbec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bbf0:	4a7b      	ldr	r2, [pc, #492]	@ (800bde0 <decodeMotionFilter+0x310>)
 800bbf2:	f1a3 047c 	sub.w	r4, r3, #124	@ 0x7c
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bbfa:	c407      	stmia	r4!, {r0, r1, r2}
 800bbfc:	8023      	strh	r3, [r4, #0]
 800bbfe:	3402      	adds	r4, #2
 800bc00:	0c1b      	lsrs	r3, r3, #16
 800bc02:	7023      	strb	r3, [r4, #0]
	char verTest[] = "\"version\":";
 800bc04:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bc08:	4a76      	ldr	r2, [pc, #472]	@ (800bde4 <decodeMotionFilter+0x314>)
 800bc0a:	3b88      	subs	r3, #136	@ 0x88
 800bc0c:	ca07      	ldmia	r2, {r0, r1, r2}
 800bc0e:	c303      	stmia	r3!, {r0, r1}
 800bc10:	801a      	strh	r2, [r3, #0]
 800bc12:	3302      	adds	r3, #2
 800bc14:	0c12      	lsrs	r2, r2, #16
 800bc16:	701a      	strb	r2, [r3, #0]

	//Need to get first for completeness
	getFilterParameters(&decodedFilterParams, sunPeriod );
 800bc18:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bc1c:	f813 2c8d 	ldrb.w	r2, [r3, #-141]
 800bc20:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800bc24:	f103 030c 	add.w	r3, r3, #12
 800bc28:	4611      	mov	r1, r2
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fda8 	bl	800b780 <getFilterParameters>

	// Transfer MQTT message to a local buffer
	Word_Transfer(Buff, (char*)mqttMsg);
 800bc30:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bc34:	461a      	mov	r2, r3
 800bc36:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800bc3a:	f852 1c8c 	ldr.w	r1, [r2, #-140]
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fa fd78 	bl	8006734 <Word_Transfer>

	char* filterStr = '\0';
 800bc44:	2300      	movs	r3, #0
 800bc46:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bc4a:	f102 0208 	add.w	r2, r2, #8
 800bc4e:	6013      	str	r3, [r2, #0]

	if (sunPeriod == PIR_NIGHT)
 800bc50:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bc54:	f813 3c8d 	ldrb.w	r3, [r3, #-141]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d120      	bne.n	800bc9e <decodeMotionFilter+0x1ce>
	{
		filterStr = strstr(Buff, nightFilterTest);
 800bc5c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bc60:	3b14      	subs	r3, #20
 800bc62:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f01b fb06 	bl	802727a <strstr>
 800bc6e:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bc72:	f103 0308 	add.w	r3, r3, #8
 800bc76:	6018      	str	r0, [r3, #0]
		if(filterStr)
 800bc78:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bc7c:	f103 0308 	add.w	r3, r3, #8
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d004      	beq.n	800bc90 <decodeMotionFilter+0x1c0>
		{
			PRINTF("Decoding Night Filter Parameters\r\n");
 800bc86:	4958      	ldr	r1, [pc, #352]	@ (800bde8 <decodeMotionFilter+0x318>)
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7fb f873 	bl	8006d74 <TraceSend>
 800bc8e:	e032      	b.n	800bcf6 <decodeMotionFilter+0x226>
		}
		else
		{
			isError = true;
 800bc90:	2301      	movs	r3, #1
 800bc92:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bc96:	f102 020f 	add.w	r2, r2, #15
 800bc9a:	7013      	strb	r3, [r2, #0]
 800bc9c:	e02b      	b.n	800bcf6 <decodeMotionFilter+0x226>
		}
	}
	else if(sunPeriod == PIR_DAY)
 800bc9e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800bca2:	f813 3c8d 	ldrb.w	r3, [r3, #-141]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d11f      	bne.n	800bcea <decodeMotionFilter+0x21a>
	{
		filterStr = strstr(Buff, dayFilterTest);
 800bcaa:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800bcae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f01b fae0 	bl	802727a <strstr>
 800bcba:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bcbe:	f103 0308 	add.w	r3, r3, #8
 800bcc2:	6018      	str	r0, [r3, #0]
		if(filterStr)
 800bcc4:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bcc8:	f103 0308 	add.w	r3, r3, #8
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d004      	beq.n	800bcdc <decodeMotionFilter+0x20c>
		{
			PRINTF("Decoding Day Filter Parameters\r\n");
 800bcd2:	4946      	ldr	r1, [pc, #280]	@ (800bdec <decodeMotionFilter+0x31c>)
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7fb f84d 	bl	8006d74 <TraceSend>
 800bcda:	e00c      	b.n	800bcf6 <decodeMotionFilter+0x226>
		}
		else
		{
			isError = true;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bce2:	f102 020f 	add.w	r2, r2, #15
 800bce6:	7013      	strb	r3, [r2, #0]
 800bce8:	e005      	b.n	800bcf6 <decodeMotionFilter+0x226>
		}
	}
	else
	{
		isError = true;
 800bcea:	2301      	movs	r3, #1
 800bcec:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bcf0:	f102 020f 	add.w	r2, r2, #15
 800bcf4:	7013      	strb	r3, [r2, #0]
	}
	Refresh_Watchdog;
 800bcf6:	483e      	ldr	r0, [pc, #248]	@ (800bdf0 <decodeMotionFilter+0x320>)
 800bcf8:	f00f fa6b 	bl	801b1d2 <HAL_IWDG_Refresh>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <decodeMotionFilter+0x236>
 800bd02:	f009 fd47 	bl	8015794 <Error_Handler>

	if(!isError)
 800bd06:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bd0a:	f103 030f 	add.w	r3, r3, #15
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f083 0301 	eor.w	r3, r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 82ed 	beq.w	800c2f6 <decodeMotionFilter+0x826>
	{
		char* verStr = strstr(filterStr, verTest);
 800bd1c:	f107 0310 	add.w	r3, r7, #16
 800bd20:	3b08      	subs	r3, #8
 800bd22:	4619      	mov	r1, r3
 800bd24:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bd28:	f103 0308 	add.w	r3, r3, #8
 800bd2c:	6818      	ldr	r0, [r3, #0]
 800bd2e:	f01b faa4 	bl	802727a <strstr>
 800bd32:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bd36:	f103 030c 	add.w	r3, r3, #12
 800bd3a:	6018      	str	r0, [r3, #0]
		if(verStr && !isError)
 800bd3c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bd40:	f103 030c 	add.w	r3, r3, #12
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d056      	beq.n	800bdf8 <decodeMotionFilter+0x328>
 800bd4a:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bd4e:	f103 030f 	add.w	r3, r3, #15
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	f083 0301 	eor.w	r3, r3, #1
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d04c      	beq.n	800bdf8 <decodeMotionFilter+0x328>
		{
			verStr += strlen(verTest);
 800bd5e:	f107 0310 	add.w	r3, r7, #16
 800bd62:	3b08      	subs	r3, #8
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7f4 fa91 	bl	800028c <strlen>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bd70:	f103 030c 	add.w	r3, r3, #12
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4413      	add	r3, r2
 800bd78:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bd7c:	f102 020c 	add.w	r2, r2, #12
 800bd80:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 800bd82:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bd86:	f103 030c 	add.w	r3, r3, #12
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	4a18      	ldr	r2, [pc, #96]	@ (800bdf4 <decodeMotionFilter+0x324>)
 800bd92:	4413      	add	r3, r2
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 0304 	and.w	r3, r3, #4
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00d      	beq.n	800bdba <decodeMotionFilter+0x2ea>
			{
				version = atoi(verStr);
 800bd9e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bda2:	f103 030c 	add.w	r3, r3, #12
 800bda6:	6818      	ldr	r0, [r3, #0]
 800bda8:	f019 fa98 	bl	80252dc <atoi>
 800bdac:	4603      	mov	r3, r0
 800bdae:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bdb2:	f102 0204 	add.w	r2, r2, #4
 800bdb6:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 800bdb8:	e024      	b.n	800be04 <decodeMotionFilter+0x334>
			}
			else
			{
				isError = true;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bdc0:	f102 020f 	add.w	r2, r2, #15
 800bdc4:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)verStr[0]))
 800bdc6:	e01d      	b.n	800be04 <decodeMotionFilter+0x334>
 800bdc8:	0802e5d0 	.word	0x0802e5d0
 800bdcc:	0802e5e8 	.word	0x0802e5e8
 800bdd0:	0802e600 	.word	0x0802e600
 800bdd4:	0802e61c 	.word	0x0802e61c
 800bdd8:	0802e630 	.word	0x0802e630
 800bddc:	0802e644 	.word	0x0802e644
 800bde0:	0802e658 	.word	0x0802e658
 800bde4:	0802e3e8 	.word	0x0802e3e8
 800bde8:	0802e410 	.word	0x0802e410
 800bdec:	0802e434 	.word	0x0802e434
 800bdf0:	2007d0bc 	.word	0x2007d0bc
 800bdf4:	0803031d 	.word	0x0803031d
			}
		}
		else
		{
			isError = true;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bdfe:	f102 020f 	add.w	r2, r2, #15
 800be02:	7013      	strb	r3, [r2, #0]
		}

		char* motionWindowStr = strstr(filterStr, motionWindowTest);
 800be04:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800be08:	3b10      	subs	r3, #16
 800be0a:	4619      	mov	r1, r3
 800be0c:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800be10:	f103 0308 	add.w	r3, r3, #8
 800be14:	6818      	ldr	r0, [r3, #0]
 800be16:	f01b fa30 	bl	802727a <strstr>
 800be1a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800be1e:	f103 0308 	add.w	r3, r3, #8
 800be22:	6018      	str	r0, [r3, #0]
		if(motionWindowStr && !isError)
 800be24:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800be28:	f103 0308 	add.w	r3, r3, #8
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d05b      	beq.n	800beea <decodeMotionFilter+0x41a>
 800be32:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800be36:	f103 030f 	add.w	r3, r3, #15
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	f083 0301 	eor.w	r3, r3, #1
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d051      	beq.n	800beea <decodeMotionFilter+0x41a>
		{
			motionWindowStr += strlen(motionWindowTest);
 800be46:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800be4a:	3b10      	subs	r3, #16
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7f4 fa1d 	bl	800028c <strlen>
 800be52:	4602      	mov	r2, r0
 800be54:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800be58:	f103 0308 	add.w	r3, r3, #8
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4413      	add	r3, r2
 800be60:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800be64:	f102 0208 	add.w	r2, r2, #8
 800be68:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)motionWindowStr[0]))
 800be6a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800be6e:	f103 0308 	add.w	r3, r3, #8
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	3301      	adds	r3, #1
 800be78:	4a96      	ldr	r2, [pc, #600]	@ (800c0d4 <decodeMotionFilter+0x604>)
 800be7a:	4413      	add	r3, r2
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b00      	cmp	r3, #0
 800be84:	d02a      	beq.n	800bedc <decodeMotionFilter+0x40c>
			{
				Refresh_Watchdog;
 800be86:	4894      	ldr	r0, [pc, #592]	@ (800c0d8 <decodeMotionFilter+0x608>)
 800be88:	f00f f9a3 	bl	801b1d2 <HAL_IWDG_Refresh>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d001      	beq.n	800be96 <decodeMotionFilter+0x3c6>
 800be92:	f009 fc7f 	bl	8015794 <Error_Handler>
				motionWindow = atoi(motionWindowStr);
 800be96:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800be9a:	f103 0308 	add.w	r3, r3, #8
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	f019 fa1c 	bl	80252dc <atoi>
 800bea4:	4603      	mov	r3, r0
 800bea6:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800beaa:	6013      	str	r3, [r2, #0]
				if(motionWindow >= 0 && motionWindow <= 65535)
 800beac:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800beb6:	d209      	bcs.n	800becc <decodeMotionFilter+0x3fc>
				{
					decodedFilterParams.Motion_Confirm_Window = (uint16_t)motionWindow;
 800beb8:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800bec4:	f102 020c 	add.w	r2, r2, #12
 800bec8:	8013      	strh	r3, [r2, #0]
			if(isdigit((unsigned char)motionWindowStr[0]))
 800beca:	e014      	b.n	800bef6 <decodeMotionFilter+0x426>
				}
				else
				{
					PRINTF("Motion window is out of range [0-65535]: %d\r\n", motionWindow);
 800becc:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	4982      	ldr	r1, [pc, #520]	@ (800c0dc <decodeMotionFilter+0x60c>)
 800bed4:	2001      	movs	r0, #1
 800bed6:	f7fa ff4d 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)motionWindowStr[0]))
 800beda:	e00c      	b.n	800bef6 <decodeMotionFilter+0x426>
				}
			}
			else
			{
				isError = true;
 800bedc:	2301      	movs	r3, #1
 800bede:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bee2:	f102 020f 	add.w	r2, r2, #15
 800bee6:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)motionWindowStr[0]))
 800bee8:	e005      	b.n	800bef6 <decodeMotionFilter+0x426>
			}
		}
		else
		{
			isError = true;
 800beea:	2301      	movs	r3, #1
 800beec:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bef0:	f102 020f 	add.w	r2, r2, #15
 800bef4:	7013      	strb	r3, [r2, #0]
		}

		char* motionThreshStr = strstr(filterStr, motionThreshTest);
 800bef6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800befa:	3b04      	subs	r3, #4
 800befc:	4619      	mov	r1, r3
 800befe:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bf02:	f103 0308 	add.w	r3, r3, #8
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	f01b f9b7 	bl	802727a <strstr>
 800bf0c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bf10:	f103 0304 	add.w	r3, r3, #4
 800bf14:	6018      	str	r0, [r3, #0]
		if(motionThreshStr && !isError)
 800bf16:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bf1a:	f103 0304 	add.w	r3, r3, #4
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d062      	beq.n	800bfea <decodeMotionFilter+0x51a>
 800bf24:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800bf28:	f103 030f 	add.w	r3, r3, #15
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	f083 0301 	eor.w	r3, r3, #1
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d058      	beq.n	800bfea <decodeMotionFilter+0x51a>
		{
			Refresh_Watchdog;
 800bf38:	4867      	ldr	r0, [pc, #412]	@ (800c0d8 <decodeMotionFilter+0x608>)
 800bf3a:	f00f f94a 	bl	801b1d2 <HAL_IWDG_Refresh>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <decodeMotionFilter+0x478>
 800bf44:	f009 fc26 	bl	8015794 <Error_Handler>
			motionThreshStr += strlen(motionThreshTest);
 800bf48:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800bf4c:	3b04      	subs	r3, #4
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7f4 f99c 	bl	800028c <strlen>
 800bf54:	4602      	mov	r2, r0
 800bf56:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bf5a:	f103 0304 	add.w	r3, r3, #4
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4413      	add	r3, r2
 800bf62:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bf66:	f102 0204 	add.w	r2, r2, #4
 800bf6a:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)motionThreshStr[0]))
 800bf6c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bf70:	f103 0304 	add.w	r3, r3, #4
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	4a56      	ldr	r2, [pc, #344]	@ (800c0d4 <decodeMotionFilter+0x604>)
 800bf7c:	4413      	add	r3, r2
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	f003 0304 	and.w	r3, r3, #4
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d029      	beq.n	800bfdc <decodeMotionFilter+0x50c>
			{
				motionThreshold = atoi(motionThreshStr);
 800bf88:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bf8c:	f103 0304 	add.w	r3, r3, #4
 800bf90:	6818      	ldr	r0, [r3, #0]
 800bf92:	f019 f9a3 	bl	80252dc <atoi>
 800bf96:	4603      	mov	r3, r0
 800bf98:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800bf9c:	f102 021c 	add.w	r2, r2, #28
 800bfa0:	6013      	str	r3, [r2, #0]
				if(motionThreshold >= 0 && motionThreshold <= 100)
 800bfa2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bfa6:	f103 031c 	add.w	r3, r3, #28
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b64      	cmp	r3, #100	@ 0x64
 800bfae:	d80b      	bhi.n	800bfc8 <decodeMotionFilter+0x4f8>
				{
					decodedFilterParams.Motion_Threshhold = (uint8_t)motionThreshold;
 800bfb0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bfb4:	f103 031c 	add.w	r3, r3, #28
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800bfc0:	f102 020e 	add.w	r2, r2, #14
 800bfc4:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)motionThreshStr[0]))
 800bfc6:	e016      	b.n	800bff6 <decodeMotionFilter+0x526>
				}
				else
				{
					PRINTF("Motion threshold is out of range [0-100]: %d\r\n", motionThreshold);
 800bfc8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800bfcc:	f103 031c 	add.w	r3, r3, #28
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4943      	ldr	r1, [pc, #268]	@ (800c0e0 <decodeMotionFilter+0x610>)
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	f7fa fecd 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)motionThreshStr[0]))
 800bfda:	e00c      	b.n	800bff6 <decodeMotionFilter+0x526>
				}
			}
			else
			{
				isError = true;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bfe2:	f102 020f 	add.w	r2, r2, #15
 800bfe6:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)motionThreshStr[0]))
 800bfe8:	e005      	b.n	800bff6 <decodeMotionFilter+0x526>
			}
		}
		else
		{
			isError = true;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800bff0:	f102 020f 	add.w	r2, r2, #15
 800bff4:	7013      	strb	r3, [r2, #0]
		}

		char* balckoutStr = strstr(filterStr, blackoutTest);
 800bff6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800bffa:	3b18      	subs	r3, #24
 800bffc:	4619      	mov	r1, r3
 800bffe:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c002:	f103 0308 	add.w	r3, r3, #8
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	f01b f937 	bl	802727a <strstr>
 800c00c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c010:	6018      	str	r0, [r3, #0]
		if(balckoutStr && !isError)
 800c012:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d065      	beq.n	800c0e8 <decodeMotionFilter+0x618>
 800c01c:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c020:	f103 030f 	add.w	r3, r3, #15
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f083 0301 	eor.w	r3, r3, #1
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d05b      	beq.n	800c0e8 <decodeMotionFilter+0x618>
		{
			Refresh_Watchdog;
 800c030:	4829      	ldr	r0, [pc, #164]	@ (800c0d8 <decodeMotionFilter+0x608>)
 800c032:	f00f f8ce 	bl	801b1d2 <HAL_IWDG_Refresh>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <decodeMotionFilter+0x570>
 800c03c:	f009 fbaa 	bl	8015794 <Error_Handler>
			balckoutStr += strlen(blackoutTest);
 800c040:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800c044:	3b18      	subs	r3, #24
 800c046:	4618      	mov	r0, r3
 800c048:	f7f4 f920 	bl	800028c <strlen>
 800c04c:	4602      	mov	r2, r0
 800c04e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4413      	add	r3, r2
 800c056:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800c05a:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)balckoutStr[0]))
 800c05c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a1b      	ldr	r2, [pc, #108]	@ (800c0d4 <decodeMotionFilter+0x604>)
 800c068:	4413      	add	r3, r2
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	f003 0304 	and.w	r3, r3, #4
 800c070:	2b00      	cmp	r3, #0
 800c072:	d028      	beq.n	800c0c6 <decodeMotionFilter+0x5f6>
			{
				blackout = atoi(balckoutStr);
 800c074:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	f019 f92f 	bl	80252dc <atoi>
 800c07e:	4603      	mov	r3, r0
 800c080:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800c084:	f102 0218 	add.w	r2, r2, #24
 800c088:	6013      	str	r3, [r2, #0]
				// Change Range to uint16_t max
				if(blackout >= 0 && blackout <= 65535)
 800c08a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c08e:	f103 0318 	add.w	r3, r3, #24
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c098:	d20b      	bcs.n	800c0b2 <decodeMotionFilter+0x5e2>
				{
					decodedFilterParams.Motion_Blackout = (uint16_t)blackout;
 800c09a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c09e:	f103 0318 	add.w	r3, r3, #24
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c0aa:	f102 0210 	add.w	r2, r2, #16
 800c0ae:	8013      	strh	r3, [r2, #0]
			if(isdigit((unsigned char)balckoutStr[0]))
 800c0b0:	e020      	b.n	800c0f4 <decodeMotionFilter+0x624>
				}
				else
				{
					PRINTF("Blackout is out of range [0-65535]: %d\r\n", blackout);
 800c0b2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c0b6:	f103 0318 	add.w	r3, r3, #24
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	4909      	ldr	r1, [pc, #36]	@ (800c0e4 <decodeMotionFilter+0x614>)
 800c0be:	2001      	movs	r0, #1
 800c0c0:	f7fa fe58 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)balckoutStr[0]))
 800c0c4:	e016      	b.n	800c0f4 <decodeMotionFilter+0x624>
				}
			}
			else
			{
				isError = true;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c0cc:	f102 020f 	add.w	r2, r2, #15
 800c0d0:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)balckoutStr[0]))
 800c0d2:	e00f      	b.n	800c0f4 <decodeMotionFilter+0x624>
 800c0d4:	0803031d 	.word	0x0803031d
 800c0d8:	2007d0bc 	.word	0x2007d0bc
 800c0dc:	0802e458 	.word	0x0802e458
 800c0e0:	0802e488 	.word	0x0802e488
 800c0e4:	0802e4b8 	.word	0x0802e4b8
			}
		}
		else
		{
			isError = true;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c0ee:	f102 020f 	add.w	r2, r2, #15
 800c0f2:	7013      	strb	r3, [r2, #0]
		}

		char* noMotionStr = strstr(filterStr, noMotionTest);
 800c0f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c0f8:	3b0c      	subs	r3, #12
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c100:	f103 0308 	add.w	r3, r3, #8
 800c104:	6818      	ldr	r0, [r3, #0]
 800c106:	f01b f8b8 	bl	802727a <strstr>
 800c10a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c10e:	f103 031c 	add.w	r3, r3, #28
 800c112:	6018      	str	r0, [r3, #0]
		if(noMotionStr && !isError)
 800c114:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c118:	f103 031c 	add.w	r3, r3, #28
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d062      	beq.n	800c1e8 <decodeMotionFilter+0x718>
 800c122:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c126:	f103 030f 	add.w	r3, r3, #15
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	f083 0301 	eor.w	r3, r3, #1
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d058      	beq.n	800c1e8 <decodeMotionFilter+0x718>
		{
			Refresh_Watchdog;
 800c136:	4899      	ldr	r0, [pc, #612]	@ (800c39c <decodeMotionFilter+0x8cc>)
 800c138:	f00f f84b 	bl	801b1d2 <HAL_IWDG_Refresh>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <decodeMotionFilter+0x676>
 800c142:	f009 fb27 	bl	8015794 <Error_Handler>
			noMotionStr += strlen(noMotionTest);
 800c146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c14a:	3b0c      	subs	r3, #12
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7f4 f89d 	bl	800028c <strlen>
 800c152:	4602      	mov	r2, r0
 800c154:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c158:	f103 031c 	add.w	r3, r3, #28
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4413      	add	r3, r2
 800c160:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c164:	f102 021c 	add.w	r2, r2, #28
 800c168:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)noMotionStr[0]))
 800c16a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c16e:	f103 031c 	add.w	r3, r3, #28
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	3301      	adds	r3, #1
 800c178:	4a89      	ldr	r2, [pc, #548]	@ (800c3a0 <decodeMotionFilter+0x8d0>)
 800c17a:	4413      	add	r3, r2
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	f003 0304 	and.w	r3, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	d029      	beq.n	800c1da <decodeMotionFilter+0x70a>
			{
				noMotion = atoi(noMotionStr);
 800c186:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c18a:	f103 031c 	add.w	r3, r3, #28
 800c18e:	6818      	ldr	r0, [r3, #0]
 800c190:	f019 f8a4 	bl	80252dc <atoi>
 800c194:	4603      	mov	r3, r0
 800c196:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800c19a:	f102 0214 	add.w	r2, r2, #20
 800c19e:	6013      	str	r3, [r2, #0]
				if(noMotion >= 0 && noMotion <= 255)
 800c1a0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c1a4:	f103 0314 	add.w	r3, r3, #20
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2bff      	cmp	r3, #255	@ 0xff
 800c1ac:	d80b      	bhi.n	800c1c6 <decodeMotionFilter+0x6f6>
				{
					decodedFilterParams.No_Motion_Detection_Window = (uint8_t)noMotion;
 800c1ae:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c1b2:	f103 0314 	add.w	r3, r3, #20
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c1be:	f102 0212 	add.w	r2, r2, #18
 800c1c2:	8013      	strh	r3, [r2, #0]
			if(isdigit((unsigned char)noMotionStr[0]))
 800c1c4:	e016      	b.n	800c1f4 <decodeMotionFilter+0x724>
				}
				else
				{
					PRINTF("No motion is out of range [0-255]: %d\r\n", noMotion);
 800c1c6:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c1ca:	f103 0314 	add.w	r3, r3, #20
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	4974      	ldr	r1, [pc, #464]	@ (800c3a4 <decodeMotionFilter+0x8d4>)
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	f7fa fdce 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)noMotionStr[0]))
 800c1d8:	e00c      	b.n	800c1f4 <decodeMotionFilter+0x724>
				}
			}
			else
			{
				isError = true;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c1e0:	f102 020f 	add.w	r2, r2, #15
 800c1e4:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)noMotionStr[0]))
 800c1e6:	e005      	b.n	800c1f4 <decodeMotionFilter+0x724>
			}
		}
		else
		{
			isError = true;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c1ee:	f102 020f 	add.w	r2, r2, #15
 800c1f2:	7013      	strb	r3, [r2, #0]
		}

		char* nearMotionStr = strstr(filterStr, nearMotionTest);
 800c1f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c1f8:	3b1c      	subs	r3, #28
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c200:	f103 0308 	add.w	r3, r3, #8
 800c204:	6818      	ldr	r0, [r3, #0]
 800c206:	f01b f838 	bl	802727a <strstr>
 800c20a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c20e:	f103 0318 	add.w	r3, r3, #24
 800c212:	6018      	str	r0, [r3, #0]
		if(nearMotionStr && !isError)
 800c214:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c218:	f103 0318 	add.w	r3, r3, #24
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d062      	beq.n	800c2e8 <decodeMotionFilter+0x818>
 800c222:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c226:	f103 030f 	add.w	r3, r3, #15
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	f083 0301 	eor.w	r3, r3, #1
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	d058      	beq.n	800c2e8 <decodeMotionFilter+0x818>
		{
			Refresh_Watchdog;
 800c236:	4859      	ldr	r0, [pc, #356]	@ (800c39c <decodeMotionFilter+0x8cc>)
 800c238:	f00e ffcb 	bl	801b1d2 <HAL_IWDG_Refresh>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <decodeMotionFilter+0x776>
 800c242:	f009 faa7 	bl	8015794 <Error_Handler>
			nearMotionStr += strlen(nearMotionTest);
 800c246:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c24a:	3b1c      	subs	r3, #28
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7f4 f81d 	bl	800028c <strlen>
 800c252:	4602      	mov	r2, r0
 800c254:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c258:	f103 0318 	add.w	r3, r3, #24
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4413      	add	r3, r2
 800c260:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c264:	f102 0218 	add.w	r2, r2, #24
 800c268:	6013      	str	r3, [r2, #0]
			if(isdigit((unsigned char)nearMotionStr[0]))
 800c26a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c26e:	f103 0318 	add.w	r3, r3, #24
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	3301      	adds	r3, #1
 800c278:	4a49      	ldr	r2, [pc, #292]	@ (800c3a0 <decodeMotionFilter+0x8d0>)
 800c27a:	4413      	add	r3, r2
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	f003 0304 	and.w	r3, r3, #4
 800c282:	2b00      	cmp	r3, #0
 800c284:	d029      	beq.n	800c2da <decodeMotionFilter+0x80a>
			{
				nearMotion = atoi(nearMotionStr);
 800c286:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c28a:	f103 0318 	add.w	r3, r3, #24
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	f019 f824 	bl	80252dc <atoi>
 800c294:	4603      	mov	r3, r0
 800c296:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800c29a:	f102 0210 	add.w	r2, r2, #16
 800c29e:	6013      	str	r3, [r2, #0]
				if(nearMotion >= 0 && nearMotion <= 100)
 800c2a0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c2a4:	f103 0310 	add.w	r3, r3, #16
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b64      	cmp	r3, #100	@ 0x64
 800c2ac:	d80b      	bhi.n	800c2c6 <decodeMotionFilter+0x7f6>
				{
					decodedFilterParams.Near_Motion_Threshhold = (uint8_t)nearMotion;
 800c2ae:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c2b2:	f103 0310 	add.w	r3, r3, #16
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c2be:	f102 0214 	add.w	r2, r2, #20
 800c2c2:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)nearMotionStr[0]))
 800c2c4:	e01d      	b.n	800c302 <decodeMotionFilter+0x832>
				}
				else
				{
					PRINTF("Near motion is out of range [0-100]: %d\r\n", nearMotion);
 800c2c6:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800c2ca:	f103 0310 	add.w	r3, r3, #16
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	4935      	ldr	r1, [pc, #212]	@ (800c3a8 <decodeMotionFilter+0x8d8>)
 800c2d2:	2001      	movs	r0, #1
 800c2d4:	f7fa fd4e 	bl	8006d74 <TraceSend>
			if(isdigit((unsigned char)nearMotionStr[0]))
 800c2d8:	e013      	b.n	800c302 <decodeMotionFilter+0x832>
				}
			}
			else
			{
				isError = true;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c2e0:	f102 020f 	add.w	r2, r2, #15
 800c2e4:	7013      	strb	r3, [r2, #0]
			if(isdigit((unsigned char)nearMotionStr[0]))
 800c2e6:	e00c      	b.n	800c302 <decodeMotionFilter+0x832>
			}
		}
		else
		{
			isError = true;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c2ee:	f102 020f 	add.w	r2, r2, #15
 800c2f2:	7013      	strb	r3, [r2, #0]
 800c2f4:	e005      	b.n	800c302 <decodeMotionFilter+0x832>
		}
	}
	else
	{
		isError = true;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 800c2fc:	f102 020f 	add.w	r2, r2, #15
 800c300:	7013      	strb	r3, [r2, #0]
	}

	if(!isError)
 800c302:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c306:	f103 030f 	add.w	r3, r3, #15
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	f083 0301 	eor.w	r3, r3, #1
 800c310:	b2db      	uxtb	r3, r3
 800c312:	2b00      	cmp	r3, #0
 800c314:	d036      	beq.n	800c384 <decodeMotionFilter+0x8b4>
	{
		Refresh_Watchdog;
 800c316:	4821      	ldr	r0, [pc, #132]	@ (800c39c <decodeMotionFilter+0x8cc>)
 800c318:	f00e ff5b 	bl	801b1d2 <HAL_IWDG_Refresh>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <decodeMotionFilter+0x856>
 800c322:	f009 fa37 	bl	8015794 <Error_Handler>

		PRINTF("Setting Filter Values; Motion_Confirm_Window %d, Motion_Threshhold %d, Motion_Blackout %d, No_Motion_Detection_Window %d, Near_Motion_Threshhold %d\r\n",
 800c326:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c32a:	f103 030c 	add.w	r3, r3, #12
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	4618      	mov	r0, r3
 800c332:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c336:	f103 030e 	add.w	r3, r3, #14
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	461c      	mov	r4, r3
 800c33e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800c342:	f103 0310 	add.w	r3, r3, #16
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c34c:	f102 0214 	add.w	r2, r2, #20
 800c350:	7812      	ldrb	r2, [r2, #0]
 800c352:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 800c356:	f101 0112 	add.w	r1, r1, #18
 800c35a:	8809      	ldrh	r1, [r1, #0]
 800c35c:	9102      	str	r1, [sp, #8]
 800c35e:	9201      	str	r2, [sp, #4]
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	4623      	mov	r3, r4
 800c364:	4602      	mov	r2, r0
 800c366:	4911      	ldr	r1, [pc, #68]	@ (800c3ac <decodeMotionFilter+0x8dc>)
 800c368:	2001      	movs	r0, #1
 800c36a:	f7fa fd03 	bl	8006d74 <TraceSend>
				decodedFilterParams.Motion_Threshhold,
				decodedFilterParams.Motion_Blackout,
				decodedFilterParams.Near_Motion_Threshhold,
				decodedFilterParams.No_Motion_Detection_Window );

		setFilterParameters(decodedFilterParams, sunPeriod);
 800c36e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800c372:	f813 3c8d 	ldrb.w	r3, [r3, #-141]
 800c376:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800c37a:	f102 020c 	add.w	r2, r2, #12
 800c37e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c380:	f7ff f9cc 	bl	800b71c <setFilterParameters>
	}

	return isError;
 800c384:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 800c388:	f103 030f 	add.w	r3, r3, #15
 800c38c:	781b      	ldrb	r3, [r3, #0]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	f507 5784 	add.w	r7, r7, #4224	@ 0x1080
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bdb0      	pop	{r4, r5, r7, pc}
 800c39a:	bf00      	nop
 800c39c:	2007d0bc 	.word	0x2007d0bc
 800c3a0:	0803031d 	.word	0x0803031d
 800c3a4:	0802e4e4 	.word	0x0802e4e4
 800c3a8:	0802e50c 	.word	0x0802e50c
 800c3ac:	0802e538 	.word	0x0802e538

0800c3b0 <getPirConfigStr>:

char* getPirConfigStr(void)
{
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	b09d      	sub	sp, #116	@ 0x74
 800c3b4:	af0e      	add	r7, sp, #56	@ 0x38
	static char pirBuff[PIR_DOWNLINK_TEST_MSG_SIZE] = {0};
	char timebuff[ISO_TIMESTAMP_LENGTH] = {""};
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	61bb      	str	r3, [r7, #24]
 800c3ba:	f107 031c 	add.w	r3, r7, #28
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	605a      	str	r2, [r3, #4]
 800c3c4:	609a      	str	r2, [r3, #8]
 800c3c6:	60da      	str	r2, [r3, #12]
 800c3c8:	611a      	str	r2, [r3, #16]
 800c3ca:	751a      	strb	r2, [r3, #20]
	int buffSize = 0;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	637b      	str	r3, [r7, #52]	@ 0x34

	Time_StampISO(timebuff);
 800c3d0:	f107 0318 	add.w	r3, r7, #24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fa ffe1 	bl	800739c <Time_StampISO>

	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3da:	4b27      	ldr	r3, [pc, #156]	@ (800c478 <getPirConfigStr+0xc8>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c3de:	461a      	mov	r2, r3
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3e0:	4b25      	ldr	r3, [pc, #148]	@ (800c478 <getPirConfigStr+0xc8>)
 800c3e2:	885b      	ldrh	r3, [r3, #2]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c3e4:	4619      	mov	r1, r3
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3e6:	4b25      	ldr	r3, [pc, #148]	@ (800c47c <getPirConfigStr+0xcc>)
 800c3e8:	881b      	ldrh	r3, [r3, #0]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c3ea:	4618      	mov	r0, r3
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3ec:	4b23      	ldr	r3, [pc, #140]	@ (800c47c <getPirConfigStr+0xcc>)
 800c3ee:	789b      	ldrb	r3, [r3, #2]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c3f0:	461c      	mov	r4, r3
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3f2:	4b22      	ldr	r3, [pc, #136]	@ (800c47c <getPirConfigStr+0xcc>)
 800c3f4:	889b      	ldrh	r3, [r3, #4]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c3f6:	461d      	mov	r5, r3
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3f8:	4b20      	ldr	r3, [pc, #128]	@ (800c47c <getPirConfigStr+0xcc>)
 800c3fa:	88db      	ldrh	r3, [r3, #6]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c3fc:	461e      	mov	r6, r3
			PIR_CONFIG_VERSION, pirData2.mode, pirData2.coolDown, PIR_DAY_VERSION, dayTimeParam.Motion_Confirm_Window, dayTimeParam.Motion_Threshhold, dayTimeParam.Motion_Blackout, dayTimeParam.No_Motion_Detection_Window, dayTimeParam.Near_Motion_Threshhold,
 800c3fe:	4b1f      	ldr	r3, [pc, #124]	@ (800c47c <getPirConfigStr+0xcc>)
 800c400:	7a1b      	ldrb	r3, [r3, #8]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c402:	617b      	str	r3, [r7, #20]
			PIR_NIGHT_VERSION, nightTimeParam.Motion_Confirm_Window, nightTimeParam.Motion_Threshhold, nightTimeParam.Motion_Blackout, nightTimeParam.No_Motion_Detection_Window, nightTimeParam.Near_Motion_Threshhold);
 800c404:	4b1e      	ldr	r3, [pc, #120]	@ (800c480 <getPirConfigStr+0xd0>)
 800c406:	881b      	ldrh	r3, [r3, #0]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c408:	613b      	str	r3, [r7, #16]
			PIR_NIGHT_VERSION, nightTimeParam.Motion_Confirm_Window, nightTimeParam.Motion_Threshhold, nightTimeParam.Motion_Blackout, nightTimeParam.No_Motion_Detection_Window, nightTimeParam.Near_Motion_Threshhold);
 800c40a:	4b1d      	ldr	r3, [pc, #116]	@ (800c480 <getPirConfigStr+0xd0>)
 800c40c:	789b      	ldrb	r3, [r3, #2]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c40e:	60fb      	str	r3, [r7, #12]
			PIR_NIGHT_VERSION, nightTimeParam.Motion_Confirm_Window, nightTimeParam.Motion_Threshhold, nightTimeParam.Motion_Blackout, nightTimeParam.No_Motion_Detection_Window, nightTimeParam.Near_Motion_Threshhold);
 800c410:	4b1b      	ldr	r3, [pc, #108]	@ (800c480 <getPirConfigStr+0xd0>)
 800c412:	889b      	ldrh	r3, [r3, #4]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c414:	60bb      	str	r3, [r7, #8]
			PIR_NIGHT_VERSION, nightTimeParam.Motion_Confirm_Window, nightTimeParam.Motion_Threshhold, nightTimeParam.Motion_Blackout, nightTimeParam.No_Motion_Detection_Window, nightTimeParam.Near_Motion_Threshhold);
 800c416:	4b1a      	ldr	r3, [pc, #104]	@ (800c480 <getPirConfigStr+0xd0>)
 800c418:	88db      	ldrh	r3, [r3, #6]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c41a:	607b      	str	r3, [r7, #4]
			PIR_NIGHT_VERSION, nightTimeParam.Motion_Confirm_Window, nightTimeParam.Motion_Threshhold, nightTimeParam.Motion_Blackout, nightTimeParam.No_Motion_Detection_Window, nightTimeParam.Near_Motion_Threshhold);
 800c41c:	4b18      	ldr	r3, [pc, #96]	@ (800c480 <getPirConfigStr+0xd0>)
 800c41e:	7a1b      	ldrb	r3, [r3, #8]
	buffSize = snprintf(pirBuff, PIR_DOWNLINK_TEST_MSG_SIZE, "\"pir\":{\"version\":%u,\"mode\":%u,\"muting_period\":%u},\r\n\"motion_filter_day\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u},\r\n\"motion_filter_night\":{\"version\":%u,\"motion_confirm_window\":%u,\"motion_threshold\":%u,\"motion_blackout\":%u,\"no_motion_window\":%u,\"near_motion\":%u}",
 800c420:	930d      	str	r3, [sp, #52]	@ 0x34
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	930c      	str	r3, [sp, #48]	@ 0x30
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	9309      	str	r3, [sp, #36]	@ 0x24
 800c432:	2300      	movs	r3, #0
 800c434:	9308      	str	r3, [sp, #32]
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	9307      	str	r3, [sp, #28]
 800c43a:	9606      	str	r6, [sp, #24]
 800c43c:	9505      	str	r5, [sp, #20]
 800c43e:	9404      	str	r4, [sp, #16]
 800c440:	9003      	str	r0, [sp, #12]
 800c442:	2300      	movs	r3, #0
 800c444:	9302      	str	r3, [sp, #8]
 800c446:	9101      	str	r1, [sp, #4]
 800c448:	9200      	str	r2, [sp, #0]
 800c44a:	2300      	movs	r3, #0
 800c44c:	4a0d      	ldr	r2, [pc, #52]	@ (800c484 <getPirConfigStr+0xd4>)
 800c44e:	f44f 7116 	mov.w	r1, #600	@ 0x258
 800c452:	480d      	ldr	r0, [pc, #52]	@ (800c488 <getPirConfigStr+0xd8>)
 800c454:	f01a fdaa 	bl	8026fac <sniprintf>
 800c458:	6378      	str	r0, [r7, #52]	@ 0x34

	if(buffSize > 0 && buffSize < PIR_DOWNLINK_TEST_MSG_SIZE)
 800c45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dd05      	ble.n	800c46c <getPirConfigStr+0xbc>
 800c460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c462:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800c466:	da01      	bge.n	800c46c <getPirConfigStr+0xbc>
	{
		return pirBuff;
 800c468:	4b07      	ldr	r3, [pc, #28]	@ (800c488 <getPirConfigStr+0xd8>)
 800c46a:	e000      	b.n	800c46e <getPirConfigStr+0xbe>
	}
	else
	{
		return "Failed to build PIR test Configure String";
 800c46c:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <getPirConfigStr+0xdc>)
	}
}
 800c46e:	4618      	mov	r0, r3
 800c470:	373c      	adds	r7, #60	@ 0x3c
 800c472:	46bd      	mov	sp, r7
 800c474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c476:	bf00      	nop
 800c478:	2007ba54 	.word	0x2007ba54
 800c47c:	2007ba58 	.word	0x2007ba58
 800c480:	2007ba64 	.word	0x2007ba64
 800c484:	0802e668 	.word	0x0802e668
 800c488:	2007ba74 	.word	0x2007ba74
 800c48c:	0802e7c0 	.word	0x0802e7c0

0800c490 <getPirMutePeriod>:
 * @brief  Accessor function for PIR cooldown (mute) period
 * @note
 * @retval uint16_t mutePeriod
 */
uint16_t getPirMutePeriod(void)
{
 800c490:	b480      	push	{r7}
 800c492:	af00      	add	r7, sp, #0
	return pirData2.coolDown;
 800c494:	4b03      	ldr	r3, [pc, #12]	@ (800c4a4 <getPirMutePeriod+0x14>)
 800c496:	885b      	ldrh	r3, [r3, #2]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	2007ba54 	.word	0x2007ba54

0800c4a8 <CELL_Init>:
 Cell Initialize Function
 Initializes the MQTT parameters as well as
 establish bridge with server.
 ******************************************************/
void CELL_Init(MEM_PTR *Data_Ptr)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
#ifdef Log_Level_2
	if (PDP == PDP_NOT_SET)
 800c4b0:	4bb0      	ldr	r3, [pc, #704]	@ (800c774 <CELL_Init+0x2cc>)
 800c4b2:	f893 3681 	ldrb.w	r3, [r3, #1665]	@ 0x681
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d103      	bne.n	800c4c2 <CELL_Init+0x1a>
		Log_Single( LOG_MSG_PDP_CONFIG);
 800c4ba:	48af      	ldr	r0, [pc, #700]	@ (800c778 <CELL_Init+0x2d0>)
 800c4bc:	f7fa faf6 	bl	8006aac <Log_Single>
 800c4c0:	e00b      	b.n	800c4da <CELL_Init+0x32>
	else if (PDP == PDP_SET)
 800c4c2:	4bac      	ldr	r3, [pc, #688]	@ (800c774 <CELL_Init+0x2cc>)
 800c4c4:	f893 3681 	ldrb.w	r3, [r3, #1665]	@ 0x681
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d103      	bne.n	800c4d4 <CELL_Init+0x2c>
		Log_Single( LOG_MSG_CELL_Init);
 800c4cc:	48ab      	ldr	r0, [pc, #684]	@ (800c77c <CELL_Init+0x2d4>)
 800c4ce:	f7fa faed 	bl	8006aac <Log_Single>
 800c4d2:	e002      	b.n	800c4da <CELL_Init+0x32>
	else
		Log_Single("PDP STATE BUG \r\n\0");
 800c4d4:	48aa      	ldr	r0, [pc, #680]	@ (800c780 <CELL_Init+0x2d8>)
 800c4d6:	f7fa fae9 	bl	8006aac <Log_Single>
#endif  // Log_Level_2
	/* IWDG Timer Restart */
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 800c4da:	48aa      	ldr	r0, [pc, #680]	@ (800c784 <CELL_Init+0x2dc>)
 800c4dc:	f00e fe79 	bl	801b1d2 <HAL_IWDG_Refresh>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <CELL_Init+0x42>
		Error_Handler();
 800c4e6:	f009 f955 	bl	8015794 <Error_Handler>

	Command = GPS_DISABLE;
 800c4ea:	4ba2      	ldr	r3, [pc, #648]	@ (800c774 <CELL_Init+0x2cc>)
 800c4ec:	2217      	movs	r2, #23
 800c4ee:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f002 fac2 	bl	800ea7c <CELL_COMMAND>

	Command = CHECK;
 800c4f8:	4b9e      	ldr	r3, [pc, #632]	@ (800c774 <CELL_Init+0x2cc>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f002 fabb 	bl	800ea7c <CELL_COMMAND>
	if ( PDP == PDP_NOT_SET )
 800c506:	4b9b      	ldr	r3, [pc, #620]	@ (800c774 <CELL_Init+0x2cc>)
 800c508:	f893 3681 	ldrb.w	r3, [r3, #1665]	@ 0x681
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	f040 80a8 	bne.w	800c662 <CELL_Init+0x1ba>
	{
		PDP = PDP_SET;
 800c512:	4b98      	ldr	r3, [pc, #608]	@ (800c774 <CELL_Init+0x2cc>)
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2681 	strb.w	r2, [r3, #1665]	@ 0x681
		Fail_Cntr = CSQ_MAX_FAIL;
 800c51a:	4b96      	ldr	r3, [pc, #600]	@ (800c774 <CELL_Init+0x2cc>)
 800c51c:	220a      	movs	r2, #10
 800c51e:	f883 2677 	strb.w	r2, [r3, #1655]	@ 0x677
		utoa( UNIQUE_Device_ID, MQTT_ID, 10);
 800c522:	4b99      	ldr	r3, [pc, #612]	@ (800c788 <CELL_Init+0x2e0>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	220a      	movs	r2, #10
 800c528:	4998      	ldr	r1, [pc, #608]	@ (800c78c <CELL_Init+0x2e4>)
 800c52a:	4618      	mov	r0, r3
 800c52c:	f019 fe0e 	bl	802614c <utoa>
		Word_Transfer( Message_ID, MQTT_DEFAULT_MSG_ID);
 800c530:	4997      	ldr	r1, [pc, #604]	@ (800c790 <CELL_Init+0x2e8>)
 800c532:	4898      	ldr	r0, [pc, #608]	@ (800c794 <CELL_Init+0x2ec>)
 800c534:	f7fa f8fe 	bl	8006734 <Word_Transfer>
		Word_Transfer( Username, MQTT_DEFAULT_USERNAME);
 800c538:	4997      	ldr	r1, [pc, #604]	@ (800c798 <CELL_Init+0x2f0>)
 800c53a:	4898      	ldr	r0, [pc, #608]	@ (800c79c <CELL_Init+0x2f4>)
 800c53c:	f7fa f8fa 	bl	8006734 <Word_Transfer>
		Word_Transfer( Password, MQTT_DEFAULT_PASSWORD);
 800c540:	4997      	ldr	r1, [pc, #604]	@ (800c7a0 <CELL_Init+0x2f8>)
 800c542:	4898      	ldr	r0, [pc, #608]	@ (800c7a4 <CELL_Init+0x2fc>)
 800c544:	f7fa f8f6 	bl	8006734 <Word_Transfer>
		Word_Transfer( TX_Size, MQTT_MSGSIZE);
 800c548:	4997      	ldr	r1, [pc, #604]	@ (800c7a8 <CELL_Init+0x300>)
 800c54a:	4898      	ldr	r0, [pc, #608]	@ (800c7ac <CELL_Init+0x304>)
 800c54c:	f7fa f8f2 	bl	8006734 <Word_Transfer>
		Word_Transfer( Event_Type, MQTT_DEFAULT_EVENT);
 800c550:	4997      	ldr	r1, [pc, #604]	@ (800c7b0 <CELL_Init+0x308>)
 800c552:	4898      	ldr	r0, [pc, #608]	@ (800c7b4 <CELL_Init+0x30c>)
 800c554:	f7fa f8ee 	bl	8006734 <Word_Transfer>
		Time_Stamp(Picture_ID);
 800c558:	4897      	ldr	r0, [pc, #604]	@ (800c7b8 <CELL_Init+0x310>)
 800c55a:	f7fa fecd 	bl	80072f8 <Time_Stamp>
		utoa ( UNIQUE_Device_ID , (char*) Cell_Dev_ID , 10 );
 800c55e:	4b8a      	ldr	r3, [pc, #552]	@ (800c788 <CELL_Init+0x2e0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	220a      	movs	r2, #10
 800c564:	4995      	ldr	r1, [pc, #596]	@ (800c7bc <CELL_Init+0x314>)
 800c566:	4618      	mov	r0, r3
 800c568:	f019 fdf0 	bl	802614c <utoa>
#ifdef PDP_CONTEXT
		Command = CHECK;
#endif //PDP_CONTEXT
#ifndef PDP_CONTEXT
		Command = PDP_POPULATE;
 800c56c:	4b81      	ldr	r3, [pc, #516]	@ (800c774 <CELL_Init+0x2cc>)
 800c56e:	2219      	movs	r2, #25
 800c570:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
#endif // not PDP_CONTEXT
		CELL_COMMAND( Data_Ptr );
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f002 fa81 	bl	800ea7c <CELL_COMMAND>
		Clear_Memory(Data_Ptr);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7fa f881 	bl	8006682 <Clear_Memory>
		Command = CONFIG;
 800c580:	4b7c      	ldr	r3, [pc, #496]	@ (800c774 <CELL_Init+0x2cc>)
 800c582:	2215      	movs	r2, #21
 800c584:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND( Data_Ptr );
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f002 fa77 	bl	800ea7c <CELL_COMMAND>
		Clear_Memory(Data_Ptr);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7fa f877 	bl	8006682 <Clear_Memory>
		Command = activatePDP;
 800c594:	4b77      	ldr	r3, [pc, #476]	@ (800c774 <CELL_Init+0x2cc>)
 800c596:	222f      	movs	r2, #47	@ 0x2f
 800c598:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f002 fa6d 	bl	800ea7c <CELL_COMMAND>
		cellResponseCheck(Data_Ptr);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f005 fb74 	bl	8011c90 <cellResponseCheck>
		Command = REENABLEQI;
 800c5a8:	4b72      	ldr	r3, [pc, #456]	@ (800c774 <CELL_Init+0x2cc>)
 800c5aa:	2203      	movs	r2, #3
 800c5ac:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND( Data_Ptr );
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f002 fa63 	bl	800ea7c <CELL_COMMAND>
		cellResponseCheck(Data_Ptr);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f005 fb6a 	bl	8011c90 <cellResponseCheck>
		Clear_Memory(Data_Ptr);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7fa f860 	bl	8006682 <Clear_Memory>
		Command = SIM_ID;
 800c5c2:	4b6c      	ldr	r3, [pc, #432]	@ (800c774 <CELL_Init+0x2cc>)
 800c5c4:	2205      	movs	r2, #5
 800c5c6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND( Data_Ptr );
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f002 fa56 	bl	800ea7c <CELL_COMMAND>
		Char_Replace((char*) Memory, "\n", " ");
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c5d6:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800c5da:	4a79      	ldr	r2, [pc, #484]	@ (800c7c0 <CELL_Init+0x318>)
 800c5dc:	4979      	ldr	r1, [pc, #484]	@ (800c7c4 <CELL_Init+0x31c>)
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7fa f8c8 	bl	8006774 <Char_Replace>
		Char_Replace((char*) Memory, "\r", " ");
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c5ea:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800c5ee:	4a74      	ldr	r2, [pc, #464]	@ (800c7c0 <CELL_Init+0x318>)
 800c5f0:	4975      	ldr	r1, [pc, #468]	@ (800c7c8 <CELL_Init+0x320>)
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fa f8be 	bl	8006774 <Char_Replace>
		Word_Transfer((char*) Sim_ID, (char*) Memory);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c5fe:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800c602:	4619      	mov	r1, r3
 800c604:	4871      	ldr	r0, [pc, #452]	@ (800c7cc <CELL_Init+0x324>)
 800c606:	f7fa f895 	bl	8006734 <Word_Transfer>
		Command = MODEM_ID;
 800c60a:	4b5a      	ldr	r3, [pc, #360]	@ (800c774 <CELL_Init+0x2cc>)
 800c60c:	2206      	movs	r2, #6
 800c60e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f002 fa32 	bl	800ea7c <CELL_COMMAND>
		Char_Replace((char*) Memory, "\n", " ");
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c61e:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800c622:	4a67      	ldr	r2, [pc, #412]	@ (800c7c0 <CELL_Init+0x318>)
 800c624:	4967      	ldr	r1, [pc, #412]	@ (800c7c4 <CELL_Init+0x31c>)
 800c626:	4618      	mov	r0, r3
 800c628:	f7fa f8a4 	bl	8006774 <Char_Replace>
		Char_Replace((char*) Memory, "\r", " ");
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c632:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800c636:	4a62      	ldr	r2, [pc, #392]	@ (800c7c0 <CELL_Init+0x318>)
 800c638:	4963      	ldr	r1, [pc, #396]	@ (800c7c8 <CELL_Init+0x320>)
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fa f89a 	bl	8006774 <Char_Replace>
		Word_Transfer((char*) Modem_ID, (char*) Memory);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c646:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800c64a:	4619      	mov	r1, r3
 800c64c:	4860      	ldr	r0, [pc, #384]	@ (800c7d0 <CELL_Init+0x328>)
 800c64e:	f7fa f871 	bl	8006734 <Word_Transfer>
		Command = CHECK;
 800c652:	4b48      	ldr	r3, [pc, #288]	@ (800c774 <CELL_Init+0x2cc>)
 800c654:	2200      	movs	r2, #0
 800c656:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f002 fa0e 	bl	800ea7c <CELL_COMMAND>
 800c660:	e015      	b.n	800c68e <CELL_Init+0x1e6>
	}
	else if (PDP == PDP_SET)
 800c662:	4b44      	ldr	r3, [pc, #272]	@ (800c774 <CELL_Init+0x2cc>)
 800c664:	f893 3681 	ldrb.w	r3, [r3, #1665]	@ 0x681
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10d      	bne.n	800c688 <CELL_Init+0x1e0>
	{
		CELL_Set_Command ( CONFIG );
 800c66c:	2015      	movs	r0, #21
 800c66e:	f004 fbed 	bl	8010e4c <CELL_Set_Command>
		CELL_COMMAND ( Data_Ptr );
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f002 fa02 	bl	800ea7c <CELL_COMMAND>
		Command = CHECK;
 800c678:	4b3e      	ldr	r3, [pc, #248]	@ (800c774 <CELL_Init+0x2cc>)
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f002 f9fb 	bl	800ea7c <CELL_COMMAND>
 800c686:	e002      	b.n	800c68e <CELL_Init+0x1e6>
	}
	else
		Log_Single("Modem PDP Cell_State Fail\r\n\0");
 800c688:	4852      	ldr	r0, [pc, #328]	@ (800c7d4 <CELL_Init+0x32c>)
 800c68a:	f7fa fa0f 	bl	8006aac <Log_Single>
	Command = CONNECTION_TEST;
 800c68e:	4b39      	ldr	r3, [pc, #228]	@ (800c774 <CELL_Init+0x2cc>)
 800c690:	2201      	movs	r2, #1
 800c692:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f002 f9f0 	bl	800ea7c <CELL_COMMAND>
	if (Memory[26] == '3')
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c6a2:	f893 3382 	ldrb.w	r3, [r3, #898]	@ 0x382
 800c6a6:	2b33      	cmp	r3, #51	@ 0x33
 800c6a8:	d104      	bne.n	800c6b4 <CELL_Init+0x20c>
	{
		Cell_State = CELL_OK;
 800c6aa:	4b32      	ldr	r3, [pc, #200]	@ (800c774 <CELL_Init+0x2cc>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
		return;
 800c6b2:	e05c      	b.n	800c76e <CELL_Init+0x2c6>
	}while (State!= CELL_OK);
#endif  // CERTIFICATE
	//	HAL_Delay ( 1000 );
	//	Update_Battery ( &Data_Ptr -> Battery );
	// MQTT
	Clear_Memory(Data_Ptr);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f7f9 ffe4 	bl	8006682 <Clear_Memory>
	Command = OPEN;
 800c6ba:	4b2e      	ldr	r3, [pc, #184]	@ (800c774 <CELL_Init+0x2cc>)
 800c6bc:	2207      	movs	r2, #7
 800c6be:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f002 f9da 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f005 fae1 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7f9 ffd7 	bl	8006682 <Clear_Memory>
	Command = CONNECT;
 800c6d4:	4b27      	ldr	r3, [pc, #156]	@ (800c774 <CELL_Init+0x2cc>)
 800c6d6:	2209      	movs	r2, #9
 800c6d8:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f002 f9cd 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f005 fad4 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7f9 ffca 	bl	8006682 <Clear_Memory>
	Command = SUBSCRIBEDOWN;
 800c6ee:	4b21      	ldr	r3, [pc, #132]	@ (800c774 <CELL_Init+0x2cc>)
 800c6f0:	220c      	movs	r2, #12
 800c6f2:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f002 f9c0 	bl	800ea7c <CELL_COMMAND>
	cellResponseCheck(Data_Ptr);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f005 fac7 	bl	8011c90 <cellResponseCheck>
	Clear_Memory(Data_Ptr);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7f9 ffbd 	bl	8006682 <Clear_Memory>
	if ( retry )
 800c708:	4b33      	ldr	r3, [pc, #204]	@ (800c7d8 <CELL_Init+0x330>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d011      	beq.n	800c734 <CELL_Init+0x28c>
	{
		if (InitCounter < 3)
 800c710:	4b32      	ldr	r3, [pc, #200]	@ (800c7dc <CELL_Init+0x334>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b02      	cmp	r3, #2
 800c716:	dc0b      	bgt.n	800c730 <CELL_Init+0x288>
		{
			InitCounter ++;
 800c718:	4b30      	ldr	r3, [pc, #192]	@ (800c7dc <CELL_Init+0x334>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3301      	adds	r3, #1
 800c71e:	4a2f      	ldr	r2, [pc, #188]	@ (800c7dc <CELL_Init+0x334>)
 800c720:	6013      	str	r3, [r2, #0]
			CELL_Set_PDP ( PDP_NOT_SET );
 800c722:	2001      	movs	r0, #1
 800c724:	f004 fba4 	bl	8010e70 <CELL_Set_PDP>
			CELL_Init(Data_Ptr);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff febd 	bl	800c4a8 <CELL_Init>
 800c72e:	e001      	b.n	800c734 <CELL_Init+0x28c>
		}
		else
		{
			buzzerTone();
 800c730:	f7fc fd38 	bl	80091a4 <buzzerTone>
		}
	}
	retry = false;
 800c734:	4b28      	ldr	r3, [pc, #160]	@ (800c7d8 <CELL_Init+0x330>)
 800c736:	2200      	movs	r2, #0
 800c738:	701a      	strb	r2, [r3, #0]
	InitCounter = 0;
 800c73a:	4b28      	ldr	r3, [pc, #160]	@ (800c7dc <CELL_Init+0x334>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
	Command = CHECK;
 800c740:	4b0c      	ldr	r3, [pc, #48]	@ (800c774 <CELL_Init+0x2cc>)
 800c742:	2200      	movs	r2, #0
 800c744:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f002 f997 	bl	800ea7c <CELL_COMMAND>
	Command = CONNECTION_TEST;
 800c74e:	4b09      	ldr	r3, [pc, #36]	@ (800c774 <CELL_Init+0x2cc>)
 800c750:	2201      	movs	r2, #1
 800c752:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f002 f990 	bl	800ea7c <CELL_COMMAND>
	InitCounter = 0;
 800c75c:	4b1f      	ldr	r3, [pc, #124]	@ (800c7dc <CELL_Init+0x334>)
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]
	if ( Memory[26] != '3' )
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800c768:	f893 3382 	ldrb.w	r3, [r3, #898]	@ 0x382
 800c76c:	2b33      	cmp	r3, #51	@ 0x33
		return;
}
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	2007a330 	.word	0x2007a330
 800c778:	0802e7ec 	.word	0x0802e7ec
 800c77c:	0802e814 	.word	0x0802e814
 800c780:	0802e82c 	.word	0x0802e82c
 800c784:	2007d0bc 	.word	0x2007d0bc
 800c788:	0bfa0700 	.word	0x0bfa0700
 800c78c:	2007a368 	.word	0x2007a368
 800c790:	0802e840 	.word	0x0802e840
 800c794:	2007a8a9 	.word	0x2007a8a9
 800c798:	0802e844 	.word	0x0802e844
 800c79c:	2007a8c7 	.word	0x2007a8c7
 800c7a0:	0802e850 	.word	0x0802e850
 800c7a4:	2007a8ea 	.word	0x2007a8ea
 800c7a8:	0802e870 	.word	0x0802e870
 800c7ac:	2007a90d 	.word	0x2007a90d
 800c7b0:	0802e878 	.word	0x0802e878
 800c7b4:	2007a911 	.word	0x2007a911
 800c7b8:	2007a338 	.word	0x2007a338
 800c7bc:	2007a89a 	.word	0x2007a89a
 800c7c0:	0802e894 	.word	0x0802e894
 800c7c4:	0802e898 	.word	0x0802e898
 800c7c8:	0802e89c 	.word	0x0802e89c
 800c7cc:	2007a7d2 	.word	0x2007a7d2
 800c7d0:	2007a836 	.word	0x2007a836
 800c7d4:	0802e8a0 	.word	0x0802e8a0
 800c7d8:	2007be60 	.word	0x2007be60
 800c7dc:	2007be70 	.word	0x2007be70

0800c7e0 <CELL_reInit>:

void CELL_reInit(MEM_PTR *Data_Ptr)     //REFRESH FUNCTION WIP
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
	utoa( UNIQUE_Device_ID, MQTT_ID, 10);
 800c7e8:	4b60      	ldr	r3, [pc, #384]	@ (800c96c <CELL_reInit+0x18c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	220a      	movs	r2, #10
 800c7ee:	4960      	ldr	r1, [pc, #384]	@ (800c970 <CELL_reInit+0x190>)
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f019 fcab 	bl	802614c <utoa>
	Word_Transfer( Message_ID, MQTT_DEFAULT_MSG_ID);
 800c7f6:	495f      	ldr	r1, [pc, #380]	@ (800c974 <CELL_reInit+0x194>)
 800c7f8:	485f      	ldr	r0, [pc, #380]	@ (800c978 <CELL_reInit+0x198>)
 800c7fa:	f7f9 ff9b 	bl	8006734 <Word_Transfer>
	Word_Transfer( Username, MQTT_DEFAULT_USERNAME);
 800c7fe:	495f      	ldr	r1, [pc, #380]	@ (800c97c <CELL_reInit+0x19c>)
 800c800:	485f      	ldr	r0, [pc, #380]	@ (800c980 <CELL_reInit+0x1a0>)
 800c802:	f7f9 ff97 	bl	8006734 <Word_Transfer>
	Word_Transfer( Password, MQTT_DEFAULT_PASSWORD);
 800c806:	495f      	ldr	r1, [pc, #380]	@ (800c984 <CELL_reInit+0x1a4>)
 800c808:	485f      	ldr	r0, [pc, #380]	@ (800c988 <CELL_reInit+0x1a8>)
 800c80a:	f7f9 ff93 	bl	8006734 <Word_Transfer>
	Word_Transfer( TX_Size, MQTT_MSGSIZE);
 800c80e:	495f      	ldr	r1, [pc, #380]	@ (800c98c <CELL_reInit+0x1ac>)
 800c810:	485f      	ldr	r0, [pc, #380]	@ (800c990 <CELL_reInit+0x1b0>)
 800c812:	f7f9 ff8f 	bl	8006734 <Word_Transfer>
	Word_Transfer( Event_Type, MQTT_DEFAULT_EVENT);
 800c816:	495f      	ldr	r1, [pc, #380]	@ (800c994 <CELL_reInit+0x1b4>)
 800c818:	485f      	ldr	r0, [pc, #380]	@ (800c998 <CELL_reInit+0x1b8>)
 800c81a:	f7f9 ff8b 	bl	8006734 <Word_Transfer>
	Time_Stamp(Picture_ID);
 800c81e:	485f      	ldr	r0, [pc, #380]	@ (800c99c <CELL_reInit+0x1bc>)
 800c820:	f7fa fd6a 	bl	80072f8 <Time_Stamp>
	utoa ( UNIQUE_Device_ID , (char*) Cell_Dev_ID , 10 );
 800c824:	4b51      	ldr	r3, [pc, #324]	@ (800c96c <CELL_reInit+0x18c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	220a      	movs	r2, #10
 800c82a:	495d      	ldr	r1, [pc, #372]	@ (800c9a0 <CELL_reInit+0x1c0>)
 800c82c:	4618      	mov	r0, r3
 800c82e:	f019 fc8d 	bl	802614c <utoa>
	//#ifndef PDP_CONTEXT
	//		Command = PDP_POPULATE;
	//#endif // not PDP_CONTEXT
	//		CELL_COMMAND( Data_Ptr );

	if (oneconfigtest)
 800c832:	4b5c      	ldr	r3, [pc, #368]	@ (800c9a4 <CELL_reInit+0x1c4>)
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d017      	beq.n	800c86a <CELL_reInit+0x8a>
	{
		Command = CONFIG;
 800c83a:	4b5b      	ldr	r3, [pc, #364]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c83c:	2215      	movs	r2, #21
 800c83e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND( Data_Ptr );
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f002 f91a 	bl	800ea7c <CELL_COMMAND>
		Clear_Memory(Data_Ptr);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7f9 ff1a 	bl	8006682 <Clear_Memory>

		Command = GPS_DISABLE;
 800c84e:	4b56      	ldr	r3, [pc, #344]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c850:	2217      	movs	r2, #23
 800c852:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f002 f910 	bl	800ea7c <CELL_COMMAND>
		oneconfigtest = false;
 800c85c:	4b51      	ldr	r3, [pc, #324]	@ (800c9a4 <CELL_reInit+0x1c4>)
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1500);
 800c862:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800c866:	f009 fe0d 	bl	8016484 <HAL_Delay>
#endif  // CERTIFICATE
	//	HAL_Delay ( 1000 );
	//	Update_Battery ( &Data_Ptr -> Battery );
	// MQTT

	Clear_Memory(Data_Ptr);  //GAV use clear memory 2 for all these
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7f9 ff09 	bl	8006682 <Clear_Memory>

	Command = activatePDP;
 800c870:	4b4d      	ldr	r3, [pc, #308]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c872:	222f      	movs	r2, #47	@ 0x2f
 800c874:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f002 f8ff 	bl	800ea7c <CELL_COMMAND>
	if (cellResponseCheck(Data_Ptr) != 1)
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f005 fa06 	bl	8011c90 <cellResponseCheck>
 800c884:	4603      	mov	r3, r0
 800c886:	2b01      	cmp	r3, #1
 800c888:	d00c      	beq.n	800c8a4 <CELL_reInit+0xc4>
	{
		Clear_Memory(Data_Ptr);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7f9 fef9 	bl	8006682 <Clear_Memory>

		Command = REENABLEQI;
 800c890:	4b45      	ldr	r3, [pc, #276]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c892:	2203      	movs	r2, #3
 800c894:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND( Data_Ptr );
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f002 f8ef 	bl	800ea7c <CELL_COMMAND>
		cellResponseCheck(Data_Ptr);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f005 f9f6 	bl	8011c90 <cellResponseCheck>
	}

	Clear_Memory(Data_Ptr);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f7f9 feec 	bl	8006682 <Clear_Memory>

	Command = OPEN;
 800c8aa:	4b3f      	ldr	r3, [pc, #252]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c8ac:	2207      	movs	r2, #7
 800c8ae:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f002 f8e2 	bl	800ea7c <CELL_COMMAND>

	if (cellResponseCheck(Data_Ptr) != 1)
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f005 f9e9 	bl	8011c90 <cellResponseCheck>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d003      	beq.n	800c8cc <CELL_reInit+0xec>
	{
		PRINTF("FAILURE FAILURE FAILURE\r\n");
 800c8c4:	4939      	ldr	r1, [pc, #228]	@ (800c9ac <CELL_reInit+0x1cc>)
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	f7fa fa54 	bl	8006d74 <TraceSend>
	}

	Clear_Memory(Data_Ptr);
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7f9 fed8 	bl	8006682 <Clear_Memory>

	//	Command = CHECK;
	//	CELL_COMMAND(Data_Ptr);
	Command = CONNECT;
 800c8d2:	4b35      	ldr	r3, [pc, #212]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c8d4:	2209      	movs	r2, #9
 800c8d6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f002 f8ce 	bl	800ea7c <CELL_COMMAND>
	if (cellResponseCheck(Data_Ptr) != 1)
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f005 f9d5 	bl	8011c90 <cellResponseCheck>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d003      	beq.n	800c8f4 <CELL_reInit+0x114>
	{
		PRINTF("FAILURE FAILURE FAILURE\r\n");
 800c8ec:	492f      	ldr	r1, [pc, #188]	@ (800c9ac <CELL_reInit+0x1cc>)
 800c8ee:	2001      	movs	r0, #1
 800c8f0:	f7fa fa40 	bl	8006d74 <TraceSend>
	}
	Clear_Memory(Data_Ptr);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7f9 fec4 	bl	8006682 <Clear_Memory>

	Command = SUBSCRIBEDOWN;
 800c8fa:	4b2b      	ldr	r3, [pc, #172]	@ (800c9a8 <CELL_reInit+0x1c8>)
 800c8fc:	220c      	movs	r2, #12
 800c8fe:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f002 f8ba 	bl	800ea7c <CELL_COMMAND>
	if (cellResponseCheck(Data_Ptr) != 1)
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f005 f9c1 	bl	8011c90 <cellResponseCheck>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b01      	cmp	r3, #1
 800c912:	d004      	beq.n	800c91e <CELL_reInit+0x13e>
	{
		PRINTF("FAILURE FAILURE FAILURE\r\n");
 800c914:	4925      	ldr	r1, [pc, #148]	@ (800c9ac <CELL_reInit+0x1cc>)
 800c916:	2001      	movs	r0, #1
 800c918:	f7fa fa2c 	bl	8006d74 <TraceSend>
 800c91c:	e002      	b.n	800c924 <CELL_reInit+0x144>
	}
	else
	{
		cellInitialized = true;
 800c91e:	4b24      	ldr	r3, [pc, #144]	@ (800c9b0 <CELL_reInit+0x1d0>)
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
	}

	Clear_Memory(Data_Ptr);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7f9 feac 	bl	8006682 <Clear_Memory>

	if ( retry )
 800c92a:	4b22      	ldr	r3, [pc, #136]	@ (800c9b4 <CELL_reInit+0x1d4>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00e      	beq.n	800c950 <CELL_reInit+0x170>
	{
		if (InitCounter < 3)
 800c932:	4b21      	ldr	r3, [pc, #132]	@ (800c9b8 <CELL_reInit+0x1d8>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b02      	cmp	r3, #2
 800c938:	dc08      	bgt.n	800c94c <CELL_reInit+0x16c>
		{
			InitCounter ++;
 800c93a:	4b1f      	ldr	r3, [pc, #124]	@ (800c9b8 <CELL_reInit+0x1d8>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3301      	adds	r3, #1
 800c940:	4a1d      	ldr	r2, [pc, #116]	@ (800c9b8 <CELL_reInit+0x1d8>)
 800c942:	6013      	str	r3, [r2, #0]
			CELL_reInit(Data_Ptr);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f7ff ff4b 	bl	800c7e0 <CELL_reInit>
 800c94a:	e001      	b.n	800c950 <CELL_reInit+0x170>
		}
		else
		{
			buzzerTone();
 800c94c:	f7fc fc2a 	bl	80091a4 <buzzerTone>
		}
	}

	retry = false;
 800c950:	4b18      	ldr	r3, [pc, #96]	@ (800c9b4 <CELL_reInit+0x1d4>)
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]
	InitCounter = 0;
 800c956:	4b18      	ldr	r3, [pc, #96]	@ (800c9b8 <CELL_reInit+0x1d8>)
 800c958:	2200      	movs	r2, #0
 800c95a:	601a      	str	r2, [r3, #0]
	oneconfigtest = true;
 800c95c:	4b11      	ldr	r3, [pc, #68]	@ (800c9a4 <CELL_reInit+0x1c4>)
 800c95e:	2201      	movs	r2, #1
 800c960:	701a      	strb	r2, [r3, #0]
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	0bfa0700 	.word	0x0bfa0700
 800c970:	2007a368 	.word	0x2007a368
 800c974:	0802e840 	.word	0x0802e840
 800c978:	2007a8a9 	.word	0x2007a8a9
 800c97c:	0802e844 	.word	0x0802e844
 800c980:	2007a8c7 	.word	0x2007a8c7
 800c984:	0802e850 	.word	0x0802e850
 800c988:	2007a8ea 	.word	0x2007a8ea
 800c98c:	0802e870 	.word	0x0802e870
 800c990:	2007a90d 	.word	0x2007a90d
 800c994:	0802e878 	.word	0x0802e878
 800c998:	2007a911 	.word	0x2007a911
 800c99c:	2007a338 	.word	0x2007a338
 800c9a0:	2007a89a 	.word	0x2007a89a
 800c9a4:	20000358 	.word	0x20000358
 800c9a8:	2007a330 	.word	0x2007a330
 800c9ac:	0802e8c0 	.word	0x0802e8c0
 800c9b0:	2007a27b 	.word	0x2007a27b
 800c9b4:	2007be60 	.word	0x2007be60
 800c9b8:	2007be70 	.word	0x2007be70

0800c9bc <CELL_PICUPDT>:
/******************************************************
 Cell Temperature_Data.Humidity Function
 Sends humidity percentage to MQTT server
 ******************************************************/
void CELL_PICUPDT(MEM_PTR *Data_Ptr)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08e      	sub	sp, #56	@ 0x38
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_CELL_PICUPDT);
 800c9c4:	4871      	ldr	r0, [pc, #452]	@ (800cb8c <CELL_PICUPDT+0x1d0>)
 800c9c6:	f7fa f871 	bl	8006aac <Log_Single>
	// kcs desired to remove the Next 2 lines
	//Command = HTTP_URL_UPDT_POST;
	//CELL_COMMAND(Data_Ptr);

	// kcs/GAV remove this check was for the HTTP
	Command = CHECK;
 800c9ca:	4b71      	ldr	r3, [pc, #452]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 800c9d2:	4b6f      	ldr	r3, [pc, #444]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 800c9da:	e00f      	b.n	800c9fc <CELL_PICUPDT+0x40>
	{
		CELL_COMMAND(Data_Ptr);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f002 f84d 	bl	800ea7c <CELL_COMMAND>
		if (Temporary >= TEMP_LIMIT)
 800c9e2:	4b6b      	ldr	r3, [pc, #428]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800c9e4:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 800c9e8:	2b04      	cmp	r3, #4
 800c9ea:	d80d      	bhi.n	800ca08 <CELL_PICUPDT+0x4c>
	for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 800c9ec:	4b68      	ldr	r3, [pc, #416]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800c9ee:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	b2da      	uxtb	r2, r3
 800c9f6:	4b66      	ldr	r3, [pc, #408]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800c9f8:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 800c9fc:	4b64      	ldr	r3, [pc, #400]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800c9fe:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1ea      	bne.n	800c9dc <CELL_PICUPDT+0x20>
 800ca06:	e000      	b.n	800ca0a <CELL_PICUPDT+0x4e>
			break;
 800ca08:	bf00      	nop
	}

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef unlockRtc = {0};
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 800ca0e:	f107 0318 	add.w	r3, r7, #24
 800ca12:	2200      	movs	r2, #0
 800ca14:	4619      	mov	r1, r3
 800ca16:	485f      	ldr	r0, [pc, #380]	@ (800cb94 <CELL_PICUPDT+0x1d8>)
 800ca18:	f014 fc02 	bl	8021220 <HAL_RTC_GetTime>
	HAL_RTC_GetDate (&hrtc, &unlockRtc, FORMAT_BIN);
 800ca1c:	f107 0314 	add.w	r3, r7, #20
 800ca20:	2200      	movs	r2, #0
 800ca22:	4619      	mov	r1, r3
 800ca24:	485b      	ldr	r0, [pc, #364]	@ (800cb94 <CELL_PICUPDT+0x1d8>)
 800ca26:	f014 fcf3 	bl	8021410 <HAL_RTC_GetDate>

	Memory[0] = sTime.SecondFraction;
 800ca2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ca34:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
	Memory[1] = sTime.Seconds;
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ca42:	f883 2369 	strb.w	r2, [r3, #873]	@ 0x369
	Memory[2] = sTime.Minutes;
 800ca46:	7e7a      	ldrb	r2, [r7, #25]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ca4e:	f883 236a 	strb.w	r2, [r3, #874]	@ 0x36a
	Memory[3] = sTime.Hours;
 800ca52:	7e3a      	ldrb	r2, [r7, #24]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ca5a:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b

	buf = 0;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ca64:	461a      	mov	r2, r3
 800ca66:	2300      	movs	r3, #0
 800ca68:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	Size = 0;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ca72:	461a      	mov	r2, r3
 800ca74:	2300      	movs	r3, #0
 800ca76:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	Page = 0;
 800ca7a:	4b45      	ldr	r3, [pc, #276]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
	Encoded_Picture_Buffer = 0;
 800ca80:	4b43      	ldr	r3, [pc, #268]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	f8c3 2678 	str.w	r2, [r3, #1656]	@ 0x678
	Version = PIC_Header_Version;
 800ca88:	4b41      	ldr	r3, [pc, #260]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	701a      	strb	r2, [r3, #0]
	Service = PIC_Header_Service_Send;
 800ca8e:	4b40      	ldr	r3, [pc, #256]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800ca90:	2201      	movs	r2, #1
 800ca92:	705a      	strb	r2, [r3, #1]
	Unique_ID = UNIQUE_Device_ID;
 800ca94:	4b40      	ldr	r3, [pc, #256]	@ (800cb98 <CELL_PICUPDT+0x1dc>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a3d      	ldr	r2, [pc, #244]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800ca9a:	6053      	str	r3, [r2, #4]

	// Clear pageIndexArray here
	clearPicturePageIndex();
 800ca9c:	f004 fbde 	bl	801125c <clearPicturePageIndex>
	Time_Stamp(Picture_ID);
 800caa0:	483e      	ldr	r0, [pc, #248]	@ (800cb9c <CELL_PICUPDT+0x1e0>)
 800caa2:	f7fa fc29 	bl	80072f8 <Time_Stamp>

	//	Picture_ID = HAL_CRC_Calculate ( &hcrc , (uint32_t*) Memory , 1 );

	Total_Page = ((Data_Ptr->Camera_Data.encodedSize - (Data_Ptr->Camera_Data.encodedSize % PIC_DATA_LIM)) / PIC_DATA_LIM)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800caac:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cab6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800caba:	4b39      	ldr	r3, [pc, #228]	@ (800cba0 <CELL_PICUPDT+0x1e4>)
 800cabc:	fba3 0302 	umull	r0, r3, r3, r2
 800cac0:	0adb      	lsrs	r3, r3, #11
 800cac2:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800cac6:	fb00 f303 	mul.w	r3, r0, r3
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	1acb      	subs	r3, r1, r3
 800cace:	4a34      	ldr	r2, [pc, #208]	@ (800cba0 <CELL_PICUPDT+0x1e4>)
 800cad0:	fba2 2303 	umull	r2, r3, r2, r3
 800cad4:	0adb      	lsrs	r3, r3, #11
							+ 1;
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3301      	adds	r3, #1
 800cada:	b29a      	uxth	r2, r3
	Total_Page = ((Data_Ptr->Camera_Data.encodedSize - (Data_Ptr->Camera_Data.encodedSize % PIC_DATA_LIM)) / PIC_DATA_LIM)
 800cadc:	4b2c      	ldr	r3, [pc, #176]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cade:	85da      	strh	r2, [r3, #46]	@ 0x2e

	//GAV see where this is being used
	Checksum = HAL_CRC_Calculate(&hcrc, (uint32_t*) Data_Ptr->Camera_Data.encoded,
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800cae6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
			(uint32_t) (Data_Ptr->Camera_Data.encodedSize));
 800caea:	687a      	ldr	r2, [r7, #4]
 800caec:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800caf0:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
	Checksum = HAL_CRC_Calculate(&hcrc, (uint32_t*) Data_Ptr->Camera_Data.encoded,
 800caf4:	4619      	mov	r1, r3
 800caf6:	482b      	ldr	r0, [pc, #172]	@ (800cba4 <CELL_PICUPDT+0x1e8>)
 800caf8:	f00b ff34 	bl	8018964 <HAL_CRC_Calculate>
 800cafc:	4603      	mov	r3, r0
 800cafe:	4a24      	ldr	r2, [pc, #144]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb00:	6313      	str	r3, [r2, #48]	@ 0x30
	//picture transmit loop beginning
	while (Page < Total_Page)
 800cb02:	e24f      	b.n	800cfa4 <CELL_PICUPDT+0x5e8>
	{
		lastPacket = false;
 800cb04:	4b28      	ldr	r3, [pc, #160]	@ (800cba8 <CELL_PICUPDT+0x1ec>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	701a      	strb	r2, [r3, #0]
		Refresh_Watchdog;
 800cb0a:	4828      	ldr	r0, [pc, #160]	@ (800cbac <CELL_PICUPDT+0x1f0>)
 800cb0c:	f00e fb61 	bl	801b1d2 <HAL_IWDG_Refresh>
 800cb10:	4603      	mov	r3, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d001      	beq.n	800cb1a <CELL_PICUPDT+0x15e>
 800cb16:	f008 fe3d 	bl	8015794 <Error_Handler>

		if (buf == 0)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cb20:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f040 80d3 	bne.w	800ccd0 <CELL_PICUPDT+0x314>
		{
			Command = CHECK;
 800cb2a:	4b19      	ldr	r3, [pc, #100]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
			CELL_COMMAND(Data_Ptr);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 ffa2 	bl	800ea7c <CELL_COMMAND>

			Clear_Memory(Data_Ptr);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7f9 fda2 	bl	8006682 <Clear_Memory>
			Build_MSG ( Data_Ptr , HTTP_MSG_OBJ_HEAD );
#endif // NO_FORMAT_PIC

#ifndef NO_FORMAT_PIC

			if (++Page == Total_Page)
 800cb3e:	4b14      	ldr	r3, [pc, #80]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb42:	3301      	adds	r3, #1
 800cb44:	b29a      	uxth	r2, r3
 800cb46:	4b12      	ldr	r3, [pc, #72]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb48:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800cb4a:	4b11      	ldr	r3, [pc, #68]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb4c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cb4e:	4b10      	ldr	r3, [pc, #64]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d12c      	bne.n	800cbb0 <CELL_PICUPDT+0x1f4>
				Data_Length = Data_Ptr->Camera_Data.encodedSize - ((Page - 1) * PIC_DATA_LIM);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cb5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	4b0b      	ldr	r3, [pc, #44]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb66:	4619      	mov	r1, r3
 800cb68:	0149      	lsls	r1, r1, #5
 800cb6a:	1ac9      	subs	r1, r1, r3
 800cb6c:	0089      	lsls	r1, r1, #2
 800cb6e:	440b      	add	r3, r1
 800cb70:	4619      	mov	r1, r3
 800cb72:	00c9      	lsls	r1, r1, #3
 800cb74:	1acb      	subs	r3, r1, r3
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	425b      	negs	r3, r3
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	4413      	add	r3, r2
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	f603 53ac 	addw	r3, r3, #3500	@ 0xdac
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	4b02      	ldr	r3, [pc, #8]	@ (800cb90 <CELL_PICUPDT+0x1d4>)
 800cb88:	869a      	strh	r2, [r3, #52]	@ 0x34
 800cb8a:	e015      	b.n	800cbb8 <CELL_PICUPDT+0x1fc>
 800cb8c:	0802e9a0 	.word	0x0802e9a0
 800cb90:	2007a330 	.word	0x2007a330
 800cb94:	2007d344 	.word	0x2007d344
 800cb98:	0bfa0700 	.word	0x0bfa0700
 800cb9c:	2007a338 	.word	0x2007a338
 800cba0:	95cbec1b 	.word	0x95cbec1b
 800cba4:	2007d044 	.word	0x2007d044
 800cba8:	2007be5e 	.word	0x2007be5e
 800cbac:	2007d0bc 	.word	0x2007d0bc
			else
				Data_Length = PIC_DATA_LIM;
 800cbb0:	4bb0      	ldr	r3, [pc, #704]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cbb2:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800cbb6:	869a      	strh	r2, [r3, #52]	@ 0x34

			//GAV see where this is being used
			Checksum = HAL_CRC_Calculate(&hcrc,
					(uint32_t*) &Data_Ptr->Camera_Data.encoded[ PIC_DATA_LIM * Page],
 800cbb8:	4bae      	ldr	r3, [pc, #696]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cbba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f640 53ac 	movw	r3, #3500	@ 0xdac
 800cbc2:	fb02 f303 	mul.w	r3, r2, r3
 800cbc6:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800cbca:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	18d1      	adds	r1, r2, r3
					(uint32_t) (Data_Length / 4));
 800cbd2:	4ba8      	ldr	r3, [pc, #672]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cbd4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
			Checksum = HAL_CRC_Calculate(&hcrc,
 800cbd6:	089b      	lsrs	r3, r3, #2
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	461a      	mov	r2, r3
 800cbdc:	48a6      	ldr	r0, [pc, #664]	@ (800ce78 <CELL_PICUPDT+0x4bc>)
 800cbde:	f00b fec1 	bl	8018964 <HAL_CRC_Calculate>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4aa3      	ldr	r2, [pc, #652]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cbe6:	6313      	str	r3, [r2, #48]	@ 0x30

			buf = 0;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cbee:	461a      	mov	r2, r3
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
			//			Header [ 10 ] |= Checksum >> 8;
			//			Header [ 11 ] |= Checksum;
			//			Header [ 12 ] |= Data_Length >> 8;
			//			Header [ 13 ] |= Data_Length;

			Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800cbf6:	49a1      	ldr	r1, [pc, #644]	@ (800ce7c <CELL_PICUPDT+0x4c0>)
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7f9 febf 	bl	800697c <Build_MSG>
			utoa( UNIQUE_Device_ID, Header, 10);
 800cbfe:	4ba0      	ldr	r3, [pc, #640]	@ (800ce80 <CELL_PICUPDT+0x4c4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	220a      	movs	r2, #10
 800cc04:	499f      	ldr	r1, [pc, #636]	@ (800ce84 <CELL_PICUPDT+0x4c8>)
 800cc06:	4618      	mov	r0, r3
 800cc08:	f019 faa0 	bl	802614c <utoa>
			Build_MSG(Data_Ptr, Header);
 800cc0c:	499d      	ldr	r1, [pc, #628]	@ (800ce84 <CELL_PICUPDT+0x4c8>)
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7f9 feb4 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800cc14:	499c      	ldr	r1, [pc, #624]	@ (800ce88 <CELL_PICUPDT+0x4cc>)
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7f9 feb0 	bl	800697c <Build_MSG>
			Word_Transfer( Event_Type, MQTT_PIC_EVENT);
 800cc1c:	499b      	ldr	r1, [pc, #620]	@ (800ce8c <CELL_PICUPDT+0x4d0>)
 800cc1e:	489c      	ldr	r0, [pc, #624]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc20:	f7f9 fd88 	bl	8006734 <Word_Transfer>
			Build_MSG(Data_Ptr, Event_Type);
 800cc24:	499a      	ldr	r1, [pc, #616]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7f9 fea8 	bl	800697c <Build_MSG>

			Word_Transfer( Event_Type, MQTT_PIC_picID_EVENT);
 800cc2c:	4999      	ldr	r1, [pc, #612]	@ (800ce94 <CELL_PICUPDT+0x4d8>)
 800cc2e:	4898      	ldr	r0, [pc, #608]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc30:	f7f9 fd80 	bl	8006734 <Word_Transfer>
			Build_MSG(Data_Ptr, Event_Type);
 800cc34:	4996      	ldr	r1, [pc, #600]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7f9 fea0 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, Picture_ID);
 800cc3c:	4996      	ldr	r1, [pc, #600]	@ (800ce98 <CELL_PICUPDT+0x4dc>)
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f9 fe9c 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_STRI);
 800cc44:	4995      	ldr	r1, [pc, #596]	@ (800ce9c <CELL_PICUPDT+0x4e0>)
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7f9 fe98 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_APND);
 800cc4c:	4994      	ldr	r1, [pc, #592]	@ (800cea0 <CELL_PICUPDT+0x4e4>)
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7f9 fe94 	bl	800697c <Build_MSG>

			Word_Transfer( Event_Type, MQTT_PIC_Page_EVENT);
 800cc54:	4993      	ldr	r1, [pc, #588]	@ (800cea4 <CELL_PICUPDT+0x4e8>)
 800cc56:	488e      	ldr	r0, [pc, #568]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc58:	f7f9 fd6c 	bl	8006734 <Word_Transfer>
			utoa( Page, Header, 10);
 800cc5c:	4b85      	ldr	r3, [pc, #532]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cc5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cc60:	220a      	movs	r2, #10
 800cc62:	4988      	ldr	r1, [pc, #544]	@ (800ce84 <CELL_PICUPDT+0x4c8>)
 800cc64:	4618      	mov	r0, r3
 800cc66:	f019 fa71 	bl	802614c <utoa>
			Build_MSG(Data_Ptr, Event_Type);
 800cc6a:	4989      	ldr	r1, [pc, #548]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7f9 fe85 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, Header);
 800cc72:	4984      	ldr	r1, [pc, #528]	@ (800ce84 <CELL_PICUPDT+0x4c8>)
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7f9 fe81 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_STRI);
 800cc7a:	4988      	ldr	r1, [pc, #544]	@ (800ce9c <CELL_PICUPDT+0x4e0>)
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7f9 fe7d 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_APND);
 800cc82:	4987      	ldr	r1, [pc, #540]	@ (800cea0 <CELL_PICUPDT+0x4e4>)
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7f9 fe79 	bl	800697c <Build_MSG>

			Word_Transfer( Event_Type, MQTT_PIC_Total_Page_EVENT);
 800cc8a:	4987      	ldr	r1, [pc, #540]	@ (800cea8 <CELL_PICUPDT+0x4ec>)
 800cc8c:	4880      	ldr	r0, [pc, #512]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cc8e:	f7f9 fd51 	bl	8006734 <Word_Transfer>
			utoa( Total_Page, Header, 10);
 800cc92:	4b78      	ldr	r3, [pc, #480]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cc94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cc96:	220a      	movs	r2, #10
 800cc98:	497a      	ldr	r1, [pc, #488]	@ (800ce84 <CELL_PICUPDT+0x4c8>)
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f019 fa56 	bl	802614c <utoa>
			Build_MSG(Data_Ptr, Event_Type);
 800cca0:	497b      	ldr	r1, [pc, #492]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f7f9 fe6a 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, Header);
 800cca8:	4976      	ldr	r1, [pc, #472]	@ (800ce84 <CELL_PICUPDT+0x4c8>)
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7f9 fe66 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_STRI);
 800ccb0:	497a      	ldr	r1, [pc, #488]	@ (800ce9c <CELL_PICUPDT+0x4e0>)
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7f9 fe62 	bl	800697c <Build_MSG>
			Build_MSG(Data_Ptr, MQTT_APND);
 800ccb8:	4979      	ldr	r1, [pc, #484]	@ (800cea0 <CELL_PICUPDT+0x4e4>)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7f9 fe5e 	bl	800697c <Build_MSG>

			Word_Transfer( Event_Type, MQTT_PIC_DATA_EVENT);
 800ccc0:	497a      	ldr	r1, [pc, #488]	@ (800ceac <CELL_PICUPDT+0x4f0>)
 800ccc2:	4873      	ldr	r0, [pc, #460]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800ccc4:	f7f9 fd36 	bl	8006734 <Word_Transfer>
			Build_MSG(Data_Ptr, Event_Type);
 800ccc8:	4971      	ldr	r1, [pc, #452]	@ (800ce90 <CELL_PICUPDT+0x4d4>)
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7f9 fe56 	bl	800697c <Build_MSG>

#endif // not NO_FORMAT_PIC
		}

		// store page indexes
		pageIndexArray[Page].startIndex = Encoded_Picture_Buffer;
 800ccd0:	4b68      	ldr	r3, [pc, #416]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ccd2:	f8d3 1678 	ldr.w	r1, [r3, #1656]	@ 0x678
 800ccd6:	4b67      	ldr	r3, [pc, #412]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ccd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ccda:	461a      	mov	r2, r3
 800ccdc:	b289      	uxth	r1, r1
 800ccde:	4b74      	ldr	r3, [pc, #464]	@ (800ceb0 <CELL_PICUPDT+0x4f4>)
 800cce0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
		if (Page != Total_Page)
 800cce4:	4b63      	ldr	r3, [pc, #396]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cce6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cce8:	4b62      	ldr	r3, [pc, #392]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ccea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d070      	beq.n	800cdd2 <CELL_PICUPDT+0x416>
		{
			Memory[ buf++] = Data_Ptr->Camera_Data.encoded[ Encoded_Picture_Buffer++];
 800ccf0:	4b60      	ldr	r3, [pc, #384]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ccf2:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800ccf6:	1c5a      	adds	r2, r3, #1
 800ccf8:	495e      	ldr	r1, [pc, #376]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ccfa:	f8c1 2678 	str.w	r2, [r1, #1656]	@ 0x678
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800cd04:	f8d2 234c 	ldr.w	r2, [r2, #844]	@ 0x34c
 800cd08:	1c51      	adds	r1, r2, #1
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f500 3074 	add.w	r0, r0, #249856	@ 0x3d000
 800cd10:	f8c0 134c 	str.w	r1, [r0, #844]	@ 0x34c
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	440b      	add	r3, r1
 800cd18:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800cd1c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800cd20:	7819      	ldrb	r1, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4413      	add	r3, r2
 800cd26:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cd2a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800cd2e:	460a      	mov	r2, r1
 800cd30:	701a      	strb	r2, [r3, #0]
			while (Encoded_Picture_Buffer % Data_Length)
 800cd32:	e020      	b.n	800cd76 <CELL_PICUPDT+0x3ba>
				Memory[ buf++] = Data_Ptr->Camera_Data.encoded[ Encoded_Picture_Buffer++];
 800cd34:	4b4f      	ldr	r3, [pc, #316]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cd36:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800cd3a:	1c5a      	adds	r2, r3, #1
 800cd3c:	494d      	ldr	r1, [pc, #308]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cd3e:	f8c1 2678 	str.w	r2, [r1, #1656]	@ 0x678
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800cd48:	f8d2 234c 	ldr.w	r2, [r2, #844]	@ 0x34c
 800cd4c:	1c51      	adds	r1, r2, #1
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f500 3074 	add.w	r0, r0, #249856	@ 0x3d000
 800cd54:	f8c0 134c 	str.w	r1, [r0, #844]	@ 0x34c
 800cd58:	6879      	ldr	r1, [r7, #4]
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800cd60:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800cd64:	7819      	ldrb	r1, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cd6e:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800cd72:	460a      	mov	r2, r1
 800cd74:	701a      	strb	r2, [r3, #0]
			while (Encoded_Picture_Buffer % Data_Length)
 800cd76:	4b3f      	ldr	r3, [pc, #252]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cd78:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800cd7c:	4a3d      	ldr	r2, [pc, #244]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cd7e:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 800cd80:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd84:	fb01 f202 	mul.w	r2, r1, r2
 800cd88:	1a9b      	subs	r3, r3, r2
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1d2      	bne.n	800cd34 <CELL_PICUPDT+0x378>
 800cd8e:	e02d      	b.n	800cdec <CELL_PICUPDT+0x430>
		}
		else
		{
			while (Encoded_Picture_Buffer != Data_Ptr->Camera_Data.encodedSize)
				Memory[ buf++] = Data_Ptr->Camera_Data.encoded[ Encoded_Picture_Buffer++];
 800cd90:	4b38      	ldr	r3, [pc, #224]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cd92:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	4936      	ldr	r1, [pc, #216]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cd9a:	f8c1 2678 	str.w	r2, [r1, #1656]	@ 0x678
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800cda4:	f8d2 234c 	ldr.w	r2, [r2, #844]	@ 0x34c
 800cda8:	1c51      	adds	r1, r2, #1
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f500 3074 	add.w	r0, r0, #249856	@ 0x3d000
 800cdb0:	f8c0 134c 	str.w	r1, [r0, #844]	@ 0x34c
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	440b      	add	r3, r1
 800cdb8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800cdbc:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800cdc0:	7819      	ldrb	r1, [r3, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cdca:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800cdce:	460a      	mov	r2, r1
 800cdd0:	701a      	strb	r2, [r3, #0]
			while (Encoded_Picture_Buffer != Data_Ptr->Camera_Data.encodedSize)
 800cdd2:	4b28      	ldr	r3, [pc, #160]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cdd4:	f8d3 2678 	ldr.w	r2, [r3, #1656]	@ 0x678
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cdde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d1d4      	bne.n	800cd90 <CELL_PICUPDT+0x3d4>
			lastPacket = true;
 800cde6:	4b33      	ldr	r3, [pc, #204]	@ (800ceb4 <CELL_PICUPDT+0x4f8>)
 800cde8:	2201      	movs	r2, #1
 800cdea:	701a      	strb	r2, [r3, #0]
		}

		// store page indexes
		pageIndexArray[Page].stopIndex = Encoded_Picture_Buffer-1;
 800cdec:	4b21      	ldr	r3, [pc, #132]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cdee:	f8d3 3678 	ldr.w	r3, [r3, #1656]	@ 0x678
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	4a1f      	ldr	r2, [pc, #124]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800cdf6:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	b299      	uxth	r1, r3
 800cdfe:	4a2c      	ldr	r2, [pc, #176]	@ (800ceb0 <CELL_PICUPDT+0x4f4>)
 800ce00:	0083      	lsls	r3, r0, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	460a      	mov	r2, r1
 800ce06:	805a      	strh	r2, [r3, #2]
#ifdef NO_FORMAT_PIC
		Build_MSG ( Data_Ptr , HTTP_MSG_OBJ_TAIL );
		Data_Ptr->Modem_Data.Package_Page = buf;
#endif // NO_FORMAT_PIC

		Build_MSG(Data_Ptr, MQTT_TAIL_MASK);
 800ce08:	492b      	ldr	r1, [pc, #172]	@ (800ceb8 <CELL_PICUPDT+0x4fc>)
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7f9 fdb6 	bl	800697c <Build_MSG>
		Size = buf;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ce16:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800ce20:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

		HAL_Delay (200); // to add time between sending packets
 800ce24:	20c8      	movs	r0, #200	@ 0xc8
 800ce26:	f009 fb2d 	bl	8016484 <HAL_Delay>
		if (Page != 30) //for testing
 800ce2a:	4b12      	ldr	r3, [pc, #72]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ce2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ce2e:	2b1e      	cmp	r3, #30
 800ce30:	d046      	beq.n	800cec0 <CELL_PICUPDT+0x504>
		{
			Command = PUBLISH;
 800ce32:	4b10      	ldr	r3, [pc, #64]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ce34:	2210      	movs	r2, #16
 800ce36:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
			CELL_COMMAND(Data_Ptr);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f001 fe1e 	bl	800ea7c <CELL_COMMAND>

			HAL_UART_AbortReceive(&hlpuart1);
 800ce40:	481e      	ldr	r0, [pc, #120]	@ (800cebc <CELL_PICUPDT+0x500>)
 800ce42:	f015 ffab 	bl	8022d9c <HAL_UART_AbortReceive>
			// Ideally these 2 lines would be after the printout, but we need for timing with receive mode of "0"
			Timer = UART_WAIT_TIME;
 800ce46:	4b0b      	ldr	r3, [pc, #44]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ce48:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ce4c:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
			HAL_UART_Transmit(&hlpuart1, Memory, Size, Timer);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f503 3174 	add.w	r1, r3, #249856	@ 0x3d000
 800ce56:	f501 715a 	add.w	r1, r1, #872	@ 0x368
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ce60:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	4b03      	ldr	r3, [pc, #12]	@ (800ce74 <CELL_PICUPDT+0x4b8>)
 800ce68:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800ce6c:	4813      	ldr	r0, [pc, #76]	@ (800cebc <CELL_PICUPDT+0x500>)
 800ce6e:	f015 fcf6 	bl	802285e <HAL_UART_Transmit>
 800ce72:	e02b      	b.n	800cecc <CELL_PICUPDT+0x510>
 800ce74:	2007a330 	.word	0x2007a330
 800ce78:	2007d044 	.word	0x2007d044
 800ce7c:	0802e934 	.word	0x0802e934
 800ce80:	0bfa0700 	.word	0x0bfa0700
 800ce84:	2007a92f 	.word	0x2007a92f
 800ce88:	0802e944 	.word	0x0802e944
 800ce8c:	0802e9b8 	.word	0x0802e9b8
 800ce90:	2007a911 	.word	0x2007a911
 800ce94:	0802e9c4 	.word	0x0802e9c4
 800ce98:	2007a338 	.word	0x2007a338
 800ce9c:	0802e9d0 	.word	0x0802e9d0
 800cea0:	0802e99c 	.word	0x0802e99c
 800cea4:	0802e9d4 	.word	0x0802e9d4
 800cea8:	0802e9e0 	.word	0x0802e9e0
 800ceac:	0802e9f4 	.word	0x0802e9f4
 800ceb0:	2007bccc 	.word	0x2007bccc
 800ceb4:	2007be5e 	.word	0x2007be5e
 800ceb8:	0802e954 	.word	0x0802e954
 800cebc:	2007d1c0 	.word	0x2007d1c0

		}
		else
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800cec0:	488b      	ldr	r0, [pc, #556]	@ (800d0f0 <CELL_PICUPDT+0x734>)
 800cec2:	f015 ff6b 	bl	8022d9c <HAL_UART_AbortReceive>
			HAL_Delay (100); // simulate Xmit time
 800cec6:	2064      	movs	r0, #100	@ 0x64
 800cec8:	f009 fadc 	bl	8016484 <HAL_Delay>
		}

#ifdef SKYWIRE_MODEM_OUT
		Write_Log( LOG_MSG_DATA);
 800cecc:	4889      	ldr	r0, [pc, #548]	@ (800d0f4 <CELL_PICUPDT+0x738>)
 800cece:	f7f9 fe2d 	bl	8006b2c <Write_Log>

		for (buf = 0; buf <= Size; buf += 1)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ced8:	461a      	mov	r2, r3
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
 800cee0:	e01a      	b.n	800cf18 <CELL_PICUPDT+0x55c>
		{
			vcom_Trace(&Memory[ buf], 1, 1);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cee8:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800ceec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cef0:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	4413      	add	r3, r2
 800cef8:	2201      	movs	r2, #1
 800cefa:	2101      	movs	r1, #1
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7f9 ff1b 	bl	8006d38 <vcom_Trace>
		for (buf = 0; buf <= Size; buf += 1)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cf08:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800cf14:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cf1e:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cf28:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d9d8      	bls.n	800cee2 <CELL_PICUPDT+0x526>
		}
		vcom_Trace((uint8_t*) "\r\n\r\n", 4, 1);
 800cf30:	2201      	movs	r2, #1
 800cf32:	2104      	movs	r1, #4
 800cf34:	4870      	ldr	r0, [pc, #448]	@ (800d0f8 <CELL_PICUPDT+0x73c>)
 800cf36:	f7f9 feff 	bl	8006d38 <vcom_Trace>
			Timer = UART_WAIT_TIME;
			HAL_UART_Transmit(&hlpuart1, Memory, Size, Timer);
		}
		//These lines are to output the buffer size for each pic packet
		char Command_Buffer [ 11 ]; // uint_32 in ascii is 10 plus the null symbol so 11
		utoa ( Size , Command_Buffer , DECIMAL );
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cf40:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800cf44:	f107 0108 	add.w	r1, r7, #8
 800cf48:	220a      	movs	r2, #10
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f019 f8fe 	bl	802614c <utoa>
		vcom_Trace((uint8_t*) LOG_PKT_DATA, 16, 1);
 800cf50:	2201      	movs	r2, #1
 800cf52:	2110      	movs	r1, #16
 800cf54:	4869      	ldr	r0, [pc, #420]	@ (800d0fc <CELL_PICUPDT+0x740>)
 800cf56:	f7f9 feef 	bl	8006d38 <vcom_Trace>
		vcom_Trace((uint8_t*) Command_Buffer, 4, 1); // Hard coded to 4 buffer size max is MEMORY_MAX plus some overhead
 800cf5a:	f107 0308 	add.w	r3, r7, #8
 800cf5e:	2201      	movs	r2, #1
 800cf60:	2104      	movs	r1, #4
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7f9 fee8 	bl	8006d38 <vcom_Trace>
		vcom_Trace((uint8_t*) "\r\n\r\n", 4, 1);
 800cf68:	2201      	movs	r2, #1
 800cf6a:	2104      	movs	r1, #4
 800cf6c:	4862      	ldr	r0, [pc, #392]	@ (800d0f8 <CELL_PICUPDT+0x73c>)
 800cf6e:	f7f9 fee3 	bl	8006d38 <vcom_Trace>

		if (lastPacket & interruptTest)
 800cf72:	4b63      	ldr	r3, [pc, #396]	@ (800d100 <CELL_PICUPDT+0x744>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	461a      	mov	r2, r3
 800cf78:	4b62      	ldr	r3, [pc, #392]	@ (800d104 <CELL_PICUPDT+0x748>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	4013      	ands	r3, r2
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d009      	beq.n	800cf96 <CELL_PICUPDT+0x5da>
		{
			HAL_UART_Receive_IT ( &hlpuart1 , Memory , 1 );
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cf88:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	4619      	mov	r1, r3
 800cf90:	4857      	ldr	r0, [pc, #348]	@ (800d0f0 <CELL_PICUPDT+0x734>)
 800cf92:	f015 fdd9 	bl	8022b48 <HAL_UART_Receive_IT>
		}
#endif //SKYWIRE_MODEM_OUT

		buf = 0;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Page < Total_Page)
 800cfa4:	4b58      	ldr	r3, [pc, #352]	@ (800d108 <CELL_PICUPDT+0x74c>)
 800cfa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cfa8:	4b57      	ldr	r3, [pc, #348]	@ (800d108 <CELL_PICUPDT+0x74c>)
 800cfaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cfac:	429a      	cmp	r2, r3
 800cfae:	f4ff ada9 	bcc.w	800cb04 <CELL_PICUPDT+0x148>
	} //end of picture transmit loop

	if(interruptTest)
 800cfb2:	4b54      	ldr	r3, [pc, #336]	@ (800d104 <CELL_PICUPDT+0x748>)
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d005      	beq.n	800cfc6 <CELL_PICUPDT+0x60a>
	{
		Clear_Memory2(Data_Ptr, 400);
 800cfba:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7f9 fb7d 	bl	80066be <Clear_Memory2>
						break;
				}
			}
		}
	}
}
 800cfc4:	e090      	b.n	800d0e8 <CELL_PICUPDT+0x72c>
	else if (useRecvMode1)
 800cfc6:	4b51      	ldr	r3, [pc, #324]	@ (800d10c <CELL_PICUPDT+0x750>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00c      	beq.n	800cfe8 <CELL_PICUPDT+0x62c>
		DEV_State |= GET_CELL_RECV_BUFF;  //GAV
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800cfd4:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800cfd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800cfe2:	f8c2 3358 	str.w	r3, [r2, #856]	@ 0x358
}
 800cfe6:	e07f      	b.n	800d0e8 <CELL_PICUPDT+0x72c>
		bool immediate = true;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		bool listenForServer = true;
 800cfee:	2301      	movs	r3, #1
 800cff0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		if (listenForServer)
 800cff4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d075      	beq.n	800d0e8 <CELL_PICUPDT+0x72c>
			if (immediate)
 800cffc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d000:	2b00      	cmp	r3, #0
 800d002:	d05b      	beq.n	800d0bc <CELL_PICUPDT+0x700>
				vcom_Trace((uint8_t*) "Start Rec\r\n", 11, 1);
 800d004:	2201      	movs	r2, #1
 800d006:	210b      	movs	r1, #11
 800d008:	4841      	ldr	r0, [pc, #260]	@ (800d110 <CELL_PICUPDT+0x754>)
 800d00a:	f7f9 fe95 	bl	8006d38 <vcom_Trace>
				Size = 330;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d014:	461a      	mov	r2, r3
 800d016:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800d01a:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
				Timer = 100;
 800d01e:	4b3a      	ldr	r3, [pc, #232]	@ (800d108 <CELL_PICUPDT+0x74c>)
 800d020:	2264      	movs	r2, #100	@ 0x64
 800d022:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
				receivedDataSize = 0;
 800d026:	4b3b      	ldr	r3, [pc, #236]	@ (800d114 <CELL_PICUPDT+0x758>)
 800d028:	2200      	movs	r2, #0
 800d02a:	801a      	strh	r2, [r3, #0]
				Command = CHECK2;
 800d02c:	4b36      	ldr	r3, [pc, #216]	@ (800d108 <CELL_PICUPDT+0x74c>)
 800d02e:	2225      	movs	r2, #37	@ 0x25
 800d030:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
				CELL_COMMAND(Data_Ptr);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f001 fd21 	bl	800ea7c <CELL_COMMAND>
				vcom_Trace((uint8_t*) "DownLink Received\r\n", 19, 1);
 800d03a:	2201      	movs	r2, #1
 800d03c:	2113      	movs	r1, #19
 800d03e:	4836      	ldr	r0, [pc, #216]	@ (800d118 <CELL_PICUPDT+0x75c>)
 800d040:	f7f9 fe7a 	bl	8006d38 <vcom_Trace>
				for (buf = 0; buf <= receivedDataSize; buf += 1)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d04a:	461a      	mov	r2, r3
 800d04c:	2300      	movs	r3, #0
 800d04e:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
 800d052:	e01a      	b.n	800d08a <CELL_PICUPDT+0x6ce>
					vcom_Trace(&Memory[buf], 1, 1);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d05a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d05e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d062:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	4413      	add	r3, r2
 800d06a:	2201      	movs	r2, #1
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f7f9 fe62 	bl	8006d38 <vcom_Trace>
				for (buf = 0; buf <= receivedDataSize; buf += 1)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d07a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d07e:	3301      	adds	r3, #1
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800d086:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d090:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d094:	4a1f      	ldr	r2, [pc, #124]	@ (800d114 <CELL_PICUPDT+0x758>)
 800d096:	8812      	ldrh	r2, [r2, #0]
 800d098:	4293      	cmp	r3, r2
 800d09a:	d9db      	bls.n	800d054 <CELL_PICUPDT+0x698>
				vcom_Trace((uint8_t*) "\r\n", 2, 1);
 800d09c:	2201      	movs	r2, #1
 800d09e:	2102      	movs	r1, #2
 800d0a0:	481e      	ldr	r0, [pc, #120]	@ (800d11c <CELL_PICUPDT+0x760>)
 800d0a2:	f7f9 fe49 	bl	8006d38 <vcom_Trace>
				Write_Log( LOG_RX_ERR);
 800d0a6:	481e      	ldr	r0, [pc, #120]	@ (800d120 <CELL_PICUPDT+0x764>)
 800d0a8:	f7f9 fd40 	bl	8006b2c <Write_Log>
				Log_End( LOG_STATE_RESULT, Cell_State);
 800d0ac:	4b16      	ldr	r3, [pc, #88]	@ (800d108 <CELL_PICUPDT+0x74c>)
 800d0ae:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	481b      	ldr	r0, [pc, #108]	@ (800d124 <CELL_PICUPDT+0x768>)
 800d0b6:	f7f9 fd21 	bl	8006afc <Log_End>
}
 800d0ba:	e015      	b.n	800d0e8 <CELL_PICUPDT+0x72c>
				Clear_Memory(Data_Ptr);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7f9 fae0 	bl	8006682 <Clear_Memory>
				HAL_Delay(2000);
 800d0c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800d0c6:	f009 f9dd 	bl	8016484 <HAL_Delay>
				Refresh_Watchdog;
 800d0ca:	4817      	ldr	r0, [pc, #92]	@ (800d128 <CELL_PICUPDT+0x76c>)
 800d0cc:	f00e f881 	bl	801b1d2 <HAL_IWDG_Refresh>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <CELL_PICUPDT+0x71e>
 800d0d6:	f008 fb5d 	bl	8015794 <Error_Handler>
				Command = READ_BUF2;
 800d0da:	4b0b      	ldr	r3, [pc, #44]	@ (800d108 <CELL_PICUPDT+0x74c>)
 800d0dc:	2224      	movs	r2, #36	@ 0x24
 800d0de:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
				CELL_COMMAND(Data_Ptr);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 fcca 	bl	800ea7c <CELL_COMMAND>
}
 800d0e8:	bf00      	nop
 800d0ea:	3738      	adds	r7, #56	@ 0x38
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	2007d1c0 	.word	0x2007d1c0
 800d0f4:	0802ea00 	.word	0x0802ea00
 800d0f8:	0802ea14 	.word	0x0802ea14
 800d0fc:	0802ea1c 	.word	0x0802ea1c
 800d100:	2007be5e 	.word	0x2007be5e
 800d104:	2007be5f 	.word	0x2007be5f
 800d108:	2007a330 	.word	0x2007a330
 800d10c:	20000357 	.word	0x20000357
 800d110:	0802ea30 	.word	0x0802ea30
 800d114:	2007be5c 	.word	0x2007be5c
 800d118:	0802ea3c 	.word	0x0802ea3c
 800d11c:	0802ea50 	.word	0x0802ea50
 800d120:	0802ea54 	.word	0x0802ea54
 800d124:	0802ea60 	.word	0x0802ea60
 800d128:	2007d0bc 	.word	0x2007d0bc

0800d12c <CELL_PIRUPDT>:
/******************************************************
 Cell PIR Function
 Sends start or stop based on flag to server
 ******************************************************/
void CELL_PIRUPDT(MEM_PTR *Data_Ptr, bool start)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	f6ad 7da8 	subw	sp, sp, #4008	@ 0xfa8
 800d132:	af00      	add	r7, sp, #0
 800d134:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d138:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d13c:	6018      	str	r0, [r3, #0]
 800d13e:	460a      	mov	r2, r1
 800d140:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d144:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800d148:	701a      	strb	r2, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_CELL_PIRUPDT);
 800d14a:	4876      	ldr	r0, [pc, #472]	@ (800d324 <CELL_PIRUPDT+0x1f8>)
 800d14c:	f7f9 fcae 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	Command = CHECK;
 800d150:	4b75      	ldr	r3, [pc, #468]	@ (800d328 <CELL_PIRUPDT+0x1fc>)
 800d152:	2200      	movs	r2, #0
 800d154:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d158:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d15c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	f001 fc8b 	bl	800ea7c <CELL_COMMAND>
	if (Cell_State != CELL_OK)
 800d166:	4b70      	ldr	r3, [pc, #448]	@ (800d328 <CELL_PIRUPDT+0x1fc>)
 800d168:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f040 80d4 	bne.w	800d31a <CELL_PIRUPDT+0x1ee>
		return;

	//Gage to fix this for motion stops
	char timeStamp[MEMORY_MAX] = {0};
 800d172:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d176:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	3304      	adds	r3, #4
 800d180:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800d184:	2100      	movs	r1, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f019 fff2 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800d18c:	f107 0308 	add.w	r3, r7, #8
 800d190:	4618      	mov	r0, r3
 800d192:	f7fa f903 	bl	800739c <Time_StampISO>

	if (start) //(DEV_State & PIR_START)
 800d196:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d19a:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d004      	beq.n	800d1ae <CELL_PIRUPDT+0x82>
	{
		Word_Transfer( Event_Type, MQTT_PIR_START);
 800d1a4:	4961      	ldr	r1, [pc, #388]	@ (800d32c <CELL_PIRUPDT+0x200>)
 800d1a6:	4862      	ldr	r0, [pc, #392]	@ (800d330 <CELL_PIRUPDT+0x204>)
 800d1a8:	f7f9 fac4 	bl	8006734 <Word_Transfer>
 800d1ac:	e00d      	b.n	800d1ca <CELL_PIRUPDT+0x9e>
//		DEV_State ^= PIR_START;
	}
	else if (!start)
 800d1ae:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d1b2:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	f083 0301 	eor.w	r3, r3, #1
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <CELL_PIRUPDT+0x9e>
	{
		Word_Transfer( Event_Type, MQTT_PIR_STOP);
 800d1c2:	495c      	ldr	r1, [pc, #368]	@ (800d334 <CELL_PIRUPDT+0x208>)
 800d1c4:	485a      	ldr	r0, [pc, #360]	@ (800d330 <CELL_PIRUPDT+0x204>)
 800d1c6:	f7f9 fab5 	bl	8006734 <Word_Transfer>
	}

	Clear_Memory(Data_Ptr);
 800d1ca:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d1ce:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d1d2:	6818      	ldr	r0, [r3, #0]
 800d1d4:	f7f9 fa55 	bl	8006682 <Clear_Memory>
	buf = 0;
 800d1d8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d1dc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800d1ee:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d1f2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d1f6:	4950      	ldr	r1, [pc, #320]	@ (800d338 <CELL_PIRUPDT+0x20c>)
 800d1f8:	6818      	ldr	r0, [r3, #0]
 800d1fa:	f7f9 fbbf 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800d1fe:	4b4f      	ldr	r3, [pc, #316]	@ (800d33c <CELL_PIRUPDT+0x210>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	220a      	movs	r2, #10
 800d204:	494e      	ldr	r1, [pc, #312]	@ (800d340 <CELL_PIRUPDT+0x214>)
 800d206:	4618      	mov	r0, r3
 800d208:	f018 ffa0 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800d20c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d210:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d214:	494a      	ldr	r1, [pc, #296]	@ (800d340 <CELL_PIRUPDT+0x214>)
 800d216:	6818      	ldr	r0, [r3, #0]
 800d218:	f7f9 fbb0 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800d21c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d220:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d224:	4947      	ldr	r1, [pc, #284]	@ (800d344 <CELL_PIRUPDT+0x218>)
 800d226:	6818      	ldr	r0, [r3, #0]
 800d228:	f7f9 fba8 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800d22c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d230:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d234:	493e      	ldr	r1, [pc, #248]	@ (800d330 <CELL_PIRUPDT+0x204>)
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	f7f9 fba0 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800d23c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d240:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d244:	4940      	ldr	r1, [pc, #256]	@ (800d348 <CELL_PIRUPDT+0x21c>)
 800d246:	6818      	ldr	r0, [r3, #0]
 800d248:	f7f9 fb98 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800d24c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d250:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d254:	493d      	ldr	r1, [pc, #244]	@ (800d34c <CELL_PIRUPDT+0x220>)
 800d256:	6818      	ldr	r0, [r3, #0]
 800d258:	f7f9 fb90 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, TIME_STR);
 800d25c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d260:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d264:	493a      	ldr	r1, [pc, #232]	@ (800d350 <CELL_PIRUPDT+0x224>)
 800d266:	6818      	ldr	r0, [r3, #0]
 800d268:	f7f9 fb88 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800d26c:	f107 0208 	add.w	r2, r7, #8
 800d270:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d274:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d278:	4611      	mov	r1, r2
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	f7f9 fb7e 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_TAIL_MASK);
 800d280:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d284:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d288:	4932      	ldr	r1, [pc, #200]	@ (800d354 <CELL_PIRUPDT+0x228>)
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	f7f9 fb76 	bl	800697c <Build_MSG>
	Size = buf;
 800d290:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d294:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d29e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d2a2:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d2a6:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d2aa:	6812      	ldr	r2, [r2, #0]
 800d2ac:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800d2b0:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	Command = PUBLISH;
 800d2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <CELL_PIRUPDT+0x1fc>)
 800d2b6:	2210      	movs	r2, #16
 800d2b8:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d2bc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d2c0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d2c4:	6818      	ldr	r0, [r3, #0]
 800d2c6:	f001 fbd9 	bl	800ea7c <CELL_COMMAND>
	HAL_Delay( MSG_Delay);
 800d2ca:	2064      	movs	r0, #100	@ 0x64
 800d2cc:	f009 f8da 	bl	8016484 <HAL_Delay>
	Command = PUBLISH_MEM;
 800d2d0:	4b15      	ldr	r3, [pc, #84]	@ (800d328 <CELL_PIRUPDT+0x1fc>)
 800d2d2:	2213      	movs	r2, #19
 800d2d4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d2d8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d2dc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d2e0:	6818      	ldr	r0, [r3, #0]
 800d2e2:	f001 fbcb 	bl	800ea7c <CELL_COMMAND>

	Command = CHECK;
 800d2e6:	4b10      	ldr	r3, [pc, #64]	@ (800d328 <CELL_PIRUPDT+0x1fc>)
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d2ee:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d2f2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	f001 fbc0 	bl	800ea7c <CELL_COMMAND>

	HAL_Delay(5);
 800d2fc:	2005      	movs	r0, #5
 800d2fe:	f009 f8c1 	bl	8016484 <HAL_Delay>

	Command = READ_BUF;
 800d302:	4b09      	ldr	r3, [pc, #36]	@ (800d328 <CELL_PIRUPDT+0x1fc>)
 800d304:	2214      	movs	r2, #20
 800d306:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d30a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d30e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	f001 fbb2 	bl	800ea7c <CELL_COMMAND>
 800d318:	e000      	b.n	800d31c <CELL_PIRUPDT+0x1f0>
		return;
 800d31a:	bf00      	nop
}
 800d31c:	f607 77a8 	addw	r7, r7, #4008	@ 0xfa8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	0802ea6c 	.word	0x0802ea6c
 800d328:	2007a330 	.word	0x2007a330
 800d32c:	0802ea84 	.word	0x0802ea84
 800d330:	2007a911 	.word	0x2007a911
 800d334:	0802ea94 	.word	0x0802ea94
 800d338:	0802e934 	.word	0x0802e934
 800d33c:	0bfa0700 	.word	0x0bfa0700
 800d340:	2007a92f 	.word	0x2007a92f
 800d344:	0802e944 	.word	0x0802e944
 800d348:	0802eaa0 	.word	0x0802eaa0
 800d34c:	0802e99c 	.word	0x0802e99c
 800d350:	0802eaa4 	.word	0x0802eaa4
 800d354:	0802e954 	.word	0x0802e954

0800d358 <cellMovementStart>:
/******************************************************
 Cell Movement start Function
 Sends start or stop from accelerometer trigger
 ******************************************************/
void cellMovementStart (MEM_PTR *Data_Ptr, bool startStop)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	f6ad 7da8 	subw	sp, sp, #4008	@ 0xfa8
 800d35e:	af00      	add	r7, sp, #0
 800d360:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d364:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d368:	6018      	str	r0, [r3, #0]
 800d36a:	460a      	mov	r2, r1
 800d36c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d370:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800d374:	701a      	strb	r2, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_cell_Movement_Start);
 800d376:	4876      	ldr	r0, [pc, #472]	@ (800d550 <cellMovementStart+0x1f8>)
 800d378:	f7f9 fb98 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	Command = CHECK;
 800d37c:	4b75      	ldr	r3, [pc, #468]	@ (800d554 <cellMovementStart+0x1fc>)
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d384:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d388:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d38c:	6818      	ldr	r0, [r3, #0]
 800d38e:	f001 fb75 	bl	800ea7c <CELL_COMMAND>
	if (Cell_State != CELL_OK)
 800d392:	4b70      	ldr	r3, [pc, #448]	@ (800d554 <cellMovementStart+0x1fc>)
 800d394:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f040 80d4 	bne.w	800d546 <cellMovementStart+0x1ee>
		return;

	//Gage to fix this for motion stops
	char timeStamp[MEMORY_MAX] = {0};
 800d39e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d3a2:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f019 fedc 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800d3b8:	f107 0308 	add.w	r3, r7, #8
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f9 ffed 	bl	800739c <Time_StampISO>

	if (!startStop) //(DEV_State & PIR_START)
 800d3c2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d3c6:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	f083 0301 	eor.w	r3, r3, #1
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d004      	beq.n	800d3e0 <cellMovementStart+0x88>
	{
		Word_Transfer( Event_Type, MQTT_MOVEMENT_START);
 800d3d6:	4960      	ldr	r1, [pc, #384]	@ (800d558 <cellMovementStart+0x200>)
 800d3d8:	4860      	ldr	r0, [pc, #384]	@ (800d55c <cellMovementStart+0x204>)
 800d3da:	f7f9 f9ab 	bl	8006734 <Word_Transfer>
 800d3de:	e00a      	b.n	800d3f6 <cellMovementStart+0x9e>
	}
	else if (startStop)
 800d3e0:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d3e4:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d003      	beq.n	800d3f6 <cellMovementStart+0x9e>
	{
		Word_Transfer( Event_Type, MQTT_MOVEMENT_END);
 800d3ee:	495c      	ldr	r1, [pc, #368]	@ (800d560 <cellMovementStart+0x208>)
 800d3f0:	485a      	ldr	r0, [pc, #360]	@ (800d55c <cellMovementStart+0x204>)
 800d3f2:	f7f9 f99f 	bl	8006734 <Word_Transfer>
	}

	Clear_Memory(Data_Ptr);
 800d3f6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d3fa:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d3fe:	6818      	ldr	r0, [r3, #0]
 800d400:	f7f9 f93f 	bl	8006682 <Clear_Memory>
	buf = 0;
 800d404:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d408:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d412:	461a      	mov	r2, r3
 800d414:	2300      	movs	r3, #0
 800d416:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800d41a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d41e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d422:	4950      	ldr	r1, [pc, #320]	@ (800d564 <cellMovementStart+0x20c>)
 800d424:	6818      	ldr	r0, [r3, #0]
 800d426:	f7f9 faa9 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800d42a:	4b4f      	ldr	r3, [pc, #316]	@ (800d568 <cellMovementStart+0x210>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	220a      	movs	r2, #10
 800d430:	494e      	ldr	r1, [pc, #312]	@ (800d56c <cellMovementStart+0x214>)
 800d432:	4618      	mov	r0, r3
 800d434:	f018 fe8a 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800d438:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d43c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d440:	494a      	ldr	r1, [pc, #296]	@ (800d56c <cellMovementStart+0x214>)
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	f7f9 fa9a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800d448:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d44c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d450:	4947      	ldr	r1, [pc, #284]	@ (800d570 <cellMovementStart+0x218>)
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	f7f9 fa92 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800d458:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d45c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d460:	493e      	ldr	r1, [pc, #248]	@ (800d55c <cellMovementStart+0x204>)
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	f7f9 fa8a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800d468:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d46c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d470:	4940      	ldr	r1, [pc, #256]	@ (800d574 <cellMovementStart+0x21c>)
 800d472:	6818      	ldr	r0, [r3, #0]
 800d474:	f7f9 fa82 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800d478:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d47c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d480:	493d      	ldr	r1, [pc, #244]	@ (800d578 <cellMovementStart+0x220>)
 800d482:	6818      	ldr	r0, [r3, #0]
 800d484:	f7f9 fa7a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, TIME_STR);
 800d488:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d48c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d490:	493a      	ldr	r1, [pc, #232]	@ (800d57c <cellMovementStart+0x224>)
 800d492:	6818      	ldr	r0, [r3, #0]
 800d494:	f7f9 fa72 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800d498:	f107 0208 	add.w	r2, r7, #8
 800d49c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d4a0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	6818      	ldr	r0, [r3, #0]
 800d4a8:	f7f9 fa68 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_TAIL_MASK);
 800d4ac:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d4b0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d4b4:	4932      	ldr	r1, [pc, #200]	@ (800d580 <cellMovementStart+0x228>)
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	f7f9 fa60 	bl	800697c <Build_MSG>
	Size = buf;
 800d4bc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d4c0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d4ca:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d4ce:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d4d2:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d4d6:	6812      	ldr	r2, [r2, #0]
 800d4d8:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800d4dc:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	Command = PUBLISH;
 800d4e0:	4b1c      	ldr	r3, [pc, #112]	@ (800d554 <cellMovementStart+0x1fc>)
 800d4e2:	2210      	movs	r2, #16
 800d4e4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d4e8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d4ec:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	f001 fac3 	bl	800ea7c <CELL_COMMAND>
	HAL_Delay( MSG_Delay);
 800d4f6:	2064      	movs	r0, #100	@ 0x64
 800d4f8:	f008 ffc4 	bl	8016484 <HAL_Delay>
	Command = PUBLISH_MEM;
 800d4fc:	4b15      	ldr	r3, [pc, #84]	@ (800d554 <cellMovementStart+0x1fc>)
 800d4fe:	2213      	movs	r2, #19
 800d500:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d504:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d508:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d50c:	6818      	ldr	r0, [r3, #0]
 800d50e:	f001 fab5 	bl	800ea7c <CELL_COMMAND>

	Command = CHECK;
 800d512:	4b10      	ldr	r3, [pc, #64]	@ (800d554 <cellMovementStart+0x1fc>)
 800d514:	2200      	movs	r2, #0
 800d516:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d51a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d51e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d522:	6818      	ldr	r0, [r3, #0]
 800d524:	f001 faaa 	bl	800ea7c <CELL_COMMAND>

	HAL_Delay(5);
 800d528:	2005      	movs	r0, #5
 800d52a:	f008 ffab 	bl	8016484 <HAL_Delay>

	Command = READ_BUF;
 800d52e:	4b09      	ldr	r3, [pc, #36]	@ (800d554 <cellMovementStart+0x1fc>)
 800d530:	2214      	movs	r2, #20
 800d532:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d536:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d53a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d53e:	6818      	ldr	r0, [r3, #0]
 800d540:	f001 fa9c 	bl	800ea7c <CELL_COMMAND>
 800d544:	e000      	b.n	800d548 <cellMovementStart+0x1f0>
		return;
 800d546:	bf00      	nop
}
 800d548:	f607 77a8 	addw	r7, r7, #4008	@ 0xfa8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	0802eab4 	.word	0x0802eab4
 800d554:	2007a330 	.word	0x2007a330
 800d558:	0802ead4 	.word	0x0802ead4
 800d55c:	2007a911 	.word	0x2007a911
 800d560:	0802eae4 	.word	0x0802eae4
 800d564:	0802e934 	.word	0x0802e934
 800d568:	0bfa0700 	.word	0x0bfa0700
 800d56c:	2007a92f 	.word	0x2007a92f
 800d570:	0802e944 	.word	0x0802e944
 800d574:	0802eaa0 	.word	0x0802eaa0
 800d578:	0802e99c 	.word	0x0802e99c
 800d57c:	0802eaa4 	.word	0x0802eaa4
 800d580:	0802e954 	.word	0x0802e954

0800d584 <HeartBeat>:
/******************************************************
 Cell Heartbeat Function
 Sends basic information to MQTT server
 ******************************************************/
void HeartBeat(MEM_PTR *Data_Ptr)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	f6ad 7da8 	subw	sp, sp, #4008	@ 0xfa8
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d590:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d594:	6018      	str	r0, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_HeartBeat);
 800d596:	48b8      	ldr	r0, [pc, #736]	@ (800d878 <HeartBeat+0x2f4>)
 800d598:	f7f9 fa88 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	char timeStamp[MEMORY_MAX] = {0};
 800d59c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d5a0:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f019 fddd 	bl	8027170 <memset>
	Command = CHECK;
 800d5b6:	4bb1      	ldr	r3, [pc, #708]	@ (800d87c <HeartBeat+0x2f8>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d5be:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d5c2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	f001 fa58 	bl	800ea7c <CELL_COMMAND>

	Command = SIGNAL;
 800d5cc:	4bab      	ldr	r3, [pc, #684]	@ (800d87c <HeartBeat+0x2f8>)
 800d5ce:	2204      	movs	r2, #4
 800d5d0:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d5d4:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d5d8:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d5dc:	6818      	ldr	r0, [r3, #0]
 800d5de:	f001 fa4d 	bl	800ea7c <CELL_COMMAND>

	Char_Replace((char*) Memory, "\n", " ");
 800d5e2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d5e6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d5f0:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d5f4:	4aa2      	ldr	r2, [pc, #648]	@ (800d880 <HeartBeat+0x2fc>)
 800d5f6:	49a3      	ldr	r1, [pc, #652]	@ (800d884 <HeartBeat+0x300>)
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f9 f8bb 	bl	8006774 <Char_Replace>
	Char_Replace((char*) Memory, "\r", " ");
 800d5fe:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d602:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d60c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d610:	4a9b      	ldr	r2, [pc, #620]	@ (800d880 <HeartBeat+0x2fc>)
 800d612:	499d      	ldr	r1, [pc, #628]	@ (800d888 <HeartBeat+0x304>)
 800d614:	4618      	mov	r0, r3
 800d616:	f7f9 f8ad 	bl	8006774 <Char_Replace>

	Word_Transfer((char*) Signal, (char*) Memory);
 800d61a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d61e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d628:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d62c:	4619      	mov	r1, r3
 800d62e:	4897      	ldr	r0, [pc, #604]	@ (800d88c <HeartBeat+0x308>)
 800d630:	f7f9 f880 	bl	8006734 <Word_Transfer>

	//	Time_Stamp((char*) Data_Ptr->Modem_Data.Time_STMP);
	Word_Transfer( Event_Type, MQTT_HB_EVENT);
 800d634:	4996      	ldr	r1, [pc, #600]	@ (800d890 <HeartBeat+0x30c>)
 800d636:	4897      	ldr	r0, [pc, #604]	@ (800d894 <HeartBeat+0x310>)
 800d638:	f7f9 f87c 	bl	8006734 <Word_Transfer>

	Time_StampISO(timeStamp);
 800d63c:	f107 0308 	add.w	r3, r7, #8
 800d640:	4618      	mov	r0, r3
 800d642:	f7f9 feab 	bl	800739c <Time_StampISO>

	Clear_Memory(Data_Ptr);
 800d646:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d64a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d64e:	6818      	ldr	r0, [r3, #0]
 800d650:	f7f9 f817 	bl	8006682 <Clear_Memory>
	buf = 0;
 800d654:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d658:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d662:	461a      	mov	r2, r3
 800d664:	2300      	movs	r3, #0
 800d666:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	//
	//	Clear_Memory(Data_Ptr);
	//	buf = 0;
	//

	Command = CELLID_SET;
 800d66a:	4b84      	ldr	r3, [pc, #528]	@ (800d87c <HeartBeat+0x2f8>)
 800d66c:	2222      	movs	r2, #34	@ 0x22
 800d66e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d672:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d676:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d67a:	6818      	ldr	r0, [r3, #0]
 800d67c:	f001 f9fe 	bl	800ea7c <CELL_COMMAND>

	Command = CELLID;
 800d680:	4b7e      	ldr	r3, [pc, #504]	@ (800d87c <HeartBeat+0x2f8>)
 800d682:	2221      	movs	r2, #33	@ 0x21
 800d684:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800d688:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d68c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d690:	6818      	ldr	r0, [r3, #0]
 800d692:	f001 f9f3 	bl	800ea7c <CELL_COMMAND>

	Char_Replace((char*) Memory, "\n", " ");
 800d696:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d69a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d6a4:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d6a8:	4a75      	ldr	r2, [pc, #468]	@ (800d880 <HeartBeat+0x2fc>)
 800d6aa:	4976      	ldr	r1, [pc, #472]	@ (800d884 <HeartBeat+0x300>)
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7f9 f861 	bl	8006774 <Char_Replace>
	Char_Replace((char*) Memory, "\r", " ");
 800d6b2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d6b6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d6c0:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d6c4:	4a6e      	ldr	r2, [pc, #440]	@ (800d880 <HeartBeat+0x2fc>)
 800d6c6:	4970      	ldr	r1, [pc, #448]	@ (800d888 <HeartBeat+0x304>)
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f9 f853 	bl	8006774 <Char_Replace>

	Word_Transfer((char*) Cell_ID, (char*) Memory);
 800d6ce:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d6d2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d6dc:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	486d      	ldr	r0, [pc, #436]	@ (800d898 <HeartBeat+0x314>)
 800d6e4:	f7f9 f826 	bl	8006734 <Word_Transfer>

	Clear_Memory(Data_Ptr);
 800d6e8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d6ec:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d6f0:	6818      	ldr	r0, [r3, #0]
 800d6f2:	f7f8 ffc6 	bl	8006682 <Clear_Memory>
	buf = 0;
 800d6f6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d6fa:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d704:	461a      	mov	r2, r3
 800d706:	2300      	movs	r3, #0
 800d708:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	/***********************************************************************/
	//Cell_Date_Day = {6,9};
	//	char CDay[2] = {0};
	//MEM_PTR *Data_Ptr;
	Update_Battery ();
 800d70c:	f004 fa54 	bl	8011bb8 <Update_Battery>
	//	for (int instance =1; instance < 11; instance++) //to loop heartbeats for testing purposes
	//	{

	getTempSensorData(&tempParameters);
 800d710:	4862      	ldr	r0, [pc, #392]	@ (800d89c <HeartBeat+0x318>)
 800d712:	f005 fd7b 	bl	801320c <getTempSensorData>


	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800d716:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d71a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d71e:	4960      	ldr	r1, [pc, #384]	@ (800d8a0 <HeartBeat+0x31c>)
 800d720:	6818      	ldr	r0, [r3, #0]
 800d722:	f7f9 f92b 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800d726:	4b5f      	ldr	r3, [pc, #380]	@ (800d8a4 <HeartBeat+0x320>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	220a      	movs	r2, #10
 800d72c:	495e      	ldr	r1, [pc, #376]	@ (800d8a8 <HeartBeat+0x324>)
 800d72e:	4618      	mov	r0, r3
 800d730:	f018 fd0c 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800d734:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d738:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d73c:	495a      	ldr	r1, [pc, #360]	@ (800d8a8 <HeartBeat+0x324>)
 800d73e:	6818      	ldr	r0, [r3, #0]
 800d740:	f7f9 f91c 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800d744:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d748:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d74c:	4957      	ldr	r1, [pc, #348]	@ (800d8ac <HeartBeat+0x328>)
 800d74e:	6818      	ldr	r0, [r3, #0]
 800d750:	f7f9 f914 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800d754:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d758:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d75c:	494d      	ldr	r1, [pc, #308]	@ (800d894 <HeartBeat+0x310>)
 800d75e:	6818      	ldr	r0, [r3, #0]
 800d760:	f7f9 f90c 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800d764:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d768:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d76c:	4950      	ldr	r1, [pc, #320]	@ (800d8b0 <HeartBeat+0x32c>)
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	f7f9 f904 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, TIME_STR);
 800d774:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d778:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d77c:	494d      	ldr	r1, [pc, #308]	@ (800d8b4 <HeartBeat+0x330>)
 800d77e:	6818      	ldr	r0, [r3, #0]
 800d780:	f7f9 f8fc 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800d784:	f107 0208 	add.w	r2, r7, #8
 800d788:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d78c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d790:	4611      	mov	r1, r2
 800d792:	6818      	ldr	r0, [r3, #0]
 800d794:	f7f9 f8f2 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_DATA);
 800d798:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d79c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d7a0:	4945      	ldr	r1, [pc, #276]	@ (800d8b8 <HeartBeat+0x334>)
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	f7f9 f8ea 	bl	800697c <Build_MSG>

	utoa( tempParameters.Device_ID, (char*) (&(Memory[ buf])), 10);
 800d7a8:	4b3c      	ldr	r3, [pc, #240]	@ (800d89c <HeartBeat+0x318>)
 800d7aa:	885b      	ldrh	r3, [r3, #2]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d7b2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d7bc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d7c0:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d7c4:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d7c8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d7cc:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d7d0:	6812      	ldr	r2, [r2, #0]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	220a      	movs	r2, #10
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f018 fcb8 	bl	802614c <utoa>

	while (Memory[ buf])
 800d7dc:	e012      	b.n	800d804 <HeartBeat+0x280>
		buf++;
 800d7de:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d7e2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d7ec:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d7f6:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d7fa:	6812      	ldr	r2, [r2, #0]
 800d7fc:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800d800:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800d804:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d808:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d812:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d816:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d81a:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d81e:	6812      	ldr	r2, [r2, #0]
 800d820:	4413      	add	r3, r2
 800d822:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d826:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1d6      	bne.n	800d7de <HeartBeat+0x25a>

	//Build_MSG(Data_Ptr, MQTT_VBAT);
	//Build_MSG(Data_Ptr, MQTT_HB_DATA_HDR);   //temporary while "Bat" is hardcoded as a string

	Build_MSG(Data_Ptr, MQTT_APND);
 800d830:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d834:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d838:	491d      	ldr	r1, [pc, #116]	@ (800d8b0 <HeartBeat+0x32c>)
 800d83a:	6818      	ldr	r0, [r3, #0]
 800d83c:	f7f9 f89e 	bl	800697c <Build_MSG>
	utoa( tempParameters.Temperature, (char*) (&(Memory[ buf])), 10);
 800d840:	4b16      	ldr	r3, [pc, #88]	@ (800d89c <HeartBeat+0x318>)
 800d842:	889b      	ldrh	r3, [r3, #4]
 800d844:	4618      	mov	r0, r3
 800d846:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d84a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d854:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d858:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d85c:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d860:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d864:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d868:	6812      	ldr	r2, [r2, #0]
 800d86a:	4413      	add	r3, r2
 800d86c:	220a      	movs	r2, #10
 800d86e:	4619      	mov	r1, r3
 800d870:	f018 fc6c 	bl	802614c <utoa>

	while (Memory[ buf])
 800d874:	e035      	b.n	800d8e2 <HeartBeat+0x35e>
 800d876:	bf00      	nop
 800d878:	0802eb10 	.word	0x0802eb10
 800d87c:	2007a330 	.word	0x2007a330
 800d880:	0802e894 	.word	0x0802e894
 800d884:	0802e898 	.word	0x0802e898
 800d888:	0802e89c 	.word	0x0802e89c
 800d88c:	2007a386 	.word	0x2007a386
 800d890:	0802eb30 	.word	0x0802eb30
 800d894:	2007a911 	.word	0x2007a911
 800d898:	2007a3ea 	.word	0x2007a3ea
 800d89c:	2007ce14 	.word	0x2007ce14
 800d8a0:	0802e934 	.word	0x0802e934
 800d8a4:	0bfa0700 	.word	0x0bfa0700
 800d8a8:	2007a92f 	.word	0x2007a92f
 800d8ac:	0802e944 	.word	0x0802e944
 800d8b0:	0802e99c 	.word	0x0802e99c
 800d8b4:	0802eaa4 	.word	0x0802eaa4
 800d8b8:	0802eb40 	.word	0x0802eb40
		buf++;
 800d8bc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d8c0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d8ca:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d8d4:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d8d8:	6812      	ldr	r2, [r2, #0]
 800d8da:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800d8de:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800d8e2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d8e6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d8f0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d8f4:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d8f8:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d8fc:	6812      	ldr	r2, [r2, #0]
 800d8fe:	4413      	add	r3, r2
 800d900:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d904:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1d6      	bne.n	800d8bc <HeartBeat+0x338>

	Build_MSG(Data_Ptr, MQTT_APND);
 800d90e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d912:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d916:	4999      	ldr	r1, [pc, #612]	@ (800db7c <HeartBeat+0x5f8>)
 800d918:	6818      	ldr	r0, [r3, #0]
 800d91a:	f7f9 f82f 	bl	800697c <Build_MSG>
	utoa( tempParameters.Device_ID, (char*) (&(Memory[ buf])), 10);
 800d91e:	4b98      	ldr	r3, [pc, #608]	@ (800db80 <HeartBeat+0x5fc>)
 800d920:	885b      	ldrh	r3, [r3, #2]
 800d922:	4618      	mov	r0, r3
 800d924:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d928:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d932:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d936:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d93a:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d93e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d942:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d946:	6812      	ldr	r2, [r2, #0]
 800d948:	4413      	add	r3, r2
 800d94a:	220a      	movs	r2, #10
 800d94c:	4619      	mov	r1, r3
 800d94e:	f018 fbfd 	bl	802614c <utoa>

	while (Memory[ buf])
 800d952:	e012      	b.n	800d97a <HeartBeat+0x3f6>
		buf++;
 800d954:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d958:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d962:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d966:	3301      	adds	r3, #1
 800d968:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d96c:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d970:	6812      	ldr	r2, [r2, #0]
 800d972:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800d976:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800d97a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d97e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d988:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d98c:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d990:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	4413      	add	r3, r2
 800d998:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d99c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1d6      	bne.n	800d954 <HeartBeat+0x3d0>

	Build_MSG(Data_Ptr, MQTT_APND);
 800d9a6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d9aa:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d9ae:	4973      	ldr	r1, [pc, #460]	@ (800db7c <HeartBeat+0x5f8>)
 800d9b0:	6818      	ldr	r0, [r3, #0]
 800d9b2:	f7f8 ffe3 	bl	800697c <Build_MSG>
	utoa( tempParameters.Humidity, (char*) (&(Memory[ buf])), 10);
 800d9b6:	4b72      	ldr	r3, [pc, #456]	@ (800db80 <HeartBeat+0x5fc>)
 800d9b8:	88db      	ldrh	r3, [r3, #6]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d9c0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d9ca:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d9ce:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800d9d2:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800d9d6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d9da:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800d9de:	6812      	ldr	r2, [r2, #0]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	220a      	movs	r2, #10
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	f018 fbb1 	bl	802614c <utoa>

	while (Memory[ buf])
 800d9ea:	e012      	b.n	800da12 <HeartBeat+0x48e>
		buf++;
 800d9ec:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800d9f0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800d9fa:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800d9fe:	3301      	adds	r3, #1
 800da00:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800da04:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800da08:	6812      	ldr	r2, [r2, #0]
 800da0a:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800da0e:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800da12:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800da16:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800da20:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800da24:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800da28:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800da2c:	6812      	ldr	r2, [r2, #0]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800da34:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1d6      	bne.n	800d9ec <HeartBeat+0x468>

	Build_MSG(Data_Ptr, MQTT_APND);
 800da3e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800da42:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800da46:	494d      	ldr	r1, [pc, #308]	@ (800db7c <HeartBeat+0x5f8>)
 800da48:	6818      	ldr	r0, [r3, #0]
 800da4a:	f7f8 ff97 	bl	800697c <Build_MSG>
//	utoa( Acce_Device_ID, (char*) (&(Memory[ buf])), 10);

	while (Memory[ buf])
 800da4e:	e012      	b.n	800da76 <HeartBeat+0x4f2>
		buf++;
 800da50:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800da54:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800da5e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800da62:	3301      	adds	r3, #1
 800da64:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800da68:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800da6c:	6812      	ldr	r2, [r2, #0]
 800da6e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800da72:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800da76:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800da7a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800da84:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800da88:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800da8c:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800da90:	6812      	ldr	r2, [r2, #0]
 800da92:	4413      	add	r3, r2
 800da94:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800da98:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d1d6      	bne.n	800da50 <HeartBeat+0x4cc>

	Build_MSG(Data_Ptr, MQTT_APND);
 800daa2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800daa6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800daaa:	4934      	ldr	r1, [pc, #208]	@ (800db7c <HeartBeat+0x5f8>)
 800daac:	6818      	ldr	r0, [r3, #0]
 800daae:	f7f8 ff65 	bl	800697c <Build_MSG>
//	utoa( X_Axis, (char*) (&(Memory[ buf])), 10);

	while (Memory[ buf])
 800dab2:	e012      	b.n	800dada <HeartBeat+0x556>
		buf++;
 800dab4:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dab8:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dac2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800dac6:	3301      	adds	r3, #1
 800dac8:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800dacc:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800dad0:	6812      	ldr	r2, [r2, #0]
 800dad2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800dad6:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800dada:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dade:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dae8:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800daec:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800daf0:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800daf4:	6812      	ldr	r2, [r2, #0]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dafc:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800db00:	781b      	ldrb	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1d6      	bne.n	800dab4 <HeartBeat+0x530>

	Build_MSG(Data_Ptr, MQTT_APND);
 800db06:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800db0a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800db0e:	491b      	ldr	r1, [pc, #108]	@ (800db7c <HeartBeat+0x5f8>)
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	f7f8 ff33 	bl	800697c <Build_MSG>
//	utoa( Y_Axis, (char*) (&(Memory[ buf])), 10);

	while (Memory[ buf])
 800db16:	e012      	b.n	800db3e <HeartBeat+0x5ba>
		buf++;
 800db18:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800db1c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800db26:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800db2a:	3301      	adds	r3, #1
 800db2c:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800db30:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800db34:	6812      	ldr	r2, [r2, #0]
 800db36:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800db3a:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800db3e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800db42:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800db4c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800db50:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800db54:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800db60:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d1d6      	bne.n	800db18 <HeartBeat+0x594>

	Build_MSG(Data_Ptr, MQTT_APND);
 800db6a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800db6e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800db72:	4902      	ldr	r1, [pc, #8]	@ (800db7c <HeartBeat+0x5f8>)
 800db74:	6818      	ldr	r0, [r3, #0]
 800db76:	f7f8 ff01 	bl	800697c <Build_MSG>
//	utoa( Z_Axis, (char*) (&(Memory[ buf])), 10);

	while (Memory[ buf])
 800db7a:	e016      	b.n	800dbaa <HeartBeat+0x626>
 800db7c:	0802e99c 	.word	0x0802e99c
 800db80:	2007ce14 	.word	0x2007ce14
		buf++;
 800db84:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800db88:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800db92:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800db96:	3301      	adds	r3, #1
 800db98:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800db9c:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800dba0:	6812      	ldr	r2, [r2, #0]
 800dba2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800dba6:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (Memory[ buf])
 800dbaa:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dbae:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dbb8:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800dbbc:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800dbc0:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dbcc:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d1d6      	bne.n	800db84 <HeartBeat+0x600>

	Build_MSG(Data_Ptr, MQTT_APND);
 800dbd6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dbda:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dbde:	494c      	ldr	r1, [pc, #304]	@ (800dd10 <HeartBeat+0x78c>)
 800dbe0:	6818      	ldr	r0, [r3, #0]
 800dbe2:	f7f8 fecb 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, (char*) Signal);
 800dbe6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dbea:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dbee:	4949      	ldr	r1, [pc, #292]	@ (800dd14 <HeartBeat+0x790>)
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	f7f8 fec3 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800dbf6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dbfa:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dbfe:	4944      	ldr	r1, [pc, #272]	@ (800dd10 <HeartBeat+0x78c>)
 800dc00:	6818      	ldr	r0, [r3, #0]
 800dc02:	f7f8 febb 	bl	800697c <Build_MSG>

	//	Build_MSG(Data_Ptr, (char*) Cell_ID);
	//	Build_MSG(Data_Ptr, MQTT_APND);

	Build_MSG(Data_Ptr, (char*) Modem_ID);
 800dc06:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc0a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc0e:	4942      	ldr	r1, [pc, #264]	@ (800dd18 <HeartBeat+0x794>)
 800dc10:	6818      	ldr	r0, [r3, #0]
 800dc12:	f7f8 feb3 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800dc16:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc1a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc1e:	493c      	ldr	r1, [pc, #240]	@ (800dd10 <HeartBeat+0x78c>)
 800dc20:	6818      	ldr	r0, [r3, #0]
 800dc22:	f7f8 feab 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, (char*) Sim_ID);
 800dc26:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc2a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc2e:	493b      	ldr	r1, [pc, #236]	@ (800dd1c <HeartBeat+0x798>)
 800dc30:	6818      	ldr	r0, [r3, #0]
 800dc32:	f7f8 fea3 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_APND);
 800dc36:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc3a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc3e:	4934      	ldr	r1, [pc, #208]	@ (800dd10 <HeartBeat+0x78c>)
 800dc40:	6818      	ldr	r0, [r3, #0]
 800dc42:	f7f8 fe9b 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, batVal);
 800dc46:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc4a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc4e:	4934      	ldr	r1, [pc, #208]	@ (800dd20 <HeartBeat+0x79c>)
 800dc50:	6818      	ldr	r0, [r3, #0]
 800dc52:	f7f8 fe93 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800dc56:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc5a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc5e:	492c      	ldr	r1, [pc, #176]	@ (800dd10 <HeartBeat+0x78c>)
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	f7f8 fe8b 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, (char*) Cell_Dev_ID);
 800dc66:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc6a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc6e:	492d      	ldr	r1, [pc, #180]	@ (800dd24 <HeartBeat+0x7a0>)
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	f7f8 fe83 	bl	800697c <Build_MSG>
//	Build_MSG(Data_Ptr, MQTT_APND);
//	Time_Stamp((char*) Data_Ptr->Modem_Data.Time_STMP);
//	Build_MSG(Data_Ptr, (char*) Data_Ptr->Modem_Data.Time_STMP);
//	Build_MSG(Data_Ptr, MQTT_MSG_END_BRACKET);
	Build_MSG(Data_Ptr, MQTT_TAIL_MASK);
 800dc76:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc7a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc7e:	492a      	ldr	r1, [pc, #168]	@ (800dd28 <HeartBeat+0x7a4>)
 800dc80:	6818      	ldr	r0, [r3, #0]
 800dc82:	f7f8 fe7b 	bl	800697c <Build_MSG>

	//	utoa( Cell_Date_Day, (char*)CDay, 10);
	//	Build_MSG(Data_Ptr, CDay);

	Size = buf;
 800dc86:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dc8a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dc94:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800dc98:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800dc9c:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800dca0:	6812      	ldr	r2, [r2, #0]
 800dca2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800dca6:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	Command = PUBLISH;
 800dcaa:	4b20      	ldr	r3, [pc, #128]	@ (800dd2c <HeartBeat+0x7a8>)
 800dcac:	2210      	movs	r2, #16
 800dcae:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800dcb2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dcb6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dcba:	6818      	ldr	r0, [r3, #0]
 800dcbc:	f000 fede 	bl	800ea7c <CELL_COMMAND>
	//	HAL_Delay ( MSG_Delay );
	Command = PUBLISH_MEM;
 800dcc0:	4b1a      	ldr	r3, [pc, #104]	@ (800dd2c <HeartBeat+0x7a8>)
 800dcc2:	2213      	movs	r2, #19
 800dcc4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800dcc8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dccc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dcd0:	6818      	ldr	r0, [r3, #0]
 800dcd2:	f000 fed3 	bl	800ea7c <CELL_COMMAND>
	HAL_Delay(5000);
 800dcd6:	f241 3088 	movw	r0, #5000	@ 0x1388
 800dcda:	f008 fbd3 	bl	8016484 <HAL_Delay>
	Refresh_Watchdog;
 800dcde:	4814      	ldr	r0, [pc, #80]	@ (800dd30 <HeartBeat+0x7ac>)
 800dce0:	f00d fa77 	bl	801b1d2 <HAL_IWDG_Refresh>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d001      	beq.n	800dcee <HeartBeat+0x76a>
 800dcea:	f007 fd53 	bl	8015794 <Error_Handler>
	//	}

	Command = CHECK;
 800dcee:	4b0f      	ldr	r3, [pc, #60]	@ (800dd2c <HeartBeat+0x7a8>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800dcf6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dcfa:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dcfe:	6818      	ldr	r0, [r3, #0]
 800dd00:	f000 febc 	bl	800ea7c <CELL_COMMAND>
}
 800dd04:	bf00      	nop
 800dd06:	f607 77a8 	addw	r7, r7, #4008	@ 0xfa8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	0802e99c 	.word	0x0802e99c
 800dd14:	2007a386 	.word	0x2007a386
 800dd18:	2007a836 	.word	0x2007a836
 800dd1c:	2007a7d2 	.word	0x2007a7d2
 800dd20:	2007be64 	.word	0x2007be64
 800dd24:	2007a89a 	.word	0x2007a89a
 800dd28:	0802e954 	.word	0x0802e954
 800dd2c:	2007a330 	.word	0x2007a330
 800dd30:	2007d0bc 	.word	0x2007d0bc

0800dd34 <FW_Ack_Pending>:

void FW_Ack_Pending(MEM_PTR *Data_Ptr, OTA_FILE_TYPE *OtaData)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	f6ad 7da8 	subw	sp, sp, #4008	@ 0xfa8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dd40:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dd44:	6018      	str	r0, [r3, #0]
 800dd46:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dd4a:	f6a3 73a8 	subw	r3, r3, #4008	@ 0xfa8
 800dd4e:	6019      	str	r1, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_FW_ACK_PENDING);
 800dd50:	4872      	ldr	r0, [pc, #456]	@ (800df1c <FW_Ack_Pending+0x1e8>)
 800dd52:	f7f8 feab 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	char timeStamp[MEMORY_MAX] = {0};
 800dd56:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dd5a:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800dd5e:	2200      	movs	r2, #0
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	3304      	adds	r3, #4
 800dd64:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800dd68:	2100      	movs	r1, #0
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f019 fa00 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800dd70:	f107 0308 	add.w	r3, r7, #8
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7f9 fb11 	bl	800739c <Time_StampISO>

	Command = CHECK;
 800dd7a:	4b69      	ldr	r3, [pc, #420]	@ (800df20 <FW_Ack_Pending+0x1ec>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800dd82:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dd86:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dd8a:	6818      	ldr	r0, [r3, #0]
 800dd8c:	f000 fe76 	bl	800ea7c <CELL_COMMAND>

	Word_Transfer( Event_Type, MQTT_FW_PENDING_EVENT);
 800dd90:	4964      	ldr	r1, [pc, #400]	@ (800df24 <FW_Ack_Pending+0x1f0>)
 800dd92:	4865      	ldr	r0, [pc, #404]	@ (800df28 <FW_Ack_Pending+0x1f4>)
 800dd94:	f7f8 fcce 	bl	8006734 <Word_Transfer>

	Clear_Memory(Data_Ptr);
 800dd98:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dd9c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	f7f8 fc6e 	bl	8006682 <Clear_Memory>
	buf = 0;
 800dda6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800ddaa:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800ddbc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800ddc0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800ddc4:	4959      	ldr	r1, [pc, #356]	@ (800df2c <FW_Ack_Pending+0x1f8>)
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	f7f8 fdd8 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800ddcc:	4b58      	ldr	r3, [pc, #352]	@ (800df30 <FW_Ack_Pending+0x1fc>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	220a      	movs	r2, #10
 800ddd2:	4958      	ldr	r1, [pc, #352]	@ (800df34 <FW_Ack_Pending+0x200>)
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f018 f9b9 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800ddda:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800ddde:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dde2:	4954      	ldr	r1, [pc, #336]	@ (800df34 <FW_Ack_Pending+0x200>)
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f7f8 fdc9 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800ddea:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800ddee:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800ddf2:	4951      	ldr	r1, [pc, #324]	@ (800df38 <FW_Ack_Pending+0x204>)
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	f7f8 fdc1 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800ddfa:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800ddfe:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de02:	4949      	ldr	r1, [pc, #292]	@ (800df28 <FW_Ack_Pending+0x1f4>)
 800de04:	6818      	ldr	r0, [r3, #0]
 800de06:	f7f8 fdb9 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, TIME_STR);
 800de0a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de0e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de12:	494a      	ldr	r1, [pc, #296]	@ (800df3c <FW_Ack_Pending+0x208>)
 800de14:	6818      	ldr	r0, [r3, #0]
 800de16:	f7f8 fdb1 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800de1a:	f107 0208 	add.w	r2, r7, #8
 800de1e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de22:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de26:	4611      	mov	r1, r2
 800de28:	6818      	ldr	r0, [r3, #0]
 800de2a:	f7f8 fda7 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800de2e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de32:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de36:	4942      	ldr	r1, [pc, #264]	@ (800df40 <FW_Ack_Pending+0x20c>)
 800de38:	6818      	ldr	r0, [r3, #0]
 800de3a:	f7f8 fd9f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800de3e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de42:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de46:	493f      	ldr	r1, [pc, #252]	@ (800df44 <FW_Ack_Pending+0x210>)
 800de48:	6818      	ldr	r0, [r3, #0]
 800de4a:	f7f8 fd97 	bl	800697c <Build_MSG>


	Build_MSG(Data_Ptr, MQTT_FW_VERSION);
 800de4e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de52:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de56:	493c      	ldr	r1, [pc, #240]	@ (800df48 <FW_Ack_Pending+0x214>)
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	f7f8 fd8f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800de5e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de62:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de66:	4939      	ldr	r1, [pc, #228]	@ (800df4c <FW_Ack_Pending+0x218>)
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	f7f8 fd87 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->otaFileName);
 800de6e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de72:	f6a3 73a8 	subw	r3, r3, #4008	@ 0xfa8
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800de7c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de80:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de84:	4611      	mov	r1, r2
 800de86:	6818      	ldr	r0, [r3, #0]
 800de88:	f7f8 fd78 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800de8c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800de90:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800de94:	492d      	ldr	r1, [pc, #180]	@ (800df4c <FW_Ack_Pending+0x218>)
 800de96:	6818      	ldr	r0, [r3, #0]
 800de98:	f7f8 fd70 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_END_BRACKET);
 800de9c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dea0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dea4:	492a      	ldr	r1, [pc, #168]	@ (800df50 <FW_Ack_Pending+0x21c>)
 800dea6:	6818      	ldr	r0, [r3, #0]
 800dea8:	f7f8 fd68 	bl	800697c <Build_MSG>

	Size = buf;
 800deac:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800deb0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800deba:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800debe:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800dec2:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800dec6:	6812      	ldr	r2, [r2, #0]
 800dec8:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800decc:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	Command = PUBLISH;
 800ded0:	4b13      	ldr	r3, [pc, #76]	@ (800df20 <FW_Ack_Pending+0x1ec>)
 800ded2:	2210      	movs	r2, #16
 800ded4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ded8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dedc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dee0:	6818      	ldr	r0, [r3, #0]
 800dee2:	f000 fdcb 	bl	800ea7c <CELL_COMMAND>
	Command = PUBLISH_MEM;
 800dee6:	4b0e      	ldr	r3, [pc, #56]	@ (800df20 <FW_Ack_Pending+0x1ec>)
 800dee8:	2213      	movs	r2, #19
 800deea:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800deee:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800def2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800def6:	6818      	ldr	r0, [r3, #0]
 800def8:	f000 fdc0 	bl	800ea7c <CELL_COMMAND>
	Command = CHECK;
 800defc:	4b08      	ldr	r3, [pc, #32]	@ (800df20 <FW_Ack_Pending+0x1ec>)
 800defe:	2200      	movs	r2, #0
 800df00:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800df04:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800df08:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800df0c:	6818      	ldr	r0, [r3, #0]
 800df0e:	f000 fdb5 	bl	800ea7c <CELL_COMMAND>
}
 800df12:	bf00      	nop
 800df14:	f607 77a8 	addw	r7, r7, #4008	@ 0xfa8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	0802eb50 	.word	0x0802eb50
 800df20:	2007a330 	.word	0x2007a330
 800df24:	0802eb78 	.word	0x0802eb78
 800df28:	2007a911 	.word	0x2007a911
 800df2c:	0802e934 	.word	0x0802e934
 800df30:	0bfa0700 	.word	0x0bfa0700
 800df34:	2007a92f 	.word	0x2007a92f
 800df38:	0802e944 	.word	0x0802e944
 800df3c:	0802eaa4 	.word	0x0802eaa4
 800df40:	0802eaa0 	.word	0x0802eaa0
 800df44:	0802e99c 	.word	0x0802e99c
 800df48:	0802eb90 	.word	0x0802eb90
 800df4c:	0802e9d0 	.word	0x0802e9d0
 800df50:	0802eb9c 	.word	0x0802eb9c

0800df54 <FW_Ack_Ready>:

void FW_Ack_Ready(MEM_PTR *Data_Ptr, OTA_FILE_TYPE *OtaData)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	f6ad 7da8 	subw	sp, sp, #4008	@ 0xfa8
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800df60:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800df64:	6018      	str	r0, [r3, #0]
 800df66:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800df6a:	f6a3 73a8 	subw	r3, r3, #4008	@ 0xfa8
 800df6e:	6019      	str	r1, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_FW_ACK_READY);
 800df70:	4872      	ldr	r0, [pc, #456]	@ (800e13c <FW_Ack_Ready+0x1e8>)
 800df72:	f7f8 fd9b 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	char timeStamp[MEMORY_MAX] = {0};
 800df76:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800df7a:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	3304      	adds	r3, #4
 800df84:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800df88:	2100      	movs	r1, #0
 800df8a:	4618      	mov	r0, r3
 800df8c:	f019 f8f0 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800df90:	f107 0308 	add.w	r3, r7, #8
 800df94:	4618      	mov	r0, r3
 800df96:	f7f9 fa01 	bl	800739c <Time_StampISO>

	Command = CHECK;
 800df9a:	4b69      	ldr	r3, [pc, #420]	@ (800e140 <FW_Ack_Ready+0x1ec>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800dfa2:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dfa6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dfaa:	6818      	ldr	r0, [r3, #0]
 800dfac:	f000 fd66 	bl	800ea7c <CELL_COMMAND>

	Word_Transfer( Event_Type, MQTT_FW_READY_EVENT);
 800dfb0:	4964      	ldr	r1, [pc, #400]	@ (800e144 <FW_Ack_Ready+0x1f0>)
 800dfb2:	4865      	ldr	r0, [pc, #404]	@ (800e148 <FW_Ack_Ready+0x1f4>)
 800dfb4:	f7f8 fbbe 	bl	8006734 <Word_Transfer>

	Clear_Memory(Data_Ptr);
 800dfb8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dfbc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dfc0:	6818      	ldr	r0, [r3, #0]
 800dfc2:	f7f8 fb5e 	bl	8006682 <Clear_Memory>
	buf = 0;
 800dfc6:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dfca:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800dfdc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dfe0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800dfe4:	4959      	ldr	r1, [pc, #356]	@ (800e14c <FW_Ack_Ready+0x1f8>)
 800dfe6:	6818      	ldr	r0, [r3, #0]
 800dfe8:	f7f8 fcc8 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800dfec:	4b58      	ldr	r3, [pc, #352]	@ (800e150 <FW_Ack_Ready+0x1fc>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	220a      	movs	r2, #10
 800dff2:	4958      	ldr	r1, [pc, #352]	@ (800e154 <FW_Ack_Ready+0x200>)
 800dff4:	4618      	mov	r0, r3
 800dff6:	f018 f8a9 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800dffa:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800dffe:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e002:	4954      	ldr	r1, [pc, #336]	@ (800e154 <FW_Ack_Ready+0x200>)
 800e004:	6818      	ldr	r0, [r3, #0]
 800e006:	f7f8 fcb9 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800e00a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e00e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e012:	4951      	ldr	r1, [pc, #324]	@ (800e158 <FW_Ack_Ready+0x204>)
 800e014:	6818      	ldr	r0, [r3, #0]
 800e016:	f7f8 fcb1 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800e01a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e01e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e022:	4949      	ldr	r1, [pc, #292]	@ (800e148 <FW_Ack_Ready+0x1f4>)
 800e024:	6818      	ldr	r0, [r3, #0]
 800e026:	f7f8 fca9 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, TIME_STR);
 800e02a:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e02e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e032:	494a      	ldr	r1, [pc, #296]	@ (800e15c <FW_Ack_Ready+0x208>)
 800e034:	6818      	ldr	r0, [r3, #0]
 800e036:	f7f8 fca1 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800e03a:	f107 0208 	add.w	r2, r7, #8
 800e03e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e042:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e046:	4611      	mov	r1, r2
 800e048:	6818      	ldr	r0, [r3, #0]
 800e04a:	f7f8 fc97 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800e04e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e052:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e056:	4942      	ldr	r1, [pc, #264]	@ (800e160 <FW_Ack_Ready+0x20c>)
 800e058:	6818      	ldr	r0, [r3, #0]
 800e05a:	f7f8 fc8f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e05e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e062:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e066:	493f      	ldr	r1, [pc, #252]	@ (800e164 <FW_Ack_Ready+0x210>)
 800e068:	6818      	ldr	r0, [r3, #0]
 800e06a:	f7f8 fc87 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_FW_VERSION);
 800e06e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e072:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e076:	493c      	ldr	r1, [pc, #240]	@ (800e168 <FW_Ack_Ready+0x214>)
 800e078:	6818      	ldr	r0, [r3, #0]
 800e07a:	f7f8 fc7f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e07e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e082:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e086:	4939      	ldr	r1, [pc, #228]	@ (800e16c <FW_Ack_Ready+0x218>)
 800e088:	6818      	ldr	r0, [r3, #0]
 800e08a:	f7f8 fc77 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->otaFileName);
 800e08e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e092:	f6a3 73a8 	subw	r3, r3, #4008	@ 0xfa8
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800e09c:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e0a0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	6818      	ldr	r0, [r3, #0]
 800e0a8:	f7f8 fc68 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e0ac:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e0b0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e0b4:	492d      	ldr	r1, [pc, #180]	@ (800e16c <FW_Ack_Ready+0x218>)
 800e0b6:	6818      	ldr	r0, [r3, #0]
 800e0b8:	f7f8 fc60 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_END_BRACKET);
 800e0bc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e0c0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e0c4:	492a      	ldr	r1, [pc, #168]	@ (800e170 <FW_Ack_Ready+0x21c>)
 800e0c6:	6818      	ldr	r0, [r3, #0]
 800e0c8:	f7f8 fc58 	bl	800697c <Build_MSG>

	Size = buf;
 800e0cc:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e0d0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e0da:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800e0de:	f607 72a8 	addw	r2, r7, #4008	@ 0xfa8
 800e0e2:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800e0e6:	6812      	ldr	r2, [r2, #0]
 800e0e8:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800e0ec:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	Command = PUBLISH;
 800e0f0:	4b13      	ldr	r3, [pc, #76]	@ (800e140 <FW_Ack_Ready+0x1ec>)
 800e0f2:	2210      	movs	r2, #16
 800e0f4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e0f8:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e0fc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	f000 fcbb 	bl	800ea7c <CELL_COMMAND>
	Command = PUBLISH_MEM;
 800e106:	4b0e      	ldr	r3, [pc, #56]	@ (800e140 <FW_Ack_Ready+0x1ec>)
 800e108:	2213      	movs	r2, #19
 800e10a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e10e:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e112:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e116:	6818      	ldr	r0, [r3, #0]
 800e118:	f000 fcb0 	bl	800ea7c <CELL_COMMAND>
	Command = CHECK;
 800e11c:	4b08      	ldr	r3, [pc, #32]	@ (800e140 <FW_Ack_Ready+0x1ec>)
 800e11e:	2200      	movs	r2, #0
 800e120:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e124:	f607 73a8 	addw	r3, r7, #4008	@ 0xfa8
 800e128:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e12c:	6818      	ldr	r0, [r3, #0]
 800e12e:	f000 fca5 	bl	800ea7c <CELL_COMMAND>
}
 800e132:	bf00      	nop
 800e134:	f607 77a8 	addw	r7, r7, #4008	@ 0xfa8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	0802eba0 	.word	0x0802eba0
 800e140:	2007a330 	.word	0x2007a330
 800e144:	0802ebc8 	.word	0x0802ebc8
 800e148:	2007a911 	.word	0x2007a911
 800e14c:	0802e934 	.word	0x0802e934
 800e150:	0bfa0700 	.word	0x0bfa0700
 800e154:	2007a92f 	.word	0x2007a92f
 800e158:	0802e944 	.word	0x0802e944
 800e15c:	0802eaa4 	.word	0x0802eaa4
 800e160:	0802eaa0 	.word	0x0802eaa0
 800e164:	0802e99c 	.word	0x0802e99c
 800e168:	0802eb90 	.word	0x0802eb90
 800e16c:	0802e9d0 	.word	0x0802e9d0
 800e170:	0802eb9c 	.word	0x0802eb9c

0800e174 <FW_Acknowledge>:

void FW_Acknowledge(MEM_PTR *Data_Ptr, OTA_FILE_TYPE *OtaData)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e180:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e184:	6018      	str	r0, [r3, #0]
 800e186:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e18a:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e18e:	6019      	str	r1, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_FW_MISSING_PAGES);
 800e190:	48b9      	ldr	r0, [pc, #740]	@ (800e478 <FW_Acknowledge+0x304>)
 800e192:	f7f8 fc8b 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	char timeStamp[MEMORY_MAX] = {0};
 800e196:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e19a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	3304      	adds	r3, #4
 800e1a4:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f018 ffe0 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800e1b0:	f107 031c 	add.w	r3, r7, #28
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7f9 f8f1 	bl	800739c <Time_StampISO>

	char totalpagesString[15];
	uint8_t totPage = OtaData->numberOfPages;
 800e1ba:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e1be:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	789b      	ldrb	r3, [r3, #2]
 800e1c6:	f887 3fbf 	strb.w	r3, [r7, #4031]	@ 0xfbf

	utoa( UNIQUE_Device_ID, Header, 10);
 800e1ca:	4bac      	ldr	r3, [pc, #688]	@ (800e47c <FW_Acknowledge+0x308>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	220a      	movs	r2, #10
 800e1d0:	49ab      	ldr	r1, [pc, #684]	@ (800e480 <FW_Acknowledge+0x30c>)
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f017 ffba 	bl	802614c <utoa>
	utoa(totPage, totalpagesString, 10);
 800e1d8:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 800e1dc:	f107 010c 	add.w	r1, r7, #12
 800e1e0:	220a      	movs	r2, #10
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f017 ffb2 	bl	802614c <utoa>

	Command = CHECK;
 800e1e8:	4ba6      	ldr	r3, [pc, #664]	@ (800e484 <FW_Acknowledge+0x310>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e1f0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e1f4:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	f000 fc3f 	bl	800ea7c <CELL_COMMAND>

	Word_Transfer( Event_Type, MQTT_FW_ACK_EVENT);
 800e1fe:	49a2      	ldr	r1, [pc, #648]	@ (800e488 <FW_Acknowledge+0x314>)
 800e200:	48a2      	ldr	r0, [pc, #648]	@ (800e48c <FW_Acknowledge+0x318>)
 800e202:	f7f8 fa97 	bl	8006734 <Word_Transfer>
	Clear_Memory(Data_Ptr);
 800e206:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e20a:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e20e:	6818      	ldr	r0, [r3, #0]
 800e210:	f7f8 fa37 	bl	8006682 <Clear_Memory>
	buf = 0;
 800e214:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e218:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e222:	461a      	mov	r2, r3
 800e224:	2300      	movs	r3, #0
 800e226:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800e22a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e22e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e232:	4997      	ldr	r1, [pc, #604]	@ (800e490 <FW_Acknowledge+0x31c>)
 800e234:	6818      	ldr	r0, [r3, #0]
 800e236:	f7f8 fba1 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800e23a:	4b90      	ldr	r3, [pc, #576]	@ (800e47c <FW_Acknowledge+0x308>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	220a      	movs	r2, #10
 800e240:	498f      	ldr	r1, [pc, #572]	@ (800e480 <FW_Acknowledge+0x30c>)
 800e242:	4618      	mov	r0, r3
 800e244:	f017 ff82 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800e248:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e24c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e250:	498b      	ldr	r1, [pc, #556]	@ (800e480 <FW_Acknowledge+0x30c>)
 800e252:	6818      	ldr	r0, [r3, #0]
 800e254:	f7f8 fb92 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800e258:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e25c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e260:	498c      	ldr	r1, [pc, #560]	@ (800e494 <FW_Acknowledge+0x320>)
 800e262:	6818      	ldr	r0, [r3, #0]
 800e264:	f7f8 fb8a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800e268:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e26c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e270:	4986      	ldr	r1, [pc, #536]	@ (800e48c <FW_Acknowledge+0x318>)
 800e272:	6818      	ldr	r0, [r3, #0]
 800e274:	f7f8 fb82 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, TIME_STR);
 800e278:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e27c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e280:	4985      	ldr	r1, [pc, #532]	@ (800e498 <FW_Acknowledge+0x324>)
 800e282:	6818      	ldr	r0, [r3, #0]
 800e284:	f7f8 fb7a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800e288:	f107 021c 	add.w	r2, r7, #28
 800e28c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e290:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e294:	4611      	mov	r1, r2
 800e296:	6818      	ldr	r0, [r3, #0]
 800e298:	f7f8 fb70 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800e29c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2a0:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e2a4:	497d      	ldr	r1, [pc, #500]	@ (800e49c <FW_Acknowledge+0x328>)
 800e2a6:	6818      	ldr	r0, [r3, #0]
 800e2a8:	f7f8 fb68 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e2ac:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2b0:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e2b4:	497a      	ldr	r1, [pc, #488]	@ (800e4a0 <FW_Acknowledge+0x32c>)
 800e2b6:	6818      	ldr	r0, [r3, #0]
 800e2b8:	f7f8 fb60 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_FW_VERSION);
 800e2bc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2c0:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e2c4:	4977      	ldr	r1, [pc, #476]	@ (800e4a4 <FW_Acknowledge+0x330>)
 800e2c6:	6818      	ldr	r0, [r3, #0]
 800e2c8:	f7f8 fb58 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e2cc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2d0:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e2d4:	4974      	ldr	r1, [pc, #464]	@ (800e4a8 <FW_Acknowledge+0x334>)
 800e2d6:	6818      	ldr	r0, [r3, #0]
 800e2d8:	f7f8 fb50 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->otaFileName);
 800e2dc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2e0:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800e2ea:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2ee:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e2f2:	4611      	mov	r1, r2
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	f7f8 fb41 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e2fa:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e2fe:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e302:	4969      	ldr	r1, [pc, #420]	@ (800e4a8 <FW_Acknowledge+0x334>)
 800e304:	6818      	ldr	r0, [r3, #0]
 800e306:	f7f8 fb39 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e30a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e30e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e312:	4963      	ldr	r1, [pc, #396]	@ (800e4a0 <FW_Acknowledge+0x32c>)
 800e314:	6818      	ldr	r0, [r3, #0]
 800e316:	f7f8 fb31 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_FILE);
 800e31a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e31e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e322:	4962      	ldr	r1, [pc, #392]	@ (800e4ac <FW_Acknowledge+0x338>)
 800e324:	6818      	ldr	r0, [r3, #0]
 800e326:	f7f8 fb29 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->fileNumberString);
 800e32a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e32e:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f103 0210 	add.w	r2, r3, #16
 800e338:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e33c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e340:	4611      	mov	r1, r2
 800e342:	6818      	ldr	r0, [r3, #0]
 800e344:	f7f8 fb1a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e348:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e34c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e350:	4953      	ldr	r1, [pc, #332]	@ (800e4a0 <FW_Acknowledge+0x32c>)
 800e352:	6818      	ldr	r0, [r3, #0]
 800e354:	f7f8 fb12 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_TOTAL_PAGES);
 800e358:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e35c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e360:	4953      	ldr	r1, [pc, #332]	@ (800e4b0 <FW_Acknowledge+0x33c>)
 800e362:	6818      	ldr	r0, [r3, #0]
 800e364:	f7f8 fb0a 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, (char*)totalpagesString);
 800e368:	f107 020c 	add.w	r2, r7, #12
 800e36c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e370:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e374:	4611      	mov	r1, r2
 800e376:	6818      	ldr	r0, [r3, #0]
 800e378:	f7f8 fb00 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e37c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e380:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e384:	4946      	ldr	r1, [pc, #280]	@ (800e4a0 <FW_Acknowledge+0x32c>)
 800e386:	6818      	ldr	r0, [r3, #0]
 800e388:	f7f8 faf8 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_PAGES_RECEIVED);
 800e38c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e390:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e394:	4947      	ldr	r1, [pc, #284]	@ (800e4b4 <FW_Acknowledge+0x340>)
 800e396:	6818      	ldr	r0, [r3, #0]
 800e398:	f7f8 faf0 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->receivedPagesString);
 800e39c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3a0:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f503 72a1 	add.w	r2, r3, #322	@ 0x142
 800e3aa:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3ae:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	6818      	ldr	r0, [r3, #0]
 800e3b6:	f7f8 fae1 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e3ba:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3be:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e3c2:	4937      	ldr	r1, [pc, #220]	@ (800e4a0 <FW_Acknowledge+0x32c>)
 800e3c4:	6818      	ldr	r0, [r3, #0]
 800e3c6:	f7f8 fad9 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_PAGES_MISSING);
 800e3ca:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3ce:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e3d2:	4939      	ldr	r1, [pc, #228]	@ (800e4b8 <FW_Acknowledge+0x344>)
 800e3d4:	6818      	ldr	r0, [r3, #0]
 800e3d6:	f7f8 fad1 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->missingPagesString);
 800e3da:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3de:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f103 02c2 	add.w	r2, r3, #194	@ 0xc2
 800e3e8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3ec:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	6818      	ldr	r0, [r3, #0]
 800e3f4:	f7f8 fac2 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_END_BRACKET);
 800e3f8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e3fc:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e400:	492e      	ldr	r1, [pc, #184]	@ (800e4bc <FW_Acknowledge+0x348>)
 800e402:	6818      	ldr	r0, [r3, #0]
 800e404:	f7f8 faba 	bl	800697c <Build_MSG>

	Size = buf;
 800e408:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e40c:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e416:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800e41a:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 800e41e:	f6a2 72bc 	subw	r2, r2, #4028	@ 0xfbc
 800e422:	6812      	ldr	r2, [r2, #0]
 800e424:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800e428:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	Command = PUBLISH;
 800e42c:	4b15      	ldr	r3, [pc, #84]	@ (800e484 <FW_Acknowledge+0x310>)
 800e42e:	2210      	movs	r2, #16
 800e430:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e434:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e438:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e43c:	6818      	ldr	r0, [r3, #0]
 800e43e:	f000 fb1d 	bl	800ea7c <CELL_COMMAND>
	Command = PUBLISH_MEM;
 800e442:	4b10      	ldr	r3, [pc, #64]	@ (800e484 <FW_Acknowledge+0x310>)
 800e444:	2213      	movs	r2, #19
 800e446:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e44a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e44e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e452:	6818      	ldr	r0, [r3, #0]
 800e454:	f000 fb12 	bl	800ea7c <CELL_COMMAND>
	Command = CHECK;
 800e458:	4b0a      	ldr	r3, [pc, #40]	@ (800e484 <FW_Acknowledge+0x310>)
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e460:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e464:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e468:	6818      	ldr	r0, [r3, #0]
 800e46a:	f000 fb07 	bl	800ea7c <CELL_COMMAND>
}
 800e46e:	bf00      	nop
 800e470:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	0802ebe0 	.word	0x0802ebe0
 800e47c:	0bfa0700 	.word	0x0bfa0700
 800e480:	2007a92f 	.word	0x2007a92f
 800e484:	2007a330 	.word	0x2007a330
 800e488:	0802ec04 	.word	0x0802ec04
 800e48c:	2007a911 	.word	0x2007a911
 800e490:	0802e934 	.word	0x0802e934
 800e494:	0802e944 	.word	0x0802e944
 800e498:	0802eaa4 	.word	0x0802eaa4
 800e49c:	0802eaa0 	.word	0x0802eaa0
 800e4a0:	0802e99c 	.word	0x0802e99c
 800e4a4:	0802eb90 	.word	0x0802eb90
 800e4a8:	0802e9d0 	.word	0x0802e9d0
 800e4ac:	0802ec18 	.word	0x0802ec18
 800e4b0:	0802ec24 	.word	0x0802ec24
 800e4b4:	0802ec38 	.word	0x0802ec38
 800e4b8:	0802ec50 	.word	0x0802ec50
 800e4bc:	0802eb9c 	.word	0x0802eb9c

0800e4c0 <FW_Next>:

void FW_Next(MEM_PTR *Data_Ptr, OTA_FILE_TYPE *OtaData)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e4cc:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e4d0:	6018      	str	r0, [r3, #0]
 800e4d2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e4d6:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e4da:	6019      	str	r1, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_FW_NEXT_BATCH);
 800e4dc:	4899      	ldr	r0, [pc, #612]	@ (800e744 <FW_Next+0x284>)
 800e4de:	f7f8 fae5 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	char timeStamp[MEMORY_MAX] = {0};
 800e4e2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e4e6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	601a      	str	r2, [r3, #0]
 800e4ee:	3304      	adds	r3, #4
 800e4f0:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800e4f4:	2100      	movs	r1, #0
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f018 fe3a 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800e4fc:	f107 031c 	add.w	r3, r7, #28
 800e500:	4618      	mov	r0, r3
 800e502:	f7f8 ff4b 	bl	800739c <Time_StampISO>

	char batchNumString[15];
	uint8_t tempBatchNum = OtaData->batchNum;
 800e506:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e50a:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	791b      	ldrb	r3, [r3, #4]
 800e512:	f887 3fbf 	strb.w	r3, [r7, #4031]	@ 0xfbf

	utoa( UNIQUE_Device_ID, Header, 10);
 800e516:	4b8c      	ldr	r3, [pc, #560]	@ (800e748 <FW_Next+0x288>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	220a      	movs	r2, #10
 800e51c:	498b      	ldr	r1, [pc, #556]	@ (800e74c <FW_Next+0x28c>)
 800e51e:	4618      	mov	r0, r3
 800e520:	f017 fe14 	bl	802614c <utoa>
	utoa(tempBatchNum, batchNumString, 10);
 800e524:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 800e528:	f107 010c 	add.w	r1, r7, #12
 800e52c:	220a      	movs	r2, #10
 800e52e:	4618      	mov	r0, r3
 800e530:	f017 fe0c 	bl	802614c <utoa>

	Word_Transfer( Event_Type, MQTT_FW_NEXT_EVENT);
 800e534:	4986      	ldr	r1, [pc, #536]	@ (800e750 <FW_Next+0x290>)
 800e536:	4887      	ldr	r0, [pc, #540]	@ (800e754 <FW_Next+0x294>)
 800e538:	f7f8 f8fc 	bl	8006734 <Word_Transfer>
	Clear_Memory(Data_Ptr);
 800e53c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e540:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e544:	6818      	ldr	r0, [r3, #0]
 800e546:	f7f8 f89c 	bl	8006682 <Clear_Memory>
	buf = 0;
 800e54a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e54e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e558:	461a      	mov	r2, r3
 800e55a:	2300      	movs	r3, #0
 800e55c:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800e560:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e564:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e568:	497b      	ldr	r1, [pc, #492]	@ (800e758 <FW_Next+0x298>)
 800e56a:	6818      	ldr	r0, [r3, #0]
 800e56c:	f7f8 fa06 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800e570:	4b75      	ldr	r3, [pc, #468]	@ (800e748 <FW_Next+0x288>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	220a      	movs	r2, #10
 800e576:	4975      	ldr	r1, [pc, #468]	@ (800e74c <FW_Next+0x28c>)
 800e578:	4618      	mov	r0, r3
 800e57a:	f017 fde7 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800e57e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e582:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e586:	4971      	ldr	r1, [pc, #452]	@ (800e74c <FW_Next+0x28c>)
 800e588:	6818      	ldr	r0, [r3, #0]
 800e58a:	f7f8 f9f7 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800e58e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e592:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e596:	4971      	ldr	r1, [pc, #452]	@ (800e75c <FW_Next+0x29c>)
 800e598:	6818      	ldr	r0, [r3, #0]
 800e59a:	f7f8 f9ef 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800e59e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e5a2:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e5a6:	496b      	ldr	r1, [pc, #428]	@ (800e754 <FW_Next+0x294>)
 800e5a8:	6818      	ldr	r0, [r3, #0]
 800e5aa:	f7f8 f9e7 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, TIME_STR);
 800e5ae:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e5b2:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e5b6:	496a      	ldr	r1, [pc, #424]	@ (800e760 <FW_Next+0x2a0>)
 800e5b8:	6818      	ldr	r0, [r3, #0]
 800e5ba:	f7f8 f9df 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800e5be:	f107 021c 	add.w	r2, r7, #28
 800e5c2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e5c6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e5ca:	4611      	mov	r1, r2
 800e5cc:	6818      	ldr	r0, [r3, #0]
 800e5ce:	f7f8 f9d5 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800e5d2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e5d6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e5da:	4962      	ldr	r1, [pc, #392]	@ (800e764 <FW_Next+0x2a4>)
 800e5dc:	6818      	ldr	r0, [r3, #0]
 800e5de:	f7f8 f9cd 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e5e2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e5e6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e5ea:	495f      	ldr	r1, [pc, #380]	@ (800e768 <FW_Next+0x2a8>)
 800e5ec:	6818      	ldr	r0, [r3, #0]
 800e5ee:	f7f8 f9c5 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_FW_VERSION);
 800e5f2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e5f6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e5fa:	495c      	ldr	r1, [pc, #368]	@ (800e76c <FW_Next+0x2ac>)
 800e5fc:	6818      	ldr	r0, [r3, #0]
 800e5fe:	f7f8 f9bd 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e602:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e606:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e60a:	4959      	ldr	r1, [pc, #356]	@ (800e770 <FW_Next+0x2b0>)
 800e60c:	6818      	ldr	r0, [r3, #0]
 800e60e:	f7f8 f9b5 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->otaFileName);
 800e612:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e616:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800e620:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e624:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e628:	4611      	mov	r1, r2
 800e62a:	6818      	ldr	r0, [r3, #0]
 800e62c:	f7f8 f9a6 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e630:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e634:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e638:	494d      	ldr	r1, [pc, #308]	@ (800e770 <FW_Next+0x2b0>)
 800e63a:	6818      	ldr	r0, [r3, #0]
 800e63c:	f7f8 f99e 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e640:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e644:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e648:	4947      	ldr	r1, [pc, #284]	@ (800e768 <FW_Next+0x2a8>)
 800e64a:	6818      	ldr	r0, [r3, #0]
 800e64c:	f7f8 f996 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_FILE);
 800e650:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e654:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e658:	4946      	ldr	r1, [pc, #280]	@ (800e774 <FW_Next+0x2b4>)
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	f7f8 f98e 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->fileNumberString);
 800e660:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e664:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f103 0210 	add.w	r2, r3, #16
 800e66e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e672:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e676:	4611      	mov	r1, r2
 800e678:	6818      	ldr	r0, [r3, #0]
 800e67a:	f7f8 f97f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e67e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e682:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e686:	4938      	ldr	r1, [pc, #224]	@ (800e768 <FW_Next+0x2a8>)
 800e688:	6818      	ldr	r0, [r3, #0]
 800e68a:	f7f8 f977 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_BATCH);
 800e68e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e692:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e696:	4938      	ldr	r1, [pc, #224]	@ (800e778 <FW_Next+0x2b8>)
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	f7f8 f96f 	bl	800697c <Build_MSG>
	//	Char_Replace( batchNumString, "\n", " ");
	//	Char_Replace( batchNumString, "\r", " ");
	Build_MSG(Data_Ptr, (char*)batchNumString);
 800e69e:	f107 020c 	add.w	r2, r7, #12
 800e6a2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e6a6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	6818      	ldr	r0, [r3, #0]
 800e6ae:	f7f8 f965 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_END_BRACKET);
 800e6b2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e6b6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e6ba:	4930      	ldr	r1, [pc, #192]	@ (800e77c <FW_Next+0x2bc>)
 800e6bc:	6818      	ldr	r0, [r3, #0]
 800e6be:	f7f8 f95d 	bl	800697c <Build_MSG>

	Size = buf;
 800e6c2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e6c6:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e6d0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800e6d4:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 800e6d8:	f6a2 72bc 	subw	r2, r2, #4028	@ 0xfbc
 800e6dc:	6812      	ldr	r2, [r2, #0]
 800e6de:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800e6e2:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	Refresh_Watchdog;
 800e6e6:	4826      	ldr	r0, [pc, #152]	@ (800e780 <FW_Next+0x2c0>)
 800e6e8:	f00c fd73 	bl	801b1d2 <HAL_IWDG_Refresh>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <FW_Next+0x236>
 800e6f2:	f007 f84f 	bl	8015794 <Error_Handler>

	Command = PUBLISH;
 800e6f6:	4b23      	ldr	r3, [pc, #140]	@ (800e784 <FW_Next+0x2c4>)
 800e6f8:	2210      	movs	r2, #16
 800e6fa:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e6fe:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e702:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e706:	6818      	ldr	r0, [r3, #0]
 800e708:	f000 f9b8 	bl	800ea7c <CELL_COMMAND>
	Command = PUBLISH_MEM;
 800e70c:	4b1d      	ldr	r3, [pc, #116]	@ (800e784 <FW_Next+0x2c4>)
 800e70e:	2213      	movs	r2, #19
 800e710:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e714:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e718:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e71c:	6818      	ldr	r0, [r3, #0]
 800e71e:	f000 f9ad 	bl	800ea7c <CELL_COMMAND>
	Command = CHECK;
 800e722:	4b18      	ldr	r3, [pc, #96]	@ (800e784 <FW_Next+0x2c4>)
 800e724:	2200      	movs	r2, #0
 800e726:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e72a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800e72e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 800e732:	6818      	ldr	r0, [r3, #0]
 800e734:	f000 f9a2 	bl	800ea7c <CELL_COMMAND>
}
 800e738:	bf00      	nop
 800e73a:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	0802ec64 	.word	0x0802ec64
 800e748:	0bfa0700 	.word	0x0bfa0700
 800e74c:	2007a92f 	.word	0x2007a92f
 800e750:	0802ec88 	.word	0x0802ec88
 800e754:	2007a911 	.word	0x2007a911
 800e758:	0802e934 	.word	0x0802e934
 800e75c:	0802e944 	.word	0x0802e944
 800e760:	0802eaa4 	.word	0x0802eaa4
 800e764:	0802eaa0 	.word	0x0802eaa0
 800e768:	0802e99c 	.word	0x0802e99c
 800e76c:	0802eb90 	.word	0x0802eb90
 800e770:	0802e9d0 	.word	0x0802e9d0
 800e774:	0802ec18 	.word	0x0802ec18
 800e778:	0802eca0 	.word	0x0802eca0
 800e77c:	0802eb9c 	.word	0x0802eb9c
 800e780:	2007d0bc 	.word	0x2007d0bc
 800e784:	2007a330 	.word	0x2007a330

0800e788 <FW_CRC_Ack>:

void FW_CRC_Ack(MEM_PTR *Data_Ptr, bool isGood, OTA_FILE_TYPE *OtaData)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	f5ad 6d7b 	sub.w	sp, sp, #4016	@ 0xfb0
 800e78e:	af00      	add	r7, sp, #0
 800e790:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e794:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e798:	6018      	str	r0, [r3, #0]
 800e79a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e79e:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e7a8:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800e7ac:	460a      	mov	r2, r1
 800e7ae:	701a      	strb	r2, [r3, #0]
#ifdef Log_Level_2
	Log_Single( LOG_MSG_FW_CRC_ACK);
 800e7b0:	489f      	ldr	r0, [pc, #636]	@ (800ea30 <FW_CRC_Ack+0x2a8>)
 800e7b2:	f7f8 f97b 	bl	8006aac <Log_Single>
#endif // Log_Level_2

	char timeStamp[MEMORY_MAX] = {0};
 800e7b6:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e7ba:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 800e7be:	2200      	movs	r2, #0
 800e7c0:	601a      	str	r2, [r3, #0]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	f640 729c 	movw	r2, #3996	@ 0xf9c
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f018 fcd0 	bl	8027170 <memset>
	Time_StampISO(timeStamp);
 800e7d0:	f107 0310 	add.w	r3, r7, #16
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7f8 fde1 	bl	800739c <Time_StampISO>

	Command = CHECK;
 800e7da:	4b96      	ldr	r3, [pc, #600]	@ (800ea34 <FW_CRC_Ack+0x2ac>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e7e2:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e7e6:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e7ea:	6818      	ldr	r0, [r3, #0]
 800e7ec:	f000 f946 	bl	800ea7c <CELL_COMMAND>

	Word_Transfer( Event_Type, MQTT_FW_CRC_EVENT);
 800e7f0:	4991      	ldr	r1, [pc, #580]	@ (800ea38 <FW_CRC_Ack+0x2b0>)
 800e7f2:	4892      	ldr	r0, [pc, #584]	@ (800ea3c <FW_CRC_Ack+0x2b4>)
 800e7f4:	f7f7 ff9e 	bl	8006734 <Word_Transfer>

	Clear_Memory(Data_Ptr);
 800e7f8:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e7fc:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e800:	6818      	ldr	r0, [r3, #0]
 800e802:	f7f7 ff3e 	bl	8006682 <Clear_Memory>
	buf = 0;
 800e806:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e80a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e814:	461a      	mov	r2, r3
 800e816:	2300      	movs	r3, #0
 800e818:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 800e81c:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e820:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e824:	4986      	ldr	r1, [pc, #536]	@ (800ea40 <FW_CRC_Ack+0x2b8>)
 800e826:	6818      	ldr	r0, [r3, #0]
 800e828:	f7f8 f8a8 	bl	800697c <Build_MSG>
	utoa( UNIQUE_Device_ID, Header, 10);
 800e82c:	4b85      	ldr	r3, [pc, #532]	@ (800ea44 <FW_CRC_Ack+0x2bc>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	220a      	movs	r2, #10
 800e832:	4985      	ldr	r1, [pc, #532]	@ (800ea48 <FW_CRC_Ack+0x2c0>)
 800e834:	4618      	mov	r0, r3
 800e836:	f017 fc89 	bl	802614c <utoa>
	Build_MSG(Data_Ptr, Header);
 800e83a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e83e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e842:	4981      	ldr	r1, [pc, #516]	@ (800ea48 <FW_CRC_Ack+0x2c0>)
 800e844:	6818      	ldr	r0, [r3, #0]
 800e846:	f7f8 f899 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 800e84a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e84e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e852:	497e      	ldr	r1, [pc, #504]	@ (800ea4c <FW_CRC_Ack+0x2c4>)
 800e854:	6818      	ldr	r0, [r3, #0]
 800e856:	f7f8 f891 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, Event_Type);
 800e85a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e85e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e862:	4976      	ldr	r1, [pc, #472]	@ (800ea3c <FW_CRC_Ack+0x2b4>)
 800e864:	6818      	ldr	r0, [r3, #0]
 800e866:	f7f8 f889 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, TIME_STR);
 800e86a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e86e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e872:	4977      	ldr	r1, [pc, #476]	@ (800ea50 <FW_CRC_Ack+0x2c8>)
 800e874:	6818      	ldr	r0, [r3, #0]
 800e876:	f7f8 f881 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, timeStamp);
 800e87a:	f107 0210 	add.w	r2, r7, #16
 800e87e:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e882:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e886:	4611      	mov	r1, r2
 800e888:	6818      	ldr	r0, [r3, #0]
 800e88a:	f7f8 f877 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_QUOTE);
 800e88e:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e892:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e896:	496f      	ldr	r1, [pc, #444]	@ (800ea54 <FW_CRC_Ack+0x2cc>)
 800e898:	6818      	ldr	r0, [r3, #0]
 800e89a:	f7f8 f86f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e89e:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e8a2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e8a6:	496c      	ldr	r1, [pc, #432]	@ (800ea58 <FW_CRC_Ack+0x2d0>)
 800e8a8:	6818      	ldr	r0, [r3, #0]
 800e8aa:	f7f8 f867 	bl	800697c <Build_MSG>

	Build_MSG(Data_Ptr, MQTT_FW_VERSION);
 800e8ae:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e8b2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e8b6:	4969      	ldr	r1, [pc, #420]	@ (800ea5c <FW_CRC_Ack+0x2d4>)
 800e8b8:	6818      	ldr	r0, [r3, #0]
 800e8ba:	f7f8 f85f 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e8be:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e8c2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e8c6:	4966      	ldr	r1, [pc, #408]	@ (800ea60 <FW_CRC_Ack+0x2d8>)
 800e8c8:	6818      	ldr	r0, [r3, #0]
 800e8ca:	f7f8 f857 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->otaFileName);
 800e8ce:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e8d2:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 800e8dc:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e8e0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e8e4:	4611      	mov	r1, r2
 800e8e6:	6818      	ldr	r0, [r3, #0]
 800e8e8:	f7f8 f848 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_STRI);
 800e8ec:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e8f0:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e8f4:	495a      	ldr	r1, [pc, #360]	@ (800ea60 <FW_CRC_Ack+0x2d8>)
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	f7f8 f840 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e8fc:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e900:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e904:	4954      	ldr	r1, [pc, #336]	@ (800ea58 <FW_CRC_Ack+0x2d0>)
 800e906:	6818      	ldr	r0, [r3, #0]
 800e908:	f7f8 f838 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_FILE);
 800e90c:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e910:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e914:	4953      	ldr	r1, [pc, #332]	@ (800ea64 <FW_CRC_Ack+0x2dc>)
 800e916:	6818      	ldr	r0, [r3, #0]
 800e918:	f7f8 f830 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, OtaData->fileNumberString);
 800e91c:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e920:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f103 0210 	add.w	r2, r3, #16
 800e92a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e92e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e932:	4611      	mov	r1, r2
 800e934:	6818      	ldr	r0, [r3, #0]
 800e936:	f7f8 f821 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_APND);
 800e93a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e93e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e942:	4945      	ldr	r1, [pc, #276]	@ (800ea58 <FW_CRC_Ack+0x2d0>)
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	f7f8 f819 	bl	800697c <Build_MSG>
	Build_MSG(Data_Ptr, MQTT_FW_CRC_STATUS);
 800e94a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e94e:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e952:	4945      	ldr	r1, [pc, #276]	@ (800ea68 <FW_CRC_Ack+0x2e0>)
 800e954:	6818      	ldr	r0, [r3, #0]
 800e956:	f7f8 f811 	bl	800697c <Build_MSG>
	if (isGood == true)
 800e95a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e95e:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d008      	beq.n	800e97a <FW_CRC_Ack+0x1f2>
	{
		Build_MSG(Data_Ptr, FW_CRC_OK);
 800e968:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e96c:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e970:	493e      	ldr	r1, [pc, #248]	@ (800ea6c <FW_CRC_Ack+0x2e4>)
 800e972:	6818      	ldr	r0, [r3, #0]
 800e974:	f7f8 f802 	bl	800697c <Build_MSG>
 800e978:	e011      	b.n	800e99e <FW_CRC_Ack+0x216>
	}
	else if (isGood == false)
 800e97a:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e97e:	f6a3 73a5 	subw	r3, r3, #4005	@ 0xfa5
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	f083 0301 	eor.w	r3, r3, #1
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d007      	beq.n	800e99e <FW_CRC_Ack+0x216>
	{
		Build_MSG(Data_Ptr, FW_MISMATCH);
 800e98e:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e992:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e996:	4936      	ldr	r1, [pc, #216]	@ (800ea70 <FW_CRC_Ack+0x2e8>)
 800e998:	6818      	ldr	r0, [r3, #0]
 800e99a:	f7f7 ffef 	bl	800697c <Build_MSG>
	}
	Build_MSG(Data_Ptr, MQTT_END_BRACKET);
 800e99e:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e9a2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e9a6:	4933      	ldr	r1, [pc, #204]	@ (800ea74 <FW_CRC_Ack+0x2ec>)
 800e9a8:	6818      	ldr	r0, [r3, #0]
 800e9aa:	f7f7 ffe7 	bl	800697c <Build_MSG>

	Size = buf;
 800e9ae:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e9b2:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800e9bc:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800e9c0:	f507 627b 	add.w	r2, r7, #4016	@ 0xfb0
 800e9c4:	f6a2 72a4 	subw	r2, r2, #4004	@ 0xfa4
 800e9c8:	6812      	ldr	r2, [r2, #0]
 800e9ca:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800e9ce:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	Refresh_Watchdog;
 800e9d2:	4829      	ldr	r0, [pc, #164]	@ (800ea78 <FW_CRC_Ack+0x2f0>)
 800e9d4:	f00c fbfd 	bl	801b1d2 <HAL_IWDG_Refresh>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d001      	beq.n	800e9e2 <FW_CRC_Ack+0x25a>
 800e9de:	f006 fed9 	bl	8015794 <Error_Handler>

	Command = PUBLISH;
 800e9e2:	4b14      	ldr	r3, [pc, #80]	@ (800ea34 <FW_CRC_Ack+0x2ac>)
 800e9e4:	2210      	movs	r2, #16
 800e9e6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800e9ea:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800e9ee:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800e9f2:	6818      	ldr	r0, [r3, #0]
 800e9f4:	f000 f842 	bl	800ea7c <CELL_COMMAND>
	Command = PUBLISH_MEM;
 800e9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800ea34 <FW_CRC_Ack+0x2ac>)
 800e9fa:	2213      	movs	r2, #19
 800e9fc:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ea00:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800ea04:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800ea08:	6818      	ldr	r0, [r3, #0]
 800ea0a:	f000 f837 	bl	800ea7c <CELL_COMMAND>
	Command = CHECK;
 800ea0e:	4b09      	ldr	r3, [pc, #36]	@ (800ea34 <FW_CRC_Ack+0x2ac>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
	CELL_COMMAND(Data_Ptr);
 800ea16:	f507 637b 	add.w	r3, r7, #4016	@ 0xfb0
 800ea1a:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 800ea1e:	6818      	ldr	r0, [r3, #0]
 800ea20:	f000 f82c 	bl	800ea7c <CELL_COMMAND>
}
 800ea24:	bf00      	nop
 800ea26:	f507 677b 	add.w	r7, r7, #4016	@ 0xfb0
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	0802ecac 	.word	0x0802ecac
 800ea34:	2007a330 	.word	0x2007a330
 800ea38:	0802ecc8 	.word	0x0802ecc8
 800ea3c:	2007a911 	.word	0x2007a911
 800ea40:	0802e934 	.word	0x0802e934
 800ea44:	0bfa0700 	.word	0x0bfa0700
 800ea48:	2007a92f 	.word	0x2007a92f
 800ea4c:	0802e944 	.word	0x0802e944
 800ea50:	0802eaa4 	.word	0x0802eaa4
 800ea54:	0802eaa0 	.word	0x0802eaa0
 800ea58:	0802e99c 	.word	0x0802e99c
 800ea5c:	0802eb90 	.word	0x0802eb90
 800ea60:	0802e9d0 	.word	0x0802e9d0
 800ea64:	0802ec18 	.word	0x0802ec18
 800ea68:	0802ecdc 	.word	0x0802ecdc
 800ea6c:	0802ecec 	.word	0x0802ecec
 800ea70:	0802ecf4 	.word	0x0802ecf4
 800ea74:	0802eb9c 	.word	0x0802eb9c
 800ea78:	2007d0bc 	.word	0x2007d0bc

0800ea7c <CELL_COMMAND>:
/******************************************************
 Cell Modem_Data.Command Function
 Controller for MQTT communication
 ******************************************************/
void CELL_COMMAND(MEM_PTR *Data_Ptr)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b0b6      	sub	sp, #216	@ 0xd8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
	int testSize = 300;
 800ea84:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800ea88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	char msgbuffer[200] = {""};
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	f107 0310 	add.w	r3, r7, #16
 800ea94:	22c4      	movs	r2, #196	@ 0xc4
 800ea96:	2100      	movs	r1, #0
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f018 fb69 	bl	8027170 <memset>
	if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 800ea9e:	48b5      	ldr	r0, [pc, #724]	@ (800ed74 <CELL_COMMAND+0x2f8>)
 800eaa0:	f00c fb97 	bl	801b1d2 <HAL_IWDG_Refresh>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <CELL_COMMAND+0x32>
		Error_Handler();
 800eaaa:	f006 fe73 	bl	8015794 <Error_Handler>

#ifdef Log_Level_1
	if (Setting & LOG_LEVEL_1)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800eab4:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 800eab8:	f003 0302 	and.w	r3, r3, #2
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d007      	beq.n	800ead0 <CELL_COMMAND+0x54>
	{
		Log_End( LOG_SKYWIRE, Command);
 800eac0:	4bad      	ldr	r3, [pc, #692]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800eac2:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 800eac6:	4619      	mov	r1, r3
 800eac8:	48ac      	ldr	r0, [pc, #688]	@ (800ed7c <CELL_COMMAND+0x300>)
 800eaca:	f7f8 f817 	bl	8006afc <Log_End>
 800eace:	e018      	b.n	800eb02 <CELL_COMMAND+0x86>
	}
	else if (Setting & LOG_LEVEL_1 && Setting & LOG_LEVEL_2)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ead6:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 800eada:	f003 0302 	and.w	r3, r3, #2
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00f      	beq.n	800eb02 <CELL_COMMAND+0x86>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800eae8:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <CELL_COMMAND+0x86>
	{
		Log_Insert( LOG_SKYWIRE, Command);
 800eaf4:	4ba0      	ldr	r3, [pc, #640]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800eaf6:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 800eafa:	4619      	mov	r1, r3
 800eafc:	489f      	ldr	r0, [pc, #636]	@ (800ed7c <CELL_COMMAND+0x300>)
 800eafe:	f7f7 ffe5 	bl	8006acc <Log_Insert>
	}
#endif // Log_Level_1
	Refresh_Watchdog;
 800eb02:	489c      	ldr	r0, [pc, #624]	@ (800ed74 <CELL_COMMAND+0x2f8>)
 800eb04:	f00c fb65 	bl	801b1d2 <HAL_IWDG_Refresh>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d001      	beq.n	800eb12 <CELL_COMMAND+0x96>
 800eb0e:	f006 fe41 	bl	8015794 <Error_Handler>
	switch ( Command )
 800eb12:	4b99      	ldr	r3, [pc, #612]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800eb14:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 800eb18:	2b35      	cmp	r3, #53	@ 0x35
 800eb1a:	f201 85eb 	bhi.w	80106f4 <CELL_COMMAND+0x1c78>
 800eb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb24 <CELL_COMMAND+0xa8>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800ebfd 	.word	0x0800ebfd
 800eb28:	0800ec8f 	.word	0x0800ec8f
 800eb2c:	0800ece1 	.word	0x0800ece1
 800eb30:	0800ed27 	.word	0x0800ed27
 800eb34:	0800ed99 	.word	0x0800ed99
 800eb38:	0800ef0d 	.word	0x0800ef0d
 800eb3c:	0800ef53 	.word	0x0800ef53
 800eb40:	0800efe5 	.word	0x0800efe5
 800eb44:	0800f0ad 	.word	0x0800f0ad
 800eb48:	0800f0f9 	.word	0x0800f0f9
 800eb4c:	0800f1ad 	.word	0x0800f1ad
 800eb50:	0800f1fb 	.word	0x0800f1fb
 800eb54:	0800f297 	.word	0x0800f297
 800eb58:	0800f385 	.word	0x0800f385
 800eb5c:	0800f49d 	.word	0x0800f49d
 800eb60:	0800f57b 	.word	0x0800f57b
 800eb64:	0800f69d 	.word	0x0800f69d
 800eb68:	0800f7b7 	.word	0x0800f7b7
 800eb6c:	0800f869 	.word	0x0800f869
 800eb70:	0800f8af 	.word	0x0800f8af
 800eb74:	0800fcf5 	.word	0x0800fcf5
 800eb78:	0800fd9d 	.word	0x0800fd9d
 800eb7c:	08010119 	.word	0x08010119
 800eb80:	0801016b 	.word	0x0801016b
 800eb84:	080101af 	.word	0x080101af
 800eb88:	080101fb 	.word	0x080101fb
 800eb8c:	0801047f 	.word	0x0801047f
 800eb90:	08010445 	.word	0x08010445
 800eb94:	080104f3 	.word	0x080104f3
 800eb98:	080105e1 	.word	0x080105e1
 800eb9c:	0801053f 	.word	0x0801053f
 800eba0:	0801063d 	.word	0x0801063d
 800eba4:	08010699 	.word	0x08010699
 800eba8:	0800ee7b 	.word	0x0800ee7b
 800ebac:	0800ee35 	.word	0x0800ee35
 800ebb0:	0800eec7 	.word	0x0800eec7
 800ebb4:	0800fd5b 	.word	0x0800fd5b
 800ebb8:	0800ec41 	.word	0x0800ec41
 800ebbc:	0800ec6d 	.word	0x0800ec6d
 800ebc0:	0800f9a9 	.word	0x0800f9a9
 800ebc4:	0800fa13 	.word	0x0800fa13
 800ebc8:	0800fa6f 	.word	0x0800fa6f
 800ebcc:	0800faeb 	.word	0x0800faeb
 800ebd0:	0800fb4b 	.word	0x0800fb4b
 800ebd4:	0800fbab 	.word	0x0800fbab
 800ebd8:	0800fc0b 	.word	0x0800fc0b
 800ebdc:	0800fc95 	.word	0x0800fc95
 800ebe0:	0800ef99 	.word	0x0800ef99
 800ebe4:	0800ff2f 	.word	0x0800ff2f
 800ebe8:	0800ffb1 	.word	0x0800ffb1
 800ebec:	0800fffb 	.word	0x0800fffb
 800ebf0:	080106f5 	.word	0x080106f5
 800ebf4:	08010045 	.word	0x08010045
 800ebf8:	080100af 	.word	0x080100af
	{
	case CHECK:
		Cell_State = CELL_OK;
 800ebfc:	4b5e      	ldr	r3, [pc, #376]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ec04:	495e      	ldr	r1, [pc, #376]	@ (800ed80 <CELL_COMMAND+0x304>)
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f002 f8c0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ec0c:	495d      	ldr	r1, [pc, #372]	@ (800ed84 <CELL_COMMAND+0x308>)
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f002 f8bc 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ec14:	4b58      	ldr	r3, [pc, #352]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ec16:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ec1a:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 16;	// size of OK return should always be consistent
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ec24:	461a      	mov	r2, r3
 800ec26:	2310      	movs	r3, #16
 800ec28:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f001 fd96 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CHECK_ERR);
 800ec34:	2107      	movs	r1, #7
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f001 ffd4 	bl	8010be4 <checkCellOk>

		//				Command = CONNECTION_TEST;
		//				CELL_COMMAND(Data_Ptr,CELL);

		return;
 800ec3c:	f001 bd76 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case CHECK2:
		Cell_State = CELL_OK;
 800ec40:	4b4d      	ldr	r3, [pc, #308]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
		Clear_Memory2(Data_Ptr, 400); // kcs put a real size in this call
 800ec48:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7f7 fd36 	bl	80066be <Clear_Memory2>
		receivedDataSize = CELL_READ_URC(Data_Ptr);
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f001 ff72 	bl	8010b3c <CELL_READ_URC>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	4b4a      	ldr	r3, [pc, #296]	@ (800ed88 <CELL_COMMAND+0x30c>)
 800ec5e:	801a      	strh	r2, [r3, #0]
		checkCellOk(Data_Ptr, CELL_CHECK_ERR);
 800ec60:	2107      	movs	r1, #7
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f001 ffbe 	bl	8010be4 <checkCellOk>

		return;
 800ec68:	f001 bd60 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case CHECK3:
		Cell_State = CELL_OK;
 800ec6c:	4b42      	ldr	r3, [pc, #264]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
		receivedDataSize = CELL_READ_URC(Data_Ptr);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f001 ff61 	bl	8010b3c <CELL_READ_URC>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	461a      	mov	r2, r3
 800ec7e:	4b42      	ldr	r3, [pc, #264]	@ (800ed88 <CELL_COMMAND+0x30c>)
 800ec80:	801a      	strh	r2, [r3, #0]
		checkCellOk(Data_Ptr, CELL_CHECK_ERR);
 800ec82:	2107      	movs	r1, #7
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f001 ffad 	bl	8010be4 <checkCellOk>

		return;
 800ec8a:	f001 bd4f 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case CONNECTION_TEST:
		if (Cell_State != CELL_OK)
 800ec8e:	4b3a      	ldr	r3, [pc, #232]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ec90:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f041 8532 	bne.w	80106fe <CELL_COMMAND+0x1c82>
			return;

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ec9a:	4939      	ldr	r1, [pc, #228]	@ (800ed80 <CELL_COMMAND+0x304>)
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f002 f875 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_DEVICE_QUERY);
 800eca2:	493a      	ldr	r1, [pc, #232]	@ (800ed8c <CELL_COMMAND+0x310>)
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f002 f871 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ecaa:	4936      	ldr	r1, [pc, #216]	@ (800ed84 <CELL_COMMAND+0x308>)
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f002 f86d 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ecb2:	4b31      	ldr	r3, [pc, #196]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ecb4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ecb8:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800ecc8:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800eccc:	2100      	movs	r1, #0
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f001 fd46 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CONNECTED_ERR);
 800ecd4:	2108      	movs	r1, #8
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f001 ff84 	bl	8010be4 <checkCellOk>
		break;
 800ecdc:	f001 bd26 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case DISABLEQI:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ece0:	4927      	ldr	r1, [pc, #156]	@ (800ed80 <CELL_COMMAND+0x304>)
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f002 f852 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_DEACT);
 800ece8:	4929      	ldr	r1, [pc, #164]	@ (800ed90 <CELL_COMMAND+0x314>)
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f002 f84e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ecf0:	4924      	ldr	r1, [pc, #144]	@ (800ed84 <CELL_COMMAND+0x308>)
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f002 f84a 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ecf8:	4b1f      	ldr	r3, [pc, #124]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ecfa:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ecfe:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ed08:	461a      	mov	r2, r3
 800ed0a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800ed0e:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

		CELL_MSG(Data_Ptr, false);
 800ed12:	2100      	movs	r1, #0
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f001 fd23 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PWR_ERR);
 800ed1a:	2109      	movs	r1, #9
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f001 ff61 	bl	8010be4 <checkCellOk>
		return;
 800ed22:	f001 bd03 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case REENABLEQI:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ed26:	4916      	ldr	r1, [pc, #88]	@ (800ed80 <CELL_COMMAND+0x304>)
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f002 f82f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_REACT);
 800ed2e:	4919      	ldr	r1, [pc, #100]	@ (800ed94 <CELL_COMMAND+0x318>)
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f002 f82b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ed36:	4913      	ldr	r1, [pc, #76]	@ (800ed84 <CELL_COMMAND+0x308>)
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f002 f827 	bl	8010d8c <CELL_Build_MSG>

		Timer = 3000;
 800ed3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed78 <CELL_COMMAND+0x2fc>)
 800ed40:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ed44:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ed4e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800ed58:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 16;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ed62:	2210      	movs	r2, #16
 800ed64:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f001 fe89 	bl	8010a80 <CELL_MSG5>
		return;
 800ed6e:	f001 bcdd 	b.w	801072c <CELL_COMMAND+0x1cb0>
 800ed72:	bf00      	nop
 800ed74:	2007d0bc 	.word	0x2007d0bc
 800ed78:	2007a330 	.word	0x2007a330
 800ed7c:	0802ed00 	.word	0x0802ed00
 800ed80:	0802ed14 	.word	0x0802ed14
 800ed84:	0802ed1c 	.word	0x0802ed1c
 800ed88:	2007be5c 	.word	0x2007be5c
 800ed8c:	0802ed20 	.word	0x0802ed20
 800ed90:	0802ed2c 	.word	0x0802ed2c
 800ed94:	0802ed38 	.word	0x0802ed38

	case SIGNAL:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ed98:	49b3      	ldr	r1, [pc, #716]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 fff6 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_STATUS);
 800eda0:	49b2      	ldr	r1, [pc, #712]	@ (800f06c <CELL_COMMAND+0x5f0>)
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f001 fff2 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800eda8:	49b1      	ldr	r1, [pc, #708]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f001 ffee 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800edb0:	4bb0      	ldr	r3, [pc, #704]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800edb2:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800edb6:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800edc0:	461a      	mov	r2, r3
 800edc2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800edc6:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800edca:	2100      	movs	r1, #0
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f001 fcc7 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PWR_ERR);
 800edd2:	2109      	movs	r1, #9
 800edd4:	6878      	ldr	r0, [r7, #4]
 800edd6:	f001 ff05 	bl	8010be4 <checkCellOk>

		if (Fail_Cntr--)
 800edda:	4ba6      	ldr	r3, [pc, #664]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800eddc:	f893 3677 	ldrb.w	r3, [r3, #1655]	@ 0x677
 800ede0:	1e5a      	subs	r2, r3, #1
 800ede2:	b2d1      	uxtb	r1, r2
 800ede4:	4aa3      	ldr	r2, [pc, #652]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800ede6:	f882 1677 	strb.w	r1, [r2, #1655]	@ 0x677
 800edea:	2b00      	cmp	r3, #0
 800edec:	d01c      	beq.n	800ee28 <CELL_COMMAND+0x3ac>
		{
			HAL_Delay(3000);
 800edee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800edf2:	f007 fb47 	bl	8016484 <HAL_Delay>

			Refresh_Watchdog;
 800edf6:	48a0      	ldr	r0, [pc, #640]	@ (800f078 <CELL_COMMAND+0x5fc>)
 800edf8:	f00c f9eb 	bl	801b1d2 <HAL_IWDG_Refresh>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <CELL_COMMAND+0x38a>
 800ee02:	f006 fcc7 	bl	8015794 <Error_Handler>
			if (Memory[15] == '9' && Memory[16] == '9')
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ee0c:	f893 3377 	ldrb.w	r3, [r3, #887]	@ 0x377
 800ee10:	2b39      	cmp	r3, #57	@ 0x39
 800ee12:	d109      	bne.n	800ee28 <CELL_COMMAND+0x3ac>
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ee1a:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 800ee1e:	2b39      	cmp	r3, #57	@ 0x39
 800ee20:	d102      	bne.n	800ee28 <CELL_COMMAND+0x3ac>
				CELL_COMMAND(Data_Ptr);
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f7ff fe2a 	bl	800ea7c <CELL_COMMAND>
		}
		Fail_Cntr = CSQ_MAX_FAIL;
 800ee28:	4b92      	ldr	r3, [pc, #584]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800ee2a:	220a      	movs	r2, #10
 800ee2c:	f883 2677 	strb.w	r2, [r3, #1655]	@ 0x677
		return;
 800ee30:	f001 bc7c 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case CELLID_SET:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ee34:	498c      	ldr	r1, [pc, #560]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f001 ffa8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELLID_INIT);
 800ee3c:	498f      	ldr	r1, [pc, #572]	@ (800f07c <CELL_COMMAND+0x600>)
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f001 ffa4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ee44:	498a      	ldr	r1, [pc, #552]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f001 ffa0 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ee4c:	4b89      	ldr	r3, [pc, #548]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800ee4e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ee52:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800ee62:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800ee66:	2100      	movs	r1, #0
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f001 fc79 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PWR_ERR);
 800ee6e:	2109      	movs	r1, #9
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f001 feb7 	bl	8010be4 <checkCellOk>
		return;
 800ee76:	f001 bc59 	b.w	801072c <CELL_COMMAND+0x1cb0>


	case CELLID:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ee7a:	497b      	ldr	r1, [pc, #492]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f001 ff85 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_ID);
 800ee82:	497f      	ldr	r1, [pc, #508]	@ (800f080 <CELL_COMMAND+0x604>)
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f001 ff81 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ee8a:	4979      	ldr	r1, [pc, #484]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f001 ff7d 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ee92:	4b78      	ldr	r3, [pc, #480]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800ee94:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ee98:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		//buf contains size of transmit buffer from cell_build_msg
		Size = buf;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800eea2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800eeac:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 100;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800eeb6:	2264      	movs	r2, #100	@ 0x64
 800eeb8:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG5
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f001 fddf 	bl	8010a80 <CELL_MSG5>
		return;
 800eec2:	f001 bc33 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case SIM_CHECK:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800eec6:	4968      	ldr	r1, [pc, #416]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f001 ff5f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CPIN);
 800eece:	496d      	ldr	r1, [pc, #436]	@ (800f084 <CELL_COMMAND+0x608>)
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f001 ff5b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800eed6:	4966      	ldr	r1, [pc, #408]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f001 ff57 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800eede:	4b65      	ldr	r3, [pc, #404]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800eee0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800eee4:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800eeee:	461a      	mov	r2, r3
 800eef0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800eef4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800eef8:	2100      	movs	r1, #0
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f001 fc30 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PWR_ERR);
 800ef00:	2109      	movs	r1, #9
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f001 fe6e 	bl	8010be4 <checkCellOk>
		return;
 800ef08:	f001 bc10 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case SIM_ID:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ef0c:	4956      	ldr	r1, [pc, #344]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f001 ff3c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_SIM_ID);
 800ef14:	495c      	ldr	r1, [pc, #368]	@ (800f088 <CELL_COMMAND+0x60c>)
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f001 ff38 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ef1c:	4954      	ldr	r1, [pc, #336]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	f001 ff34 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ef24:	4b53      	ldr	r3, [pc, #332]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800ef26:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ef2a:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ef34:	461a      	mov	r2, r3
 800ef36:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800ef3a:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800ef3e:	2100      	movs	r1, #0
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f001 fc0d 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PWR_ERR);
 800ef46:	2109      	movs	r1, #9
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f001 fe4b 	bl	8010be4 <checkCellOk>

		return;
 800ef4e:	f001 bbed 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case MODEM_ID:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ef52:	4945      	ldr	r1, [pc, #276]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f001 ff19 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_DEVICE_ID);
 800ef5a:	494c      	ldr	r1, [pc, #304]	@ (800f08c <CELL_COMMAND+0x610>)
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f001 ff15 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ef62:	4943      	ldr	r1, [pc, #268]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f001 ff11 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800ef6a:	4b42      	ldr	r3, [pc, #264]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800ef6c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ef70:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800ef80:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800ef84:	2100      	movs	r1, #0
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f001 fbea 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PWR_ERR);
 800ef8c:	2109      	movs	r1, #9
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f001 fe28 	bl	8010be4 <checkCellOk>

		return;
 800ef94:	f001 bbca 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case activatePDP:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800ef98:	4933      	ldr	r1, [pc, #204]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f001 fef6 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_SIM_SERVICE_ACT);
 800efa0:	493b      	ldr	r1, [pc, #236]	@ (800f090 <CELL_COMMAND+0x614>)
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f001 fef2 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800efa8:	4931      	ldr	r1, [pc, #196]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f001 feee 	bl	8010d8c <CELL_Build_MSG>

		Timer = 3000;
 800efb0:	4b30      	ldr	r3, [pc, #192]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800efb2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800efb6:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800efc0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800efca:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 18;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800efd4:	2212      	movs	r2, #18
 800efd6:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f001 fd50 	bl	8010a80 <CELL_MSG5>
		return;
 800efe0:	f001 bba4 	b.w	801072c <CELL_COMMAND+0x1cb0>
		//		CELL_MSG(Data_Ptr, false);
		//		checkCellOk(Data_Ptr, CELL_CLOSE_ERR);



		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800efe4:	4920      	ldr	r1, [pc, #128]	@ (800f068 <CELL_COMMAND+0x5ec>)
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f001 fed0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_OPEN_MSG);
 800efec:	4929      	ldr	r1, [pc, #164]	@ (800f094 <CELL_COMMAND+0x618>)
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f001 fecc 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800eff4:	4928      	ldr	r1, [pc, #160]	@ (800f098 <CELL_COMMAND+0x61c>)
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f001 fec8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800effc:	4927      	ldr	r1, [pc, #156]	@ (800f09c <CELL_COMMAND+0x620>)
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f001 fec4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f004:	4926      	ldr	r1, [pc, #152]	@ (800f0a0 <CELL_COMMAND+0x624>)
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f001 fec0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SERVER);
 800f00c:	4925      	ldr	r1, [pc, #148]	@ (800f0a4 <CELL_COMMAND+0x628>)
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f001 febc 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f014:	4922      	ldr	r1, [pc, #136]	@ (800f0a0 <CELL_COMMAND+0x624>)
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f001 feb8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f01c:	491f      	ldr	r1, [pc, #124]	@ (800f09c <CELL_COMMAND+0x620>)
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f001 feb4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_PORT);
 800f024:	4920      	ldr	r1, [pc, #128]	@ (800f0a8 <CELL_COMMAND+0x62c>)
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f001 feb0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f02c:	4910      	ldr	r1, [pc, #64]	@ (800f070 <CELL_COMMAND+0x5f4>)
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f001 feac 	bl	8010d8c <CELL_Build_MSG>

		Timer = 3000;
 800f034:	4b0f      	ldr	r3, [pc, #60]	@ (800f074 <CELL_COMMAND+0x5f8>)
 800f036:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f03a:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f044:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f04e:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 64;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f058:	2240      	movs	r2, #64	@ 0x40
 800f05a:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f001 fd0e 	bl	8010a80 <CELL_MSG5>
		//		checkCellOk(Data_Ptr, CELL_OPEN_ERR);
		return;
 800f064:	f001 bb62 	b.w	801072c <CELL_COMMAND+0x1cb0>
 800f068:	0802ed14 	.word	0x0802ed14
 800f06c:	0802ed44 	.word	0x0802ed44
 800f070:	0802ed1c 	.word	0x0802ed1c
 800f074:	2007a330 	.word	0x2007a330
 800f078:	2007d0bc 	.word	0x2007d0bc
 800f07c:	0802ed4c 	.word	0x0802ed4c
 800f080:	0802ed58 	.word	0x0802ed58
 800f084:	0802ed60 	.word	0x0802ed60
 800f088:	0802ed68 	.word	0x0802ed68
 800f08c:	0802ed70 	.word	0x0802ed70
 800f090:	0802ed78 	.word	0x0802ed78
 800f094:	0802ed84 	.word	0x0802ed84
 800f098:	0802ed90 	.word	0x0802ed90
 800f09c:	0802e99c 	.word	0x0802e99c
 800f0a0:	0802e9d0 	.word	0x0802e9d0
 800f0a4:	0802ed94 	.word	0x0802ed94
 800f0a8:	0802eda8 	.word	0x0802eda8
	case CLOSE:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f0ac:	49a3      	ldr	r1, [pc, #652]	@ (800f33c <CELL_COMMAND+0x8c0>)
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f001 fe6c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CLOSE_MSG);
 800f0b4:	49a2      	ldr	r1, [pc, #648]	@ (800f340 <CELL_COMMAND+0x8c4>)
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f001 fe68 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f0bc:	49a1      	ldr	r1, [pc, #644]	@ (800f344 <CELL_COMMAND+0x8c8>)
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f001 fe64 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f0c4:	49a0      	ldr	r1, [pc, #640]	@ (800f348 <CELL_COMMAND+0x8cc>)
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f001 fe60 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_EXTEND_TIME + UART_EXTEND_TIME;
 800f0cc:	4b9f      	ldr	r3, [pc, #636]	@ (800f34c <CELL_COMMAND+0x8d0>)
 800f0ce:	f240 52fe 	movw	r2, #1534	@ 0x5fe
 800f0d2:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 26;	//35;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f0dc:	461a      	mov	r2, r3
 800f0de:	231a      	movs	r3, #26
 800f0e0:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f001 fb3a 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CLOSE_ERR);
 800f0ec:	210b      	movs	r1, #11
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f001 fd78 	bl	8010be4 <checkCellOk>
		return;
 800f0f4:	f001 bb1a 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case CONNECT:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f0f8:	4990      	ldr	r1, [pc, #576]	@ (800f33c <CELL_COMMAND+0x8c0>)
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 fe46 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONNECT_MSG);
 800f100:	4993      	ldr	r1, [pc, #588]	@ (800f350 <CELL_COMMAND+0x8d4>)
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f001 fe42 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f108:	498e      	ldr	r1, [pc, #568]	@ (800f344 <CELL_COMMAND+0x8c8>)
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f001 fe3e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f110:	4990      	ldr	r1, [pc, #576]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f001 fe3a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f118:	498f      	ldr	r1, [pc, #572]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f001 fe36 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_ID);
 800f120:	498e      	ldr	r1, [pc, #568]	@ (800f35c <CELL_COMMAND+0x8e0>)
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f001 fe32 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f128:	498b      	ldr	r1, [pc, #556]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f001 fe2e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f130:	4988      	ldr	r1, [pc, #544]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f001 fe2a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f138:	4987      	ldr	r1, [pc, #540]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f001 fe26 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Username);
 800f140:	4987      	ldr	r1, [pc, #540]	@ (800f360 <CELL_COMMAND+0x8e4>)
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f001 fe22 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f148:	4983      	ldr	r1, [pc, #524]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f001 fe1e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f150:	4980      	ldr	r1, [pc, #512]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f001 fe1a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f158:	497f      	ldr	r1, [pc, #508]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f001 fe16 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Password);
 800f160:	4980      	ldr	r1, [pc, #512]	@ (800f364 <CELL_COMMAND+0x8e8>)
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f001 fe12 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f168:	497b      	ldr	r1, [pc, #492]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f001 fe0e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f170:	4975      	ldr	r1, [pc, #468]	@ (800f348 <CELL_COMMAND+0x8cc>)
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f001 fe0a 	bl	8010d8c <CELL_Build_MSG>

		Timer = 3000;
 800f178:	4b74      	ldr	r3, [pc, #464]	@ (800f34c <CELL_COMMAND+0x8d0>)
 800f17a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f17e:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f188:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f192:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 120;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f19c:	2278      	movs	r2, #120	@ 0x78
 800f19e:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f001 fc6c 	bl	8010a80 <CELL_MSG5>
		return;
 800f1a8:	f001 bac0 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case DISCONNECT:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f1ac:	4963      	ldr	r1, [pc, #396]	@ (800f33c <CELL_COMMAND+0x8c0>)
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f001 fdec 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_DISCONNECT_MSG);
 800f1b4:	496c      	ldr	r1, [pc, #432]	@ (800f368 <CELL_COMMAND+0x8ec>)
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f001 fde8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f1bc:	4961      	ldr	r1, [pc, #388]	@ (800f344 <CELL_COMMAND+0x8c8>)
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f001 fde4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f1c4:	4960      	ldr	r1, [pc, #384]	@ (800f348 <CELL_COMMAND+0x8cc>)
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f001 fde0 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_EXTEND_TIME + UART_EXTEND_TIME + UART_EXTEND_TIME;
 800f1cc:	4b5f      	ldr	r3, [pc, #380]	@ (800f34c <CELL_COMMAND+0x8d0>)
 800f1ce:	f640 02fd 	movw	r2, #2301	@ 0x8fd
 800f1d2:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f1dc:	461a      	mov	r2, r3
 800f1de:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800f1e2:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f001 fab9 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_DISCONNECT_ERR);
 800f1ee:	210d      	movs	r1, #13
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f001 fcf7 	bl	8010be4 <checkCellOk>
		return;
 800f1f6:	f001 ba99 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case SUBSCRIBEUP:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f1fa:	4950      	ldr	r1, [pc, #320]	@ (800f33c <CELL_COMMAND+0x8c0>)
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f001 fdc5 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SUBSCRIBE_MSG);
 800f202:	495a      	ldr	r1, [pc, #360]	@ (800f36c <CELL_COMMAND+0x8f0>)
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 fdc1 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f20a:	494e      	ldr	r1, [pc, #312]	@ (800f344 <CELL_COMMAND+0x8c8>)
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f001 fdbd 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f212:	4950      	ldr	r1, [pc, #320]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f001 fdb9 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Message_ID);
 800f21a:	4955      	ldr	r1, [pc, #340]	@ (800f370 <CELL_COMMAND+0x8f4>)
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f001 fdb5 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f222:	494c      	ldr	r1, [pc, #304]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f001 fdb1 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f22a:	494b      	ldr	r1, [pc, #300]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f001 fdad 	bl	8010d8c <CELL_Build_MSG>
		//		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK);
		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK_X);
 800f232:	4950      	ldr	r1, [pc, #320]	@ (800f374 <CELL_COMMAND+0x8f8>)
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f001 fda9 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_ID);
 800f23a:	4948      	ldr	r1, [pc, #288]	@ (800f35c <CELL_COMMAND+0x8e0>)
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 fda5 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK_Z);
 800f242:	494d      	ldr	r1, [pc, #308]	@ (800f378 <CELL_COMMAND+0x8fc>)
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f001 fda1 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f24a:	4943      	ldr	r1, [pc, #268]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f001 fd9d 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f252:	4940      	ldr	r1, [pc, #256]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f001 fd99 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_QOS);
 800f25a:	4948      	ldr	r1, [pc, #288]	@ (800f37c <CELL_COMMAND+0x900>)
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f001 fd95 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f262:	4939      	ldr	r1, [pc, #228]	@ (800f348 <CELL_COMMAND+0x8cc>)
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f001 fd91 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_EXTEND_TIME;
 800f26a:	4b38      	ldr	r3, [pc, #224]	@ (800f34c <CELL_COMMAND+0x8d0>)
 800f26c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f270:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 65;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f27a:	461a      	mov	r2, r3
 800f27c:	2341      	movs	r3, #65	@ 0x41
 800f27e:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f282:	2100      	movs	r1, #0
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f001 fa6b 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_SUBSCRIBE_ERR);
 800f28a:	210e      	movs	r1, #14
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f001 fca9 	bl	8010be4 <checkCellOk>

		return;
 800f292:	f001 ba4b 	b.w	801072c <CELL_COMMAND+0x1cb0>

	case SUBSCRIBEDOWN:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f296:	4929      	ldr	r1, [pc, #164]	@ (800f33c <CELL_COMMAND+0x8c0>)
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f001 fd77 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SUBSCRIBE_MSG);
 800f29e:	4933      	ldr	r1, [pc, #204]	@ (800f36c <CELL_COMMAND+0x8f0>)
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f001 fd73 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f2a6:	4927      	ldr	r1, [pc, #156]	@ (800f344 <CELL_COMMAND+0x8c8>)
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f001 fd6f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f2ae:	4929      	ldr	r1, [pc, #164]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f001 fd6b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Message_ID);
 800f2b6:	492e      	ldr	r1, [pc, #184]	@ (800f370 <CELL_COMMAND+0x8f4>)
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f001 fd67 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f2be:	4925      	ldr	r1, [pc, #148]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f001 fd63 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f2c6:	4924      	ldr	r1, [pc, #144]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f001 fd5f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_DOWNLINK_X);
 800f2ce:	4929      	ldr	r1, [pc, #164]	@ (800f374 <CELL_COMMAND+0x8f8>)
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 fd5b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_ID);
 800f2d6:	4921      	ldr	r1, [pc, #132]	@ (800f35c <CELL_COMMAND+0x8e0>)
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	f001 fd57 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_DOWNLINK_Z);
 800f2de:	4928      	ldr	r1, [pc, #160]	@ (800f380 <CELL_COMMAND+0x904>)
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f001 fd53 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f2e6:	491c      	ldr	r1, [pc, #112]	@ (800f358 <CELL_COMMAND+0x8dc>)
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f001 fd4f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f2ee:	4919      	ldr	r1, [pc, #100]	@ (800f354 <CELL_COMMAND+0x8d8>)
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f001 fd4b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_QOS);
 800f2f6:	4921      	ldr	r1, [pc, #132]	@ (800f37c <CELL_COMMAND+0x900>)
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f001 fd47 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f2fe:	4912      	ldr	r1, [pc, #72]	@ (800f348 <CELL_COMMAND+0x8cc>)
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f001 fd43 	bl	8010d8c <CELL_Build_MSG>

		Timer = 3000;
 800f306:	4b11      	ldr	r3, [pc, #68]	@ (800f34c <CELL_COMMAND+0x8d0>)
 800f308:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f30c:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f316:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f320:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 86;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f32a:	2256      	movs	r2, #86	@ 0x56
 800f32c:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f001 fba5 	bl	8010a80 <CELL_MSG5>

		//		Command = CHECK;
		//		CELL_COMMAND(Data_Ptr);

		return;
 800f336:	f001 b9f9 	b.w	801072c <CELL_COMMAND+0x1cb0>
 800f33a:	bf00      	nop
 800f33c:	0802ed14 	.word	0x0802ed14
 800f340:	0802edb0 	.word	0x0802edb0
 800f344:	0802ed90 	.word	0x0802ed90
 800f348:	0802ed1c 	.word	0x0802ed1c
 800f34c:	2007a330 	.word	0x2007a330
 800f350:	0802edbc 	.word	0x0802edbc
 800f354:	0802e99c 	.word	0x0802e99c
 800f358:	0802e9d0 	.word	0x0802e9d0
 800f35c:	2007a368 	.word	0x2007a368
 800f360:	2007a8c7 	.word	0x2007a8c7
 800f364:	2007a8ea 	.word	0x2007a8ea
 800f368:	0802edc8 	.word	0x0802edc8
 800f36c:	0802edd4 	.word	0x0802edd4
 800f370:	2007a8a9 	.word	0x2007a8a9
 800f374:	0802ede0 	.word	0x0802ede0
 800f378:	0802edf8 	.word	0x0802edf8
 800f37c:	0802e840 	.word	0x0802e840
 800f380:	0802ee04 	.word	0x0802ee04

	case UNSUBSCRIBE:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f384:	49b4      	ldr	r1, [pc, #720]	@ (800f658 <CELL_COMMAND+0xbdc>)
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f001 fd00 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_UNSUBSCRIBE_MSG);
 800f38c:	49b3      	ldr	r1, [pc, #716]	@ (800f65c <CELL_COMMAND+0xbe0>)
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f001 fcfc 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f394:	49b2      	ldr	r1, [pc, #712]	@ (800f660 <CELL_COMMAND+0xbe4>)
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f001 fcf8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f39c:	49b1      	ldr	r1, [pc, #708]	@ (800f664 <CELL_COMMAND+0xbe8>)
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f001 fcf4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Message_ID);
 800f3a4:	49b0      	ldr	r1, [pc, #704]	@ (800f668 <CELL_COMMAND+0xbec>)
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f001 fcf0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f3ac:	49ad      	ldr	r1, [pc, #692]	@ (800f664 <CELL_COMMAND+0xbe8>)
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f001 fcec 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f3b4:	49ad      	ldr	r1, [pc, #692]	@ (800f66c <CELL_COMMAND+0xbf0>)
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f001 fce8 	bl	8010d8c <CELL_Build_MSG>
		//		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK);
		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK_X);
 800f3bc:	49ac      	ldr	r1, [pc, #688]	@ (800f670 <CELL_COMMAND+0xbf4>)
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f001 fce4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_ID);
 800f3c4:	49ab      	ldr	r1, [pc, #684]	@ (800f674 <CELL_COMMAND+0xbf8>)
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f001 fce0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK_Z);
 800f3cc:	49aa      	ldr	r1, [pc, #680]	@ (800f678 <CELL_COMMAND+0xbfc>)
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f001 fcdc 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f3d4:	49a5      	ldr	r1, [pc, #660]	@ (800f66c <CELL_COMMAND+0xbf0>)
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f001 fcd8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f3dc:	49a7      	ldr	r1, [pc, #668]	@ (800f67c <CELL_COMMAND+0xc00>)
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f001 fcd4 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_EXTEND_TIME;
 800f3e4:	4ba6      	ldr	r3, [pc, #664]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f3e6:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f3ea:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800f3fa:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f3fe:	2100      	movs	r1, #0
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f001 f9ad 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_UNSUBSCRIBE_ERR);
 800f406:	210f      	movs	r1, #15
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f001 fbeb 	bl	8010be4 <checkCellOk>

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f40e:	4992      	ldr	r1, [pc, #584]	@ (800f658 <CELL_COMMAND+0xbdc>)
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f001 fcbb 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_UNSUBSCRIBE_MSG);
 800f416:	4991      	ldr	r1, [pc, #580]	@ (800f65c <CELL_COMMAND+0xbe0>)
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f001 fcb7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f41e:	4990      	ldr	r1, [pc, #576]	@ (800f660 <CELL_COMMAND+0xbe4>)
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f001 fcb3 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f426:	498f      	ldr	r1, [pc, #572]	@ (800f664 <CELL_COMMAND+0xbe8>)
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f001 fcaf 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Message_ID);
 800f42e:	498e      	ldr	r1, [pc, #568]	@ (800f668 <CELL_COMMAND+0xbec>)
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f001 fcab 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f436:	498b      	ldr	r1, [pc, #556]	@ (800f664 <CELL_COMMAND+0xbe8>)
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f001 fca7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f43e:	498b      	ldr	r1, [pc, #556]	@ (800f66c <CELL_COMMAND+0xbf0>)
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f001 fca3 	bl	8010d8c <CELL_Build_MSG>
		//		CELL_Build_MSG(Data_Ptr, MQTT_DOWNLINK);
		CELL_Build_MSG(Data_Ptr, MQTT_DOWNLINK_X);
 800f446:	498a      	ldr	r1, [pc, #552]	@ (800f670 <CELL_COMMAND+0xbf4>)
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f001 fc9f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_ID);
 800f44e:	4989      	ldr	r1, [pc, #548]	@ (800f674 <CELL_COMMAND+0xbf8>)
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f001 fc9b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_DOWNLINK_Z);
 800f456:	498b      	ldr	r1, [pc, #556]	@ (800f684 <CELL_COMMAND+0xc08>)
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f001 fc97 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f45e:	4983      	ldr	r1, [pc, #524]	@ (800f66c <CELL_COMMAND+0xbf0>)
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f001 fc93 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f466:	4985      	ldr	r1, [pc, #532]	@ (800f67c <CELL_COMMAND+0xc00>)
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f001 fc8f 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_EXTEND_TIME;
 800f46e:	4b84      	ldr	r3, [pc, #528]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f470:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f474:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f47e:	461a      	mov	r2, r3
 800f480:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800f484:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f488:	2100      	movs	r1, #0
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f001 f968 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_UNSUBSCRIBE_ERR);
 800f490:	210f      	movs	r1, #15
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f001 fba6 	bl	8010be4 <checkCellOk>

		return;
 800f498:	f001 b948 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case HTTP_URL_UPDT_POST:
		Clear_Memory(Data_Ptr);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7f7 f8f0 	bl	8006682 <Clear_Memory>
		buf = 0;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

		Build_MSG(Data_Ptr, HTTP_URL_POST);
 800f4b0:	4975      	ldr	r1, [pc, #468]	@ (800f688 <CELL_COMMAND+0xc0c>)
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7f7 fa62 	bl	800697c <Build_MSG>
		Size = buf;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f4be:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f4c8:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		utoa( buf, TX_Size, 10);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f4d2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f4d6:	220a      	movs	r2, #10
 800f4d8:	496c      	ldr	r1, [pc, #432]	@ (800f68c <CELL_COMMAND+0xc10>)
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f016 fe36 	bl	802614c <utoa>

		CELL_Build_MSG(Data_Ptr, HTTP_HEAD);
 800f4e0:	495d      	ldr	r1, [pc, #372]	@ (800f658 <CELL_COMMAND+0xbdc>)
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f001 fc52 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_URL);
 800f4e8:	4969      	ldr	r1, [pc, #420]	@ (800f690 <CELL_COMMAND+0xc14>)
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f001 fc4e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, TX_Size);
 800f4f0:	4966      	ldr	r1, [pc, #408]	@ (800f68c <CELL_COMMAND+0xc10>)
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f001 fc4a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_PUBLISH_TIME);
 800f4f8:	4966      	ldr	r1, [pc, #408]	@ (800f694 <CELL_COMMAND+0xc18>)
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f001 fc46 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_TAIL);
 800f500:	495e      	ldr	r1, [pc, #376]	@ (800f67c <CELL_COMMAND+0xc00>)
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f001 fc42 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800f508:	4b5d      	ldr	r3, [pc, #372]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f50a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f50e:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f518:	461a      	mov	r2, r3
 800f51a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800f51e:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f522:	2100      	movs	r1, #0
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f001 f91b 	bl	8010760 <CELL_MSG>

		Clear_Memory(Data_Ptr);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7f7 f8a9 	bl	8006682 <Clear_Memory>
		buf = 0;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f536:	461a      	mov	r2, r3
 800f538:	2300      	movs	r3, #0
 800f53a:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

		Build_MSG(Data_Ptr, HTTP_URL_POST);
 800f53e:	4952      	ldr	r1, [pc, #328]	@ (800f688 <CELL_COMMAND+0xc0c>)
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7f7 fa1b 	bl	800697c <Build_MSG>
		Size = buf;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f54c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f550:	687a      	ldr	r2, [r7, #4]
 800f552:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f556:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

		Command = PUBLISH_MEM;
 800f55a:	4b49      	ldr	r3, [pc, #292]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f55c:	2213      	movs	r2, #19
 800f55e:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff fa8a 	bl	800ea7c <CELL_COMMAND>
		Command = CHECK;
 800f568:	4b45      	ldr	r3, [pc, #276]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7ff fa83 	bl	800ea7c <CELL_COMMAND>
		return;
 800f576:	f001 b8d9 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case HTTP_URL_UPDT_REQ:
		Clear_Memory(Data_Ptr);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7f7 f881 	bl	8006682 <Clear_Memory>
		buf = 0;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f586:	461a      	mov	r2, r3
 800f588:	2300      	movs	r3, #0
 800f58a:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

		Build_MSG(Data_Ptr, HTTP_URL_REQ);
 800f58e:	4942      	ldr	r1, [pc, #264]	@ (800f698 <CELL_COMMAND+0xc1c>)
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7f7 f9f3 	bl	800697c <Build_MSG>
		Size = buf;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f59c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f5a6:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		utoa( buf, TX_Size, 10);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f5b0:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f5b4:	220a      	movs	r2, #10
 800f5b6:	4935      	ldr	r1, [pc, #212]	@ (800f68c <CELL_COMMAND+0xc10>)
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f016 fdc7 	bl	802614c <utoa>

		CELL_Build_MSG(Data_Ptr, HTTP_HEAD);
 800f5be:	4926      	ldr	r1, [pc, #152]	@ (800f658 <CELL_COMMAND+0xbdc>)
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f001 fbe3 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_URL);
 800f5c6:	4932      	ldr	r1, [pc, #200]	@ (800f690 <CELL_COMMAND+0xc14>)
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f001 fbdf 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, TX_Size);
 800f5ce:	492f      	ldr	r1, [pc, #188]	@ (800f68c <CELL_COMMAND+0xc10>)
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f001 fbdb 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_PUBLISH_TIME);
 800f5d6:	492f      	ldr	r1, [pc, #188]	@ (800f694 <CELL_COMMAND+0xc18>)
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f001 fbd7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_TAIL);
 800f5de:	4927      	ldr	r1, [pc, #156]	@ (800f67c <CELL_COMMAND+0xc00>)
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f001 fbd3 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800f5e6:	4b26      	ldr	r3, [pc, #152]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f5e8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f5ec:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800f5fc:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f600:	2100      	movs	r1, #0
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f001 f8ac 	bl	8010760 <CELL_MSG>

		Clear_Memory(Data_Ptr);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7f7 f83a 	bl	8006682 <Clear_Memory>
		buf = 0;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f614:	461a      	mov	r2, r3
 800f616:	2300      	movs	r3, #0
 800f618:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

		Build_MSG(Data_Ptr, HTTP_URL_POST);
 800f61c:	491a      	ldr	r1, [pc, #104]	@ (800f688 <CELL_COMMAND+0xc0c>)
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7f7 f9ac 	bl	800697c <Build_MSG>
		Size = buf;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f62a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800f634:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

		Command = PUBLISH_MEM;
 800f638:	4b11      	ldr	r3, [pc, #68]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f63a:	2213      	movs	r2, #19
 800f63c:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7ff fa1b 	bl	800ea7c <CELL_COMMAND>
		Command = CHECK;
 800f646:	4b0e      	ldr	r3, [pc, #56]	@ (800f680 <CELL_COMMAND+0xc04>)
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff fa14 	bl	800ea7c <CELL_COMMAND>
		return;
 800f654:	f001 b86a 	b.w	801072c <CELL_COMMAND+0x1cb0>
 800f658:	0802ed14 	.word	0x0802ed14
 800f65c:	0802ee10 	.word	0x0802ee10
 800f660:	0802ed90 	.word	0x0802ed90
 800f664:	0802e99c 	.word	0x0802e99c
 800f668:	2007a8a9 	.word	0x2007a8a9
 800f66c:	0802e9d0 	.word	0x0802e9d0
 800f670:	0802ede0 	.word	0x0802ede0
 800f674:	2007a368 	.word	0x2007a368
 800f678:	0802edf8 	.word	0x0802edf8
 800f67c:	0802ed1c 	.word	0x0802ed1c
 800f680:	2007a330 	.word	0x2007a330
 800f684:	0802ee04 	.word	0x0802ee04
 800f688:	0802ee1c 	.word	0x0802ee1c
 800f68c:	2007a90d 	.word	0x2007a90d
 800f690:	0802ee4c 	.word	0x0802ee4c
 800f694:	0802ee58 	.word	0x0802ee58
 800f698:	0802ee60 	.word	0x0802ee60
	case PUBLISH:
		utoa( Size, TX_Size, 10);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f6a2:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800f6a6:	220a      	movs	r2, #10
 800f6a8:	49a8      	ldr	r1, [pc, #672]	@ (800f94c <CELL_COMMAND+0xed0>)
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f016 fd4e 	bl	802614c <utoa>
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f6b0:	49a7      	ldr	r1, [pc, #668]	@ (800f950 <CELL_COMMAND+0xed4>)
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f001 fb6a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_PUBLISH_MSG);
 800f6b8:	49a6      	ldr	r1, [pc, #664]	@ (800f954 <CELL_COMMAND+0xed8>)
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f001 fb66 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800f6c0:	49a5      	ldr	r1, [pc, #660]	@ (800f958 <CELL_COMMAND+0xedc>)
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f001 fb62 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f6c8:	49a4      	ldr	r1, [pc, #656]	@ (800f95c <CELL_COMMAND+0xee0>)
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f001 fb5e 	bl	8010d8c <CELL_Build_MSG>

		utoa( dummy++, Message_ID, 10); // make number unfixed
 800f6d0:	4ba3      	ldr	r3, [pc, #652]	@ (800f960 <CELL_COMMAND+0xee4>)
 800f6d2:	781b      	ldrb	r3, [r3, #0]
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	b2d1      	uxtb	r1, r2
 800f6d8:	4aa1      	ldr	r2, [pc, #644]	@ (800f960 <CELL_COMMAND+0xee4>)
 800f6da:	7011      	strb	r1, [r2, #0]
 800f6dc:	220a      	movs	r2, #10
 800f6de:	49a1      	ldr	r1, [pc, #644]	@ (800f964 <CELL_COMMAND+0xee8>)
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f016 fd33 	bl	802614c <utoa>

		CELL_Build_MSG(Data_Ptr, Message_ID);	// increment msg id here
 800f6e6:	499f      	ldr	r1, [pc, #636]	@ (800f964 <CELL_COMMAND+0xee8>)
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f001 fb4f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f6ee:	499b      	ldr	r1, [pc, #620]	@ (800f95c <CELL_COMMAND+0xee0>)
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f001 fb4b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_QOS);
 800f6f6:	499c      	ldr	r1, [pc, #624]	@ (800f968 <CELL_COMMAND+0xeec>)
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f001 fb47 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f6fe:	4997      	ldr	r1, [pc, #604]	@ (800f95c <CELL_COMMAND+0xee0>)
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	f001 fb43 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_RETAIN);
 800f706:	4994      	ldr	r1, [pc, #592]	@ (800f958 <CELL_COMMAND+0xedc>)
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f001 fb3f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f70e:	4993      	ldr	r1, [pc, #588]	@ (800f95c <CELL_COMMAND+0xee0>)
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f001 fb3b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f716:	4995      	ldr	r1, [pc, #596]	@ (800f96c <CELL_COMMAND+0xef0>)
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f001 fb37 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK_X);
 800f71e:	4994      	ldr	r1, [pc, #592]	@ (800f970 <CELL_COMMAND+0xef4>)
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f001 fb33 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_ID);
 800f726:	4993      	ldr	r1, [pc, #588]	@ (800f974 <CELL_COMMAND+0xef8>)
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f001 fb2f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_UPLINK_Z);
 800f72e:	4992      	ldr	r1, [pc, #584]	@ (800f978 <CELL_COMMAND+0xefc>)
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f001 fb2b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 800f736:	498d      	ldr	r1, [pc, #564]	@ (800f96c <CELL_COMMAND+0xef0>)
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f001 fb27 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_APND);
 800f73e:	4987      	ldr	r1, [pc, #540]	@ (800f95c <CELL_COMMAND+0xee0>)
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f001 fb23 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, TX_Size);
 800f746:	4981      	ldr	r1, [pc, #516]	@ (800f94c <CELL_COMMAND+0xed0>)
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f001 fb1f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f74e:	498b      	ldr	r1, [pc, #556]	@ (800f97c <CELL_COMMAND+0xf00>)
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f001 fb1b 	bl	8010d8c <CELL_Build_MSG>

		HAL_UART_AbortReceive(&hlpuart1);
 800f756:	488a      	ldr	r0, [pc, #552]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f758:	f013 fb20 	bl	8022d9c <HAL_UART_AbortReceive>

		Timer = UART_WAIT_TIME;
 800f75c:	4b89      	ldr	r3, [pc, #548]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f75e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f762:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		if (HAL_UART_Transmit(&hlpuart1, TX_Command, buf, Timer) != HAL_OK)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f76c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f770:	b29a      	uxth	r2, r3
 800f772:	4b84      	ldr	r3, [pc, #528]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f774:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800f778:	4983      	ldr	r1, [pc, #524]	@ (800f988 <CELL_COMMAND+0xf0c>)
 800f77a:	4881      	ldr	r0, [pc, #516]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f77c:	f013 f86f 	bl	802285e <HAL_UART_Transmit>
 800f780:	4603      	mov	r3, r0
 800f782:	2b00      	cmp	r3, #0
 800f784:	d005      	beq.n	800f792 <CELL_COMMAND+0xd16>
		{
			Cell_State = CELL_TX_CMD_ERR;
 800f786:	4b7f      	ldr	r3, [pc, #508]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f788:	2204      	movs	r2, #4
 800f78a:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			return;
 800f78e:	f000 bfcd 	b.w	801072c <CELL_COMMAND+0x1cb0>
		}

		while (1)
		{
			//HAL_Delay ( 3 );
			if (HAL_UART_Receive(&hlpuart1, TX_Command, 1, Timer) == HAL_OK)
 800f792:	4b7c      	ldr	r3, [pc, #496]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f794:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800f798:	2201      	movs	r2, #1
 800f79a:	497b      	ldr	r1, [pc, #492]	@ (800f988 <CELL_COMMAND+0xf0c>)
 800f79c:	4878      	ldr	r0, [pc, #480]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f79e:	f013 f8fc 	bl	802299a <HAL_UART_Receive>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d000      	beq.n	800f7aa <CELL_COMMAND+0xd2e>
 800f7a8:	e7f3      	b.n	800f792 <CELL_COMMAND+0xd16>
			{
				break;
 800f7aa:	bf00      	nop
			}
		}
		//HAL_Delay ( 3 );

		Log_Single( LOG_MSG_PUBLISH);
 800f7ac:	4877      	ldr	r0, [pc, #476]	@ (800f98c <CELL_COMMAND+0xf10>)
 800f7ae:	f7f7 f97d 	bl	8006aac <Log_Single>
		return;
 800f7b2:	f000 bfbb 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case PUBLISH_HTTP:
		CELL_Build_MSG(Data_Ptr, HTTP_HEAD);
 800f7b6:	4966      	ldr	r1, [pc, #408]	@ (800f950 <CELL_COMMAND+0xed4>)
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f001 fae7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_PUBLISH_CMD_MSG);
 800f7be:	4974      	ldr	r1, [pc, #464]	@ (800f990 <CELL_COMMAND+0xf14>)
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f001 fae3 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, TX_Size);
 800f7c6:	4961      	ldr	r1, [pc, #388]	@ (800f94c <CELL_COMMAND+0xed0>)
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f001 fadf 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_PUBLISH_TIME);
 800f7ce:	4971      	ldr	r1, [pc, #452]	@ (800f994 <CELL_COMMAND+0xf18>)
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f001 fadb 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_PUBLISH_TIME);
 800f7d6:	496f      	ldr	r1, [pc, #444]	@ (800f994 <CELL_COMMAND+0xf18>)
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f001 fad7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, HTTP_TAIL);
 800f7de:	4967      	ldr	r1, [pc, #412]	@ (800f97c <CELL_COMMAND+0xf00>)
 800f7e0:	6878      	ldr	r0, [r7, #4]
 800f7e2:	f001 fad3 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800f7e6:	4b67      	ldr	r3, [pc, #412]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f7e8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f7ec:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		//			Size = UART_MAX_SIZE;
		if (HAL_UART_Transmit(&hlpuart1, TX_Command, buf, Timer) != HAL_OK)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f7f6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	4b61      	ldr	r3, [pc, #388]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f7fe:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800f802:	4961      	ldr	r1, [pc, #388]	@ (800f988 <CELL_COMMAND+0xf0c>)
 800f804:	485e      	ldr	r0, [pc, #376]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f806:	f013 f82a 	bl	802285e <HAL_UART_Transmit>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d007      	beq.n	800f820 <CELL_COMMAND+0xda4>
		{
			Cell_State = CELL_TX_CMD_ERR;
 800f810:	4b5c      	ldr	r3, [pc, #368]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f812:	2204      	movs	r2, #4
 800f814:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			checkCellOk(Data_Ptr, CELL_PUBLISH_CMD_ERR);
 800f818:	2111      	movs	r1, #17
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f001 f9e2 	bl	8010be4 <checkCellOk>
		}

		Cell_State = CELL_OK;
 800f820:	4b58      	ldr	r3, [pc, #352]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f822:	2200      	movs	r2, #0
 800f824:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

#ifdef Log_Level_1
		if (Setting & LOG_LEVEL_1 && Setting & LOG_LEVEL_2)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f82e:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 800f832:	f003 0302 	and.w	r3, r3, #2
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 8763 	beq.w	8010702 <CELL_COMMAND+0x1c86>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f842:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 800f846:	f003 0304 	and.w	r3, r3, #4
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 8759 	beq.w	8010702 <CELL_COMMAND+0x1c86>
		{
			Write_Log( LOG_SUCCESS);
 800f850:	4851      	ldr	r0, [pc, #324]	@ (800f998 <CELL_COMMAND+0xf1c>)
 800f852:	f7f7 f96b 	bl	8006b2c <Write_Log>
			Log_End( LOG_STATE_RESULT, Cell_State);
 800f856:	4b4b      	ldr	r3, [pc, #300]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f858:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 800f85c:	4619      	mov	r1, r3
 800f85e:	484f      	ldr	r0, [pc, #316]	@ (800f99c <CELL_COMMAND+0xf20>)
 800f860:	f7f7 f94c 	bl	8006afc <Log_End>
		}
#endif // Log_Level_1
		return;
 800f864:	f000 bf4d 	b.w	8010702 <CELL_COMMAND+0x1c86>
	case PUBLISH_MQTT_CMD:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f868:	4939      	ldr	r1, [pc, #228]	@ (800f950 <CELL_COMMAND+0xed4>)
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f001 fa8e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_PUBLISH_CMD_MSG);
 800f870:	494b      	ldr	r1, [pc, #300]	@ (800f9a0 <CELL_COMMAND+0xf24>)
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f001 fa8a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f878:	4940      	ldr	r1, [pc, #256]	@ (800f97c <CELL_COMMAND+0xf00>)
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f001 fa86 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800f880:	4b40      	ldr	r3, [pc, #256]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f882:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f886:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f890:	461a      	mov	r2, r3
 800f892:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800f896:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800f89a:	2100      	movs	r1, #0
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 ff5f 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_PUBLISH_CMD_ERR);
 800f8a2:	2111      	movs	r1, #17
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f001 f99d 	bl	8010be4 <checkCellOk>
		return;
 800f8aa:	f000 bf3f 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case PUBLISH_MEM:
		HAL_UART_AbortReceive(&hlpuart1);
 800f8ae:	4834      	ldr	r0, [pc, #208]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f8b0:	f013 fa74 	bl	8022d9c <HAL_UART_AbortReceive>
		if (HAL_UART_Transmit(&hlpuart1, Memory, Size, Timer) != HAL_OK)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f503 3174 	add.w	r1, r3, #249856	@ 0x3d000
 800f8ba:	f501 715a 	add.w	r1, r1, #872	@ 0x368
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f8c4:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	4b2e      	ldr	r3, [pc, #184]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f8cc:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800f8d0:	482b      	ldr	r0, [pc, #172]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f8d2:	f012 ffc4 	bl	802285e <HAL_UART_Transmit>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d005      	beq.n	800f8e8 <CELL_COMMAND+0xe6c>
		{
			Cell_State = CELL_TX_CMD_ERR;
 800f8dc:	4b29      	ldr	r3, [pc, #164]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f8de:	2204      	movs	r2, #4
 800f8e0:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			return;
 800f8e4:	f000 bf22 	b.w	801072c <CELL_COMMAND+0x1cb0>
		}

#ifdef SKYWIRE_MODEM_OUT
		Write_Log( LOG_MSG_DATA);
 800f8e8:	482e      	ldr	r0, [pc, #184]	@ (800f9a4 <CELL_COMMAND+0xf28>)
 800f8ea:	f7f7 f91f 	bl	8006b2c <Write_Log>
		Log_Single((char*) Memory);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f8f4:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f7 f8d7 	bl	8006aac <Log_Single>
#endif // SKYWIRE_MODEM_OUT

		Size = 255;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f904:	461a      	mov	r2, r3
 800f906:	23ff      	movs	r3, #255	@ 0xff
 800f908:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Timer = UART_WAIT_TIME;
 800f90c:	4b1d      	ldr	r3, [pc, #116]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f90e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f912:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		if (HAL_UART_Receive(&hlpuart1, Memory, Size, Timer) != HAL_OK)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f503 3174 	add.w	r1, r3, #249856	@ 0x3d000
 800f91c:	f501 715a 	add.w	r1, r1, #872	@ 0x368
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f926:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	4b15      	ldr	r3, [pc, #84]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f92e:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 800f932:	4813      	ldr	r0, [pc, #76]	@ (800f980 <CELL_COMMAND+0xf04>)
 800f934:	f013 f831 	bl	802299a <HAL_UART_Receive>
 800f938:	4603      	mov	r3, r0
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 86e3 	beq.w	8010706 <CELL_COMMAND+0x1c8a>
		{
			Cell_State = CELL_RX_CMD_ERR;
 800f940:	4b10      	ldr	r3, [pc, #64]	@ (800f984 <CELL_COMMAND+0xf08>)
 800f942:	2205      	movs	r2, #5
 800f944:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			return;
 800f948:	f000 bef0 	b.w	801072c <CELL_COMMAND+0x1cb0>
 800f94c:	2007a90d 	.word	0x2007a90d
 800f950:	0802ed14 	.word	0x0802ed14
 800f954:	0802ee98 	.word	0x0802ee98
 800f958:	0802ed90 	.word	0x0802ed90
 800f95c:	0802e99c 	.word	0x0802e99c
 800f960:	20000356 	.word	0x20000356
 800f964:	2007a8a9 	.word	0x2007a8a9
 800f968:	0802e840 	.word	0x0802e840
 800f96c:	0802e9d0 	.word	0x0802e9d0
 800f970:	0802ede0 	.word	0x0802ede0
 800f974:	2007a368 	.word	0x2007a368
 800f978:	0802edf8 	.word	0x0802edf8
 800f97c:	0802ed1c 	.word	0x0802ed1c
 800f980:	2007d1c0 	.word	0x2007d1c0
 800f984:	2007a330 	.word	0x2007a330
 800f988:	2007a93f 	.word	0x2007a93f
 800f98c:	0802eea4 	.word	0x0802eea4
 800f990:	0802eebc 	.word	0x0802eebc
 800f994:	0802ee58 	.word	0x0802ee58
 800f998:	0802eec8 	.word	0x0802eec8
 800f99c:	0802ea60 	.word	0x0802ea60
 800f9a0:	0802eed4 	.word	0x0802eed4
 800f9a4:	0802ea00 	.word	0x0802ea00
		}
		return;

	case READ_BUF_CHECK:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800f9a8:	49b0      	ldr	r1, [pc, #704]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f001 f9ee 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_CHECK);
 800f9b0:	49af      	ldr	r1, [pc, #700]	@ (800fc70 <CELL_COMMAND+0x11f4>)
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f001 f9ea 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800f9b8:	49ae      	ldr	r1, [pc, #696]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f001 f9e6 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800f9c0:	4bad      	ldr	r3, [pc, #692]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800f9c2:	2264      	movs	r2, #100	@ 0x64
 800f9c4:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 300;//UART_MAX_SIZE;  40 desired NW
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800f9d4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		//CELL_READ_URC(Data_Ptr);
		CELL_MSG(Data_Ptr, false);
 800f9d8:	2100      	movs	r1, #0
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 fec0 	bl	8010760 <CELL_MSG>

		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);
 800f9e0:	2113      	movs	r1, #19
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f001 f8fe 	bl	8010be4 <checkCellOk>

		if (!(DEV_State & SERVER_COMMAND))
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800f9ee:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800f9f2:	f003 0302 	and.w	r3, r3, #2
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d102      	bne.n	800fa00 <CELL_COMMAND+0xf84>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800f9fa:	48a0      	ldr	r0, [pc, #640]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800f9fc:	f013 f9ce 	bl	8022d9c <HAL_UART_AbortReceive>
		}

		RecvMessageNum((char*)Memory, Data_Ptr);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fa06:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 800fa0a:	6879      	ldr	r1, [r7, #4]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f001 fc45 	bl	801129c <RecvMessageNum>

	case READ_FW_BUF_CHECK:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fa12:	4996      	ldr	r1, [pc, #600]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f001 f9b9 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_CHECK);
 800fa1a:	4995      	ldr	r1, [pc, #596]	@ (800fc70 <CELL_COMMAND+0x11f4>)
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f001 f9b5 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fa22:	4994      	ldr	r1, [pc, #592]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f001 f9b1 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800fa2a:	4b93      	ldr	r3, [pc, #588]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800fa2c:	2264      	movs	r2, #100	@ 0x64
 800fa2e:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 50;//UART_MAX_SIZE;  40 desired NW
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fa38:	461a      	mov	r2, r3
 800fa3a:	2332      	movs	r3, #50	@ 0x32
 800fa3c:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		//CELL_READ_URC(Data_Ptr);
		CELL_MSG(Data_Ptr, false);
 800fa40:	2100      	movs	r1, #0
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 fe8c 	bl	8010760 <CELL_MSG>

		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);
 800fa48:	2113      	movs	r1, #19
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f001 f8ca 	bl	8010be4 <checkCellOk>

		if (!(DEV_State & SERVER_COMMAND))
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fa56:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fa5a:	f003 0302 	and.w	r3, r3, #2
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f040 8653 	bne.w	801070a <CELL_COMMAND+0x1c8e>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fa64:	4885      	ldr	r0, [pc, #532]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800fa66:	f013 f999 	bl	8022d9c <HAL_UART_AbortReceive>
		}

		return;
 800fa6a:	f000 be4e 	b.w	801070a <CELL_COMMAND+0x1c8e>

	case RECEIVE_MSG:

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fa6e:	497f      	ldr	r1, [pc, #508]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f001 f98b 	bl	8010d8c <CELL_Build_MSG>
		sprintf(msgbuffer, "+QMTRECV=0,%d",Data_Ptr->recIndex );
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fa7c:	f893 3362 	ldrb.w	r3, [r3, #866]	@ 0x362
 800fa80:	461a      	mov	r2, r3
 800fa82:	f107 030c 	add.w	r3, r7, #12
 800fa86:	497e      	ldr	r1, [pc, #504]	@ (800fc80 <CELL_COMMAND+0x1204>)
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f017 fac3 	bl	8027014 <siprintf>
		CELL_Build_MSG(Data_Ptr, msgbuffer);
 800fa8e:	f107 030c 	add.w	r3, r7, #12
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f001 f979 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fa9a:	4976      	ldr	r1, [pc, #472]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f001 f975 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;
 800faa2:	4b75      	ldr	r3, [pc, #468]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800faa4:	2264      	movs	r2, #100	@ 0x64
 800faa6:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = testSize;  //Not used MEMORY_MAX is in Cell_msg4
 800faaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800fab4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Data_Ptr->UartBtyesReceived = CELL_MSG4(Data_Ptr);
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 ff91 	bl	80109e0 <CELL_MSG4>
 800fabe:	4603      	mov	r3, r0
 800fac0:	461a      	mov	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fac8:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		//		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);

		if (!(DEV_State & SERVER_COMMAND))
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fad2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fad6:	f003 0302 	and.w	r3, r3, #2
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f040 8617 	bne.w	801070e <CELL_COMMAND+0x1c92>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fae0:	4866      	ldr	r0, [pc, #408]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800fae2:	f013 f95b 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fae6:	f000 be12 	b.w	801070e <CELL_COMMAND+0x1c92>

	case recvMsg1:

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800faea:	4960      	ldr	r1, [pc, #384]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f001 f94d 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_1);
 800faf2:	4964      	ldr	r1, [pc, #400]	@ (800fc84 <CELL_COMMAND+0x1208>)
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f001 f949 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fafa:	495e      	ldr	r1, [pc, #376]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f001 f945 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;
 800fb02:	4b5d      	ldr	r3, [pc, #372]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800fb04:	2264      	movs	r2, #100	@ 0x64
 800fb06:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = testSize;  //Not used MEMORY_MAX is in Cell_msg4
 800fb0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800fb14:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Data_Ptr->UartBtyesReceived = CELL_MSG4(Data_Ptr);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 ff61 	bl	80109e0 <CELL_MSG4>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	461a      	mov	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fb28:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		//		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);

		if (!(DEV_State & SERVER_COMMAND))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fb32:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f040 85e9 	bne.w	8010712 <CELL_COMMAND+0x1c96>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fb40:	484e      	ldr	r0, [pc, #312]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800fb42:	f013 f92b 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fb46:	f000 bde4 	b.w	8010712 <CELL_COMMAND+0x1c96>

	case recvMsg2:

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fb4a:	4948      	ldr	r1, [pc, #288]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f001 f91d 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_2);
 800fb52:	494d      	ldr	r1, [pc, #308]	@ (800fc88 <CELL_COMMAND+0x120c>)
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f001 f919 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fb5a:	4946      	ldr	r1, [pc, #280]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 f915 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800fb62:	4b45      	ldr	r3, [pc, #276]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800fb64:	2264      	movs	r2, #100	@ 0x64
 800fb66:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = testSize;//UART_MAX_SIZE;  40 desired NW
 800fb6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fb6e:	687a      	ldr	r2, [r7, #4]
 800fb70:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800fb74:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Data_Ptr->UartBtyesReceived = CELL_MSG4(Data_Ptr);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 ff31 	bl	80109e0 <CELL_MSG4>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	461a      	mov	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fb88:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		//		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);

		if (!(DEV_State & SERVER_COMMAND))
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fb92:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fb96:	f003 0302 	and.w	r3, r3, #2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f040 85bb 	bne.w	8010716 <CELL_COMMAND+0x1c9a>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fba0:	4836      	ldr	r0, [pc, #216]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800fba2:	f013 f8fb 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fba6:	f000 bdb6 	b.w	8010716 <CELL_COMMAND+0x1c9a>

	case recvMsg3:

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fbaa:	4930      	ldr	r1, [pc, #192]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f001 f8ed 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_3);
 800fbb2:	4936      	ldr	r1, [pc, #216]	@ (800fc8c <CELL_COMMAND+0x1210>)
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f001 f8e9 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fbba:	492e      	ldr	r1, [pc, #184]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f001 f8e5 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800fbc2:	4b2d      	ldr	r3, [pc, #180]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800fbc4:	2264      	movs	r2, #100	@ 0x64
 800fbc6:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = testSize;//UART_MAX_SIZE;  40 desired NW
 800fbca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800fbd4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Data_Ptr->UartBtyesReceived = CELL_MSG4(Data_Ptr);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 ff01 	bl	80109e0 <CELL_MSG4>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fbe8:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		//		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);

		if (!(DEV_State & SERVER_COMMAND))
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fbf2:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fbf6:	f003 0302 	and.w	r3, r3, #2
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f040 858d 	bne.w	801071a <CELL_COMMAND+0x1c9e>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fc00:	481e      	ldr	r0, [pc, #120]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800fc02:	f013 f8cb 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fc06:	f000 bd88 	b.w	801071a <CELL_COMMAND+0x1c9e>

	case recvMsg4:

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fc0a:	4918      	ldr	r1, [pc, #96]	@ (800fc6c <CELL_COMMAND+0x11f0>)
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f001 f8bd 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_4);
 800fc12:	491f      	ldr	r1, [pc, #124]	@ (800fc90 <CELL_COMMAND+0x1214>)
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f001 f8b9 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fc1a:	4916      	ldr	r1, [pc, #88]	@ (800fc74 <CELL_COMMAND+0x11f8>)
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f001 f8b5 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800fc22:	4b15      	ldr	r3, [pc, #84]	@ (800fc78 <CELL_COMMAND+0x11fc>)
 800fc24:	2264      	movs	r2, #100	@ 0x64
 800fc26:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = testSize;//UART_MAX_SIZE;  40 desired NW
 800fc2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800fc34:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Data_Ptr->UartBtyesReceived = CELL_MSG4(Data_Ptr);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 fed1 	bl	80109e0 <CELL_MSG4>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	461a      	mov	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fc48:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		//		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);

		if (!(DEV_State & SERVER_COMMAND))
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fc52:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fc56:	f003 0302 	and.w	r3, r3, #2
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	f040 855f 	bne.w	801071e <CELL_COMMAND+0x1ca2>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fc60:	4806      	ldr	r0, [pc, #24]	@ (800fc7c <CELL_COMMAND+0x1200>)
 800fc62:	f013 f89b 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fc66:	f000 bd5a 	b.w	801071e <CELL_COMMAND+0x1ca2>
 800fc6a:	bf00      	nop
 800fc6c:	0802ed14 	.word	0x0802ed14
 800fc70:	0802eee0 	.word	0x0802eee0
 800fc74:	0802ed1c 	.word	0x0802ed1c
 800fc78:	2007a330 	.word	0x2007a330
 800fc7c:	2007d1c0 	.word	0x2007d1c0
 800fc80:	0802eeec 	.word	0x0802eeec
 800fc84:	0802eefc 	.word	0x0802eefc
 800fc88:	0802ef0c 	.word	0x0802ef0c
 800fc8c:	0802ef1c 	.word	0x0802ef1c
 800fc90:	0802ef2c 	.word	0x0802ef2c

	case recvMsg5:

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fc94:	49b8      	ldr	r1, [pc, #736]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f001 f878 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF_5);
 800fc9c:	49b7      	ldr	r1, [pc, #732]	@ (800ff7c <CELL_COMMAND+0x1500>)
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f001 f874 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fca4:	49b6      	ldr	r1, [pc, #728]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f001 f870 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800fcac:	4bb5      	ldr	r3, [pc, #724]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fcae:	2264      	movs	r2, #100	@ 0x64
 800fcb0:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = testSize;//UART_MAX_SIZE;  40 desired NW
 800fcb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800fcbe:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Data_Ptr->UartBtyesReceived = CELL_MSG4(Data_Ptr);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 fe8c 	bl	80109e0 <CELL_MSG4>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	461a      	mov	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fcd2:	f8a3 235e 	strh.w	r2, [r3, #862]	@ 0x35e
		//		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);

		if (!(DEV_State & SERVER_COMMAND))
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fcdc:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fce0:	f003 0302 	and.w	r3, r3, #2
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f040 851c 	bne.w	8010722 <CELL_COMMAND+0x1ca6>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fcea:	48a7      	ldr	r0, [pc, #668]	@ (800ff88 <CELL_COMMAND+0x150c>)
 800fcec:	f013 f856 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fcf0:	f000 bd17 	b.w	8010722 <CELL_COMMAND+0x1ca6>


	case READ_BUF:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fcf4:	49a0      	ldr	r1, [pc, #640]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f001 f848 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF);
 800fcfc:	49a3      	ldr	r1, [pc, #652]	@ (800ff8c <CELL_COMMAND+0x1510>)
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f001 f844 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800fd04:	49a2      	ldr	r1, [pc, #648]	@ (800ff90 <CELL_COMMAND+0x1514>)
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f001 f840 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fd0c:	499c      	ldr	r1, [pc, #624]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f001 f83c 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;//UART_EXTEND_TIME; 100 desired NW   //GAV can test increase if having issues dont go past 2FF
 800fd14:	4b9b      	ldr	r3, [pc, #620]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fd16:	2264      	movs	r2, #100	@ 0x64
 800fd18:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 300;//UART_MAX_SIZE;  40 desired NW
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fd22:	461a      	mov	r2, r3
 800fd24:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800fd28:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		//CELL_READ_URC(Data_Ptr);
		CELL_MSG(Data_Ptr, false);
 800fd2c:	2100      	movs	r1, #0
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f000 fd16 	bl	8010760 <CELL_MSG>
		//Erik thinks this is for error capture
		checkCellOk(Data_Ptr, CELL_READ_BUF_ERR);
 800fd34:	2113      	movs	r1, #19
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 ff54 	bl	8010be4 <checkCellOk>

		if (!(DEV_State & SERVER_COMMAND))
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fd42:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800fd46:	f003 0302 	and.w	r3, r3, #2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f040 84eb 	bne.w	8010726 <CELL_COMMAND+0x1caa>
		{
			HAL_UART_AbortReceive(&hlpuart1);
 800fd50:	488d      	ldr	r0, [pc, #564]	@ (800ff88 <CELL_COMMAND+0x150c>)
 800fd52:	f013 f823 	bl	8022d9c <HAL_UART_AbortReceive>
		}
		return;
 800fd56:	f000 bce6 	b.w	8010726 <CELL_COMMAND+0x1caa>

	case READ_BUF2:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fd5a:	4987      	ldr	r1, [pc, #540]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f001 f815 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_READ_RECV_BUFF);
 800fd62:	498a      	ldr	r1, [pc, #552]	@ (800ff8c <CELL_COMMAND+0x1510>)
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f001 f811 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_SOCKET_ID);
 800fd6a:	4989      	ldr	r1, [pc, #548]	@ (800ff90 <CELL_COMMAND+0x1514>)
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f001 f80d 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fd72:	4983      	ldr	r1, [pc, #524]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f001 f809 	bl	8010d8c <CELL_Build_MSG>

		Timer = 100;
 800fd7a:	4b82      	ldr	r3, [pc, #520]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fd7c:	2264      	movs	r2, #100	@ 0x64
 800fd7e:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = 1000;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fd88:	461a      	mov	r2, r3
 800fd8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd8e:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG2(Data_Ptr);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 fd60 	bl	8010858 <CELL_MSG2>
		return;
 800fd98:	f000 bcc8 	b.w	801072c <CELL_COMMAND+0x1cb0>
	case CONFIG:
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fd9c:	4976      	ldr	r1, [pc, #472]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fff4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_MSG);
 800fda4:	497b      	ldr	r1, [pc, #492]	@ (800ff94 <CELL_COMMAND+0x1518>)
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fff0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_A);
 800fdac:	497a      	ldr	r1, [pc, #488]	@ (800ff98 <CELL_COMMAND+0x151c>)
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 ffec 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fdb4:	4972      	ldr	r1, [pc, #456]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 ffe8 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800fdbc:	4b71      	ldr	r3, [pc, #452]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fdbe:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800fdc2:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fdcc:	461a      	mov	r2, r3
 800fdce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800fdd2:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800fdd6:	2100      	movs	r1, #0
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f000 fcc1 	bl	8010760 <CELL_MSG>
		// Using Check2 causing big delay in receiving data from picture but it will
		// "work" for at least this one
		Command = CHECK;  // CHECK2 desired NW
 800fdde:	4b69      	ldr	r3, [pc, #420]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		//Timer = 50;
		//Size = 16;
		CELL_COMMAND(Data_Ptr);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7fe fe48 	bl	800ea7c <CELL_COMMAND>

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fdec:	4962      	ldr	r1, [pc, #392]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f000 ffcc 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_MSG);
 800fdf4:	4967      	ldr	r1, [pc, #412]	@ (800ff94 <CELL_COMMAND+0x1518>)
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 ffc8 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_B);
 800fdfc:	4967      	ldr	r1, [pc, #412]	@ (800ff9c <CELL_COMMAND+0x1520>)
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 ffc4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fe04:	495e      	ldr	r1, [pc, #376]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 ffc0 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800fe0c:	4b5d      	ldr	r3, [pc, #372]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fe0e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800fe12:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800fe22:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800fe26:	2100      	movs	r1, #0
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f000 fc99 	bl	8010760 <CELL_MSG>

		Command = CHECK;  // CHECK2 desired NW
 800fe2e:	4b55      	ldr	r3, [pc, #340]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fe30:	2200      	movs	r2, #0
 800fe32:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		//Timer = 50; only works with CHECK2   desired NW
		//Size = 16;
		CELL_COMMAND(Data_Ptr);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f7fe fe20 	bl	800ea7c <CELL_COMMAND>

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fe3c:	494e      	ldr	r1, [pc, #312]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 ffa4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_MSG);
 800fe44:	4953      	ldr	r1, [pc, #332]	@ (800ff94 <CELL_COMMAND+0x1518>)
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 ffa0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_C);
 800fe4c:	4954      	ldr	r1, [pc, #336]	@ (800ffa0 <CELL_COMMAND+0x1524>)
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f000 ff9c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fe54:	494a      	ldr	r1, [pc, #296]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 ff98 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800fe5c:	4b49      	ldr	r3, [pc, #292]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fe5e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800fe62:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800fe72:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800fe76:	2100      	movs	r1, #0
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 fc71 	bl	8010760 <CELL_MSG>

		Command = CHECK;  // CHECK2 desired NW
 800fe7e:	4b41      	ldr	r3, [pc, #260]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fe80:	2200      	movs	r2, #0
 800fe82:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		//Timer = 50; only works with CHECK2   desired NW
		//Size = 16;
		CELL_COMMAND(Data_Ptr);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7fe fdf8 	bl	800ea7c <CELL_COMMAND>

		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fe8c:	493a      	ldr	r1, [pc, #232]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 ff7c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_MSG);
 800fe94:	493f      	ldr	r1, [pc, #252]	@ (800ff94 <CELL_COMMAND+0x1518>)
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 ff78 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_D);
 800fe9c:	4941      	ldr	r1, [pc, #260]	@ (800ffa4 <CELL_COMMAND+0x1528>)
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 ff74 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fea4:	4936      	ldr	r1, [pc, #216]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 ff70 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800feac:	4b35      	ldr	r3, [pc, #212]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800feae:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800feb2:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800febc:	461a      	mov	r2, r3
 800febe:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800fec2:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800fec6:	2100      	movs	r1, #0
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fc49 	bl	8010760 <CELL_MSG>

		Command = CHECK;
 800fece:	4b2d      	ldr	r3, [pc, #180]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f7fe fdd0 	bl	800ea7c <CELL_COMMAND>
		CELL_Build_MSG(Data_Ptr, MQTT_HEAD);
 800fedc:	4926      	ldr	r1, [pc, #152]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 ff54 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_MSG);
 800fee4:	492b      	ldr	r1, [pc, #172]	@ (800ff94 <CELL_COMMAND+0x1518>)
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 ff50 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_CONFIG_E);
 800feec:	492e      	ldr	r1, [pc, #184]	@ (800ffa8 <CELL_COMMAND+0x152c>)
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 ff4c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800fef4:	4922      	ldr	r1, [pc, #136]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 ff48 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 800fefc:	4b21      	ldr	r3, [pc, #132]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800fefe:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ff02:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800ff12:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 800ff16:	2100      	movs	r1, #0
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fc21 	bl	8010760 <CELL_MSG>
		Command = CHECK;
 800ff1e:	4b19      	ldr	r3, [pc, #100]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f7fe fda8 	bl	800ea7c <CELL_COMMAND>
		Command = CLIENT_CERT;CELL_COMMAND(Data_Ptr,CELL);
		Command = CHECK;	CELL_COMMAND(Data_Ptr,CELL);
		Command = CLIENT_KEY;CELL_COMMAND(Data_Ptr,CELL);
		Command = CHECK;	CELL_COMMAND(Data_Ptr,CELL);
#endif  // CERTIFICATE
		return;
 800ff2c:	e3fe      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case XTRA_ENABLE:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 800ff2e:	4912      	ldr	r1, [pc, #72]	@ (800ff78 <CELL_COMMAND+0x14fc>)
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 ff2b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_EXTRA_ENABLE);
 800ff36:	491d      	ldr	r1, [pc, #116]	@ (800ffac <CELL_COMMAND+0x1530>)
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 ff27 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ff3e:	4910      	ldr	r1, [pc, #64]	@ (800ff80 <CELL_COMMAND+0x1504>)
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 ff23 	bl	8010d8c <CELL_Build_MSG>


		Timer = 3000;
 800ff46:	4b0f      	ldr	r3, [pc, #60]	@ (800ff84 <CELL_COMMAND+0x1508>)
 800ff48:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ff4c:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ff56:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800ff60:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 100;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ff6a:	2264      	movs	r2, #100	@ 0x64
 800ff6c:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 fd85 	bl	8010a80 <CELL_MSG5>
		return;
 800ff76:	e3d9      	b.n	801072c <CELL_COMMAND+0x1cb0>
 800ff78:	0802ed14 	.word	0x0802ed14
 800ff7c:	0802ef3c 	.word	0x0802ef3c
 800ff80:	0802ed1c 	.word	0x0802ed1c
 800ff84:	2007a330 	.word	0x2007a330
 800ff88:	2007d1c0 	.word	0x2007d1c0
 800ff8c:	0802ef4c 	.word	0x0802ef4c
 800ff90:	0802ed90 	.word	0x0802ed90
 800ff94:	0802ef58 	.word	0x0802ef58
 800ff98:	0802ef64 	.word	0x0802ef64
 800ff9c:	0802ef70 	.word	0x0802ef70
 800ffa0:	0802ef7c 	.word	0x0802ef7c
 800ffa4:	0802ef90 	.word	0x0802ef90
 800ffa8:	0802efa0 	.word	0x0802efa0
 800ffac:	0802efb0 	.word	0x0802efb0

	case XTRA_AUTODL_ENABLE:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 800ffb0:	49b0      	ldr	r1, [pc, #704]	@ (8010274 <CELL_COMMAND+0x17f8>)
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 feea 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_EXTRA_AUTODL_ENABLE);
 800ffb8:	49af      	ldr	r1, [pc, #700]	@ (8010278 <CELL_COMMAND+0x17fc>)
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fee6 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 800ffc0:	49ae      	ldr	r1, [pc, #696]	@ (801027c <CELL_COMMAND+0x1800>)
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fee2 	bl	8010d8c <CELL_Build_MSG>


		Timer = 3000;
 800ffc8:	4bad      	ldr	r3, [pc, #692]	@ (8010280 <CELL_COMMAND+0x1804>)
 800ffca:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ffce:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ffd8:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 800ffe2:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 100;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 800ffec:	2264      	movs	r2, #100	@ 0x64
 800ffee:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 fd44 	bl	8010a80 <CELL_MSG5>
		return;
 800fff8:	e398      	b.n	801072c <CELL_COMMAND+0x1cb0>

	case XTRA_TIME_QUERY:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 800fffa:	499e      	ldr	r1, [pc, #632]	@ (8010274 <CELL_COMMAND+0x17f8>)
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f000 fec5 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_EXTRA_EXTRATIME_QUERY);
 8010002:	49a0      	ldr	r1, [pc, #640]	@ (8010284 <CELL_COMMAND+0x1808>)
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 fec1 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 801000a:	499c      	ldr	r1, [pc, #624]	@ (801027c <CELL_COMMAND+0x1800>)
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 febd 	bl	8010d8c <CELL_Build_MSG>


		Timer = 3000;
 8010012:	4b9b      	ldr	r3, [pc, #620]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010014:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010018:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010022:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 801002c:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 100;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010036:	2264      	movs	r2, #100	@ 0x64
 8010038:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 fd1f 	bl	8010a80 <CELL_MSG5>
		return;
 8010042:	e373      	b.n	801072c <CELL_COMMAND+0x1cb0>

	case GPS_ACTIVE_ANTENNA_ENABLE:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 8010044:	498b      	ldr	r1, [pc, #556]	@ (8010274 <CELL_COMMAND+0x17f8>)
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f000 fea0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_QCFG);
 801004c:	498e      	ldr	r1, [pc, #568]	@ (8010288 <CELL_COMMAND+0x180c>)
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f000 fe9c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 8010054:	498d      	ldr	r1, [pc, #564]	@ (801028c <CELL_COMMAND+0x1810>)
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 fe98 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_GPIO);
 801005c:	498c      	ldr	r1, [pc, #560]	@ (8010290 <CELL_COMMAND+0x1814>)
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fe94 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 8010064:	4989      	ldr	r1, [pc, #548]	@ (801028c <CELL_COMMAND+0x1810>)
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 fe90 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_ACTIVE_ANTENNA_GPIO);
 801006c:	4989      	ldr	r1, [pc, #548]	@ (8010294 <CELL_COMMAND+0x1818>)
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 fe8c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 8010074:	4981      	ldr	r1, [pc, #516]	@ (801027c <CELL_COMMAND+0x1800>)
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 fe88 	bl	8010d8c <CELL_Build_MSG>



		Timer = 3000;
 801007c:	4b80      	ldr	r3, [pc, #512]	@ (8010280 <CELL_COMMAND+0x1804>)
 801007e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010082:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801008c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8010096:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 32;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80100a0:	2220      	movs	r2, #32
 80100a2:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG5
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fcea 	bl	8010a80 <CELL_MSG5>
		return;
 80100ac:	e33e      	b.n	801072c <CELL_COMMAND+0x1cb0>

	case GPS_ACTIVE_ANTENNA_SET:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 80100ae:	4971      	ldr	r1, [pc, #452]	@ (8010274 <CELL_COMMAND+0x17f8>)
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fe6b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_QCFG);
 80100b6:	4974      	ldr	r1, [pc, #464]	@ (8010288 <CELL_COMMAND+0x180c>)
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fe67 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 80100be:	4973      	ldr	r1, [pc, #460]	@ (801028c <CELL_COMMAND+0x1810>)
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fe63 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_GPIO);
 80100c6:	4972      	ldr	r1, [pc, #456]	@ (8010290 <CELL_COMMAND+0x1814>)
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fe5f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_STRI);
 80100ce:	496f      	ldr	r1, [pc, #444]	@ (801028c <CELL_COMMAND+0x1810>)
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 fe5b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_ACTIVE_ANTENNA_ON);
 80100d6:	4970      	ldr	r1, [pc, #448]	@ (8010298 <CELL_COMMAND+0x181c>)
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f000 fe57 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, MQTT_TAIL);
 80100de:	4967      	ldr	r1, [pc, #412]	@ (801027c <CELL_COMMAND+0x1800>)
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 fe53 	bl	8010d8c <CELL_Build_MSG>



		Timer = 3000;
 80100e6:	4b66      	ldr	r3, [pc, #408]	@ (8010280 <CELL_COMMAND+0x1804>)
 80100e8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80100ec:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80100f6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80100fa:	687a      	ldr	r2, [r7, #4]
 80100fc:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8010100:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 28;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801010a:	221c      	movs	r2, #28
 801010c:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fcb5 	bl	8010a80 <CELL_MSG5>
		return;
 8010116:	e309      	b.n	801072c <CELL_COMMAND+0x1cb0>
//		Size = UART_MAX_SIZE;
//		CELL_MSG(Data_Ptr, false);    //use CELL_MSG5
//		return;

	case GPS_ENABLE:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 8010118:	4956      	ldr	r1, [pc, #344]	@ (8010274 <CELL_COMMAND+0x17f8>)
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 fe36 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_CONNECT);
 8010120:	495e      	ldr	r1, [pc, #376]	@ (801029c <CELL_COMMAND+0x1820>)
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 fe32 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_CONNECT_CNFG);
 8010128:	495d      	ldr	r1, [pc, #372]	@ (80102a0 <CELL_COMMAND+0x1824>)
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f000 fe2e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_TAIL);
 8010130:	4952      	ldr	r1, [pc, #328]	@ (801027c <CELL_COMMAND+0x1800>)
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 fe2a 	bl	8010d8c <CELL_Build_MSG>

		Timer = 10000;
 8010138:	4b51      	ldr	r3, [pc, #324]	@ (8010280 <CELL_COMMAND+0x1804>)
 801013a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801013e:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010148:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8010152:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 100;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801015c:	2264      	movs	r2, #100	@ 0x64
 801015e:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fc8c 	bl	8010a80 <CELL_MSG5>
		return;
 8010168:	e2e0      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case GPS_DISABLE:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 801016a:	4942      	ldr	r1, [pc, #264]	@ (8010274 <CELL_COMMAND+0x17f8>)
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fe0d 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_DISCONNECT);
 8010172:	494c      	ldr	r1, [pc, #304]	@ (80102a4 <CELL_COMMAND+0x1828>)
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 fe09 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_TAIL);
 801017a:	4940      	ldr	r1, [pc, #256]	@ (801027c <CELL_COMMAND+0x1800>)
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 fe05 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 8010182:	4b3f      	ldr	r3, [pc, #252]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010184:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010188:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010192:	461a      	mov	r2, r3
 8010194:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010198:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 801019c:	2100      	movs	r1, #0
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 fade 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_GPS_CONNECT_ERR);
 80101a4:	2116      	movs	r1, #22
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 fd1c 	bl	8010be4 <checkCellOk>

		return;
 80101ac:	e2be      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case LOCATION:
		CELL_Build_MSG(Data_Ptr, GPS_HEAD);
 80101ae:	4931      	ldr	r1, [pc, #196]	@ (8010274 <CELL_COMMAND+0x17f8>)
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 fdeb 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_LOCATION);
 80101b6:	493c      	ldr	r1, [pc, #240]	@ (80102a8 <CELL_COMMAND+0x182c>)
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 fde7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, GPS_TAIL);
 80101be:	492f      	ldr	r1, [pc, #188]	@ (801027c <CELL_COMMAND+0x1800>)
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fde3 	bl	8010d8c <CELL_Build_MSG>

		Timer = 2000;
 80101c6:	4b2e      	ldr	r3, [pc, #184]	@ (8010280 <CELL_COMMAND+0x1804>)
 80101c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80101cc:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = buf;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80101d6:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80101e0:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		RxSize = 400;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80101ea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80101ee:	f8a3 2354 	strh.w	r2, [r3, #852]	@ 0x354
		CELL_MSG5(Data_Ptr);    //use CELL_MSG5
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fc44 	bl	8010a80 <CELL_MSG5>
		return;
 80101f8:	e298      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case PDP_POPULATE:
		CELL_Build_MSG(Data_Ptr, FILE_HEAD);
 80101fa:	491e      	ldr	r1, [pc, #120]	@ (8010274 <CELL_COMMAND+0x17f8>)
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f000 fdc5 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_CFUN_STOP);
 8010202:	492a      	ldr	r1, [pc, #168]	@ (80102ac <CELL_COMMAND+0x1830>)
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 fdc1 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_TAIL);
 801020a:	491c      	ldr	r1, [pc, #112]	@ (801027c <CELL_COMMAND+0x1800>)
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f000 fdbd 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 8010212:	4b1b      	ldr	r3, [pc, #108]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010214:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010218:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010222:	461a      	mov	r2, r3
 8010224:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010228:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 801022c:	2100      	movs	r1, #0
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 fa96 	bl	8010760 <CELL_MSG>

		Command = CHECK;
 8010234:	4b12      	ldr	r3, [pc, #72]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010236:	2200      	movs	r2, #0
 8010238:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 801023c:	4b10      	ldr	r3, [pc, #64]	@ (8010280 <CELL_COMMAND+0x1804>)
 801023e:	2200      	movs	r2, #0
 8010240:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010244:	e00f      	b.n	8010266 <CELL_COMMAND+0x17ea>
		{
			CELL_COMMAND(Data_Ptr);
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f7fe fc18 	bl	800ea7c <CELL_COMMAND>
			if (Temporary >= TEMP_LIMIT)
 801024c:	4b0c      	ldr	r3, [pc, #48]	@ (8010280 <CELL_COMMAND+0x1804>)
 801024e:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 8010252:	2b04      	cmp	r3, #4
 8010254:	d82c      	bhi.n	80102b0 <CELL_COMMAND+0x1834>
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 8010256:	4b0a      	ldr	r3, [pc, #40]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010258:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 801025c:	3301      	adds	r3, #1
 801025e:	b2da      	uxtb	r2, r3
 8010260:	4b07      	ldr	r3, [pc, #28]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010262:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010266:	4b06      	ldr	r3, [pc, #24]	@ (8010280 <CELL_COMMAND+0x1804>)
 8010268:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 801026c:	2b00      	cmp	r3, #0
 801026e:	d1ea      	bne.n	8010246 <CELL_COMMAND+0x17ca>
 8010270:	e01f      	b.n	80102b2 <CELL_COMMAND+0x1836>
 8010272:	bf00      	nop
 8010274:	0802ed14 	.word	0x0802ed14
 8010278:	0802efc0 	.word	0x0802efc0
 801027c:	0802ed1c 	.word	0x0802ed1c
 8010280:	2007a330 	.word	0x2007a330
 8010284:	0802efe0 	.word	0x0802efe0
 8010288:	0802eff0 	.word	0x0802eff0
 801028c:	0802e9d0 	.word	0x0802e9d0
 8010290:	0802eff8 	.word	0x0802eff8
 8010294:	0802f000 	.word	0x0802f000
 8010298:	0802f010 	.word	0x0802f010
 801029c:	0802f01c 	.word	0x0802f01c
 80102a0:	0802e840 	.word	0x0802e840
 80102a4:	0802f024 	.word	0x0802f024
 80102a8:	0802f030 	.word	0x0802f030
 80102ac:	0802f03c 	.word	0x0802f03c
				break;
 80102b0:	bf00      	nop
		}

		CELL_Build_MSG(Data_Ptr, FILE_HEAD);
 80102b2:	49ba      	ldr	r1, [pc, #744]	@ (801059c <CELL_COMMAND+0x1b20>)
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 fd69 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_SIM_SEL_PREP);
 80102ba:	49b9      	ldr	r1, [pc, #740]	@ (80105a0 <CELL_COMMAND+0x1b24>)
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fd65 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_TAIL);
 80102c2:	49b8      	ldr	r1, [pc, #736]	@ (80105a4 <CELL_COMMAND+0x1b28>)
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fd61 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 80102ca:	4bb7      	ldr	r3, [pc, #732]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80102cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80102d0:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80102da:	461a      	mov	r2, r3
 80102dc:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80102e0:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 80102e4:	2100      	movs	r1, #0
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fa3a 	bl	8010760 <CELL_MSG>

		HAL_Delay(1500);
 80102ec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80102f0:	f006 f8c8 	bl	8016484 <HAL_Delay>

		Command = CHECK;
 80102f4:	4bac      	ldr	r3, [pc, #688]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 80102fc:	4baa      	ldr	r3, [pc, #680]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010304:	e00f      	b.n	8010326 <CELL_COMMAND+0x18aa>
		{
			CELL_COMMAND(Data_Ptr);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7fe fbb8 	bl	800ea7c <CELL_COMMAND>
			if (Temporary >= TEMP_LIMIT)
 801030c:	4ba6      	ldr	r3, [pc, #664]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 801030e:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 8010312:	2b04      	cmp	r3, #4
 8010314:	d80d      	bhi.n	8010332 <CELL_COMMAND+0x18b6>
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 8010316:	4ba4      	ldr	r3, [pc, #656]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010318:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 801031c:	3301      	adds	r3, #1
 801031e:	b2da      	uxtb	r2, r3
 8010320:	4ba1      	ldr	r3, [pc, #644]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010322:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010326:	4ba0      	ldr	r3, [pc, #640]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010328:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1ea      	bne.n	8010306 <CELL_COMMAND+0x188a>
 8010330:	e000      	b.n	8010334 <CELL_COMMAND+0x18b8>
				break;
 8010332:	bf00      	nop
		}

		CELL_Build_MSG(Data_Ptr, FILE_HEAD);
 8010334:	4999      	ldr	r1, [pc, #612]	@ (801059c <CELL_COMMAND+0x1b20>)
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f000 fd28 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_CFUN_START);
 801033c:	499b      	ldr	r1, [pc, #620]	@ (80105ac <CELL_COMMAND+0x1b30>)
 801033e:	6878      	ldr	r0, [r7, #4]
 8010340:	f000 fd24 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_TAIL);
 8010344:	4997      	ldr	r1, [pc, #604]	@ (80105a4 <CELL_COMMAND+0x1b28>)
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 fd20 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 801034c:	4b96      	ldr	r3, [pc, #600]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 801034e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010352:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801035c:	461a      	mov	r2, r3
 801035e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010362:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 8010366:	2100      	movs	r1, #0
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f9f9 	bl	8010760 <CELL_MSG>

		HAL_Delay(1500);
 801036e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8010372:	f006 f887 	bl	8016484 <HAL_Delay>

		Command = CHECK;
 8010376:	4b8c      	ldr	r3, [pc, #560]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010378:	2200      	movs	r2, #0
 801037a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 801037e:	4b8a      	ldr	r3, [pc, #552]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010380:	2200      	movs	r2, #0
 8010382:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010386:	e00f      	b.n	80103a8 <CELL_COMMAND+0x192c>
		{
			CELL_COMMAND(Data_Ptr);
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7fe fb77 	bl	800ea7c <CELL_COMMAND>
			if (Temporary >= TEMP_LIMIT)
 801038e:	4b86      	ldr	r3, [pc, #536]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010390:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 8010394:	2b04      	cmp	r3, #4
 8010396:	d80d      	bhi.n	80103b4 <CELL_COMMAND+0x1938>
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 8010398:	4b83      	ldr	r3, [pc, #524]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 801039a:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 801039e:	3301      	adds	r3, #1
 80103a0:	b2da      	uxtb	r2, r3
 80103a2:	4b81      	ldr	r3, [pc, #516]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80103a4:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 80103a8:	4b7f      	ldr	r3, [pc, #508]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80103aa:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d1ea      	bne.n	8010388 <CELL_COMMAND+0x190c>
 80103b2:	e000      	b.n	80103b6 <CELL_COMMAND+0x193a>
				break;
 80103b4:	bf00      	nop
		}

		CELL_Build_MSG(Data_Ptr, FILE_HEAD);
 80103b6:	4979      	ldr	r1, [pc, #484]	@ (801059c <CELL_COMMAND+0x1b20>)
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 fce7 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CELL_PDP_CONTEX);
 80103be:	497c      	ldr	r1, [pc, #496]	@ (80105b0 <CELL_COMMAND+0x1b34>)
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fce3 	bl	8010d8c <CELL_Build_MSG>
		PRINTF("APN is %s\r\n", CELL_PDP_CONTEX);
 80103c6:	4a7a      	ldr	r2, [pc, #488]	@ (80105b0 <CELL_COMMAND+0x1b34>)
 80103c8:	497a      	ldr	r1, [pc, #488]	@ (80105b4 <CELL_COMMAND+0x1b38>)
 80103ca:	2001      	movs	r0, #1
 80103cc:	f7f6 fcd2 	bl	8006d74 <TraceSend>

		CELL_Build_MSG(Data_Ptr, FILE_TAIL);
 80103d0:	4974      	ldr	r1, [pc, #464]	@ (80105a4 <CELL_COMMAND+0x1b28>)
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f000 fcda 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 80103d8:	4b73      	ldr	r3, [pc, #460]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80103da:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80103de:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80103e8:	461a      	mov	r2, r3
 80103ea:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80103ee:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 80103f2:	2100      	movs	r1, #0
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f000 f9b3 	bl	8010760 <CELL_MSG>

		HAL_Delay(1500);
 80103fa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80103fe:	f006 f841 	bl	8016484 <HAL_Delay>

		Command = CHECK;
 8010402:	4b69      	ldr	r3, [pc, #420]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010404:	2200      	movs	r2, #0
 8010406:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 801040a:	4b67      	ldr	r3, [pc, #412]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 801040c:	2200      	movs	r2, #0
 801040e:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010412:	e00f      	b.n	8010434 <CELL_COMMAND+0x19b8>
		{
			CELL_COMMAND(Data_Ptr);
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7fe fb31 	bl	800ea7c <CELL_COMMAND>
			if (Temporary >= TEMP_LIMIT)
 801041a:	4b63      	ldr	r3, [pc, #396]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 801041c:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 8010420:	2b04      	cmp	r3, #4
 8010422:	d80d      	bhi.n	8010440 <CELL_COMMAND+0x19c4>
		for (Temporary = 0; Cell_State != CELL_OK; Temporary++)
 8010424:	4b60      	ldr	r3, [pc, #384]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010426:	f893 3676 	ldrb.w	r3, [r3, #1654]	@ 0x676
 801042a:	3301      	adds	r3, #1
 801042c:	b2da      	uxtb	r2, r3
 801042e:	4b5e      	ldr	r3, [pc, #376]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010430:	f883 2676 	strb.w	r2, [r3, #1654]	@ 0x676
 8010434:	4b5c      	ldr	r3, [pc, #368]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010436:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1ea      	bne.n	8010414 <CELL_COMMAND+0x1998>
				break;
		}



		return;
 801043e:	e175      	b.n	801072c <CELL_COMMAND+0x1cb0>
				break;
 8010440:	bf00      	nop
		return;
 8010442:	e173      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case FILE_POPULATE:
		HAL_UART_AbortReceive(&hlpuart1);
 8010444:	485c      	ldr	r0, [pc, #368]	@ (80105b8 <CELL_COMMAND+0x1b3c>)
 8010446:	f012 fca9 	bl	8022d9c <HAL_UART_AbortReceive>
		if (HAL_UART_Transmit(&hlpuart1, Memory, Size, Timer) != HAL_OK)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f503 3174 	add.w	r1, r3, #249856	@ 0x3d000
 8010450:	f501 715a 	add.w	r1, r1, #872	@ 0x368
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801045a:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 801045e:	b29a      	uxth	r2, r3
 8010460:	4b51      	ldr	r3, [pc, #324]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010462:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010466:	4854      	ldr	r0, [pc, #336]	@ (80105b8 <CELL_COMMAND+0x1b3c>)
 8010468:	f012 f9f9 	bl	802285e <HAL_UART_Transmit>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	f000 815b 	beq.w	801072a <CELL_COMMAND+0x1cae>
		{
			Cell_State = CELL_TX_CMD_ERR;
 8010474:	4b4c      	ldr	r3, [pc, #304]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010476:	2204      	movs	r2, #4
 8010478:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			return;
 801047c:	e156      	b.n	801072c <CELL_COMMAND+0x1cb0>
		}
		return;
	case FILE_CREATE:
		CELL_Build_MSG(Data_Ptr, FILE_HEAD);
 801047e:	4947      	ldr	r1, [pc, #284]	@ (801059c <CELL_COMMAND+0x1b20>)
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 fc83 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_CREATE_MSG);
 8010486:	494d      	ldr	r1, [pc, #308]	@ (80105bc <CELL_COMMAND+0x1b40>)
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f000 fc7f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Event_Type);
 801048e:	494c      	ldr	r1, [pc, #304]	@ (80105c0 <CELL_COMMAND+0x1b44>)
 8010490:	6878      	ldr	r0, [r7, #4]
 8010492:	f000 fc7b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_APND);
 8010496:	494b      	ldr	r1, [pc, #300]	@ (80105c4 <CELL_COMMAND+0x1b48>)
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 fc77 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_SIZE);
 801049e:	494a      	ldr	r1, [pc, #296]	@ (80105c8 <CELL_COMMAND+0x1b4c>)
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 fc73 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_APND);
 80104a6:	4947      	ldr	r1, [pc, #284]	@ (80105c4 <CELL_COMMAND+0x1b48>)
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 fc6f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_TIMEOUT);
 80104ae:	4947      	ldr	r1, [pc, #284]	@ (80105cc <CELL_COMMAND+0x1b50>)
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 fc6b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_TAIL);
 80104b6:	493b      	ldr	r1, [pc, #236]	@ (80105a4 <CELL_COMMAND+0x1b28>)
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 fc67 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 80104be:	4b3a      	ldr	r3, [pc, #232]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80104c0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80104c4:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80104ce:	461a      	mov	r2, r3
 80104d0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80104d4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 80104d8:	2100      	movs	r1, #0
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f940 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_FILE_CREATE_ERR);
 80104e0:	2117      	movs	r1, #23
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fb7e 	bl	8010be4 <checkCellOk>
		Cell_State = CELL_OK;
 80104e8:	4b2f      	ldr	r3, [pc, #188]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
		return;
 80104f0:	e11c      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case FILE_DELETE:
		CELL_Build_MSG(Data_Ptr, FILE_HEAD);
 80104f2:	492a      	ldr	r1, [pc, #168]	@ (801059c <CELL_COMMAND+0x1b20>)
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f000 fc49 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_DEL_MSG);
 80104fa:	4935      	ldr	r1, [pc, #212]	@ (80105d0 <CELL_COMMAND+0x1b54>)
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f000 fc45 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, Event_Type);
 8010502:	492f      	ldr	r1, [pc, #188]	@ (80105c0 <CELL_COMMAND+0x1b44>)
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f000 fc41 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, FILE_TAIL);
 801050a:	4926      	ldr	r1, [pc, #152]	@ (80105a4 <CELL_COMMAND+0x1b28>)
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 fc3d 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 8010512:	4b25      	ldr	r3, [pc, #148]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010514:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010518:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010522:	461a      	mov	r2, r3
 8010524:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010528:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 801052c:	2100      	movs	r1, #0
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f000 f916 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_FILE_DELETE_ERR);
 8010534:	2118      	movs	r1, #24
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 fb54 	bl	8010be4 <checkCellOk>
		return;
 801053c:	e0f6      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case CIPHER:
		CELL_Build_MSG(Data_Ptr, CERT_HEAD);
 801053e:	4917      	ldr	r1, [pc, #92]	@ (801059c <CELL_COMMAND+0x1b20>)
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 fc23 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CIPHER_MSG);
 8010546:	4923      	ldr	r1, [pc, #140]	@ (80105d4 <CELL_COMMAND+0x1b58>)
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 fc1f 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_DEFAULT_MSG_ID);
 801054e:	4922      	ldr	r1, [pc, #136]	@ (80105d8 <CELL_COMMAND+0x1b5c>)
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 fc1b 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_APND);
 8010556:	491b      	ldr	r1, [pc, #108]	@ (80105c4 <CELL_COMMAND+0x1b48>)
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 fc17 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CIPHER);
 801055e:	491f      	ldr	r1, [pc, #124]	@ (80105dc <CELL_COMMAND+0x1b60>)
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f000 fc13 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_TAIL);
 8010566:	490f      	ldr	r1, [pc, #60]	@ (80105a4 <CELL_COMMAND+0x1b28>)
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 fc0f 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 801056e:	4b0e      	ldr	r3, [pc, #56]	@ (80105a8 <CELL_COMMAND+0x1b2c>)
 8010570:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010574:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801057e:	461a      	mov	r2, r3
 8010580:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010584:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 8010588:	2100      	movs	r1, #0
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f8e8 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CIPHER_ERR);
 8010590:	211c      	movs	r1, #28
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 fb26 	bl	8010be4 <checkCellOk>
		return;
 8010598:	e0c8      	b.n	801072c <CELL_COMMAND+0x1cb0>
 801059a:	bf00      	nop
 801059c:	0802ed14 	.word	0x0802ed14
 80105a0:	0802f044 	.word	0x0802f044
 80105a4:	0802ed1c 	.word	0x0802ed1c
 80105a8:	2007a330 	.word	0x2007a330
 80105ac:	0802f060 	.word	0x0802f060
 80105b0:	0802f06c 	.word	0x0802f06c
 80105b4:	0802f094 	.word	0x0802f094
 80105b8:	2007d1c0 	.word	0x2007d1c0
 80105bc:	0802f0a0 	.word	0x0802f0a0
 80105c0:	2007a911 	.word	0x2007a911
 80105c4:	0802e99c 	.word	0x0802e99c
 80105c8:	0802f0ac 	.word	0x0802f0ac
 80105cc:	0802f0b4 	.word	0x0802f0b4
 80105d0:	0802f0b8 	.word	0x0802f0b8
 80105d4:	0802f0c4 	.word	0x0802f0c4
 80105d8:	0802e840 	.word	0x0802e840
 80105dc:	0802f0e0 	.word	0x0802f0e0
	case CA_CERT:
		CELL_Build_MSG(Data_Ptr, CERT_HEAD);
 80105e0:	4954      	ldr	r1, [pc, #336]	@ (8010734 <CELL_COMMAND+0x1cb8>)
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fbd2 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CACERT_MSG);
 80105e8:	4953      	ldr	r1, [pc, #332]	@ (8010738 <CELL_COMMAND+0x1cbc>)
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 fbce 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_DEFAULT_MSG_ID);
 80105f0:	4952      	ldr	r1, [pc, #328]	@ (801073c <CELL_COMMAND+0x1cc0>)
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f000 fbca 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_APND);
 80105f8:	4951      	ldr	r1, [pc, #324]	@ (8010740 <CELL_COMMAND+0x1cc4>)
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 fbc6 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CACERT);
 8010600:	4950      	ldr	r1, [pc, #320]	@ (8010744 <CELL_COMMAND+0x1cc8>)
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 fbc2 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_TAIL);
 8010608:	494f      	ldr	r1, [pc, #316]	@ (8010748 <CELL_COMMAND+0x1ccc>)
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 fbbe 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 8010610:	4b4e      	ldr	r3, [pc, #312]	@ (801074c <CELL_COMMAND+0x1cd0>)
 8010612:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010616:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010620:	461a      	mov	r2, r3
 8010622:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010626:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 801062a:	2100      	movs	r1, #0
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 f897 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CERTIFICATION_ERR);
 8010632:	2119      	movs	r1, #25
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fad5 	bl	8010be4 <checkCellOk>
		return;
 801063a:	e077      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case CLIENT_CERT:
		CELL_Build_MSG(Data_Ptr, CERT_HEAD);
 801063c:	493d      	ldr	r1, [pc, #244]	@ (8010734 <CELL_COMMAND+0x1cb8>)
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fba4 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CLCERT_MSG);
 8010644:	4942      	ldr	r1, [pc, #264]	@ (8010750 <CELL_COMMAND+0x1cd4>)
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 fba0 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_DEFAULT_MSG_ID);
 801064c:	493b      	ldr	r1, [pc, #236]	@ (801073c <CELL_COMMAND+0x1cc0>)
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f000 fb9c 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_APND);
 8010654:	493a      	ldr	r1, [pc, #232]	@ (8010740 <CELL_COMMAND+0x1cc4>)
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 fb98 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CLCERT);
 801065c:	493d      	ldr	r1, [pc, #244]	@ (8010754 <CELL_COMMAND+0x1cd8>)
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f000 fb94 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_TAIL);
 8010664:	4938      	ldr	r1, [pc, #224]	@ (8010748 <CELL_COMMAND+0x1ccc>)
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 fb90 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 801066c:	4b37      	ldr	r3, [pc, #220]	@ (801074c <CELL_COMMAND+0x1cd0>)
 801066e:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010672:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801067c:	461a      	mov	r2, r3
 801067e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8010682:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 8010686:	2100      	movs	r1, #0
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f000 f869 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CLIENT_CERTIFICATION_ERR);
 801068e:	211a      	movs	r1, #26
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f000 faa7 	bl	8010be4 <checkCellOk>
		return;
 8010696:	e049      	b.n	801072c <CELL_COMMAND+0x1cb0>
	case CLIENT_KEY:
		CELL_Build_MSG(Data_Ptr, CERT_HEAD);
 8010698:	4926      	ldr	r1, [pc, #152]	@ (8010734 <CELL_COMMAND+0x1cb8>)
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 fb76 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CLNTKEY_MSG);
 80106a0:	492d      	ldr	r1, [pc, #180]	@ (8010758 <CELL_COMMAND+0x1cdc>)
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 fb72 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_DEFAULT_MSG_ID);
 80106a8:	4924      	ldr	r1, [pc, #144]	@ (801073c <CELL_COMMAND+0x1cc0>)
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 fb6e 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_APND);
 80106b0:	4923      	ldr	r1, [pc, #140]	@ (8010740 <CELL_COMMAND+0x1cc4>)
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f000 fb6a 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, SSL_CLNTKEY);
 80106b8:	4928      	ldr	r1, [pc, #160]	@ (801075c <CELL_COMMAND+0x1ce0>)
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 fb66 	bl	8010d8c <CELL_Build_MSG>
		CELL_Build_MSG(Data_Ptr, CERT_TAIL);
 80106c0:	4921      	ldr	r1, [pc, #132]	@ (8010748 <CELL_COMMAND+0x1ccc>)
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 fb62 	bl	8010d8c <CELL_Build_MSG>

		Timer = UART_WAIT_TIME;
 80106c8:	4b20      	ldr	r3, [pc, #128]	@ (801074c <CELL_COMMAND+0x1cd0>)
 80106ca:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80106ce:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		Size = UART_MAX_SIZE;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80106d8:	461a      	mov	r2, r3
 80106da:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80106de:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		CELL_MSG(Data_Ptr, false);
 80106e2:	2100      	movs	r1, #0
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f000 f83b 	bl	8010760 <CELL_MSG>
		checkCellOk(Data_Ptr, CELL_CLIENT_KEY_ERR);
 80106ea:	211b      	movs	r1, #27
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fa79 	bl	8010be4 <checkCellOk>
		return;
 80106f2:	e01b      	b.n	801072c <CELL_COMMAND+0x1cb0>
	default:
		Cell_State = CELL_TYPE_PARAM_ERR;
 80106f4:	4b15      	ldr	r3, [pc, #84]	@ (801074c <CELL_COMMAND+0x1cd0>)
 80106f6:	2215      	movs	r2, #21
 80106f8:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
		break;
 80106fc:	e016      	b.n	801072c <CELL_COMMAND+0x1cb0>
			return;
 80106fe:	bf00      	nop
 8010700:	e014      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 8010702:	bf00      	nop
 8010704:	e012      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 8010706:	bf00      	nop
 8010708:	e010      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 801070a:	bf00      	nop
 801070c:	e00e      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 801070e:	bf00      	nop
 8010710:	e00c      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 8010712:	bf00      	nop
 8010714:	e00a      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 8010716:	bf00      	nop
 8010718:	e008      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 801071a:	bf00      	nop
 801071c:	e006      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 801071e:	bf00      	nop
 8010720:	e004      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 8010722:	bf00      	nop
 8010724:	e002      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 8010726:	bf00      	nop
 8010728:	e000      	b.n	801072c <CELL_COMMAND+0x1cb0>
		return;
 801072a:	bf00      	nop
	}
}
 801072c:	37d8      	adds	r7, #216	@ 0xd8
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	0802ed14 	.word	0x0802ed14
 8010738:	0802f0ec 	.word	0x0802f0ec
 801073c:	0802e840 	.word	0x0802e840
 8010740:	0802e99c 	.word	0x0802e99c
 8010744:	0802f100 	.word	0x0802f100
 8010748:	0802ed1c 	.word	0x0802ed1c
 801074c:	2007a330 	.word	0x2007a330
 8010750:	0802f110 	.word	0x0802f110
 8010754:	0802f128 	.word	0x0802f128
 8010758:	0802f13c 	.word	0x0802f13c
 801075c:	0802f154 	.word	0x0802f154

08010760 <CELL_MSG>:

/******************************************************
Sends the TX_Command to the modem and waits for a response
 ******************************************************/
void CELL_MSG( MEM_PTR *Data_Ptr, bool clearBuffer )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	460b      	mov	r3, r1
 801076a:	70fb      	strb	r3, [r7, #3]
	Refresh_Watchdog;
 801076c:	4833      	ldr	r0, [pc, #204]	@ (801083c <CELL_MSG+0xdc>)
 801076e:	f00a fd30 	bl	801b1d2 <HAL_IWDG_Refresh>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d001      	beq.n	801077c <CELL_MSG+0x1c>
 8010778:	f005 f80c 	bl	8015794 <Error_Handler>
	//	if ( Cell_State != CELL_OK )
	//		return;

	//uint8_t receivedData [ 2000 ] = {0};
	// kcs
	HAL_UART_AbortReceive(&hlpuart1);
 801077c:	4830      	ldr	r0, [pc, #192]	@ (8010840 <CELL_MSG+0xe0>)
 801077e:	f012 fb0d 	bl	8022d9c <HAL_UART_AbortReceive>

	if ( HAL_UART_Transmit(&hlpuart1, TX_Command, buf, Timer) != HAL_OK )
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010788:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801078c:	b29a      	uxth	r2, r3
 801078e:	4b2d      	ldr	r3, [pc, #180]	@ (8010844 <CELL_MSG+0xe4>)
 8010790:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010794:	492c      	ldr	r1, [pc, #176]	@ (8010848 <CELL_MSG+0xe8>)
 8010796:	482a      	ldr	r0, [pc, #168]	@ (8010840 <CELL_MSG+0xe0>)
 8010798:	f012 f861 	bl	802285e <HAL_UART_Transmit>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d00e      	beq.n	80107c0 <CELL_MSG+0x60>
	{
		Cell_State = CELL_TX_CMD_ERR;
 80107a2:	4b28      	ldr	r3, [pc, #160]	@ (8010844 <CELL_MSG+0xe4>)
 80107a4:	2204      	movs	r2, #4
 80107a6:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

#ifdef Log_Level_1
		Write_Log( LOG_ERROR);
 80107aa:	4828      	ldr	r0, [pc, #160]	@ (801084c <CELL_MSG+0xec>)
 80107ac:	f7f6 f9be 	bl	8006b2c <Write_Log>
		Log_End( LOG_STATE_RESULT, Cell_State);
 80107b0:	4b24      	ldr	r3, [pc, #144]	@ (8010844 <CELL_MSG+0xe4>)
 80107b2:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 80107b6:	4619      	mov	r1, r3
 80107b8:	4825      	ldr	r0, [pc, #148]	@ (8010850 <CELL_MSG+0xf0>)
 80107ba:	f7f6 f99f 	bl	8006afc <Log_End>
#endif // Log_Level_1

		return;
 80107be:	e039      	b.n	8010834 <CELL_MSG+0xd4>
	}

	uint8_t test = 0;
 80107c0:	2300      	movs	r3, #0
 80107c2:	73fb      	strb	r3, [r7, #15]
	if (clearBuffer)
 80107c4:	78fb      	ldrb	r3, [r7, #3]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d002      	beq.n	80107d0 <CELL_MSG+0x70>
	{
		Clear_Memory(Data_Ptr);
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f7f5 ff59 	bl	8006682 <Clear_Memory>
	}
	do
	{
		if (HAL_UART_Receive( &hlpuart1, &(Memory[test++]), 1, Timer) != HAL_OK)
 80107d0:	7bfb      	ldrb	r3, [r7, #15]
 80107d2:	1c5a      	adds	r2, r3, #1
 80107d4:	73fa      	strb	r2, [r7, #15]
 80107d6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80107da:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	18d1      	adds	r1, r2, r3
 80107e2:	4b18      	ldr	r3, [pc, #96]	@ (8010844 <CELL_MSG+0xe4>)
 80107e4:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80107e8:	2201      	movs	r2, #1
 80107ea:	4815      	ldr	r0, [pc, #84]	@ (8010840 <CELL_MSG+0xe0>)
 80107ec:	f012 f8d5 	bl	802299a <HAL_UART_Receive>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d004      	beq.n	8010800 <CELL_MSG+0xa0>
		{
			Cell_State = CELL_RX_CMD_ERR;
 80107f6:	4b13      	ldr	r3, [pc, #76]	@ (8010844 <CELL_MSG+0xe4>)
 80107f8:	2205      	movs	r2, #5
 80107fa:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			return;
 80107fe:	e019      	b.n	8010834 <CELL_MSG+0xd4>

		}
	} while (Size--);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010806:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 801080a:	1e5a      	subs	r2, r3, #1
 801080c:	6879      	ldr	r1, [r7, #4]
 801080e:	f501 3174 	add.w	r1, r1, #249856	@ 0x3d000
 8010812:	f8c1 2350 	str.w	r2, [r1, #848]	@ 0x350
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1da      	bne.n	80107d0 <CELL_MSG+0x70>

#ifdef Log_Level_2
	Write_Log( LOG_RX_ERR);
 801081a:	480e      	ldr	r0, [pc, #56]	@ (8010854 <CELL_MSG+0xf4>)
 801081c:	f7f6 f986 	bl	8006b2c <Write_Log>
	Log_End( LOG_STATE_RESULT, Cell_State);
 8010820:	4b08      	ldr	r3, [pc, #32]	@ (8010844 <CELL_MSG+0xe4>)
 8010822:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010826:	4619      	mov	r1, r3
 8010828:	4809      	ldr	r0, [pc, #36]	@ (8010850 <CELL_MSG+0xf0>)
 801082a:	f7f6 f967 	bl	8006afc <Log_End>
#endif // Log_Level_2
	test = test + 1;
 801082e:	7bfb      	ldrb	r3, [r7, #15]
 8010830:	3301      	adds	r3, #1
 8010832:	73fb      	strb	r3, [r7, #15]
}
 8010834:	3710      	adds	r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	2007d0bc 	.word	0x2007d0bc
 8010840:	2007d1c0 	.word	0x2007d1c0
 8010844:	2007a330 	.word	0x2007a330
 8010848:	2007a93f 	.word	0x2007a93f
 801084c:	0802f168 	.word	0x0802f168
 8010850:	0802ea60 	.word	0x0802ea60
 8010854:	0802ea54 	.word	0x0802ea54

08010858 <CELL_MSG2>:

/******************************************************
Sends the TX_Command to the modem and waits for a response
 ******************************************************/
void CELL_MSG2(MEM_PTR *Data_Ptr)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	f5ad 5d9c 	sub.w	sp, sp, #4992	@ 0x1380
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8010866:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 801086a:	6018      	str	r0, [r3, #0]
	if (Cell_State != CELL_OK)
 801086c:	4b55      	ldr	r3, [pc, #340]	@ (80109c4 <CELL_MSG2+0x16c>)
 801086e:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010872:	2b00      	cmp	r3, #0
 8010874:	f040 80a0 	bne.w	80109b8 <CELL_MSG2+0x160>
		return;
	HAL_UART_AbortReceive( &hlpuart1 );
 8010878:	4853      	ldr	r0, [pc, #332]	@ (80109c8 <CELL_MSG2+0x170>)
 801087a:	f012 fa8f 	bl	8022d9c <HAL_UART_AbortReceive>
	uint8_t receivedData [ 5000 ] = {0};
 801087e:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8010882:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8010886:	2200      	movs	r2, #0
 8010888:	601a      	str	r2, [r3, #0]
 801088a:	3304      	adds	r3, #4
 801088c:	f241 3284 	movw	r2, #4996	@ 0x1384
 8010890:	2100      	movs	r1, #0
 8010892:	4618      	mov	r0, r3
 8010894:	f016 fc6c 	bl	8027170 <memset>
	uint8_t test = 0;
 8010898:	2300      	movs	r3, #0
 801089a:	f507 529c 	add.w	r2, r7, #4992	@ 0x1380
 801089e:	f102 0217 	add.w	r2, r2, #23
 80108a2:	7013      	strb	r3, [r2, #0]

	do
	{
		if ( HAL_UART_Transmit(&hlpuart1, TX_Command, buf, Timer) != HAL_OK )
 80108a4:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80108a8:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80108b2:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	4b42      	ldr	r3, [pc, #264]	@ (80109c4 <CELL_MSG2+0x16c>)
 80108ba:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80108be:	4943      	ldr	r1, [pc, #268]	@ (80109cc <CELL_MSG2+0x174>)
 80108c0:	4841      	ldr	r0, [pc, #260]	@ (80109c8 <CELL_MSG2+0x170>)
 80108c2:	f011 ffcc 	bl	802285e <HAL_UART_Transmit>
 80108c6:	4603      	mov	r3, r0
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00e      	beq.n	80108ea <CELL_MSG2+0x92>
		{
			Cell_State = CELL_TX_CMD_ERR;
 80108cc:	4b3d      	ldr	r3, [pc, #244]	@ (80109c4 <CELL_MSG2+0x16c>)
 80108ce:	2204      	movs	r2, #4
 80108d0:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

#ifdef Log_Level_1
			Write_Log( LOG_ERROR);
 80108d4:	483e      	ldr	r0, [pc, #248]	@ (80109d0 <CELL_MSG2+0x178>)
 80108d6:	f7f6 f929 	bl	8006b2c <Write_Log>
			Log_End( LOG_STATE_RESULT, Cell_State);
 80108da:	4b3a      	ldr	r3, [pc, #232]	@ (80109c4 <CELL_MSG2+0x16c>)
 80108dc:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 80108e0:	4619      	mov	r1, r3
 80108e2:	483c      	ldr	r0, [pc, #240]	@ (80109d4 <CELL_MSG2+0x17c>)
 80108e4:	f7f6 f90a 	bl	8006afc <Log_End>
#endif // Log_Level_1
			return;
 80108e8:	e067      	b.n	80109ba <CELL_MSG2+0x162>
		}

		do
		{
			if (HAL_UART_Receive(&hlpuart1, &(receivedData[test++]), 1, Timer) != HAL_OK)
 80108ea:	f507 539c 	add.w	r3, r7, #4992	@ 0x1380
 80108ee:	f103 0317 	add.w	r3, r3, #23
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	1c5a      	adds	r2, r3, #1
 80108f6:	f507 519c 	add.w	r1, r7, #4992	@ 0x1380
 80108fa:	f101 0117 	add.w	r1, r1, #23
 80108fe:	700a      	strb	r2, [r1, #0]
 8010900:	461a      	mov	r2, r3
 8010902:	f107 0318 	add.w	r3, r7, #24
 8010906:	3b0c      	subs	r3, #12
 8010908:	1899      	adds	r1, r3, r2
 801090a:	4b2e      	ldr	r3, [pc, #184]	@ (80109c4 <CELL_MSG2+0x16c>)
 801090c:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010910:	2201      	movs	r2, #1
 8010912:	482d      	ldr	r0, [pc, #180]	@ (80109c8 <CELL_MSG2+0x170>)
 8010914:	f012 f841 	bl	802299a <HAL_UART_Receive>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d004      	beq.n	8010928 <CELL_MSG2+0xd0>
			{
				Cell_State = CELL_RX_CMD_ERR;
 801091e:	4b29      	ldr	r3, [pc, #164]	@ (80109c4 <CELL_MSG2+0x16c>)
 8010920:	2205      	movs	r2, #5
 8010922:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
				break;
 8010926:	e014      	b.n	8010952 <CELL_MSG2+0xfa>
			}
		} while (Size--);
 8010928:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 801092c:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010936:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 801093a:	1e5a      	subs	r2, r3, #1
 801093c:	f507 7166 	add.w	r1, r7, #920	@ 0x398
 8010940:	f5a1 7165 	sub.w	r1, r1, #916	@ 0x394
 8010944:	6809      	ldr	r1, [r1, #0]
 8010946:	f501 3174 	add.w	r1, r1, #249856	@ 0x3d000
 801094a:	f8c1 2350 	str.w	r2, [r1, #848]	@ 0x350
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1cb      	bne.n	80108ea <CELL_MSG2+0x92>
		Refresh_Watchdog;
 8010952:	4821      	ldr	r0, [pc, #132]	@ (80109d8 <CELL_MSG2+0x180>)
 8010954:	f00a fc3d 	bl	801b1d2 <HAL_IWDG_Refresh>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d001      	beq.n	8010962 <CELL_MSG2+0x10a>
 801095e:	f004 ff19 	bl	8015794 <Error_Handler>
	}while (Size--);
 8010962:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8010966:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010970:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010974:	1e5a      	subs	r2, r3, #1
 8010976:	f507 7166 	add.w	r1, r7, #920	@ 0x398
 801097a:	f5a1 7165 	sub.w	r1, r1, #916	@ 0x394
 801097e:	6809      	ldr	r1, [r1, #0]
 8010980:	f501 3174 	add.w	r1, r1, #249856	@ 0x3d000
 8010984:	f8c1 2350 	str.w	r2, [r1, #848]	@ 0x350
 8010988:	2b00      	cmp	r3, #0
 801098a:	d18b      	bne.n	80108a4 <CELL_MSG2+0x4c>

#ifdef Log_Level_2
	Write_Log( LOG_RX_ERR);
 801098c:	4813      	ldr	r0, [pc, #76]	@ (80109dc <CELL_MSG2+0x184>)
 801098e:	f7f6 f8cd 	bl	8006b2c <Write_Log>
	Log_End( LOG_STATE_RESULT, Cell_State);
 8010992:	4b0c      	ldr	r3, [pc, #48]	@ (80109c4 <CELL_MSG2+0x16c>)
 8010994:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010998:	4619      	mov	r1, r3
 801099a:	480e      	ldr	r0, [pc, #56]	@ (80109d4 <CELL_MSG2+0x17c>)
 801099c:	f7f6 f8ae 	bl	8006afc <Log_End>
#endif // Log_Level_2
	test = test + 1;
 80109a0:	f507 539c 	add.w	r3, r7, #4992	@ 0x1380
 80109a4:	f103 0317 	add.w	r3, r3, #23
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	3301      	adds	r3, #1
 80109ac:	f507 529c 	add.w	r2, r7, #4992	@ 0x1380
 80109b0:	f102 0217 	add.w	r2, r2, #23
 80109b4:	7013      	strb	r3, [r2, #0]
 80109b6:	e000      	b.n	80109ba <CELL_MSG2+0x162>
		return;
 80109b8:	bf00      	nop
}
 80109ba:	f507 579c 	add.w	r7, r7, #4992	@ 0x1380
 80109be:	3718      	adds	r7, #24
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	2007a330 	.word	0x2007a330
 80109c8:	2007d1c0 	.word	0x2007d1c0
 80109cc:	2007a93f 	.word	0x2007a93f
 80109d0:	0802f168 	.word	0x0802f168
 80109d4:	0802ea60 	.word	0x0802ea60
 80109d8:	2007d0bc 	.word	0x2007d0bc
 80109dc:	0802ea54 	.word	0x0802ea54

080109e0 <CELL_MSG4>:
	//	RESTORE_PRIMASK();
	test = test + 1;  // for debugging no effect on program
}

uint16_t CELL_MSG4( MEM_PTR *Data_Ptr)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
	uint16_t numOfBytesReceived = 0;
 80109e8:	2300      	movs	r3, #0
 80109ea:	81fb      	strh	r3, [r7, #14]
	Refresh_Watchdog;
 80109ec:	481f      	ldr	r0, [pc, #124]	@ (8010a6c <CELL_MSG4+0x8c>)
 80109ee:	f00a fbf0 	bl	801b1d2 <HAL_IWDG_Refresh>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <CELL_MSG4+0x1c>
 80109f8:	f004 fecc 	bl	8015794 <Error_Handler>
	Clear_Memory(Data_Ptr);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f7f5 fe40 	bl	8006682 <Clear_Memory>
	//	BACKUP_PRIMASK();
	//	DISABLE_IRQ(); // Disable all interrupts
	Cell_State = CELL_OK;
 8010a02:	4b1b      	ldr	r3, [pc, #108]	@ (8010a70 <CELL_MSG4+0x90>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
	// KCS need to handle all returns of HAL_UART_Transmit
	if ( HAL_UART_Transmit(&hlpuart1, TX_Command, buf, Timer) != HAL_OK )
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010a10:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	4b16      	ldr	r3, [pc, #88]	@ (8010a70 <CELL_MSG4+0x90>)
 8010a18:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010a1c:	4915      	ldr	r1, [pc, #84]	@ (8010a74 <CELL_MSG4+0x94>)
 8010a1e:	4816      	ldr	r0, [pc, #88]	@ (8010a78 <CELL_MSG4+0x98>)
 8010a20:	f011 ff1d 	bl	802285e <HAL_UART_Transmit>
 8010a24:	4603      	mov	r3, r0
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d005      	beq.n	8010a36 <CELL_MSG4+0x56>
	{
		Cell_State = CELL_TX_CMD_ERR;
 8010a2a:	4b11      	ldr	r3, [pc, #68]	@ (8010a70 <CELL_MSG4+0x90>)
 8010a2c:	2204      	movs	r2, #4
 8010a2e:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
		//		RESTORE_PRIMASK();

		return numOfBytesReceived;
 8010a32:	89fb      	ldrh	r3, [r7, #14]
 8010a34:	e016      	b.n	8010a64 <CELL_MSG4+0x84>
	}
	uint8_t test = 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	737b      	strb	r3, [r7, #13]
	uint32_t recTimer = 800;
 8010a3a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8010a3e:	60bb      	str	r3, [r7, #8]

	HAL_UART_Receive( &hlpuart1, receivedData, MEMORY_MAX, recTimer);
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8010a46:	490d      	ldr	r1, [pc, #52]	@ (8010a7c <CELL_MSG4+0x9c>)
 8010a48:	480b      	ldr	r0, [pc, #44]	@ (8010a78 <CELL_MSG4+0x98>)
 8010a4a:	f011 ffa6 	bl	802299a <HAL_UART_Receive>

	//	RESTORE_PRIMASK();
	test = test + 1;  // for debugging no effect on program
 8010a4e:	7b7b      	ldrb	r3, [r7, #13]
 8010a50:	3301      	adds	r3, #1
 8010a52:	737b      	strb	r3, [r7, #13]
	numOfBytesReceived = MEMORY_MAX - hlpuart1.RxXferCount; // -1 ????
 8010a54:	4b08      	ldr	r3, [pc, #32]	@ (8010a78 <CELL_MSG4+0x98>)
 8010a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 8010a60:	81fb      	strh	r3, [r7, #14]
	return numOfBytesReceived;
 8010a62:	89fb      	ldrh	r3, [r7, #14]

}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	2007d0bc 	.word	0x2007d0bc
 8010a70:	2007a330 	.word	0x2007a330
 8010a74:	2007a93f 	.word	0x2007a93f
 8010a78:	2007d1c0 	.word	0x2007d1c0
 8010a7c:	2007be74 	.word	0x2007be74

08010a80 <CELL_MSG5>:

void CELL_MSG5( MEM_PTR *Data_Ptr)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
	{
		Refresh_Watchdog;
 8010a88:	4826      	ldr	r0, [pc, #152]	@ (8010b24 <CELL_MSG5+0xa4>)
 8010a8a:	f00a fba2 	bl	801b1d2 <HAL_IWDG_Refresh>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d001      	beq.n	8010a98 <CELL_MSG5+0x18>
 8010a94:	f004 fe7e 	bl	8015794 <Error_Handler>
		//	if ( Cell_State != CELL_OK )
		//		return;

		//uint8_t receivedData [ 2000 ] = {0};
		// kcs
		HAL_UART_AbortReceive(&hlpuart1);
 8010a98:	4823      	ldr	r0, [pc, #140]	@ (8010b28 <CELL_MSG5+0xa8>)
 8010a9a:	f012 f97f 	bl	8022d9c <HAL_UART_AbortReceive>

		if ( HAL_UART_Transmit(&hlpuart1, TX_Command, buf, Timer) != HAL_OK )
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010aa4:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010aa8:	b29a      	uxth	r2, r3
 8010aaa:	4b20      	ldr	r3, [pc, #128]	@ (8010b2c <CELL_MSG5+0xac>)
 8010aac:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010ab0:	491f      	ldr	r1, [pc, #124]	@ (8010b30 <CELL_MSG5+0xb0>)
 8010ab2:	481d      	ldr	r0, [pc, #116]	@ (8010b28 <CELL_MSG5+0xa8>)
 8010ab4:	f011 fed3 	bl	802285e <HAL_UART_Transmit>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d00e      	beq.n	8010adc <CELL_MSG5+0x5c>
		{
			Cell_State = CELL_TX_CMD_ERR;
 8010abe:	4b1b      	ldr	r3, [pc, #108]	@ (8010b2c <CELL_MSG5+0xac>)
 8010ac0:	2204      	movs	r2, #4
 8010ac2:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

#ifdef Log_Level_1
			Write_Log( LOG_ERROR);
 8010ac6:	481b      	ldr	r0, [pc, #108]	@ (8010b34 <CELL_MSG5+0xb4>)
 8010ac8:	f7f6 f830 	bl	8006b2c <Write_Log>
			Log_End( LOG_STATE_RESULT, Cell_State);
 8010acc:	4b17      	ldr	r3, [pc, #92]	@ (8010b2c <CELL_MSG5+0xac>)
 8010ace:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	4818      	ldr	r0, [pc, #96]	@ (8010b38 <CELL_MSG5+0xb8>)
 8010ad6:	f7f6 f811 	bl	8006afc <Log_End>
#endif // Log_Level_1

			return;
 8010ada:	e020      	b.n	8010b1e <CELL_MSG5+0x9e>
		}

		uint8_t test = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	73fb      	strb	r3, [r7, #15]


		if (HAL_UART_Receive( &hlpuart1, &(Memory[test++]), RxSize, Timer) != HAL_OK)
 8010ae0:	7bfb      	ldrb	r3, [r7, #15]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	73fa      	strb	r2, [r7, #15]
 8010ae6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010aea:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	18d1      	adds	r1, r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010af8:	f8b3 2354 	ldrh.w	r2, [r3, #852]	@ 0x354
 8010afc:	4b0b      	ldr	r3, [pc, #44]	@ (8010b2c <CELL_MSG5+0xac>)
 8010afe:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010b02:	4809      	ldr	r0, [pc, #36]	@ (8010b28 <CELL_MSG5+0xa8>)
 8010b04:	f011 ff49 	bl	802299a <HAL_UART_Receive>
 8010b08:	4603      	mov	r3, r0
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d004      	beq.n	8010b18 <CELL_MSG5+0x98>
		{
			Cell_State = CELL_RX_CMD_ERR;
 8010b0e:	4b07      	ldr	r3, [pc, #28]	@ (8010b2c <CELL_MSG5+0xac>)
 8010b10:	2205      	movs	r2, #5
 8010b12:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680
			return;
 8010b16:	e002      	b.n	8010b1e <CELL_MSG5+0x9e>

		}



		test = test + 1;
 8010b18:	7bfb      	ldrb	r3, [r7, #15]
 8010b1a:	3301      	adds	r3, #1
 8010b1c:	73fb      	strb	r3, [r7, #15]
	}

}
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}
 8010b24:	2007d0bc 	.word	0x2007d0bc
 8010b28:	2007d1c0 	.word	0x2007d1c0
 8010b2c:	2007a330 	.word	0x2007a330
 8010b30:	2007a93f 	.word	0x2007a93f
 8010b34:	0802f168 	.word	0x0802f168
 8010b38:	0802ea60 	.word	0x0802ea60

08010b3c <CELL_READ_URC>:

/******************************************************
Read the UART RX
 ******************************************************/
uint16_t CELL_READ_URC(MEM_PTR *Data_Ptr)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
	if (Cell_State != CELL_OK)
 8010b44:	4b23      	ldr	r3, [pc, #140]	@ (8010bd4 <CELL_READ_URC+0x98>)
 8010b46:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <CELL_READ_URC+0x16>
		return 0;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e03c      	b.n	8010bcc <CELL_READ_URC+0x90>

	uint8_t test = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	73fb      	strb	r3, [r7, #15]
	uint8_t fetchsize = 1; // test++  for test+=1 for fetchsize test+=fetchsize;
 8010b56:	2301      	movs	r3, #1
 8010b58:	73bb      	strb	r3, [r7, #14]
	do
	{
		if (HAL_UART_Receive(&hlpuart1, &(Memory[test+=fetchsize]), fetchsize, Timer) != HAL_OK)
 8010b5a:	7bfa      	ldrb	r2, [r7, #15]
 8010b5c:	7bbb      	ldrb	r3, [r7, #14]
 8010b5e:	4413      	add	r3, r2
 8010b60:	73fb      	strb	r3, [r7, #15]
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010b68:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010b6c:	687a      	ldr	r2, [r7, #4]
 8010b6e:	18d1      	adds	r1, r2, r3
 8010b70:	7bbb      	ldrb	r3, [r7, #14]
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	4b17      	ldr	r3, [pc, #92]	@ (8010bd4 <CELL_READ_URC+0x98>)
 8010b76:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 8010b7a:	4817      	ldr	r0, [pc, #92]	@ (8010bd8 <CELL_READ_URC+0x9c>)
 8010b7c:	f011 ff0d 	bl	802299a <HAL_UART_Receive>
			//Log_End( LOG_STATE_RESULT, Cell_State);
#endif // Log_Level_2
		}

		// KCS add check for last curly brace
		if (Memory[test-1]== 125) //125 is ascii char '}'
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	3b01      	subs	r3, #1
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	4413      	add	r3, r2
 8010b88:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010b8c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b7d      	cmp	r3, #125	@ 0x7d
 8010b94:	d00d      	beq.n	8010bb2 <CELL_READ_URC+0x76>
		{
			break;
		}
	} while (Size--);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010b9c:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010ba0:	1e5a      	subs	r2, r3, #1
 8010ba2:	6879      	ldr	r1, [r7, #4]
 8010ba4:	f501 3174 	add.w	r1, r1, #249856	@ 0x3d000
 8010ba8:	f8c1 2350 	str.w	r2, [r1, #848]	@ 0x350
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1d4      	bne.n	8010b5a <CELL_READ_URC+0x1e>
 8010bb0:	e000      	b.n	8010bb4 <CELL_READ_URC+0x78>
			break;
 8010bb2:	bf00      	nop

#ifdef Log_Level_2
	Write_Log( LOG_RX_ERR);
 8010bb4:	4809      	ldr	r0, [pc, #36]	@ (8010bdc <CELL_READ_URC+0xa0>)
 8010bb6:	f7f5 ffb9 	bl	8006b2c <Write_Log>
	Log_End( LOG_STATE_RESULT, Cell_State);
 8010bba:	4b06      	ldr	r3, [pc, #24]	@ (8010bd4 <CELL_READ_URC+0x98>)
 8010bbc:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	4807      	ldr	r0, [pc, #28]	@ (8010be0 <CELL_READ_URC+0xa4>)
 8010bc4:	f7f5 ff9a 	bl	8006afc <Log_End>
#endif // Log_Level_2
	return test;
 8010bc8:	7bfb      	ldrb	r3, [r7, #15]
 8010bca:	b29b      	uxth	r3, r3
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3710      	adds	r7, #16
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	2007a330 	.word	0x2007a330
 8010bd8:	2007d1c0 	.word	0x2007d1c0
 8010bdc:	0802ea54 	.word	0x0802ea54
 8010be0:	0802ea60 	.word	0x0802ea60

08010be4 <checkCellOk>:

/******************************************************
This searches the received UART message for OK string
 ******************************************************/
void checkCellOk(MEM_PTR *Data_Ptr, CELL_STATE CODE)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
 8010bec:	460b      	mov	r3, r1
 8010bee:	70fb      	strb	r3, [r7, #3]
	Size = 0;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
	do
	{
		if ((Memory[ Size]) == '\n')
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c04:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c10:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	2b0a      	cmp	r3, #10
 8010c18:	d176      	bne.n	8010d08 <checkCellOk+0x124>
		{
			if ((Memory[ Size + 1]) == 'O' && (Memory[ Size + 2]) == 'K')
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c20:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010c24:	3301      	adds	r3, #1
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	4413      	add	r3, r2
 8010c2a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c2e:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b4f      	cmp	r3, #79	@ 0x4f
 8010c36:	d167      	bne.n	8010d08 <checkCellOk+0x124>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c3e:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010c42:	3302      	adds	r3, #2
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	4413      	add	r3, r2
 8010c48:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c4c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	2b4b      	cmp	r3, #75	@ 0x4b
 8010c54:	d158      	bne.n	8010d08 <checkCellOk+0x124>
			{
				Memory[ Size + 1] = 0;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c5c:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010c60:	3301      	adds	r3, #1
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	4413      	add	r3, r2
 8010c66:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c6a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010c6e:	2200      	movs	r2, #0
 8010c70:	701a      	strb	r2, [r3, #0]
				Memory[ Size + 2] = 0;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c78:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010c7c:	3302      	adds	r3, #2
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	4413      	add	r3, r2
 8010c82:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c86:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	701a      	strb	r2, [r3, #0]
				Memory[ Size + 3] = 0;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010c94:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010c98:	3303      	adds	r3, #3
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010ca2:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	701a      	strb	r2, [r3, #0]
				Memory[ Size + 4] = 0;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010cb0:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	4413      	add	r3, r2
 8010cba:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010cbe:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	701a      	strb	r2, [r3, #0]

				Cell_State = CELL_OK;
 8010cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8010d7c <checkCellOk+0x198>)
 8010cc8:	2200      	movs	r2, #0
 8010cca:	f883 2680 	strb.w	r2, [r3, #1664]	@ 0x680

#ifdef Log_Level_1
				if (Setting & LOG_LEVEL_1 && Setting & LOG_LEVEL_2)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010cd4:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8010cd8:	f003 0302 	and.w	r3, r3, #2
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d049      	beq.n	8010d74 <checkCellOk+0x190>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010ce6:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8010cea:	f003 0304 	and.w	r3, r3, #4
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d040      	beq.n	8010d74 <checkCellOk+0x190>
				{
					Write_Log( LOG_SUCCESS);
 8010cf2:	4823      	ldr	r0, [pc, #140]	@ (8010d80 <checkCellOk+0x19c>)
 8010cf4:	f7f5 ff1a 	bl	8006b2c <Write_Log>
					Log_End( LOG_STATE_RESULT, Cell_State);
 8010cf8:	4b20      	ldr	r3, [pc, #128]	@ (8010d7c <checkCellOk+0x198>)
 8010cfa:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010cfe:	4619      	mov	r1, r3
 8010d00:	4820      	ldr	r0, [pc, #128]	@ (8010d84 <checkCellOk+0x1a0>)
 8010d02:	f7f5 fefb 	bl	8006afc <Log_End>
				}
#endif // Log_Level_1

				return;
 8010d06:	e035      	b.n	8010d74 <checkCellOk+0x190>
			}
		}
	} while (Memory[ Size++]);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010d0e:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8010d12:	1c5a      	adds	r2, r3, #1
 8010d14:	6879      	ldr	r1, [r7, #4]
 8010d16:	f501 3174 	add.w	r1, r1, #249856	@ 0x3d000
 8010d1a:	f8c1 2350 	str.w	r2, [r1, #848]	@ 0x350
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	4413      	add	r3, r2
 8010d22:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010d26:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f47f af66 	bne.w	8010bfe <checkCellOk+0x1a>
	Cell_State = CODE;
 8010d32:	4a12      	ldr	r2, [pc, #72]	@ (8010d7c <checkCellOk+0x198>)
 8010d34:	78fb      	ldrb	r3, [r7, #3]
 8010d36:	f882 3680 	strb.w	r3, [r2, #1664]	@ 0x680

#ifdef Log_Level_1
	if ( Setting & LOG_LEVEL_1 && Setting & LOG_LEVEL_2 )
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010d40:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8010d44:	f003 0302 	and.w	r3, r3, #2
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d014      	beq.n	8010d76 <checkCellOk+0x192>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010d52:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 8010d56:	f003 0304 	and.w	r3, r3, #4
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00b      	beq.n	8010d76 <checkCellOk+0x192>
	{
		Write_Log( LOG_ERROR);
 8010d5e:	480a      	ldr	r0, [pc, #40]	@ (8010d88 <checkCellOk+0x1a4>)
 8010d60:	f7f5 fee4 	bl	8006b2c <Write_Log>
		Log_End( LOG_STATE_RESULT, Cell_State);
 8010d64:	4b05      	ldr	r3, [pc, #20]	@ (8010d7c <checkCellOk+0x198>)
 8010d66:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	4805      	ldr	r0, [pc, #20]	@ (8010d84 <checkCellOk+0x1a0>)
 8010d6e:	f7f5 fec5 	bl	8006afc <Log_End>
 8010d72:	e000      	b.n	8010d76 <checkCellOk+0x192>
				return;
 8010d74:	bf00      	nop
	} // Log_Level_1
#endif
}
 8010d76:	3708      	adds	r7, #8
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	2007a330 	.word	0x2007a330
 8010d80:	0802eec8 	.word	0x0802eec8
 8010d84:	0802ea60 	.word	0x0802ea60
 8010d88:	0802f168 	.word	0x0802f168

08010d8c <CELL_Build_MSG>:
 Creates command with input function as well as
 parameterizes values for command. First call will
 require the Buffer = 0 from user
 ******************************************************/
void CELL_Build_MSG( MEM_PTR *Data_Ptr, char *MSG )
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
	//	if (Cell_State != CELL_OK)
	//		return;

	if (*(MSG) == '\1')
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d109      	bne.n	8010db2 <CELL_Build_MSG+0x26>
	{
		buf = 0;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010da4:	461a      	mov	r2, r3
 8010da6:	2300      	movs	r3, #0
 8010da8:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
		MSG++;
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	3301      	adds	r3, #1
 8010db0:	603b      	str	r3, [r7, #0]
	}

	do
	{
		TX_Command[ buf++] = *(MSG)++;
 8010db2:	683a      	ldr	r2, [r7, #0]
 8010db4:	1c53      	adds	r3, r2, #1
 8010db6:	603b      	str	r3, [r7, #0]
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010dbe:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010dc2:	1c59      	adds	r1, r3, #1
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f500 3074 	add.w	r0, r0, #249856	@ 0x3d000
 8010dca:	f8c0 134c 	str.w	r1, [r0, #844]	@ 0x34c
 8010dce:	7811      	ldrb	r1, [r2, #0]
 8010dd0:	4a07      	ldr	r2, [pc, #28]	@ (8010df0 <CELL_Build_MSG+0x64>)
 8010dd2:	4413      	add	r3, r2
 8010dd4:	460a      	mov	r2, r1
 8010dd6:	f883 260f 	strb.w	r2, [r3, #1551]	@ 0x60f
	} while (*(MSG));
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1e7      	bne.n	8010db2 <CELL_Build_MSG+0x26>

	return;
 8010de2:	bf00      	nop
}
 8010de4:	370c      	adds	r7, #12
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	2007a330 	.word	0x2007a330

08010df4 <Clear_Command>:
/******************************************************
 Command Clean
 Clears Command storage space
 ******************************************************/
void Clear_Command(MEM_PTR *Data_Ptr)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
	buf = CMD_FLASH_SIZE - 1;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010e02:	461a      	mov	r2, r3
 8010e04:	2363      	movs	r3, #99	@ 0x63
 8010e06:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
	while (buf)
 8010e0a:	e00f      	b.n	8010e2c <Clear_Command+0x38>
		TX_Command[ buf--] = 0;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010e12:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010e16:	1e5a      	subs	r2, r3, #1
 8010e18:	6879      	ldr	r1, [r7, #4]
 8010e1a:	f501 3174 	add.w	r1, r1, #249856	@ 0x3d000
 8010e1e:	f8c1 234c 	str.w	r2, [r1, #844]	@ 0x34c
 8010e22:	4a09      	ldr	r2, [pc, #36]	@ (8010e48 <Clear_Command+0x54>)
 8010e24:	4413      	add	r3, r2
 8010e26:	2200      	movs	r2, #0
 8010e28:	f883 260f 	strb.w	r2, [r3, #1551]	@ 0x60f
	while (buf)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010e32:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1e8      	bne.n	8010e0c <Clear_Command+0x18>
}
 8010e3a:	bf00      	nop
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr
 8010e48:	2007a330 	.word	0x2007a330

08010e4c <CELL_Set_Command>:
/******************************************************
 Memory Location
 Clears Location storage space
 ******************************************************/
void CELL_Set_Command(CELL_CMD_TYPE Input)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b083      	sub	sp, #12
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
	Command = Input;
 8010e56:	4a05      	ldr	r2, [pc, #20]	@ (8010e6c <CELL_Set_Command+0x20>)
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	f882 360e 	strb.w	r3, [r2, #1550]	@ 0x60e
}
 8010e5e:	bf00      	nop
 8010e60:	370c      	adds	r7, #12
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	2007a330 	.word	0x2007a330

08010e70 <CELL_Set_PDP>:

void CELL_Set_PDP(CELL_CMD_TYPE Input)
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	4603      	mov	r3, r0
 8010e78:	71fb      	strb	r3, [r7, #7]
	PDP = Input;
 8010e7a:	4a05      	ldr	r2, [pc, #20]	@ (8010e90 <CELL_Set_PDP+0x20>)
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	f882 3681 	strb.w	r3, [r2, #1665]	@ 0x681
}
 8010e82:	bf00      	nop
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	2007a330 	.word	0x2007a330

08010e94 <CELL_Get_State>:

CELL_STATE CELL_Get_State(void)
{
 8010e94:	b480      	push	{r7}
 8010e96:	af00      	add	r7, sp, #0
	return Cell_State;
 8010e98:	4b03      	ldr	r3, [pc, #12]	@ (8010ea8 <CELL_Get_State+0x14>)
 8010e9a:	f893 3680 	ldrb.w	r3, [r3, #1664]	@ 0x680
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr
 8010ea8:	2007a330 	.word	0x2007a330

08010eac <resendMissingPackets>:


uint16_t resendMissingPackets(MEM_PTR *Data_Ptr, uint16_t missingPagesCount)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b08a      	sub	sp, #40	@ 0x28
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	807b      	strh	r3, [r7, #2]
	uint16_t packetsSent = 0;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	84fb      	strh	r3, [r7, #38]	@ 0x26
	int counter;

	for (counter = 0; counter < missingPagesCount; counter++)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	623b      	str	r3, [r7, #32]
 8010ec0:	e19f      	b.n	8011202 <resendMissingPackets+0x356>
	{
		Refresh_Watchdog;
 8010ec2:	4890      	ldr	r0, [pc, #576]	@ (8011104 <resendMissingPackets+0x258>)
 8010ec4:	f00a f985 	bl	801b1d2 <HAL_IWDG_Refresh>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d001      	beq.n	8010ed2 <resendMissingPackets+0x26>
 8010ece:	f004 fc61 	bl	8015794 <Error_Handler>
		Command = CHECK;
 8010ed2:	4b8d      	ldr	r3, [pc, #564]	@ (8011108 <resendMissingPackets+0x25c>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7fd fdce 	bl	800ea7c <CELL_COMMAND>

		Clear_Memory(Data_Ptr);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7f5 fbce 	bl	8006682 <Clear_Memory>

		int packetResendLength = pageIndexArray[pagesToResend[counter]].stopIndex - pageIndexArray[pagesToResend[counter]].startIndex;
 8010ee6:	4a89      	ldr	r2, [pc, #548]	@ (801110c <resendMissingPackets+0x260>)
 8010ee8:	6a3b      	ldr	r3, [r7, #32]
 8010eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010eee:	4a88      	ldr	r2, [pc, #544]	@ (8011110 <resendMissingPackets+0x264>)
 8010ef0:	009b      	lsls	r3, r3, #2
 8010ef2:	4413      	add	r3, r2
 8010ef4:	885b      	ldrh	r3, [r3, #2]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4a84      	ldr	r2, [pc, #528]	@ (801110c <resendMissingPackets+0x260>)
 8010efa:	6a3b      	ldr	r3, [r7, #32]
 8010efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f00:	461a      	mov	r2, r3
 8010f02:	4b83      	ldr	r3, [pc, #524]	@ (8011110 <resendMissingPackets+0x264>)
 8010f04:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8010f08:	1acb      	subs	r3, r1, r3
 8010f0a:	617b      	str	r3, [r7, #20]

		Data_Length = packetResendLength;
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	4b7d      	ldr	r3, [pc, #500]	@ (8011108 <resendMissingPackets+0x25c>)
 8010f12:	869a      	strh	r2, [r3, #52]	@ 0x34

		Checksum = HAL_CRC_Calculate(&hcrc,
				(uint32_t*) &Data_Ptr->Camera_Data.encoded[ pageIndexArray[counter].startIndex],
 8010f14:	4a7e      	ldr	r2, [pc, #504]	@ (8011110 <resendMissingPackets+0x264>)
 8010f16:	6a3b      	ldr	r3, [r7, #32]
 8010f18:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010f1c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8010f20:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	18d1      	adds	r1, r2, r3
				(uint32_t) (Data_Length / 4));
 8010f28:	4b77      	ldr	r3, [pc, #476]	@ (8011108 <resendMissingPackets+0x25c>)
 8010f2a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
		Checksum = HAL_CRC_Calculate(&hcrc,
 8010f2c:	089b      	lsrs	r3, r3, #2
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	461a      	mov	r2, r3
 8010f32:	4878      	ldr	r0, [pc, #480]	@ (8011114 <resendMissingPackets+0x268>)
 8010f34:	f007 fd16 	bl	8018964 <HAL_CRC_Calculate>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	4a73      	ldr	r2, [pc, #460]	@ (8011108 <resendMissingPackets+0x25c>)
 8010f3c:	6313      	str	r3, [r2, #48]	@ 0x30

		// kcs/Gage we need to stop using things inside of the big memory structure
		buf = 0;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8010f44:	461a      	mov	r2, r3
 8010f46:	2300      	movs	r3, #0
 8010f48:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c

		Build_MSG(Data_Ptr, MQTT_HEAD_MASK_START);
 8010f4c:	4972      	ldr	r1, [pc, #456]	@ (8011118 <resendMissingPackets+0x26c>)
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f7f5 fd14 	bl	800697c <Build_MSG>
		utoa( UNIQUE_Device_ID, Header, 10);
 8010f54:	4b71      	ldr	r3, [pc, #452]	@ (801111c <resendMissingPackets+0x270>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	220a      	movs	r2, #10
 8010f5a:	4971      	ldr	r1, [pc, #452]	@ (8011120 <resendMissingPackets+0x274>)
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f015 f8f5 	bl	802614c <utoa>
		Build_MSG(Data_Ptr, Header);
 8010f62:	496f      	ldr	r1, [pc, #444]	@ (8011120 <resendMissingPackets+0x274>)
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7f5 fd09 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_HEAD_MASK_END);
 8010f6a:	496e      	ldr	r1, [pc, #440]	@ (8011124 <resendMissingPackets+0x278>)
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f7f5 fd05 	bl	800697c <Build_MSG>
		Word_Transfer( Event_Type, MQTT_PIC_EVENT);
 8010f72:	496d      	ldr	r1, [pc, #436]	@ (8011128 <resendMissingPackets+0x27c>)
 8010f74:	486d      	ldr	r0, [pc, #436]	@ (801112c <resendMissingPackets+0x280>)
 8010f76:	f7f5 fbdd 	bl	8006734 <Word_Transfer>
		Build_MSG(Data_Ptr, Event_Type);
 8010f7a:	496c      	ldr	r1, [pc, #432]	@ (801112c <resendMissingPackets+0x280>)
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f7f5 fcfd 	bl	800697c <Build_MSG>

		Word_Transfer( Event_Type, MQTT_PIC_picID_EVENT);
 8010f82:	496b      	ldr	r1, [pc, #428]	@ (8011130 <resendMissingPackets+0x284>)
 8010f84:	4869      	ldr	r0, [pc, #420]	@ (801112c <resendMissingPackets+0x280>)
 8010f86:	f7f5 fbd5 	bl	8006734 <Word_Transfer>
		Build_MSG(Data_Ptr, Event_Type);
 8010f8a:	4968      	ldr	r1, [pc, #416]	@ (801112c <resendMissingPackets+0x280>)
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7f5 fcf5 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, Picture_ID);
 8010f92:	4968      	ldr	r1, [pc, #416]	@ (8011134 <resendMissingPackets+0x288>)
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7f5 fcf1 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_STRI);
 8010f9a:	4967      	ldr	r1, [pc, #412]	@ (8011138 <resendMissingPackets+0x28c>)
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7f5 fced 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_APND);
 8010fa2:	4966      	ldr	r1, [pc, #408]	@ (801113c <resendMissingPackets+0x290>)
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f7f5 fce9 	bl	800697c <Build_MSG>

		Word_Transfer( Event_Type, MQTT_PIC_Page_EVENT);
 8010faa:	4965      	ldr	r1, [pc, #404]	@ (8011140 <resendMissingPackets+0x294>)
 8010fac:	485f      	ldr	r0, [pc, #380]	@ (801112c <resendMissingPackets+0x280>)
 8010fae:	f7f5 fbc1 	bl	8006734 <Word_Transfer>
		// kcs fix page
		utoa( pagesToResend[counter], Header, 10);
 8010fb2:	4a56      	ldr	r2, [pc, #344]	@ (801110c <resendMissingPackets+0x260>)
 8010fb4:	6a3b      	ldr	r3, [r7, #32]
 8010fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fba:	220a      	movs	r2, #10
 8010fbc:	4958      	ldr	r1, [pc, #352]	@ (8011120 <resendMissingPackets+0x274>)
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f015 f8c4 	bl	802614c <utoa>
		Build_MSG(Data_Ptr, Event_Type);
 8010fc4:	4959      	ldr	r1, [pc, #356]	@ (801112c <resendMissingPackets+0x280>)
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7f5 fcd8 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, Header);
 8010fcc:	4954      	ldr	r1, [pc, #336]	@ (8011120 <resendMissingPackets+0x274>)
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f7f5 fcd4 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_STRI);
 8010fd4:	4958      	ldr	r1, [pc, #352]	@ (8011138 <resendMissingPackets+0x28c>)
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f7f5 fcd0 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_APND);
 8010fdc:	4957      	ldr	r1, [pc, #348]	@ (801113c <resendMissingPackets+0x290>)
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f7f5 fccc 	bl	800697c <Build_MSG>

		Word_Transfer( Event_Type, MQTT_PIC_Total_Page_EVENT);
 8010fe4:	4957      	ldr	r1, [pc, #348]	@ (8011144 <resendMissingPackets+0x298>)
 8010fe6:	4851      	ldr	r0, [pc, #324]	@ (801112c <resendMissingPackets+0x280>)
 8010fe8:	f7f5 fba4 	bl	8006734 <Word_Transfer>
		utoa( Total_Page, Header, 10);
 8010fec:	4b46      	ldr	r3, [pc, #280]	@ (8011108 <resendMissingPackets+0x25c>)
 8010fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010ff0:	220a      	movs	r2, #10
 8010ff2:	494b      	ldr	r1, [pc, #300]	@ (8011120 <resendMissingPackets+0x274>)
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f015 f8a9 	bl	802614c <utoa>
		Build_MSG(Data_Ptr, Event_Type);
 8010ffa:	494c      	ldr	r1, [pc, #304]	@ (801112c <resendMissingPackets+0x280>)
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f7f5 fcbd 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, Header);
 8011002:	4947      	ldr	r1, [pc, #284]	@ (8011120 <resendMissingPackets+0x274>)
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7f5 fcb9 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_STRI);
 801100a:	494b      	ldr	r1, [pc, #300]	@ (8011138 <resendMissingPackets+0x28c>)
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f7f5 fcb5 	bl	800697c <Build_MSG>
		Build_MSG(Data_Ptr, MQTT_APND);
 8011012:	494a      	ldr	r1, [pc, #296]	@ (801113c <resendMissingPackets+0x290>)
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7f5 fcb1 	bl	800697c <Build_MSG>

		Word_Transfer( Event_Type, MQTT_PIC_DATA_EVENT);
 801101a:	494b      	ldr	r1, [pc, #300]	@ (8011148 <resendMissingPackets+0x29c>)
 801101c:	4843      	ldr	r0, [pc, #268]	@ (801112c <resendMissingPackets+0x280>)
 801101e:	f7f5 fb89 	bl	8006734 <Word_Transfer>
		Build_MSG(Data_Ptr, Event_Type);
 8011022:	4942      	ldr	r1, [pc, #264]	@ (801112c <resendMissingPackets+0x280>)
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7f5 fca9 	bl	800697c <Build_MSG>
		// kcs here is the problem setting buf back to 0
		// set beginning and end
		int packetStart = pageIndexArray[pagesToResend[counter]].startIndex;
 801102a:	4a38      	ldr	r2, [pc, #224]	@ (801110c <resendMissingPackets+0x260>)
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011032:	461a      	mov	r2, r3
 8011034:	4b36      	ldr	r3, [pc, #216]	@ (8011110 <resendMissingPackets+0x264>)
 8011036:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 801103a:	61fb      	str	r3, [r7, #28]
		int memoryCounter;
		for(memoryCounter=0; memoryCounter <= packetResendLength; memoryCounter++)
 801103c:	2300      	movs	r3, #0
 801103e:	61bb      	str	r3, [r7, #24]
 8011040:	e01f      	b.n	8011082 <resendMissingPackets+0x1d6>
		{
			Memory[buf++] = Data_Ptr->Camera_Data.encoded[packetStart++];
 8011042:	69fb      	ldr	r3, [r7, #28]
 8011044:	1c5a      	adds	r2, r3, #1
 8011046:	61fa      	str	r2, [r7, #28]
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 801104e:	f8d2 234c 	ldr.w	r2, [r2, #844]	@ 0x34c
 8011052:	1c51      	adds	r1, r2, #1
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f500 3074 	add.w	r0, r0, #249856	@ 0x3d000
 801105a:	f8c0 134c 	str.w	r1, [r0, #844]	@ 0x34c
 801105e:	6879      	ldr	r1, [r7, #4]
 8011060:	440b      	add	r3, r1
 8011062:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011066:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801106a:	7819      	ldrb	r1, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	4413      	add	r3, r2
 8011070:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011074:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011078:	460a      	mov	r2, r1
 801107a:	701a      	strb	r2, [r3, #0]
		for(memoryCounter=0; memoryCounter <= packetResendLength; memoryCounter++)
 801107c:	69bb      	ldr	r3, [r7, #24]
 801107e:	3301      	adds	r3, #1
 8011080:	61bb      	str	r3, [r7, #24]
 8011082:	69ba      	ldr	r2, [r7, #24]
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	429a      	cmp	r2, r3
 8011088:	dddb      	ble.n	8011042 <resendMissingPackets+0x196>
		}
		Build_MSG(Data_Ptr, MQTT_TAIL_MASK);
 801108a:	4930      	ldr	r1, [pc, #192]	@ (801114c <resendMissingPackets+0x2a0>)
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7f5 fc75 	bl	800697c <Build_MSG>
		Size = buf;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011098:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80110a2:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

		// Potentially can be lower tnis 500 ms delay was needed for system stability
		HAL_Delay (500); // to add time between sending packets
 80110a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80110aa:	f005 f9eb 	bl	8016484 <HAL_Delay>

		Command = PUBLISH;
 80110ae:	4b16      	ldr	r3, [pc, #88]	@ (8011108 <resendMissingPackets+0x25c>)
 80110b0:	2210      	movs	r2, #16
 80110b2:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7fd fce0 	bl	800ea7c <CELL_COMMAND>

		HAL_UART_AbortReceive(&hlpuart1);
 80110bc:	4824      	ldr	r0, [pc, #144]	@ (8011150 <resendMissingPackets+0x2a4>)
 80110be:	f011 fe6d 	bl	8022d9c <HAL_UART_AbortReceive>
		// Ideally these 2 lines would be after the printout, but we need for timing with receive mode of "0"
		Timer = UART_WAIT_TIME;
 80110c2:	4b11      	ldr	r3, [pc, #68]	@ (8011108 <resendMissingPackets+0x25c>)
 80110c4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 80110c8:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
		HAL_UART_Transmit(&hlpuart1, Memory, Size, Timer);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f503 3174 	add.w	r1, r3, #249856	@ 0x3d000
 80110d2:	f501 715a 	add.w	r1, r1, #872	@ 0x368
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80110dc:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	4b09      	ldr	r3, [pc, #36]	@ (8011108 <resendMissingPackets+0x25c>)
 80110e4:	f8d3 367c 	ldr.w	r3, [r3, #1660]	@ 0x67c
 80110e8:	4819      	ldr	r0, [pc, #100]	@ (8011150 <resendMissingPackets+0x2a4>)
 80110ea:	f011 fbb8 	bl	802285e <HAL_UART_Transmit>

#ifdef SKYWIRE_MODEM_OUT
		Write_Log( LOG_MSG_DATA);
 80110ee:	4819      	ldr	r0, [pc, #100]	@ (8011154 <resendMissingPackets+0x2a8>)
 80110f0:	f7f5 fd1c 	bl	8006b2c <Write_Log>

		for (buf = 0; buf <= Size; buf += 1)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80110fa:	461a      	mov	r2, r3
 80110fc:	2300      	movs	r3, #0
 80110fe:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
 8011102:	e044      	b.n	801118e <resendMissingPackets+0x2e2>
 8011104:	2007d0bc 	.word	0x2007d0bc
 8011108:	2007a330 	.word	0x2007a330
 801110c:	2007a0cc 	.word	0x2007a0cc
 8011110:	2007bccc 	.word	0x2007bccc
 8011114:	2007d044 	.word	0x2007d044
 8011118:	0802e934 	.word	0x0802e934
 801111c:	0bfa0700 	.word	0x0bfa0700
 8011120:	2007a92f 	.word	0x2007a92f
 8011124:	0802e944 	.word	0x0802e944
 8011128:	0802e9b8 	.word	0x0802e9b8
 801112c:	2007a911 	.word	0x2007a911
 8011130:	0802e9c4 	.word	0x0802e9c4
 8011134:	2007a338 	.word	0x2007a338
 8011138:	0802e9d0 	.word	0x0802e9d0
 801113c:	0802e99c 	.word	0x0802e99c
 8011140:	0802e9d4 	.word	0x0802e9d4
 8011144:	0802e9e0 	.word	0x0802e9e0
 8011148:	0802e9f4 	.word	0x0802e9f4
 801114c:	0802e954 	.word	0x0802e954
 8011150:	2007d1c0 	.word	0x2007d1c0
 8011154:	0802ea00 	.word	0x0802ea00
		{
			vcom_Trace(&Memory[ buf], 1, 1);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801115e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011162:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011166:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801116a:	687a      	ldr	r2, [r7, #4]
 801116c:	4413      	add	r3, r2
 801116e:	2201      	movs	r2, #1
 8011170:	2101      	movs	r1, #1
 8011172:	4618      	mov	r0, r3
 8011174:	f7f5 fde0 	bl	8006d38 <vcom_Trace>
		for (buf = 0; buf <= Size; buf += 1)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801117e:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8011182:	3301      	adds	r3, #1
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 801118a:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011194:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801119e:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d9d8      	bls.n	8011158 <resendMissingPackets+0x2ac>
		}
		vcom_Trace((uint8_t*) "\r\n\r\n", 4, 1);
 80111a6:	2201      	movs	r2, #1
 80111a8:	2104      	movs	r1, #4
 80111aa:	4829      	ldr	r0, [pc, #164]	@ (8011250 <resendMissingPackets+0x3a4>)
 80111ac:	f7f5 fdc4 	bl	8006d38 <vcom_Trace>
			Timer = UART_WAIT_TIME;
			HAL_UART_Transmit(&hlpuart1, Memory, Size, Timer);
		}
		//These lines are to output the buffer size for each pic packet
		char Command_Buffer [ 10 ];
		utoa ( Size , Command_Buffer , DECIMAL );
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80111b6:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 80111ba:	f107 0108 	add.w	r1, r7, #8
 80111be:	220a      	movs	r2, #10
 80111c0:	4618      	mov	r0, r3
 80111c2:	f014 ffc3 	bl	802614c <utoa>
		vcom_Trace((uint8_t*) LOG_PKT_DATA, 16, 1);
 80111c6:	2201      	movs	r2, #1
 80111c8:	2110      	movs	r1, #16
 80111ca:	4822      	ldr	r0, [pc, #136]	@ (8011254 <resendMissingPackets+0x3a8>)
 80111cc:	f7f5 fdb4 	bl	8006d38 <vcom_Trace>
		vcom_Trace((uint8_t*) Command_Buffer, 4, 1);
 80111d0:	f107 0308 	add.w	r3, r7, #8
 80111d4:	2201      	movs	r2, #1
 80111d6:	2104      	movs	r1, #4
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f5 fdad 	bl	8006d38 <vcom_Trace>
		vcom_Trace((uint8_t*) "\r\n\r\n", 4, 1);
 80111de:	2201      	movs	r2, #1
 80111e0:	2104      	movs	r1, #4
 80111e2:	481b      	ldr	r0, [pc, #108]	@ (8011250 <resendMissingPackets+0x3a4>)
 80111e4:	f7f5 fda8 	bl	8006d38 <vcom_Trace>

#endif //SKYWIRE_MODEM_OUT

		buf = 0;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80111ee:	461a      	mov	r2, r3
 80111f0:	2300      	movs	r3, #0
 80111f2:	f8c2 334c 	str.w	r3, [r2, #844]	@ 0x34c
		packetsSent++;
 80111f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111f8:	3301      	adds	r3, #1
 80111fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for (counter = 0; counter < missingPagesCount; counter++)
 80111fc:	6a3b      	ldr	r3, [r7, #32]
 80111fe:	3301      	adds	r3, #1
 8011200:	623b      	str	r3, [r7, #32]
 8011202:	887b      	ldrh	r3, [r7, #2]
 8011204:	6a3a      	ldr	r2, [r7, #32]
 8011206:	429a      	cmp	r2, r3
 8011208:	f6ff ae5b 	blt.w	8010ec2 <resendMissingPackets+0x16>
	}

	missingPagesCount = 0;
 801120c:	2300      	movs	r3, #0
 801120e:	807b      	strh	r3, [r7, #2]

	if ( useRecvMode1 )
 8011210:	4b11      	ldr	r3, [pc, #68]	@ (8011258 <resendMissingPackets+0x3ac>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d016      	beq.n	8011246 <resendMissingPackets+0x39a>
	{
		//		KCS Fix this
		getFirmwareDownlink(Data_Ptr, 5);
 8011218:	2105      	movs	r1, #5
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f000 fa3c 	bl	8011698 <getFirmwareDownlink>
		if ( getMqttDataAvailable() )
 8011220:	f7f7 f8aa 	bl	8008378 <getMqttDataAvailable>
 8011224:	4603      	mov	r3, r0
 8011226:	2b00      	cmp	r3, #0
 8011228:	d005      	beq.n	8011236 <resendMissingPackets+0x38a>
		{
			universalDownlinkDecoder();
 801122a:	f7f6 f9cf 	bl	80075cc <universalDownlinkDecoder>
			selectDownlinkOperation(Data_Ptr, IMAGE_COMPLETE);
 801122e:	2101      	movs	r1, #1
 8011230:	6878      	ldr	r0, [r7, #4]
 8011232:	f7f6 fb1f 	bl	8007874 <selectDownlinkOperation>
		}

		if ( missingPagesCount > 0 )
 8011236:	887b      	ldrh	r3, [r7, #2]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d004      	beq.n	8011246 <resendMissingPackets+0x39a>
			resendMissingPackets(Data_Ptr, missingPagesCount);
 801123c:	887b      	ldrh	r3, [r7, #2]
 801123e:	4619      	mov	r1, r3
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff fe33 	bl	8010eac <resendMissingPackets>
	}

	return packetsSent;
 8011246:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26

}
 8011248:	4618      	mov	r0, r3
 801124a:	3728      	adds	r7, #40	@ 0x28
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}
 8011250:	0802ea14 	.word	0x0802ea14
 8011254:	0802ea1c 	.word	0x0802ea1c
 8011258:	20000357 	.word	0x20000357

0801125c <clearPicturePageIndex>:

void clearPicturePageIndex(void)
{
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
	int countArray;
	for(countArray=0; countArray <= 99; countArray++)
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
 8011266:	e00d      	b.n	8011284 <clearPicturePageIndex+0x28>
	{
		pageIndexArray[countArray].startIndex = 0;
 8011268:	4a0b      	ldr	r2, [pc, #44]	@ (8011298 <clearPicturePageIndex+0x3c>)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2100      	movs	r1, #0
 801126e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		pageIndexArray[countArray].stopIndex = 0;
 8011272:	4a09      	ldr	r2, [pc, #36]	@ (8011298 <clearPicturePageIndex+0x3c>)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	4413      	add	r3, r2
 801127a:	2200      	movs	r2, #0
 801127c:	805a      	strh	r2, [r3, #2]
	for(countArray=0; countArray <= 99; countArray++)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	3301      	adds	r3, #1
 8011282:	607b      	str	r3, [r7, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b63      	cmp	r3, #99	@ 0x63
 8011288:	ddee      	ble.n	8011268 <clearPicturePageIndex+0xc>
	}
}
 801128a:	bf00      	nop
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	2007bccc 	.word	0x2007bccc

0801129c <RecvMessageNum>:
 * @param char* ptr should be a pointer to a buffer that holds cell module response for number of messages in cell memory buffer ex 0,1,1,1,1,1)
 * @param MEM_PTR type Data_Ptr parameter used for cell commands
 * @retval void
 */
void RecvMessageNum(char* ptr,  MEM_PTR *Data_Ptr )
{
 801129c:	b580      	push	{r7, lr}
 801129e:	f5ad 6dbc 	sub.w	sp, sp, #1504	@ 0x5e0
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80112a8:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80112ac:	6018      	str	r0, [r3, #0]
 80112ae:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80112b2:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 80112b6:	6019      	str	r1, [r3, #0]
	char *RecvBuff[280] = {""};
 80112b8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80112bc:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80112c0:	4618      	mov	r0, r3
 80112c2:	f44f 638c 	mov.w	r3, #1120	@ 0x460
 80112c6:	461a      	mov	r2, r3
 80112c8:	2100      	movs	r1, #0
 80112ca:	f015 ff51 	bl	8027170 <memset>
 80112ce:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80112d2:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 80112d6:	4a5f      	ldr	r2, [pc, #380]	@ (8011454 <RecvMessageNum+0x1b8>)
 80112d8:	601a      	str	r2, [r3, #0]
	char Buff[280] = {""};
 80112da:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80112de:	f2a3 53b4 	subw	r3, r3, #1460	@ 0x5b4
 80112e2:	2200      	movs	r2, #0
 80112e4:	601a      	str	r2, [r3, #0]
 80112e6:	3304      	adds	r3, #4
 80112e8:	f44f 728a 	mov.w	r2, #276	@ 0x114
 80112ec:	2100      	movs	r1, #0
 80112ee:	4618      	mov	r0, r3
 80112f0:	f015 ff3e 	bl	8027170 <memset>
	bool printMQTT = false;
 80112f4:	2300      	movs	r3, #0
 80112f6:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7

	Word_Transfer(Buff, ptr);
 80112fa:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80112fe:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8011302:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8011306:	6819      	ldr	r1, [r3, #0]
 8011308:	4610      	mov	r0, r2
 801130a:	f7f5 fa13 	bl	8006734 <Word_Transfer>
	RecvBuff[0] = Buff;
 801130e:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011312:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8011316:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801131a:	601a      	str	r2, [r3, #0]

	int msgTokenCount = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
	char *msgTokens[7] = {0};
 8011322:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011326:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 801132a:	461a      	mov	r2, r3
 801132c:	2300      	movs	r3, #0
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	6053      	str	r3, [r2, #4]
 8011332:	6093      	str	r3, [r2, #8]
 8011334:	60d3      	str	r3, [r2, #12]
 8011336:	6113      	str	r3, [r2, #16]
 8011338:	6153      	str	r3, [r2, #20]
 801133a:	6193      	str	r3, [r2, #24]
	const char *colDelim = ":";
 801133c:	4b46      	ldr	r3, [pc, #280]	@ (8011458 <RecvMessageNum+0x1bc>)
 801133e:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
	const char *comDelim = ",";
 8011342:	4b46      	ldr	r3, [pc, #280]	@ (801145c <RecvMessageNum+0x1c0>)
 8011344:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc

	char *msgToken = strtok_r(*RecvBuff, colDelim, RecvBuff);
 8011348:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801134c:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8011356:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	@ 0x5d0
 801135a:	4618      	mov	r0, r3
 801135c:	f015 ff8a 	bl	8027274 <strtok_r>
 8011360:	f8c7 05d8 	str.w	r0, [r7, #1496]	@ 0x5d8
	Refresh_Watchdog;
 8011364:	483e      	ldr	r0, [pc, #248]	@ (8011460 <RecvMessageNum+0x1c4>)
 8011366:	f009 ff34 	bl	801b1d2 <HAL_IWDG_Refresh>
 801136a:	4603      	mov	r3, r0
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01b      	beq.n	80113a8 <RecvMessageNum+0x10c>
 8011370:	f004 fa10 	bl	8015794 <Error_Handler>

	while (msgToken != NULL && msgTokenCount < 7)
 8011374:	e018      	b.n	80113a8 <RecvMessageNum+0x10c>
	{
		msgTokens[msgTokenCount] = msgToken;
 8011376:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801137a:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 801137e:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	@ 0x5dc
 8011382:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	@ 0x5d8
 8011386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		msgTokenCount++;
 801138a:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 801138e:	3301      	adds	r3, #1
 8011390:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc

		msgToken = strtok_r(NULL, comDelim, RecvBuff);
 8011394:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8011398:	461a      	mov	r2, r3
 801139a:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	@ 0x5cc
 801139e:	2000      	movs	r0, #0
 80113a0:	f015 ff68 	bl	8027274 <strtok_r>
 80113a4:	f8c7 05d8 	str.w	r0, [r7, #1496]	@ 0x5d8
	while (msgToken != NULL && msgTokenCount < 7)
 80113a8:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d003      	beq.n	80113b8 <RecvMessageNum+0x11c>
 80113b0:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 80113b4:	2b06      	cmp	r3, #6
 80113b6:	ddde      	ble.n	8011376 <RecvMessageNum+0xda>
	}

	//csc possible fix, if the message is null, assign it to a string. I think there was ststr issue
	//could also check each _msg for null before doing strtest but I wanted to see if this fixed it first

	char *msg1 = msgTokens[2] ? msgTokens[2] : "\0";
 80113b8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80113bc:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 80113c0:	689b      	ldr	r3, [r3, #8]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d005      	beq.n	80113d2 <RecvMessageNum+0x136>
 80113c6:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80113ca:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	e000      	b.n	80113d4 <RecvMessageNum+0x138>
 80113d2:	4b24      	ldr	r3, [pc, #144]	@ (8011464 <RecvMessageNum+0x1c8>)
 80113d4:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
	char *msg2 = msgTokens[3] ? msgTokens[3] : "\0";
 80113d8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80113dc:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d005      	beq.n	80113f2 <RecvMessageNum+0x156>
 80113e6:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80113ea:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	e000      	b.n	80113f4 <RecvMessageNum+0x158>
 80113f2:	4b1c      	ldr	r3, [pc, #112]	@ (8011464 <RecvMessageNum+0x1c8>)
 80113f4:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
	char *msg3 = msgTokens[4] ? msgTokens[4] : "\0";
 80113f8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80113fc:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 8011400:	691b      	ldr	r3, [r3, #16]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d005      	beq.n	8011412 <RecvMessageNum+0x176>
 8011406:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801140a:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 801140e:	691b      	ldr	r3, [r3, #16]
 8011410:	e000      	b.n	8011414 <RecvMessageNum+0x178>
 8011412:	4b14      	ldr	r3, [pc, #80]	@ (8011464 <RecvMessageNum+0x1c8>)
 8011414:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
	char *msg4 = msgTokens[5] ? msgTokens[5] : "\0";
 8011418:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801141c:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 8011420:	695b      	ldr	r3, [r3, #20]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d005      	beq.n	8011432 <RecvMessageNum+0x196>
 8011426:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801142a:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 801142e:	695b      	ldr	r3, [r3, #20]
 8011430:	e000      	b.n	8011434 <RecvMessageNum+0x198>
 8011432:	4b0c      	ldr	r3, [pc, #48]	@ (8011464 <RecvMessageNum+0x1c8>)
 8011434:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
	char *msg5 = msgTokens[6] ? msgTokens[6] : "\0";
 8011438:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801143c:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 8011440:	699b      	ldr	r3, [r3, #24]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d010      	beq.n	8011468 <RecvMessageNum+0x1cc>
 8011446:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801144a:	f5a3 63ba 	sub.w	r3, r3, #1488	@ 0x5d0
 801144e:	699b      	ldr	r3, [r3, #24]
 8011450:	e00b      	b.n	801146a <RecvMessageNum+0x1ce>
 8011452:	bf00      	nop
 8011454:	0802f1a8 	.word	0x0802f1a8
 8011458:	0802f1ac 	.word	0x0802f1ac
 801145c:	0802f1b0 	.word	0x0802f1b0
 8011460:	2007d0bc 	.word	0x2007d0bc
 8011464:	0802f1b4 	.word	0x0802f1b4
 8011468:	4b7b      	ldr	r3, [pc, #492]	@ (8011658 <RecvMessageNum+0x3bc>)
 801146a:	f8c7 35b8 	str.w	r3, [r7, #1464]	@ 0x5b8

	char test1[] = "1";
 801146e:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011472:	f2a3 53d4 	subw	r3, r3, #1492	@ 0x5d4
 8011476:	2231      	movs	r2, #49	@ 0x31
 8011478:	801a      	strh	r2, [r3, #0]
	char *_msg1 = strstr( msg1, test1 );
 801147a:	f107 030c 	add.w	r3, r7, #12
 801147e:	4619      	mov	r1, r3
 8011480:	f8d7 05c8 	ldr.w	r0, [r7, #1480]	@ 0x5c8
 8011484:	f015 fef9 	bl	802727a <strstr>
 8011488:	f8c7 05b4 	str.w	r0, [r7, #1460]	@ 0x5b4
	char *_msg2 = strstr( msg2, test1 );
 801148c:	f107 030c 	add.w	r3, r7, #12
 8011490:	4619      	mov	r1, r3
 8011492:	f8d7 05c4 	ldr.w	r0, [r7, #1476]	@ 0x5c4
 8011496:	f015 fef0 	bl	802727a <strstr>
 801149a:	f8c7 05b0 	str.w	r0, [r7, #1456]	@ 0x5b0
	char *_msg3 = strstr( msg3, test1 );
 801149e:	f107 030c 	add.w	r3, r7, #12
 80114a2:	4619      	mov	r1, r3
 80114a4:	f8d7 05c0 	ldr.w	r0, [r7, #1472]	@ 0x5c0
 80114a8:	f015 fee7 	bl	802727a <strstr>
 80114ac:	f8c7 05ac 	str.w	r0, [r7, #1452]	@ 0x5ac
	char *_msg4 = strstr( msg4, test1 );
 80114b0:	f107 030c 	add.w	r3, r7, #12
 80114b4:	4619      	mov	r1, r3
 80114b6:	f8d7 05bc 	ldr.w	r0, [r7, #1468]	@ 0x5bc
 80114ba:	f015 fede 	bl	802727a <strstr>
 80114be:	f8c7 05a8 	str.w	r0, [r7, #1448]	@ 0x5a8
	char *_msg5 = strstr( msg5, test1 );
 80114c2:	f107 030c 	add.w	r3, r7, #12
 80114c6:	4619      	mov	r1, r3
 80114c8:	f8d7 05b8 	ldr.w	r0, [r7, #1464]	@ 0x5b8
 80114cc:	f015 fed5 	bl	802727a <strstr>
 80114d0:	f8c7 05a4 	str.w	r0, [r7, #1444]	@ 0x5a4

	Clear_Memory(Data_Ptr);
 80114d4:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80114d8:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 80114dc:	6818      	ldr	r0, [r3, #0]
 80114de:	f7f5 f8d0 	bl	8006682 <Clear_Memory>
	clearMqttStruct();
 80114e2:	f7f7 fbcb 	bl	8008c7c <clearMqttStruct>
	//			printMQTT = true;
	//			storeMqttData(indx, receivedData, Data_Ptr->UartBtyesReceived, printMQTT);
	//		}
	//	}

	if (_msg1)
 80114e6:	f8d7 35b4 	ldr.w	r3, [r7, #1460]	@ 0x5b4
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d01f      	beq.n	801152e <RecvMessageNum+0x292>
	{
		Clear_Recv_Buff(receivedData);
 80114ee:	485b      	ldr	r0, [pc, #364]	@ (801165c <RecvMessageNum+0x3c0>)
 80114f0:	f000 f8b8 	bl	8011664 <Clear_Recv_Buff>

		Command = recvMsg1;
 80114f4:	4b5a      	ldr	r3, [pc, #360]	@ (8011660 <RecvMessageNum+0x3c4>)
 80114f6:	222a      	movs	r2, #42	@ 0x2a
 80114f8:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 80114fc:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011500:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	f7fd fab9 	bl	800ea7c <CELL_COMMAND>
		printMQTT = true;
 801150a:	2301      	movs	r3, #1
 801150c:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
		storeMqttData( 0, receivedData, Data_Ptr->UartBtyesReceived, printMQTT);
 8011510:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011514:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801151e:	f8b3 235e 	ldrh.w	r2, [r3, #862]	@ 0x35e
 8011522:	f897 35d7 	ldrb.w	r3, [r7, #1495]	@ 0x5d7
 8011526:	494d      	ldr	r1, [pc, #308]	@ (801165c <RecvMessageNum+0x3c0>)
 8011528:	2000      	movs	r0, #0
 801152a:	f7f6 fbe5 	bl	8007cf8 <storeMqttData>
	}
	if (_msg2)
 801152e:	f8d7 35b0 	ldr.w	r3, [r7, #1456]	@ 0x5b0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d01f      	beq.n	8011576 <RecvMessageNum+0x2da>
	{
		Clear_Recv_Buff(receivedData);
 8011536:	4849      	ldr	r0, [pc, #292]	@ (801165c <RecvMessageNum+0x3c0>)
 8011538:	f000 f894 	bl	8011664 <Clear_Recv_Buff>

		Command = recvMsg2;
 801153c:	4b48      	ldr	r3, [pc, #288]	@ (8011660 <RecvMessageNum+0x3c4>)
 801153e:	222b      	movs	r2, #43	@ 0x2b
 8011540:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 8011544:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011548:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 801154c:	6818      	ldr	r0, [r3, #0]
 801154e:	f7fd fa95 	bl	800ea7c <CELL_COMMAND>
		printMQTT = true;
 8011552:	2301      	movs	r3, #1
 8011554:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
		storeMqttData( 1, receivedData, Data_Ptr->UartBtyesReceived, printMQTT);
 8011558:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 801155c:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011566:	f8b3 235e 	ldrh.w	r2, [r3, #862]	@ 0x35e
 801156a:	f897 35d7 	ldrb.w	r3, [r7, #1495]	@ 0x5d7
 801156e:	493b      	ldr	r1, [pc, #236]	@ (801165c <RecvMessageNum+0x3c0>)
 8011570:	2001      	movs	r0, #1
 8011572:	f7f6 fbc1 	bl	8007cf8 <storeMqttData>
	}

	if (_msg3)
 8011576:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	@ 0x5ac
 801157a:	2b00      	cmp	r3, #0
 801157c:	d01f      	beq.n	80115be <RecvMessageNum+0x322>
	{
		Clear_Recv_Buff(receivedData);
 801157e:	4837      	ldr	r0, [pc, #220]	@ (801165c <RecvMessageNum+0x3c0>)
 8011580:	f000 f870 	bl	8011664 <Clear_Recv_Buff>
		Command = recvMsg3;
 8011584:	4b36      	ldr	r3, [pc, #216]	@ (8011660 <RecvMessageNum+0x3c4>)
 8011586:	222c      	movs	r2, #44	@ 0x2c
 8011588:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 801158c:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011590:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8011594:	6818      	ldr	r0, [r3, #0]
 8011596:	f7fd fa71 	bl	800ea7c <CELL_COMMAND>
		printMQTT = true;
 801159a:	2301      	movs	r3, #1
 801159c:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
		storeMqttData( 2, receivedData, Data_Ptr->UartBtyesReceived, printMQTT);
 80115a0:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80115a4:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80115ae:	f8b3 235e 	ldrh.w	r2, [r3, #862]	@ 0x35e
 80115b2:	f897 35d7 	ldrb.w	r3, [r7, #1495]	@ 0x5d7
 80115b6:	4929      	ldr	r1, [pc, #164]	@ (801165c <RecvMessageNum+0x3c0>)
 80115b8:	2002      	movs	r0, #2
 80115ba:	f7f6 fb9d 	bl	8007cf8 <storeMqttData>
	}

	if (_msg4)
 80115be:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	@ 0x5a8
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d01f      	beq.n	8011606 <RecvMessageNum+0x36a>
	{
		Clear_Recv_Buff(receivedData);
 80115c6:	4825      	ldr	r0, [pc, #148]	@ (801165c <RecvMessageNum+0x3c0>)
 80115c8:	f000 f84c 	bl	8011664 <Clear_Recv_Buff>
		Command = recvMsg4;
 80115cc:	4b24      	ldr	r3, [pc, #144]	@ (8011660 <RecvMessageNum+0x3c4>)
 80115ce:	222d      	movs	r2, #45	@ 0x2d
 80115d0:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 80115d4:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80115d8:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 80115dc:	6818      	ldr	r0, [r3, #0]
 80115de:	f7fd fa4d 	bl	800ea7c <CELL_COMMAND>
		printMQTT = true;
 80115e2:	2301      	movs	r3, #1
 80115e4:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
		storeMqttData( 3, receivedData, Data_Ptr->UartBtyesReceived, printMQTT);
 80115e8:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80115ec:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80115f6:	f8b3 235e 	ldrh.w	r2, [r3, #862]	@ 0x35e
 80115fa:	f897 35d7 	ldrb.w	r3, [r7, #1495]	@ 0x5d7
 80115fe:	4917      	ldr	r1, [pc, #92]	@ (801165c <RecvMessageNum+0x3c0>)
 8011600:	2003      	movs	r0, #3
 8011602:	f7f6 fb79 	bl	8007cf8 <storeMqttData>
	}

	if (_msg5)
 8011606:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	@ 0x5a4
 801160a:	2b00      	cmp	r3, #0
 801160c:	d01f      	beq.n	801164e <RecvMessageNum+0x3b2>
	{
		Clear_Recv_Buff(receivedData);
 801160e:	4813      	ldr	r0, [pc, #76]	@ (801165c <RecvMessageNum+0x3c0>)
 8011610:	f000 f828 	bl	8011664 <Clear_Recv_Buff>
		Command = recvMsg5;
 8011614:	4b12      	ldr	r3, [pc, #72]	@ (8011660 <RecvMessageNum+0x3c4>)
 8011616:	222e      	movs	r2, #46	@ 0x2e
 8011618:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 801161c:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011620:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8011624:	6818      	ldr	r0, [r3, #0]
 8011626:	f7fd fa29 	bl	800ea7c <CELL_COMMAND>
		printMQTT = true;
 801162a:	2301      	movs	r3, #1
 801162c:	f887 35d7 	strb.w	r3, [r7, #1495]	@ 0x5d7
		storeMqttData( 4, receivedData, Data_Ptr->UartBtyesReceived, printMQTT);
 8011630:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 8011634:	f5a3 63bc 	sub.w	r3, r3, #1504	@ 0x5e0
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801163e:	f8b3 235e 	ldrh.w	r2, [r3, #862]	@ 0x35e
 8011642:	f897 35d7 	ldrb.w	r3, [r7, #1495]	@ 0x5d7
 8011646:	4905      	ldr	r1, [pc, #20]	@ (801165c <RecvMessageNum+0x3c0>)
 8011648:	2004      	movs	r0, #4
 801164a:	f7f6 fb55 	bl	8007cf8 <storeMqttData>
	}

}
 801164e:	bf00      	nop
 8011650:	f507 67bc 	add.w	r7, r7, #1504	@ 0x5e0
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}
 8011658:	0802f1b4 	.word	0x0802f1b4
 801165c:	2007be74 	.word	0x2007be74
 8011660:	2007a330 	.word	0x2007a330

08011664 <Clear_Recv_Buff>:

void Clear_Recv_Buff ( uint8_t *recvData )
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
	int memoryItterator = 0;
 801166c:	2300      	movs	r3, #0
 801166e:	60fb      	str	r3, [r7, #12]
	while ( memoryItterator < (MEMORY_MAX))
 8011670:	e007      	b.n	8011682 <Clear_Recv_Buff+0x1e>
		recvData [ memoryItterator++ ] = 0;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	1c5a      	adds	r2, r3, #1
 8011676:	60fa      	str	r2, [r7, #12]
 8011678:	461a      	mov	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4413      	add	r3, r2
 801167e:	2200      	movs	r2, #0
 8011680:	701a      	strb	r2, [r3, #0]
	while ( memoryItterator < (MEMORY_MAX))
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8011688:	dbf3      	blt.n	8011672 <Clear_Recv_Buff+0xe>
}
 801168a:	bf00      	nop
 801168c:	bf00      	nop
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <getFirmwareDownlink>:

//numOfTries must be between range 1-5
void getFirmwareDownlink (MEM_PTR *Data_Ptr, uint8_t numOfTries)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	460b      	mov	r3, r1
 80116a2:	70fb      	strb	r3, [r7, #3]
	int loopCounter = 0;
 80116a4:	2300      	movs	r3, #0
 80116a6:	60fb      	str	r3, [r7, #12]
	bool goodData = false;
 80116a8:	2300      	movs	r3, #0
 80116aa:	72fb      	strb	r3, [r7, #11]
	Clear_Memory(Data_Ptr);
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f7f4 ffe8 	bl	8006682 <Clear_Memory>

	do
	{
		//potential timing issue, put breakpoint below
		Refresh_Watchdog;
 80116b2:	4842      	ldr	r0, [pc, #264]	@ (80117bc <getFirmwareDownlink+0x124>)
 80116b4:	f009 fd8d 	bl	801b1d2 <HAL_IWDG_Refresh>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d001      	beq.n	80116c2 <getFirmwareDownlink+0x2a>
 80116be:	f004 f869 	bl	8015794 <Error_Handler>
		Command = CHECK;
 80116c2:	4b3f      	ldr	r3, [pc, #252]	@ (80117c0 <getFirmwareDownlink+0x128>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7fd f9d6 	bl	800ea7c <CELL_COMMAND>
		Command = READ_FW_BUF_CHECK;  // checks how many messages are waiting
 80116d0:	4b3b      	ldr	r3, [pc, #236]	@ (80117c0 <getFirmwareDownlink+0x128>)
 80116d2:	2228      	movs	r2, #40	@ 0x28
 80116d4:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		PRINTF("Reading Buffer for FW Packets\r\n");
 80116d8:	493a      	ldr	r1, [pc, #232]	@ (80117c4 <getFirmwareDownlink+0x12c>)
 80116da:	2001      	movs	r0, #1
 80116dc:	f7f5 fb4a 	bl	8006d74 <TraceSend>
		CELL_COMMAND(Data_Ptr);
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f7fd f9cb 	bl	800ea7c <CELL_COMMAND>

		PRINTF("Loop Counter is %d\r\n",loopCounter);
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	4937      	ldr	r1, [pc, #220]	@ (80117c8 <getFirmwareDownlink+0x130>)
 80116ea:	2001      	movs	r0, #1
 80116ec:	f7f5 fb42 	bl	8006d74 <TraceSend>

		//loopCounter ++;
		if( ++loopCounter > numOfTries )
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	3301      	adds	r3, #1
 80116f4:	60fb      	str	r3, [r7, #12]
 80116f6:	78fb      	ldrb	r3, [r7, #3]
 80116f8:	68fa      	ldr	r2, [r7, #12]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	dd0d      	ble.n	801171a <getFirmwareDownlink+0x82>
		{
			PRINTF("Received 5 packets getting results\r\n");
 80116fe:	4933      	ldr	r1, [pc, #204]	@ (80117cc <getFirmwareDownlink+0x134>)
 8011700:	2001      	movs	r0, #1
 8011702:	f7f5 fb37 	bl	8006d74 <TraceSend>
			RecvMessageNum((char*)Memory, Data_Ptr);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801170c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011710:	6879      	ldr	r1, [r7, #4]
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff fdc2 	bl	801129c <RecvMessageNum>
			break;
 8011718:	e021      	b.n	801175e <getFirmwareDownlink+0xc6>
		}

		HAL_Delay(3000);
 801171a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 801171e:	f004 feb1 	bl	8016484 <HAL_Delay>
		Refresh_Watchdog;
 8011722:	4826      	ldr	r0, [pc, #152]	@ (80117bc <getFirmwareDownlink+0x124>)
 8011724:	f009 fd55 	bl	801b1d2 <HAL_IWDG_Refresh>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d001      	beq.n	8011732 <getFirmwareDownlink+0x9a>
 801172e:	f004 f831 	bl	8015794 <Error_Handler>
		goodData = isFivePacketsReceived((char*)Memory);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011738:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801173c:	4618      	mov	r0, r3
 801173e:	f7f5 f865 	bl	800680c <isFivePacketsReceived>
 8011742:	4603      	mov	r3, r0
 8011744:	72fb      	strb	r3, [r7, #11]
		PRINTF("Good Data is %d\r\n",goodData);
 8011746:	7afb      	ldrb	r3, [r7, #11]
 8011748:	461a      	mov	r2, r3
 801174a:	4921      	ldr	r1, [pc, #132]	@ (80117d0 <getFirmwareDownlink+0x138>)
 801174c:	2001      	movs	r0, #1
 801174e:	f7f5 fb11 	bl	8006d74 <TraceSend>

	} while ( !goodData );
 8011752:	7afb      	ldrb	r3, [r7, #11]
 8011754:	f083 0301 	eor.w	r3, r3, #1
 8011758:	b2db      	uxtb	r3, r3
 801175a:	2b00      	cmp	r3, #0
 801175c:	d1a9      	bne.n	80116b2 <getFirmwareDownlink+0x1a>

	receivedDataSize = 40;
 801175e:	4b1d      	ldr	r3, [pc, #116]	@ (80117d4 <getFirmwareDownlink+0x13c>)
 8011760:	2228      	movs	r2, #40	@ 0x28
 8011762:	801a      	strh	r2, [r3, #0]
	if ( goodData )
 8011764:	7afb      	ldrb	r3, [r7, #11]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d023      	beq.n	80117b2 <getFirmwareDownlink+0x11a>
	{
		vcom_Trace((uint8_t*) "Firmware DownLinks Received\r\n", 29, 1);
 801176a:	2201      	movs	r2, #1
 801176c:	211d      	movs	r1, #29
 801176e:	481a      	ldr	r0, [pc, #104]	@ (80117d8 <getFirmwareDownlink+0x140>)
 8011770:	f7f5 fae2 	bl	8006d38 <vcom_Trace>

		vcom_Trace(&Memory[buf], receivedDataSize, 1);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801177a:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 801177e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011782:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	4413      	add	r3, r2
 801178a:	4a12      	ldr	r2, [pc, #72]	@ (80117d4 <getFirmwareDownlink+0x13c>)
 801178c:	8811      	ldrh	r1, [r2, #0]
 801178e:	2201      	movs	r2, #1
 8011790:	4618      	mov	r0, r3
 8011792:	f7f5 fad1 	bl	8006d38 <vcom_Trace>

		vcom_Trace((uint8_t*) "\r\n", 2, 1);
 8011796:	2201      	movs	r2, #1
 8011798:	2102      	movs	r1, #2
 801179a:	4810      	ldr	r0, [pc, #64]	@ (80117dc <getFirmwareDownlink+0x144>)
 801179c:	f7f5 facc 	bl	8006d38 <vcom_Trace>
		RecvMessageNum((char*)Memory, Data_Ptr);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80117a6:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80117aa:	6879      	ldr	r1, [r7, #4]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7ff fd75 	bl	801129c <RecvMessageNum>
	}
}
 80117b2:	bf00      	nop
 80117b4:	3710      	adds	r7, #16
 80117b6:	46bd      	mov	sp, r7
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	bf00      	nop
 80117bc:	2007d0bc 	.word	0x2007d0bc
 80117c0:	2007a330 	.word	0x2007a330
 80117c4:	0802f1b8 	.word	0x0802f1b8
 80117c8:	0802f1d8 	.word	0x0802f1d8
 80117cc:	0802f1f0 	.word	0x0802f1f0
 80117d0:	0802f218 	.word	0x0802f218
 80117d4:	2007be5c 	.word	0x2007be5c
 80117d8:	0802f22c 	.word	0x0802f22c
 80117dc:	0802ea50 	.word	0x0802ea50

080117e0 <otaCheckMissingPages>:

// csc function to find missing pages in ota
void otaCheckMissingPages( OTA_FILE_TYPE *OTAData )
{
 80117e0:	b590      	push	{r4, r7, lr}
 80117e2:	b089      	sub	sp, #36	@ 0x24
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	// Reset missing pages data in the structure
	OTAData->numberOfMissingPages = 0;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	70da      	strb	r2, [r3, #3]
	OTAData->missingPagesString[0] = '[';
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	225b      	movs	r2, #91	@ 0x5b
 80117f2:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
	OTAData->missingPagesString[1] = '\0';
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2200      	movs	r2, #0
 80117fa:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
	OTAData->receivedPagesString[0] = '[';
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	225b      	movs	r2, #91	@ 0x5b
 8011802:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
	OTAData->receivedPagesString[1] = '\0';
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2200      	movs	r2, #0
 801180a:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

	// Go through FirmwareArray and check for missing pages
	for (int i = 0; i < OTAData->numberOfPages; i++)
 801180e:	2300      	movs	r3, #0
 8011810:	61fb      	str	r3, [r7, #28]
 8011812:	e036      	b.n	8011882 <otaCheckMissingPages+0xa2>
	{
		if ( OTAData->FirmwareArray[i][0] == '\0')
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 801181c:	fb01 f303 	mul.w	r3, r1, r3
 8011820:	4413      	add	r3, r2
 8011822:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d116      	bne.n	801185a <otaCheckMissingPages+0x7a>
		{
			OTAData->numberOfMissingPages++;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	78db      	ldrb	r3, [r3, #3]
 8011830:	3301      	adds	r3, #1
 8011832:	b2da      	uxtb	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	70da      	strb	r2, [r3, #3]
			char page_str[6]; //4 may not be right depending on how many pages we could possible be missing
			// Append missing page number (i + 1) to missingPagesString
			snprintf(page_str, sizeof(page_str), "%d,", i + 1);
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	3301      	adds	r3, #1
 801183c:	f107 0010 	add.w	r0, r7, #16
 8011840:	4a3d      	ldr	r2, [pc, #244]	@ (8011938 <otaCheckMissingPages+0x158>)
 8011842:	2106      	movs	r1, #6
 8011844:	f015 fbb2 	bl	8026fac <sniprintf>
			strcat(OTAData->missingPagesString, page_str);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	33c2      	adds	r3, #194	@ 0xc2
 801184c:	f107 0210 	add.w	r2, r7, #16
 8011850:	4611      	mov	r1, r2
 8011852:	4618      	mov	r0, r3
 8011854:	f015 fc94 	bl	8027180 <strcat>
 8011858:	e010      	b.n	801187c <otaCheckMissingPages+0x9c>
		}
		else
		{
			char page_str[6]; //4 may not be right depending on how many pages we could possible be missing
			// Append missing page number (i + 1) to missingPagesString
			snprintf(page_str, sizeof(page_str), "%d,", i + 1);
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	3301      	adds	r3, #1
 801185e:	f107 0008 	add.w	r0, r7, #8
 8011862:	4a35      	ldr	r2, [pc, #212]	@ (8011938 <otaCheckMissingPages+0x158>)
 8011864:	2106      	movs	r1, #6
 8011866:	f015 fba1 	bl	8026fac <sniprintf>
			strcat(OTAData->receivedPagesString, page_str);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f503 73a1 	add.w	r3, r3, #322	@ 0x142
 8011870:	f107 0208 	add.w	r2, r7, #8
 8011874:	4611      	mov	r1, r2
 8011876:	4618      	mov	r0, r3
 8011878:	f015 fc82 	bl	8027180 <strcat>
	for (int i = 0; i < OTAData->numberOfPages; i++)
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	3301      	adds	r3, #1
 8011880:	61fb      	str	r3, [r7, #28]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	789b      	ldrb	r3, [r3, #2]
 8011886:	461a      	mov	r2, r3
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	4293      	cmp	r3, r2
 801188c:	dbc2      	blt.n	8011814 <otaCheckMissingPages+0x34>
		}
	}

	// Remove trailing comma and replace with closing bracket
	int len = strlen(OTAData->missingPagesString);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	33c2      	adds	r3, #194	@ 0xc2
 8011892:	4618      	mov	r0, r3
 8011894:	f7ee fcfa 	bl	800028c <strlen>
 8011898:	4603      	mov	r3, r0
 801189a:	61bb      	str	r3, [r7, #24]
	if (len > 1 && OTAData->missingPagesString[len - 1] == ',')
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	2b01      	cmp	r3, #1
 80118a0:	dd0f      	ble.n	80118c2 <otaCheckMissingPages+0xe2>
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	3b01      	subs	r3, #1
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	4413      	add	r3, r2
 80118aa:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80118ae:	2b2c      	cmp	r3, #44	@ 0x2c
 80118b0:	d107      	bne.n	80118c2 <otaCheckMissingPages+0xe2>
	{
		OTAData->missingPagesString[len - 1] = ']';
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	4413      	add	r3, r2
 80118ba:	225d      	movs	r2, #93	@ 0x5d
 80118bc:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
 80118c0:	e00c      	b.n	80118dc <otaCheckMissingPages+0xfc>
	}
	else
	{
		strcat(OTAData->missingPagesString, "]");  // If no pages, just add closing bracket
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f103 04c2 	add.w	r4, r3, #194	@ 0xc2
 80118c8:	4620      	mov	r0, r4
 80118ca:	f7ee fcdf 	bl	800028c <strlen>
 80118ce:	4603      	mov	r3, r0
 80118d0:	4423      	add	r3, r4
 80118d2:	491a      	ldr	r1, [pc, #104]	@ (801193c <otaCheckMissingPages+0x15c>)
 80118d4:	461a      	mov	r2, r3
 80118d6:	460b      	mov	r3, r1
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	8013      	strh	r3, [r2, #0]
	}
	len = strlen(OTAData->receivedPagesString);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f503 73a1 	add.w	r3, r3, #322	@ 0x142
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7ee fcd2 	bl	800028c <strlen>
 80118e8:	4603      	mov	r3, r0
 80118ea:	61bb      	str	r3, [r7, #24]
	if (len > 1 && OTAData->receivedPagesString[len - 1] == ',')
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	dd0f      	ble.n	8011912 <otaCheckMissingPages+0x132>
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	3b01      	subs	r3, #1
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	4413      	add	r3, r2
 80118fa:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 80118fe:	2b2c      	cmp	r3, #44	@ 0x2c
 8011900:	d107      	bne.n	8011912 <otaCheckMissingPages+0x132>
	{
		OTAData->receivedPagesString[len - 1] = ']';
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	3b01      	subs	r3, #1
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	4413      	add	r3, r2
 801190a:	225d      	movs	r2, #93	@ 0x5d
 801190c:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
 8011910:	e00d      	b.n	801192e <otaCheckMissingPages+0x14e>
	}
	else
	{
		strcat(OTAData->receivedPagesString, "]");  // If no pages, just add closing bracket
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f503 74a1 	add.w	r4, r3, #322	@ 0x142
 8011918:	4620      	mov	r0, r4
 801191a:	f7ee fcb7 	bl	800028c <strlen>
 801191e:	4603      	mov	r3, r0
 8011920:	4423      	add	r3, r4
 8011922:	4906      	ldr	r1, [pc, #24]	@ (801193c <otaCheckMissingPages+0x15c>)
 8011924:	461a      	mov	r2, r3
 8011926:	460b      	mov	r3, r1
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	8013      	strh	r3, [r2, #0]
	}
}
 801192c:	bf00      	nop
 801192e:	bf00      	nop
 8011930:	3724      	adds	r7, #36	@ 0x24
 8011932:	46bd      	mov	sp, r7
 8011934:	bd90      	pop	{r4, r7, pc}
 8011936:	bf00      	nop
 8011938:	0802f24c 	.word	0x0802f24c
 801193c:	0802f250 	.word	0x0802f250

08011940 <clearFirmwareArray>:

void clearFirmwareArray(OTA_FILE_TYPE *OTAData)
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAXPAGES; i++)
 8011948:	2300      	movs	r3, #0
 801194a:	60fb      	str	r3, [r7, #12]
 801194c:	e019      	b.n	8011982 <clearFirmwareArray+0x42>
	{
		for(int j = 0; j < MEMORY_MAX; j++)
 801194e:	2300      	movs	r3, #0
 8011950:	60bb      	str	r3, [r7, #8]
 8011952:	e00f      	b.n	8011974 <clearFirmwareArray+0x34>
		{
			OTAData->FirmwareArray[i][j] = '\0';
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 801195c:	fb01 f303 	mul.w	r3, r1, r3
 8011960:	441a      	add	r2, r3
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	4413      	add	r3, r2
 8011966:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 801196a:	2200      	movs	r2, #0
 801196c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < MEMORY_MAX; j++)
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	3301      	adds	r3, #1
 8011972:	60bb      	str	r3, [r7, #8]
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801197a:	dbeb      	blt.n	8011954 <clearFirmwareArray+0x14>
	for(int i = 0; i < MAXPAGES; i++)
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3301      	adds	r3, #1
 8011980:	60fb      	str	r3, [r7, #12]
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2b4f      	cmp	r3, #79	@ 0x4f
 8011986:	dde2      	ble.n	801194e <clearFirmwareArray+0xe>
		}
	}
}
 8011988:	bf00      	nop
 801198a:	bf00      	nop
 801198c:	3714      	adds	r7, #20
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
	...

08011998 <FWDecodeFile>:
	}
}

// returns CRC
uint32_t FWDecodeFile( OTA_FILE_TYPE *OTAData, MEM_PTR *bigData )
{
 8011998:	b580      	push	{r7, lr}
 801199a:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 801199e:	af00      	add	r7, sp, #0
 80119a0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80119a4:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 80119a8:	6018      	str	r0, [r3, #0]
 80119aa:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80119ae:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 80119b2:	6019      	str	r1, [r3, #0]
	uint8_t packageNumber;
	uint32_t crcCalculated = 0;
 80119b4:	2300      	movs	r3, #0
 80119b6:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
	int pckSize;

	unsigned char tempOutput [MEMORY_MAX] = {""}; // temp until we test and store into active page
 80119ba:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80119be:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80119c2:	2200      	movs	r2, #0
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	3304      	adds	r3, #4
 80119c8:	f640 729c 	movw	r2, #3996	@ 0xf9c
 80119cc:	2100      	movs	r1, #0
 80119ce:	4618      	mov	r0, r3
 80119d0:	f015 fbce 	bl	8027170 <memset>

	for(packageNumber = 0; packageNumber < OTAData->numberOfPages; packageNumber++)
 80119d4:	2300      	movs	r3, #0
 80119d6:	f887 3fbf 	strb.w	r3, [r7, #4031]	@ 0xfbf
 80119da:	e0ce      	b.n	8011b7a <FWDecodeFile+0x1e2>
	{
		PRINTF("Processing Package Number %d\r\n", packageNumber+1);
 80119dc:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 80119e0:	3301      	adds	r3, #1
 80119e2:	461a      	mov	r2, r3
 80119e4:	496e      	ldr	r1, [pc, #440]	@ (8011ba0 <FWDecodeFile+0x208>)
 80119e6:	2001      	movs	r0, #1
 80119e8:	f7f5 f9c4 	bl	8006d74 <TraceSend>
		pckSize = OTAData->dataFWLength[packageNumber];
 80119ec:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 80119f0:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 80119f4:	f6a2 72bc 	subw	r2, r2, #4028	@ 0xfbc
 80119f8:	6812      	ldr	r2, [r2, #0]
 80119fa:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80119fe:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	4413      	add	r3, r2
 8011a06:	889b      	ldrh	r3, [r3, #4]
 8011a08:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
		PRINTF("Package Size %d\r\n", pckSize);
 8011a0c:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8011a10:	4964      	ldr	r1, [pc, #400]	@ (8011ba4 <FWDecodeFile+0x20c>)
 8011a12:	2001      	movs	r0, #1
 8011a14:	f7f5 f9ae 	bl	8006d74 <TraceSend>

		if (pckSize > 1)
 8011a18:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	f340 8095 	ble.w	8011b4c <FWDecodeFile+0x1b4>
		{
			// and call onTheFlyDcodeBase64
			int numberOfconversions = onTheFlyDcodeBase64( OTAData->FirmwareArray[packageNumber], tempOutput, pckSize);
 8011a22:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 8011a26:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8011a2a:	f6a2 72bc 	subw	r2, r2, #4028	@ 0xfbc
 8011a2e:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8011a32:	fb01 f303 	mul.w	r3, r1, r3
 8011a36:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8011a3a:	6812      	ldr	r2, [r2, #0]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	3304      	adds	r3, #4
 8011a40:	f107 010c 	add.w	r1, r7, #12
 8011a44:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7f4 fd81 	bl	8006550 <onTheFlyDcodeBase64>
 8011a4e:	f8c7 0fac 	str.w	r0, [r7, #4012]	@ 0xfac
			PRINTF("Number of Conversions %d\r\n", numberOfconversions);
 8011a52:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	@ 0xfac
 8011a56:	4954      	ldr	r1, [pc, #336]	@ (8011ba8 <FWDecodeFile+0x210>)
 8011a58:	2001      	movs	r0, #1
 8011a5a:	f7f5 f98b 	bl	8006d74 <TraceSend>
			// call CRC functions, 1st on in 'calculate' all the rest are 'accumulate'
			if (packageNumber == 0)
 8011a5e:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d10a      	bne.n	8011a7c <FWDecodeFile+0xe4>
			{
				crcCalculated = HAL_CRC_Calculate ( &hcrc , (uint32_t*) tempOutput , numberOfconversions );
 8011a66:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	@ 0xfac
 8011a6a:	f107 030c 	add.w	r3, r7, #12
 8011a6e:	4619      	mov	r1, r3
 8011a70:	484e      	ldr	r0, [pc, #312]	@ (8011bac <FWDecodeFile+0x214>)
 8011a72:	f006 ff77 	bl	8018964 <HAL_CRC_Calculate>
 8011a76:	f8c7 0fb8 	str.w	r0, [r7, #4024]	@ 0xfb8
 8011a7a:	e009      	b.n	8011a90 <FWDecodeFile+0xf8>
			}
			else
			{
				crcCalculated = HAL_CRC_Accumulate ( &hcrc , (uint32_t*) tempOutput , numberOfconversions );
 8011a7c:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	@ 0xfac
 8011a80:	f107 030c 	add.w	r3, r7, #12
 8011a84:	4619      	mov	r1, r3
 8011a86:	4849      	ldr	r0, [pc, #292]	@ (8011bac <FWDecodeFile+0x214>)
 8011a88:	f006 ff28 	bl	80188dc <HAL_CRC_Accumulate>
 8011a8c:	f8c7 0fb8 	str.w	r0, [r7, #4024]	@ 0xfb8
			}

			Refresh_Watchdog;
 8011a90:	4847      	ldr	r0, [pc, #284]	@ (8011bb0 <FWDecodeFile+0x218>)
 8011a92:	f009 fb9e 	bl	801b1d2 <HAL_IWDG_Refresh>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <FWDecodeFile+0x108>
 8011a9c:	f003 fe7a 	bl	8015794 <Error_Handler>
			// store that binary into "Page1" ROM
			// move tempOutput into Data_Ptr->Flash.Image @ current position of Data_Ptr->Flash.Index
			//PRINTF("memcopy\r\n");
			memcpy(&bigData->Flash.Image[bigData->Flash.Index], tempOutput, numberOfconversions);
 8011aa0:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011aa4:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8011ab0:	f5a2 627c 	sub.w	r2, r2, #4032	@ 0xfc0
 8011ab4:	3308      	adds	r3, #8
 8011ab6:	6812      	ldr	r2, [r2, #0]
 8011ab8:	4413      	add	r3, r2
 8011aba:	3306      	adds	r3, #6
 8011abc:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	@ 0xfac
 8011ac0:	f107 010c 	add.w	r1, r7, #12
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f016 f9ea 	bl	8027e9e <memcpy>
			// keep a last ROM address parameter
			// increment Data_Ptr->Flash.Index
			bigData->Flash.Index += numberOfconversions;
 8011aca:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011ace:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	689a      	ldr	r2, [r3, #8]
 8011ad6:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	@ 0xfac
 8011ada:	441a      	add	r2, r3
 8011adc:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011ae0:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	609a      	str	r2, [r3, #8]
			OTAData->lastROMAddress = bigData->Flash.Index;
 8011ae8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011aec:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	689a      	ldr	r2, [r3, #8]
 8011af4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011af8:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	60da      	str	r2, [r3, #12]
			// clear tempOutput

			for(int junk = 0; junk < OTAData->dataFWLength[packageNumber]; junk++)
 8011b00:	2300      	movs	r3, #0
 8011b02:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8011b06:	e00d      	b.n	8011b24 <FWDecodeFile+0x18c>
			{
				tempOutput[junk] = '\0';
 8011b08:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011b0c:	f6a3 72b4 	subw	r2, r3, #4020	@ 0xfb4
 8011b10:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8011b14:	4413      	add	r3, r2
 8011b16:	2200      	movs	r2, #0
 8011b18:	701a      	strb	r2, [r3, #0]
			for(int junk = 0; junk < OTAData->dataFWLength[packageNumber]; junk++)
 8011b1a:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8011b1e:	3301      	adds	r3, #1
 8011b20:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8011b24:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 8011b28:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8011b2c:	f6a2 72bc 	subw	r2, r2, #4028	@ 0xfbc
 8011b30:	6812      	ldr	r2, [r2, #0]
 8011b32:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011b36:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8011b3a:	005b      	lsls	r3, r3, #1
 8011b3c:	4413      	add	r3, r2
 8011b3e:	889b      	ldrh	r3, [r3, #4]
 8011b40:	461a      	mov	r2, r3
 8011b42:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8011b46:	4293      	cmp	r3, r2
 8011b48:	dbde      	blt.n	8011b08 <FWDecodeFile+0x170>
 8011b4a:	e011      	b.n	8011b70 <FWDecodeFile+0x1d8>
			}
		}
		else
		{
			if (packageNumber <= OTAData->numberOfPages)
 8011b4c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011b50:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	789b      	ldrb	r3, [r3, #2]
 8011b58:	f897 2fbf 	ldrb.w	r2, [r7, #4031]	@ 0xfbf
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d807      	bhi.n	8011b70 <FWDecodeFile+0x1d8>
			{
				// log error
				PRINTF("Number of packages did not match\r\n");
 8011b60:	4914      	ldr	r1, [pc, #80]	@ (8011bb4 <FWDecodeFile+0x21c>)
 8011b62:	2001      	movs	r0, #1
 8011b64:	f7f5 f906 	bl	8006d74 <TraceSend>
				crcCalculated = 0;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
				break;
 8011b6e:	e00f      	b.n	8011b90 <FWDecodeFile+0x1f8>
	for(packageNumber = 0; packageNumber < OTAData->numberOfPages; packageNumber++)
 8011b70:	f897 3fbf 	ldrb.w	r3, [r7, #4031]	@ 0xfbf
 8011b74:	3301      	adds	r3, #1
 8011b76:	f887 3fbf 	strb.w	r3, [r7, #4031]	@ 0xfbf
 8011b7a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8011b7e:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	789b      	ldrb	r3, [r3, #2]
 8011b86:	f897 2fbf 	ldrb.w	r2, [r7, #4031]	@ 0xfbf
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	f4ff af26 	bcc.w	80119dc <FWDecodeFile+0x44>
			}
		}
	}
	return (crcCalculated);
 8011b90:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	0802f254 	.word	0x0802f254
 8011ba4:	0802f274 	.word	0x0802f274
 8011ba8:	0802f288 	.word	0x0802f288
 8011bac:	2007d044 	.word	0x2007d044
 8011bb0:	2007d0bc 	.word	0x2007d0bc
 8011bb4:	0802f2a4 	.word	0x0802f2a4

08011bb8 <Update_Battery>:
	int debug = 1;
	debug++;
}

void Update_Battery (void)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 8011bbe:	4b30      	ldr	r3, [pc, #192]	@ (8011c80 <Update_Battery+0xc8>)
 8011bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8011c80 <Update_Battery+0xc8>)
 8011bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011bca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8011bce:	4b2c      	ldr	r3, [pc, #176]	@ (8011c80 <Update_Battery+0xc8>)
 8011bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8011bd8:	607b      	str	r3, [r7, #4]
 8011bda:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8011bdc:	4b28      	ldr	r3, [pc, #160]	@ (8011c80 <Update_Battery+0xc8>)
 8011bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011be2:	4a27      	ldr	r2, [pc, #156]	@ (8011c80 <Update_Battery+0xc8>)
 8011be4:	f043 0304 	orr.w	r3, r3, #4
 8011be8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8011bec:	4b24      	ldr	r3, [pc, #144]	@ (8011c80 <Update_Battery+0xc8>)
 8011bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011bf2:	f003 0304 	and.w	r3, r3, #4
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	683b      	ldr	r3, [r7, #0]
	//	  MX_ADC1_Init();
	HAL_ADC_Start(&hadc1);
 8011bfa:	4822      	ldr	r0, [pc, #136]	@ (8011c84 <Update_Battery+0xcc>)
 8011bfc:	f005 fac2 	bl	8017184 <HAL_ADC_Start>
	HAL_Delay(1000);
 8011c00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011c04:	f004 fc3e 	bl	8016484 <HAL_Delay>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8011c08:	2164      	movs	r1, #100	@ 0x64
 8011c0a:	481e      	ldr	r0, [pc, #120]	@ (8011c84 <Update_Battery+0xcc>)
 8011c0c:	f005 fb62 	bl	80172d4 <HAL_ADC_PollForConversion>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d128      	bne.n	8011c68 <Update_Battery+0xb0>
	{
		uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8011c16:	481b      	ldr	r0, [pc, #108]	@ (8011c84 <Update_Battery+0xcc>)
 8011c18:	f005 fc42 	bl	80174a0 <HAL_ADC_GetValue>
 8011c1c:	60f8      	str	r0, [r7, #12]
		float vbat = -0.00292 * adc_value +11.48;
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f7ee fc7e 	bl	8000520 <__aeabi_ui2d>
 8011c24:	a312      	add	r3, pc, #72	@ (adr r3, 8011c70 <Update_Battery+0xb8>)
 8011c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2a:	f7ee fcf3 	bl	8000614 <__aeabi_dmul>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4610      	mov	r0, r2
 8011c34:	4619      	mov	r1, r3
 8011c36:	a310      	add	r3, pc, #64	@ (adr r3, 8011c78 <Update_Battery+0xc0>)
 8011c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3c:	f7ee fb34 	bl	80002a8 <__adddf3>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4610      	mov	r0, r2
 8011c46:	4619      	mov	r1, r3
 8011c48:	f7ee ffdc 	bl	8000c04 <__aeabi_d2f>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	60bb      	str	r3, [r7, #8]
		sprintf(batVal, "%.3f", vbat);
 8011c50:	68b8      	ldr	r0, [r7, #8]
 8011c52:	f7ee fc87 	bl	8000564 <__aeabi_f2d>
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	490b      	ldr	r1, [pc, #44]	@ (8011c88 <Update_Battery+0xd0>)
 8011c5c:	480b      	ldr	r0, [pc, #44]	@ (8011c8c <Update_Battery+0xd4>)
 8011c5e:	f015 f9d9 	bl	8027014 <siprintf>
		HAL_ADC_Stop(&hadc1);
 8011c62:	4808      	ldr	r0, [pc, #32]	@ (8011c84 <Update_Battery+0xcc>)
 8011c64:	f005 fb02 	bl	801726c <HAL_ADC_Stop>
	}
}
 8011c68:	bf00      	nop
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	102363b2 	.word	0x102363b2
 8011c74:	bf67ebaf 	.word	0xbf67ebaf
 8011c78:	8f5c28f6 	.word	0x8f5c28f6
 8011c7c:	4026f5c2 	.word	0x4026f5c2
 8011c80:	46020c00 	.word	0x46020c00
 8011c84:	2007cfb8 	.word	0x2007cfb8
 8011c88:	0802f7a4 	.word	0x0802f7a4
 8011c8c:	2007be64 	.word	0x2007be64

08011c90 <cellResponseCheck>:


uint8_t cellResponseCheck (MEM_PTR *Data_Ptr)
{
 8011c90:	b590      	push	{r4, r7, lr}
 8011c92:	b0b1      	sub	sp, #196	@ 0xc4
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
	PRINTF("Checking Cell Response\r\n");
 8011c98:	49c3      	ldr	r1, [pc, #780]	@ (8011fa8 <cellResponseCheck+0x318>)
 8011c9a:	2001      	movs	r0, #1
 8011c9c:	f7f5 f86a 	bl	8006d74 <TraceSend>

	retry = false;
 8011ca0:	4bc2      	ldr	r3, [pc, #776]	@ (8011fac <cellResponseCheck+0x31c>)
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	701a      	strb	r2, [r3, #0]

	uint8_t isOK = 99;
 8011ca6:	2363      	movs	r3, #99	@ 0x63
 8011ca8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	switch ( Command )
 8011cac:	4bc0      	ldr	r3, [pc, #768]	@ (8011fb0 <cellResponseCheck+0x320>)
 8011cae:	f893 360e 	ldrb.w	r3, [r3, #1550]	@ 0x60e
 8011cb2:	3b03      	subs	r3, #3
 8011cb4:	2b32      	cmp	r3, #50	@ 0x32
 8011cb6:	f200 83b1 	bhi.w	801241c <cellResponseCheck+0x78c>
 8011cba:	a201      	add	r2, pc, #4	@ (adr r2, 8011cc0 <cellResponseCheck+0x30>)
 8011cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc0:	08012097 	.word	0x08012097
 8011cc4:	0801241d 	.word	0x0801241d
 8011cc8:	0801241d 	.word	0x0801241d
 8011ccc:	0801241d 	.word	0x0801241d
 8011cd0:	08011d8d 	.word	0x08011d8d
 8011cd4:	0801241d 	.word	0x0801241d
 8011cd8:	08011e6d 	.word	0x08011e6d
 8011cdc:	0801241d 	.word	0x0801241d
 8011ce0:	0801241d 	.word	0x0801241d
 8011ce4:	08011eff 	.word	0x08011eff
 8011ce8:	0801241d 	.word	0x0801241d
 8011cec:	0801241d 	.word	0x0801241d
 8011cf0:	0801241d 	.word	0x0801241d
 8011cf4:	0801241d 	.word	0x0801241d
 8011cf8:	0801241d 	.word	0x0801241d
 8011cfc:	0801241d 	.word	0x0801241d
 8011d00:	0801241d 	.word	0x0801241d
 8011d04:	0801241d 	.word	0x0801241d
 8011d08:	0801241d 	.word	0x0801241d
 8011d0c:	080123af 	.word	0x080123af
 8011d10:	0801241d 	.word	0x0801241d
 8011d14:	0801241d 	.word	0x0801241d
 8011d18:	0801241d 	.word	0x0801241d
 8011d1c:	0801241d 	.word	0x0801241d
 8011d20:	0801241d 	.word	0x0801241d
 8011d24:	0801241d 	.word	0x0801241d
 8011d28:	0801241d 	.word	0x0801241d
 8011d2c:	0801241d 	.word	0x0801241d
 8011d30:	0801241d 	.word	0x0801241d
 8011d34:	0801241d 	.word	0x0801241d
 8011d38:	080122b9 	.word	0x080122b9
 8011d3c:	0801241d 	.word	0x0801241d
 8011d40:	0801241d 	.word	0x0801241d
 8011d44:	0801241d 	.word	0x0801241d
 8011d48:	0801241d 	.word	0x0801241d
 8011d4c:	0801241d 	.word	0x0801241d
 8011d50:	0801241d 	.word	0x0801241d
 8011d54:	0801241d 	.word	0x0801241d
 8011d58:	0801241d 	.word	0x0801241d
 8011d5c:	0801241d 	.word	0x0801241d
 8011d60:	0801241d 	.word	0x0801241d
 8011d64:	0801241d 	.word	0x0801241d
 8011d68:	0801241d 	.word	0x0801241d
 8011d6c:	0801241d 	.word	0x0801241d
 8011d70:	08011fd1 	.word	0x08011fd1
 8011d74:	080121dd 	.word	0x080121dd
 8011d78:	0801224b 	.word	0x0801224b
 8011d7c:	08012341 	.word	0x08012341
 8011d80:	0801241d 	.word	0x0801241d
 8011d84:	08012101 	.word	0x08012101
 8011d88:	0801216f 	.word	0x0801216f
	{
	case OPEN:
		char openTest[] = "+QMTOPEN:";
 8011d8c:	4a89      	ldr	r2, [pc, #548]	@ (8011fb4 <cellResponseCheck+0x324>)
 8011d8e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8011d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8011d94:	c303      	stmia	r3!, {r0, r1}
 8011d96:	801a      	strh	r2, [r3, #0]
		char* openStr = strstr((char*)Memory, openTest);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011d9e:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011da2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8011da6:	4611      	mov	r1, r2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f015 fa66 	bl	802727a <strstr>
 8011dae:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

		if (openStr)   //GAV add full urc
 8011db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d050      	beq.n	8011e5c <cellResponseCheck+0x1cc>
		{
			openStr += (strlen(openTest) + 3);
 8011dba:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7ee fa64 	bl	800028c <strlen>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	3303      	adds	r3, #3
 8011dc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011dcc:	4413      	add	r3, r2
 8011dce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			char checkBit = openStr[0];
 8011dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83

			if (checkBit == '0')
 8011ddc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011de0:	2b30      	cmp	r3, #48	@ 0x30
 8011de2:	d10a      	bne.n	8011dfa <cellResponseCheck+0x16a>
			{
				isOK = 1;
 8011de4:	2301      	movs	r3, #1
 8011de6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8011dea:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011dee:	461a      	mov	r2, r3
 8011df0:	4971      	ldr	r1, [pc, #452]	@ (8011fb8 <cellResponseCheck+0x328>)
 8011df2:	2001      	movs	r0, #1
 8011df4:	f7f4 ffbe 	bl	8006d74 <TraceSend>
 8011df8:	e030      	b.n	8011e5c <cellResponseCheck+0x1cc>
			}
			else if (checkBit == '2')
 8011dfa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011dfe:	2b32      	cmp	r3, #50	@ 0x32
 8011e00:	d10a      	bne.n	8011e18 <cellResponseCheck+0x188>
			{
				isOK = 1;
 8011e02:	2301      	movs	r3, #1
 8011e04:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8011e08:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	496a      	ldr	r1, [pc, #424]	@ (8011fb8 <cellResponseCheck+0x328>)
 8011e10:	2001      	movs	r0, #1
 8011e12:	f7f4 ffaf 	bl	8006d74 <TraceSend>
 8011e16:	e021      	b.n	8011e5c <cellResponseCheck+0x1cc>
			}
			else if (checkBit == '3')  //GAV look into other errors
 8011e18:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8011e1c:	2b33      	cmp	r3, #51	@ 0x33
 8011e1e:	d11d      	bne.n	8011e5c <cellResponseCheck+0x1cc>
			{
				isOK = 3;
 8011e20:	2303      	movs	r3, #3
 8011e22:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("PDP not Active, Status code is %d\r\n",isOK);
 8011e26:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011e2a:	461a      	mov	r2, r3
 8011e2c:	4963      	ldr	r1, [pc, #396]	@ (8011fbc <cellResponseCheck+0x32c>)
 8011e2e:	2001      	movs	r0, #1
 8011e30:	f7f4 ffa0 	bl	8006d74 <TraceSend>
				Command = activatePDP;
 8011e34:	4b5e      	ldr	r3, [pc, #376]	@ (8011fb0 <cellResponseCheck+0x320>)
 8011e36:	222f      	movs	r2, #47	@ 0x2f
 8011e38:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
				CELL_COMMAND(Data_Ptr);
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	f7fc fe1d 	bl	800ea7c <CELL_COMMAND>
				if (cellResponseCheck(Data_Ptr) != 1)
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f7ff ff24 	bl	8011c90 <cellResponseCheck>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d006      	beq.n	8011e5c <cellResponseCheck+0x1cc>
				{

					Command = REENABLEQI;
 8011e4e:	4b58      	ldr	r3, [pc, #352]	@ (8011fb0 <cellResponseCheck+0x320>)
 8011e50:	2203      	movs	r2, #3
 8011e52:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
					CELL_COMMAND( Data_Ptr );
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7fc fe10 	bl	800ea7c <CELL_COMMAND>
				}
			}
		}

		PRINTF("Status code is %d\r\n",isOK);
 8011e5c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011e60:	461a      	mov	r2, r3
 8011e62:	4957      	ldr	r1, [pc, #348]	@ (8011fc0 <cellResponseCheck+0x330>)
 8011e64:	2001      	movs	r0, #1
 8011e66:	f7f4 ff85 	bl	8006d74 <TraceSend>

		break;
 8011e6a:	e2dd      	b.n	8012428 <cellResponseCheck+0x798>

	case CONNECT:
		char connTest[] = "+QMTCONN:";
 8011e6c:	4a55      	ldr	r2, [pc, #340]	@ (8011fc4 <cellResponseCheck+0x334>)
 8011e6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8011e74:	c303      	stmia	r3!, {r0, r1}
 8011e76:	801a      	strh	r2, [r3, #0]
		char* connStr = strstr((char*)Memory, connTest);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011e7e:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011e82:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8011e86:	4611      	mov	r1, r2
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f015 f9f6 	bl	802727a <strstr>
 8011e8e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c

		if(connStr)
 8011e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d029      	beq.n	8011eee <cellResponseCheck+0x25e>
		{
			connStr += (strlen(connTest) + 5);
 8011e9a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7ee f9f4 	bl	800028c <strlen>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	3305      	adds	r3, #5
 8011ea8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011eac:	4413      	add	r3, r2
 8011eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			char checkBit = connStr[0];
 8011eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

			if (checkBit == '0')
 8011ebc:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8011ec0:	2b30      	cmp	r3, #48	@ 0x30
 8011ec2:	d10a      	bne.n	8011eda <cellResponseCheck+0x24a>
			{
				isOK = 1;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8011eca:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011ece:	461a      	mov	r2, r3
 8011ed0:	4939      	ldr	r1, [pc, #228]	@ (8011fb8 <cellResponseCheck+0x328>)
 8011ed2:	2001      	movs	r0, #1
 8011ed4:	f7f4 ff4e 	bl	8006d74 <TraceSend>
 8011ed8:	e009      	b.n	8011eee <cellResponseCheck+0x25e>
			}
			else
			{
				isOK = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("Response Error, Status code is %d\r\n",isOK);
 8011ee0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4938      	ldr	r1, [pc, #224]	@ (8011fc8 <cellResponseCheck+0x338>)
 8011ee8:	2001      	movs	r0, #1
 8011eea:	f7f4 ff43 	bl	8006d74 <TraceSend>
			}
		}

		PRINTF("Status code is %d\r\n",isOK);
 8011eee:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	4932      	ldr	r1, [pc, #200]	@ (8011fc0 <cellResponseCheck+0x330>)
 8011ef6:	2001      	movs	r0, #1
 8011ef8:	f7f4 ff3c 	bl	8006d74 <TraceSend>

		break;
 8011efc:	e294      	b.n	8012428 <cellResponseCheck+0x798>

	case SUBSCRIBEDOWN:

		char subTest[] = "+QMTSUB:";
 8011efe:	4a33      	ldr	r2, [pc, #204]	@ (8011fcc <cellResponseCheck+0x33c>)
 8011f00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011f04:	ca07      	ldmia	r2, {r0, r1, r2}
 8011f06:	c303      	stmia	r3!, {r0, r1}
 8011f08:	701a      	strb	r2, [r3, #0]
		char* subStr = strstr((char*)Memory, subTest);
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011f10:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011f14:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8011f18:	4611      	mov	r1, r2
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f015 f9ad 	bl	802727a <strstr>
 8011f20:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

		if(subStr)
 8011f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d02c      	beq.n	8011f86 <cellResponseCheck+0x2f6>
		{
			subStr += (strlen(subTest) + 5);
 8011f2c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7ee f9ab 	bl	800028c <strlen>
 8011f36:	4603      	mov	r3, r0
 8011f38:	3305      	adds	r3, #5
 8011f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011f3e:	4413      	add	r3, r2
 8011f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			char checkBit = subStr[0];
 8011f44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

			if (checkBit == '0')
 8011f4e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 8011f52:	2b30      	cmp	r3, #48	@ 0x30
 8011f54:	d10a      	bne.n	8011f6c <cellResponseCheck+0x2dc>
			{
				isOK = 1;
 8011f56:	2301      	movs	r3, #1
 8011f58:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8011f5c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011f60:	461a      	mov	r2, r3
 8011f62:	4915      	ldr	r1, [pc, #84]	@ (8011fb8 <cellResponseCheck+0x328>)
 8011f64:	2001      	movs	r0, #1
 8011f66:	f7f4 ff05 	bl	8006d74 <TraceSend>
 8011f6a:	e00c      	b.n	8011f86 <cellResponseCheck+0x2f6>
			}
			else
			{
				isOK = 0;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
				PRINTF("Response Error, Status code is %d\r\n",isOK);
 8011f72:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011f76:	461a      	mov	r2, r3
 8011f78:	4913      	ldr	r1, [pc, #76]	@ (8011fc8 <cellResponseCheck+0x338>)
 8011f7a:	2001      	movs	r0, #1
 8011f7c:	f7f4 fefa 	bl	8006d74 <TraceSend>
				retry = true;
 8011f80:	4b0a      	ldr	r3, [pc, #40]	@ (8011fac <cellResponseCheck+0x31c>)
 8011f82:	2201      	movs	r2, #1
 8011f84:	701a      	strb	r2, [r3, #0]
			}
		}

		PRINTF("Status code is %d\r\n",isOK);
 8011f86:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011f8a:	461a      	mov	r2, r3
 8011f8c:	490c      	ldr	r1, [pc, #48]	@ (8011fc0 <cellResponseCheck+0x330>)
 8011f8e:	2001      	movs	r0, #1
 8011f90:	f7f4 fef0 	bl	8006d74 <TraceSend>
		if (isOK != 1)
 8011f94:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	f000 8244 	beq.w	8012426 <cellResponseCheck+0x796>
		{
			retry = true;
 8011f9e:	4b03      	ldr	r3, [pc, #12]	@ (8011fac <cellResponseCheck+0x31c>)
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	701a      	strb	r2, [r3, #0]
		}

		break;
 8011fa4:	e23f      	b.n	8012426 <cellResponseCheck+0x796>
 8011fa6:	bf00      	nop
 8011fa8:	0802f7ac 	.word	0x0802f7ac
 8011fac:	2007be60 	.word	0x2007be60
 8011fb0:	2007a330 	.word	0x2007a330
 8011fb4:	0802f86c 	.word	0x0802f86c
 8011fb8:	0802f7c8 	.word	0x0802f7c8
 8011fbc:	0802f7f0 	.word	0x0802f7f0
 8011fc0:	0802f814 	.word	0x0802f814
 8011fc4:	0802f878 	.word	0x0802f878
 8011fc8:	0802f828 	.word	0x0802f828
 8011fcc:	0802f884 	.word	0x0802f884

	case activatePDP:

		char actPdpTest[] = "OK";
 8011fd0:	4aca      	ldr	r2, [pc, #808]	@ (80122fc <cellResponseCheck+0x66c>)
 8011fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011fd6:	6812      	ldr	r2, [r2, #0]
 8011fd8:	4611      	mov	r1, r2
 8011fda:	8019      	strh	r1, [r3, #0]
 8011fdc:	3302      	adds	r3, #2
 8011fde:	0c12      	lsrs	r2, r2, #16
 8011fe0:	701a      	strb	r2, [r3, #0]
		char errTest[] = "+CME ERROR: 30";
 8011fe2:	4bc7      	ldr	r3, [pc, #796]	@ (8012300 <cellResponseCheck+0x670>)
 8011fe4:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8011fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fea:	c407      	stmia	r4!, {r0, r1, r2}
 8011fec:	8023      	strh	r3, [r4, #0]
 8011fee:	3402      	adds	r4, #2
 8011ff0:	0c1b      	lsrs	r3, r3, #16
 8011ff2:	7023      	strb	r3, [r4, #0]
		char* actPdpStr = strstr((char*)Memory, actPdpTest);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8011ffa:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8011ffe:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8012002:	4611      	mov	r1, r2
 8012004:	4618      	mov	r0, r3
 8012006:	f015 f938 	bl	802727a <strstr>
 801200a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		char* errStr = strstr((char*)Memory, errTest);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012014:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8012018:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 801201c:	4611      	mov	r1, r2
 801201e:	4618      	mov	r0, r3
 8012020:	f015 f92b 	bl	802727a <strstr>
 8012024:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

		if(actPdpStr)
 8012028:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00a      	beq.n	8012046 <cellResponseCheck+0x3b6>
		{

			isOK = 1;
 8012030:	2301      	movs	r3, #1
 8012032:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8012036:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801203a:	461a      	mov	r2, r3
 801203c:	49b1      	ldr	r1, [pc, #708]	@ (8012304 <cellResponseCheck+0x674>)
 801203e:	2001      	movs	r0, #1
 8012040:	f7f4 fe98 	bl	8006d74 <TraceSend>
 8012044:	e01f      	b.n	8012086 <cellResponseCheck+0x3f6>

		}
		else if (errStr)
 8012046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d011      	beq.n	8012072 <cellResponseCheck+0x3e2>
		{
			isOK = 3;
 801204e:	2303      	movs	r3, #3
 8012050:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("PDP not Active, Status code is %d\r\n",isOK);
 8012054:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012058:	461a      	mov	r2, r3
 801205a:	49ab      	ldr	r1, [pc, #684]	@ (8012308 <cellResponseCheck+0x678>)
 801205c:	2001      	movs	r0, #1
 801205e:	f7f4 fe89 	bl	8006d74 <TraceSend>

			Command = PDP_POPULATE;
 8012062:	4baa      	ldr	r3, [pc, #680]	@ (801230c <cellResponseCheck+0x67c>)
 8012064:	2219      	movs	r2, #25
 8012066:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
			CELL_COMMAND(Data_Ptr);
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7fc fd06 	bl	800ea7c <CELL_COMMAND>
 8012070:	e009      	b.n	8012086 <cellResponseCheck+0x3f6>
		}
		else
		{
			isOK = 0;
 8012072:	2300      	movs	r3, #0
 8012074:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 8012078:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801207c:	461a      	mov	r2, r3
 801207e:	49a4      	ldr	r1, [pc, #656]	@ (8012310 <cellResponseCheck+0x680>)
 8012080:	2001      	movs	r0, #1
 8012082:	f7f4 fe77 	bl	8006d74 <TraceSend>
		}


		PRINTF("Status code is %d\r\n",isOK);
 8012086:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801208a:	461a      	mov	r2, r3
 801208c:	49a1      	ldr	r1, [pc, #644]	@ (8012314 <cellResponseCheck+0x684>)
 801208e:	2001      	movs	r0, #1
 8012090:	f7f4 fe70 	bl	8006d74 <TraceSend>

		break;
 8012094:	e1c8      	b.n	8012428 <cellResponseCheck+0x798>

	case REENABLEQI:


		char reEnablePdpTest[] = "OK";
 8012096:	4a99      	ldr	r2, [pc, #612]	@ (80122fc <cellResponseCheck+0x66c>)
 8012098:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801209c:	6812      	ldr	r2, [r2, #0]
 801209e:	4611      	mov	r1, r2
 80120a0:	8019      	strh	r1, [r3, #0]
 80120a2:	3302      	adds	r3, #2
 80120a4:	0c12      	lsrs	r2, r2, #16
 80120a6:	701a      	strb	r2, [r3, #0]
		char* reEnablePdpStr = strstr((char*)Memory, reEnablePdpTest);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80120ae:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80120b2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80120b6:	4611      	mov	r1, r2
 80120b8:	4618      	mov	r0, r3
 80120ba:	f015 f8de 	bl	802727a <strstr>
 80120be:	67f8      	str	r0, [r7, #124]	@ 0x7c

		if(reEnablePdpStr)
 80120c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d00a      	beq.n	80120dc <cellResponseCheck+0x44c>
		{
			isOK = 1;
 80120c6:	2301      	movs	r3, #1
 80120c8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 80120cc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80120d0:	461a      	mov	r2, r3
 80120d2:	498c      	ldr	r1, [pc, #560]	@ (8012304 <cellResponseCheck+0x674>)
 80120d4:	2001      	movs	r0, #1
 80120d6:	f7f4 fe4d 	bl	8006d74 <TraceSend>
 80120da:	e009      	b.n	80120f0 <cellResponseCheck+0x460>
		}
		else
		{
			isOK = 0;
 80120dc:	2300      	movs	r3, #0
 80120de:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 80120e2:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80120e6:	461a      	mov	r2, r3
 80120e8:	4989      	ldr	r1, [pc, #548]	@ (8012310 <cellResponseCheck+0x680>)
 80120ea:	2001      	movs	r0, #1
 80120ec:	f7f4 fe42 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 80120f0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80120f4:	461a      	mov	r2, r3
 80120f6:	4987      	ldr	r1, [pc, #540]	@ (8012314 <cellResponseCheck+0x684>)
 80120f8:	2001      	movs	r0, #1
 80120fa:	f7f4 fe3b 	bl	8006d74 <TraceSend>

		break;
 80120fe:	e193      	b.n	8012428 <cellResponseCheck+0x798>

	case GPS_ACTIVE_ANTENNA_ENABLE:

		char activeAntennaEnableTest[] = "OK";
 8012100:	4a7e      	ldr	r2, [pc, #504]	@ (80122fc <cellResponseCheck+0x66c>)
 8012102:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012106:	6812      	ldr	r2, [r2, #0]
 8012108:	4611      	mov	r1, r2
 801210a:	8019      	strh	r1, [r3, #0]
 801210c:	3302      	adds	r3, #2
 801210e:	0c12      	lsrs	r2, r2, #16
 8012110:	701a      	strb	r2, [r3, #0]
		char* activeAntennaEnableTestStr = strstr((char*)Memory, activeAntennaEnableTest);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012118:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801211c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8012120:	4611      	mov	r1, r2
 8012122:	4618      	mov	r0, r3
 8012124:	f015 f8a9 	bl	802727a <strstr>
 8012128:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4

		if(activeAntennaEnableTestStr)
 801212c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012130:	2b00      	cmp	r3, #0
 8012132:	d00a      	beq.n	801214a <cellResponseCheck+0x4ba>
		{
			isOK = 1;
 8012134:	2301      	movs	r3, #1
 8012136:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 801213a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801213e:	461a      	mov	r2, r3
 8012140:	4970      	ldr	r1, [pc, #448]	@ (8012304 <cellResponseCheck+0x674>)
 8012142:	2001      	movs	r0, #1
 8012144:	f7f4 fe16 	bl	8006d74 <TraceSend>
 8012148:	e009      	b.n	801215e <cellResponseCheck+0x4ce>
		}
		else
		{
			isOK = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 8012150:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012154:	461a      	mov	r2, r3
 8012156:	496e      	ldr	r1, [pc, #440]	@ (8012310 <cellResponseCheck+0x680>)
 8012158:	2001      	movs	r0, #1
 801215a:	f7f4 fe0b 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 801215e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012162:	461a      	mov	r2, r3
 8012164:	496b      	ldr	r1, [pc, #428]	@ (8012314 <cellResponseCheck+0x684>)
 8012166:	2001      	movs	r0, #1
 8012168:	f7f4 fe04 	bl	8006d74 <TraceSend>

		break;
 801216c:	e15c      	b.n	8012428 <cellResponseCheck+0x798>

	case GPS_ACTIVE_ANTENNA_SET:

		char activeAntennaSetTest[] = "OK";
 801216e:	4a63      	ldr	r2, [pc, #396]	@ (80122fc <cellResponseCheck+0x66c>)
 8012170:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8012174:	6812      	ldr	r2, [r2, #0]
 8012176:	4611      	mov	r1, r2
 8012178:	8019      	strh	r1, [r3, #0]
 801217a:	3302      	adds	r3, #2
 801217c:	0c12      	lsrs	r2, r2, #16
 801217e:	701a      	strb	r2, [r3, #0]
		char* activeAntennaEnableSetStr = strstr((char*)Memory, activeAntennaSetTest);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012186:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801218a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 801218e:	4611      	mov	r1, r2
 8012190:	4618      	mov	r0, r3
 8012192:	f015 f872 	bl	802727a <strstr>
 8012196:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

		if(activeAntennaEnableSetStr)
 801219a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00a      	beq.n	80121b8 <cellResponseCheck+0x528>
		{
			isOK = 1;
 80121a2:	2301      	movs	r3, #1
 80121a4:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 80121a8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80121ac:	461a      	mov	r2, r3
 80121ae:	4955      	ldr	r1, [pc, #340]	@ (8012304 <cellResponseCheck+0x674>)
 80121b0:	2001      	movs	r0, #1
 80121b2:	f7f4 fddf 	bl	8006d74 <TraceSend>
 80121b6:	e009      	b.n	80121cc <cellResponseCheck+0x53c>
		}
		else
		{
			isOK = 0;
 80121b8:	2300      	movs	r3, #0
 80121ba:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 80121be:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80121c2:	461a      	mov	r2, r3
 80121c4:	4952      	ldr	r1, [pc, #328]	@ (8012310 <cellResponseCheck+0x680>)
 80121c6:	2001      	movs	r0, #1
 80121c8:	f7f4 fdd4 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 80121cc:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80121d0:	461a      	mov	r2, r3
 80121d2:	4950      	ldr	r1, [pc, #320]	@ (8012314 <cellResponseCheck+0x684>)
 80121d4:	2001      	movs	r0, #1
 80121d6:	f7f4 fdcd 	bl	8006d74 <TraceSend>

		break;
 80121da:	e125      	b.n	8012428 <cellResponseCheck+0x798>

	case XTRA_ENABLE:

		char xtraEnableTest[] = "OK";
 80121dc:	4a47      	ldr	r2, [pc, #284]	@ (80122fc <cellResponseCheck+0x66c>)
 80121de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80121e2:	6812      	ldr	r2, [r2, #0]
 80121e4:	4611      	mov	r1, r2
 80121e6:	8019      	strh	r1, [r3, #0]
 80121e8:	3302      	adds	r3, #2
 80121ea:	0c12      	lsrs	r2, r2, #16
 80121ec:	701a      	strb	r2, [r3, #0]
		char* xtraEnableStr = strstr((char*)Memory, xtraEnableTest);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80121f4:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80121f8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80121fc:	4611      	mov	r1, r2
 80121fe:	4618      	mov	r0, r3
 8012200:	f015 f83b 	bl	802727a <strstr>
 8012204:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8

		if(xtraEnableStr)
 8012208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801220c:	2b00      	cmp	r3, #0
 801220e:	d00a      	beq.n	8012226 <cellResponseCheck+0x596>
		{
			isOK = 1;
 8012210:	2301      	movs	r3, #1
 8012212:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8012216:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801221a:	461a      	mov	r2, r3
 801221c:	4939      	ldr	r1, [pc, #228]	@ (8012304 <cellResponseCheck+0x674>)
 801221e:	2001      	movs	r0, #1
 8012220:	f7f4 fda8 	bl	8006d74 <TraceSend>
 8012224:	e009      	b.n	801223a <cellResponseCheck+0x5aa>
		}
		else
		{
			isOK = 0;
 8012226:	2300      	movs	r3, #0
 8012228:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 801222c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012230:	461a      	mov	r2, r3
 8012232:	4937      	ldr	r1, [pc, #220]	@ (8012310 <cellResponseCheck+0x680>)
 8012234:	2001      	movs	r0, #1
 8012236:	f7f4 fd9d 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 801223a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801223e:	461a      	mov	r2, r3
 8012240:	4934      	ldr	r1, [pc, #208]	@ (8012314 <cellResponseCheck+0x684>)
 8012242:	2001      	movs	r0, #1
 8012244:	f7f4 fd96 	bl	8006d74 <TraceSend>

		break;
 8012248:	e0ee      	b.n	8012428 <cellResponseCheck+0x798>

	case XTRA_AUTODL_ENABLE:

		char extraAutoDlTest[] = "OK";
 801224a:	4a2c      	ldr	r2, [pc, #176]	@ (80122fc <cellResponseCheck+0x66c>)
 801224c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012250:	6812      	ldr	r2, [r2, #0]
 8012252:	4611      	mov	r1, r2
 8012254:	8019      	strh	r1, [r3, #0]
 8012256:	3302      	adds	r3, #2
 8012258:	0c12      	lsrs	r2, r2, #16
 801225a:	701a      	strb	r2, [r3, #0]
		char* extraAutoDlStr = strstr((char*)Memory, extraAutoDlTest);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012262:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8012266:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801226a:	4611      	mov	r1, r2
 801226c:	4618      	mov	r0, r3
 801226e:	f015 f804 	bl	802727a <strstr>
 8012272:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac

		if(extraAutoDlStr)
 8012276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801227a:	2b00      	cmp	r3, #0
 801227c:	d00a      	beq.n	8012294 <cellResponseCheck+0x604>
		{
			isOK = 1;
 801227e:	2301      	movs	r3, #1
 8012280:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 8012284:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012288:	461a      	mov	r2, r3
 801228a:	491e      	ldr	r1, [pc, #120]	@ (8012304 <cellResponseCheck+0x674>)
 801228c:	2001      	movs	r0, #1
 801228e:	f7f4 fd71 	bl	8006d74 <TraceSend>
 8012292:	e009      	b.n	80122a8 <cellResponseCheck+0x618>
		}
		else
		{
			isOK = 0;
 8012294:	2300      	movs	r3, #0
 8012296:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 801229a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801229e:	461a      	mov	r2, r3
 80122a0:	491b      	ldr	r1, [pc, #108]	@ (8012310 <cellResponseCheck+0x680>)
 80122a2:	2001      	movs	r0, #1
 80122a4:	f7f4 fd66 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 80122a8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80122ac:	461a      	mov	r2, r3
 80122ae:	4919      	ldr	r1, [pc, #100]	@ (8012314 <cellResponseCheck+0x684>)
 80122b0:	2001      	movs	r0, #1
 80122b2:	f7f4 fd5f 	bl	8006d74 <TraceSend>

		break;
 80122b6:	e0b7      	b.n	8012428 <cellResponseCheck+0x798>

	case CELLID:

		char cellIDTest[] = "+CREG:0,1";
 80122b8:	4a17      	ldr	r2, [pc, #92]	@ (8012318 <cellResponseCheck+0x688>)
 80122ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80122be:	ca07      	ldmia	r2, {r0, r1, r2}
 80122c0:	c303      	stmia	r3!, {r0, r1}
 80122c2:	801a      	strh	r2, [r3, #0]
		char* cellIDStr = strstr((char*)Memory, cellIDTest);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80122ca:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80122ce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80122d2:	4611      	mov	r1, r2
 80122d4:	4618      	mov	r0, r3
 80122d6:	f014 ffd0 	bl	802727a <strstr>
 80122da:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

		if(cellIDStr)
 80122de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d01a      	beq.n	801231c <cellResponseCheck+0x68c>
		{
			isOK = 1;
 80122e6:	2301      	movs	r3, #1
 80122e8:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 80122ec:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80122f0:	461a      	mov	r2, r3
 80122f2:	4904      	ldr	r1, [pc, #16]	@ (8012304 <cellResponseCheck+0x674>)
 80122f4:	2001      	movs	r0, #1
 80122f6:	f7f4 fd3d 	bl	8006d74 <TraceSend>
 80122fa:	e019      	b.n	8012330 <cellResponseCheck+0x6a0>
 80122fc:	0802f174 	.word	0x0802f174
 8012300:	0802f890 	.word	0x0802f890
 8012304:	0802f7c8 	.word	0x0802f7c8
 8012308:	0802f7f0 	.word	0x0802f7f0
 801230c:	2007a330 	.word	0x2007a330
 8012310:	0802f828 	.word	0x0802f828
 8012314:	0802f814 	.word	0x0802f814
 8012318:	0802f8a0 	.word	0x0802f8a0
		}
		else
		{
			isOK = 0;
 801231c:	2300      	movs	r3, #0
 801231e:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 8012322:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012326:	461a      	mov	r2, r3
 8012328:	4942      	ldr	r1, [pc, #264]	@ (8012434 <cellResponseCheck+0x7a4>)
 801232a:	2001      	movs	r0, #1
 801232c:	f7f4 fd22 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 8012330:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012334:	461a      	mov	r2, r3
 8012336:	4940      	ldr	r1, [pc, #256]	@ (8012438 <cellResponseCheck+0x7a8>)
 8012338:	2001      	movs	r0, #1
 801233a:	f7f4 fd1b 	bl	8006d74 <TraceSend>

		break;
 801233e:	e073      	b.n	8012428 <cellResponseCheck+0x798>

	case XTRA_TIME_QUERY:

		char xtraTimeTest[] = "+QGPSXTRATIME:";
 8012340:	4b3e      	ldr	r3, [pc, #248]	@ (801243c <cellResponseCheck+0x7ac>)
 8012342:	f107 0414 	add.w	r4, r7, #20
 8012346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012348:	c407      	stmia	r4!, {r0, r1, r2}
 801234a:	8023      	strh	r3, [r4, #0]
 801234c:	3402      	adds	r4, #2
 801234e:	0c1b      	lsrs	r3, r3, #16
 8012350:	7023      	strb	r3, [r4, #0]
		char* xtraTimeStr = strstr((char*)Memory, xtraTimeTest);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012358:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801235c:	f107 0214 	add.w	r2, r7, #20
 8012360:	4611      	mov	r1, r2
 8012362:	4618      	mov	r0, r3
 8012364:	f014 ff89 	bl	802727a <strstr>
 8012368:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0

		if(xtraTimeStr)
 801236c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00a      	beq.n	801238a <cellResponseCheck+0x6fa>
		{
			isOK = 1;
 8012374:	2301      	movs	r3, #1
 8012376:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 801237a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 801237e:	461a      	mov	r2, r3
 8012380:	492f      	ldr	r1, [pc, #188]	@ (8012440 <cellResponseCheck+0x7b0>)
 8012382:	2001      	movs	r0, #1
 8012384:	f7f4 fcf6 	bl	8006d74 <TraceSend>
 8012388:	e009      	b.n	801239e <cellResponseCheck+0x70e>
		}
		else
		{
			isOK = 0;
 801238a:	2300      	movs	r3, #0
 801238c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 8012390:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012394:	461a      	mov	r2, r3
 8012396:	4927      	ldr	r1, [pc, #156]	@ (8012434 <cellResponseCheck+0x7a4>)
 8012398:	2001      	movs	r0, #1
 801239a:	f7f4 fceb 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 801239e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80123a2:	461a      	mov	r2, r3
 80123a4:	4924      	ldr	r1, [pc, #144]	@ (8012438 <cellResponseCheck+0x7a8>)
 80123a6:	2001      	movs	r0, #1
 80123a8:	f7f4 fce4 	bl	8006d74 <TraceSend>

		break;
 80123ac:	e03c      	b.n	8012428 <cellResponseCheck+0x798>

	case GPS_ENABLE:

		char xtraDownloadTest[] = "XTRA_DL\",0";
 80123ae:	4a25      	ldr	r2, [pc, #148]	@ (8012444 <cellResponseCheck+0x7b4>)
 80123b0:	f107 0308 	add.w	r3, r7, #8
 80123b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80123b6:	c303      	stmia	r3!, {r0, r1}
 80123b8:	801a      	strh	r2, [r3, #0]
 80123ba:	3302      	adds	r3, #2
 80123bc:	0c12      	lsrs	r2, r2, #16
 80123be:	701a      	strb	r2, [r3, #0]
		char* xtraDownloadStr = strstr((char*)Memory, xtraDownloadTest);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80123c6:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80123ca:	f107 0208 	add.w	r2, r7, #8
 80123ce:	4611      	mov	r1, r2
 80123d0:	4618      	mov	r0, r3
 80123d2:	f014 ff52 	bl	802727a <strstr>
 80123d6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

		if(xtraDownloadStr)
 80123da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00a      	beq.n	80123f8 <cellResponseCheck+0x768>
		{
			isOK = 1;
 80123e2:	2301      	movs	r3, #1
 80123e4:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Validated, Status code is %d\r\n",isOK);
 80123e8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 80123ec:	461a      	mov	r2, r3
 80123ee:	4914      	ldr	r1, [pc, #80]	@ (8012440 <cellResponseCheck+0x7b0>)
 80123f0:	2001      	movs	r0, #1
 80123f2:	f7f4 fcbf 	bl	8006d74 <TraceSend>
 80123f6:	e009      	b.n	801240c <cellResponseCheck+0x77c>
		}
		else
		{
			isOK = 0;
 80123f8:	2300      	movs	r3, #0
 80123fa:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
			PRINTF("Response Error, Status code is %d\r\n",isOK);
 80123fe:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012402:	461a      	mov	r2, r3
 8012404:	490b      	ldr	r1, [pc, #44]	@ (8012434 <cellResponseCheck+0x7a4>)
 8012406:	2001      	movs	r0, #1
 8012408:	f7f4 fcb4 	bl	8006d74 <TraceSend>
		}

		PRINTF("Status code is %d\r\n",isOK);
 801240c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8012410:	461a      	mov	r2, r3
 8012412:	4909      	ldr	r1, [pc, #36]	@ (8012438 <cellResponseCheck+0x7a8>)
 8012414:	2001      	movs	r0, #1
 8012416:	f7f4 fcad 	bl	8006d74 <TraceSend>

		break;
 801241a:	e005      	b.n	8012428 <cellResponseCheck+0x798>

	default:

		PRINTF("Error in Cell Response Check.\r\n");
 801241c:	490a      	ldr	r1, [pc, #40]	@ (8012448 <cellResponseCheck+0x7b8>)
 801241e:	2001      	movs	r0, #1
 8012420:	f7f4 fca8 	bl	8006d74 <TraceSend>
 8012424:	e000      	b.n	8012428 <cellResponseCheck+0x798>
		break;
 8012426:	bf00      	nop
	}
	return isOK;
 8012428:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 801242c:	4618      	mov	r0, r3
 801242e:	37c4      	adds	r7, #196	@ 0xc4
 8012430:	46bd      	mov	sp, r7
 8012432:	bd90      	pop	{r4, r7, pc}
 8012434:	0802f828 	.word	0x0802f828
 8012438:	0802f814 	.word	0x0802f814
 801243c:	0802f8ac 	.word	0x0802f8ac
 8012440:	0802f7c8 	.word	0x0802f7c8
 8012444:	0802f8bc 	.word	0x0802f8bc
 8012448:	0802f84c 	.word	0x0802f84c

0801244c <sendDeviceConfig>:

//CSC function to send configuration data to server
void sendDeviceConfig( MEM_PTR *Data_Ptr, STATUS_UPLINK_TYPE uplnkType )
{
 801244c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801244e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8012452:	b085      	sub	sp, #20
 8012454:	af0a      	add	r7, sp, #40	@ 0x28
 8012456:	f107 0308 	add.w	r3, r7, #8
 801245a:	f843 0c04 	str.w	r0, [r3, #-4]
 801245e:	460a      	mov	r2, r1
 8012460:	f107 0308 	add.w	r3, r7, #8
 8012464:	f803 2c05 	strb.w	r2, [r3, #-5]
	char configBuff[MEMORY_MAX] = {0};
 8012468:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801246c:	f103 0308 	add.w	r3, r3, #8
 8012470:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 8012474:	2200      	movs	r2, #0
 8012476:	601a      	str	r2, [r3, #0]
 8012478:	3304      	adds	r3, #4
 801247a:	f640 729c 	movw	r2, #3996	@ 0xf9c
 801247e:	2100      	movs	r1, #0
 8012480:	4618      	mov	r0, r3
 8012482:	f014 fe75 	bl	8027170 <memset>
	char timebuff[ISO_TIMESTAMP_LENGTH] = {""}; // for time stamp
 8012486:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801248a:	f103 0308 	add.w	r3, r3, #8
 801248e:	f6a3 73c8 	subw	r3, r3, #4040	@ 0xfc8
 8012492:	2200      	movs	r2, #0
 8012494:	601a      	str	r2, [r3, #0]
 8012496:	3304      	adds	r3, #4
 8012498:	2200      	movs	r2, #0
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	605a      	str	r2, [r3, #4]
 801249e:	609a      	str	r2, [r3, #8]
 80124a0:	60da      	str	r2, [r3, #12]
 80124a2:	611a      	str	r2, [r3, #16]
 80124a4:	751a      	strb	r2, [r3, #20]
	char responseTypeBuff[50] = {""};  // temp buffer for type of device configuration Boot or Configured
 80124a6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80124aa:	f103 0308 	add.w	r3, r3, #8
 80124ae:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 80124b2:	2200      	movs	r2, #0
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	3304      	adds	r3, #4
 80124b8:	222e      	movs	r2, #46	@ 0x2e
 80124ba:	2100      	movs	r1, #0
 80124bc:	4618      	mov	r0, r3
 80124be:	f014 fe57 	bl	8027170 <memset>
	int buffSize = 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80124c8:	f102 0204 	add.w	r2, r2, #4
 80124cc:	6013      	str	r3, [r2, #0]

	Time_StampISO(timebuff); //Get time stamp in ISO format
 80124ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7f4 ff62 	bl	800739c <Time_StampISO>

	if(uplnkType == BOOT)
 80124d8:	f107 0308 	add.w	r3, r7, #8
 80124dc:	f813 3c05 	ldrb.w	r3, [r3, #-5]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10b      	bne.n	80124fc <sendDeviceConfig+0xb0>
	{
		int len = strlen(BOOT_MSG) + 1;
 80124e4:	2308      	movs	r3, #8
 80124e6:	f8c7 3ffc 	str.w	r3, [r7, #4092]	@ 0xffc
		strncpy(responseTypeBuff, BOOT_MSG, len);
 80124ea:	f8d7 2ffc 	ldr.w	r2, [r7, #4092]	@ 0xffc
 80124ee:	f107 030c 	add.w	r3, r7, #12
 80124f2:	49ce      	ldr	r1, [pc, #824]	@ (801282c <sendDeviceConfig+0x3e0>)
 80124f4:	4618      	mov	r0, r3
 80124f6:	f014 fe82 	bl	80271fe <strncpy>
 80124fa:	e017      	b.n	801252c <sendDeviceConfig+0xe0>
	}
	else if(uplnkType == CONFIG_ACK)
 80124fc:	f107 0308 	add.w	r3, r7, #8
 8012500:	f813 3c05 	ldrb.w	r3, [r3, #-5]
 8012504:	2b01      	cmp	r3, #1
 8012506:	d10d      	bne.n	8012524 <sendDeviceConfig+0xd8>
	{
		int len = strlen(CONFIG_MSG) + 1;
 8012508:	230b      	movs	r3, #11
 801250a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 801250e:	6013      	str	r3, [r2, #0]
		strncpy(responseTypeBuff, CONFIG_MSG, len);
 8012510:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	f107 030c 	add.w	r3, r7, #12
 801251a:	49c5      	ldr	r1, [pc, #788]	@ (8012830 <sendDeviceConfig+0x3e4>)
 801251c:	4618      	mov	r0, r3
 801251e:	f014 fe6e 	bl	80271fe <strncpy>
 8012522:	e003      	b.n	801252c <sendDeviceConfig+0xe0>
	}
	else
	{
		PRINTF("Invalid response type\r\n\n");
 8012524:	49c3      	ldr	r1, [pc, #780]	@ (8012834 <sendDeviceConfig+0x3e8>)
 8012526:	2001      	movs	r0, #1
 8012528:	f7f4 fc24 	bl	8006d74 <TraceSend>
	}

	//NOTE: This is mostly junk data, but the specifiers should be correct so we can fill it in later.
	//Just need to change arguments.

	if(responseTypeBuff[0] != '\0')
 801252c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012530:	f103 0308 	add.w	r3, r3, #8
 8012534:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	f000 8115 	beq.w	801276a <sendDeviceConfig+0x31e>
	{
		//CSC snprintf for devID,type,timestamp,response type,firmware,heartbeat, and day night
		buffSize = snprintf(configBuff, MEMORY_MAX, "\1{\"dev_id\":\"%lu\",\"type\":\"%s\",\"timestamp\":\"%s\",\"response_type\":\"%s\",\"firmware_version\":\"%s\",\r\n\"heartbeat\":{\"version\":%u,\"mode\":%u,\"hb_interval\":%u},\r\n%s",
 8012540:	4bbd      	ldr	r3, [pc, #756]	@ (8012838 <sendDeviceConfig+0x3ec>)
 8012542:	681c      	ldr	r4, [r3, #0]
				UNIQUE_Device_ID, "device_status", timebuff, responseTypeBuff, "XPM_LowP_V0.5.0", 0, Data_Ptr->heartBeatData.mode, Data_Ptr->heartBeatData.hbInterval, dayNightConfigStr());
 8012544:	f107 0308 	add.w	r3, r7, #8
 8012548:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801254c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012550:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
		buffSize = snprintf(configBuff, MEMORY_MAX, "\1{\"dev_id\":\"%lu\",\"type\":\"%s\",\"timestamp\":\"%s\",\"response_type\":\"%s\",\"firmware_version\":\"%s\",\r\n\"heartbeat\":{\"version\":%u,\"mode\":%u,\"hb_interval\":%u},\r\n%s",
 8012554:	461d      	mov	r5, r3
				UNIQUE_Device_ID, "device_status", timebuff, responseTypeBuff, "XPM_LowP_V0.5.0", 0, Data_Ptr->heartBeatData.mode, Data_Ptr->heartBeatData.hbInterval, dayNightConfigStr());
 8012556:	f107 0308 	add.w	r3, r7, #8
 801255a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801255e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012562:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
		buffSize = snprintf(configBuff, MEMORY_MAX, "\1{\"dev_id\":\"%lu\",\"type\":\"%s\",\"timestamp\":\"%s\",\"response_type\":\"%s\",\"firmware_version\":\"%s\",\r\n\"heartbeat\":{\"version\":%u,\"mode\":%u,\"hb_interval\":%u},\r\n%s",
 8012566:	461e      	mov	r6, r3
 8012568:	f7f2 f8ba 	bl	80046e0 <dayNightConfigStr>
 801256c:	4603      	mov	r3, r0
 801256e:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8012572:	9307      	str	r3, [sp, #28]
 8012574:	9606      	str	r6, [sp, #24]
 8012576:	9505      	str	r5, [sp, #20]
 8012578:	2300      	movs	r3, #0
 801257a:	9304      	str	r3, [sp, #16]
 801257c:	4baf      	ldr	r3, [pc, #700]	@ (801283c <sendDeviceConfig+0x3f0>)
 801257e:	9303      	str	r3, [sp, #12]
 8012580:	f107 030c 	add.w	r3, r7, #12
 8012584:	9302      	str	r3, [sp, #8]
 8012586:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801258a:	9301      	str	r3, [sp, #4]
 801258c:	4bac      	ldr	r3, [pc, #688]	@ (8012840 <sendDeviceConfig+0x3f4>)
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	4623      	mov	r3, r4
 8012592:	4aac      	ldr	r2, [pc, #688]	@ (8012844 <sendDeviceConfig+0x3f8>)
 8012594:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 8012598:	f014 fd08 	bl	8026fac <sniprintf>
 801259c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80125a0:	f103 0304 	add.w	r3, r3, #4
 80125a4:	6018      	str	r0, [r3, #0]

		//CSC snprintf for pir, motion filter day, and motion filter night
		buffSize += snprintf((configBuff + buffSize), (MEMORY_MAX - buffSize), ",\r\n%s", getPirConfigStr());
 80125a6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80125aa:	f103 0304 	add.w	r3, r3, #4
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80125b4:	18d4      	adds	r4, r2, r3
 80125b6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80125ba:	f103 0304 	add.w	r3, r3, #4
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80125c4:	461d      	mov	r5, r3
 80125c6:	f7f9 fef3 	bl	800c3b0 <getPirConfigStr>
 80125ca:	4603      	mov	r3, r0
 80125cc:	4a9e      	ldr	r2, [pc, #632]	@ (8012848 <sendDeviceConfig+0x3fc>)
 80125ce:	4629      	mov	r1, r5
 80125d0:	4620      	mov	r0, r4
 80125d2:	f014 fceb 	bl	8026fac <sniprintf>
 80125d6:	4602      	mov	r2, r0
 80125d8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80125dc:	f103 0304 	add.w	r3, r3, #4
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	4413      	add	r3, r2
 80125e4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80125e8:	f102 0204 	add.w	r2, r2, #4
 80125ec:	6013      	str	r3, [r2, #0]

		//CSC snprintf for buzzer and environment information
		buffSize += snprintf((configBuff + buffSize), (MEMORY_MAX - buffSize), "\r\n,\"buzzer\":{\"version\":%u,\"mode\":%u,\"start_motion_cycles\":%u,\"stop_motion_cycles\":%u},\"environment\":{\"version\":%u,\"sample_period\":%u,\"alarm_window\":%u,\"alarm_sample_period\":%u,\"muting_period\":%u,\"warm_up\":%u,\"charger_disable_temp\":%u}",
 80125ee:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80125f2:	f103 0304 	add.w	r3, r3, #4
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80125fc:	18d0      	adds	r0, r2, r3
 80125fe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012602:	f103 0304 	add.w	r3, r3, #4
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 801260c:	4619      	mov	r1, r3
 801260e:	2300      	movs	r3, #0
 8012610:	9309      	str	r3, [sp, #36]	@ 0x24
 8012612:	2302      	movs	r3, #2
 8012614:	9308      	str	r3, [sp, #32]
 8012616:	231e      	movs	r3, #30
 8012618:	9307      	str	r3, [sp, #28]
 801261a:	230f      	movs	r3, #15
 801261c:	9306      	str	r3, [sp, #24]
 801261e:	231e      	movs	r3, #30
 8012620:	9305      	str	r3, [sp, #20]
 8012622:	230f      	movs	r3, #15
 8012624:	9304      	str	r3, [sp, #16]
 8012626:	2300      	movs	r3, #0
 8012628:	9303      	str	r3, [sp, #12]
 801262a:	230a      	movs	r3, #10
 801262c:	9302      	str	r3, [sp, #8]
 801262e:	230a      	movs	r3, #10
 8012630:	9301      	str	r3, [sp, #4]
 8012632:	2301      	movs	r3, #1
 8012634:	9300      	str	r3, [sp, #0]
 8012636:	2300      	movs	r3, #0
 8012638:	4a84      	ldr	r2, [pc, #528]	@ (801284c <sendDeviceConfig+0x400>)
 801263a:	f014 fcb7 	bl	8026fac <sniprintf>
 801263e:	4602      	mov	r2, r0
 8012640:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012644:	f103 0304 	add.w	r3, r3, #4
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4413      	add	r3, r2
 801264c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012650:	f102 0204 	add.w	r2, r2, #4
 8012654:	6013      	str	r3, [r2, #0]
				0, 1, 10, 10, 0, 15, 30, 15, 30,2,0);

		//CSC snprintf for temp/humidity and acclerometer data.
		buffSize += snprintf((configBuff + buffSize), (MEMORY_MAX - buffSize), ",\"temperature\":{\"version\":%u,\"mode\":%u,\"low_threshold\":%d,\"high_threshold\":%d,\"hysteresis\":%d},\"humidity\":{\"version\":%u,\"mode\":%u,\"low_threshold\":%d,\"high_threshold\":%d,\"hysteresis\":%d},\r\n\%s",
 8012656:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801265a:	f103 0304 	add.w	r3, r3, #4
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8012664:	18d4      	adds	r4, r2, r3
 8012666:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801266a:	f103 0304 	add.w	r3, r3, #4
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 8012674:	461d      	mov	r5, r3
 8012676:	f7ef fac7 	bl	8001c08 <getAccelConfigStr>
 801267a:	4603      	mov	r3, r0
 801267c:	9309      	str	r3, [sp, #36]	@ 0x24
 801267e:	2341      	movs	r3, #65	@ 0x41
 8012680:	9308      	str	r3, [sp, #32]
 8012682:	2350      	movs	r3, #80	@ 0x50
 8012684:	9307      	str	r3, [sp, #28]
 8012686:	230a      	movs	r3, #10
 8012688:	9306      	str	r3, [sp, #24]
 801268a:	2301      	movs	r3, #1
 801268c:	9305      	str	r3, [sp, #20]
 801268e:	2300      	movs	r3, #0
 8012690:	9304      	str	r3, [sp, #16]
 8012692:	234b      	movs	r3, #75	@ 0x4b
 8012694:	9303      	str	r3, [sp, #12]
 8012696:	2364      	movs	r3, #100	@ 0x64
 8012698:	9302      	str	r3, [sp, #8]
 801269a:	f06f 0309 	mvn.w	r3, #9
 801269e:	9301      	str	r3, [sp, #4]
 80126a0:	2301      	movs	r3, #1
 80126a2:	9300      	str	r3, [sp, #0]
 80126a4:	2300      	movs	r3, #0
 80126a6:	4a6a      	ldr	r2, [pc, #424]	@ (8012850 <sendDeviceConfig+0x404>)
 80126a8:	4629      	mov	r1, r5
 80126aa:	4620      	mov	r0, r4
 80126ac:	f014 fc7e 	bl	8026fac <sniprintf>
 80126b0:	4602      	mov	r2, r0
 80126b2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80126b6:	f103 0304 	add.w	r3, r3, #4
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4413      	add	r3, r2
 80126be:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80126c2:	f102 0204 	add.w	r2, r2, #4
 80126c6:	6013      	str	r3, [r2, #0]
				0, 1, -10, 100, 75, 0, 1, 10, 80, 65, getAccelConfigStr());

		//CSC snprintf for gps and camera
		buffSize += snprintf((configBuff + buffSize), (MEMORY_MAX - buffSize), ",\r\n%s,\r\n%s,",
 80126c8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80126cc:	f103 0304 	add.w	r3, r3, #4
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80126d6:	18d4      	adds	r4, r2, r3
 80126d8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80126dc:	f103 0304 	add.w	r3, r3, #4
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80126e6:	461e      	mov	r6, r3
 80126e8:	f7f8 f966 	bl	800a9b8 <getGpsConfigStr>
 80126ec:	4605      	mov	r5, r0
 80126ee:	f7f0 f8b1 	bl	8002854 <getCamConfigStr>
 80126f2:	4603      	mov	r3, r0
 80126f4:	9300      	str	r3, [sp, #0]
 80126f6:	462b      	mov	r3, r5
 80126f8:	4a56      	ldr	r2, [pc, #344]	@ (8012854 <sendDeviceConfig+0x408>)
 80126fa:	4631      	mov	r1, r6
 80126fc:	4620      	mov	r0, r4
 80126fe:	f014 fc55 	bl	8026fac <sniprintf>
 8012702:	4602      	mov	r2, r0
 8012704:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012708:	f103 0304 	add.w	r3, r3, #4
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	4413      	add	r3, r2
 8012710:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012714:	f102 0204 	add.w	r2, r2, #4
 8012718:	6013      	str	r3, [r2, #0]
				getGpsConfigStr(), getCamConfigStr());


		//CSC snprintf for cell and device status
		buffSize += snprintf((configBuff + buffSize), (MEMORY_MAX - buffSize), "\r\n\"cell\":{\"version\":%u,\"mode\":%u,\"warm_up\":%u},\"device\":{\"version\":%u,\"mode\":%u}}",
 801271a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801271e:	f103 0304 	add.w	r3, r3, #4
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8012728:	18d0      	adds	r0, r2, r3
 801272a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801272e:	f103 0304 	add.w	r3, r3, #4
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 8012738:	4619      	mov	r1, r3
 801273a:	2302      	movs	r3, #2
 801273c:	9303      	str	r3, [sp, #12]
 801273e:	2300      	movs	r3, #0
 8012740:	9302      	str	r3, [sp, #8]
 8012742:	230a      	movs	r3, #10
 8012744:	9301      	str	r3, [sp, #4]
 8012746:	2301      	movs	r3, #1
 8012748:	9300      	str	r3, [sp, #0]
 801274a:	2300      	movs	r3, #0
 801274c:	4a42      	ldr	r2, [pc, #264]	@ (8012858 <sendDeviceConfig+0x40c>)
 801274e:	f014 fc2d 	bl	8026fac <sniprintf>
 8012752:	4602      	mov	r2, r0
 8012754:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012758:	f103 0304 	add.w	r3, r3, #4
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4413      	add	r3, r2
 8012760:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012764:	f102 0204 	add.w	r2, r2, #4
 8012768:	6013      	str	r3, [r2, #0]
				0, 1, 10, 0, 2);
	}

	if(buffSize > 0 && buffSize < MEMORY_MAX && configBuff[0] != '\0')
 801276a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801276e:	f103 0304 	add.w	r3, r3, #4
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	dd4e      	ble.n	8012816 <sendDeviceConfig+0x3ca>
 8012778:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801277c:	f103 0304 	add.w	r3, r3, #4
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8012786:	da46      	bge.n	8012816 <sendDeviceConfig+0x3ca>
 8012788:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 801278c:	f103 0308 	add.w	r3, r3, #8
 8012790:	f6a3 73ac 	subw	r3, r3, #4012	@ 0xfac
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d03d      	beq.n	8012816 <sendDeviceConfig+0x3ca>
	{
		//		Uncomment to debug message, modem logs messages upon transmition also
		//		PRINTF("%s\r\n", configBuff);
		//		PRINTF("Size: %d\r\n", buffSize);
		Clear_Memory(Data_Ptr);
 801279a:	f107 0308 	add.w	r3, r7, #8
 801279e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80127a2:	f7f3 ff6e 	bl	8006682 <Clear_Memory>
		Build_MSG(Data_Ptr, configBuff);
 80127a6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80127aa:	f107 0208 	add.w	r2, r7, #8
 80127ae:	4619      	mov	r1, r3
 80127b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80127b4:	f7f4 f8e2 	bl	800697c <Build_MSG>
		Size = buf;
 80127b8:	f107 0308 	add.w	r3, r7, #8
 80127bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80127c0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80127c4:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 80127c8:	f107 0208 	add.w	r2, r7, #8
 80127cc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80127d0:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 80127d4:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Command = PUBLISH;
 80127d8:	4b20      	ldr	r3, [pc, #128]	@ (801285c <sendDeviceConfig+0x410>)
 80127da:	2210      	movs	r2, #16
 80127dc:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 80127e0:	f107 0308 	add.w	r3, r7, #8
 80127e4:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80127e8:	f7fc f948 	bl	800ea7c <CELL_COMMAND>
		Command = PUBLISH_MEM;
 80127ec:	4b1b      	ldr	r3, [pc, #108]	@ (801285c <sendDeviceConfig+0x410>)
 80127ee:	2213      	movs	r2, #19
 80127f0:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 80127f4:	f107 0308 	add.w	r3, r7, #8
 80127f8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80127fc:	f7fc f93e 	bl	800ea7c <CELL_COMMAND>
		Command = CHECK;
 8012800:	4b16      	ldr	r3, [pc, #88]	@ (801285c <sendDeviceConfig+0x410>)
 8012802:	2200      	movs	r2, #0
 8012804:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 8012808:	f107 0308 	add.w	r3, r7, #8
 801280c:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012810:	f7fc f934 	bl	800ea7c <CELL_COMMAND>
 8012814:	e004      	b.n	8012820 <sendDeviceConfig+0x3d4>
	}
	else
	{
		PRINTF("Error building device status message\r\n");
 8012816:	4912      	ldr	r1, [pc, #72]	@ (8012860 <sendDeviceConfig+0x414>)
 8012818:	2001      	movs	r0, #1
 801281a:	f7f4 faab 	bl	8006d74 <TraceSend>
	}
}
 801281e:	bf00      	nop
 8012820:	bf00      	nop
 8012822:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8012826:	370c      	adds	r7, #12
 8012828:	46bd      	mov	sp, r7
 801282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801282c:	0802f8c8 	.word	0x0802f8c8
 8012830:	0802f8d4 	.word	0x0802f8d4
 8012834:	0802f8e0 	.word	0x0802f8e0
 8012838:	0bfa0700 	.word	0x0bfa0700
 801283c:	0802f994 	.word	0x0802f994
 8012840:	0802f9a4 	.word	0x0802f9a4
 8012844:	0802f8fc 	.word	0x0802f8fc
 8012848:	0802f9b4 	.word	0x0802f9b4
 801284c:	0802f9bc 	.word	0x0802f9bc
 8012850:	0802faa8 	.word	0x0802faa8
 8012854:	0802fb68 	.word	0x0802fb68
 8012858:	0802fb74 	.word	0x0802fb74
 801285c:	2007a330 	.word	0x2007a330
 8012860:	0802fbc8 	.word	0x0802fbc8

08012864 <sendDiagnostic>:

void sendDiagnostic(MEM_PTR *Data_Ptr, char* message)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	f5ad 6d7d 	sub.w	sp, sp, #4048	@ 0xfd0
 801286a:	af02      	add	r7, sp, #8
 801286c:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012870:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8012874:	6018      	str	r0, [r3, #0]
 8012876:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 801287a:	f6a3 73c8 	subw	r3, r3, #4040	@ 0xfc8
 801287e:	6019      	str	r1, [r3, #0]
	char configBuff[MEMORY_MAX] = {""};
 8012880:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012884:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 8012888:	2200      	movs	r2, #0
 801288a:	601a      	str	r2, [r3, #0]
 801288c:	3304      	adds	r3, #4
 801288e:	f640 729c 	movw	r2, #3996	@ 0xf9c
 8012892:	2100      	movs	r1, #0
 8012894:	4618      	mov	r0, r3
 8012896:	f014 fc6b 	bl	8027170 <memset>
	char timebuff[ISO_TIMESTAMP_LENGTH] = {""};
 801289a:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 801289e:	f5a3 637c 	sub.w	r3, r3, #4032	@ 0xfc0
 80128a2:	2200      	movs	r2, #0
 80128a4:	601a      	str	r2, [r3, #0]
 80128a6:	3304      	adds	r3, #4
 80128a8:	2200      	movs	r2, #0
 80128aa:	601a      	str	r2, [r3, #0]
 80128ac:	605a      	str	r2, [r3, #4]
 80128ae:	609a      	str	r2, [r3, #8]
 80128b0:	60da      	str	r2, [r3, #12]
 80128b2:	611a      	str	r2, [r3, #16]
 80128b4:	751a      	strb	r2, [r3, #20]
	int buffSize = 0;
 80128b6:	2300      	movs	r3, #0
 80128b8:	f8c7 3fc4 	str.w	r3, [r7, #4036]	@ 0xfc4

	Time_StampISO(timebuff); //Get time stamp in ISO format
 80128bc:	f107 0308 	add.w	r3, r7, #8
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7f4 fd6b 	bl	800739c <Time_StampISO>
//{"dev_id":"2228293","type":"diagnostic","timestamp":"2023-08-31T23:02:08.255Z","gps":["time_sync_failed, unknown_location"]}
	buffSize = snprintf(configBuff, MEMORY_MAX, "\1{\"dev_id\":\"%lu\",\"type\":\"diagnostic\",\"timestamp\":\"%s\",%s}",
 80128c6:	4b3a      	ldr	r3, [pc, #232]	@ (80129b0 <sendDiagnostic+0x14c>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80128ce:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 80128d2:	f6a3 73c8 	subw	r3, r3, #4040	@ 0xfc8
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	9301      	str	r3, [sp, #4]
 80128da:	f107 0308 	add.w	r3, r7, #8
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	4613      	mov	r3, r2
 80128e2:	4a34      	ldr	r2, [pc, #208]	@ (80129b4 <sendDiagnostic+0x150>)
 80128e4:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80128e8:	f014 fb60 	bl	8026fac <sniprintf>
 80128ec:	f8c7 0fc4 	str.w	r0, [r7, #4036]	@ 0xfc4
			UNIQUE_Device_ID, timebuff, message);

	if(buffSize > 0 && buffSize < MEMORY_MAX && configBuff[0] != '\0')
 80128f0:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	@ 0xfc4
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	dd50      	ble.n	801299a <sendDiagnostic+0x136>
 80128f8:	f8d7 3fc4 	ldr.w	r3, [r7, #4036]	@ 0xfc4
 80128fc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8012900:	da4b      	bge.n	801299a <sendDiagnostic+0x136>
 8012902:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012906:	f6a3 73a4 	subw	r3, r3, #4004	@ 0xfa4
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d044      	beq.n	801299a <sendDiagnostic+0x136>
	{
		Clear_Memory(Data_Ptr);
 8012910:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012914:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8012918:	6818      	ldr	r0, [r3, #0]
 801291a:	f7f3 feb2 	bl	8006682 <Clear_Memory>
		Build_MSG(Data_Ptr, configBuff);
 801291e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012922:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012926:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 801292a:	4611      	mov	r1, r2
 801292c:	6818      	ldr	r0, [r3, #0]
 801292e:	f7f4 f825 	bl	800697c <Build_MSG>
		Size = buf;
 8012932:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012936:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8012940:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
 8012944:	f607 72c8 	addw	r2, r7, #4040	@ 0xfc8
 8012948:	f6a2 72c4 	subw	r2, r2, #4036	@ 0xfc4
 801294c:	6812      	ldr	r2, [r2, #0]
 801294e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8012952:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350
		Command = PUBLISH;
 8012956:	4b18      	ldr	r3, [pc, #96]	@ (80129b8 <sendDiagnostic+0x154>)
 8012958:	2210      	movs	r2, #16
 801295a:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 801295e:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012962:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8012966:	6818      	ldr	r0, [r3, #0]
 8012968:	f7fc f888 	bl	800ea7c <CELL_COMMAND>
		Command = PUBLISH_MEM;
 801296c:	4b12      	ldr	r3, [pc, #72]	@ (80129b8 <sendDiagnostic+0x154>)
 801296e:	2213      	movs	r2, #19
 8012970:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 8012974:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 8012978:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 801297c:	6818      	ldr	r0, [r3, #0]
 801297e:	f7fc f87d 	bl	800ea7c <CELL_COMMAND>
		Command = CHECK;
 8012982:	4b0d      	ldr	r3, [pc, #52]	@ (80129b8 <sendDiagnostic+0x154>)
 8012984:	2200      	movs	r2, #0
 8012986:	f883 260e 	strb.w	r2, [r3, #1550]	@ 0x60e
		CELL_COMMAND(Data_Ptr);
 801298a:	f607 73c8 	addw	r3, r7, #4040	@ 0xfc8
 801298e:	f6a3 73c4 	subw	r3, r3, #4036	@ 0xfc4
 8012992:	6818      	ldr	r0, [r3, #0]
 8012994:	f7fc f872 	bl	800ea7c <CELL_COMMAND>
 8012998:	e004      	b.n	80129a4 <sendDiagnostic+0x140>
	}
	else
	{
		PRINTF("Error building device status message.\r\n");
 801299a:	4908      	ldr	r1, [pc, #32]	@ (80129bc <sendDiagnostic+0x158>)
 801299c:	2001      	movs	r0, #1
 801299e:	f7f4 f9e9 	bl	8006d74 <TraceSend>
	}
}
 80129a2:	bf00      	nop
 80129a4:	bf00      	nop
 80129a6:	f607 77c8 	addw	r7, r7, #4040	@ 0xfc8
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
 80129ae:	bf00      	nop
 80129b0:	0bfa0700 	.word	0x0bfa0700
 80129b4:	0802fbf0 	.word	0x0802fbf0
 80129b8:	2007a330 	.word	0x2007a330
 80129bc:	0802fc2c 	.word	0x0802fc2c

080129c0 <getServerTime>:

bool getServerTime(uint8_t *mqttMsg)
{
 80129c0:	b590      	push	{r4, r7, lr}
 80129c2:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	f107 0308 	add.w	r3, r7, #8
 80129ce:	f843 0c04 	str.w	r0, [r3, #-4]
	char test[] = "\"timestamp\":\"";
 80129d2:	4bc6      	ldr	r3, [pc, #792]	@ (8012cec <getServerTime+0x32c>)
 80129d4:	f607 74cc 	addw	r4, r7, #4044	@ 0xfcc
 80129d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80129da:	c407      	stmia	r4!, {r0, r1, r2}
 80129dc:	8023      	strh	r3, [r4, #0]
	char Buff[MEMORY_MAX] = "";
 80129de:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80129e2:	f103 0308 	add.w	r3, r3, #8
 80129e6:	f6a3 73dc 	subw	r3, r3, #4060	@ 0xfdc
 80129ea:	2200      	movs	r2, #0
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	3304      	adds	r3, #4
 80129f0:	f640 729c 	movw	r2, #3996	@ 0xf9c
 80129f4:	2100      	movs	r1, #0
 80129f6:	4618      	mov	r0, r3
 80129f8:	f014 fbba 	bl	8027170 <memset>
	bool isError = false;
 80129fc:	2300      	movs	r3, #0
 80129fe:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012a02:	f102 0207 	add.w	r2, r2, #7
 8012a06:	7013      	strb	r3, [r2, #0]
	uint16_t year = 0;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012a0e:	f102 0204 	add.w	r2, r2, #4
 8012a12:	8013      	strh	r3, [r2, #0]
	uint8_t month = 255;
 8012a14:	23ff      	movs	r3, #255	@ 0xff
 8012a16:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012a1a:	f102 0203 	add.w	r2, r2, #3
 8012a1e:	7013      	strb	r3, [r2, #0]
	uint8_t day = 0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012a26:	f102 0202 	add.w	r2, r2, #2
 8012a2a:	7013      	strb	r3, [r2, #0]
	uint8_t hour = 255;
 8012a2c:	23ff      	movs	r3, #255	@ 0xff
 8012a2e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012a32:	f102 0201 	add.w	r2, r2, #1
 8012a36:	7013      	strb	r3, [r2, #0]
	uint8_t minute = 255;
 8012a38:	23ff      	movs	r3, #255	@ 0xff
 8012a3a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012a3e:	7013      	strb	r3, [r2, #0]
	uint8_t second = 255;
 8012a40:	23ff      	movs	r3, #255	@ 0xff
 8012a42:	f887 3fff 	strb.w	r3, [r7, #4095]	@ 0xfff
	uint32_t fraction = 4294967295;
 8012a46:	f04f 33ff 	mov.w	r3, #4294967295
 8012a4a:	f8c7 3ff8 	str.w	r3, [r7, #4088]	@ 0xff8

	Word_Transfer(Buff, (char*)mqttMsg);
 8012a4e:	f107 0308 	add.w	r3, r7, #8
 8012a52:	461a      	mov	r2, r3
 8012a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a58:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f3 fe69 	bl	8006734 <Word_Transfer>

	char *dateStr = strstr(Buff, test);
 8012a62:	f607 72cc 	addw	r2, r7, #4044	@ 0xfcc
 8012a66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a6a:	4611      	mov	r1, r2
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f014 fc04 	bl	802727a <strstr>
 8012a72:	f8c7 0ff4 	str.w	r0, [r7, #4084]	@ 0xff4
	if(dateStr)
 8012a76:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	f000 817c 	beq.w	8012d78 <getServerTime+0x3b8>
	{
		dateStr += strlen(test);
 8012a80:	f607 73cc 	addw	r3, r7, #4044	@ 0xfcc
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7ed fc01 	bl	800028c <strlen>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012a90:	4413      	add	r3, r2
 8012a92:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(isdigit((unsigned char)dateStr[0]))
 8012a96:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	4a94      	ldr	r2, [pc, #592]	@ (8012cf0 <getServerTime+0x330>)
 8012aa0:	4413      	add	r3, r2
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	f003 0304 	and.w	r3, r3, #4
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d016      	beq.n	8012ada <getServerTime+0x11a>
		{
			year = (atoi(dateStr) % 2000);
 8012aac:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012ab0:	f012 fc14 	bl	80252dc <atoi>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	4a8f      	ldr	r2, [pc, #572]	@ (8012cf4 <getServerTime+0x334>)
 8012ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8012abc:	11d1      	asrs	r1, r2, #7
 8012abe:	17da      	asrs	r2, r3, #31
 8012ac0:	1a8a      	subs	r2, r1, r2
 8012ac2:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8012ac6:	fb01 f202 	mul.w	r2, r1, r2
 8012aca:	1a9a      	subs	r2, r3, r2
 8012acc:	4613      	mov	r3, r2
 8012ace:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012ad2:	f102 0204 	add.w	r2, r2, #4
 8012ad6:	8013      	strh	r3, [r2, #0]
 8012ad8:	e005      	b.n	8012ae6 <getServerTime+0x126>
		}
		else
		{
			isError = true;
 8012ada:	2301      	movs	r3, #1
 8012adc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012ae0:	f102 0207 	add.w	r2, r2, #7
 8012ae4:	7013      	strb	r3, [r2, #0]
		}

		int lenToMonth = strcspn(dateStr, "-");
 8012ae6:	4984      	ldr	r1, [pc, #528]	@ (8012cf8 <getServerTime+0x338>)
 8012ae8:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012aec:	f014 fb64 	bl	80271b8 <strcspn>
 8012af0:	4603      	mov	r3, r0
 8012af2:	f8c7 3ff0 	str.w	r3, [r7, #4080]	@ 0xff0
		dateStr += lenToMonth + 1;
 8012af6:	f8d7 3ff0 	ldr.w	r3, [r7, #4080]	@ 0xff0
 8012afa:	3301      	adds	r3, #1
 8012afc:	f8d7 2ff4 	ldr.w	r2, [r7, #4084]	@ 0xff4
 8012b00:	4413      	add	r3, r2
 8012b02:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(!isError && isdigit((unsigned char)dateStr[0]))
 8012b06:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012b0a:	f103 0307 	add.w	r3, r3, #7
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	f083 0301 	eor.w	r3, r3, #1
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d015      	beq.n	8012b46 <getServerTime+0x186>
 8012b1a:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	3301      	adds	r3, #1
 8012b22:	4a73      	ldr	r2, [pc, #460]	@ (8012cf0 <getServerTime+0x330>)
 8012b24:	4413      	add	r3, r2
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	f003 0304 	and.w	r3, r3, #4
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00a      	beq.n	8012b46 <getServerTime+0x186>
		{
			month = atoi(dateStr);
 8012b30:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012b34:	f012 fbd2 	bl	80252dc <atoi>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012b3e:	f102 0203 	add.w	r2, r2, #3
 8012b42:	7013      	strb	r3, [r2, #0]
 8012b44:	e005      	b.n	8012b52 <getServerTime+0x192>
		}
		else
		{
			isError = true;
 8012b46:	2301      	movs	r3, #1
 8012b48:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012b4c:	f102 0207 	add.w	r2, r2, #7
 8012b50:	7013      	strb	r3, [r2, #0]
		}

		int lenToDay = strcspn(dateStr, "-");
 8012b52:	4969      	ldr	r1, [pc, #420]	@ (8012cf8 <getServerTime+0x338>)
 8012b54:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012b58:	f014 fb2e 	bl	80271b8 <strcspn>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	f8c7 3fec 	str.w	r3, [r7, #4076]	@ 0xfec
		dateStr += lenToDay + 1;
 8012b62:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	@ 0xfec
 8012b66:	3301      	adds	r3, #1
 8012b68:	f8d7 2ff4 	ldr.w	r2, [r7, #4084]	@ 0xff4
 8012b6c:	4413      	add	r3, r2
 8012b6e:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(!isError && isdigit((unsigned char)dateStr[0]))
 8012b72:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012b76:	f103 0307 	add.w	r3, r3, #7
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	f083 0301 	eor.w	r3, r3, #1
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d015      	beq.n	8012bb2 <getServerTime+0x1f2>
 8012b86:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	4a58      	ldr	r2, [pc, #352]	@ (8012cf0 <getServerTime+0x330>)
 8012b90:	4413      	add	r3, r2
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	f003 0304 	and.w	r3, r3, #4
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d00a      	beq.n	8012bb2 <getServerTime+0x1f2>
		{
			day = atoi(dateStr);
 8012b9c:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012ba0:	f012 fb9c 	bl	80252dc <atoi>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012baa:	f102 0202 	add.w	r2, r2, #2
 8012bae:	7013      	strb	r3, [r2, #0]
 8012bb0:	e005      	b.n	8012bbe <getServerTime+0x1fe>
		}
		else
		{
			isError = true;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012bb8:	f102 0207 	add.w	r2, r2, #7
 8012bbc:	7013      	strb	r3, [r2, #0]
		}

		int lenToHour = strcspn(dateStr, "T");
 8012bbe:	494f      	ldr	r1, [pc, #316]	@ (8012cfc <getServerTime+0x33c>)
 8012bc0:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012bc4:	f014 faf8 	bl	80271b8 <strcspn>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	f8c7 3fe8 	str.w	r3, [r7, #4072]	@ 0xfe8
		dateStr += lenToHour + 1;
 8012bce:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	@ 0xfe8
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	f8d7 2ff4 	ldr.w	r2, [r7, #4084]	@ 0xff4
 8012bd8:	4413      	add	r3, r2
 8012bda:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(!isError && isdigit((unsigned char)dateStr[0]))
 8012bde:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012be2:	f103 0307 	add.w	r3, r3, #7
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	f083 0301 	eor.w	r3, r3, #1
 8012bec:	b2db      	uxtb	r3, r3
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d015      	beq.n	8012c1e <getServerTime+0x25e>
 8012bf2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8012cf0 <getServerTime+0x330>)
 8012bfc:	4413      	add	r3, r2
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f003 0304 	and.w	r3, r3, #4
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d00a      	beq.n	8012c1e <getServerTime+0x25e>
		{
			hour = atoi(dateStr);
 8012c08:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012c0c:	f012 fb66 	bl	80252dc <atoi>
 8012c10:	4603      	mov	r3, r0
 8012c12:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012c16:	f102 0201 	add.w	r2, r2, #1
 8012c1a:	7013      	strb	r3, [r2, #0]
 8012c1c:	e005      	b.n	8012c2a <getServerTime+0x26a>
		}
		else
		{
			isError = true;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012c24:	f102 0207 	add.w	r2, r2, #7
 8012c28:	7013      	strb	r3, [r2, #0]
		}

		int lenToMin = strcspn(dateStr, ":");
 8012c2a:	4935      	ldr	r1, [pc, #212]	@ (8012d00 <getServerTime+0x340>)
 8012c2c:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012c30:	f014 fac2 	bl	80271b8 <strcspn>
 8012c34:	4603      	mov	r3, r0
 8012c36:	f8c7 3fe4 	str.w	r3, [r7, #4068]	@ 0xfe4
		dateStr += lenToMin + 1;
 8012c3a:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	@ 0xfe4
 8012c3e:	3301      	adds	r3, #1
 8012c40:	f8d7 2ff4 	ldr.w	r2, [r7, #4084]	@ 0xff4
 8012c44:	4413      	add	r3, r2
 8012c46:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(!isError && isdigit((unsigned char)dateStr[0]))
 8012c4a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012c4e:	f103 0307 	add.w	r3, r3, #7
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	f083 0301 	eor.w	r3, r3, #1
 8012c58:	b2db      	uxtb	r3, r3
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d013      	beq.n	8012c86 <getServerTime+0x2c6>
 8012c5e:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	3301      	adds	r3, #1
 8012c66:	4a22      	ldr	r2, [pc, #136]	@ (8012cf0 <getServerTime+0x330>)
 8012c68:	4413      	add	r3, r2
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	f003 0304 	and.w	r3, r3, #4
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d008      	beq.n	8012c86 <getServerTime+0x2c6>
		{
			minute = atoi(dateStr);
 8012c74:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012c78:	f012 fb30 	bl	80252dc <atoi>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012c82:	7013      	strb	r3, [r2, #0]
 8012c84:	e005      	b.n	8012c92 <getServerTime+0x2d2>
		}
		else
		{
			isError = true;
 8012c86:	2301      	movs	r3, #1
 8012c88:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012c8c:	f102 0207 	add.w	r2, r2, #7
 8012c90:	7013      	strb	r3, [r2, #0]
		}

		int lenToSec = strcspn(dateStr, ":");
 8012c92:	491b      	ldr	r1, [pc, #108]	@ (8012d00 <getServerTime+0x340>)
 8012c94:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012c98:	f014 fa8e 	bl	80271b8 <strcspn>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	f8c7 3fe0 	str.w	r3, [r7, #4064]	@ 0xfe0
		dateStr += lenToSec + 1;
 8012ca2:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	@ 0xfe0
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	f8d7 2ff4 	ldr.w	r2, [r7, #4084]	@ 0xff4
 8012cac:	4413      	add	r3, r2
 8012cae:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(!isError && isdigit((unsigned char)dateStr[0]))
 8012cb2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012cb6:	f103 0307 	add.w	r3, r3, #7
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	f083 0301 	eor.w	r3, r3, #1
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d01e      	beq.n	8012d04 <getServerTime+0x344>
 8012cc6:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	4a08      	ldr	r2, [pc, #32]	@ (8012cf0 <getServerTime+0x330>)
 8012cd0:	4413      	add	r3, r2
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	f003 0304 	and.w	r3, r3, #4
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d013      	beq.n	8012d04 <getServerTime+0x344>
		{
			second = atoi(dateStr);
 8012cdc:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012ce0:	f012 fafc 	bl	80252dc <atoi>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	f887 3fff 	strb.w	r3, [r7, #4095]	@ 0xfff
 8012cea:	e011      	b.n	8012d10 <getServerTime+0x350>
 8012cec:	0802fc88 	.word	0x0802fc88
 8012cf0:	0803031d 	.word	0x0803031d
 8012cf4:	10624dd3 	.word	0x10624dd3
 8012cf8:	0802fc54 	.word	0x0802fc54
 8012cfc:	0802fc58 	.word	0x0802fc58
 8012d00:	0802f1ac 	.word	0x0802f1ac
		}
		else
		{
			isError = true;
 8012d04:	2301      	movs	r3, #1
 8012d06:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012d0a:	f102 0207 	add.w	r2, r2, #7
 8012d0e:	7013      	strb	r3, [r2, #0]
		}

		int lenToFrac = strcspn(dateStr, ".");
 8012d10:	4978      	ldr	r1, [pc, #480]	@ (8012ef4 <getServerTime+0x534>)
 8012d12:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012d16:	f014 fa4f 	bl	80271b8 <strcspn>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	f8c7 3fdc 	str.w	r3, [r7, #4060]	@ 0xfdc
		dateStr += lenToFrac + 1;
 8012d20:	f8d7 3fdc 	ldr.w	r3, [r7, #4060]	@ 0xfdc
 8012d24:	3301      	adds	r3, #1
 8012d26:	f8d7 2ff4 	ldr.w	r2, [r7, #4084]	@ 0xff4
 8012d2a:	4413      	add	r3, r2
 8012d2c:	f8c7 3ff4 	str.w	r3, [r7, #4084]	@ 0xff4
		if(!isError && isdigit((unsigned char)dateStr[0]))
 8012d30:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012d34:	f103 0307 	add.w	r3, r3, #7
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	f083 0301 	eor.w	r3, r3, #1
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d012      	beq.n	8012d6a <getServerTime+0x3aa>
 8012d44:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	@ 0xff4
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	4a6a      	ldr	r2, [pc, #424]	@ (8012ef8 <getServerTime+0x538>)
 8012d4e:	4413      	add	r3, r2
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	f003 0304 	and.w	r3, r3, #4
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d007      	beq.n	8012d6a <getServerTime+0x3aa>
		{
			fraction = atoi(dateStr);
 8012d5a:	f8d7 0ff4 	ldr.w	r0, [r7, #4084]	@ 0xff4
 8012d5e:	f012 fabd 	bl	80252dc <atoi>
 8012d62:	4603      	mov	r3, r0
 8012d64:	f8c7 3ff8 	str.w	r3, [r7, #4088]	@ 0xff8
 8012d68:	e00a      	b.n	8012d80 <getServerTime+0x3c0>
		}
		else
		{
			isError = true;
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012d70:	f102 0207 	add.w	r2, r2, #7
 8012d74:	7013      	strb	r3, [r2, #0]
 8012d76:	e003      	b.n	8012d80 <getServerTime+0x3c0>
		}

	}
	else
	{
		PRINTF("Failed to decode time stamp message.\r\n");
 8012d78:	4960      	ldr	r1, [pc, #384]	@ (8012efc <getServerTime+0x53c>)
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	f7f3 fffa 	bl	8006d74 <TraceSend>
	}

	if(!isError)
 8012d80:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012d84:	f103 0307 	add.w	r3, r3, #7
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	f083 0301 	eor.w	r3, r3, #1
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f000 80a4 	beq.w	8012ede <getServerTime+0x51e>
	{
		RTC_TimeTypeDef Server_Time = {0};
 8012d96:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012d9a:	f103 0308 	add.w	r3, r3, #8
 8012d9e:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8012da2:	461a      	mov	r2, r3
 8012da4:	2300      	movs	r3, #0
 8012da6:	6013      	str	r3, [r2, #0]
 8012da8:	6053      	str	r3, [r2, #4]
 8012daa:	6093      	str	r3, [r2, #8]
 8012dac:	60d3      	str	r3, [r2, #12]
 8012dae:	6113      	str	r3, [r2, #16]
 8012db0:	6153      	str	r3, [r2, #20]
 8012db2:	6193      	str	r3, [r2, #24]
		RTC_DateTypeDef Server_Date = {0};
 8012db4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012db8:	f103 0308 	add.w	r3, r3, #8
 8012dbc:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	601a      	str	r2, [r3, #0]
		HAL_RTC_GetTime(&hrtc, &Server_Time, FORMAT_BIN);
 8012dc4:	f107 0310 	add.w	r3, r7, #16
 8012dc8:	2200      	movs	r2, #0
 8012dca:	4619      	mov	r1, r3
 8012dcc:	484c      	ldr	r0, [pc, #304]	@ (8012f00 <getServerTime+0x540>)
 8012dce:	f00e fa27 	bl	8021220 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Server_Date, FORMAT_BIN);
 8012dd2:	f107 030c 	add.w	r3, r7, #12
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	4619      	mov	r1, r3
 8012dda:	4849      	ldr	r0, [pc, #292]	@ (8012f00 <getServerTime+0x540>)
 8012ddc:	f00e fb18 	bl	8021410 <HAL_RTC_GetDate>

		Server_Date.Date = day;
 8012de0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012de4:	f103 0308 	add.w	r3, r3, #8
 8012de8:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 8012dec:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012df0:	f102 0202 	add.w	r2, r2, #2
 8012df4:	7812      	ldrb	r2, [r2, #0]
 8012df6:	709a      	strb	r2, [r3, #2]
		Server_Date.Month = month;
 8012df8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012dfc:	f103 0308 	add.w	r3, r3, #8
 8012e00:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 8012e04:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012e08:	f102 0203 	add.w	r2, r2, #3
 8012e0c:	7812      	ldrb	r2, [r2, #0]
 8012e0e:	705a      	strb	r2, [r3, #1]
		Server_Date.Year = year;
 8012e10:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012e14:	f103 0304 	add.w	r3, r3, #4
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	b2da      	uxtb	r2, r3
 8012e1c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012e20:	f103 0308 	add.w	r3, r3, #8
 8012e24:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
 8012e28:	70da      	strb	r2, [r3, #3]
		Server_Time.Hours = hour;
 8012e2a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012e2e:	f103 0308 	add.w	r3, r3, #8
 8012e32:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8012e36:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012e3a:	f102 0201 	add.w	r2, r2, #1
 8012e3e:	7812      	ldrb	r2, [r2, #0]
 8012e40:	701a      	strb	r2, [r3, #0]
		Server_Time.Minutes = minute;
 8012e42:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012e46:	f103 0308 	add.w	r3, r3, #8
 8012e4a:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8012e4e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012e52:	7812      	ldrb	r2, [r2, #0]
 8012e54:	705a      	strb	r2, [r3, #1]
		Server_Time.Seconds = second;
 8012e56:	f897 2fff 	ldrb.w	r2, [r7, #4095]	@ 0xfff
 8012e5a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012e5e:	f103 0308 	add.w	r3, r3, #8
 8012e62:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8012e66:	605a      	str	r2, [r3, #4]
		Server_Time.SecondFraction = fraction;
 8012e68:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012e6c:	f103 0308 	add.w	r3, r3, #8
 8012e70:	f6a3 73f8 	subw	r3, r3, #4088	@ 0xff8
 8012e74:	f8d7 2ff8 	ldr.w	r2, [r7, #4088]	@ 0xff8
 8012e78:	611a      	str	r2, [r3, #16]
		if(HAL_RTC_SetDate(&hrtc, &Server_Date, FORMAT_BIN) != HAL_OK)
 8012e7a:	f107 030c 	add.w	r3, r7, #12
 8012e7e:	2200      	movs	r2, #0
 8012e80:	4619      	mov	r1, r3
 8012e82:	481f      	ldr	r0, [pc, #124]	@ (8012f00 <getServerTime+0x540>)
 8012e84:	f00e fa3e 	bl	8021304 <HAL_RTC_SetDate>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d007      	beq.n	8012e9e <getServerTime+0x4de>
		{
			Error_Handler();
 8012e8e:	f002 fc81 	bl	8015794 <Error_Handler>
			isError = true;
 8012e92:	2301      	movs	r3, #1
 8012e94:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012e98:	f102 0207 	add.w	r2, r2, #7
 8012e9c:	7013      	strb	r3, [r2, #0]
		}

		if(HAL_RTC_SetTime(&hrtc, &Server_Time, FORMAT_BIN) != HAL_OK)
 8012e9e:	f107 0310 	add.w	r3, r7, #16
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	4816      	ldr	r0, [pc, #88]	@ (8012f00 <getServerTime+0x540>)
 8012ea8:	f00e f91c 	bl	80210e4 <HAL_RTC_SetTime>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d007      	beq.n	8012ec2 <getServerTime+0x502>
		{
			Error_Handler();
 8012eb2:	f002 fc6f 	bl	8015794 <Error_Handler>
			isError = true;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8012ebc:	f102 0207 	add.w	r2, r2, #7
 8012ec0:	7013      	strb	r3, [r2, #0]
		}

		HAL_RTC_GetTime(&hrtc, &Server_Time, FORMAT_BIN);
 8012ec2:	f107 0310 	add.w	r3, r7, #16
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	4619      	mov	r1, r3
 8012eca:	480d      	ldr	r0, [pc, #52]	@ (8012f00 <getServerTime+0x540>)
 8012ecc:	f00e f9a8 	bl	8021220 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Server_Date, FORMAT_BIN);
 8012ed0:	f107 030c 	add.w	r3, r7, #12
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	4809      	ldr	r0, [pc, #36]	@ (8012f00 <getServerTime+0x540>)
 8012eda:	f00e fa99 	bl	8021410 <HAL_RTC_GetDate>
	}

	return isError;
 8012ede:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8012ee2:	f103 0307 	add.w	r3, r3, #7
 8012ee6:	781b      	ldrb	r3, [r3, #0]
}
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd90      	pop	{r4, r7, pc}
 8012ef4:	0802fc5c 	.word	0x0802fc5c
 8012ef8:	0803031d 	.word	0x0803031d
 8012efc:	0802fc60 	.word	0x0802fc60
 8012f00:	2007d344 	.word	0x2007d344

08012f04 <tempInit>:
//{
//	return State;
//}

void tempInit(void)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	af00      	add	r7, sp, #0
	PRINTF("____TEMPERATURE SENSOR BEGIN INITIALIZATION_____\r\n\r\n");
 8012f08:	4916      	ldr	r1, [pc, #88]	@ (8012f64 <tempInit+0x60>)
 8012f0a:	2001      	movs	r0, #1
 8012f0c:	f7f3 ff32 	bl	8006d74 <TraceSend>
	tempDevice.partNumber = HDC2080;
 8012f10:	4b15      	ldr	r3, [pc, #84]	@ (8012f68 <tempInit+0x64>)
 8012f12:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8012f16:	801a      	strh	r2, [r3, #0]
	tempDevice.address = HDC2080_SLAVE_ADDRESS;
 8012f18:	4b13      	ldr	r3, [pc, #76]	@ (8012f68 <tempInit+0x64>)
 8012f1a:	2280      	movs	r2, #128	@ 0x80
 8012f1c:	805a      	strh	r2, [r3, #2]
	tempDevice.state = TEMP_OK;
 8012f1e:	4b12      	ldr	r3, [pc, #72]	@ (8012f68 <tempInit+0x64>)
 8012f20:	2200      	movs	r2, #0
 8012f22:	711a      	strb	r2, [r3, #4]

	tempWhoAmI();
 8012f24:	f000 f826 	bl	8012f74 <tempWhoAmI>

	if (tempDevice.partNumber == HDC2080)
 8012f28:	4b0f      	ldr	r3, [pc, #60]	@ (8012f68 <tempInit+0x64>)
 8012f2a:	881b      	ldrh	r3, [r3, #0]
 8012f2c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8012f30:	d103      	bne.n	8012f3a <tempInit+0x36>
	{
	tempWriteRegisterRaw(HDC2080_MEASUREMENT_CONF, HDC2080_START_TEMP_HUMIDITY_MEASUREMENT);  //measurement mode
 8012f32:	2101      	movs	r1, #1
 8012f34:	200f      	movs	r0, #15
 8012f36:	f000 f8cb 	bl	80130d0 <tempWriteRegisterRaw>
	}

	privateTempParameters.Temperature = tempReadRegister(HDC2080_TEMP_LOW);
 8012f3a:	2000      	movs	r0, #0
 8012f3c:	f000 f840 	bl	8012fc0 <tempReadRegister>
 8012f40:	4603      	mov	r3, r0
 8012f42:	461a      	mov	r2, r3
 8012f44:	4b09      	ldr	r3, [pc, #36]	@ (8012f6c <tempInit+0x68>)
 8012f46:	809a      	strh	r2, [r3, #4]
	privateTempParameters.Humidity = tempReadRegister(HDC2080_HUM_LOW);
 8012f48:	2002      	movs	r0, #2
 8012f4a:	f000 f839 	bl	8012fc0 <tempReadRegister>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	461a      	mov	r2, r3
 8012f52:	4b06      	ldr	r3, [pc, #24]	@ (8012f6c <tempInit+0x68>)
 8012f54:	80da      	strh	r2, [r3, #6]

	PRINTF("____TEMPERATURE SENSOR END INITIALIZATION_____\r\n\r\n");
 8012f56:	4906      	ldr	r1, [pc, #24]	@ (8012f70 <tempInit+0x6c>)
 8012f58:	2001      	movs	r0, #1
 8012f5a:	f7f3 ff0b 	bl	8006d74 <TraceSend>
}
 8012f5e:	bf00      	nop
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	0802fc98 	.word	0x0802fc98
 8012f68:	2007ce1c 	.word	0x2007ce1c
 8012f6c:	2007ce24 	.word	0x2007ce24
 8012f70:	0802fcd0 	.word	0x0802fcd0

08012f74 <tempWhoAmI>:

void tempWhoAmI(void)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b082      	sub	sp, #8
 8012f78:	af00      	add	r7, sp, #0
	uint16_t partNum = tempReadDeviceID();
 8012f7a:	f000 f865 	bl	8013048 <tempReadDeviceID>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	80fb      	strh	r3, [r7, #6]

	if(partNum == HDC2080)
 8012f82:	88fb      	ldrh	r3, [r7, #6]
 8012f84:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8012f88:	d10b      	bne.n	8012fa2 <tempWhoAmI+0x2e>
	{
		PRINTF("HDC2080 Identified\r\n");
 8012f8a:	490a      	ldr	r1, [pc, #40]	@ (8012fb4 <tempWhoAmI+0x40>)
 8012f8c:	2001      	movs	r0, #1
 8012f8e:	f7f3 fef1 	bl	8006d74 <TraceSend>
		tempDevice.partNumber = HDC2080;
 8012f92:	4b09      	ldr	r3, [pc, #36]	@ (8012fb8 <tempWhoAmI+0x44>)
 8012f94:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8012f98:	801a      	strh	r2, [r3, #0]
		tempDevice.address = HDC2080_SLAVE_ADDRESS;
 8012f9a:	4b07      	ldr	r3, [pc, #28]	@ (8012fb8 <tempWhoAmI+0x44>)
 8012f9c:	2280      	movs	r2, #128	@ 0x80
 8012f9e:	805a      	strh	r2, [r3, #2]
//	{
//		PRINTF("No accelerometer identified, setting address unknown\r\n");
//		accelDevice.partNumber = ACC_UNKNOWN_DEVICE;
//		accelDevice.address = UNKNOWN_SLAVE_ADDRESS;
//	}
}
 8012fa0:	e003      	b.n	8012faa <tempWhoAmI+0x36>
		PRINTF("____NO TEMP SENSOR IDENTIFIED_____\r\n\r\n");
 8012fa2:	4906      	ldr	r1, [pc, #24]	@ (8012fbc <tempWhoAmI+0x48>)
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	f7f3 fee5 	bl	8006d74 <TraceSend>
}
 8012faa:	bf00      	nop
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
 8012fb2:	bf00      	nop
 8012fb4:	0802fd04 	.word	0x0802fd04
 8012fb8:	2007ce1c 	.word	0x2007ce1c
 8012fbc:	0802fd1c 	.word	0x0802fd1c

08012fc0 <tempReadRegister>:

uint16_t tempReadRegister(TEM_I2C_Command readReg)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af02      	add	r7, sp, #8
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	uint8_t reg;
	uint8_t temp_data[TEMP_DATA_SIZE];
	uint16_t regval;

	switch(tempDevice.partNumber)
 8012fca:	4b1c      	ldr	r3, [pc, #112]	@ (801303c <tempReadRegister+0x7c>)
 8012fcc:	881b      	ldrh	r3, [r3, #0]
 8012fce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8012fd2:	d129      	bne.n	8013028 <tempReadRegister+0x68>
	{
		case HDC2080: //Fall through because they have the same address
			reg = readReg;
 8012fd4:	79fb      	ldrb	r3, [r7, #7]
 8012fd6:	733b      	strb	r3, [r7, #12]
			//csc for synchronous operation
			ret = HAL_I2C_Master_Transmit(&hi2c1, tempDevice.address, &reg, 1, 0xFF);
 8012fd8:	4b18      	ldr	r3, [pc, #96]	@ (801303c <tempReadRegister+0x7c>)
 8012fda:	8859      	ldrh	r1, [r3, #2]
 8012fdc:	f107 020c 	add.w	r2, r7, #12
 8012fe0:	23ff      	movs	r3, #255	@ 0xff
 8012fe2:	9300      	str	r3, [sp, #0]
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	4816      	ldr	r0, [pc, #88]	@ (8013040 <tempReadRegister+0x80>)
 8012fe8:	f007 fa2a 	bl	801a440 <HAL_I2C_Master_Transmit>
 8012fec:	4603      	mov	r3, r0
 8012fee:	737b      	strb	r3, [r7, #13]
			ret = HAL_I2C_Master_Receive(&hi2c1, tempDevice.address + 1, temp_data, TEMP_DATA_SIZE, 0xFF);
 8012ff0:	4b12      	ldr	r3, [pc, #72]	@ (801303c <tempReadRegister+0x7c>)
 8012ff2:	885b      	ldrh	r3, [r3, #2]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	b299      	uxth	r1, r3
 8012ff8:	f107 0208 	add.w	r2, r7, #8
 8012ffc:	23ff      	movs	r3, #255	@ 0xff
 8012ffe:	9300      	str	r3, [sp, #0]
 8013000:	2302      	movs	r3, #2
 8013002:	480f      	ldr	r0, [pc, #60]	@ (8013040 <tempReadRegister+0x80>)
 8013004:	f007 fb10 	bl	801a628 <HAL_I2C_Master_Receive>
 8013008:	4603      	mov	r3, r0
 801300a:	737b      	strb	r3, [r7, #13]

			if(ret == HAL_OK)
 801300c:	7b7b      	ldrb	r3, [r7, #13]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d108      	bne.n	8013024 <tempReadRegister+0x64>
			{
				regval = (temp_data[1] << 8 | temp_data[0]);
 8013012:	7a7b      	ldrb	r3, [r7, #9]
 8013014:	021b      	lsls	r3, r3, #8
 8013016:	b21a      	sxth	r2, r3
 8013018:	7a3b      	ldrb	r3, [r7, #8]
 801301a:	b21b      	sxth	r3, r3
 801301c:	4313      	orrs	r3, r2
 801301e:	b21b      	sxth	r3, r3
 8013020:	81fb      	strh	r3, [r7, #14]
			}
			else
			{
				return 0;
			}
			break;
 8013022:	e005      	b.n	8013030 <tempReadRegister+0x70>
				return 0;
 8013024:	2300      	movs	r3, #0
 8013026:	e004      	b.n	8013032 <tempReadRegister+0x72>
		default:
			PRINTF("Can not read unknown address\r\n");
 8013028:	4906      	ldr	r1, [pc, #24]	@ (8013044 <tempReadRegister+0x84>)
 801302a:	2001      	movs	r0, #1
 801302c:	f7f3 fea2 	bl	8006d74 <TraceSend>
	}
	return regval;
 8013030:	89fb      	ldrh	r3, [r7, #14]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	2007ce1c 	.word	0x2007ce1c
 8013040:	2007d068 	.word	0x2007d068
 8013044:	0802fd44 	.word	0x0802fd44

08013048 <tempReadDeviceID>:

uint16_t tempReadDeviceID(void)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret;
	uint8_t reg;
	uint8_t temp_data[TEMP_DATA_SIZE];

	switch(tempDevice.partNumber)
 801304e:	4b1c      	ldr	r3, [pc, #112]	@ (80130c0 <tempReadDeviceID+0x78>)
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8013056:	d129      	bne.n	80130ac <tempReadDeviceID+0x64>
	{
		case HDC2080: //Fall through because they have the same address
			reg = HDC2080_DEVICE_ID_LOW;
 8013058:	23fe      	movs	r3, #254	@ 0xfe
 801305a:	71bb      	strb	r3, [r7, #6]
			//csc for synchronous operation
			ret = HAL_I2C_Master_Transmit(&hi2c1, tempDevice.address, &reg, 1, 0xFF);
 801305c:	4b18      	ldr	r3, [pc, #96]	@ (80130c0 <tempReadDeviceID+0x78>)
 801305e:	8859      	ldrh	r1, [r3, #2]
 8013060:	1dba      	adds	r2, r7, #6
 8013062:	23ff      	movs	r3, #255	@ 0xff
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	2301      	movs	r3, #1
 8013068:	4816      	ldr	r0, [pc, #88]	@ (80130c4 <tempReadDeviceID+0x7c>)
 801306a:	f007 f9e9 	bl	801a440 <HAL_I2C_Master_Transmit>
 801306e:	4603      	mov	r3, r0
 8013070:	71fb      	strb	r3, [r7, #7]
			ret = HAL_I2C_Master_Receive(&hi2c1, tempDevice.address + 1, temp_data, TEMP_DATA_SIZE, 0xFF);
 8013072:	4b13      	ldr	r3, [pc, #76]	@ (80130c0 <tempReadDeviceID+0x78>)
 8013074:	885b      	ldrh	r3, [r3, #2]
 8013076:	3301      	adds	r3, #1
 8013078:	b299      	uxth	r1, r3
 801307a:	1d3a      	adds	r2, r7, #4
 801307c:	23ff      	movs	r3, #255	@ 0xff
 801307e:	9300      	str	r3, [sp, #0]
 8013080:	2302      	movs	r3, #2
 8013082:	4810      	ldr	r0, [pc, #64]	@ (80130c4 <tempReadDeviceID+0x7c>)
 8013084:	f007 fad0 	bl	801a628 <HAL_I2C_Master_Receive>
 8013088:	4603      	mov	r3, r0
 801308a:	71fb      	strb	r3, [r7, #7]

			if(ret == HAL_OK)
 801308c:	79fb      	ldrb	r3, [r7, #7]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d10a      	bne.n	80130a8 <tempReadDeviceID+0x60>
			{
				privateTempParameters.Device_ID = (temp_data[1] << 8 | temp_data[0]);
 8013092:	797b      	ldrb	r3, [r7, #5]
 8013094:	021b      	lsls	r3, r3, #8
 8013096:	b21a      	sxth	r2, r3
 8013098:	793b      	ldrb	r3, [r7, #4]
 801309a:	b21b      	sxth	r3, r3
 801309c:	4313      	orrs	r3, r2
 801309e:	b21b      	sxth	r3, r3
 80130a0:	b29a      	uxth	r2, r3
 80130a2:	4b09      	ldr	r3, [pc, #36]	@ (80130c8 <tempReadDeviceID+0x80>)
 80130a4:	805a      	strh	r2, [r3, #2]
			}
			else
			{
				return 0;
			}
			break;
 80130a6:	e005      	b.n	80130b4 <tempReadDeviceID+0x6c>
				return 0;
 80130a8:	2300      	movs	r3, #0
 80130aa:	e005      	b.n	80130b8 <tempReadDeviceID+0x70>
		default:
			PRINTF("Can not read unknown address\r\n");
 80130ac:	4907      	ldr	r1, [pc, #28]	@ (80130cc <tempReadDeviceID+0x84>)
 80130ae:	2001      	movs	r0, #1
 80130b0:	f7f3 fe60 	bl	8006d74 <TraceSend>
	}
	return privateTempParameters.Device_ID;
 80130b4:	4b04      	ldr	r3, [pc, #16]	@ (80130c8 <tempReadDeviceID+0x80>)
 80130b6:	885b      	ldrh	r3, [r3, #2]

}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	2007ce1c 	.word	0x2007ce1c
 80130c4:	2007d068 	.word	0x2007d068
 80130c8:	2007ce24 	.word	0x2007ce24
 80130cc:	0802fd44 	.word	0x0802fd44

080130d0 <tempWriteRegisterRaw>:

void tempWriteRegisterRaw(TEM_I2C_Command tempReg, uint8_t command)
{
 80130d0:	b590      	push	{r4, r7, lr}
 80130d2:	b099      	sub	sp, #100	@ 0x64
 80130d4:	af02      	add	r7, sp, #8
 80130d6:	4603      	mov	r3, r0
 80130d8:	460a      	mov	r2, r1
 80130da:	71fb      	strb	r3, [r7, #7]
 80130dc:	4613      	mov	r3, r2
 80130de:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef ret;
	char failureAck[20] = "";
 80130e0:	2300      	movs	r3, #0
 80130e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80130e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80130e8:	2200      	movs	r2, #0
 80130ea:	601a      	str	r2, [r3, #0]
 80130ec:	605a      	str	r2, [r3, #4]
 80130ee:	609a      	str	r2, [r3, #8]
 80130f0:	60da      	str	r2, [r3, #12]
	uint8_t txReg[2];
	txReg[0] = tempReg;
 80130f2:	79fb      	ldrb	r3, [r7, #7]
 80130f4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	txReg[1] = command;
 80130f8:	79bb      	ldrb	r3, [r7, #6]
 80130fa:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	switch(tempDevice.partNumber)
 80130fe:	4b3c      	ldr	r3, [pc, #240]	@ (80131f0 <tempWriteRegisterRaw+0x120>)
 8013100:	881b      	ldrh	r3, [r3, #0]
 8013102:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8013106:	d169      	bne.n	80131dc <tempWriteRegisterRaw+0x10c>
	{
		case HDC2080:
			ret = HAL_I2C_Master_Transmit(&hi2c1, tempDevice.address, txReg, 2, 0xFFFF);
 8013108:	4b39      	ldr	r3, [pc, #228]	@ (80131f0 <tempWriteRegisterRaw+0x120>)
 801310a:	8859      	ldrh	r1, [r3, #2]
 801310c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8013110:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013114:	9300      	str	r3, [sp, #0]
 8013116:	2302      	movs	r3, #2
 8013118:	4836      	ldr	r0, [pc, #216]	@ (80131f4 <tempWriteRegisterRaw+0x124>)
 801311a:	f007 f991 	bl	801a440 <HAL_I2C_Master_Transmit>
 801311e:	4603      	mov	r3, r0
 8013120:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

			//	HAL_ERROR    = 0x01,
			//	HAL_BUSY     = 0x02,
			//	HAL_TIMEOUT  = 0x03
			if(ret != HAL_OK)
 8013124:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013128:	2b00      	cmp	r3, #0
 801312a:	d05c      	beq.n	80131e6 <tempWriteRegisterRaw+0x116>
			{
				//Consider doing a retry
				//PRINTF needs reason for error
				if(ret == HAL_ERROR)
 801312c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013130:	2b01      	cmp	r3, #1
 8013132:	d118      	bne.n	8013166 <tempWriteRegisterRaw+0x96>
				{
					char err[] = "HAL_ERROR\0";
 8013134:	4a30      	ldr	r2, [pc, #192]	@ (80131f8 <tempWriteRegisterRaw+0x128>)
 8013136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801313a:	ca07      	ldmia	r2, {r0, r1, r2}
 801313c:	c303      	stmia	r3!, {r0, r1}
 801313e:	801a      	strh	r2, [r3, #0]
 8013140:	3302      	adds	r3, #2
 8013142:	0c12      	lsrs	r2, r2, #16
 8013144:	701a      	strb	r2, [r3, #0]
					int len = strlen(err);
 8013146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801314a:	4618      	mov	r0, r3
 801314c:	f7ed f89e 	bl	800028c <strlen>
 8013150:	4603      	mov	r3, r0
 8013152:	64bb      	str	r3, [r7, #72]	@ 0x48
					strncpy(failureAck, err, len);
 8013154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013156:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 801315a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801315e:	4618      	mov	r0, r3
 8013160:	f014 f84d 	bl	80271fe <strncpy>
 8013164:	e032      	b.n	80131cc <tempWriteRegisterRaw+0xfc>
				}
				else if(ret == HAL_BUSY)
 8013166:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801316a:	2b02      	cmp	r3, #2
 801316c:	d115      	bne.n	801319a <tempWriteRegisterRaw+0xca>
				{
					char err[] = "HAL_BUSY\0";
 801316e:	4a23      	ldr	r2, [pc, #140]	@ (80131fc <tempWriteRegisterRaw+0x12c>)
 8013170:	f107 0318 	add.w	r3, r7, #24
 8013174:	ca07      	ldmia	r2, {r0, r1, r2}
 8013176:	c303      	stmia	r3!, {r0, r1}
 8013178:	801a      	strh	r2, [r3, #0]
					int len = strlen(err);
 801317a:	f107 0318 	add.w	r3, r7, #24
 801317e:	4618      	mov	r0, r3
 8013180:	f7ed f884 	bl	800028c <strlen>
 8013184:	4603      	mov	r3, r0
 8013186:	64fb      	str	r3, [r7, #76]	@ 0x4c
					strncpy(failureAck, err, len);
 8013188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801318a:	f107 0118 	add.w	r1, r7, #24
 801318e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013192:	4618      	mov	r0, r3
 8013194:	f014 f833 	bl	80271fe <strncpy>
 8013198:	e018      	b.n	80131cc <tempWriteRegisterRaw+0xfc>
				}
				else if(ret == HAL_TIMEOUT)
 801319a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801319e:	2b03      	cmp	r3, #3
 80131a0:	d114      	bne.n	80131cc <tempWriteRegisterRaw+0xfc>
				{
					char err[] = "HAL_TIMEOUT\0";
 80131a2:	4b17      	ldr	r3, [pc, #92]	@ (8013200 <tempWriteRegisterRaw+0x130>)
 80131a4:	f107 0408 	add.w	r4, r7, #8
 80131a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80131aa:	c407      	stmia	r4!, {r0, r1, r2}
 80131ac:	7023      	strb	r3, [r4, #0]
					int len = strlen(err);
 80131ae:	f107 0308 	add.w	r3, r7, #8
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ed f86a 	bl	800028c <strlen>
 80131b8:	4603      	mov	r3, r0
 80131ba:	653b      	str	r3, [r7, #80]	@ 0x50
					strncpy(failureAck, err, len);
 80131bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80131be:	f107 0108 	add.w	r1, r7, #8
 80131c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80131c6:	4618      	mov	r0, r3
 80131c8:	f014 f819 	bl	80271fe <strncpy>
				}
				PRINTF("Unsuccessful transmission: %s\r\n", failureAck);
 80131cc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80131d0:	461a      	mov	r2, r3
 80131d2:	490c      	ldr	r1, [pc, #48]	@ (8013204 <tempWriteRegisterRaw+0x134>)
 80131d4:	2001      	movs	r0, #1
 80131d6:	f7f3 fdcd 	bl	8006d74 <TraceSend>
			}
			break;
 80131da:	e004      	b.n	80131e6 <tempWriteRegisterRaw+0x116>
		default:
			PRINTF("Temperature sensor not supported, can not write to register\r\n");
 80131dc:	490a      	ldr	r1, [pc, #40]	@ (8013208 <tempWriteRegisterRaw+0x138>)
 80131de:	2001      	movs	r0, #1
 80131e0:	f7f3 fdc8 	bl	8006d74 <TraceSend>
	}
}
 80131e4:	e000      	b.n	80131e8 <tempWriteRegisterRaw+0x118>
			break;
 80131e6:	bf00      	nop
}
 80131e8:	bf00      	nop
 80131ea:	375c      	adds	r7, #92	@ 0x5c
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd90      	pop	{r4, r7, pc}
 80131f0:	2007ce1c 	.word	0x2007ce1c
 80131f4:	2007d068 	.word	0x2007d068
 80131f8:	0802fdc4 	.word	0x0802fdc4
 80131fc:	0802fdd0 	.word	0x0802fdd0
 8013200:	0802fddc 	.word	0x0802fddc
 8013204:	0802fd64 	.word	0x0802fd64
 8013208:	0802fd84 	.word	0x0802fd84

0801320c <getTempSensorData>:

void getTempSensorData(TEMPERATURE_DATA_TYPE *extTempParams)
{
 801320c:	b480      	push	{r7}
 801320e:	b083      	sub	sp, #12
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
	extTempParams->Temperature = privateTempParameters.Temperature;
 8013214:	4b08      	ldr	r3, [pc, #32]	@ (8013238 <getTempSensorData+0x2c>)
 8013216:	889a      	ldrh	r2, [r3, #4]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	809a      	strh	r2, [r3, #4]
	extTempParams->Humidity = privateTempParameters.Humidity;
 801321c:	4b06      	ldr	r3, [pc, #24]	@ (8013238 <getTempSensorData+0x2c>)
 801321e:	88da      	ldrh	r2, [r3, #6]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	80da      	strh	r2, [r3, #6]
	extTempParams->Device_ID = privateTempParameters.Device_ID;
 8013224:	4b04      	ldr	r3, [pc, #16]	@ (8013238 <getTempSensorData+0x2c>)
 8013226:	885a      	ldrh	r2, [r3, #2]
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	805a      	strh	r2, [r3, #2]
}
 801322c:	bf00      	nop
 801322e:	370c      	adds	r7, #12
 8013230:	46bd      	mov	sp, r7
 8013232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013236:	4770      	bx	lr
 8013238:	2007ce24 	.word	0x2007ce24

0801323c <clearShadowMemory>:

	Command = QCHIPID;  //powers up?
	XPS_COMMAND ( Data_Ptr );
}
void clearShadowMemory(void)
{
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
	for(int chPnt = 0; chPnt < 256; chPnt++)
 8013242:	2300      	movs	r3, #0
 8013244:	607b      	str	r3, [r7, #4]
 8013246:	e007      	b.n	8013258 <clearShadowMemory+0x1c>
	{
		paramPage1[chPnt] = 0;
 8013248:	4a08      	ldr	r2, [pc, #32]	@ (801326c <clearShadowMemory+0x30>)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	4413      	add	r3, r2
 801324e:	2200      	movs	r2, #0
 8013250:	701a      	strb	r2, [r3, #0]
	for(int chPnt = 0; chPnt < 256; chPnt++)
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	3301      	adds	r3, #1
 8013256:	607b      	str	r3, [r7, #4]
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2bff      	cmp	r3, #255	@ 0xff
 801325c:	ddf4      	ble.n	8013248 <clearShadowMemory+0xc>
	}
}
 801325e:	bf00      	nop
 8013260:	bf00      	nop
 8013262:	370c      	adds	r7, #12
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr
 801326c:	2007ce2c 	.word	0x2007ce2c

08013270 <getOTAfwAvailable>:

bool getOTAfwAvailable(void)
{
 8013270:	b480      	push	{r7}
 8013272:	b083      	sub	sp, #12
 8013274:	af00      	add	r7, sp, #0
	// KCS do we need to check isdataValid for every get function?
	bool isAvailable = false;
 8013276:	2300      	movs	r3, #0
 8013278:	71fb      	strb	r3, [r7, #7]

	if ( paramPage1 [DOWNLOAD_READY] == 1 )
 801327a:	4b07      	ldr	r3, [pc, #28]	@ (8013298 <getOTAfwAvailable+0x28>)
 801327c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013280:	2b01      	cmp	r3, #1
 8013282:	d101      	bne.n	8013288 <getOTAfwAvailable+0x18>
	{
		isAvailable = true;
 8013284:	2301      	movs	r3, #1
 8013286:	71fb      	strb	r3, [r7, #7]
	}
	return isAvailable;
 8013288:	79fb      	ldrb	r3, [r7, #7]
}
 801328a:	4618      	mov	r0, r3
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	2007ce2c 	.word	0x2007ce2c

0801329c <setOTAfwAvailable>:

void setOTAfwAvailable(bool fwIsAvailable)
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	4603      	mov	r3, r0
 80132a4:	71fb      	strb	r3, [r7, #7]
	if ( fwIsAvailable )
 80132a6:	79fb      	ldrb	r3, [r7, #7]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d004      	beq.n	80132b6 <setOTAfwAvailable+0x1a>
	{
		paramPage1 [DOWNLOAD_READY] = 1;
 80132ac:	4b07      	ldr	r3, [pc, #28]	@ (80132cc <setOTAfwAvailable+0x30>)
 80132ae:	2201      	movs	r2, #1
 80132b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}
	else
	{
		paramPage1 [DOWNLOAD_READY] = 0;
	}
}
 80132b4:	e003      	b.n	80132be <setOTAfwAvailable+0x22>
		paramPage1 [DOWNLOAD_READY] = 0;
 80132b6:	4b05      	ldr	r3, [pc, #20]	@ (80132cc <setOTAfwAvailable+0x30>)
 80132b8:	2200      	movs	r2, #0
 80132ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
}
 80132be:	bf00      	nop
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop
 80132cc:	2007ce2c 	.word	0x2007ce2c

080132d0 <setOtaData>:

void setOtaData(OTA_FILE_TYPE *OtaData)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b085      	sub	sp, #20
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
	for(int chPnt = 0; chPnt < OtaData->fileNameLength; chPnt++)
 80132d8:	2300      	movs	r3, #0
 80132da:	60fb      	str	r3, [r7, #12]
 80132dc:	e00b      	b.n	80132f6 <setOtaData+0x26>
	{
		paramPage1[OTA_FILENAME_START + chPnt] = OtaData->otaFileName[chPnt];
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	33c8      	adds	r3, #200	@ 0xc8
 80132e2:	6879      	ldr	r1, [r7, #4]
 80132e4:	68fa      	ldr	r2, [r7, #12]
 80132e6:	440a      	add	r2, r1
 80132e8:	3290      	adds	r2, #144	@ 0x90
 80132ea:	7811      	ldrb	r1, [r2, #0]
 80132ec:	4a0d      	ldr	r2, [pc, #52]	@ (8013324 <setOtaData+0x54>)
 80132ee:	54d1      	strb	r1, [r2, r3]
	for(int chPnt = 0; chPnt < OtaData->fileNameLength; chPnt++)
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	3301      	adds	r3, #1
 80132f4:	60fb      	str	r3, [r7, #12]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	795b      	ldrb	r3, [r3, #5]
 80132fa:	461a      	mov	r2, r3
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	4293      	cmp	r3, r2
 8013300:	dbed      	blt.n	80132de <setOtaData+0xe>
	}
	paramPage1[OTA_FILENAME_LEN] = OtaData->fileNameLength;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	795a      	ldrb	r2, [r3, #5]
 8013306:	4b07      	ldr	r3, [pc, #28]	@ (8013324 <setOtaData+0x54>)
 8013308:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	paramPage1[OTA_NUMB_OF_FILES] = OtaData->numberOfFiles;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	785a      	ldrb	r2, [r3, #1]
 8013310:	4b04      	ldr	r3, [pc, #16]	@ (8013324 <setOtaData+0x54>)
 8013312:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
}
 8013316:	bf00      	nop
 8013318:	3714      	adds	r7, #20
 801331a:	46bd      	mov	sp, r7
 801331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	2007ce2c 	.word	0x2007ce2c

08013328 <getOtaData>:

void getOtaData(OTA_FILE_TYPE *OtaData)
{
 8013328:	b480      	push	{r7}
 801332a:	b085      	sub	sp, #20
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
	OtaData->fileNameLength = paramPage1[OTA_FILENAME_LEN];
 8013330:	4b13      	ldr	r3, [pc, #76]	@ (8013380 <getOtaData+0x58>)
 8013332:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	715a      	strb	r2, [r3, #5]
	OtaData->numberOfFiles = paramPage1[OTA_NUMB_OF_FILES];
 801333a:	4b11      	ldr	r3, [pc, #68]	@ (8013380 <getOtaData+0x58>)
 801333c:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	705a      	strb	r2, [r3, #1]

	for(int chPnt = 0; chPnt < OtaData->fileNameLength; chPnt++)
 8013344:	2300      	movs	r3, #0
 8013346:	60fb      	str	r3, [r7, #12]
 8013348:	e00c      	b.n	8013364 <getOtaData+0x3c>
	{
		OtaData->otaFileName[chPnt]= paramPage1[OTA_FILENAME_START + chPnt];
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	33c8      	adds	r3, #200	@ 0xc8
 801334e:	4a0c      	ldr	r2, [pc, #48]	@ (8013380 <getOtaData+0x58>)
 8013350:	5cd1      	ldrb	r1, [r2, r3]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	4413      	add	r3, r2
 8013358:	3390      	adds	r3, #144	@ 0x90
 801335a:	460a      	mov	r2, r1
 801335c:	701a      	strb	r2, [r3, #0]
	for(int chPnt = 0; chPnt < OtaData->fileNameLength; chPnt++)
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	3301      	adds	r3, #1
 8013362:	60fb      	str	r3, [r7, #12]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	795b      	ldrb	r3, [r3, #5]
 8013368:	461a      	mov	r2, r3
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	4293      	cmp	r3, r2
 801336e:	dbec      	blt.n	801334a <getOtaData+0x22>
	}
}
 8013370:	bf00      	nop
 8013372:	bf00      	nop
 8013374:	3714      	adds	r7, #20
 8013376:	46bd      	mov	sp, r7
 8013378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337c:	4770      	bx	lr
 801337e:	bf00      	nop
 8013380:	2007ce2c 	.word	0x2007ce2c

08013384 <saveParamDataToFlash>:

void saveParamDataToFlash(MEM_PTR *Data_Ptr)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
	Command = QCHIPID;
 801338c:	4b22      	ldr	r3, [pc, #136]	@ (8013418 <saveParamDataToFlash+0x94>)
 801338e:	220b      	movs	r2, #11
 8013390:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f000 fd48 	bl	8013e28 <XPS_COMMAND>
	Page = PARAM_PAGE;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801339e:	461a      	mov	r2, r3
 80133a0:	2300      	movs	r3, #0
 80133a2:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	Shift = PARAM_SHIFT;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80133ac:	2200      	movs	r2, #0
 80133ae:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	Size = 256;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80133b8:	461a      	mov	r2, r3
 80133ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80133be:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	for(int chPnt = 0; chPnt < Size; chPnt++)
 80133c2:	2300      	movs	r3, #0
 80133c4:	60fb      	str	r3, [r7, #12]
 80133c6:	e00f      	b.n	80133e8 <saveParamDataToFlash+0x64>
	{
		Memory[chPnt] = paramPage1[chPnt];
 80133c8:	4a14      	ldr	r2, [pc, #80]	@ (801341c <saveParamDataToFlash+0x98>)
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	4413      	add	r3, r2
 80133ce:	7819      	ldrb	r1, [r3, #0]
 80133d0:	687a      	ldr	r2, [r7, #4]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	4413      	add	r3, r2
 80133d6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80133da:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 80133de:	460a      	mov	r2, r1
 80133e0:	701a      	strb	r2, [r3, #0]
	for(int chPnt = 0; chPnt < Size; chPnt++)
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	3301      	adds	r3, #1
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80133ee:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d8e7      	bhi.n	80133c8 <saveParamDataToFlash+0x44>
	}

	Command = ERASE;
 80133f8:	4b07      	ldr	r3, [pc, #28]	@ (8013418 <saveParamDataToFlash+0x94>)
 80133fa:	2204      	movs	r2, #4
 80133fc:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 fd12 	bl	8013e28 <XPS_COMMAND>

	Command = WRITE;  // make sure WRITE command erases sector
 8013404:	4b04      	ldr	r3, [pc, #16]	@ (8013418 <saveParamDataToFlash+0x94>)
 8013406:	2200      	movs	r2, #0
 8013408:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 fd0c 	bl	8013e28 <XPS_COMMAND>
}
 8013410:	bf00      	nop
 8013412:	3710      	adds	r7, #16
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	2007cf2c 	.word	0x2007cf2c
 801341c:	2007ce2c 	.word	0x2007ce2c

08013420 <readParamDataFromFlash>:

void readParamDataFromFlash(MEM_PTR *Data_Ptr )
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
	Command = QCHIPID;
 8013428:	4b26      	ldr	r3, [pc, #152]	@ (80134c4 <readParamDataFromFlash+0xa4>)
 801342a:	220b      	movs	r2, #11
 801342c:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 fcfa 	bl	8013e28 <XPS_COMMAND>
	Page = PARAM_PAGE;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801343a:	461a      	mov	r2, r3
 801343c:	2300      	movs	r3, #0
 801343e:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	Shift = PARAM_SHIFT;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013448:	2200      	movs	r2, #0
 801344a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	Size = 256;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013454:	461a      	mov	r2, r3
 8013456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801345a:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	Command = READ;
 801345e:	4b19      	ldr	r3, [pc, #100]	@ (80134c4 <readParamDataFromFlash+0xa4>)
 8013460:	2201      	movs	r2, #1
 8013462:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f000 fcdf 	bl	8013e28 <XPS_COMMAND>

	for(int chPnt = 0; chPnt < Size; chPnt++)
 801346a:	2300      	movs	r3, #0
 801346c:	60fb      	str	r3, [r7, #12]
 801346e:	e00f      	b.n	8013490 <readParamDataFromFlash+0x70>
	{
		paramPage1[chPnt] = Memory[chPnt];
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	4413      	add	r3, r2
 8013476:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801347a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801347e:	7819      	ldrb	r1, [r3, #0]
 8013480:	4a11      	ldr	r2, [pc, #68]	@ (80134c8 <readParamDataFromFlash+0xa8>)
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	4413      	add	r3, r2
 8013486:	460a      	mov	r2, r1
 8013488:	701a      	strb	r2, [r3, #0]
	for(int chPnt = 0; chPnt < Size; chPnt++)
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	3301      	adds	r3, #1
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013496:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	429a      	cmp	r2, r3
 801349e:	d8e7      	bhi.n	8013470 <readParamDataFromFlash+0x50>
	}

	if (Memory [ PAGEKEY ] == UPDATE_PARAM_KEY)
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80134a6:	f893 3368 	ldrb.w	r3, [r3, #872]	@ 0x368
 80134aa:	2b10      	cmp	r3, #16
 80134ac:	d103      	bne.n	80134b6 <readParamDataFromFlash+0x96>
	{
		isDataValid = true;
 80134ae:	4b07      	ldr	r3, [pc, #28]	@ (80134cc <readParamDataFromFlash+0xac>)
 80134b0:	2201      	movs	r2, #1
 80134b2:	701a      	strb	r2, [r3, #0]
	}
	else
		isDataValid = false;
}
 80134b4:	e002      	b.n	80134bc <readParamDataFromFlash+0x9c>
		isDataValid = false;
 80134b6:	4b05      	ldr	r3, [pc, #20]	@ (80134cc <readParamDataFromFlash+0xac>)
 80134b8:	2200      	movs	r2, #0
 80134ba:	701a      	strb	r2, [r3, #0]
}
 80134bc:	bf00      	nop
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	2007cf2c 	.word	0x2007cf2c
 80134c8:	2007ce2c 	.word	0x2007ce2c
 80134cc:	2007cf88 	.word	0x2007cf88

080134d0 <readDataValidFromFlash>:

void readDataValidFromFlash(MEM_PTR *Data_Ptr )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b084      	sub	sp, #16
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
	Command = QCHIPID;
 80134d8:	4b26      	ldr	r3, [pc, #152]	@ (8013574 <readDataValidFromFlash+0xa4>)
 80134da:	220b      	movs	r2, #11
 80134dc:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 fca2 	bl	8013e28 <XPS_COMMAND>
	Page = PARAM_PAGE;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80134ea:	461a      	mov	r2, r3
 80134ec:	2300      	movs	r3, #0
 80134ee:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
	Shift = PARAM_SHIFT;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80134f8:	2200      	movs	r2, #0
 80134fa:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
	Size = 1;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013504:	461a      	mov	r2, r3
 8013506:	2301      	movs	r3, #1
 8013508:	f8c2 3350 	str.w	r3, [r2, #848]	@ 0x350

	Command = READ;
 801350c:	4b19      	ldr	r3, [pc, #100]	@ (8013574 <readDataValidFromFlash+0xa4>)
 801350e:	2201      	movs	r2, #1
 8013510:	721a      	strb	r2, [r3, #8]
	XPS_COMMAND ( Data_Ptr );
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f000 fc88 	bl	8013e28 <XPS_COMMAND>

	for(int chPnt = 0; chPnt < Size; chPnt++)
 8013518:	2300      	movs	r3, #0
 801351a:	60fb      	str	r3, [r7, #12]
 801351c:	e00f      	b.n	801353e <readDataValidFromFlash+0x6e>
	{
		paramPage1[chPnt] = Memory[chPnt];
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	4413      	add	r3, r2
 8013524:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013528:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801352c:	7819      	ldrb	r1, [r3, #0]
 801352e:	4a12      	ldr	r2, [pc, #72]	@ (8013578 <readDataValidFromFlash+0xa8>)
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	4413      	add	r3, r2
 8013534:	460a      	mov	r2, r1
 8013536:	701a      	strb	r2, [r3, #0]
	for(int chPnt = 0; chPnt < Size; chPnt++)
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	3301      	adds	r3, #1
 801353c:	60fb      	str	r3, [r7, #12]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013544:	f8d3 2350 	ldr.w	r2, [r3, #848]	@ 0x350
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	429a      	cmp	r2, r3
 801354c:	d8e7      	bhi.n	801351e <readDataValidFromFlash+0x4e>
	}

	if (Memory [ PAGEKEY ] == UPDATE_PARAM_KEY)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013554:	f893 3368 	ldrb.w	r3, [r3, #872]	@ 0x368
 8013558:	2b10      	cmp	r3, #16
 801355a:	d103      	bne.n	8013564 <readDataValidFromFlash+0x94>
	{
		isDataValid = true;
 801355c:	4b07      	ldr	r3, [pc, #28]	@ (801357c <readDataValidFromFlash+0xac>)
 801355e:	2201      	movs	r2, #1
 8013560:	701a      	strb	r2, [r3, #0]
	}
	else
		isDataValid = false;
}
 8013562:	e002      	b.n	801356a <readDataValidFromFlash+0x9a>
		isDataValid = false;
 8013564:	4b05      	ldr	r3, [pc, #20]	@ (801357c <readDataValidFromFlash+0xac>)
 8013566:	2200      	movs	r2, #0
 8013568:	701a      	strb	r2, [r3, #0]
}
 801356a:	bf00      	nop
 801356c:	3710      	adds	r7, #16
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	2007cf2c 	.word	0x2007cf2c
 8013578:	2007ce2c 	.word	0x2007ce2c
 801357c:	2007cf88 	.word	0x2007cf88

08013580 <getDataValid>:

bool getDataValid(void)
{
 8013580:	b480      	push	{r7}
 8013582:	af00      	add	r7, sp, #0
	return isDataValid;
 8013584:	4b03      	ldr	r3, [pc, #12]	@ (8013594 <getDataValid+0x14>)
 8013586:	781b      	ldrb	r3, [r3, #0]
}
 8013588:	4618      	mov	r0, r3
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr
 8013592:	bf00      	nop
 8013594:	2007cf88 	.word	0x2007cf88

08013598 <getMode>:
		Data_Ptr->Flash.currentFlashBank = 1;
	}
}

uint8_t getMode(HW_MODULE_TYPE hwSubModule)
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	4603      	mov	r3, r0
 80135a0:	71fb      	strb	r3, [r7, #7]
	uint8_t mode = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	73fb      	strb	r3, [r7, #15]
	switch (hwSubModule)
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	2b08      	cmp	r3, #8
 80135aa:	d840      	bhi.n	801362e <getMode+0x96>
 80135ac:	a201      	add	r2, pc, #4	@ (adr r2, 80135b4 <getMode+0x1c>)
 80135ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135b2:	bf00      	nop
 80135b4:	080135d9 	.word	0x080135d9
 80135b8:	080135e3 	.word	0x080135e3
 80135bc:	080135eb 	.word	0x080135eb
 80135c0:	080135f3 	.word	0x080135f3
 80135c4:	080135fd 	.word	0x080135fd
 80135c8:	08013607 	.word	0x08013607
 80135cc:	08013611 	.word	0x08013611
 80135d0:	0801361b 	.word	0x0801361b
 80135d4:	08013625 	.word	0x08013625
	{
	case HEARTBEAT_MODULE:
		mode =  paramPage1 [ HB_MODE ];
 80135d8:	4b19      	ldr	r3, [pc, #100]	@ (8013640 <getMode+0xa8>)
 80135da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80135de:	73fb      	strb	r3, [r7, #15]
		break;
 80135e0:	e026      	b.n	8013630 <getMode+0x98>
	case GPS_MODULE:
		mode =  paramPage1 [ GPS_MODE ];
 80135e2:	4b17      	ldr	r3, [pc, #92]	@ (8013640 <getMode+0xa8>)
 80135e4:	7ddb      	ldrb	r3, [r3, #23]
 80135e6:	73fb      	strb	r3, [r7, #15]
		break;
 80135e8:	e022      	b.n	8013630 <getMode+0x98>
	case BUZZER_MODULE:
		mode =  paramPage1 [ BZ_MODE ];
 80135ea:	4b15      	ldr	r3, [pc, #84]	@ (8013640 <getMode+0xa8>)
 80135ec:	7d9b      	ldrb	r3, [r3, #22]
 80135ee:	73fb      	strb	r3, [r7, #15]
		break;
 80135f0:	e01e      	b.n	8013630 <getMode+0x98>
	case TEMPERATURE_MODULE:
		mode =  paramPage1 [ TEMP_MODE ];
 80135f2:	4b13      	ldr	r3, [pc, #76]	@ (8013640 <getMode+0xa8>)
 80135f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80135f8:	73fb      	strb	r3, [r7, #15]
		break;
 80135fa:	e019      	b.n	8013630 <getMode+0x98>
	case HUMIDITY_MODULE:
		mode =  paramPage1 [ HUMD_MODE ];
 80135fc:	4b10      	ldr	r3, [pc, #64]	@ (8013640 <getMode+0xa8>)
 80135fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013602:	73fb      	strb	r3, [r7, #15]
		break;
 8013604:	e014      	b.n	8013630 <getMode+0x98>
	case CELL_MODULE:
		mode =  paramPage1 [ CELL_MODE ];
 8013606:	4b0e      	ldr	r3, [pc, #56]	@ (8013640 <getMode+0xa8>)
 8013608:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801360c:	73fb      	strb	r3, [r7, #15]
		break;
 801360e:	e00f      	b.n	8013630 <getMode+0x98>
	case CAMERA_MODULE:
		mode =  paramPage1 [ CAMERA_MODE ];
 8013610:	4b0b      	ldr	r3, [pc, #44]	@ (8013640 <getMode+0xa8>)
 8013612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013616:	73fb      	strb	r3, [r7, #15]
		break;
 8013618:	e00a      	b.n	8013630 <getMode+0x98>
	case ACCELEROMETER_MODULE:
		mode =  paramPage1 [ ACC_MODE ];
 801361a:	4b09      	ldr	r3, [pc, #36]	@ (8013640 <getMode+0xa8>)
 801361c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013620:	73fb      	strb	r3, [r7, #15]
		break;
 8013622:	e005      	b.n	8013630 <getMode+0x98>
	case PIR_MODULE:
		mode =  paramPage1 [ PIR_MODE ];
 8013624:	4b06      	ldr	r3, [pc, #24]	@ (8013640 <getMode+0xa8>)
 8013626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801362a:	73fb      	strb	r3, [r7, #15]
		break;
 801362c:	e000      	b.n	8013630 <getMode+0x98>
	default:
		break;
 801362e:	bf00      	nop
	}

	return mode;
 8013630:	7bfb      	ldrb	r3, [r7, #15]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3714      	adds	r7, #20
 8013636:	46bd      	mov	sp, r7
 8013638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363c:	4770      	bx	lr
 801363e:	bf00      	nop
 8013640:	2007ce2c 	.word	0x2007ce2c

08013644 <XPS_paramRetrieve>:
/******************************************************
 Gets the operational Parameters from XPS memory
 returns a boolean value if the data has been set
 ******************************************************/
bool XPS_paramRetrieve ( MEM_PTR *Data_Ptr )
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b090      	sub	sp, #64	@ 0x40
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
	if (paramPage1 [ PAGEKEY ] == UPDATE_PARAM_KEY)
 801364c:	4bb1      	ldr	r3, [pc, #708]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	2b10      	cmp	r3, #16
 8013652:	f040 81de 	bne.w	8013a12 <XPS_paramRetrieve+0x3ce>
	{
		isDataValid = true;
 8013656:	4bb0      	ldr	r3, [pc, #704]	@ (8013918 <XPS_paramRetrieve+0x2d4>)
 8013658:	2201      	movs	r2, #1
 801365a:	701a      	strb	r2, [r3, #0]
		uint32_t longitudeInt = 0;
 801365c:	2300      	movs	r3, #0
 801365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		uint32_t latitudeInt = 0;
 8013660:	2300      	movs	r3, #0
 8013662:	63bb      	str	r3, [r7, #56]	@ 0x38

		Setting = paramPage1 [ LOGGING_LEVEL_SETTING ];
 8013664:	4bab      	ldr	r3, [pc, #684]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013666:	785a      	ldrb	r2, [r3, #1]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801366e:	f883 2361 	strb.w	r2, [r3, #865]	@ 0x361
		Data_Ptr->Mode = paramPage1 [ DEVICE_MODE ];
 8013672:	4ba8      	ldr	r3, [pc, #672]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013674:	789a      	ldrb	r2, [r3, #2]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 801367c:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308

		PIR_PARAMETER_TYPE pirXPSData;
		PIR_FILTER_TYPE dayTimeXPSParam;
		PIR_FILTER_TYPE nightTimeXPSParam;

		dayTimeXPSParam.Motion_Confirm_Window =       paramPage1 [ DT_MOTION_CONFIRM_WINDOW ];
 8013680:	4ba4      	ldr	r3, [pc, #656]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013682:	78db      	ldrb	r3, [r3, #3]
 8013684:	853b      	strh	r3, [r7, #40]	@ 0x28
		dayTimeXPSParam.Motion_Threshhold =           paramPage1 [ DT_MOTION_THRES ];
 8013686:	4ba3      	ldr	r3, [pc, #652]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013688:	791b      	ldrb	r3, [r3, #4]
 801368a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		dayTimeXPSParam.Motion_Blackout =            (paramPage1 [ DT_MOTION_BLACKOUT_MSB ]<<8) + paramPage1 [ DT_MOTION_BLACKOUT_LSB ] ;
 801368e:	4ba1      	ldr	r3, [pc, #644]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013690:	795b      	ldrb	r3, [r3, #5]
 8013692:	021b      	lsls	r3, r3, #8
 8013694:	b29b      	uxth	r3, r3
 8013696:	4a9f      	ldr	r2, [pc, #636]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013698:	f892 2064 	ldrb.w	r2, [r2, #100]	@ 0x64
 801369c:	4413      	add	r3, r2
 801369e:	b29b      	uxth	r3, r3
 80136a0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		dayTimeXPSParam.No_Motion_Detection_Window =  paramPage1 [ DT_NO_MOTION_WINDOW ];
 80136a2:	4b9c      	ldr	r3, [pc, #624]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136a4:	799b      	ldrb	r3, [r3, #6]
 80136a6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		dayTimeXPSParam.Near_Motion_Threshhold =      paramPage1 [DT_NEAR_MOTION_THRES ];
 80136a8:	4b9a      	ldr	r3, [pc, #616]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136aa:	79db      	ldrb	r3, [r3, #7]
 80136ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
		nightTimeXPSParam.Motion_Confirm_Window =     paramPage1 [NT_MOTION_CONFIRM_WINDOW ];
 80136b0:	4b98      	ldr	r3, [pc, #608]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136b2:	7a1b      	ldrb	r3, [r3, #8]
 80136b4:	83bb      	strh	r3, [r7, #28]
		nightTimeXPSParam.Motion_Threshhold =         paramPage1 [NT_MOTION_THRES];
 80136b6:	4b97      	ldr	r3, [pc, #604]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136b8:	7a5b      	ldrb	r3, [r3, #9]
 80136ba:	77bb      	strb	r3, [r7, #30]
		nightTimeXPSParam.Motion_Blackout =          (paramPage1 [ NT_MOTION_BLACKOUT_MSB ]<<8) + paramPage1 [ NT_MOTION_BLACKOUT_LSB ] ;
 80136bc:	4b95      	ldr	r3, [pc, #596]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136be:	7a9b      	ldrb	r3, [r3, #10]
 80136c0:	021b      	lsls	r3, r3, #8
 80136c2:	b29b      	uxth	r3, r3
 80136c4:	4a93      	ldr	r2, [pc, #588]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136c6:	f892 2065 	ldrb.w	r2, [r2, #101]	@ 0x65
 80136ca:	4413      	add	r3, r2
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	843b      	strh	r3, [r7, #32]
		nightTimeXPSParam.No_Motion_Detection_Window = paramPage1 [ NT_NO_MOTION_WINDOW ];
 80136d0:	4b90      	ldr	r3, [pc, #576]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136d2:	7adb      	ldrb	r3, [r3, #11]
 80136d4:	847b      	strh	r3, [r7, #34]	@ 0x22
		nightTimeXPSParam.Near_Motion_Threshhold =    paramPage1 [ NT_NEAR_MOTION_THRES ];
 80136d6:	4b8f      	ldr	r3, [pc, #572]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136d8:	7b1b      	ldrb	r3, [r3, #12]
 80136da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		pirXPSData.coolDown =                        (paramPage1 [PIR_COOLDOWN_MSB ]<<8) + paramPage1 [ PIR_COOLDOWN_LSB ] ;
 80136de:	4b8d      	ldr	r3, [pc, #564]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136e0:	7b5b      	ldrb	r3, [r3, #13]
 80136e2:	021b      	lsls	r3, r3, #8
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	4a8b      	ldr	r2, [pc, #556]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136e8:	7b92      	ldrb	r2, [r2, #14]
 80136ea:	4413      	add	r3, r2
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
		pirXPSData.mode =                             paramPage1 [ PIR_MODE];
 80136f0:	4b88      	ldr	r3, [pc, #544]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80136f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		PRINTF("Retrieved PIR Mode is %d\r\n", paramPage1 [ PIR_MODE ]);
 80136fa:	4b86      	ldr	r3, [pc, #536]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80136fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013700:	461a      	mov	r2, r3
 8013702:	4986      	ldr	r1, [pc, #536]	@ (801391c <XPS_paramRetrieve+0x2d8>)
 8013704:	2001      	movs	r0, #1
 8013706:	f7f3 fb35 	bl	8006d74 <TraceSend>

		setPirParameters(pirXPSData);
 801370a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801370c:	f7f7 ffe0 	bl	800b6d0 <setPirParameters>
		setFilterParameters(dayTimeXPSParam, PIR_DAY);
 8013710:	2300      	movs	r3, #0
 8013712:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8013716:	ca07      	ldmia	r2, {r0, r1, r2}
 8013718:	f7f8 f800 	bl	800b71c <setFilterParameters>
		setFilterParameters(nightTimeXPSParam, PIR_NIGHT);
 801371c:	2301      	movs	r3, #1
 801371e:	f107 021c 	add.w	r2, r7, #28
 8013722:	ca07      	ldmia	r2, {r0, r1, r2}
 8013724:	f7f7 fffa 	bl	800b71c <setFilterParameters>

		Data_Ptr->heartBeatData.mode =            paramPage1 [ HB_MODE ];
 8013728:	4b7a      	ldr	r3, [pc, #488]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 801372a:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013734:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
		Data_Ptr->heartBeatData.hbInterval =  (paramPage1 [ HB_INTERVAL_MSB ] <<8) + paramPage1 [ HB_INTERVAL_LSB ];
 8013738:	4b76      	ldr	r3, [pc, #472]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 801373a:	7bdb      	ldrb	r3, [r3, #15]
 801373c:	021b      	lsls	r3, r3, #8
 801373e:	b29b      	uxth	r3, r3
 8013740:	4a74      	ldr	r2, [pc, #464]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013742:	7c12      	ldrb	r2, [r2, #16]
 8013744:	4413      	add	r3, r2
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801374e:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a

		PRINTF("Retrieved HB Interval MSB is %d\r\n", paramPage1 [ HB_INTERVAL_MSB ]);
 8013752:	4b70      	ldr	r3, [pc, #448]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013754:	7bdb      	ldrb	r3, [r3, #15]
 8013756:	461a      	mov	r2, r3
 8013758:	4971      	ldr	r1, [pc, #452]	@ (8013920 <XPS_paramRetrieve+0x2dc>)
 801375a:	2001      	movs	r0, #1
 801375c:	f7f3 fb0a 	bl	8006d74 <TraceSend>
		PRINTF("Retrieved HB Interval LSB is %d\r\n", paramPage1 [ HB_INTERVAL_LSB ]);
 8013760:	4b6c      	ldr	r3, [pc, #432]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013762:	7c1b      	ldrb	r3, [r3, #16]
 8013764:	461a      	mov	r2, r3
 8013766:	496f      	ldr	r1, [pc, #444]	@ (8013924 <XPS_paramRetrieve+0x2e0>)
 8013768:	2001      	movs	r0, #1
 801376a:	f7f3 fb03 	bl	8006d74 <TraceSend>
		PRINTF("HB Interval is %d\r\n", Data_Ptr->heartBeatData.hbInterval);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013774:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8013778:	461a      	mov	r2, r3
 801377a:	496b      	ldr	r1, [pc, #428]	@ (8013928 <XPS_paramRetrieve+0x2e4>)
 801377c:	2001      	movs	r0, #1
 801377e:	f7f3 faf9 	bl	8006d74 <TraceSend>

		GPS_PARAMETER_TYPE retrievedGpsParams;

		retrievedGpsParams.mode =               paramPage1 [ GPS_MODE ];
 8013782:	4b64      	ldr	r3, [pc, #400]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013784:	7ddb      	ldrb	r3, [r3, #23]
 8013786:	743b      	strb	r3, [r7, #16]
		retrievedGpsParams.gpsInterval =        paramPage1 [ GPS_INTERVAL ];
 8013788:	4b62      	ldr	r3, [pc, #392]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 801378a:	7e1b      	ldrb	r3, [r3, #24]
 801378c:	82fb      	strh	r3, [r7, #22]
		//retrievedGpsParams.timeSyncEnable =     paramPage1 [ GPS_TIMESYNC_ENABLE];  // part of mode
		retrievedGpsParams.geofenceDistance =  (paramPage1 [ GPS_GEO_MSB ] << 8) + paramPage1 [ GPS_GEO_LSB ];
 801378e:	4b61      	ldr	r3, [pc, #388]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013790:	7edb      	ldrb	r3, [r3, #27]
 8013792:	021b      	lsls	r3, r3, #8
 8013794:	b29b      	uxth	r3, r3
 8013796:	4a5f      	ldr	r2, [pc, #380]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013798:	7f12      	ldrb	r2, [r2, #28]
 801379a:	4413      	add	r3, r2
 801379c:	b29b      	uxth	r3, r3
 801379e:	833b      	strh	r3, [r7, #24]
		retrievedGpsParams.alarmSamplePeriod =  paramPage1 [ GPS_ALARM_SAMP_PER ];
 80137a0:	4b5c      	ldr	r3, [pc, #368]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137a2:	7f5b      	ldrb	r3, [r3, #29]
 80137a4:	827b      	strh	r3, [r7, #18]
		retrievedGpsParams.alarmTime =          ((paramPage1 [ GPS_ALARM_TIME_MSB] << 8) + paramPage1 [ GPS_ALARM_TIME_LSB]);
 80137a6:	4b5b      	ldr	r3, [pc, #364]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137a8:	7f9b      	ldrb	r3, [r3, #30]
 80137aa:	021b      	lsls	r3, r3, #8
 80137ac:	b29b      	uxth	r3, r3
 80137ae:	4a59      	ldr	r2, [pc, #356]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137b0:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80137b4:	4413      	add	r3, r2
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	82bb      	strh	r3, [r7, #20]
		retrievedGpsParams.movementHysteresis = paramPage1 [ GPS_MOVE_HYSTER ];
 80137ba:	4b56      	ldr	r3, [pc, #344]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137bc:	7fdb      	ldrb	r3, [r3, #31]
 80137be:	837b      	strh	r3, [r7, #26]
		setGpsParameters(retrievedGpsParams);
 80137c0:	f107 0310 	add.w	r3, r7, #16
 80137c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80137c8:	f7f6 f890 	bl	80098ec <setGpsParameters>

		longitudeInt =  (paramPage1 [ LONG_INT_MSB ] << 24) +(paramPage1 [ LONG_INT_3B ] << 16) + (paramPage1 [ LONG_INT_2B ] <<  8) + paramPage1 [ LONG_INT_LSB ];
 80137cc:	4b51      	ldr	r3, [pc, #324]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80137d2:	061a      	lsls	r2, r3, #24
 80137d4:	4b4f      	ldr	r3, [pc, #316]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80137da:	041b      	lsls	r3, r3, #16
 80137dc:	441a      	add	r2, r3
 80137de:	4b4d      	ldr	r3, [pc, #308]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137e0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80137e4:	021b      	lsls	r3, r3, #8
 80137e6:	4413      	add	r3, r2
 80137e8:	4a4a      	ldr	r2, [pc, #296]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137ea:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80137ee:	4413      	add	r3, r2
 80137f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		latitudeInt  =  (paramPage1 [ LAT_INT_MSB ] << 24) +(paramPage1 [LAT_INT_3B ] << 16) + (paramPage1 [ LAT_INT_2B ] <<  8) + paramPage1 [ LAT_INT_LSB ];
 80137f2:	4b48      	ldr	r3, [pc, #288]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80137f8:	061a      	lsls	r2, r3, #24
 80137fa:	4b46      	ldr	r3, [pc, #280]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80137fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8013800:	041b      	lsls	r3, r3, #16
 8013802:	441a      	add	r2, r3
 8013804:	4b43      	ldr	r3, [pc, #268]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013806:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 801380a:	021b      	lsls	r3, r3, #8
 801380c:	4413      	add	r3, r2
 801380e:	4a41      	ldr	r2, [pc, #260]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013810:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8013814:	4413      	add	r3, r2
 8013816:	63bb      	str	r3, [r7, #56]	@ 0x38

		Data_Ptr->LastPosition.longitude = GPSIntToFloat(longitudeInt);
 8013818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801381a:	4618      	mov	r0, r3
 801381c:	f7f6 f88e 	bl	800993c <GPSIntToFloat>
 8013820:	eef0 7a40 	vmov.f32	s15, s0
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801382a:	edc3 7ad2 	vstr	s15, [r3, #840]	@ 0x348
		Data_Ptr->LastPosition.latitude = GPSIntToFloat(latitudeInt);
 801382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013830:	4618      	mov	r0, r3
 8013832:	f7f6 f883 	bl	800993c <GPSIntToFloat>
 8013836:	eef0 7a40 	vmov.f32	s15, s0
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013840:	edc3 7ad1 	vstr	s15, [r3, #836]	@ 0x344

		BUSINESS_DATA_TYPE retrievedOperatingHours;

		retrievedOperatingHours.dayTime.hours  =        paramPage1 [ BUS_DT_HOURS ];
 8013844:	4b33      	ldr	r3, [pc, #204]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801384a:	727b      	strb	r3, [r7, #9]
		retrievedOperatingHours.dayTime.minutes =       paramPage1 [ BUS_DT_MIN ];
 801384c:	4b31      	ldr	r3, [pc, #196]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 801384e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8013852:	72bb      	strb	r3, [r7, #10]
		retrievedOperatingHours.nightTime.hours =       paramPage1 [ BUS_NT_HOURS];
 8013854:	4b2f      	ldr	r3, [pc, #188]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013856:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 801385a:	72fb      	strb	r3, [r7, #11]
		retrievedOperatingHours.nightTime.minutes =     paramPage1 [ BUS_NT_MIN ];
 801385c:	4b2d      	ldr	r3, [pc, #180]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 801385e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8013862:	733b      	strb	r3, [r7, #12]
		retrievedOperatingHours.DayNightSwitchEnabled = paramPage1 [ BUS_HOURS_ENABLE ];
 8013864:	4b2b      	ldr	r3, [pc, #172]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013866:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801386a:	2b00      	cmp	r3, #0
 801386c:	bf14      	ite	ne
 801386e:	2301      	movne	r3, #1
 8013870:	2300      	moveq	r3, #0
 8013872:	b2db      	uxtb	r3, r3
 8013874:	723b      	strb	r3, [r7, #8]
		setBusinessHours(retrievedOperatingHours);
 8013876:	f107 0308 	add.w	r3, r7, #8
 801387a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801387e:	f7f0 fc09 	bl	8004094 <setBusinessHours>

		// KCS move these into a function in the Temperature.c file
		// hold all these parameters local in the Temperature.c file
		// call setTempParams()

		thSensorParams.samplePeriod  =          paramPage1 [ ENV_SENSOR_SAMPLE_PERIOD ];
 8013882:	4b24      	ldr	r3, [pc, #144]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013884:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013888:	461a      	mov	r2, r3
 801388a:	4b28      	ldr	r3, [pc, #160]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 801388c:	801a      	strh	r2, [r3, #0]
		thSensorParams.sensorWarmUp =           paramPage1 [ ENV_SENSOR_WARMUP ];
 801388e:	4b21      	ldr	r3, [pc, #132]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013890:	7c5a      	ldrb	r2, [r3, #17]
 8013892:	4b26      	ldr	r3, [pc, #152]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 8013894:	709a      	strb	r2, [r3, #2]
		thSensorParams.coolDownPeriod  =        paramPage1 [ ENV_SENSOR_COOLDOWN ];
 8013896:	4b1f      	ldr	r3, [pc, #124]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013898:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801389c:	4b23      	ldr	r3, [pc, #140]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 801389e:	71da      	strb	r2, [r3, #7]
		thSensorParams.chargerDisableSetting =  paramPage1 [ ENV_SENSOR_CHARG_DISABLE_SET ];
 80138a0:	4b1c      	ldr	r3, [pc, #112]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80138a6:	4b21      	ldr	r3, [pc, #132]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138a8:	721a      	strb	r2, [r3, #8]
		thSensorParams.alarmTime  =             paramPage1 [ ENV_SENSOR_ALARM_TIME ];
 80138aa:	4b1a      	ldr	r3, [pc, #104]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80138b0:	461a      	mov	r2, r3
 80138b2:	4b1e      	ldr	r3, [pc, #120]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138b4:	809a      	strh	r2, [r3, #4]
		thSensorParams.alarmSamplePeriod  =     paramPage1 [ ENV_SENSOR_ALARM_SAMPLE ];
 80138b6:	4b17      	ldr	r3, [pc, #92]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138b8:	f893 203e 	ldrb.w	r2, [r3, #62]	@ 0x3e
 80138bc:	4b1b      	ldr	r3, [pc, #108]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138be:	719a      	strb	r2, [r3, #6]

		thSensorParams.temperature.mode =       paramPage1 [ TEMP_MODE ];
 80138c0:	4b14      	ldr	r3, [pc, #80]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138c2:	f893 203f 	ldrb.w	r2, [r3, #63]	@ 0x3f
 80138c6:	4b19      	ldr	r3, [pc, #100]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138c8:	725a      	strb	r2, [r3, #9]
		thSensorParams.temperature.lowSet  =    paramPage1 [ TEMP_LOW_SET ];
 80138ca:	4b12      	ldr	r3, [pc, #72]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138cc:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80138d0:	4b16      	ldr	r3, [pc, #88]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138d2:	729a      	strb	r2, [r3, #10]
		thSensorParams.temperature.highSet =    paramPage1 [ TEMP_HI_SET ];
 80138d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138d6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80138da:	4b14      	ldr	r3, [pc, #80]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138dc:	72da      	strb	r2, [r3, #11]
		thSensorParams.temperature.hysteresis = paramPage1 [ TEMP_HYSTER ];
 80138de:	4b0d      	ldr	r3, [pc, #52]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138e0:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80138e4:	4b11      	ldr	r3, [pc, #68]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138e6:	731a      	strb	r2, [r3, #12]

		thSensorParams.humidity.mode =       paramPage1 [ HUMD_MODE ];
 80138e8:	4b0a      	ldr	r3, [pc, #40]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138ea:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80138ee:	4b0f      	ldr	r3, [pc, #60]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138f0:	735a      	strb	r2, [r3, #13]
		thSensorParams.humidity.lowSet  =    paramPage1 [ HUMD_LOW_SET ];
 80138f2:	4b08      	ldr	r3, [pc, #32]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138f4:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80138f8:	4b0c      	ldr	r3, [pc, #48]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 80138fa:	739a      	strb	r2, [r3, #14]
		thSensorParams.humidity.highSet =    paramPage1 [ HUMD_HI_SET ];
 80138fc:	4b05      	ldr	r3, [pc, #20]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 80138fe:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8013902:	4b0a      	ldr	r3, [pc, #40]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 8013904:	73da      	strb	r2, [r3, #15]
		thSensorParams.humidity.hysteresis = paramPage1 [ HUMD_HYSTER ];
 8013906:	4b03      	ldr	r3, [pc, #12]	@ (8013914 <XPS_paramRetrieve+0x2d0>)
 8013908:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 801390c:	4b07      	ldr	r3, [pc, #28]	@ (801392c <XPS_paramRetrieve+0x2e8>)
 801390e:	741a      	strb	r2, [r3, #16]
 8013910:	e00e      	b.n	8013930 <XPS_paramRetrieve+0x2ec>
 8013912:	bf00      	nop
 8013914:	2007ce2c 	.word	0x2007ce2c
 8013918:	2007cf88 	.word	0x2007cf88
 801391c:	0802fdec 	.word	0x0802fdec
 8013920:	0802fe08 	.word	0x0802fe08
 8013924:	0802fe2c 	.word	0x0802fe2c
 8013928:	0802fe50 	.word	0x0802fe50
 801392c:	2007cf8c 	.word	0x2007cf8c

		Data_Ptr->buzzerData.startCycles = paramPage1 [ BZ_START_CYCLES ];
 8013930:	4b3b      	ldr	r3, [pc, #236]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013932:	7d1a      	ldrb	r2, [r3, #20]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801393a:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
		Data_Ptr->buzzerData.stopCycles =  paramPage1 [ BZ_STOP_CYCLES ];
 801393e:	4b38      	ldr	r3, [pc, #224]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013940:	7d5a      	ldrb	r2, [r3, #21]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013948:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
		Data_Ptr->buzzerData.mode =        paramPage1 [ BZ_MODE ];
 801394c:	4b34      	ldr	r3, [pc, #208]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 801394e:	7d9a      	ldrb	r2, [r3, #22]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013956:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
		// KCS make name like GPS??
		accParams.mode =        paramPage1 [ ACC_MODE ];
 801395a:	4b31      	ldr	r3, [pc, #196]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 801395c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8013960:	4b30      	ldr	r3, [pc, #192]	@ (8013a24 <XPS_paramRetrieve+0x3e0>)
 8013962:	701a      	strb	r2, [r3, #0]
		accParams.range =       paramPage1 [ ACC_RANGE ];
 8013964:	4b2e      	ldr	r3, [pc, #184]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013966:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 801396a:	4b2e      	ldr	r3, [pc, #184]	@ (8013a24 <XPS_paramRetrieve+0x3e0>)
 801396c:	705a      	strb	r2, [r3, #1]
		accParams.threshold =   ((paramPage1 [ ACC_THRESH_MSB ] << 8) + paramPage1 [ ACC_THRESH_LSB ]);
 801396e:	4b2c      	ldr	r3, [pc, #176]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013970:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013974:	021b      	lsls	r3, r3, #8
 8013976:	4a2a      	ldr	r2, [pc, #168]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013978:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 801397c:	4413      	add	r3, r2
 801397e:	461a      	mov	r2, r3
 8013980:	4b28      	ldr	r3, [pc, #160]	@ (8013a24 <XPS_paramRetrieve+0x3e0>)
 8013982:	605a      	str	r2, [r3, #4]
		accParams.hysteresis =  ((paramPage1 [ ACC_HYSTER_MSB ] << 8) + paramPage1 [ ACC_HYSTER_LSB ]);
 8013984:	4b26      	ldr	r3, [pc, #152]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013986:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801398a:	021b      	lsls	r3, r3, #8
 801398c:	4a24      	ldr	r2, [pc, #144]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 801398e:	f892 2067 	ldrb.w	r2, [r2, #103]	@ 0x67
 8013992:	4413      	add	r3, r2
 8013994:	461a      	mov	r2, r3
 8013996:	4b23      	ldr	r3, [pc, #140]	@ (8013a24 <XPS_paramRetrieve+0x3e0>)
 8013998:	609a      	str	r2, [r3, #8]
		accParams.mutePeriod =  ((paramPage1 [ ACC_MUTE_MSB ] << 8) + paramPage1 [ ACC_MUTE_LSB ]);
 801399a:	4b21      	ldr	r3, [pc, #132]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 801399c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80139a0:	021b      	lsls	r3, r3, #8
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	4a1e      	ldr	r2, [pc, #120]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139a6:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 80139aa:	4413      	add	r3, r2
 80139ac:	b29a      	uxth	r2, r3
 80139ae:	4b1d      	ldr	r3, [pc, #116]	@ (8013a24 <XPS_paramRetrieve+0x3e0>)
 80139b0:	81da      	strh	r2, [r3, #14]
		setAccelParameters(accParams);
 80139b2:	4b1c      	ldr	r3, [pc, #112]	@ (8013a24 <XPS_paramRetrieve+0x3e0>)
 80139b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80139b6:	f7ee f835 	bl	8001a24 <setAccelParameters>


		camParams.mode = paramPage1[CAMERA_MODE];
 80139ba:	4b19      	ldr	r3, [pc, #100]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139bc:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80139c0:	4b19      	ldr	r3, [pc, #100]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139c2:	701a      	strb	r2, [r3, #0]
		camParams.pictureInterval = paramPage1[CAMERA_PIC_INTERVAL];
 80139c4:	4b16      	ldr	r3, [pc, #88]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139c6:	f893 2047 	ldrb.w	r2, [r3, #71]	@ 0x47
 80139ca:	4b17      	ldr	r3, [pc, #92]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139cc:	70da      	strb	r2, [r3, #3]
		camParams.picturesPerEvent = paramPage1[CAMERA_PIC_PER_EVENT];
 80139ce:	4b14      	ldr	r3, [pc, #80]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139d0:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80139d4:	4b14      	ldr	r3, [pc, #80]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139d6:	709a      	strb	r2, [r3, #2]
		camParams.warmUp = paramPage1[CAMERA_WARMUP];
 80139d8:	4b11      	ldr	r3, [pc, #68]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139da:	7cda      	ldrb	r2, [r3, #19]
 80139dc:	4b12      	ldr	r3, [pc, #72]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139de:	705a      	strb	r2, [r3, #1]
		camParams.samplePicNumber = paramPage1[CAMERA_PIC_SAMPLES_PER_DAY];
 80139e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139e2:	f893 204a 	ldrb.w	r2, [r3, #74]	@ 0x4a
 80139e6:	4b10      	ldr	r3, [pc, #64]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139e8:	719a      	strb	r2, [r3, #6]
		camParams.samplePictureTime.hours = paramPage1[CAMERA_PIC_SAMPLE_HOUR];
 80139ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139ec:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80139f0:	4b0d      	ldr	r3, [pc, #52]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139f2:	711a      	strb	r2, [r3, #4]
		camParams.samplePictureTime.minutes = paramPage1[CAMERA_PIC_SAMPLE_MIN];
 80139f4:	4b0a      	ldr	r3, [pc, #40]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 80139f6:	f893 2049 	ldrb.w	r2, [r3, #73]	@ 0x49
 80139fa:	4b0b      	ldr	r3, [pc, #44]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 80139fc:	715a      	strb	r2, [r3, #5]
		setCameraParameters(camParams);
 80139fe:	4b0a      	ldr	r3, [pc, #40]	@ (8013a28 <XPS_paramRetrieve+0x3e4>)
 8013a00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013a04:	f7ee f9b8 	bl	8001d78 <setCameraParameters>

		// call setOtaParams

		Data_Ptr->Flash.fwDownloadRdy =  paramPage1 [ DOWNLOAD_READY ]; //fwDownloadRdy
 8013a08:	4b05      	ldr	r3, [pc, #20]	@ (8013a20 <XPS_paramRetrieve+0x3dc>)
 8013a0a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	705a      	strb	r2, [r3, #1]
		//cell.mode =     paramPage1 [ CELL_MODE ];
		//cell.warmUp =     paramPage1 [ CELL_WARMUP ];
		//Data_Ptr->heartBeatData.cameraWarmUp =    paramPage1 [ HB_CAMERA_WARMUP ];

	}
	return isDataValid;
 8013a12:	4b06      	ldr	r3, [pc, #24]	@ (8013a2c <XPS_paramRetrieve+0x3e8>)
 8013a14:	781b      	ldrb	r3, [r3, #0]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3740      	adds	r7, #64	@ 0x40
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	2007ce2c 	.word	0x2007ce2c
 8013a24:	2007cfa0 	.word	0x2007cfa0
 8013a28:	2007cfb0 	.word	0x2007cfb0
 8013a2c:	2007cf88 	.word	0x2007cf88

08013a30 <XPS_paramStore>:
/******************************************************
 XPS Param Function
 Write Current Parameters to memory
 ******************************************************/
void XPS_paramStore ( MEM_PTR *Data_Ptr )
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b090      	sub	sp, #64	@ 0x40
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
	uint32_t longitudeInt = GPSFloatToInt(Data_Ptr->LastPosition.longitude);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013a3e:	edd3 7ad2 	vldr	s15, [r3, #840]	@ 0x348
 8013a42:	eeb0 0a67 	vmov.f32	s0, s15
 8013a46:	f7f5 ff95 	bl	8009974 <GPSFloatToInt>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t latitudeInt = GPSFloatToInt(Data_Ptr->LastPosition.latitude);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013a54:	edd3 7ad1 	vldr	s15, [r3, #836]	@ 0x344
 8013a58:	eeb0 0a67 	vmov.f32	s0, s15
 8013a5c:	f7f5 ff8a 	bl	8009974 <GPSFloatToInt>
 8013a60:	4603      	mov	r3, r0
 8013a62:	63bb      	str	r3, [r7, #56]	@ 0x38

	paramPage1 [ PAGEKEY ]               = UPDATE_PARAM_KEY;
 8013a64:	4baa      	ldr	r3, [pc, #680]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013a66:	2210      	movs	r2, #16
 8013a68:	701a      	strb	r2, [r3, #0]
	paramPage1 [ LOGGING_LEVEL_SETTING ] = Setting;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013a70:	f893 2361 	ldrb.w	r2, [r3, #865]	@ 0x361
 8013a74:	4ba6      	ldr	r3, [pc, #664]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013a76:	705a      	strb	r2, [r3, #1]
	paramPage1 [DEVICE_MODE]             = Data_Ptr->Mode;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8013a7e:	f893 2308 	ldrb.w	r2, [r3, #776]	@ 0x308
 8013a82:	4ba3      	ldr	r3, [pc, #652]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013a84:	709a      	strb	r2, [r3, #2]

	PIR_PARAMETER_TYPE pirXPSData;
	PIR_FILTER_TYPE dayTimeXPSParam;
	PIR_FILTER_TYPE nightTimeXPSParam;
	getPirParameters(&pirXPSData);
 8013a86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7f7 fe32 	bl	800b6f4 <getPirParameters>
	getFilterParameters(&dayTimeXPSParam, PIR_DAY);
 8013a90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8013a94:	2100      	movs	r1, #0
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7f7 fe72 	bl	800b780 <getFilterParameters>
	getFilterParameters(&nightTimeXPSParam, PIR_NIGHT);
 8013a9c:	f107 031c 	add.w	r3, r7, #28
 8013aa0:	2101      	movs	r1, #1
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7f7 fe6c 	bl	800b780 <getFilterParameters>

	paramPage1 [ DT_MOTION_CONFIRM_WINDOW ] = dayTimeXPSParam.Motion_Confirm_Window;
 8013aa8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013aaa:	b2da      	uxtb	r2, r3
 8013aac:	4b98      	ldr	r3, [pc, #608]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013aae:	70da      	strb	r2, [r3, #3]
	paramPage1 [ DT_MOTION_THRES ]       = dayTimeXPSParam.Motion_Threshhold;
 8013ab0:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8013ab4:	4b96      	ldr	r3, [pc, #600]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ab6:	711a      	strb	r2, [r3, #4]
	paramPage1 [ DT_MOTION_BLACKOUT_MSB ]    = dayTimeXPSParam.Motion_Blackout >> 8; //MSB
 8013ab8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013aba:	0a1b      	lsrs	r3, r3, #8
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	4b93      	ldr	r3, [pc, #588]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ac2:	715a      	strb	r2, [r3, #5]
	paramPage1 [ DT_MOTION_BLACKOUT_LSB ]    = dayTimeXPSParam.Motion_Blackout;
 8013ac4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013ac6:	b2da      	uxtb	r2, r3
 8013ac8:	4b91      	ldr	r3, [pc, #580]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013aca:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	paramPage1 [ DT_NO_MOTION_WINDOW ]   = dayTimeXPSParam.No_Motion_Detection_Window;
 8013ace:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013ad0:	b2da      	uxtb	r2, r3
 8013ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ad4:	719a      	strb	r2, [r3, #6]
	paramPage1 [ DT_NEAR_MOTION_THRES ]  = dayTimeXPSParam.Near_Motion_Threshhold;
 8013ad6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8013ada:	4b8d      	ldr	r3, [pc, #564]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013adc:	71da      	strb	r2, [r3, #7]
	paramPage1 [ NT_MOTION_CONFIRM_WINDOW ] = nightTimeXPSParam.Motion_Confirm_Window;
 8013ade:	8bbb      	ldrh	r3, [r7, #28]
 8013ae0:	b2da      	uxtb	r2, r3
 8013ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ae4:	721a      	strb	r2, [r3, #8]
	paramPage1 [ NT_MOTION_THRES ]       = nightTimeXPSParam.Motion_Threshhold;
 8013ae6:	7fba      	ldrb	r2, [r7, #30]
 8013ae8:	4b89      	ldr	r3, [pc, #548]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013aea:	725a      	strb	r2, [r3, #9]
	paramPage1 [ NT_MOTION_BLACKOUT_MSB ]    = nightTimeXPSParam.Motion_Blackout >> 8; //MSB
 8013aec:	8c3b      	ldrh	r3, [r7, #32]
 8013aee:	0a1b      	lsrs	r3, r3, #8
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	b2da      	uxtb	r2, r3
 8013af4:	4b86      	ldr	r3, [pc, #536]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013af6:	729a      	strb	r2, [r3, #10]
	paramPage1 [ NT_MOTION_BLACKOUT_LSB ]    = nightTimeXPSParam.Motion_Blackout;
 8013af8:	8c3b      	ldrh	r3, [r7, #32]
 8013afa:	b2da      	uxtb	r2, r3
 8013afc:	4b84      	ldr	r3, [pc, #528]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013afe:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	paramPage1 [ NT_NO_MOTION_WINDOW ]   = nightTimeXPSParam.No_Motion_Detection_Window;
 8013b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b04:	b2da      	uxtb	r2, r3
 8013b06:	4b82      	ldr	r3, [pc, #520]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b08:	72da      	strb	r2, [r3, #11]
	paramPage1 [ NT_NEAR_MOTION_THRES ]  = nightTimeXPSParam.Near_Motion_Threshhold;
 8013b0a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8013b0e:	4b80      	ldr	r3, [pc, #512]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b10:	731a      	strb	r2, [r3, #12]
	paramPage1 [ PIR_COOLDOWN_MSB ]      = pirXPSData.coolDown >> 8;   //MSB
 8013b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013b14:	0a1b      	lsrs	r3, r3, #8
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b1c:	735a      	strb	r2, [r3, #13]
	paramPage1 [ PIR_COOLDOWN_LSB ]      = pirXPSData.coolDown;        //LSB
 8013b1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8013b20:	b2da      	uxtb	r2, r3
 8013b22:	4b7b      	ldr	r3, [pc, #492]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b24:	739a      	strb	r2, [r3, #14]
	paramPage1 [ PIR_MODE]               = pirXPSData.mode;
 8013b26:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8013b2a:	4b79      	ldr	r3, [pc, #484]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	PRINTF("Setting Shadow Register PIR Mode to %d\r\n", paramPage1 [ PIR_MODE ]);
 8013b30:	4b77      	ldr	r3, [pc, #476]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013b36:	461a      	mov	r2, r3
 8013b38:	4976      	ldr	r1, [pc, #472]	@ (8013d14 <XPS_paramStore+0x2e4>)
 8013b3a:	2001      	movs	r0, #1
 8013b3c:	f7f3 f91a 	bl	8006d74 <TraceSend>

	paramPage1 [ HB_MODE ]             = Data_Ptr->heartBeatData.mode;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013b46:	f893 2138 	ldrb.w	r2, [r3, #312]	@ 0x138
 8013b4a:	4b71      	ldr	r3, [pc, #452]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b4c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	paramPage1 [ HB_INTERVAL_MSB ]     = Data_Ptr->heartBeatData.hbInterval >> 8;  //MSB
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013b56:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8013b5a:	0a1b      	lsrs	r3, r3, #8
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	b2da      	uxtb	r2, r3
 8013b60:	4b6b      	ldr	r3, [pc, #428]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b62:	73da      	strb	r2, [r3, #15]
	paramPage1 [ HB_INTERVAL_LSB ]     = Data_Ptr->heartBeatData.hbInterval;       //LSB
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013b6a:	f8b3 313a 	ldrh.w	r3, [r3, #314]	@ 0x13a
 8013b6e:	b2da      	uxtb	r2, r3
 8013b70:	4b67      	ldr	r3, [pc, #412]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b72:	741a      	strb	r2, [r3, #16]

	PRINTF("Setting Shadow Register HB Interval MSB to %d\r\n", paramPage1 [ HB_INTERVAL_MSB ]);
 8013b74:	4b66      	ldr	r3, [pc, #408]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b76:	7bdb      	ldrb	r3, [r3, #15]
 8013b78:	461a      	mov	r2, r3
 8013b7a:	4967      	ldr	r1, [pc, #412]	@ (8013d18 <XPS_paramStore+0x2e8>)
 8013b7c:	2001      	movs	r0, #1
 8013b7e:	f7f3 f8f9 	bl	8006d74 <TraceSend>
	PRINTF("Setting Shadow Register HB Interval LSB to %d\r\n", paramPage1 [ HB_INTERVAL_LSB ]);
 8013b82:	4b63      	ldr	r3, [pc, #396]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b84:	7c1b      	ldrb	r3, [r3, #16]
 8013b86:	461a      	mov	r2, r3
 8013b88:	4964      	ldr	r1, [pc, #400]	@ (8013d1c <XPS_paramStore+0x2ec>)
 8013b8a:	2001      	movs	r0, #1
 8013b8c:	f7f3 f8f2 	bl	8006d74 <TraceSend>

	GPS_PARAMETER_TYPE currentGpsParams;
	getGpsParameters(&currentGpsParams);
 8013b90:	f107 0310 	add.w	r3, r7, #16
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7f5 fe85 	bl	80098a4 <getGpsParameters>

	paramPage1 [ GPS_MODE ]            = currentGpsParams.mode;
 8013b9a:	7c3a      	ldrb	r2, [r7, #16]
 8013b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013b9e:	75da      	strb	r2, [r3, #23]
	paramPage1 [ GPS_INTERVAL ]        = currentGpsParams.gpsInterval;
 8013ba0:	8afb      	ldrh	r3, [r7, #22]
 8013ba2:	b2da      	uxtb	r2, r3
 8013ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ba6:	761a      	strb	r2, [r3, #24]
	//paramPage1 [ GPS_TIMESYNC_ENABLE ] = currentGpsParams.timeSyncEnable;
	paramPage1 [ GPS_GEO_MSB ]         = currentGpsParams.geofenceDistance>> 8;
 8013ba8:	8b3b      	ldrh	r3, [r7, #24]
 8013baa:	0a1b      	lsrs	r3, r3, #8
 8013bac:	b29b      	uxth	r3, r3
 8013bae:	b2da      	uxtb	r2, r3
 8013bb0:	4b57      	ldr	r3, [pc, #348]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bb2:	76da      	strb	r2, [r3, #27]
	paramPage1 [ GPS_GEO_LSB ]         = currentGpsParams.geofenceDistance;
 8013bb4:	8b3b      	ldrh	r3, [r7, #24]
 8013bb6:	b2da      	uxtb	r2, r3
 8013bb8:	4b55      	ldr	r3, [pc, #340]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bba:	771a      	strb	r2, [r3, #28]
	paramPage1 [ GPS_ALARM_SAMP_PER ]  = currentGpsParams.alarmSamplePeriod;
 8013bbc:	8a7b      	ldrh	r3, [r7, #18]
 8013bbe:	b2da      	uxtb	r2, r3
 8013bc0:	4b53      	ldr	r3, [pc, #332]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bc2:	775a      	strb	r2, [r3, #29]
	paramPage1 [ GPS_ALARM_TIME_MSB ]  = currentGpsParams.alarmTime >> 8;
 8013bc4:	8abb      	ldrh	r3, [r7, #20]
 8013bc6:	0a1b      	lsrs	r3, r3, #8
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	b2da      	uxtb	r2, r3
 8013bcc:	4b50      	ldr	r3, [pc, #320]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bce:	779a      	strb	r2, [r3, #30]
	paramPage1 [ GPS_ALARM_TIME_LSB ]  = currentGpsParams.alarmTime;
 8013bd0:	8abb      	ldrh	r3, [r7, #20]
 8013bd2:	b2da      	uxtb	r2, r3
 8013bd4:	4b4e      	ldr	r3, [pc, #312]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bd6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	paramPage1 [ GPS_MOVE_HYSTER ]     = currentGpsParams.movementHysteresis;
 8013bda:	8b7b      	ldrh	r3, [r7, #26]
 8013bdc:	b2da      	uxtb	r2, r3
 8013bde:	4b4c      	ldr	r3, [pc, #304]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013be0:	77da      	strb	r2, [r3, #31]
	paramPage1 [ LONG_INT_MSB ]        = longitudeInt >> 24;
 8013be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013be4:	0e1b      	lsrs	r3, r3, #24
 8013be6:	b2da      	uxtb	r2, r3
 8013be8:	4b49      	ldr	r3, [pc, #292]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bea:	f883 2020 	strb.w	r2, [r3, #32]
	paramPage1 [ LONG_INT_3B ]         = longitudeInt >> 16;
 8013bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013bf0:	0c1b      	lsrs	r3, r3, #16
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	4b46      	ldr	r3, [pc, #280]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	paramPage1 [ LONG_INT_2B ]         = longitudeInt >> 8;
 8013bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013bfc:	0a1b      	lsrs	r3, r3, #8
 8013bfe:	b2da      	uxtb	r2, r3
 8013c00:	4b43      	ldr	r3, [pc, #268]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c02:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	paramPage1 [ LONG_INT_LSB ]        = longitudeInt;
 8013c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c08:	b2da      	uxtb	r2, r3
 8013c0a:	4b41      	ldr	r3, [pc, #260]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c0c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	paramPage1 [ LAT_INT_MSB ]         = latitudeInt >> 24;
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	0e1b      	lsrs	r3, r3, #24
 8013c14:	b2da      	uxtb	r2, r3
 8013c16:	4b3e      	ldr	r3, [pc, #248]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	paramPage1 [ LAT_INT_3B ]          = latitudeInt >> 16;
 8013c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1e:	0c1b      	lsrs	r3, r3, #16
 8013c20:	b2da      	uxtb	r2, r3
 8013c22:	4b3b      	ldr	r3, [pc, #236]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	paramPage1 [ LAT_INT_2B ]          = latitudeInt >> 8;
 8013c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2a:	0a1b      	lsrs	r3, r3, #8
 8013c2c:	b2da      	uxtb	r2, r3
 8013c2e:	4b38      	ldr	r3, [pc, #224]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c30:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	paramPage1 [ LAT_INT_LSB ]         = latitudeInt;
 8013c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	4b35      	ldr	r3, [pc, #212]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c3a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

	BUSINESS_DATA_TYPE currentOperatingHours;
	getBusinessHours(&currentOperatingHours);
 8013c3e:	f107 0308 	add.w	r3, r7, #8
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7f0 f9fe 	bl	8004044 <getBusinessHours>

	paramPage1 [ BUS_DT_HOURS ]     = currentOperatingHours.dayTime.hours;
 8013c48:	7a7a      	ldrb	r2, [r7, #9]
 8013c4a:	4b31      	ldr	r3, [pc, #196]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	paramPage1 [ BUS_DT_MIN ]       = currentOperatingHours.dayTime.minutes;
 8013c50:	7aba      	ldrb	r2, [r7, #10]
 8013c52:	4b2f      	ldr	r3, [pc, #188]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c54:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	paramPage1 [ BUS_NT_HOURS ]     = currentOperatingHours.nightTime.hours;
 8013c58:	7afa      	ldrb	r2, [r7, #11]
 8013c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c5c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	paramPage1 [ BUS_NT_MIN ]       = currentOperatingHours.nightTime.minutes;
 8013c60:	7b3a      	ldrb	r2, [r7, #12]
 8013c62:	4b2b      	ldr	r3, [pc, #172]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c64:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	paramPage1 [ BUS_HOURS_ENABLE ] = currentOperatingHours.DayNightSwitchEnabled;
 8013c68:	7a3b      	ldrb	r3, [r7, #8]
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	4b28      	ldr	r3, [pc, #160]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c6e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	// KCS call getTempParameters
	paramPage1 [ ENV_SENSOR_SAMPLE_PERIOD ] = thSensorParams.samplePeriod;
 8013c72:	4b2b      	ldr	r3, [pc, #172]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013c74:	881b      	ldrh	r3, [r3, #0]
 8013c76:	b2da      	uxtb	r2, r3
 8013c78:	4b25      	ldr	r3, [pc, #148]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	paramPage1 [ ENV_SENSOR_WARMUP ] =        thSensorParams.sensorWarmUp;
 8013c7e:	4b28      	ldr	r3, [pc, #160]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013c80:	789a      	ldrb	r2, [r3, #2]
 8013c82:	4b23      	ldr	r3, [pc, #140]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c84:	745a      	strb	r2, [r3, #17]
	paramPage1 [ ENV_SENSOR_COOLDOWN ] =      thSensorParams.coolDownPeriod;
 8013c86:	4b26      	ldr	r3, [pc, #152]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013c88:	79da      	ldrb	r2, [r3, #7]
 8013c8a:	4b21      	ldr	r3, [pc, #132]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	paramPage1 [ ENV_SENSOR_CHARG_DISABLE_SET ] = thSensorParams.chargerDisableSetting;
 8013c90:	4b23      	ldr	r3, [pc, #140]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013c92:	7a1a      	ldrb	r2, [r3, #8]
 8013c94:	4b1e      	ldr	r3, [pc, #120]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013c96:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	paramPage1 [ ENV_SENSOR_ALARM_TIME ] =    thSensorParams.alarmTime;
 8013c9a:	4b21      	ldr	r3, [pc, #132]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013c9c:	889b      	ldrh	r3, [r3, #4]
 8013c9e:	b2da      	uxtb	r2, r3
 8013ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	paramPage1 [ ENV_SENSOR_ALARM_SAMPLE ] =  thSensorParams.alarmSamplePeriod;
 8013ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013ca8:	799a      	ldrb	r2, [r3, #6]
 8013caa:	4b19      	ldr	r3, [pc, #100]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	paramPage1 [ TEMP_MODE ] =    thSensorParams.temperature.mode;
 8013cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cb2:	7a5a      	ldrb	r2, [r3, #9]
 8013cb4:	4b16      	ldr	r3, [pc, #88]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
	paramPage1 [ TEMP_LOW_SET ] = thSensorParams.temperature.lowSet;
 8013cba:	4b19      	ldr	r3, [pc, #100]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cbc:	7a9a      	ldrb	r2, [r3, #10]
 8013cbe:	4b14      	ldr	r3, [pc, #80]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cc0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	paramPage1 [ TEMP_HI_SET ] =  thSensorParams.temperature.highSet;
 8013cc4:	4b16      	ldr	r3, [pc, #88]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cc6:	7ada      	ldrb	r2, [r3, #11]
 8013cc8:	4b11      	ldr	r3, [pc, #68]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cca:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	paramPage1 [ TEMP_HYSTER ] =  thSensorParams.temperature.hysteresis;
 8013cce:	4b14      	ldr	r3, [pc, #80]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cd0:	7b1a      	ldrb	r2, [r3, #12]
 8013cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cd4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	paramPage1 [ HUMD_MODE ] =    thSensorParams.humidity.mode;
 8013cd8:	4b11      	ldr	r3, [pc, #68]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cda:	7b5a      	ldrb	r2, [r3, #13]
 8013cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	paramPage1 [ HUMD_LOW_SET ] = thSensorParams.humidity.lowSet;
 8013ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013ce4:	7b9a      	ldrb	r2, [r3, #14]
 8013ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	paramPage1 [ HUMD_HI_SET ] =  thSensorParams.humidity.highSet;
 8013cec:	4b0c      	ldr	r3, [pc, #48]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cee:	7bda      	ldrb	r2, [r3, #15]
 8013cf0:	4b07      	ldr	r3, [pc, #28]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	paramPage1 [ HUMD_HYSTER ] =  thSensorParams.humidity.hysteresis;
 8013cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8013d20 <XPS_paramStore+0x2f0>)
 8013cf8:	7c1a      	ldrb	r2, [r3, #16]
 8013cfa:	4b05      	ldr	r3, [pc, #20]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	paramPage1 [ BZ_START_CYCLES ] = Data_Ptr->buzzerData.startCycles;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013d06:	f893 2121 	ldrb.w	r2, [r3, #289]	@ 0x121
 8013d0a:	4b01      	ldr	r3, [pc, #4]	@ (8013d10 <XPS_paramStore+0x2e0>)
 8013d0c:	751a      	strb	r2, [r3, #20]
 8013d0e:	e009      	b.n	8013d24 <XPS_paramStore+0x2f4>
 8013d10:	2007ce2c 	.word	0x2007ce2c
 8013d14:	0802fe64 	.word	0x0802fe64
 8013d18:	0802fe90 	.word	0x0802fe90
 8013d1c:	0802fec0 	.word	0x0802fec0
 8013d20:	2007cf8c 	.word	0x2007cf8c
	paramPage1 [ BZ_STOP_CYCLES ]  = Data_Ptr->buzzerData.stopCycles;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013d2a:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8013d2e:	4b36      	ldr	r3, [pc, #216]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d30:	755a      	strb	r2, [r3, #21]
	paramPage1 [ BZ_MODE ]         = Data_Ptr->buzzerData.mode;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013d38:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8013d3c:	4b32      	ldr	r3, [pc, #200]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d3e:	759a      	strb	r2, [r3, #22]

	// KCS call getACCELParameters
	getAccelParameters(&accParams);
 8013d40:	4832      	ldr	r0, [pc, #200]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d42:	f7ed fe4b 	bl	80019dc <getAccelParameters>

	paramPage1 [ ACC_MODE ] =   accParams.mode;
 8013d46:	4b31      	ldr	r3, [pc, #196]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d48:	781a      	ldrb	r2, [r3, #0]
 8013d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	paramPage1 [ ACC_RANGE ]  = accParams.range;
 8013d50:	4b2e      	ldr	r3, [pc, #184]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d52:	785a      	ldrb	r2, [r3, #1]
 8013d54:	4b2c      	ldr	r3, [pc, #176]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d56:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	paramPage1 [ ACC_THRESH_MSB ] = accParams.threshold >> 8;
 8013d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	0a1b      	lsrs	r3, r3, #8
 8013d60:	b2da      	uxtb	r2, r3
 8013d62:	4b29      	ldr	r3, [pc, #164]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	paramPage1 [ ACC_THRESH_LSB ] = accParams.threshold;
 8013d68:	4b28      	ldr	r3, [pc, #160]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d6a:	685b      	ldr	r3, [r3, #4]
 8013d6c:	b2da      	uxtb	r2, r3
 8013d6e:	4b26      	ldr	r3, [pc, #152]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d70:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	paramPage1 [ ACC_HYSTER_MSB ] = accParams.hysteresis >> 8;
 8013d74:	4b25      	ldr	r3, [pc, #148]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	0a1b      	lsrs	r3, r3, #8
 8013d7a:	b2da      	uxtb	r2, r3
 8013d7c:	4b22      	ldr	r3, [pc, #136]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	paramPage1 [ ACC_HYSTER_LSB ] = accParams.hysteresis;
 8013d82:	4b22      	ldr	r3, [pc, #136]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d84:	689b      	ldr	r3, [r3, #8]
 8013d86:	b2da      	uxtb	r2, r3
 8013d88:	4b1f      	ldr	r3, [pc, #124]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d8a:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
	paramPage1 [ ACC_MUTE_LSB ] = accParams.mutePeriod >> 8;
 8013d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013d90:	89db      	ldrh	r3, [r3, #14]
 8013d92:	0a1b      	lsrs	r3, r3, #8
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	b2da      	uxtb	r2, r3
 8013d98:	4b1b      	ldr	r3, [pc, #108]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013d9a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	paramPage1 [ ACC_MUTE_MSB ] = accParams.mutePeriod;
 8013d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8013e0c <XPS_paramStore+0x3dc>)
 8013da0:	89db      	ldrh	r3, [r3, #14]
 8013da2:	b2da      	uxtb	r2, r3
 8013da4:	4b18      	ldr	r3, [pc, #96]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013da6:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	paramPage1 [ DOWNLOAD_READY ] = Data_Ptr->Flash.fwDownloadRdy;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	785a      	ldrb	r2, [r3, #1]
 8013dae:	4b16      	ldr	r3, [pc, #88]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013db0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	getCameraParameters(&camParams);
 8013db4:	4816      	ldr	r0, [pc, #88]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013db6:	f7ed ffb7 	bl	8001d28 <getCameraParameters>

	paramPage1[CAMERA_MODE]                = camParams.mode;
 8013dba:	4b15      	ldr	r3, [pc, #84]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013dbc:	781a      	ldrb	r2, [r3, #0]
 8013dbe:	4b12      	ldr	r3, [pc, #72]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	paramPage1[CAMERA_PIC_INTERVAL]        = camParams.pictureInterval;
 8013dc4:	4b12      	ldr	r3, [pc, #72]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013dc6:	78da      	ldrb	r2, [r3, #3]
 8013dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013dca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	paramPage1[CAMERA_PIC_PER_EVENT]       = camParams.picturesPerEvent;
 8013dce:	4b10      	ldr	r3, [pc, #64]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013dd0:	789a      	ldrb	r2, [r3, #2]
 8013dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
	paramPage1[CAMERA_WARMUP]              = camParams.warmUp;
 8013dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013dda:	785a      	ldrb	r2, [r3, #1]
 8013ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013dde:	74da      	strb	r2, [r3, #19]
	paramPage1[CAMERA_PIC_SAMPLES_PER_DAY] = camParams.samplePicNumber;
 8013de0:	4b0b      	ldr	r3, [pc, #44]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013de2:	799a      	ldrb	r2, [r3, #6]
 8013de4:	4b08      	ldr	r3, [pc, #32]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013de6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	paramPage1[CAMERA_PIC_SAMPLE_HOUR]     = camParams.samplePictureTime.hours;
 8013dea:	4b09      	ldr	r3, [pc, #36]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013dec:	791a      	ldrb	r2, [r3, #4]
 8013dee:	4b06      	ldr	r3, [pc, #24]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013df0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	paramPage1[CAMERA_PIC_SAMPLE_MIN]      = camParams.samplePictureTime.minutes;
 8013df4:	4b06      	ldr	r3, [pc, #24]	@ (8013e10 <XPS_paramStore+0x3e0>)
 8013df6:	795a      	ldrb	r2, [r3, #5]
 8013df8:	4b03      	ldr	r3, [pc, #12]	@ (8013e08 <XPS_paramStore+0x3d8>)
 8013dfa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	//	paramPage1 [ CELL_MODE ] =   cell.mode;
	//	paramPage1 [ CELL_WARMUP ] = cell.warmUp;
	//paramPage1 [ HB_CAMERA_WARMUP ]    = Data_Ptr->heartBeatData.cameraWarmUp;

}
 8013dfe:	bf00      	nop
 8013e00:	3740      	adds	r7, #64	@ 0x40
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	2007ce2c 	.word	0x2007ce2c
 8013e0c:	2007cfa0 	.word	0x2007cfa0
 8013e10:	2007cfb0 	.word	0x2007cfb0

08013e14 <XPS_Picture_Save>:

void XPS_Picture_Save ( MEM_PTR *Data_Ptr )
{
 8013e14:	b480      	push	{r7}
 8013e16:	b083      	sub	sp, #12
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
//		XPS_COMMAND ( Data_Ptr );
//
//		Page++;
//	}
//	__NOP();
}
 8013e1c:	bf00      	nop
 8013e1e:	370c      	adds	r7, #12
 8013e20:	46bd      	mov	sp, r7
 8013e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e26:	4770      	bx	lr

08013e28 <XPS_COMMAND>:
 PREP_RESET	- prepares XPS to reset system
 TRIG_RESET	- resets XPS settings and memory
 RESET REQUIRES PRIOR PRE_RESET
 ******************************************************/
void XPS_COMMAND ( MEM_PTR *Data_Ptr )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
	Refresh_Watchdog;
 8013e30:	48a4      	ldr	r0, [pc, #656]	@ (80140c4 <XPS_COMMAND+0x29c>)
 8013e32:	f007 f9ce 	bl	801b1d2 <HAL_IWDG_Refresh>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <XPS_COMMAND+0x18>
 8013e3c:	f001 fcaa 	bl	8015794 <Error_Handler>

	XPS_Verify_Memory ( Data_Ptr );
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f000 fe2b 	bl	8014a9c <XPS_Verify_Memory>
	State = XPS_OK;
 8013e46:	4ba0      	ldr	r3, [pc, #640]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013e48:	2200      	movs	r2, #0
 8013e4a:	725a      	strb	r2, [r3, #9]
	if (State != XPS_OK && Command != SETTLE)
 8013e4c:	4b9e      	ldr	r3, [pc, #632]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013e4e:	7a5b      	ldrb	r3, [r3, #9]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d004      	beq.n	8013e5e <XPS_COMMAND+0x36>
 8013e54:	4b9c      	ldr	r3, [pc, #624]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013e56:	7a1b      	ldrb	r3, [r3, #8]
 8013e58:	2b07      	cmp	r3, #7
 8013e5a:	f040 8558 	bne.w	801490e <XPS_COMMAND+0xae6>
	{
		return;
	}

	XPS_IsBusy ( Data_Ptr );
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 fd5e 	bl	8014920 <XPS_IsBusy>

	// Configure Instruction Info
	OSPI_Setting.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8013e64:	4b99      	ldr	r3, [pc, #612]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e66:	2200      	movs	r2, #0
 8013e68:	601a      	str	r2, [r3, #0]
	OSPI_Setting.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8013e6a:	4b98      	ldr	r3, [pc, #608]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	60da      	str	r2, [r3, #12]
	OSPI_Setting.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8013e70:	4b96      	ldr	r3, [pc, #600]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e72:	2200      	movs	r2, #0
 8013e74:	611a      	str	r2, [r3, #16]
	// Disables Unused Settings
	OSPI_Setting.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8013e76:	4b95      	ldr	r3, [pc, #596]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e78:	2200      	movs	r2, #0
 8013e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	OSPI_Setting.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8013e7c:	4b93      	ldr	r3, [pc, #588]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e7e:	2200      	movs	r2, #0
 8013e80:	631a      	str	r2, [r3, #48]	@ 0x30
	OSPI_Setting.AlternateBytes = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8013e82:	4b92      	ldr	r3, [pc, #584]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e84:	2200      	movs	r2, #0
 8013e86:	629a      	str	r2, [r3, #40]	@ 0x28
	OSPI_Setting.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8013e88:	4b90      	ldr	r3, [pc, #576]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	641a      	str	r2, [r3, #64]	@ 0x40
	OSPI_Setting.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8013e8e:	4b8f      	ldr	r3, [pc, #572]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e90:	2200      	movs	r2, #0
 8013e92:	625a      	str	r2, [r3, #36]	@ 0x24
	OSPI_Setting.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8013e94:	4b8d      	ldr	r3, [pc, #564]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e96:	2200      	movs	r2, #0
 8013e98:	615a      	str	r2, [r3, #20]
	OSPI_Setting.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8013e9a:	4b8c      	ldr	r3, [pc, #560]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	64da      	str	r2, [r3, #76]	@ 0x4c

	switch (Command)
 8013ea0:	4b89      	ldr	r3, [pc, #548]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013ea2:	7a1b      	ldrb	r3, [r3, #8]
 8013ea4:	2b10      	cmp	r3, #16
 8013ea6:	f200 852a 	bhi.w	80148fe <XPS_COMMAND+0xad6>
 8013eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8013eb0 <XPS_COMMAND+0x88>)
 8013eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eb0:	08013fcf 	.word	0x08013fcf
 8013eb4:	08013f0b 	.word	0x08013f0b
 8013eb8:	0801425f 	.word	0x0801425f
 8013ebc:	080141cf 	.word	0x080141cf
 8013ec0:	08014153 	.word	0x08014153
 8013ec4:	08014369 	.word	0x08014369
 8013ec8:	080142e3 	.word	0x080142e3
 8013ecc:	08013ef5 	.word	0x08013ef5
 8013ed0:	0801480f 	.word	0x0801480f
 8013ed4:	08014879 	.word	0x08014879
 8013ed8:	08014395 	.word	0x08014395
 8013edc:	080146cb 	.word	0x080146cb
 8013ee0:	0801476b 	.word	0x0801476b
 8013ee4:	08014641 	.word	0x08014641
 8013ee8:	08014469 	.word	0x08014469
 8013eec:	08014539 	.word	0x08014539
 8013ef0:	080140dd 	.word	0x080140dd
	{
	case SETTLE:
		State = XPS_OK;
 8013ef4:	4b74      	ldr	r3, [pc, #464]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	725a      	strb	r2, [r3, #9]
		Command = CHIPID;
 8013efa:	4b73      	ldr	r3, [pc, #460]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013efc:	220c      	movs	r2, #12
 8013efe:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7ff ff91 	bl	8013e28 <XPS_COMMAND>
		return;
 8013f06:	f000 bd03 	b.w	8014910 <XPS_COMMAND+0xae8>
	case READ:
		//			if (QE)
		//			{
		OSPI_Setting.Instruction = XPS_ReadPage_DATA;	 // Command
 8013f0a:	4b70      	ldr	r3, [pc, #448]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f0c:	2203      	movs	r2, #3
 8013f0e:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8013f10:	4b6e      	ldr	r3, [pc, #440]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013f16:	61da      	str	r2, [r3, #28]
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8013f18:	4b6c      	ldr	r3, [pc, #432]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8013f1e:	621a      	str	r2, [r3, #32]
		OSPI_Setting.Address = ((Page * MEM_PAGE_SIZE + Shift));
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013f26:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013f2a:	021b      	lsls	r3, r3, #8
 8013f2c:	687a      	ldr	r2, [r7, #4]
 8013f2e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8013f32:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8013f36:	4413      	add	r3, r2
 8013f38:	4a64      	ldr	r2, [pc, #400]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f3a:	6193      	str	r3, [r2, #24]
		//OSPI_Setting.Address = 0xF;

		// Configure Packet/Message Info
		OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
 8013f3c:	4b63      	ldr	r3, [pc, #396]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f3e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013f42:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.DummyCycles = 0;
 8013f44:	4b61      	ldr	r3, [pc, #388]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f46:	2200      	movs	r2, #0
 8013f48:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.NbData = Size;
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013f50:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8013f54:	4a5d      	ldr	r2, [pc, #372]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f56:	63d3      	str	r3, [r2, #60]	@ 0x3c
		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8013f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013f5c:	495b      	ldr	r1, [pc, #364]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013f5e:	485c      	ldr	r0, [pc, #368]	@ (80140d0 <XPS_COMMAND+0x2a8>)
 8013f60:	f000 fd8a 	bl	8014a78 <OSPItest>
 8013f64:	4603      	mov	r3, r0
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00d      	beq.n	8013f86 <XPS_COMMAND+0x15e>
		{
			State = XPS_READ_CONFIG_ERR;
 8013f6a:	4b57      	ldr	r3, [pc, #348]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013f6c:	220e      	movs	r2, #14
 8013f6e:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8013f70:	4858      	ldr	r0, [pc, #352]	@ (80140d4 <XPS_COMMAND+0x2ac>)
 8013f72:	f7f2 fddb 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 8013f76:	4b54      	ldr	r3, [pc, #336]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013f78:	7a5b      	ldrb	r3, [r3, #9]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	4856      	ldr	r0, [pc, #344]	@ (80140d8 <XPS_COMMAND+0x2b0>)
 8013f7e:	f7f2 fdbd 	bl	8006afc <Log_End>
#endif

			return;
 8013f82:	f000 bcc5 	b.w	8014910 <XPS_COMMAND+0xae8>
		}
		if (HAL_OSPI_Receive ( &hospi1 , Memory , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8013f8c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8013f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8013f94:	4619      	mov	r1, r3
 8013f96:	484e      	ldr	r0, [pc, #312]	@ (80140d0 <XPS_COMMAND+0x2a8>)
 8013f98:	f007 fd02 	bl	801b9a0 <HAL_OSPI_Receive>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d00d      	beq.n	8013fbe <XPS_COMMAND+0x196>
		{
			State = XPS_READ_RECEIVE_ERR;
 8013fa2:	4b49      	ldr	r3, [pc, #292]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013fa4:	220f      	movs	r2, #15
 8013fa6:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8013fa8:	484a      	ldr	r0, [pc, #296]	@ (80140d4 <XPS_COMMAND+0x2ac>)
 8013faa:	f7f2 fdbf 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 8013fae:	4b46      	ldr	r3, [pc, #280]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013fb0:	7a5b      	ldrb	r3, [r3, #9]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	4848      	ldr	r0, [pc, #288]	@ (80140d8 <XPS_COMMAND+0x2b0>)
 8013fb6:	f7f2 fda1 	bl	8006afc <Log_End>
#endif

			return;
 8013fba:	f000 bca9 	b.w	8014910 <XPS_COMMAND+0xae8>
		}

#ifdef Log_Level_2
		Log_End ( LOG_STATE_RESULT , State );
 8013fbe:	4b42      	ldr	r3, [pc, #264]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013fc0:	7a5b      	ldrb	r3, [r3, #9]
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	4844      	ldr	r0, [pc, #272]	@ (80140d8 <XPS_COMMAND+0x2b0>)
 8013fc6:	f7f2 fd99 	bl	8006afc <Log_End>
#endif

		return;
 8013fca:	f000 bca1 	b.w	8014910 <XPS_COMMAND+0xae8>
		//			if (QE)
		//			{
		//				Command = ERASE;
		//				XPS_COMMAND ( Data_Ptr );

		Command = WRITE_ENABLE;
 8013fce:	4b3e      	ldr	r3, [pc, #248]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8013fd0:	220d      	movs	r2, #13
 8013fd2:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7ff ff27 	bl	8013e28 <XPS_COMMAND>

		OSPI_Setting.Instruction = XPS_PAGE_PROGRAM;
 8013fda:	4b3c      	ldr	r3, [pc, #240]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013fdc:	2202      	movs	r2, #2
 8013fde:	609a      	str	r2, [r3, #8]
		OSPI_Setting.InstructionMode = 	HAL_OSPI_INSTRUCTION_1_LINE;
 8013fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	60da      	str	r2, [r3, #12]
		OSPI_Setting.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8013fe6:	4b39      	ldr	r3, [pc, #228]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013fe8:	2200      	movs	r2, #0
 8013fea:	611a      	str	r2, [r3, #16]

		// Configure Address Info
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8013fec:	4b37      	ldr	r3, [pc, #220]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013ff2:	61da      	str	r2, [r3, #28]
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8013ff4:	4b35      	ldr	r3, [pc, #212]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8013ff6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8013ffa:	621a      	str	r2, [r3, #32]
		OSPI_Setting.Address = ((Page * MEM_PAGE_SIZE + Shift));
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014002:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8014006:	021b      	lsls	r3, r3, #8
 8014008:	687a      	ldr	r2, [r7, #4]
 801400a:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 801400e:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8014012:	4413      	add	r3, r2
 8014014:	4a2d      	ldr	r2, [pc, #180]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8014016:	6193      	str	r3, [r2, #24]
		//OSPI_Setting.Address = 0xF;

		// Configure Packet/Message Info
		OSPI_Setting.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8014018:	4b2c      	ldr	r3, [pc, #176]	@ (80140cc <XPS_COMMAND+0x2a4>)
 801401a:	2200      	movs	r2, #0
 801401c:	641a      	str	r2, [r3, #64]	@ 0x40
		OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
 801401e:	4b2b      	ldr	r3, [pc, #172]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8014020:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014024:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.DummyCycles = 0;
 8014026:	4b29      	ldr	r3, [pc, #164]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8014028:	2200      	movs	r2, #0
 801402a:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.NbData = Size;
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014032:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8014036:	4a25      	ldr	r2, [pc, #148]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8014038:	63d3      	str	r3, [r2, #60]	@ 0x3c

		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 801403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801403e:	4923      	ldr	r1, [pc, #140]	@ (80140cc <XPS_COMMAND+0x2a4>)
 8014040:	4823      	ldr	r0, [pc, #140]	@ (80140d0 <XPS_COMMAND+0x2a8>)
 8014042:	f000 fd19 	bl	8014a78 <OSPItest>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d00d      	beq.n	8014068 <XPS_COMMAND+0x240>
		{
			State = XPS_WRITE_CONFIG_ERR;
 801404c:	4b1e      	ldr	r3, [pc, #120]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 801404e:	2210      	movs	r2, #16
 8014050:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8014052:	4820      	ldr	r0, [pc, #128]	@ (80140d4 <XPS_COMMAND+0x2ac>)
 8014054:	f7f2 fd6a 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 8014058:	4b1b      	ldr	r3, [pc, #108]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 801405a:	7a5b      	ldrb	r3, [r3, #9]
 801405c:	4619      	mov	r1, r3
 801405e:	481e      	ldr	r0, [pc, #120]	@ (80140d8 <XPS_COMMAND+0x2b0>)
 8014060:	f7f2 fd4c 	bl	8006afc <Log_End>
#endif

			return;
 8014064:	f000 bc54 	b.w	8014910 <XPS_COMMAND+0xae8>
		}
		OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE );
 8014068:	f241 3288 	movw	r2, #5000	@ 0x1388
 801406c:	4917      	ldr	r1, [pc, #92]	@ (80140cc <XPS_COMMAND+0x2a4>)
 801406e:	4818      	ldr	r0, [pc, #96]	@ (80140d0 <XPS_COMMAND+0x2a8>)
 8014070:	f000 fd02 	bl	8014a78 <OSPItest>

		if (HAL_OSPI_Transmit ( &hospi1 , (Memory) ,  HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801407a:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 801407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014082:	4619      	mov	r1, r3
 8014084:	4812      	ldr	r0, [pc, #72]	@ (80140d0 <XPS_COMMAND+0x2a8>)
 8014086:	f007 fbfd 	bl	801b884 <HAL_OSPI_Transmit>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d00d      	beq.n	80140ac <XPS_COMMAND+0x284>
		{
			State = XPS_WRITE_SEND_ERR;
 8014090:	4b0d      	ldr	r3, [pc, #52]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 8014092:	2211      	movs	r2, #17
 8014094:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8014096:	480f      	ldr	r0, [pc, #60]	@ (80140d4 <XPS_COMMAND+0x2ac>)
 8014098:	f7f2 fd48 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 801409c:	4b0a      	ldr	r3, [pc, #40]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 801409e:	7a5b      	ldrb	r3, [r3, #9]
 80140a0:	4619      	mov	r1, r3
 80140a2:	480d      	ldr	r0, [pc, #52]	@ (80140d8 <XPS_COMMAND+0x2b0>)
 80140a4:	f7f2 fd2a 	bl	8006afc <Log_End>
#endif
			return;
 80140a8:	f000 bc32 	b.w	8014910 <XPS_COMMAND+0xae8>
		}
		WEL = 0;
 80140ac:	4b06      	ldr	r3, [pc, #24]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 80140ae:	2200      	movs	r2, #0
 80140b0:	705a      	strb	r2, [r3, #1]

#ifdef Log_Level_2
		Log_End ( LOG_STATE_RESULT , State );
 80140b2:	4b05      	ldr	r3, [pc, #20]	@ (80140c8 <XPS_COMMAND+0x2a0>)
 80140b4:	7a5b      	ldrb	r3, [r3, #9]
 80140b6:	4619      	mov	r1, r3
 80140b8:	4807      	ldr	r0, [pc, #28]	@ (80140d8 <XPS_COMMAND+0x2b0>)
 80140ba:	f7f2 fd1f 	bl	8006afc <Log_End>
#endif
		return;
 80140be:	f000 bc27 	b.w	8014910 <XPS_COMMAND+0xae8>
 80140c2:	bf00      	nop
 80140c4:	2007d0bc 	.word	0x2007d0bc
 80140c8:	2007cf2c 	.word	0x2007cf2c
 80140cc:	2007cf38 	.word	0x2007cf38
 80140d0:	2007d2e8 	.word	0x2007d2e8
 80140d4:	0802fef0 	.word	0x0802fef0
 80140d8:	0802fefc 	.word	0x0802fefc
		//#endif

		//			State = XPS_QUAD_ERR;
		return;
	case ERASE_FULL:
		Command = WRITE_ENABLE;
 80140dc:	4ba7      	ldr	r3, [pc, #668]	@ (801437c <XPS_COMMAND+0x554>)
 80140de:	220d      	movs	r2, #13
 80140e0:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f7ff fea0 	bl	8013e28 <XPS_COMMAND>

		// Based on size the instruction will change
		OSPI_Setting.Instruction = XPS_FULL_ERASE;
 80140e8:	4ba5      	ldr	r3, [pc, #660]	@ (8014380 <XPS_COMMAND+0x558>)
 80140ea:	2260      	movs	r2, #96	@ 0x60
 80140ec:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80140ee:	4ba4      	ldr	r3, [pc, #656]	@ (8014380 <XPS_COMMAND+0x558>)
 80140f0:	2200      	movs	r2, #0
 80140f2:	61da      	str	r2, [r3, #28]
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;  // change to 1 line
 80140f4:	4ba2      	ldr	r3, [pc, #648]	@ (8014380 <XPS_COMMAND+0x558>)
 80140f6:	2200      	movs	r2, #0
 80140f8:	621a      	str	r2, [r3, #32]
		//			OSPI_Setting.Address = ((Page * MEM_PAGE_SIZE) + Shift);
		OSPI_Setting.Address = 0x0U;
 80140fa:	4ba1      	ldr	r3, [pc, #644]	@ (8014380 <XPS_COMMAND+0x558>)
 80140fc:	2200      	movs	r2, #0
 80140fe:	619a      	str	r2, [r3, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 8014100:	4b9f      	ldr	r3, [pc, #636]	@ (8014380 <XPS_COMMAND+0x558>)
 8014102:	2200      	movs	r2, #0
 8014104:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.DummyCycles = 0;
 8014106:	4b9e      	ldr	r3, [pc, #632]	@ (8014380 <XPS_COMMAND+0x558>)
 8014108:	2200      	movs	r2, #0
 801410a:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.NbData = 0;
 801410c:	4b9c      	ldr	r3, [pc, #624]	@ (8014380 <XPS_COMMAND+0x558>)
 801410e:	2200      	movs	r2, #0
 8014110:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8014112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014116:	499a      	ldr	r1, [pc, #616]	@ (8014380 <XPS_COMMAND+0x558>)
 8014118:	489a      	ldr	r0, [pc, #616]	@ (8014384 <XPS_COMMAND+0x55c>)
 801411a:	f000 fcad 	bl	8014a78 <OSPItest>
 801411e:	4603      	mov	r3, r0
 8014120:	2b00      	cmp	r3, #0
 8014122:	d00c      	beq.n	801413e <XPS_COMMAND+0x316>
		{
			State = XPS_Erase_CONFIG_ERR;
 8014124:	4b95      	ldr	r3, [pc, #596]	@ (801437c <XPS_COMMAND+0x554>)
 8014126:	2212      	movs	r2, #18
 8014128:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 801412a:	4897      	ldr	r0, [pc, #604]	@ (8014388 <XPS_COMMAND+0x560>)
 801412c:	f7f2 fcfe 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 8014130:	4b92      	ldr	r3, [pc, #584]	@ (801437c <XPS_COMMAND+0x554>)
 8014132:	7a5b      	ldrb	r3, [r3, #9]
 8014134:	4619      	mov	r1, r3
 8014136:	4895      	ldr	r0, [pc, #596]	@ (801438c <XPS_COMMAND+0x564>)
 8014138:	f7f2 fce0 	bl	8006afc <Log_End>
#endif

			return;
 801413c:	e3e8      	b.n	8014910 <XPS_COMMAND+0xae8>
		}

#ifdef Log_Level_2
		Log_End ( LOG_STATE_RESULT , State );
 801413e:	4b8f      	ldr	r3, [pc, #572]	@ (801437c <XPS_COMMAND+0x554>)
 8014140:	7a5b      	ldrb	r3, [r3, #9]
 8014142:	4619      	mov	r1, r3
 8014144:	4891      	ldr	r0, [pc, #580]	@ (801438c <XPS_COMMAND+0x564>)
 8014146:	f7f2 fcd9 	bl	8006afc <Log_End>
#endif

		WEL = 0;
 801414a:	4b8c      	ldr	r3, [pc, #560]	@ (801437c <XPS_COMMAND+0x554>)
 801414c:	2200      	movs	r2, #0
 801414e:	705a      	strb	r2, [r3, #1]
		return;
 8014150:	e3de      	b.n	8014910 <XPS_COMMAND+0xae8>
	case ERASE:
		Command = WRITE_ENABLE;
 8014152:	4b8a      	ldr	r3, [pc, #552]	@ (801437c <XPS_COMMAND+0x554>)
 8014154:	220d      	movs	r2, #13
 8014156:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f7ff fe65 	bl	8013e28 <XPS_COMMAND>
		// KCS need to check for page overrun and other priorities
		// Based on size the instruction will change
		OSPI_Setting.Instruction = XPS_SECTOR_ERASE;
 801415e:	4b88      	ldr	r3, [pc, #544]	@ (8014380 <XPS_COMMAND+0x558>)
 8014160:	2220      	movs	r2, #32
 8014162:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;  // change this setting?? for bigger memory
 8014164:	4b86      	ldr	r3, [pc, #536]	@ (8014380 <XPS_COMMAND+0x558>)
 8014166:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801416a:	621a      	str	r2, [r3, #32]
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;	// change to 1 line
 801416c:	4b84      	ldr	r3, [pc, #528]	@ (8014380 <XPS_COMMAND+0x558>)
 801416e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014172:	61da      	str	r2, [r3, #28]
		OSPI_Setting.Address = ((Page * MEM_PAGE_SIZE) + Shift);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801417a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801417e:	021b      	lsls	r3, r3, #8
 8014180:	687a      	ldr	r2, [r7, #4]
 8014182:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8014186:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 801418a:	4413      	add	r3, r2
 801418c:	4a7c      	ldr	r2, [pc, #496]	@ (8014380 <XPS_COMMAND+0x558>)
 801418e:	6193      	str	r3, [r2, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 8014190:	4b7b      	ldr	r3, [pc, #492]	@ (8014380 <XPS_COMMAND+0x558>)
 8014192:	2200      	movs	r2, #0
 8014194:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.DummyCycles = 0;
 8014196:	4b7a      	ldr	r3, [pc, #488]	@ (8014380 <XPS_COMMAND+0x558>)
 8014198:	2200      	movs	r2, #0
 801419a:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.NbData = 0;
 801419c:	4b78      	ldr	r3, [pc, #480]	@ (8014380 <XPS_COMMAND+0x558>)
 801419e:	2200      	movs	r2, #0
 80141a0:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (HAL_OSPI_Command ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80141a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80141a6:	4976      	ldr	r1, [pc, #472]	@ (8014380 <XPS_COMMAND+0x558>)
 80141a8:	4876      	ldr	r0, [pc, #472]	@ (8014384 <XPS_COMMAND+0x55c>)
 80141aa:	f007 fadd 	bl	801b768 <HAL_OSPI_Command>
 80141ae:	4603      	mov	r3, r0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00c      	beq.n	80141ce <XPS_COMMAND+0x3a6>
		{
			State = XPS_Erase_CONFIG_ERR;
 80141b4:	4b71      	ldr	r3, [pc, #452]	@ (801437c <XPS_COMMAND+0x554>)
 80141b6:	2212      	movs	r2, #18
 80141b8:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 80141ba:	4873      	ldr	r0, [pc, #460]	@ (8014388 <XPS_COMMAND+0x560>)
 80141bc:	f7f2 fcb6 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 80141c0:	4b6e      	ldr	r3, [pc, #440]	@ (801437c <XPS_COMMAND+0x554>)
 80141c2:	7a5b      	ldrb	r3, [r3, #9]
 80141c4:	4619      	mov	r1, r3
 80141c6:	4871      	ldr	r0, [pc, #452]	@ (801438c <XPS_COMMAND+0x564>)
 80141c8:	f7f2 fc98 	bl	8006afc <Log_End>
#endif

			return;
 80141cc:	e3a0      	b.n	8014910 <XPS_COMMAND+0xae8>
		}


	case ERASE_32KB:
		Command = WRITE_ENABLE;
 80141ce:	4b6b      	ldr	r3, [pc, #428]	@ (801437c <XPS_COMMAND+0x554>)
 80141d0:	220d      	movs	r2, #13
 80141d2:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff fe27 	bl	8013e28 <XPS_COMMAND>

		// Based on size the instruction will change
		OSPI_Setting.Instruction = XPS_32KB_BLOCK_ERASE;
 80141da:	4b69      	ldr	r3, [pc, #420]	@ (8014380 <XPS_COMMAND+0x558>)
 80141dc:	2252      	movs	r2, #82	@ 0x52
 80141de:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80141e0:	4b67      	ldr	r3, [pc, #412]	@ (8014380 <XPS_COMMAND+0x558>)
 80141e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80141e6:	621a      	str	r2, [r3, #32]
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;	 // change to 1 line
 80141e8:	4b65      	ldr	r3, [pc, #404]	@ (8014380 <XPS_COMMAND+0x558>)
 80141ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80141ee:	61da      	str	r2, [r3, #28]
		OSPI_Setting.Address = ((Page * MEM_PAGE_SIZE) + Shift);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80141f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80141fa:	021b      	lsls	r3, r3, #8
 80141fc:	687a      	ldr	r2, [r7, #4]
 80141fe:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8014202:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8014206:	4413      	add	r3, r2
 8014208:	4a5d      	ldr	r2, [pc, #372]	@ (8014380 <XPS_COMMAND+0x558>)
 801420a:	6193      	str	r3, [r2, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 801420c:	4b5c      	ldr	r3, [pc, #368]	@ (8014380 <XPS_COMMAND+0x558>)
 801420e:	2200      	movs	r2, #0
 8014210:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.DummyCycles = 0;
 8014212:	4b5b      	ldr	r3, [pc, #364]	@ (8014380 <XPS_COMMAND+0x558>)
 8014214:	2200      	movs	r2, #0
 8014216:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.NbData = 0;
 8014218:	4b59      	ldr	r3, [pc, #356]	@ (8014380 <XPS_COMMAND+0x558>)
 801421a:	2200      	movs	r2, #0
 801421c:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 801421e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014222:	4957      	ldr	r1, [pc, #348]	@ (8014380 <XPS_COMMAND+0x558>)
 8014224:	4857      	ldr	r0, [pc, #348]	@ (8014384 <XPS_COMMAND+0x55c>)
 8014226:	f000 fc27 	bl	8014a78 <OSPItest>
 801422a:	4603      	mov	r3, r0
 801422c:	2b00      	cmp	r3, #0
 801422e:	d00c      	beq.n	801424a <XPS_COMMAND+0x422>
		{
			State = XPS_Erase_CONFIG_ERR;
 8014230:	4b52      	ldr	r3, [pc, #328]	@ (801437c <XPS_COMMAND+0x554>)
 8014232:	2212      	movs	r2, #18
 8014234:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8014236:	4854      	ldr	r0, [pc, #336]	@ (8014388 <XPS_COMMAND+0x560>)
 8014238:	f7f2 fc78 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 801423c:	4b4f      	ldr	r3, [pc, #316]	@ (801437c <XPS_COMMAND+0x554>)
 801423e:	7a5b      	ldrb	r3, [r3, #9]
 8014240:	4619      	mov	r1, r3
 8014242:	4852      	ldr	r0, [pc, #328]	@ (801438c <XPS_COMMAND+0x564>)
 8014244:	f7f2 fc5a 	bl	8006afc <Log_End>
#endif

			return;
 8014248:	e362      	b.n	8014910 <XPS_COMMAND+0xae8>
		}
		WEL = 0;
 801424a:	4b4c      	ldr	r3, [pc, #304]	@ (801437c <XPS_COMMAND+0x554>)
 801424c:	2200      	movs	r2, #0
 801424e:	705a      	strb	r2, [r3, #1]

#ifdef Log_Level_2
		Log_End ( LOG_STATE_RESULT , State );
 8014250:	4b4a      	ldr	r3, [pc, #296]	@ (801437c <XPS_COMMAND+0x554>)
 8014252:	7a5b      	ldrb	r3, [r3, #9]
 8014254:	4619      	mov	r1, r3
 8014256:	484d      	ldr	r0, [pc, #308]	@ (801438c <XPS_COMMAND+0x564>)
 8014258:	f7f2 fc50 	bl	8006afc <Log_End>
#endif

		return;
 801425c:	e358      	b.n	8014910 <XPS_COMMAND+0xae8>
	case ERASE_64KB:
		Command = WRITE_ENABLE;
 801425e:	4b47      	ldr	r3, [pc, #284]	@ (801437c <XPS_COMMAND+0x554>)
 8014260:	220d      	movs	r2, #13
 8014262:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7ff fddf 	bl	8013e28 <XPS_COMMAND>

		// Based on size the instruction will change
		OSPI_Setting.Instruction = XPS_64KB_BLOCK_ERASE;
 801426a:	4b45      	ldr	r3, [pc, #276]	@ (8014380 <XPS_COMMAND+0x558>)
 801426c:	22d8      	movs	r2, #216	@ 0xd8
 801426e:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8014270:	4b43      	ldr	r3, [pc, #268]	@ (8014380 <XPS_COMMAND+0x558>)
 8014272:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8014276:	621a      	str	r2, [r3, #32]
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;  // change to 1 line
 8014278:	4b41      	ldr	r3, [pc, #260]	@ (8014380 <XPS_COMMAND+0x558>)
 801427a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801427e:	61da      	str	r2, [r3, #28]
		OSPI_Setting.Address = ((Page * MEM_PAGE_SIZE) + Shift);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014286:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801428a:	021b      	lsls	r3, r3, #8
 801428c:	687a      	ldr	r2, [r7, #4]
 801428e:	f502 3274 	add.w	r2, r2, #249856	@ 0x3d000
 8014292:	f892 2114 	ldrb.w	r2, [r2, #276]	@ 0x114
 8014296:	4413      	add	r3, r2
 8014298:	4a39      	ldr	r2, [pc, #228]	@ (8014380 <XPS_COMMAND+0x558>)
 801429a:	6193      	str	r3, [r2, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 801429c:	4b38      	ldr	r3, [pc, #224]	@ (8014380 <XPS_COMMAND+0x558>)
 801429e:	2200      	movs	r2, #0
 80142a0:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.DummyCycles = 0;
 80142a2:	4b37      	ldr	r3, [pc, #220]	@ (8014380 <XPS_COMMAND+0x558>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.NbData = 0;
 80142a8:	4b35      	ldr	r3, [pc, #212]	@ (8014380 <XPS_COMMAND+0x558>)
 80142aa:	2200      	movs	r2, #0
 80142ac:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80142ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80142b2:	4933      	ldr	r1, [pc, #204]	@ (8014380 <XPS_COMMAND+0x558>)
 80142b4:	4833      	ldr	r0, [pc, #204]	@ (8014384 <XPS_COMMAND+0x55c>)
 80142b6:	f000 fbdf 	bl	8014a78 <OSPItest>
 80142ba:	4603      	mov	r3, r0
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d00c      	beq.n	80142da <XPS_COMMAND+0x4b2>
		{
			State = XPS_Erase_CONFIG_ERR;
 80142c0:	4b2e      	ldr	r3, [pc, #184]	@ (801437c <XPS_COMMAND+0x554>)
 80142c2:	2212      	movs	r2, #18
 80142c4:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 80142c6:	4830      	ldr	r0, [pc, #192]	@ (8014388 <XPS_COMMAND+0x560>)
 80142c8:	f7f2 fc30 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 80142cc:	4b2b      	ldr	r3, [pc, #172]	@ (801437c <XPS_COMMAND+0x554>)
 80142ce:	7a5b      	ldrb	r3, [r3, #9]
 80142d0:	4619      	mov	r1, r3
 80142d2:	482e      	ldr	r0, [pc, #184]	@ (801438c <XPS_COMMAND+0x564>)
 80142d4:	f7f2 fc12 	bl	8006afc <Log_End>
#endif

			return;
 80142d8:	e31a      	b.n	8014910 <XPS_COMMAND+0xae8>
		}
		WEL = 0;
 80142da:	4b28      	ldr	r3, [pc, #160]	@ (801437c <XPS_COMMAND+0x554>)
 80142dc:	2200      	movs	r2, #0
 80142de:	705a      	strb	r2, [r3, #1]
		return;
 80142e0:	e316      	b.n	8014910 <XPS_COMMAND+0xae8>
	case SLEEP:

		OSPI_Setting.Instruction = XPS_POWERDOWN;
 80142e2:	4b27      	ldr	r3, [pc, #156]	@ (8014380 <XPS_COMMAND+0x558>)
 80142e4:	22b9      	movs	r2, #185	@ 0xb9
 80142e6:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80142e8:	4b25      	ldr	r3, [pc, #148]	@ (8014380 <XPS_COMMAND+0x558>)
 80142ea:	2200      	movs	r2, #0
 80142ec:	61da      	str	r2, [r3, #28]
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 80142ee:	4b24      	ldr	r3, [pc, #144]	@ (8014380 <XPS_COMMAND+0x558>)
 80142f0:	2200      	movs	r2, #0
 80142f2:	621a      	str	r2, [r3, #32]
		OSPI_Setting.Address = 0x0U;
 80142f4:	4b22      	ldr	r3, [pc, #136]	@ (8014380 <XPS_COMMAND+0x558>)
 80142f6:	2200      	movs	r2, #0
 80142f8:	619a      	str	r2, [r3, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DummyCycles = 0;
 80142fa:	4b21      	ldr	r3, [pc, #132]	@ (8014380 <XPS_COMMAND+0x558>)
 80142fc:	2200      	movs	r2, #0
 80142fe:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 8014300:	4b1f      	ldr	r3, [pc, #124]	@ (8014380 <XPS_COMMAND+0x558>)
 8014302:	2200      	movs	r2, #0
 8014304:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.NbData = 0;
 8014306:	4b1e      	ldr	r3, [pc, #120]	@ (8014380 <XPS_COMMAND+0x558>)
 8014308:	2200      	movs	r2, #0
 801430a:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 801430c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014310:	491b      	ldr	r1, [pc, #108]	@ (8014380 <XPS_COMMAND+0x558>)
 8014312:	481c      	ldr	r0, [pc, #112]	@ (8014384 <XPS_COMMAND+0x55c>)
 8014314:	f000 fbb0 	bl	8014a78 <OSPItest>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d00c      	beq.n	8014338 <XPS_COMMAND+0x510>
		{
			State = XPS_SLEEP_CONFIG_ERR;
 801431e:	4b17      	ldr	r3, [pc, #92]	@ (801437c <XPS_COMMAND+0x554>)
 8014320:	2216      	movs	r2, #22
 8014322:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8014324:	4818      	ldr	r0, [pc, #96]	@ (8014388 <XPS_COMMAND+0x560>)
 8014326:	f7f2 fc01 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 801432a:	4b14      	ldr	r3, [pc, #80]	@ (801437c <XPS_COMMAND+0x554>)
 801432c:	7a5b      	ldrb	r3, [r3, #9]
 801432e:	4619      	mov	r1, r3
 8014330:	4816      	ldr	r0, [pc, #88]	@ (801438c <XPS_COMMAND+0x564>)
 8014332:	f7f2 fbe3 	bl	8006afc <Log_End>
#endif

			return;
 8014336:	e2eb      	b.n	8014910 <XPS_COMMAND+0xae8>
		}
		HAL_Delay ( 1 ); // Give a little time to sleep
 8014338:	2001      	movs	r0, #1
 801433a:	f002 f8a3 	bl	8016484 <HAL_Delay>
		Sleep = 1;
 801433e:	4b0f      	ldr	r3, [pc, #60]	@ (801437c <XPS_COMMAND+0x554>)
 8014340:	2201      	movs	r2, #1
 8014342:	719a      	strb	r2, [r3, #6]

#ifdef Log_Level_2
		Log_End ( LOG_STATE_RESULT , State );
 8014344:	4b0d      	ldr	r3, [pc, #52]	@ (801437c <XPS_COMMAND+0x554>)
 8014346:	7a5b      	ldrb	r3, [r3, #9]
 8014348:	4619      	mov	r1, r3
 801434a:	4810      	ldr	r0, [pc, #64]	@ (801438c <XPS_COMMAND+0x564>)
 801434c:	f7f2 fbd6 	bl	8006afc <Log_End>
#endif
		HAL_Delay(8);
 8014350:	2008      	movs	r0, #8
 8014352:	f002 f897 	bl	8016484 <HAL_Delay>
		HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 8014356:	2201      	movs	r2, #1
 8014358:	2110      	movs	r1, #16
 801435a:	480d      	ldr	r0, [pc, #52]	@ (8014390 <XPS_COMMAND+0x568>)
 801435c:	f005 ff1a 	bl	801a194 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 8014360:	2008      	movs	r0, #8
 8014362:	f002 f88f 	bl	8016484 <HAL_Delay>

		return;
 8014366:	e2d3      	b.n	8014910 <XPS_COMMAND+0xae8>
	case WAKE:
		Command = CHIPID;
 8014368:	4b04      	ldr	r3, [pc, #16]	@ (801437c <XPS_COMMAND+0x554>)
 801436a:	220c      	movs	r2, #12
 801436c:	721a      	strb	r2, [r3, #8]
		XPS_COMMAND ( Data_Ptr );
 801436e:	6878      	ldr	r0, [r7, #4]
 8014370:	f7ff fd5a 	bl	8013e28 <XPS_COMMAND>
		Sleep = 0;
 8014374:	4b01      	ldr	r3, [pc, #4]	@ (801437c <XPS_COMMAND+0x554>)
 8014376:	2200      	movs	r2, #0
 8014378:	719a      	strb	r2, [r3, #6]
		return;
 801437a:	e2c9      	b.n	8014910 <XPS_COMMAND+0xae8>
 801437c:	2007cf2c 	.word	0x2007cf2c
 8014380:	2007cf38 	.word	0x2007cf38
 8014384:	2007d2e8 	.word	0x2007d2e8
 8014388:	0802fef0 	.word	0x0802fef0
 801438c:	0802fefc 	.word	0x0802fefc
 8014390:	42020000 	.word	0x42020000
	case READ_STAT_REG:
		// Based on register instruction will change
		switch (Type)
 8014394:	4ba4      	ldr	r3, [pc, #656]	@ (8014628 <XPS_COMMAND+0x800>)
 8014396:	79db      	ldrb	r3, [r3, #7]
 8014398:	2b03      	cmp	r3, #3
 801439a:	d00e      	beq.n	80143ba <XPS_COMMAND+0x592>
 801439c:	2b03      	cmp	r3, #3
 801439e:	dc10      	bgt.n	80143c2 <XPS_COMMAND+0x59a>
 80143a0:	2b01      	cmp	r3, #1
 80143a2:	d002      	beq.n	80143aa <XPS_COMMAND+0x582>
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	d004      	beq.n	80143b2 <XPS_COMMAND+0x58a>
 80143a8:	e00b      	b.n	80143c2 <XPS_COMMAND+0x59a>
		{
		case 1:
			OSPI_Setting.Instruction = XPS_READ_SR1;
 80143aa:	4ba0      	ldr	r3, [pc, #640]	@ (801462c <XPS_COMMAND+0x804>)
 80143ac:	2205      	movs	r2, #5
 80143ae:	609a      	str	r2, [r3, #8]
			break;
 80143b0:	e00b      	b.n	80143ca <XPS_COMMAND+0x5a2>
		case 2:
			OSPI_Setting.Instruction = XPS_READ_SR2;
 80143b2:	4b9e      	ldr	r3, [pc, #632]	@ (801462c <XPS_COMMAND+0x804>)
 80143b4:	2235      	movs	r2, #53	@ 0x35
 80143b6:	609a      	str	r2, [r3, #8]
			break;
 80143b8:	e007      	b.n	80143ca <XPS_COMMAND+0x5a2>
		case 3:
			OSPI_Setting.Instruction = XPS_READ_SR3;
 80143ba:	4b9c      	ldr	r3, [pc, #624]	@ (801462c <XPS_COMMAND+0x804>)
 80143bc:	2215      	movs	r2, #21
 80143be:	609a      	str	r2, [r3, #8]
			break;
 80143c0:	e003      	b.n	80143ca <XPS_COMMAND+0x5a2>
		default:
			State = XPS_PARAM_ERR;
 80143c2:	4b99      	ldr	r3, [pc, #612]	@ (8014628 <XPS_COMMAND+0x800>)
 80143c4:	2204      	movs	r2, #4
 80143c6:	725a      	strb	r2, [r3, #9]
			return;
 80143c8:	e2a2      	b.n	8014910 <XPS_COMMAND+0xae8>
		//			OSPI_Setting.DummyCycles = 0;
		//			OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
		//			OSPI_Setting.NbData = 1;

		// Configure Address Info
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80143ca:	4b98      	ldr	r3, [pc, #608]	@ (801462c <XPS_COMMAND+0x804>)
 80143cc:	2200      	movs	r2, #0
 80143ce:	61da      	str	r2, [r3, #28]
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 80143d0:	4b96      	ldr	r3, [pc, #600]	@ (801462c <XPS_COMMAND+0x804>)
 80143d2:	2200      	movs	r2, #0
 80143d4:	621a      	str	r2, [r3, #32]
		OSPI_Setting.Address = 0x0U;
 80143d6:	4b95      	ldr	r3, [pc, #596]	@ (801462c <XPS_COMMAND+0x804>)
 80143d8:	2200      	movs	r2, #0
 80143da:	619a      	str	r2, [r3, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DummyCycles = 0;
 80143dc:	4b93      	ldr	r3, [pc, #588]	@ (801462c <XPS_COMMAND+0x804>)
 80143de:	2200      	movs	r2, #0
 80143e0:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 80143e2:	4b92      	ldr	r3, [pc, #584]	@ (801462c <XPS_COMMAND+0x804>)
 80143e4:	2200      	movs	r2, #0
 80143e6:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.NbData = 0;
 80143e8:	4b90      	ldr	r3, [pc, #576]	@ (801462c <XPS_COMMAND+0x804>)
 80143ea:	2200      	movs	r2, #0
 80143ec:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80143ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80143f2:	498e      	ldr	r1, [pc, #568]	@ (801462c <XPS_COMMAND+0x804>)
 80143f4:	488e      	ldr	r0, [pc, #568]	@ (8014630 <XPS_COMMAND+0x808>)
 80143f6:	f000 fb3f 	bl	8014a78 <OSPItest>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f000 8287 	beq.w	8014910 <XPS_COMMAND+0xae8>
		{
			State = XPS_STATE_CONFIG_ERR;
 8014402:	4b89      	ldr	r3, [pc, #548]	@ (8014628 <XPS_COMMAND+0x800>)
 8014404:	2213      	movs	r2, #19
 8014406:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
			Write_Log ( LOG_ERROR );
 8014408:	488a      	ldr	r0, [pc, #552]	@ (8014634 <XPS_COMMAND+0x80c>)
 801440a:	f7f2 fb8f 	bl	8006b2c <Write_Log>
			Log_End ( LOG_STATE_RESULT , State );
 801440e:	4b86      	ldr	r3, [pc, #536]	@ (8014628 <XPS_COMMAND+0x800>)
 8014410:	7a5b      	ldrb	r3, [r3, #9]
 8014412:	4619      	mov	r1, r3
 8014414:	4888      	ldr	r0, [pc, #544]	@ (8014638 <XPS_COMMAND+0x810>)
 8014416:	f7f2 fb71 	bl	8006afc <Log_End>
			//
			//				return;
			//			}
			//		if (Type == 3)
			//		{	setCSRDY(true);
			if (HAL_OSPI_Receive ( &hospi1 , &(Memory [ XPS_FLASH_SIZE + 1 ]) ,
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 8014420:	3369      	adds	r3, #105	@ 0x69
 8014422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014426:	4619      	mov	r1, r3
 8014428:	4881      	ldr	r0, [pc, #516]	@ (8014630 <XPS_COMMAND+0x808>)
 801442a:	f007 fab9 	bl	801b9a0 <HAL_OSPI_Receive>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00c      	beq.n	801444e <XPS_COMMAND+0x626>
					HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
			{
				State = XPS_STATE_RECEIVE_ERR;
 8014434:	4b7c      	ldr	r3, [pc, #496]	@ (8014628 <XPS_COMMAND+0x800>)
 8014436:	2214      	movs	r2, #20
 8014438:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
				Write_Log ( LOG_ERROR );
 801443a:	487e      	ldr	r0, [pc, #504]	@ (8014634 <XPS_COMMAND+0x80c>)
 801443c:	f7f2 fb76 	bl	8006b2c <Write_Log>
				Log_End ( LOG_STATE_RESULT , State );
 8014440:	4b79      	ldr	r3, [pc, #484]	@ (8014628 <XPS_COMMAND+0x800>)
 8014442:	7a5b      	ldrb	r3, [r3, #9]
 8014444:	4619      	mov	r1, r3
 8014446:	487c      	ldr	r0, [pc, #496]	@ (8014638 <XPS_COMMAND+0x810>)
 8014448:	f7f2 fb58 	bl	8006afc <Log_End>
#endif

				return;
 801444c:	e260      	b.n	8014910 <XPS_COMMAND+0xae8>
			}
			//		}

#ifdef Log_Level_2
			Log_Insert ( LOG_STATE_RESULT , State );
 801444e:	4b76      	ldr	r3, [pc, #472]	@ (8014628 <XPS_COMMAND+0x800>)
 8014450:	7a5b      	ldrb	r3, [r3, #9]
 8014452:	4619      	mov	r1, r3
 8014454:	4878      	ldr	r0, [pc, #480]	@ (8014638 <XPS_COMMAND+0x810>)
 8014456:	f7f2 fb39 	bl	8006acc <Log_Insert>
			Log_End ( LOG_TYPE_ID , Type );
 801445a:	4b73      	ldr	r3, [pc, #460]	@ (8014628 <XPS_COMMAND+0x800>)
 801445c:	79db      	ldrb	r3, [r3, #7]
 801445e:	4619      	mov	r1, r3
 8014460:	4876      	ldr	r0, [pc, #472]	@ (801463c <XPS_COMMAND+0x814>)
 8014462:	f7f2 fb4b 	bl	8006afc <Log_End>
#endif

			return;
 8014466:	e253      	b.n	8014910 <XPS_COMMAND+0xae8>
		case WRITE_STAT_REG:
			// Based on register the instruction will change
			switch (Type)
 8014468:	4b6f      	ldr	r3, [pc, #444]	@ (8014628 <XPS_COMMAND+0x800>)
 801446a:	79db      	ldrb	r3, [r3, #7]
 801446c:	2b03      	cmp	r3, #3
 801446e:	d00e      	beq.n	801448e <XPS_COMMAND+0x666>
 8014470:	2b03      	cmp	r3, #3
 8014472:	dc10      	bgt.n	8014496 <XPS_COMMAND+0x66e>
 8014474:	2b01      	cmp	r3, #1
 8014476:	d002      	beq.n	801447e <XPS_COMMAND+0x656>
 8014478:	2b02      	cmp	r3, #2
 801447a:	d004      	beq.n	8014486 <XPS_COMMAND+0x65e>
 801447c:	e00b      	b.n	8014496 <XPS_COMMAND+0x66e>
			{
			case 1:
				OSPI_Setting.Instruction = XPS_WRITE_SR1;
 801447e:	4b6b      	ldr	r3, [pc, #428]	@ (801462c <XPS_COMMAND+0x804>)
 8014480:	2201      	movs	r2, #1
 8014482:	609a      	str	r2, [r3, #8]
				break;
 8014484:	e00b      	b.n	801449e <XPS_COMMAND+0x676>
			case 2:
				OSPI_Setting.Instruction = XPS_WRITE_SR2;
 8014486:	4b69      	ldr	r3, [pc, #420]	@ (801462c <XPS_COMMAND+0x804>)
 8014488:	2231      	movs	r2, #49	@ 0x31
 801448a:	609a      	str	r2, [r3, #8]
				break;
 801448c:	e007      	b.n	801449e <XPS_COMMAND+0x676>
			case 3:
				OSPI_Setting.Instruction = XPS_WRITE_SR3;
 801448e:	4b67      	ldr	r3, [pc, #412]	@ (801462c <XPS_COMMAND+0x804>)
 8014490:	2211      	movs	r2, #17
 8014492:	609a      	str	r2, [r3, #8]
				break;
 8014494:	e003      	b.n	801449e <XPS_COMMAND+0x676>
			default:
				State = XPS_PARAM_ERR;
 8014496:	4b64      	ldr	r3, [pc, #400]	@ (8014628 <XPS_COMMAND+0x800>)
 8014498:	2204      	movs	r2, #4
 801449a:	725a      	strb	r2, [r3, #9]
				return;
 801449c:	e238      	b.n	8014910 <XPS_COMMAND+0xae8>
			}
			// Configure Address Info
			OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 801449e:	4b63      	ldr	r3, [pc, #396]	@ (801462c <XPS_COMMAND+0x804>)
 80144a0:	2200      	movs	r2, #0
 80144a2:	61da      	str	r2, [r3, #28]
			OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 80144a4:	4b61      	ldr	r3, [pc, #388]	@ (801462c <XPS_COMMAND+0x804>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	621a      	str	r2, [r3, #32]
			OSPI_Setting.Address = 0x0U;
 80144aa:	4b60      	ldr	r3, [pc, #384]	@ (801462c <XPS_COMMAND+0x804>)
 80144ac:	2200      	movs	r2, #0
 80144ae:	619a      	str	r2, [r3, #24]
			// Configure Packet/Message Info
			OSPI_Setting.DummyCycles = 0;
 80144b0:	4b5e      	ldr	r3, [pc, #376]	@ (801462c <XPS_COMMAND+0x804>)
 80144b2:	2200      	movs	r2, #0
 80144b4:	645a      	str	r2, [r3, #68]	@ 0x44
			OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
 80144b6:	4b5d      	ldr	r3, [pc, #372]	@ (801462c <XPS_COMMAND+0x804>)
 80144b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80144bc:	639a      	str	r2, [r3, #56]	@ 0x38
			OSPI_Setting.NbData = 1;
 80144be:	4b5b      	ldr	r3, [pc, #364]	@ (801462c <XPS_COMMAND+0x804>)
 80144c0:	2201      	movs	r2, #1
 80144c2:	63da      	str	r2, [r3, #60]	@ 0x3c

			if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80144c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80144c8:	4958      	ldr	r1, [pc, #352]	@ (801462c <XPS_COMMAND+0x804>)
 80144ca:	4859      	ldr	r0, [pc, #356]	@ (8014630 <XPS_COMMAND+0x808>)
 80144cc:	f000 fad4 	bl	8014a78 <OSPItest>
 80144d0:	4603      	mov	r3, r0
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d00c      	beq.n	80144f0 <XPS_COMMAND+0x6c8>
			{
				State = XPS_SPI_CONFIG_ERR;
 80144d6:	4b54      	ldr	r3, [pc, #336]	@ (8014628 <XPS_COMMAND+0x800>)
 80144d8:	2209      	movs	r2, #9
 80144da:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
				Write_Log ( LOG_ERROR );
 80144dc:	4855      	ldr	r0, [pc, #340]	@ (8014634 <XPS_COMMAND+0x80c>)
 80144de:	f7f2 fb25 	bl	8006b2c <Write_Log>
				Log_End ( LOG_STATE_RESULT , State );
 80144e2:	4b51      	ldr	r3, [pc, #324]	@ (8014628 <XPS_COMMAND+0x800>)
 80144e4:	7a5b      	ldrb	r3, [r3, #9]
 80144e6:	4619      	mov	r1, r3
 80144e8:	4853      	ldr	r0, [pc, #332]	@ (8014638 <XPS_COMMAND+0x810>)
 80144ea:	f7f2 fb07 	bl	8006afc <Log_End>
#endif

				return;
 80144ee:	e20f      	b.n	8014910 <XPS_COMMAND+0xae8>
			}
			if (HAL_OSPI_Transmit ( &hospi1 , &(Memory [ XPS_FLASH_SIZE + 1 ]) ,
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 80144f6:	3369      	adds	r3, #105	@ 0x69
 80144f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80144fc:	4619      	mov	r1, r3
 80144fe:	484c      	ldr	r0, [pc, #304]	@ (8014630 <XPS_COMMAND+0x808>)
 8014500:	f007 f9c0 	bl	801b884 <HAL_OSPI_Transmit>
 8014504:	4603      	mov	r3, r0
 8014506:	2b00      	cmp	r3, #0
 8014508:	d00c      	beq.n	8014524 <XPS_COMMAND+0x6fc>
					HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
			{
				State = XPS_SPI_SEND_ERR;
 801450a:	4b47      	ldr	r3, [pc, #284]	@ (8014628 <XPS_COMMAND+0x800>)
 801450c:	220b      	movs	r2, #11
 801450e:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
				Write_Log ( LOG_ERROR );
 8014510:	4848      	ldr	r0, [pc, #288]	@ (8014634 <XPS_COMMAND+0x80c>)
 8014512:	f7f2 fb0b 	bl	8006b2c <Write_Log>
				Log_End ( LOG_STATE_RESULT , State );
 8014516:	4b44      	ldr	r3, [pc, #272]	@ (8014628 <XPS_COMMAND+0x800>)
 8014518:	7a5b      	ldrb	r3, [r3, #9]
 801451a:	4619      	mov	r1, r3
 801451c:	4846      	ldr	r0, [pc, #280]	@ (8014638 <XPS_COMMAND+0x810>)
 801451e:	f7f2 faed 	bl	8006afc <Log_End>
#endif

				return;
 8014522:	e1f5      	b.n	8014910 <XPS_COMMAND+0xae8>
			}

			WEL = 0;
 8014524:	4b40      	ldr	r3, [pc, #256]	@ (8014628 <XPS_COMMAND+0x800>)
 8014526:	2200      	movs	r2, #0
 8014528:	705a      	strb	r2, [r3, #1]

#ifdef Log_Level_2
			Log_End ( LOG_STATE_RESULT , State );
 801452a:	4b3f      	ldr	r3, [pc, #252]	@ (8014628 <XPS_COMMAND+0x800>)
 801452c:	7a5b      	ldrb	r3, [r3, #9]
 801452e:	4619      	mov	r1, r3
 8014530:	4841      	ldr	r0, [pc, #260]	@ (8014638 <XPS_COMMAND+0x810>)
 8014532:	f7f2 fae3 	bl	8006afc <Log_End>
#endif

			return;
 8014536:	e1eb      	b.n	8014910 <XPS_COMMAND+0xae8>
			case READ_STAT_STRCT:
				//		setCSRDY(false);
				// first portion
				Type = 1;
 8014538:	4b3b      	ldr	r3, [pc, #236]	@ (8014628 <XPS_COMMAND+0x800>)
 801453a:	2201      	movs	r2, #1
 801453c:	71da      	strb	r2, [r3, #7]
				Command = READ_STAT_REG;
 801453e:	4b3a      	ldr	r3, [pc, #232]	@ (8014628 <XPS_COMMAND+0x800>)
 8014540:	220a      	movs	r2, #10
 8014542:	721a      	strb	r2, [r3, #8]
				XPS_COMMAND ( Data_Ptr );
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f7ff fc6f 	bl	8013e28 <XPS_COMMAND>
				Busy = (Memory [ XPS_FLASH_SIZE + 1 ]) & 0b1;
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014550:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 8014554:	f003 0301 	and.w	r3, r3, #1
 8014558:	2b00      	cmp	r3, #0
 801455a:	bf14      	ite	ne
 801455c:	2301      	movne	r3, #1
 801455e:	2300      	moveq	r3, #0
 8014560:	b2da      	uxtb	r2, r3
 8014562:	4b31      	ldr	r3, [pc, #196]	@ (8014628 <XPS_COMMAND+0x800>)
 8014564:	701a      	strb	r2, [r3, #0]
				WEL = ((Memory [ XPS_FLASH_SIZE + 1 ]) >> 1) & 0b1;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801456c:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 8014570:	085b      	lsrs	r3, r3, #1
 8014572:	b2db      	uxtb	r3, r3
 8014574:	f003 0301 	and.w	r3, r3, #1
 8014578:	2b00      	cmp	r3, #0
 801457a:	bf14      	ite	ne
 801457c:	2301      	movne	r3, #1
 801457e:	2300      	moveq	r3, #0
 8014580:	b2da      	uxtb	r2, r3
 8014582:	4b29      	ldr	r3, [pc, #164]	@ (8014628 <XPS_COMMAND+0x800>)
 8014584:	705a      	strb	r2, [r3, #1]

				// second portion
				Type = 2;
 8014586:	4b28      	ldr	r3, [pc, #160]	@ (8014628 <XPS_COMMAND+0x800>)
 8014588:	2202      	movs	r2, #2
 801458a:	71da      	strb	r2, [r3, #7]
				Command = READ_STAT_REG;
 801458c:	4b26      	ldr	r3, [pc, #152]	@ (8014628 <XPS_COMMAND+0x800>)
 801458e:	220a      	movs	r2, #10
 8014590:	721a      	strb	r2, [r3, #8]
				XPS_COMMAND ( Data_Ptr );
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7ff fc48 	bl	8013e28 <XPS_COMMAND>
				QE = ((Memory [ XPS_FLASH_SIZE + 1 ]) >> 1) & 0b1;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801459e:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 80145a2:	085b      	lsrs	r3, r3, #1
 80145a4:	b2db      	uxtb	r3, r3
 80145a6:	f003 0301 	and.w	r3, r3, #1
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	bf14      	ite	ne
 80145ae:	2301      	movne	r3, #1
 80145b0:	2300      	moveq	r3, #0
 80145b2:	b2da      	uxtb	r2, r3
 80145b4:	4b1c      	ldr	r3, [pc, #112]	@ (8014628 <XPS_COMMAND+0x800>)
 80145b6:	709a      	strb	r2, [r3, #2]
				SUS = ((Memory [ XPS_FLASH_SIZE + 1 ]) >> 7) & 0b1;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80145be:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 80145c2:	09db      	lsrs	r3, r3, #7
 80145c4:	b2db      	uxtb	r3, r3
 80145c6:	f003 0301 	and.w	r3, r3, #1
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	bf14      	ite	ne
 80145ce:	2301      	movne	r3, #1
 80145d0:	2300      	moveq	r3, #0
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	4b14      	ldr	r3, [pc, #80]	@ (8014628 <XPS_COMMAND+0x800>)
 80145d6:	70da      	strb	r2, [r3, #3]

				// third portion
				Type = 3;
 80145d8:	4b13      	ldr	r3, [pc, #76]	@ (8014628 <XPS_COMMAND+0x800>)
 80145da:	2203      	movs	r2, #3
 80145dc:	71da      	strb	r2, [r3, #7]
				Command = READ_STAT_REG;
 80145de:	4b12      	ldr	r3, [pc, #72]	@ (8014628 <XPS_COMMAND+0x800>)
 80145e0:	220a      	movs	r2, #10
 80145e2:	721a      	strb	r2, [r3, #8]
				XPS_COMMAND ( Data_Ptr );
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7ff fc1f 	bl	8013e28 <XPS_COMMAND>
				ADS = (Memory [ XPS_FLASH_SIZE + 1 ]) & 0b1;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 80145f0:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 80145f4:	f003 0301 	and.w	r3, r3, #1
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	bf14      	ite	ne
 80145fc:	2301      	movne	r3, #1
 80145fe:	2300      	moveq	r3, #0
 8014600:	b2da      	uxtb	r2, r3
 8014602:	4b09      	ldr	r3, [pc, #36]	@ (8014628 <XPS_COMMAND+0x800>)
 8014604:	711a      	strb	r2, [r3, #4]
				ADP = ((Memory [ XPS_FLASH_SIZE + 1 ]) >> 1) & 0b1;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801460c:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 8014610:	085b      	lsrs	r3, r3, #1
 8014612:	b2db      	uxtb	r3, r3
 8014614:	f003 0301 	and.w	r3, r3, #1
 8014618:	2b00      	cmp	r3, #0
 801461a:	bf14      	ite	ne
 801461c:	2301      	movne	r3, #1
 801461e:	2300      	moveq	r3, #0
 8014620:	b2da      	uxtb	r2, r3
 8014622:	4b01      	ldr	r3, [pc, #4]	@ (8014628 <XPS_COMMAND+0x800>)
 8014624:	715a      	strb	r2, [r3, #5]
				return;
 8014626:	e173      	b.n	8014910 <XPS_COMMAND+0xae8>
 8014628:	2007cf2c 	.word	0x2007cf2c
 801462c:	2007cf38 	.word	0x2007cf38
 8014630:	2007d2e8 	.word	0x2007d2e8
 8014634:	0802fef0 	.word	0x0802fef0
 8014638:	0802fefc 	.word	0x0802fefc
 801463c:	0802ff08 	.word	0x0802ff08
			case WRITE_ENABLE:
				if (WEL != 1)
 8014640:	4ba3      	ldr	r3, [pc, #652]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014642:	785b      	ldrb	r3, [r3, #1]
 8014644:	f083 0301 	eor.w	r3, r3, #1
 8014648:	b2db      	uxtb	r3, r3
 801464a:	2b00      	cmp	r3, #0
 801464c:	d036      	beq.n	80146bc <XPS_COMMAND+0x894>
				{
					OSPI_Setting.Instruction = XPS_WRITE_ENABLE;
 801464e:	4ba1      	ldr	r3, [pc, #644]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014650:	2206      	movs	r2, #6
 8014652:	609a      	str	r2, [r3, #8]
					// Configure Address Info
					OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8014654:	4b9f      	ldr	r3, [pc, #636]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014656:	2200      	movs	r2, #0
 8014658:	61da      	str	r2, [r3, #28]
					OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 801465a:	4b9e      	ldr	r3, [pc, #632]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801465c:	2200      	movs	r2, #0
 801465e:	621a      	str	r2, [r3, #32]
					OSPI_Setting.Address = 0x0U;
 8014660:	4b9c      	ldr	r3, [pc, #624]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014662:	2200      	movs	r2, #0
 8014664:	619a      	str	r2, [r3, #24]
					// Configure Packet/Message Info
					OSPI_Setting.DummyCycles = 0;
 8014666:	4b9b      	ldr	r3, [pc, #620]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014668:	2200      	movs	r2, #0
 801466a:	645a      	str	r2, [r3, #68]	@ 0x44
					OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 801466c:	4b99      	ldr	r3, [pc, #612]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801466e:	2200      	movs	r2, #0
 8014670:	639a      	str	r2, [r3, #56]	@ 0x38
					OSPI_Setting.NbData = 0;
 8014672:	4b98      	ldr	r3, [pc, #608]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014674:	2200      	movs	r2, #0
 8014676:	63da      	str	r2, [r3, #60]	@ 0x3c

					if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8014678:	f241 3288 	movw	r2, #5000	@ 0x1388
 801467c:	4995      	ldr	r1, [pc, #596]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801467e:	4896      	ldr	r0, [pc, #600]	@ (80148d8 <XPS_COMMAND+0xab0>)
 8014680:	f000 f9fa 	bl	8014a78 <OSPItest>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d00c      	beq.n	80146a4 <XPS_COMMAND+0x87c>
					{
						State = XPS_SPI_WEL_ERR;
 801468a:	4b91      	ldr	r3, [pc, #580]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 801468c:	2215      	movs	r2, #21
 801468e:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
						Write_Log ( LOG_ERROR );
 8014690:	4892      	ldr	r0, [pc, #584]	@ (80148dc <XPS_COMMAND+0xab4>)
 8014692:	f7f2 fa4b 	bl	8006b2c <Write_Log>
						Log_End ( LOG_STATE_RESULT , State );
 8014696:	4b8e      	ldr	r3, [pc, #568]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014698:	7a5b      	ldrb	r3, [r3, #9]
 801469a:	4619      	mov	r1, r3
 801469c:	4890      	ldr	r0, [pc, #576]	@ (80148e0 <XPS_COMMAND+0xab8>)
 801469e:	f7f2 fa2d 	bl	8006afc <Log_End>
#endif
						return;
 80146a2:	e135      	b.n	8014910 <XPS_COMMAND+0xae8>
					}

					HAL_Delay ( 1 ); // Give a little time to sleep
 80146a4:	2001      	movs	r0, #1
 80146a6:	f001 feed 	bl	8016484 <HAL_Delay>
					WEL = 1;
 80146aa:	4b89      	ldr	r3, [pc, #548]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80146ac:	2201      	movs	r2, #1
 80146ae:	705a      	strb	r2, [r3, #1]

#ifdef Log_Level_2
					Log_End ( LOG_STATE_RESULT , State );
 80146b0:	4b87      	ldr	r3, [pc, #540]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80146b2:	7a5b      	ldrb	r3, [r3, #9]
 80146b4:	4619      	mov	r1, r3
 80146b6:	488a      	ldr	r0, [pc, #552]	@ (80148e0 <XPS_COMMAND+0xab8>)
 80146b8:	f7f2 fa20 	bl	8006afc <Log_End>
#endif

				}

#ifdef Log_Level_2
				Log_End ( LOG_STATE_RESULT , State );
 80146bc:	4b84      	ldr	r3, [pc, #528]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80146be:	7a5b      	ldrb	r3, [r3, #9]
 80146c0:	4619      	mov	r1, r3
 80146c2:	4887      	ldr	r0, [pc, #540]	@ (80148e0 <XPS_COMMAND+0xab8>)
 80146c4:	f7f2 fa1a 	bl	8006afc <Log_End>
#endif
				return;
 80146c8:	e122      	b.n	8014910 <XPS_COMMAND+0xae8>
			case QCHIPID:
				OSPI_Setting.Instruction = XPS_POWERUP;	 // Command
 80146ca:	4b82      	ldr	r3, [pc, #520]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146cc:	22ab      	movs	r2, #171	@ 0xab
 80146ce:	609a      	str	r2, [r3, #8]
				//			// Configure Packet/Message Info
				//			OSPI_Setting.DummyCycles = 6;
				//			OSPI_Setting.DataMode = HAL_OSPI_DATA_4_LINES;
				//			OSPI_Setting.NbData = 1;
				// Configure Address Info
				OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80146d0:	4b80      	ldr	r3, [pc, #512]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80146d6:	61da      	str	r2, [r3, #28]
				OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80146d8:	4b7e      	ldr	r3, [pc, #504]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80146de:	621a      	str	r2, [r3, #32]
				OSPI_Setting.Address = 0x000000U; //GAV changed address
 80146e0:	4b7c      	ldr	r3, [pc, #496]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146e2:	2200      	movs	r2, #0
 80146e4:	619a      	str	r2, [r3, #24]
				// Configure Packet/Message Info
				OSPI_Setting.DummyCycles = 0;
 80146e6:	4b7b      	ldr	r3, [pc, #492]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	645a      	str	r2, [r3, #68]	@ 0x44
				OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
 80146ec:	4b79      	ldr	r3, [pc, #484]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80146f2:	639a      	str	r2, [r3, #56]	@ 0x38
				OSPI_Setting.NbData = 1;
 80146f4:	4b77      	ldr	r3, [pc, #476]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80146f6:	2201      	movs	r2, #1
 80146f8:	63da      	str	r2, [r3, #60]	@ 0x3c

				if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80146fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80146fe:	4975      	ldr	r1, [pc, #468]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014700:	4875      	ldr	r0, [pc, #468]	@ (80148d8 <XPS_COMMAND+0xab0>)
 8014702:	f000 f9b9 	bl	8014a78 <OSPItest>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d00c      	beq.n	8014726 <XPS_COMMAND+0x8fe>
				{
					State = XPS_QSPI_CONFIG_ERR;
 801470c:	4b70      	ldr	r3, [pc, #448]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 801470e:	220c      	movs	r2, #12
 8014710:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
					Write_Log ( LOG_ERROR );
 8014712:	4872      	ldr	r0, [pc, #456]	@ (80148dc <XPS_COMMAND+0xab4>)
 8014714:	f7f2 fa0a 	bl	8006b2c <Write_Log>
					Log_End ( LOG_STATE_RESULT , State );
 8014718:	4b6d      	ldr	r3, [pc, #436]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 801471a:	7a5b      	ldrb	r3, [r3, #9]
 801471c:	4619      	mov	r1, r3
 801471e:	4870      	ldr	r0, [pc, #448]	@ (80148e0 <XPS_COMMAND+0xab8>)
 8014720:	f7f2 f9ec 	bl	8006afc <Log_End>
#endif

					return;
 8014724:	e0f4      	b.n	8014910 <XPS_COMMAND+0xae8>
				}
				if (HAL_OSPI_Receive ( &hospi1 , Memory , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 801472c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8014730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014734:	4619      	mov	r1, r3
 8014736:	4868      	ldr	r0, [pc, #416]	@ (80148d8 <XPS_COMMAND+0xab0>)
 8014738:	f007 f932 	bl	801b9a0 <HAL_OSPI_Receive>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d00c      	beq.n	801475c <XPS_COMMAND+0x934>
				{
					State = XPS_QSPI_RECEIVE_ERR;
 8014742:	4b63      	ldr	r3, [pc, #396]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014744:	220d      	movs	r2, #13
 8014746:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
					Write_Log ( LOG_ERROR );
 8014748:	4864      	ldr	r0, [pc, #400]	@ (80148dc <XPS_COMMAND+0xab4>)
 801474a:	f7f2 f9ef 	bl	8006b2c <Write_Log>
					Log_End ( LOG_STATE_RESULT , State );
 801474e:	4b60      	ldr	r3, [pc, #384]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014750:	7a5b      	ldrb	r3, [r3, #9]
 8014752:	4619      	mov	r1, r3
 8014754:	4862      	ldr	r0, [pc, #392]	@ (80148e0 <XPS_COMMAND+0xab8>)
 8014756:	f7f2 f9d1 	bl	8006afc <Log_End>
#endif
					return;
 801475a:	e0d9      	b.n	8014910 <XPS_COMMAND+0xae8>
				}

#ifdef Log_Level_2
				Log_End ( LOG_STATE_RESULT , State );
 801475c:	4b5c      	ldr	r3, [pc, #368]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 801475e:	7a5b      	ldrb	r3, [r3, #9]
 8014760:	4619      	mov	r1, r3
 8014762:	485f      	ldr	r0, [pc, #380]	@ (80148e0 <XPS_COMMAND+0xab8>)
 8014764:	f7f2 f9ca 	bl	8006afc <Log_End>
#endif
				return;
 8014768:	e0d2      	b.n	8014910 <XPS_COMMAND+0xae8>
			case CHIPID:
				OSPI_Setting.Instruction = XPS_FULLID;	 // Command
 801476a:	4b5a      	ldr	r3, [pc, #360]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801476c:	2290      	movs	r2, #144	@ 0x90
 801476e:	609a      	str	r2, [r3, #8]
				// Configure Address Info
				OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8014770:	4b58      	ldr	r3, [pc, #352]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014776:	61da      	str	r2, [r3, #28]
				OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8014778:	4b56      	ldr	r3, [pc, #344]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801477a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801477e:	621a      	str	r2, [r3, #32]
				OSPI_Setting.Address = 0x000000U; //GAV changed address
 8014780:	4b54      	ldr	r3, [pc, #336]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014782:	2200      	movs	r2, #0
 8014784:	619a      	str	r2, [r3, #24]
				// Configure Packet/Message Info
				OSPI_Setting.DummyCycles = 0;
 8014786:	4b53      	ldr	r3, [pc, #332]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014788:	2200      	movs	r2, #0
 801478a:	645a      	str	r2, [r3, #68]	@ 0x44
				OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
 801478c:	4b51      	ldr	r3, [pc, #324]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801478e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014792:	639a      	str	r2, [r3, #56]	@ 0x38
				OSPI_Setting.NbData = 1;
 8014794:	4b4f      	ldr	r3, [pc, #316]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014796:	2201      	movs	r2, #1
 8014798:	63da      	str	r2, [r3, #60]	@ 0x3c

				if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 801479a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801479e:	494d      	ldr	r1, [pc, #308]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80147a0:	484d      	ldr	r0, [pc, #308]	@ (80148d8 <XPS_COMMAND+0xab0>)
 80147a2:	f000 f969 	bl	8014a78 <OSPItest>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d00c      	beq.n	80147c6 <XPS_COMMAND+0x99e>
				{
					State = XPS_SPI_CONFIG_ERR;
 80147ac:	4b48      	ldr	r3, [pc, #288]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80147ae:	2209      	movs	r2, #9
 80147b0:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
					Write_Log ( LOG_ERROR );
 80147b2:	484a      	ldr	r0, [pc, #296]	@ (80148dc <XPS_COMMAND+0xab4>)
 80147b4:	f7f2 f9ba 	bl	8006b2c <Write_Log>
					Log_End ( LOG_STATE_RESULT , State );
 80147b8:	4b45      	ldr	r3, [pc, #276]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80147ba:	7a5b      	ldrb	r3, [r3, #9]
 80147bc:	4619      	mov	r1, r3
 80147be:	4848      	ldr	r0, [pc, #288]	@ (80148e0 <XPS_COMMAND+0xab8>)
 80147c0:	f7f2 f99c 	bl	8006afc <Log_End>
#endif

					return;
 80147c4:	e0a4      	b.n	8014910 <XPS_COMMAND+0xae8>
				}
				if (HAL_OSPI_Receive ( &hospi1 , &(Memory [ XPS_FLASH_SIZE ]) , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 80147cc:	3368      	adds	r3, #104	@ 0x68
 80147ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80147d2:	4619      	mov	r1, r3
 80147d4:	4840      	ldr	r0, [pc, #256]	@ (80148d8 <XPS_COMMAND+0xab0>)
 80147d6:	f007 f8e3 	bl	801b9a0 <HAL_OSPI_Receive>
 80147da:	4603      	mov	r3, r0
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d00c      	beq.n	80147fa <XPS_COMMAND+0x9d2>
				{
					State = XPS_SPI_RECEIVE_ERR;
 80147e0:	4b3b      	ldr	r3, [pc, #236]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80147e2:	220a      	movs	r2, #10
 80147e4:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
					Write_Log ( LOG_ERROR );
 80147e6:	483d      	ldr	r0, [pc, #244]	@ (80148dc <XPS_COMMAND+0xab4>)
 80147e8:	f7f2 f9a0 	bl	8006b2c <Write_Log>
					Log_End ( LOG_STATE_RESULT , State );
 80147ec:	4b38      	ldr	r3, [pc, #224]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80147ee:	7a5b      	ldrb	r3, [r3, #9]
 80147f0:	4619      	mov	r1, r3
 80147f2:	483b      	ldr	r0, [pc, #236]	@ (80148e0 <XPS_COMMAND+0xab8>)
 80147f4:	f7f2 f982 	bl	8006afc <Log_End>
#endif

					return;
 80147f8:	e08a      	b.n	8014910 <XPS_COMMAND+0xae8>
				}
				State = XPS_OK;
 80147fa:	4b35      	ldr	r3, [pc, #212]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80147fc:	2200      	movs	r2, #0
 80147fe:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_2
				Log_End ( LOG_STATE_RESULT , State );
 8014800:	4b33      	ldr	r3, [pc, #204]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014802:	7a5b      	ldrb	r3, [r3, #9]
 8014804:	4619      	mov	r1, r3
 8014806:	4836      	ldr	r0, [pc, #216]	@ (80148e0 <XPS_COMMAND+0xab8>)
 8014808:	f7f2 f978 	bl	8006afc <Log_End>
#endif

				return;
 801480c:	e080      	b.n	8014910 <XPS_COMMAND+0xae8>
			case PREP_RESET:
				OSPI_Setting.Instruction = XPS_ENABLE_RST;	 // Command
 801480e:	4b31      	ldr	r3, [pc, #196]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014810:	2266      	movs	r2, #102	@ 0x66
 8014812:	609a      	str	r2, [r3, #8]
				// Configure Address Info
				OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8014814:	4b2f      	ldr	r3, [pc, #188]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014816:	2200      	movs	r2, #0
 8014818:	61da      	str	r2, [r3, #28]
				OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 801481a:	4b2e      	ldr	r3, [pc, #184]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801481c:	2200      	movs	r2, #0
 801481e:	621a      	str	r2, [r3, #32]
				OSPI_Setting.Address = 0x0U;
 8014820:	4b2c      	ldr	r3, [pc, #176]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014822:	2200      	movs	r2, #0
 8014824:	619a      	str	r2, [r3, #24]
				// Configure Packet/Message Info
				OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 8014826:	4b2b      	ldr	r3, [pc, #172]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014828:	2200      	movs	r2, #0
 801482a:	639a      	str	r2, [r3, #56]	@ 0x38
				OSPI_Setting.DummyCycles = 0;
 801482c:	4b29      	ldr	r3, [pc, #164]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801482e:	2200      	movs	r2, #0
 8014830:	645a      	str	r2, [r3, #68]	@ 0x44
				OSPI_Setting.NbData = 0;
 8014832:	4b28      	ldr	r3, [pc, #160]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014834:	2200      	movs	r2, #0
 8014836:	63da      	str	r2, [r3, #60]	@ 0x3c

				if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 8014838:	f241 3288 	movw	r2, #5000	@ 0x1388
 801483c:	4925      	ldr	r1, [pc, #148]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801483e:	4826      	ldr	r0, [pc, #152]	@ (80148d8 <XPS_COMMAND+0xab0>)
 8014840:	f000 f91a 	bl	8014a78 <OSPItest>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d00c      	beq.n	8014864 <XPS_COMMAND+0xa3c>
				{
					State = XPS_RSTTGL_CONFIG_ERR;
 801484a:	4b21      	ldr	r3, [pc, #132]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 801484c:	2217      	movs	r2, #23
 801484e:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
					Write_Log ( LOG_ERROR );
 8014850:	4822      	ldr	r0, [pc, #136]	@ (80148dc <XPS_COMMAND+0xab4>)
 8014852:	f7f2 f96b 	bl	8006b2c <Write_Log>
					Log_End ( LOG_STATE_RESULT , State );
 8014856:	4b1e      	ldr	r3, [pc, #120]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014858:	7a5b      	ldrb	r3, [r3, #9]
 801485a:	4619      	mov	r1, r3
 801485c:	4820      	ldr	r0, [pc, #128]	@ (80148e0 <XPS_COMMAND+0xab8>)
 801485e:	f7f2 f94d 	bl	8006afc <Log_End>
#endif

					return;
 8014862:	e055      	b.n	8014910 <XPS_COMMAND+0xae8>
				}

#ifdef Log_Level_2
				Log_End ( LOG_STATE_RESULT , State );
 8014864:	4b1a      	ldr	r3, [pc, #104]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 8014866:	7a5b      	ldrb	r3, [r3, #9]
 8014868:	4619      	mov	r1, r3
 801486a:	481d      	ldr	r0, [pc, #116]	@ (80148e0 <XPS_COMMAND+0xab8>)
 801486c:	f7f2 f946 	bl	8006afc <Log_End>
#endif

				HAL_Delay ( 1 ); // Give a little time to sleep(Data_Ptr, XPS);
 8014870:	2001      	movs	r0, #1
 8014872:	f001 fe07 	bl	8016484 <HAL_Delay>
				return;
 8014876:	e04b      	b.n	8014910 <XPS_COMMAND+0xae8>
			case TRIG_RESET:
				OSPI_Setting.Instruction = XPS_RESET;	 // Command
 8014878:	4b16      	ldr	r3, [pc, #88]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801487a:	2299      	movs	r2, #153	@ 0x99
 801487c:	609a      	str	r2, [r3, #8]
				// Configure Address Info
				OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 801487e:	4b15      	ldr	r3, [pc, #84]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014880:	2200      	movs	r2, #0
 8014882:	61da      	str	r2, [r3, #28]
				OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 8014884:	4b13      	ldr	r3, [pc, #76]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014886:	2200      	movs	r2, #0
 8014888:	621a      	str	r2, [r3, #32]
				OSPI_Setting.Address = 0x0U;
 801488a:	4b12      	ldr	r3, [pc, #72]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801488c:	2200      	movs	r2, #0
 801488e:	619a      	str	r2, [r3, #24]
				// Configure Packet/Message Info
				OSPI_Setting.DataMode = HAL_OSPI_DATA_NONE;
 8014890:	4b10      	ldr	r3, [pc, #64]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014892:	2200      	movs	r2, #0
 8014894:	639a      	str	r2, [r3, #56]	@ 0x38
				OSPI_Setting.DummyCycles = 0;
 8014896:	4b0f      	ldr	r3, [pc, #60]	@ (80148d4 <XPS_COMMAND+0xaac>)
 8014898:	2200      	movs	r2, #0
 801489a:	645a      	str	r2, [r3, #68]	@ 0x44
				OSPI_Setting.NbData = 0;
 801489c:	4b0d      	ldr	r3, [pc, #52]	@ (80148d4 <XPS_COMMAND+0xaac>)
 801489e:	2200      	movs	r2, #0
 80148a0:	63da      	str	r2, [r3, #60]	@ 0x3c

				if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80148a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80148a6:	490b      	ldr	r1, [pc, #44]	@ (80148d4 <XPS_COMMAND+0xaac>)
 80148a8:	480b      	ldr	r0, [pc, #44]	@ (80148d8 <XPS_COMMAND+0xab0>)
 80148aa:	f000 f8e5 	bl	8014a78 <OSPItest>
 80148ae:	4603      	mov	r3, r0
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d017      	beq.n	80148e4 <XPS_COMMAND+0xabc>
				{
					State = XPS_RESET_CONFIG_ERR;
 80148b4:	4b06      	ldr	r3, [pc, #24]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80148b6:	2218      	movs	r2, #24
 80148b8:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
					Write_Log ( LOG_ERROR );
 80148ba:	4808      	ldr	r0, [pc, #32]	@ (80148dc <XPS_COMMAND+0xab4>)
 80148bc:	f7f2 f936 	bl	8006b2c <Write_Log>
					Log_End ( LOG_STATE_RESULT , State );
 80148c0:	4b03      	ldr	r3, [pc, #12]	@ (80148d0 <XPS_COMMAND+0xaa8>)
 80148c2:	7a5b      	ldrb	r3, [r3, #9]
 80148c4:	4619      	mov	r1, r3
 80148c6:	4806      	ldr	r0, [pc, #24]	@ (80148e0 <XPS_COMMAND+0xab8>)
 80148c8:	f7f2 f918 	bl	8006afc <Log_End>
#endif

					return;
 80148cc:	e020      	b.n	8014910 <XPS_COMMAND+0xae8>
 80148ce:	bf00      	nop
 80148d0:	2007cf2c 	.word	0x2007cf2c
 80148d4:	2007cf38 	.word	0x2007cf38
 80148d8:	2007d2e8 	.word	0x2007d2e8
 80148dc:	0802fef0 	.word	0x0802fef0
 80148e0:	0802fefc 	.word	0x0802fefc
				}
				HAL_Delay ( 1 ); // Give a little time to sleep
 80148e4:	2001      	movs	r0, #1
 80148e6:	f001 fdcd 	bl	8016484 <HAL_Delay>
				State = XPS_RST;
 80148ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014918 <XPS_COMMAND+0xaf0>)
 80148ec:	2202      	movs	r2, #2
 80148ee:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_2
				Log_End ( LOG_STATE_RESULT , State );
 80148f0:	4b09      	ldr	r3, [pc, #36]	@ (8014918 <XPS_COMMAND+0xaf0>)
 80148f2:	7a5b      	ldrb	r3, [r3, #9]
 80148f4:	4619      	mov	r1, r3
 80148f6:	4809      	ldr	r0, [pc, #36]	@ (801491c <XPS_COMMAND+0xaf4>)
 80148f8:	f7f2 f900 	bl	8006afc <Log_End>
#endif

				return;
 80148fc:	e008      	b.n	8014910 <XPS_COMMAND+0xae8>
			default:
				State = XPS_TYPE_PARAM_ERR;
 80148fe:	4b06      	ldr	r3, [pc, #24]	@ (8014918 <XPS_COMMAND+0xaf0>)
 8014900:	2205      	movs	r2, #5
 8014902:	725a      	strb	r2, [r3, #9]

#ifdef Log_Level_1
				Log_End ( LOG_STATE_RESULT , 250 );
 8014904:	21fa      	movs	r1, #250	@ 0xfa
 8014906:	4805      	ldr	r0, [pc, #20]	@ (801491c <XPS_COMMAND+0xaf4>)
 8014908:	f7f2 f8f8 	bl	8006afc <Log_End>
#endif
				break;
 801490c:	e000      	b.n	8014910 <XPS_COMMAND+0xae8>
		return;
 801490e:	bf00      	nop
		}
	}  // End of "Command" Switch cases
}
 8014910:	3708      	adds	r7, #8
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	2007cf2c 	.word	0x2007cf2c
 801491c:	0802fefc 	.word	0x0802fefc

08014920 <XPS_IsBusy>:
 XPS Check State Function
 The function checks to see if the XPS is busy with
 another command and returns the state of the device
 ******************************************************/
void XPS_IsBusy ( MEM_PTR *Data_Ptr )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
	if (State != XPS_OK)
 8014928:	4b4d      	ldr	r3, [pc, #308]	@ (8014a60 <XPS_IsBusy+0x140>)
 801492a:	7a5b      	ldrb	r3, [r3, #9]
 801492c:	2b00      	cmp	r3, #0
 801492e:	f040 8090 	bne.w	8014a52 <XPS_IsBusy+0x132>
	{
		return;
	}
	Refresh_Watchdog;
 8014932:	484c      	ldr	r0, [pc, #304]	@ (8014a64 <XPS_IsBusy+0x144>)
 8014934:	f006 fc4d 	bl	801b1d2 <HAL_IWDG_Refresh>
 8014938:	4603      	mov	r3, r0
 801493a:	2b00      	cmp	r3, #0
 801493c:	d001      	beq.n	8014942 <XPS_IsBusy+0x22>
 801493e:	f000 ff29 	bl	8015794 <Error_Handler>

#ifdef Log_Level_1
	if (Setting & LOG_LEVEL_3)
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014948:	f893 3361 	ldrb.w	r3, [r3, #865]	@ 0x361
 801494c:	f003 0308 	and.w	r3, r3, #8
 8014950:	2b00      	cmp	r3, #0
 8014952:	d005      	beq.n	8014960 <XPS_IsBusy+0x40>
	{
		Write_Log ( LOG_BUSY_MEMORY );
 8014954:	4844      	ldr	r0, [pc, #272]	@ (8014a68 <XPS_IsBusy+0x148>)
 8014956:	f7f2 f8e9 	bl	8006b2c <Write_Log>
		Write_Log ( LOG_TAIL );
 801495a:	4844      	ldr	r0, [pc, #272]	@ (8014a6c <XPS_IsBusy+0x14c>)
 801495c:	f7f2 f8e6 	bl	8006b2c <Write_Log>
	}
#endif

	State = XPS_BUSY;
 8014960:	4b3f      	ldr	r3, [pc, #252]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014962:	2201      	movs	r2, #1
 8014964:	725a      	strb	r2, [r3, #9]
	while (State == XPS_BUSY)
 8014966:	e06f      	b.n	8014a48 <XPS_IsBusy+0x128>
	{
		HAL_Delay ( 5 );
 8014968:	2005      	movs	r0, #5
 801496a:	f001 fd8b 	bl	8016484 <HAL_Delay>

		// Configure Instruction Info
		OSPI_Setting.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 801496e:	4b40      	ldr	r3, [pc, #256]	@ (8014a70 <XPS_IsBusy+0x150>)
 8014970:	2200      	movs	r2, #0
 8014972:	601a      	str	r2, [r3, #0]
		OSPI_Setting.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE; // OSPI_INSTRUCTION_...
 8014974:	4b3e      	ldr	r3, [pc, #248]	@ (8014a70 <XPS_IsBusy+0x150>)
 8014976:	2201      	movs	r2, #1
 8014978:	60da      	str	r2, [r3, #12]
		OSPI_Setting.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 801497a:	4b3d      	ldr	r3, [pc, #244]	@ (8014a70 <XPS_IsBusy+0x150>)
 801497c:	2200      	movs	r2, #0
 801497e:	611a      	str	r2, [r3, #16]
		// Based on register instruction will change
		OSPI_Setting.Instruction = XPS_READ_SR1;
 8014980:	4b3b      	ldr	r3, [pc, #236]	@ (8014a70 <XPS_IsBusy+0x150>)
 8014982:	2205      	movs	r2, #5
 8014984:	609a      	str	r2, [r3, #8]
		// Configure Address Info
		OSPI_Setting.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8014986:	4b3a      	ldr	r3, [pc, #232]	@ (8014a70 <XPS_IsBusy+0x150>)
 8014988:	2200      	movs	r2, #0
 801498a:	61da      	str	r2, [r3, #28]
		OSPI_Setting.AddressSize = HAL_OSPI_ADDRESS_NONE;
 801498c:	4b38      	ldr	r3, [pc, #224]	@ (8014a70 <XPS_IsBusy+0x150>)
 801498e:	2200      	movs	r2, #0
 8014990:	621a      	str	r2, [r3, #32]
		OSPI_Setting.Address = 0x0U;
 8014992:	4b37      	ldr	r3, [pc, #220]	@ (8014a70 <XPS_IsBusy+0x150>)
 8014994:	2200      	movs	r2, #0
 8014996:	619a      	str	r2, [r3, #24]
		// Configure Packet/Message Info
		OSPI_Setting.DummyCycles = 0;
 8014998:	4b35      	ldr	r3, [pc, #212]	@ (8014a70 <XPS_IsBusy+0x150>)
 801499a:	2200      	movs	r2, #0
 801499c:	645a      	str	r2, [r3, #68]	@ 0x44
		OSPI_Setting.DataMode = HAL_OSPI_DATA_1_LINE;
 801499e:	4b34      	ldr	r3, [pc, #208]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80149a4:	639a      	str	r2, [r3, #56]	@ 0x38
		OSPI_Setting.NbData = 1;
 80149a6:	4b32      	ldr	r3, [pc, #200]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149a8:	2201      	movs	r2, #1
 80149aa:	63da      	str	r2, [r3, #60]	@ 0x3c
		// Disables Unused Settings
		OSPI_Setting.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80149ac:	4b30      	ldr	r3, [pc, #192]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149ae:	2200      	movs	r2, #0
 80149b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		OSPI_Setting.AlternateBytesSize = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80149b2:	4b2f      	ldr	r3, [pc, #188]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	631a      	str	r2, [r3, #48]	@ 0x30
		OSPI_Setting.AlternateBytes = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80149b8:	4b2d      	ldr	r3, [pc, #180]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149ba:	2200      	movs	r2, #0
 80149bc:	629a      	str	r2, [r3, #40]	@ 0x28
		OSPI_Setting.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 80149be:	4b2c      	ldr	r3, [pc, #176]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149c0:	2200      	movs	r2, #0
 80149c2:	641a      	str	r2, [r3, #64]	@ 0x40
		OSPI_Setting.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80149c4:	4b2a      	ldr	r3, [pc, #168]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149c6:	2200      	movs	r2, #0
 80149c8:	625a      	str	r2, [r3, #36]	@ 0x24
		OSPI_Setting.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80149ca:	4b29      	ldr	r3, [pc, #164]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149cc:	2200      	movs	r2, #0
 80149ce:	615a      	str	r2, [r3, #20]
		OSPI_Setting.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80149d0:	4b27      	ldr	r3, [pc, #156]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149d2:	2200      	movs	r2, #0
 80149d4:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (OSPItest ( &hospi1 , &OSPI_Setting , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80149d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80149da:	4925      	ldr	r1, [pc, #148]	@ (8014a70 <XPS_IsBusy+0x150>)
 80149dc:	4825      	ldr	r0, [pc, #148]	@ (8014a74 <XPS_IsBusy+0x154>)
 80149de:	f000 f84b 	bl	8014a78 <OSPItest>
 80149e2:	4603      	mov	r3, r0
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d003      	beq.n	80149f0 <XPS_IsBusy+0xd0>
		{
			State = XPS_STATE_CONFIG_ERR;
 80149e8:	4b1d      	ldr	r3, [pc, #116]	@ (8014a60 <XPS_IsBusy+0x140>)
 80149ea:	2213      	movs	r2, #19
 80149ec:	725a      	strb	r2, [r3, #9]
			return;
 80149ee:	e033      	b.n	8014a58 <XPS_IsBusy+0x138>
		}
		if (HAL_OSPI_Receive ( &hospi1 , &(Memory [ XPS_FLASH_SIZE + 1 ]) , HAL_OSPI_TIMEOUT_DEFAULT_VALUE ) != HAL_OK)
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 80149f6:	3369      	adds	r3, #105	@ 0x69
 80149f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80149fc:	4619      	mov	r1, r3
 80149fe:	481d      	ldr	r0, [pc, #116]	@ (8014a74 <XPS_IsBusy+0x154>)
 8014a00:	f006 ffce 	bl	801b9a0 <HAL_OSPI_Receive>
 8014a04:	4603      	mov	r3, r0
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d003      	beq.n	8014a12 <XPS_IsBusy+0xf2>
		{
			State = XPS_STATE_RECEIVE_ERR;
 8014a0a:	4b15      	ldr	r3, [pc, #84]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a0c:	2214      	movs	r2, #20
 8014a0e:	725a      	strb	r2, [r3, #9]
			return;
 8014a10:	e022      	b.n	8014a58 <XPS_IsBusy+0x138>
		}

		if (State != XPS_OK && State != XPS_BUSY)
 8014a12:	4b13      	ldr	r3, [pc, #76]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a14:	7a5b      	ldrb	r3, [r3, #9]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d003      	beq.n	8014a22 <XPS_IsBusy+0x102>
 8014a1a:	4b11      	ldr	r3, [pc, #68]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a1c:	7a5b      	ldrb	r3, [r3, #9]
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d119      	bne.n	8014a56 <XPS_IsBusy+0x136>
		{
			return;
		}

		Busy = (Memory [ XPS_FLASH_SIZE + 1 ] & 0b1);
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014a28:	f893 3469 	ldrb.w	r3, [r3, #1129]	@ 0x469
 8014a2c:	f003 0301 	and.w	r3, r3, #1
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	bf14      	ite	ne
 8014a34:	2301      	movne	r3, #1
 8014a36:	2300      	moveq	r3, #0
 8014a38:	b2da      	uxtb	r2, r3
 8014a3a:	4b09      	ldr	r3, [pc, #36]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a3c:	701a      	strb	r2, [r3, #0]
		State = (Busy) ? XPS_BUSY : XPS_OK;
 8014a3e:	4b08      	ldr	r3, [pc, #32]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	461a      	mov	r2, r3
 8014a44:	4b06      	ldr	r3, [pc, #24]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a46:	725a      	strb	r2, [r3, #9]
	while (State == XPS_BUSY)
 8014a48:	4b05      	ldr	r3, [pc, #20]	@ (8014a60 <XPS_IsBusy+0x140>)
 8014a4a:	7a5b      	ldrb	r3, [r3, #9]
 8014a4c:	2b01      	cmp	r3, #1
 8014a4e:	d08b      	beq.n	8014968 <XPS_IsBusy+0x48>
 8014a50:	e002      	b.n	8014a58 <XPS_IsBusy+0x138>
		return;
 8014a52:	bf00      	nop
 8014a54:	e000      	b.n	8014a58 <XPS_IsBusy+0x138>
			return;
 8014a56:	bf00      	nop
	}
}
 8014a58:	3708      	adds	r7, #8
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	2007cf2c 	.word	0x2007cf2c
 8014a64:	2007d0bc 	.word	0x2007d0bc
 8014a68:	0802ff18 	.word	0x0802ff18
 8014a6c:	0802ff34 	.word	0x0802ff34
 8014a70:	2007cf38 	.word	0x2007cf38
 8014a74:	2007d2e8 	.word	0x2007d2e8

08014a78 <OSPItest>:

HAL_StatusTypeDef OSPItest(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b086      	sub	sp, #24
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	60f8      	str	r0, [r7, #12]
 8014a80:	60b9      	str	r1, [r7, #8]
 8014a82:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OSPI_Command(hospi, cmd, Timeout);
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	68b9      	ldr	r1, [r7, #8]
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f006 fe6d 	bl	801b768 <HAL_OSPI_Command>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	75fb      	strb	r3, [r7, #23]
	return status;
 8014a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3718      	adds	r7, #24
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}

08014a9c <XPS_Verify_Memory>:
 XPS Package Verify function
 Verifies Data_Ptr passed in is within acceptable
 parameters for the XPS command buffer
 ******************************************************/
void XPS_Verify_Memory ( MEM_PTR *Data_Ptr )
{
 8014a9c:	b480      	push	{r7}
 8014a9e:	b083      	sub	sp, #12
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	6078      	str	r0, [r7, #4]
	if (Page >= PAGE_COUNT)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014aaa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8014aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014ab2:	d302      	bcc.n	8014aba <XPS_Verify_Memory+0x1e>
	{
		State = XPS_PAGE_PARAM_ERR;
 8014ab4:	4b16      	ldr	r3, [pc, #88]	@ (8014b10 <XPS_Verify_Memory+0x74>)
 8014ab6:	2206      	movs	r2, #6
 8014ab8:	725a      	strb	r2, [r3, #9]
	}
	if (Size == 0 || Size > 256)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014ac0:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d007      	beq.n	8014ad8 <XPS_Verify_Memory+0x3c>
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014ace:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8014ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014ad6:	d902      	bls.n	8014ade <XPS_Verify_Memory+0x42>
	{
		State = XPS_SIZE_PARAM_ERR;
 8014ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8014b10 <XPS_Verify_Memory+0x74>)
 8014ada:	2208      	movs	r2, #8
 8014adc:	725a      	strb	r2, [r3, #9]
	}
	if (Shift > 256 - Size)
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014ae4:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8014ae8:	461a      	mov	r2, r3
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8014af0:	f8d3 3350 	ldr.w	r3, [r3, #848]	@ 0x350
 8014af4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d902      	bls.n	8014b02 <XPS_Verify_Memory+0x66>
	{
		State = XPS_SHIFT_PARAM_ERR;
 8014afc:	4b04      	ldr	r3, [pc, #16]	@ (8014b10 <XPS_Verify_Memory+0x74>)
 8014afe:	2207      	movs	r2, #7
 8014b00:	725a      	strb	r2, [r3, #9]
	}
}
 8014b02:	bf00      	nop
 8014b04:	370c      	adds	r7, #12
 8014b06:	46bd      	mov	sp, r7
 8014b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0c:	4770      	bx	lr
 8014b0e:	bf00      	nop
 8014b10:	2007cf2c 	.word	0x2007cf2c

08014b14 <XPS_Set_Command>:

void XPS_Set_Command ( XPS_CMD_TYPE Input )
{
 8014b14:	b480      	push	{r7}
 8014b16:	b083      	sub	sp, #12
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	71fb      	strb	r3, [r7, #7]
	Command = Input;
 8014b1e:	4a04      	ldr	r2, [pc, #16]	@ (8014b30 <XPS_Set_Command+0x1c>)
 8014b20:	79fb      	ldrb	r3, [r7, #7]
 8014b22:	7213      	strb	r3, [r2, #8]
}
 8014b24:	bf00      	nop
 8014b26:	370c      	adds	r7, #12
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr
 8014b30:	2007cf2c 	.word	0x2007cf2c

08014b34 <XPS_Get_State>:

XPS_STATE XPS_Get_State ( void )
{
 8014b34:	b480      	push	{r7}
 8014b36:	af00      	add	r7, sp, #0
	return State;
 8014b38:	4b03      	ldr	r3, [pc, #12]	@ (8014b48 <XPS_Get_State+0x14>)
 8014b3a:	7a5b      	ldrb	r3, [r3, #9]
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b44:	4770      	bx	lr
 8014b46:	bf00      	nop
 8014b48:	2007cf2c 	.word	0x2007cf2c

08014b4c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8014b4c:	b590      	push	{r4, r7, lr}
 8014b4e:	b087      	sub	sp, #28
 8014b50:	af00      	add	r7, sp, #0
//	else
//	{
//		bank =  FLASH_BANK_1;
//	}

	bool codeTest = false;
 8014b52:	2300      	movs	r3, #0
 8014b54:	74fb      	strb	r3, [r7, #19]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8014b56:	f001 fc11 	bl	801637c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8014b5a:	f000 f8e7 	bl	8014d2c <SystemClock_Config>

	/* Configure the System Power */
	SystemPower_Config();
 8014b5e:	f000 f928 	bl	8014db2 <SystemPower_Config>
	//PWR->CR1 |= PWR_CR1_LPMS;  // Enable the backup domain

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8014b62:	f000 fc89 	bl	8015478 <MX_GPIO_Init>
	MX_ADC1_Init();
 8014b66:	f000 f937 	bl	8014dd8 <MX_ADC1_Init>
	MX_I2C1_Init();
 8014b6a:	f000 f9b3 	bl	8014ed4 <MX_I2C1_Init>
	MX_OCTOSPI1_Init();
 8014b6e:	f000 faa1 	bl	80150b4 <MX_OCTOSPI1_Init>
	MX_USART2_UART_Init();
 8014b72:	f000 fa53 	bl	801501c <MX_USART2_UART_Init>
	MX_USB_OTG_FS_HCD_Init();
 8014b76:	f000 fc59 	bl	801542c <MX_USB_OTG_FS_HCD_Init>
	MX_SPI2_Init();
 8014b7a:	f000 fbe7 	bl	801534c <MX_SPI2_Init>
	//  MX_ICACHE_Init();
	MX_LPUART1_UART_Init();
 8014b7e:	f000 fa09 	bl	8014f94 <MX_LPUART1_UART_Init>
	MX_IWDG_Init();
 8014b82:	f000 f9e5 	bl	8014f50 <MX_IWDG_Init>
	MX_RTC_Init();
 8014b86:	f000 fb05 	bl	8015194 <MX_RTC_Init>
	//  MX_LPTIM1_Init();
	MX_CRC_Init();
 8014b8a:	f000 f981 	bl	8014e90 <MX_CRC_Init>
	//  MX_LPTIM2_Init();
	//  MX_LPTIM3_Init();
	/* USER CODE BEGIN 2 */

	HAL_Delay ( 3000 ); // kcs moved 3 seconds from main loop to here
 8014b8e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8014b92:	f001 fc77 	bl	8016484 <HAL_Delay>
	if (codeTest)
 8014b96:	7cfb      	ldrb	r3, [r7, #19]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d024      	beq.n	8014be6 <main+0x9a>
	{
		// testing loop
			for (int counter = 0; counter < 40; counter++)
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	617b      	str	r3, [r7, #20]
 8014ba0:	e01c      	b.n	8014bdc <main+0x90>
			{
				if(chargeCableReading())
 8014ba2:	f7f4 fe0f 	bl	80097c4 <chargeCableReading>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d004      	beq.n	8014bb6 <main+0x6a>
					PRINTF("Plugged in\r\n");
 8014bac:	4952      	ldr	r1, [pc, #328]	@ (8014cf8 <main+0x1ac>)
 8014bae:	2001      	movs	r0, #1
 8014bb0:	f7f2 f8e0 	bl	8006d74 <TraceSend>
 8014bb4:	e003      	b.n	8014bbe <main+0x72>
				else
					PRINTF("UnPlugged\r\n");
 8014bb6:	4951      	ldr	r1, [pc, #324]	@ (8014cfc <main+0x1b0>)
 8014bb8:	2001      	movs	r0, #1
 8014bba:	f7f2 f8db 	bl	8006d74 <TraceSend>
				HAL_Delay(3000);
 8014bbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8014bc2:	f001 fc5f 	bl	8016484 <HAL_Delay>
				Refresh_Watchdog;
 8014bc6:	484e      	ldr	r0, [pc, #312]	@ (8014d00 <main+0x1b4>)
 8014bc8:	f006 fb03 	bl	801b1d2 <HAL_IWDG_Refresh>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d001      	beq.n	8014bd6 <main+0x8a>
 8014bd2:	f000 fddf 	bl	8015794 <Error_Handler>
			for (int counter = 0; counter < 40; counter++)
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	617b      	str	r3, [r7, #20]
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	2b27      	cmp	r3, #39	@ 0x27
 8014be0:	dddf      	ble.n	8014ba2 <main+0x56>
			}

			codeTest = false;
 8014be2:	2300      	movs	r3, #0
 8014be4:	74fb      	strb	r3, [r7, #19]

	//	HAL_NVIC_DisableIRQ ( PIR_EXTI_IRQn );	// Turn off event
	//Need to add FW version KCS

	/* Clears Memory for Use */
	PACKAGE_Init(&memory);
 8014be6:	4847      	ldr	r0, [pc, #284]	@ (8014d04 <main+0x1b8>)
 8014be8:	f7ef fdc8 	bl	800477c <PACKAGE_Init>

	char fwVersion[] = "XPM_LowP_V0.5.0";
 8014bec:	4b46      	ldr	r3, [pc, #280]	@ (8014d08 <main+0x1bc>)
 8014bee:	463c      	mov	r4, r7
 8014bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// KCS change this in future to some sort of preprogrammed memory
	PRINTF("Firmware version is %s\r\n",fwVersion);
 8014bf6:	463b      	mov	r3, r7
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	4944      	ldr	r1, [pc, #272]	@ (8014d0c <main+0x1c0>)
 8014bfc:	2001      	movs	r0, #1
 8014bfe:	f7f2 f8b9 	bl	8006d74 <TraceSend>

	//	Boot Bank
	memory.Flash.currentFlashBank = getSwapBank();
 8014c02:	f7ef f823 	bl	8003c4c <getSwapBank>
 8014c06:	4603      	mov	r3, r0
 8014c08:	461a      	mov	r2, r3
 8014c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8014d04 <main+0x1b8>)
 8014c0c:	701a      	strb	r2, [r3, #0]
	PRINTF("Current Program Bank is %d\r\n",(uint8_t)memory.Flash.currentFlashBank );
 8014c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8014d04 <main+0x1b8>)
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	461a      	mov	r2, r3
 8014c14:	493e      	ldr	r1, [pc, #248]	@ (8014d10 <main+0x1c4>)
 8014c16:	2001      	movs	r0, #1
 8014c18:	f7f2 f8ac 	bl	8006d74 <TraceSend>

	bool connorTest = false;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	74bb      	strb	r3, [r7, #18]
		//		PRINTF("Time difference from now: %u\r\n", diffNow);
	}

	/* Initializes Device Logger */
#ifdef Log
	LOG_Init ();
 8014c20:	f7f1 fee8 	bl	80069f4 <LOG_Init>
	Log_Single ( LOG_START );
 8014c24:	483b      	ldr	r0, [pc, #236]	@ (8014d14 <main+0x1c8>)
 8014c26:	f7f1 ff41 	bl	8006aac <Log_Single>
#endif // Log

	//	Disable_Extra_Power ( &memory );
	/* Initializes Any Component Connected */
	Component_Initalizer ( &memory );
 8014c2a:	4836      	ldr	r0, [pc, #216]	@ (8014d04 <main+0x1b8>)
 8014c2c:	f7ef ff28 	bl	8004a80 <Component_Initalizer>
	//
	//		XPS_paramRetrieve(&memory);
	//
	//	}

	if (isWaitingforOTA( &memory))
 8014c30:	4834      	ldr	r0, [pc, #208]	@ (8014d04 <main+0x1b8>)
 8014c32:	f7f2 fc31 	bl	8007498 <isWaitingforOTA>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d00c      	beq.n	8014c56 <main+0x10a>
	{
		Enable_Modem(&memory);
 8014c3c:	4831      	ldr	r0, [pc, #196]	@ (8014d04 <main+0x1b8>)
 8014c3e:	f7f1 fa71 	bl	8006124 <Enable_Modem>
		PRINTF("Waiting For OTA\r\n");
 8014c42:	4935      	ldr	r1, [pc, #212]	@ (8014d18 <main+0x1cc>)
 8014c44:	2001      	movs	r0, #1
 8014c46:	f7f2 f895 	bl	8006d74 <TraceSend>
		setOTAfwAvailable(false); // clear OTA
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	f7fe fb26 	bl	801329c <setOTAfwAvailable>
		// call OTA process
		processQuickOTA( &memory );
 8014c50:	482c      	ldr	r0, [pc, #176]	@ (8014d04 <main+0x1b8>)
 8014c52:	f7f2 fc69 	bl	8007528 <processQuickOTA>
	}

	Enable_Modem(&memory);
 8014c56:	482b      	ldr	r0, [pc, #172]	@ (8014d04 <main+0x1b8>)
 8014c58:	f7f1 fa64 	bl	8006124 <Enable_Modem>
	PRINTF("Device configuration sending to server\r\n");
 8014c5c:	492f      	ldr	r1, [pc, #188]	@ (8014d1c <main+0x1d0>)
 8014c5e:	2001      	movs	r0, #1
 8014c60:	f7f2 f888 	bl	8006d74 <TraceSend>
	sendDeviceConfig(&memory, BOOT);
 8014c64:	2100      	movs	r1, #0
 8014c66:	4827      	ldr	r0, [pc, #156]	@ (8014d04 <main+0x1b8>)
 8014c68:	f7fd fbf0 	bl	801244c <sendDeviceConfig>
	if(gpsError)
 8014c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8014d20 <main+0x1d4>)
 8014c6e:	781b      	ldrb	r3, [r3, #0]
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d007      	beq.n	8014c84 <main+0x138>
	{
		PRINTF("GPS error, sending diagnostic to server\r\n");
 8014c74:	492b      	ldr	r1, [pc, #172]	@ (8014d24 <main+0x1d8>)
 8014c76:	2001      	movs	r0, #1
 8014c78:	f7f2 f87c 	bl	8006d74 <TraceSend>
		sendDiagnostic(&memory, "\"gps\":[\"time_sync_failed\",\"unknown_location\"]");
 8014c7c:	492a      	ldr	r1, [pc, #168]	@ (8014d28 <main+0x1dc>)
 8014c7e:	4821      	ldr	r0, [pc, #132]	@ (8014d04 <main+0x1b8>)
 8014c80:	f7fd fdf0 	bl	8012864 <sendDiagnostic>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{ /* IWDG Timer Restart */
		Refresh_Watchdog;
 8014c84:	481e      	ldr	r0, [pc, #120]	@ (8014d00 <main+0x1b4>)
 8014c86:	f006 faa4 	bl	801b1d2 <HAL_IWDG_Refresh>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d001      	beq.n	8014c94 <main+0x148>
 8014c90:	f000 fd80 	bl	8015794 <Error_Handler>

		HAL_Delay ( 2000 );
 8014c94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8014c98:	f001 fbf4 	bl	8016484 <HAL_Delay>
		//		memory.State = WAKE_STATE + PIC_UPDT + PIC_SAVE + BUZZER_TOGGLE;
		//		memory.State = WAKE_STATE + PIC_UPDT + PIC_SAVE + UPDATE_SERVER + PIC_SEND + BUZZER_TOGGLE;
		//		memory.State = SLEEP_STATE + PIC_UPDT + PIC_SAVE + UPDATE_SERVER + PIC_SEND + BUZZER_TOGGLE;

		Refresh_Watchdog;
 8014c9c:	4818      	ldr	r0, [pc, #96]	@ (8014d00 <main+0x1b4>)
 8014c9e:	f006 fa98 	bl	801b1d2 <HAL_IWDG_Refresh>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d001      	beq.n	8014cac <main+0x160>
 8014ca8:	f000 fd74 	bl	8015794 <Error_Handler>

		if (Dev_Mode == DEV_Mode_A || Dev_Mode == DEV_Mode_C)
 8014cac:	4b15      	ldr	r3, [pc, #84]	@ (8014d04 <main+0x1b8>)
 8014cae:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8014cb2:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d006      	beq.n	8014cc8 <main+0x17c>
 8014cba:	4b12      	ldr	r3, [pc, #72]	@ (8014d04 <main+0x1b8>)
 8014cbc:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8014cc0:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 8014cc4:	2b02      	cmp	r3, #2
 8014cc6:	d102      	bne.n	8014cce <main+0x182>
		{ /* Check if any Flag has Triggered */
			Update_State ( &memory );
 8014cc8:	480e      	ldr	r0, [pc, #56]	@ (8014d04 <main+0x1b8>)
 8014cca:	f7f0 f85b 	bl	8004d84 <Update_State>
		}

		if (Dev_Mode == DEV_Mode_B)
 8014cce:	4b0d      	ldr	r3, [pc, #52]	@ (8014d04 <main+0x1b8>)
 8014cd0:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8014cd4:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d1d3      	bne.n	8014c84 <main+0x138>
		{ /* Initializes Any Component at Fault */
			Component_Initalizer ( &memory );
 8014cdc:	4809      	ldr	r0, [pc, #36]	@ (8014d04 <main+0x1b8>)
 8014cde:	f7ef fecf 	bl	8004a80 <Component_Initalizer>
			Dev_Mode = Dev_Prev_Mode;
 8014ce2:	4b08      	ldr	r3, [pc, #32]	@ (8014d04 <main+0x1b8>)
 8014ce4:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8014ce8:	f893 2309 	ldrb.w	r2, [r3, #777]	@ 0x309
 8014cec:	4b05      	ldr	r3, [pc, #20]	@ (8014d04 <main+0x1b8>)
 8014cee:	f503 3378 	add.w	r3, r3, #253952	@ 0x3e000
 8014cf2:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
		Refresh_Watchdog;
 8014cf6:	e7c5      	b.n	8014c84 <main+0x138>
 8014cf8:	0802ff38 	.word	0x0802ff38
 8014cfc:	0802ff48 	.word	0x0802ff48
 8014d00:	2007d0bc 	.word	0x2007d0bc
 8014d04:	2007d870 	.word	0x2007d870
 8014d08:	08030044 	.word	0x08030044
 8014d0c:	0802ff54 	.word	0x0802ff54
 8014d10:	0802ff70 	.word	0x0802ff70
 8014d14:	0802ff90 	.word	0x0802ff90
 8014d18:	0802ffa8 	.word	0x0802ffa8
 8014d1c:	0802ffbc 	.word	0x0802ffbc
 8014d20:	20000355 	.word	0x20000355
 8014d24:	0802ffe8 	.word	0x0802ffe8
 8014d28:	08030014 	.word	0x08030014

08014d2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8014d2c:	b580      	push	{r7, lr}
 8014d2e:	b09e      	sub	sp, #120	@ 0x78
 8014d30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8014d32:	f107 0318 	add.w	r3, r7, #24
 8014d36:	2260      	movs	r2, #96	@ 0x60
 8014d38:	2100      	movs	r1, #0
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f012 fa18 	bl	8027170 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014d40:	463b      	mov	r3, r7
 8014d42:	2200      	movs	r2, #0
 8014d44:	601a      	str	r2, [r3, #0]
 8014d46:	605a      	str	r2, [r3, #4]
 8014d48:	609a      	str	r2, [r3, #8]
 8014d4a:	60da      	str	r2, [r3, #12]
 8014d4c:	611a      	str	r2, [r3, #16]
 8014d4e:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8014d50:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8014d54:	f007 ffc2 	bl	801ccdc <HAL_PWREx_ControlVoltageScaling>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d001      	beq.n	8014d62 <SystemClock_Config+0x36>
	{
		Error_Handler();
 8014d5e:	f000 fd19 	bl	8015794 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */

	RCC_OscInitStruct.OscillatorType = 	RCC_OSCILLATORTYPE_LSE;
 8014d62:	2304      	movs	r3, #4
 8014d64:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8014d66:	2381      	movs	r3, #129	@ 0x81
 8014d68:	623b      	str	r3, [r7, #32]
	//	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
	//	RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
	//	RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
	//	RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
	//	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8014d6a:	f107 0318 	add.w	r3, r7, #24
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f008 f95c 	bl	801d02c <HAL_RCC_OscConfig>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d001      	beq.n	8014d7e <SystemClock_Config+0x52>
	{
		Error_Handler();
 8014d7a:	f000 fd0b 	bl	8015794 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014d7e:	231f      	movs	r3, #31
 8014d80:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8014d82:	2300      	movs	r3, #0
 8014d84:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8014d86:	2300      	movs	r3, #0
 8014d88:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8014d92:	2300      	movs	r3, #0
 8014d94:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8014d96:	463b      	mov	r3, r7
 8014d98:	2100      	movs	r1, #0
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f009 f822 	bl	801dde4 <HAL_RCC_ClockConfig>
 8014da0:	4603      	mov	r3, r0
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d001      	beq.n	8014daa <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8014da6:	f000 fcf5 	bl	8015794 <Error_Handler>
	}

	/** Enable the force of MSIK in stop mode
	 */
	//	__HAL_RCC_MSIKSTOP_ENABLE();
}
 8014daa:	bf00      	nop
 8014dac:	3778      	adds	r7, #120	@ 0x78
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <SystemPower_Config>:
/**
 * @brief Power Configuration
 * @retval None
 */
static void SystemPower_Config(void)
{
 8014db2:	b580      	push	{r7, lr}
 8014db4:	af00      	add	r7, sp, #0
	/*
	 * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
	 */
	HAL_PWREx_DisableUCPDDeadBattery();
 8014db6:	f008 f929 	bl	801d00c <HAL_PWREx_DisableUCPDDeadBattery>

	/*
	 * PWR Privilege Configuration
	 */
	HAL_PWR_ConfigAttributes(PWR_ALL, PWR_NSEC_PRIV);
 8014dba:	2111      	movs	r1, #17
 8014dbc:	f24f 00ff 	movw	r0, #61695	@ 0xf0ff
 8014dc0:	f007 ff68 	bl	801cc94 <HAL_PWR_ConfigAttributes>
	/* PWR_S3WU_IRQn interrupt configuration */
	// Critical do not change
	HAL_NVIC_SetPriority(PWR_S3WU_IRQn, 1, 0);
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	2101      	movs	r1, #1
 8014dc8:	204d      	movs	r0, #77	@ 0x4d
 8014dca:	f003 fcda 	bl	8018782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PWR_S3WU_IRQn);
 8014dce:	204d      	movs	r0, #77	@ 0x4d
 8014dd0:	f003 fcf2 	bl	80187b8 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWR */
	//  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
	//  HAL_NVIC_EnableIRQ(RTC_IRQn);
	/* USER CODE END PWR */
}
 8014dd4:	bf00      	nop
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b088      	sub	sp, #32
 8014ddc:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8014dde:	4b29      	ldr	r3, [pc, #164]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014de0:	4a29      	ldr	r2, [pc, #164]	@ (8014e88 <MX_ADC1_Init+0xb0>)
 8014de2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8014de4:	4b27      	ldr	r3, [pc, #156]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014de6:	2200      	movs	r2, #0
 8014de8:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014dea:	4b26      	ldr	r3, [pc, #152]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014dec:	2204      	movs	r2, #4
 8014dee:	609a      	str	r2, [r3, #8]
	hadc1.Init.GainCompensation = 0;
 8014df0:	4b24      	ldr	r3, [pc, #144]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014df2:	2200      	movs	r2, #0
 8014df4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8014df6:	4b23      	ldr	r3, [pc, #140]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014df8:	2200      	movs	r2, #0
 8014dfa:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8014dfc:	4b21      	ldr	r3, [pc, #132]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014dfe:	2204      	movs	r2, #4
 8014e00:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8014e02:	4b20      	ldr	r3, [pc, #128]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e04:	2200      	movs	r2, #0
 8014e06:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8014e08:	4b1e      	ldr	r3, [pc, #120]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.NbrOfConversion = 1;
 8014e10:	4b1c      	ldr	r3, [pc, #112]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e12:	2201      	movs	r2, #1
 8014e14:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8014e16:	4b1b      	ldr	r3, [pc, #108]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e18:	2200      	movs	r2, #0
 8014e1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8014e1e:	4b19      	ldr	r3, [pc, #100]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e20:	2200      	movs	r2, #0
 8014e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8014e26:	4b17      	ldr	r3, [pc, #92]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e28:	2200      	movs	r2, #0
 8014e2a:	669a      	str	r2, [r3, #104]	@ 0x68
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8014e2c:	4b15      	ldr	r3, [pc, #84]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e2e:	2200      	movs	r2, #0
 8014e30:	645a      	str	r2, [r3, #68]	@ 0x44
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8014e32:	4b14      	ldr	r3, [pc, #80]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e34:	2200      	movs	r2, #0
 8014e36:	651a      	str	r2, [r3, #80]	@ 0x50
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8014e38:	4b12      	ldr	r3, [pc, #72]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 8014e3e:	4b11      	ldr	r3, [pc, #68]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e40:	2200      	movs	r2, #0
 8014e42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014e46:	480f      	ldr	r0, [pc, #60]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e48:	f001 fed2 	bl	8016bf0 <HAL_ADC_Init>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d001      	beq.n	8014e56 <MX_ADC1_Init+0x7e>
	{
		Error_Handler();
 8014e52:	f000 fc9f 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	ADC_ChannelConfTypeDef sConfig = {0};
 8014e56:	463b      	mov	r3, r7
 8014e58:	2220      	movs	r2, #32
 8014e5a:	2100      	movs	r1, #0
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f012 f987 	bl	8027170 <memset>

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8014e62:	4b0a      	ldr	r3, [pc, #40]	@ (8014e8c <MX_ADC1_Init+0xb4>)
 8014e64:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8014e66:	2306      	movs	r3, #6
 8014e68:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES;
 8014e6a:	2306      	movs	r3, #6
 8014e6c:	60bb      	str	r3, [r7, #8]
	sConfig.Offset = 0;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8014e72:	463b      	mov	r3, r7
 8014e74:	4619      	mov	r1, r3
 8014e76:	4803      	ldr	r0, [pc, #12]	@ (8014e84 <MX_ADC1_Init+0xac>)
 8014e78:	f002 fb20 	bl	80174bc <HAL_ADC_ConfigChannel>

	/* USER CODE END ADC1_Init 2 */
}
 8014e7c:	bf00      	nop
 8014e7e:	3720      	adds	r7, #32
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	2007cfb8 	.word	0x2007cfb8
 8014e88:	42028000 	.word	0x42028000
 8014e8c:	80000001 	.word	0x80000001

08014e90 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
void MX_CRC_Init(void)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8014e94:	4b0d      	ldr	r3, [pc, #52]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014e96:	4a0e      	ldr	r2, [pc, #56]	@ (8014ed0 <MX_CRC_Init+0x40>)
 8014e98:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8014e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8014ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8014ea6:	4b09      	ldr	r3, [pc, #36]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8014eac:	4b07      	ldr	r3, [pc, #28]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014eae:	2200      	movs	r2, #0
 8014eb0:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8014eb2:	4b06      	ldr	r3, [pc, #24]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8014eb8:	4804      	ldr	r0, [pc, #16]	@ (8014ecc <MX_CRC_Init+0x3c>)
 8014eba:	f003 fcab 	bl	8018814 <HAL_CRC_Init>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d001      	beq.n	8014ec8 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8014ec4:	f000 fc66 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 8014ec8:	bf00      	nop
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	2007d044 	.word	0x2007d044
 8014ed0:	40023000 	.word	0x40023000

08014ed4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8014ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014eda:	4a1c      	ldr	r2, [pc, #112]	@ (8014f4c <MX_I2C1_Init+0x78>)
 8014edc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000E14;
 8014ede:	4b1a      	ldr	r3, [pc, #104]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014ee0:	f640 6214 	movw	r2, #3604	@ 0xe14
 8014ee4:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8014ee6:	4b18      	ldr	r3, [pc, #96]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014ee8:	2200      	movs	r2, #0
 8014eea:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8014eec:	4b16      	ldr	r3, [pc, #88]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014eee:	2201      	movs	r2, #1
 8014ef0:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8014ef2:	4b15      	ldr	r3, [pc, #84]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8014ef8:	4b13      	ldr	r3, [pc, #76]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014efa:	2200      	movs	r2, #0
 8014efc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8014efe:	4b12      	ldr	r3, [pc, #72]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014f00:	2200      	movs	r2, #0
 8014f02:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8014f04:	4b10      	ldr	r3, [pc, #64]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014f06:	2200      	movs	r2, #0
 8014f08:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8014f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8014f10:	480d      	ldr	r0, [pc, #52]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014f12:	f005 f9f9 	bl	801a308 <HAL_I2C_Init>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d001      	beq.n	8014f20 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8014f1c:	f000 fc3a 	bl	8015794 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8014f20:	2100      	movs	r1, #0
 8014f22:	4809      	ldr	r0, [pc, #36]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014f24:	f006 f810 	bl	801af48 <HAL_I2CEx_ConfigAnalogFilter>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d001      	beq.n	8014f32 <MX_I2C1_Init+0x5e>
	{
		Error_Handler();
 8014f2e:	f000 fc31 	bl	8015794 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8014f32:	2100      	movs	r1, #0
 8014f34:	4804      	ldr	r0, [pc, #16]	@ (8014f48 <MX_I2C1_Init+0x74>)
 8014f36:	f006 f852 	bl	801afde <HAL_I2CEx_ConfigDigitalFilter>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d001      	beq.n	8014f44 <MX_I2C1_Init+0x70>
	{
		Error_Handler();
 8014f40:	f000 fc28 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8014f44:	bf00      	nop
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	2007d068 	.word	0x2007d068
 8014f4c:	40005400 	.word	0x40005400

08014f50 <MX_IWDG_Init>:
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
void MX_IWDG_Init(void)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 8014f54:	4b0d      	ldr	r3, [pc, #52]	@ (8014f8c <MX_IWDG_Init+0x3c>)
 8014f56:	4a0e      	ldr	r2, [pc, #56]	@ (8014f90 <MX_IWDG_Init+0x40>)
 8014f58:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_1024;
 8014f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8014f8c <MX_IWDG_Init+0x3c>)
 8014f5c:	2208      	movs	r2, #8
 8014f5e:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Window = 4095;
 8014f60:	4b0a      	ldr	r3, [pc, #40]	@ (8014f8c <MX_IWDG_Init+0x3c>)
 8014f62:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8014f66:	60da      	str	r2, [r3, #12]
	hiwdg.Init.Reload = 4095;
 8014f68:	4b08      	ldr	r3, [pc, #32]	@ (8014f8c <MX_IWDG_Init+0x3c>)
 8014f6a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8014f6e:	609a      	str	r2, [r3, #8]
	hiwdg.Init.EWI = 0;
 8014f70:	4b06      	ldr	r3, [pc, #24]	@ (8014f8c <MX_IWDG_Init+0x3c>)
 8014f72:	2200      	movs	r2, #0
 8014f74:	611a      	str	r2, [r3, #16]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8014f76:	4805      	ldr	r0, [pc, #20]	@ (8014f8c <MX_IWDG_Init+0x3c>)
 8014f78:	f006 f8be 	bl	801b0f8 <HAL_IWDG_Init>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d001      	beq.n	8014f86 <MX_IWDG_Init+0x36>
	{
		Error_Handler();
 8014f82:	f000 fc07 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */
}
 8014f86:	bf00      	nop
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	2007d0bc 	.word	0x2007d0bc
 8014f90:	40003000 	.word	0x40003000

08014f94 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_LPUART1_UART_Init(void)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8014f98:	4b1e      	ldr	r3, [pc, #120]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8015018 <MX_LPUART1_UART_Init+0x84>)
 8014f9c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8014f9e:	4b1d      	ldr	r3, [pc, #116]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8014fa4:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fa8:	2200      	movs	r2, #0
 8014faa:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8014fac:	4b19      	ldr	r3, [pc, #100]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fae:	2200      	movs	r2, #0
 8014fb0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8014fb2:	4b18      	ldr	r3, [pc, #96]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8014fb8:	4b16      	ldr	r3, [pc, #88]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fba:	220c      	movs	r2, #12
 8014fbc:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014fbe:	4b15      	ldr	r3, [pc, #84]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014fc4:	4b13      	ldr	r3, [pc, #76]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	61da      	str	r2, [r3, #28]
	//hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	//hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	//hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8014fca:	4812      	ldr	r0, [pc, #72]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fcc:	f00d fbb8 	bl	8022740 <HAL_UART_Init>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d001      	beq.n	8014fda <MX_LPUART1_UART_Init+0x46>
	{
		Error_Handler();
 8014fd6:	f000 fbdd 	bl	8015794 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014fda:	2100      	movs	r1, #0
 8014fdc:	480d      	ldr	r0, [pc, #52]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014fde:	f00f feaa 	bl	8024d36 <HAL_UARTEx_SetTxFifoThreshold>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d001      	beq.n	8014fec <MX_LPUART1_UART_Init+0x58>
	{
		Error_Handler();
 8014fe8:	f000 fbd4 	bl	8015794 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8014fec:	2100      	movs	r1, #0
 8014fee:	4809      	ldr	r0, [pc, #36]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8014ff0:	f00f fedf 	bl	8024db2 <HAL_UARTEx_SetRxFifoThreshold>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d001      	beq.n	8014ffe <MX_LPUART1_UART_Init+0x6a>
	{
		Error_Handler();
 8014ffa:	f000 fbcb 	bl	8015794 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8014ffe:	4805      	ldr	r0, [pc, #20]	@ (8015014 <MX_LPUART1_UART_Init+0x80>)
 8015000:	f00f fe60 	bl	8024cc4 <HAL_UARTEx_DisableFifoMode>
 8015004:	4603      	mov	r3, r0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d001      	beq.n	801500e <MX_LPUART1_UART_Init+0x7a>
	{
		Error_Handler();
 801500a:	f000 fbc3 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */
}
 801500e:	bf00      	nop
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	2007d1c0 	.word	0x2007d1c0
 8015018:	46002400 	.word	0x46002400

0801501c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8015020:	4b22      	ldr	r3, [pc, #136]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015022:	4a23      	ldr	r2, [pc, #140]	@ (80150b0 <MX_USART2_UART_Init+0x94>)
 8015024:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8015026:	4b21      	ldr	r3, [pc, #132]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 801502c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801502e:	4b1f      	ldr	r3, [pc, #124]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015030:	2200      	movs	r2, #0
 8015032:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8015034:	4b1d      	ldr	r3, [pc, #116]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015036:	2200      	movs	r2, #0
 8015038:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 801503a:	4b1c      	ldr	r3, [pc, #112]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 801503c:	2200      	movs	r2, #0
 801503e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8015040:	4b1a      	ldr	r3, [pc, #104]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015042:	220c      	movs	r2, #12
 8015044:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8015046:	4b19      	ldr	r3, [pc, #100]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015048:	2200      	movs	r2, #0
 801504a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801504c:	4b17      	ldr	r3, [pc, #92]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 801504e:	2200      	movs	r2, #0
 8015050:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8015052:	4b16      	ldr	r3, [pc, #88]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015054:	2200      	movs	r2, #0
 8015056:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8015058:	4b14      	ldr	r3, [pc, #80]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 801505a:	2200      	movs	r2, #0
 801505c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801505e:	4b13      	ldr	r3, [pc, #76]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015060:	2200      	movs	r2, #0
 8015062:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8015064:	4811      	ldr	r0, [pc, #68]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015066:	f00d fb6b 	bl	8022740 <HAL_UART_Init>
 801506a:	4603      	mov	r3, r0
 801506c:	2b00      	cmp	r3, #0
 801506e:	d001      	beq.n	8015074 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8015070:	f000 fb90 	bl	8015794 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8015074:	2100      	movs	r1, #0
 8015076:	480d      	ldr	r0, [pc, #52]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 8015078:	f00f fe5d 	bl	8024d36 <HAL_UARTEx_SetTxFifoThreshold>
 801507c:	4603      	mov	r3, r0
 801507e:	2b00      	cmp	r3, #0
 8015080:	d001      	beq.n	8015086 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8015082:	f000 fb87 	bl	8015794 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8015086:	2100      	movs	r1, #0
 8015088:	4808      	ldr	r0, [pc, #32]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 801508a:	f00f fe92 	bl	8024db2 <HAL_UARTEx_SetRxFifoThreshold>
 801508e:	4603      	mov	r3, r0
 8015090:	2b00      	cmp	r3, #0
 8015092:	d001      	beq.n	8015098 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8015094:	f000 fb7e 	bl	8015794 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8015098:	4804      	ldr	r0, [pc, #16]	@ (80150ac <MX_USART2_UART_Init+0x90>)
 801509a:	f00f fe13 	bl	8024cc4 <HAL_UARTEx_DisableFifoMode>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 80150a4:	f000 fb76 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80150a8:	bf00      	nop
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	2007d254 	.word	0x2007d254
 80150b0:	40004400 	.word	0x40004400

080150b4 <MX_OCTOSPI1_Init>:
 * @brief OCTOSPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_OCTOSPI1_Init(void)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b088      	sub	sp, #32
 80150b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OCTOSPI1_Init 0 */

	/* USER CODE END OCTOSPI1_Init 0 */

	OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80150ba:	f107 0308 	add.w	r3, r7, #8
 80150be:	2200      	movs	r2, #0
 80150c0:	601a      	str	r2, [r3, #0]
 80150c2:	605a      	str	r2, [r3, #4]
 80150c4:	609a      	str	r2, [r3, #8]
 80150c6:	60da      	str	r2, [r3, #12]
 80150c8:	611a      	str	r2, [r3, #16]
 80150ca:	615a      	str	r2, [r3, #20]
	HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80150cc:	463b      	mov	r3, r7
 80150ce:	2200      	movs	r2, #0
 80150d0:	601a      	str	r2, [r3, #0]
 80150d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN OCTOSPI1_Init 1 */

	/* USER CODE END OCTOSPI1_Init 1 */
	/* OCTOSPI1 parameter configuration*/
	hospi1.Instance = OCTOSPI1;
 80150d4:	4b2d      	ldr	r3, [pc, #180]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150d6:	4a2e      	ldr	r2, [pc, #184]	@ (8015190 <MX_OCTOSPI1_Init+0xdc>)
 80150d8:	601a      	str	r2, [r3, #0]
	hospi1.Init.FifoThreshold = 1;
 80150da:	4b2c      	ldr	r3, [pc, #176]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150dc:	2201      	movs	r2, #1
 80150de:	605a      	str	r2, [r3, #4]
	hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80150e0:	4b2a      	ldr	r3, [pc, #168]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150e2:	2200      	movs	r2, #0
 80150e4:	609a      	str	r2, [r3, #8]
	hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80150e6:	4b29      	ldr	r3, [pc, #164]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150e8:	2200      	movs	r2, #0
 80150ea:	60da      	str	r2, [r3, #12]
	hospi1.Init.DeviceSize = 24;
 80150ec:	4b27      	ldr	r3, [pc, #156]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150ee:	2218      	movs	r2, #24
 80150f0:	611a      	str	r2, [r3, #16]
	hospi1.Init.ChipSelectHighTime = 1;
 80150f2:	4b26      	ldr	r3, [pc, #152]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150f4:	2201      	movs	r2, #1
 80150f6:	615a      	str	r2, [r3, #20]
	hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80150f8:	4b24      	ldr	r3, [pc, #144]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 80150fa:	2200      	movs	r2, #0
 80150fc:	619a      	str	r2, [r3, #24]
	hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80150fe:	4b23      	ldr	r3, [pc, #140]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015100:	2200      	movs	r2, #0
 8015102:	61da      	str	r2, [r3, #28]
	hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8015104:	4b21      	ldr	r3, [pc, #132]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015106:	2200      	movs	r2, #0
 8015108:	621a      	str	r2, [r3, #32]
	hospi1.Init.ClockPrescaler = 1;
 801510a:	4b20      	ldr	r3, [pc, #128]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 801510c:	2201      	movs	r2, #1
 801510e:	625a      	str	r2, [r3, #36]	@ 0x24
	hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8015110:	4b1e      	ldr	r3, [pc, #120]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015112:	2200      	movs	r2, #0
 8015114:	629a      	str	r2, [r3, #40]	@ 0x28
	hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8015116:	4b1d      	ldr	r3, [pc, #116]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015118:	2200      	movs	r2, #0
 801511a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hospi1.Init.ChipSelectBoundary = 0;
 801511c:	4b1b      	ldr	r3, [pc, #108]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 801511e:	2200      	movs	r2, #0
 8015120:	631a      	str	r2, [r3, #48]	@ 0x30
	hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8015122:	4b1a      	ldr	r3, [pc, #104]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015124:	2208      	movs	r2, #8
 8015126:	635a      	str	r2, [r3, #52]	@ 0x34
	hospi1.Init.MaxTran = 0;
 8015128:	4b18      	ldr	r3, [pc, #96]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 801512a:	2200      	movs	r2, #0
 801512c:	639a      	str	r2, [r3, #56]	@ 0x38
	hospi1.Init.Refresh = 0;
 801512e:	4b17      	ldr	r3, [pc, #92]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015130:	2200      	movs	r2, #0
 8015132:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8015134:	4815      	ldr	r0, [pc, #84]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015136:	f006 fa5b 	bl	801b5f0 <HAL_OSPI_Init>
 801513a:	4603      	mov	r3, r0
 801513c:	2b00      	cmp	r3, #0
 801513e:	d001      	beq.n	8015144 <MX_OCTOSPI1_Init+0x90>
	{
		Error_Handler();
 8015140:	f000 fb28 	bl	8015794 <Error_Handler>
	}
	sOspiManagerCfg.ClkPort = 1;
 8015144:	2301      	movs	r3, #1
 8015146:	60bb      	str	r3, [r7, #8]
	sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8015148:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 801514c:	617b      	str	r3, [r7, #20]
	if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801514e:	f107 0308 	add.w	r3, r7, #8
 8015152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8015156:	4619      	mov	r1, r3
 8015158:	480c      	ldr	r0, [pc, #48]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 801515a:	f006 fd79 	bl	801bc50 <HAL_OSPIM_Config>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <MX_OCTOSPI1_Init+0xb4>
	{
		Error_Handler();
 8015164:	f000 fb16 	bl	8015794 <Error_Handler>
	}
	HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8015168:	2300      	movs	r3, #0
 801516a:	603b      	str	r3, [r7, #0]
	HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 801516c:	2300      	movs	r3, #0
 801516e:	607b      	str	r3, [r7, #4]
	if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8015170:	463b      	mov	r3, r7
 8015172:	4619      	mov	r1, r3
 8015174:	4805      	ldr	r0, [pc, #20]	@ (801518c <MX_OCTOSPI1_Init+0xd8>)
 8015176:	f007 fce3 	bl	801cb40 <HAL_OSPI_DLYB_SetConfig>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d001      	beq.n	8015184 <MX_OCTOSPI1_Init+0xd0>
	{
		Error_Handler();
 8015180:	f000 fb08 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN OCTOSPI1_Init 2 */

	/* USER CODE END OCTOSPI1_Init 2 */
}
 8015184:	bf00      	nop
 8015186:	3720      	adds	r7, #32
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	2007d2e8 	.word	0x2007d2e8
 8015190:	420d1400 	.word	0x420d1400

08015194 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
void MX_RTC_Init( void )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b09e      	sub	sp, #120	@ 0x78
 8015198:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_PrivilegeStateTypeDef privilegeState = {0};
 801519a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801519e:	2200      	movs	r2, #0
 80151a0:	601a      	str	r2, [r3, #0]
 80151a2:	605a      	str	r2, [r3, #4]
 80151a4:	609a      	str	r2, [r3, #8]
 80151a6:	60da      	str	r2, [r3, #12]
 80151a8:	611a      	str	r2, [r3, #16]
 80151aa:	615a      	str	r2, [r3, #20]
 80151ac:	619a      	str	r2, [r3, #24]
	RTC_TimeTypeDef sTime = {0};
 80151ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80151b2:	2200      	movs	r2, #0
 80151b4:	601a      	str	r2, [r3, #0]
 80151b6:	605a      	str	r2, [r3, #4]
 80151b8:	609a      	str	r2, [r3, #8]
 80151ba:	60da      	str	r2, [r3, #12]
 80151bc:	611a      	str	r2, [r3, #16]
 80151be:	615a      	str	r2, [r3, #20]
 80151c0:	619a      	str	r2, [r3, #24]
	RTC_DateTypeDef sDate = {0};
 80151c2:	2300      	movs	r3, #0
 80151c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RTC_AlarmTypeDef sAlarm = {0};
 80151c6:	1d3b      	adds	r3, r7, #4
 80151c8:	2238      	movs	r2, #56	@ 0x38
 80151ca:	2100      	movs	r1, #0
 80151cc:	4618      	mov	r0, r3
 80151ce:	f011 ffcf 	bl	8027170 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80151d2:	4b5a      	ldr	r3, [pc, #360]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151d4:	4a5a      	ldr	r2, [pc, #360]	@ (8015340 <MX_RTC_Init+0x1ac>)
 80151d6:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80151d8:	4b58      	ldr	r3, [pc, #352]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151da:	2200      	movs	r2, #0
 80151dc:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 80151de:	4b57      	ldr	r3, [pc, #348]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151e0:	227f      	movs	r2, #127	@ 0x7f
 80151e2:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 80151e4:	4b55      	ldr	r3, [pc, #340]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151e6:	22ff      	movs	r2, #255	@ 0xff
 80151e8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80151ea:	4b54      	ldr	r3, [pc, #336]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80151f0:	4b52      	ldr	r3, [pc, #328]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151f2:	2200      	movs	r2, #0
 80151f4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80151f6:	4b51      	ldr	r3, [pc, #324]	@ (801533c <MX_RTC_Init+0x1a8>)
 80151f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80151fc:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80151fe:	4b4f      	ldr	r3, [pc, #316]	@ (801533c <MX_RTC_Init+0x1a8>)
 8015200:	2200      	movs	r2, #0
 8015202:	621a      	str	r2, [r3, #32]
	hrtc.Init.BinMode = RTC_BINARY_NONE;
 8015204:	4b4d      	ldr	r3, [pc, #308]	@ (801533c <MX_RTC_Init+0x1a8>)
 8015206:	2200      	movs	r2, #0
 8015208:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801520a:	484c      	ldr	r0, [pc, #304]	@ (801533c <MX_RTC_Init+0x1a8>)
 801520c:	f00b fe52 	bl	8020eb4 <HAL_RTC_Init>
 8015210:	4603      	mov	r3, r0
 8015212:	2b00      	cmp	r3, #0
 8015214:	d001      	beq.n	801521a <MX_RTC_Init+0x86>
	{
		Error_Handler();
 8015216:	f000 fabd 	bl	8015794 <Error_Handler>
	}
	privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 801521a:	2300      	movs	r3, #0
 801521c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	//privilegeState.rtcPrivilegeFeatures = RTC_PRIVILEGE_FEATURE_WUT;
	privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 801521e:	2300      	movs	r3, #0
 8015220:	66bb      	str	r3, [r7, #104]	@ 0x68
	privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8015222:	2300      	movs	r3, #0
 8015224:	66fb      	str	r3, [r7, #108]	@ 0x6c
	privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8015226:	2300      	movs	r3, #0
 8015228:	673b      	str	r3, [r7, #112]	@ 0x70
	if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 801522a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801522e:	4619      	mov	r1, r3
 8015230:	4842      	ldr	r0, [pc, #264]	@ (801533c <MX_RTC_Init+0x1a8>)
 8015232:	f00c fdd9 	bl	8021de8 <HAL_RTCEx_PrivilegeModeSet>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d001      	beq.n	8015240 <MX_RTC_Init+0xac>
	{
		Error_Handler();
 801523c:	f000 faaa 	bl	8015794 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x23;
 8015240:	2323      	movs	r3, #35	@ 0x23
 8015242:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	sTime.Minutes = 0x0;
 8015246:	2300      	movs	r3, #0
 8015248:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	sTime.Seconds = 0x0;
 801524c:	2300      	movs	r3, #0
 801524e:	647b      	str	r3, [r7, #68]	@ 0x44
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8015250:	2300      	movs	r3, #0
 8015252:	657b      	str	r3, [r7, #84]	@ 0x54
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8015254:	2300      	movs	r3, #0
 8015256:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8015258:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801525c:	2201      	movs	r2, #1
 801525e:	4619      	mov	r1, r3
 8015260:	4836      	ldr	r0, [pc, #216]	@ (801533c <MX_RTC_Init+0x1a8>)
 8015262:	f00b ff3f 	bl	80210e4 <HAL_RTC_SetTime>
 8015266:	4603      	mov	r3, r0
 8015268:	2b00      	cmp	r3, #0
 801526a:	d001      	beq.n	8015270 <MX_RTC_Init+0xdc>
	{
		Error_Handler();
 801526c:	f000 fa92 	bl	8015794 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8015270:	2303      	movs	r3, #3
 8015272:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	sDate.Month = RTC_MONTH_AUGUST;
 8015276:	2308      	movs	r3, #8
 8015278:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	sDate.Date = 0x31;
 801527c:	2331      	movs	r3, #49	@ 0x31
 801527e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	sDate.Year = 0x23;
 8015282:	2323      	movs	r3, #35	@ 0x23
 8015284:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8015288:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801528c:	2201      	movs	r2, #1
 801528e:	4619      	mov	r1, r3
 8015290:	482a      	ldr	r0, [pc, #168]	@ (801533c <MX_RTC_Init+0x1a8>)
 8015292:	f00c f837 	bl	8021304 <HAL_RTC_SetDate>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d001      	beq.n	80152a0 <MX_RTC_Init+0x10c>
	{
		Error_Handler();
 801529c:	f000 fa7a 	bl	8015794 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x08;  //GAv changed for testing
 80152a0:	2308      	movs	r3, #8
 80152a2:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x00;  //GAV changed for testing
 80152a4:	2300      	movs	r3, #0
 80152a6:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0x0;
 80152a8:	2300      	movs	r3, #0
 80152aa:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80152ac:	2300      	movs	r3, #0
 80152ae:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_SECONDS|RTC_ALARMMASK_MINUTES;  //GAV changed for testing
 80152b0:	4b24      	ldr	r3, [pc, #144]	@ (8015344 <MX_RTC_Init+0x1b0>)
 80152b2:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80152b4:	2300      	movs	r3, #0
 80152b6:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80152b8:	2300      	movs	r3, #0
 80152ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sAlarm.AlarmDateWeekDay = 0x1;
 80152bc:	2301      	movs	r3, #1
 80152be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sAlarm.Alarm = RTC_ALARM_A;
 80152c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80152c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80152c8:	1d3b      	adds	r3, r7, #4
 80152ca:	2201      	movs	r2, #1
 80152cc:	4619      	mov	r1, r3
 80152ce:	481b      	ldr	r0, [pc, #108]	@ (801533c <MX_RTC_Init+0x1a8>)
 80152d0:	f00c f8ec 	bl	80214ac <HAL_RTC_SetAlarm_IT>
 80152d4:	4603      	mov	r3, r0
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d001      	beq.n	80152de <MX_RTC_Init+0x14a>
	{
		Error_Handler();
 80152da:	f000 fa5b 	bl	8015794 <Error_Handler>
	}

	/** Enable the Alarm B
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 80152de:	2300      	movs	r3, #0
 80152e0:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0x3;
 80152e2:	2303      	movs	r3, #3
 80152e4:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 80152e6:	4b18      	ldr	r3, [pc, #96]	@ (8015348 <MX_RTC_Init+0x1b4>)
 80152e8:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80152ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80152ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 80152f0:	2301      	movs	r3, #1
 80152f2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sAlarm.Alarm = RTC_ALARM_B;
 80152f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80152fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80152fc:	1d3b      	adds	r3, r7, #4
 80152fe:	2201      	movs	r2, #1
 8015300:	4619      	mov	r1, r3
 8015302:	480e      	ldr	r0, [pc, #56]	@ (801533c <MX_RTC_Init+0x1a8>)
 8015304:	f00c f8d2 	bl	80214ac <HAL_RTC_SetAlarm_IT>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d001      	beq.n	8015312 <MX_RTC_Init+0x17e>
	{
		Error_Handler();
 801530e:	f000 fa41 	bl	8015794 <Error_Handler>
	}
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8015312:	2300      	movs	r3, #0
 8015314:	2200      	movs	r2, #0
 8015316:	2100      	movs	r1, #0
 8015318:	4808      	ldr	r0, [pc, #32]	@ (801533c <MX_RTC_Init+0x1a8>)
 801531a:	f00c fbbb 	bl	8021a94 <HAL_RTCEx_SetWakeUpTimer_IT>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d001      	beq.n	8015328 <MX_RTC_Init+0x194>
	{
		Error_Handler();
 8015324:	f000 fa36 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */
	HAL_RTC_DeactivateAlarm ( &hrtc , RTC_ALARM_B );
 8015328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801532c:	4803      	ldr	r0, [pc, #12]	@ (801533c <MX_RTC_Init+0x1a8>)
 801532e:	f00c f9bf 	bl	80216b0 <HAL_RTC_DeactivateAlarm>
	/* USER CODE END RTC_Init 2 */

}
 8015332:	bf00      	nop
 8015334:	3778      	adds	r7, #120	@ 0x78
 8015336:	46bd      	mov	sp, r7
 8015338:	bd80      	pop	{r7, pc}
 801533a:	bf00      	nop
 801533c:	2007d344 	.word	0x2007d344
 8015340:	46007800 	.word	0x46007800
 8015344:	80008080 	.word	0x80008080
 8015348:	80800000 	.word	0x80800000

0801534c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI2_Init(void)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 0 */

	/* USER CODE END SPI2_Init 0 */

	SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8015352:	1d3b      	adds	r3, r7, #4
 8015354:	2200      	movs	r2, #0
 8015356:	601a      	str	r2, [r3, #0]
 8015358:	605a      	str	r2, [r3, #4]
 801535a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 801535c:	4b31      	ldr	r3, [pc, #196]	@ (8015424 <MX_SPI2_Init+0xd8>)
 801535e:	4a32      	ldr	r2, [pc, #200]	@ (8015428 <MX_SPI2_Init+0xdc>)
 8015360:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8015362:	4b30      	ldr	r3, [pc, #192]	@ (8015424 <MX_SPI2_Init+0xd8>)
 8015364:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8015368:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801536a:	4b2e      	ldr	r3, [pc, #184]	@ (8015424 <MX_SPI2_Init+0xd8>)
 801536c:	2200      	movs	r2, #0
 801536e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8015370:	4b2c      	ldr	r3, [pc, #176]	@ (8015424 <MX_SPI2_Init+0xd8>)
 8015372:	2207      	movs	r2, #7
 8015374:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8015376:	4b2b      	ldr	r3, [pc, #172]	@ (8015424 <MX_SPI2_Init+0xd8>)
 8015378:	2200      	movs	r2, #0
 801537a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 801537c:	4b29      	ldr	r3, [pc, #164]	@ (8015424 <MX_SPI2_Init+0xd8>)
 801537e:	2200      	movs	r2, #0
 8015380:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8015382:	4b28      	ldr	r3, [pc, #160]	@ (8015424 <MX_SPI2_Init+0xd8>)
 8015384:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8015388:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801538a:	4b26      	ldr	r3, [pc, #152]	@ (8015424 <MX_SPI2_Init+0xd8>)
 801538c:	2200      	movs	r2, #0
 801538e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8015390:	4b24      	ldr	r3, [pc, #144]	@ (8015424 <MX_SPI2_Init+0xd8>)
 8015392:	2200      	movs	r2, #0
 8015394:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8015396:	4b23      	ldr	r3, [pc, #140]	@ (8015424 <MX_SPI2_Init+0xd8>)
 8015398:	2200      	movs	r2, #0
 801539a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801539c:	4b21      	ldr	r3, [pc, #132]	@ (8015424 <MX_SPI2_Init+0xd8>)
 801539e:	2200      	movs	r2, #0
 80153a0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 0x7;
 80153a2:	4b20      	ldr	r3, [pc, #128]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153a4:	2207      	movs	r2, #7
 80153a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80153a8:	4b1e      	ldr	r3, [pc, #120]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153aa:	2200      	movs	r2, #0
 80153ac:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80153ae:	4b1d      	ldr	r3, [pc, #116]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153b0:	2200      	movs	r2, #0
 80153b2:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80153b4:	4b1b      	ldr	r3, [pc, #108]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153b6:	2200      	movs	r2, #0
 80153b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80153ba:	4b1a      	ldr	r3, [pc, #104]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153bc:	2200      	movs	r2, #0
 80153be:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80153c0:	4b18      	ldr	r3, [pc, #96]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80153c6:	4b17      	ldr	r3, [pc, #92]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153c8:	2200      	movs	r2, #0
 80153ca:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 80153cc:	4b15      	ldr	r3, [pc, #84]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80153d2:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80153d4:	4b13      	ldr	r3, [pc, #76]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153d6:	2200      	movs	r2, #0
 80153d8:	659a      	str	r2, [r3, #88]	@ 0x58
	hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80153da:	4b12      	ldr	r3, [pc, #72]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153dc:	2200      	movs	r2, #0
 80153de:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_LOW;
 80153e0:	4b10      	ldr	r3, [pc, #64]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80153e6:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80153e8:	480e      	ldr	r0, [pc, #56]	@ (8015424 <MX_SPI2_Init+0xd8>)
 80153ea:	f00c fd2b 	bl	8021e44 <HAL_SPI_Init>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d001      	beq.n	80153f8 <MX_SPI2_Init+0xac>
	{
		Error_Handler();
 80153f4:	f000 f9ce 	bl	8015794 <Error_Handler>
	}
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80153f8:	2300      	movs	r3, #0
 80153fa:	607b      	str	r3, [r7, #4]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80153fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8015400:	60bb      	str	r3, [r7, #8]
	HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8015402:	2300      	movs	r3, #0
 8015404:	60fb      	str	r3, [r7, #12]
	if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8015406:	1d3b      	adds	r3, r7, #4
 8015408:	4619      	mov	r1, r3
 801540a:	4806      	ldr	r0, [pc, #24]	@ (8015424 <MX_SPI2_Init+0xd8>)
 801540c:	f00d f957 	bl	80226be <HAL_SPIEx_SetConfigAutonomousMode>
 8015410:	4603      	mov	r3, r0
 8015412:	2b00      	cmp	r3, #0
 8015414:	d001      	beq.n	801541a <MX_SPI2_Init+0xce>
	{
		Error_Handler();
 8015416:	f000 f9bd 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 801541a:	bf00      	nop
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	2007d3dc 	.word	0x2007d3dc
 8015428:	40003800 	.word	0x40003800

0801542c <MX_USB_OTG_FS_HCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
void MX_USB_OTG_FS_HCD_Init(void)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015430:	4b0f      	ldr	r3, [pc, #60]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8015432:	4a10      	ldr	r2, [pc, #64]	@ (8015474 <MX_USB_OTG_FS_HCD_Init+0x48>)
 8015434:	601a      	str	r2, [r3, #0]
	hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8015436:	4b0e      	ldr	r3, [pc, #56]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8015438:	220c      	movs	r2, #12
 801543a:	609a      	str	r2, [r3, #8]
	hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801543c:	4b0c      	ldr	r3, [pc, #48]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 801543e:	2201      	movs	r2, #1
 8015440:	611a      	str	r2, [r3, #16]
	hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015442:	4b0b      	ldr	r3, [pc, #44]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8015444:	2200      	movs	r2, #0
 8015446:	60da      	str	r2, [r3, #12]
	hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015448:	4b09      	ldr	r3, [pc, #36]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 801544a:	2202      	movs	r2, #2
 801544c:	619a      	str	r2, [r3, #24]
	hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801544e:	4b08      	ldr	r3, [pc, #32]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8015450:	2200      	movs	r2, #0
 8015452:	61da      	str	r2, [r3, #28]
	hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015454:	4b06      	ldr	r3, [pc, #24]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 8015456:	2200      	movs	r2, #0
 8015458:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801545a:	4805      	ldr	r0, [pc, #20]	@ (8015470 <MX_USB_OTG_FS_HCD_Init+0x44>)
 801545c:	f004 fef2 	bl	801a244 <HAL_HCD_Init>
 8015460:	4603      	mov	r3, r0
 8015462:	2b00      	cmp	r3, #0
 8015464:	d001      	beq.n	801546a <MX_USB_OTG_FS_HCD_Init+0x3e>
	{
		Error_Handler();
 8015466:	f000 f995 	bl	8015794 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 801546a:	bf00      	nop
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop
 8015470:	2007d46c 	.word	0x2007d46c
 8015474:	42040000 	.word	0x42040000

08015478 <MX_GPIO_Init>:
 * @param None
 * @retval None
 */

void MX_GPIO_Init(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b08a      	sub	sp, #40	@ 0x28
 801547c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801547e:	f107 0314 	add.w	r3, r7, #20
 8015482:	2200      	movs	r2, #0
 8015484:	601a      	str	r2, [r3, #0]
 8015486:	605a      	str	r2, [r3, #4]
 8015488:	609a      	str	r2, [r3, #8]
 801548a:	60da      	str	r2, [r3, #12]
 801548c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801548e:	4bb2      	ldr	r3, [pc, #712]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 8015490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015494:	4ab0      	ldr	r2, [pc, #704]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 8015496:	f043 0304 	orr.w	r3, r3, #4
 801549a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 801549e:	4bae      	ldr	r3, [pc, #696]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154a4:	f003 0304 	and.w	r3, r3, #4
 80154a8:	613b      	str	r3, [r7, #16]
 80154aa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80154ac:	4baa      	ldr	r3, [pc, #680]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154b2:	4aa9      	ldr	r2, [pc, #676]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154b4:	f043 0301 	orr.w	r3, r3, #1
 80154b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80154bc:	4ba6      	ldr	r3, [pc, #664]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154c2:	f003 0301 	and.w	r3, r3, #1
 80154c6:	60fb      	str	r3, [r7, #12]
 80154c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80154ca:	4ba3      	ldr	r3, [pc, #652]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154d0:	4aa1      	ldr	r2, [pc, #644]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154d2:	f043 0302 	orr.w	r3, r3, #2
 80154d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80154da:	4b9f      	ldr	r3, [pc, #636]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154e0:	f003 0302 	and.w	r3, r3, #2
 80154e4:	60bb      	str	r3, [r7, #8]
 80154e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80154e8:	4b9b      	ldr	r3, [pc, #620]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154ee:	4a9a      	ldr	r2, [pc, #616]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154f0:	f043 0308 	orr.w	r3, r3, #8
 80154f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80154f8:	4b97      	ldr	r3, [pc, #604]	@ (8015758 <MX_GPIO_Init+0x2e0>)
 80154fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80154fe:	f003 0308 	and.w	r3, r3, #8
 8015502:	607b      	str	r3, [r7, #4]
 8015504:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|Camera_CS_Pin|Cell_Enable_Pin
 8015506:	2201      	movs	r2, #1
 8015508:	f641 4184 	movw	r1, #7300	@ 0x1c84
 801550c:	4893      	ldr	r0, [pc, #588]	@ (801575c <MX_GPIO_Init+0x2e4>)
 801550e:	f004 fe41 	bl	801a194 <HAL_GPIO_WritePin>
			|USB_Power_Enable_Pin|Backup_Charge_Enable_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MEM_CS_Pin|Camera_Enable_Pin, GPIO_PIN_SET);
 8015512:	2201      	movs	r2, #1
 8015514:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8015518:	4891      	ldr	r0, [pc, #580]	@ (8015760 <MX_GPIO_Init+0x2e8>)
 801551a:	f004 fe3b 	bl	801a194 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Charge_set_1_Pin|BPS_CE_Pin|Charge_Disable_Pin|Sky_Reset_Pin, GPIO_PIN_RESET);
 801551e:	2200      	movs	r2, #0
 8015520:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8015524:	488d      	ldr	r0, [pc, #564]	@ (801575c <MX_GPIO_Init+0x2e4>)
 8015526:	f004 fe35 	bl	801a194 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, USB_Power_Switch_On_Pin|Sky_On_Off_Sw_Pin, GPIO_PIN_SET);
 801552a:	2201      	movs	r2, #1
 801552c:	2124      	movs	r1, #36	@ 0x24
 801552e:	488d      	ldr	r0, [pc, #564]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 8015530:	f004 fe30 	bl	801a194 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|Charge_set_2_Pin|Cell_DVS_Pin, GPIO_PIN_RESET);
 8015534:	2200      	movs	r2, #0
 8015536:	f44f 5148 	mov.w	r1, #12800	@ 0x3200
 801553a:	488a      	ldr	r0, [pc, #552]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 801553c:	f004 fe2a 	bl	801a194 <HAL_GPIO_WritePin>
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  // Assuming you're using GPIOA, adjust as necessary


	GPIO_InitStruct.Pin = INT1_Pin;
 8015540:	2320      	movs	r3, #32
 8015542:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;  // Or as needed (IT_RISING, IT_FALLING, etc.)
 8015544:	4b88      	ldr	r3, [pc, #544]	@ (8015768 <MX_GPIO_Init+0x2f0>)
 8015546:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;  // Or GPIO_PULLDOWN if needed
 8015548:	2300      	movs	r3, #0
 801554a:	61fb      	str	r3, [r7, #28]
 //   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  // Assuming you're using GPIOA, adjust as necessary
 801554c:	f107 0314 	add.w	r3, r7, #20
 8015550:	4619      	mov	r1, r3
 8015552:	4883      	ldr	r0, [pc, #524]	@ (8015760 <MX_GPIO_Init+0x2e8>)
 8015554:	f004 fb50 	bl	8019bf8 <HAL_GPIO_Init>
	/*Configure GPIO pin : INT2_Pin */
	GPIO_InitStruct.Pin = INT2_Pin;
 8015558:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801555c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801555e:	4b82      	ldr	r3, [pc, #520]	@ (8015768 <MX_GPIO_Init+0x2f0>)
 8015560:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015562:	2300      	movs	r3, #0
 8015564:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(INT2_GPIO_Port, &GPIO_InitStruct);
 8015566:	f107 0314 	add.w	r3, r7, #20
 801556a:	4619      	mov	r1, r3
 801556c:	487b      	ldr	r0, [pc, #492]	@ (801575c <MX_GPIO_Init+0x2e4>)
 801556e:	f004 fb43 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CS_Pin Sky_Reset_Pin Charge_Disable_Pin Cell_Enable_Pin
                           USB_Power_Enable_Pin Backup_Charge_Enable_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin|Sky_Reset_Pin|Charge_Disable_Pin|Cell_Enable_Pin
 8015572:	f641 5344 	movw	r3, #7492	@ 0x1d44
 8015576:	617b      	str	r3, [r7, #20]
			|USB_Power_Enable_Pin|Backup_Charge_Enable_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015578:	2301      	movs	r3, #1
 801557a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801557c:	2300      	movs	r3, #0
 801557e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015580:	2300      	movs	r3, #0
 8015582:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015584:	f107 0314 	add.w	r3, r7, #20
 8015588:	4619      	mov	r1, r3
 801558a:	4874      	ldr	r0, [pc, #464]	@ (801575c <MX_GPIO_Init+0x2e4>)
 801558c:	f004 fb34 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Sky_Status_Pin */
	GPIO_InitStruct.Pin = Sky_Status_Pin;
 8015590:	2308      	movs	r3, #8
 8015592:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015594:	2300      	movs	r3, #0
 8015596:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015598:	2300      	movs	r3, #0
 801559a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Sky_Status_GPIO_Port, &GPIO_InitStruct);
 801559c:	f107 0314 	add.w	r3, r7, #20
 80155a0:	4619      	mov	r1, r3
 80155a2:	486e      	ldr	r0, [pc, #440]	@ (801575c <MX_GPIO_Init+0x2e4>)
 80155a4:	f004 fb28 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_Power_Good_Pin */
	GPIO_InitStruct.Pin = USB_Power_Good_Pin;
 80155a8:	2302      	movs	r3, #2
 80155aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80155ac:	2300      	movs	r3, #0
 80155ae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155b0:	2300      	movs	r3, #0
 80155b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_Power_Good_GPIO_Port, &GPIO_InitStruct);
 80155b4:	f107 0314 	add.w	r3, r7, #20
 80155b8:	4619      	mov	r1, r3
 80155ba:	4869      	ldr	r0, [pc, #420]	@ (8015760 <MX_GPIO_Init+0x2e8>)
 80155bc:	f004 fb1c 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEM_CS_Pin */
	GPIO_InitStruct.Pin = MEM_CS_Pin;
 80155c0:	2310      	movs	r3, #16
 80155c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155c4:	2301      	movs	r3, #1
 80155c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155c8:	2300      	movs	r3, #0
 80155ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80155cc:	2303      	movs	r3, #3
 80155ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 80155d0:	f107 0314 	add.w	r3, r7, #20
 80155d4:	4619      	mov	r1, r3
 80155d6:	4862      	ldr	r0, [pc, #392]	@ (8015760 <MX_GPIO_Init+0x2e8>)
 80155d8:	f004 fb0e 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Charge_set_1_Pin */
	GPIO_InitStruct.Pin = Charge_set_1_Pin;
 80155dc:	2310      	movs	r3, #16
 80155de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80155e0:	2311      	movs	r3, #17
 80155e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155e4:	2300      	movs	r3, #0
 80155e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80155e8:	2300      	movs	r3, #0
 80155ea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Charge_set_1_GPIO_Port, &GPIO_InitStruct);
 80155ec:	f107 0314 	add.w	r3, r7, #20
 80155f0:	4619      	mov	r1, r3
 80155f2:	485a      	ldr	r0, [pc, #360]	@ (801575c <MX_GPIO_Init+0x2e4>)
 80155f4:	f004 fb00 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BPS_CE_Pin */
	GPIO_InitStruct.Pin = BPS_CE_Pin;
 80155f8:	2320      	movs	r3, #32
 80155fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155fc:	2301      	movs	r3, #1
 80155fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015600:	2302      	movs	r3, #2
 8015602:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015604:	2300      	movs	r3, #0
 8015606:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(BPS_CE_GPIO_Port, &GPIO_InitStruct);
 8015608:	f107 0314 	add.w	r3, r7, #20
 801560c:	4619      	mov	r1, r3
 801560e:	4853      	ldr	r0, [pc, #332]	@ (801575c <MX_GPIO_Init+0x2e4>)
 8015610:	f004 faf2 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_Power_Switch_On_Pin */
	GPIO_InitStruct.Pin = USB_Power_Switch_On_Pin;
 8015614:	2304      	movs	r3, #4
 8015616:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015618:	2301      	movs	r3, #1
 801561a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801561c:	2302      	movs	r3, #2
 801561e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015620:	2300      	movs	r3, #0
 8015622:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(USB_Power_Switch_On_GPIO_Port, &GPIO_InitStruct);
 8015624:	f107 0314 	add.w	r3, r7, #20
 8015628:	4619      	mov	r1, r3
 801562a:	484e      	ldr	r0, [pc, #312]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 801562c:	f004 fae4 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Buzzer_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin;
 8015630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8015634:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015636:	2301      	movs	r3, #1
 8015638:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801563a:	2300      	movs	r3, #0
 801563c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801563e:	2301      	movs	r3, #1
 8015640:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8015642:	f107 0314 	add.w	r3, r7, #20
 8015646:	4619      	mov	r1, r3
 8015648:	4846      	ldr	r0, [pc, #280]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 801564a:	f004 fad5 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Charge_set_2_Pin */
	GPIO_InitStruct.Pin = Charge_set_2_Pin;
 801564e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8015652:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8015654:	2311      	movs	r3, #17
 8015656:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015658:	2300      	movs	r3, #0
 801565a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801565c:	2300      	movs	r3, #0
 801565e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Charge_set_2_GPIO_Port, &GPIO_InitStruct);
 8015660:	f107 0314 	add.w	r3, r7, #20
 8015664:	4619      	mov	r1, r3
 8015666:	483f      	ldr	r0, [pc, #252]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 8015668:	f004 fac6 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Camera_CS_Pin */
	GPIO_InitStruct.Pin = Camera_CS_Pin;
 801566c:	2380      	movs	r3, #128	@ 0x80
 801566e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015670:	2301      	movs	r3, #1
 8015672:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015674:	2300      	movs	r3, #0
 8015676:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015678:	2302      	movs	r3, #2
 801567a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Camera_CS_GPIO_Port, &GPIO_InitStruct);
 801567c:	f107 0314 	add.w	r3, r7, #20
 8015680:	4619      	mov	r1, r3
 8015682:	4836      	ldr	r0, [pc, #216]	@ (801575c <MX_GPIO_Init+0x2e4>)
 8015684:	f004 fab8 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Cell_Power_Good_Pin */
	GPIO_InitStruct.Pin = Cell_Power_Good_Pin;
 8015688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801568c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801568e:	2300      	movs	r3, #0
 8015690:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015692:	2301      	movs	r3, #1
 8015694:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Cell_Power_Good_GPIO_Port, &GPIO_InitStruct);
 8015696:	f107 0314 	add.w	r3, r7, #20
 801569a:	4619      	mov	r1, r3
 801569c:	482f      	ldr	r0, [pc, #188]	@ (801575c <MX_GPIO_Init+0x2e4>)
 801569e:	f004 faab 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Camera_Enable_Pin */
	GPIO_InitStruct.Pin = Camera_Enable_Pin;
 80156a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80156a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80156a8:	2301      	movs	r3, #1
 80156aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156ac:	2300      	movs	r3, #0
 80156ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80156b0:	2300      	movs	r3, #0
 80156b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Camera_Enable_GPIO_Port, &GPIO_InitStruct);
 80156b4:	f107 0314 	add.w	r3, r7, #20
 80156b8:	4619      	mov	r1, r3
 80156ba:	4829      	ldr	r0, [pc, #164]	@ (8015760 <MX_GPIO_Init+0x2e8>)
 80156bc:	f004 fa9c 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80156c0:	2304      	movs	r3, #4
 80156c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80156c4:	4b29      	ldr	r3, [pc, #164]	@ (801576c <MX_GPIO_Init+0x2f4>)
 80156c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80156c8:	2301      	movs	r3, #1
 80156ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80156cc:	f107 0314 	add.w	r3, r7, #20
 80156d0:	4619      	mov	r1, r3
 80156d2:	4827      	ldr	r0, [pc, #156]	@ (8015770 <MX_GPIO_Init+0x2f8>)
 80156d4:	f004 fa90 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Sky_On_Off_Sw_Pin Cell_DVS_Pin */
	GPIO_InitStruct.Pin = Sky_On_Off_Sw_Pin|Cell_DVS_Pin;
 80156d8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80156dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80156de:	2301      	movs	r3, #1
 80156e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156e2:	2300      	movs	r3, #0
 80156e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80156e6:	2300      	movs	r3, #0
 80156e8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80156ea:	f107 0314 	add.w	r3, r7, #20
 80156ee:	4619      	mov	r1, r3
 80156f0:	481c      	ldr	r0, [pc, #112]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 80156f2:	f004 fa81 	bl	8019bf8 <HAL_GPIO_Init>

	/*Configure GPIO pin : nExt_Power_Pin */
	GPIO_InitStruct.Pin = nExt_Power_Pin;
 80156f6:	2340      	movs	r3, #64	@ 0x40
 80156f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80156fa:	2300      	movs	r3, #0
 80156fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156fe:	2300      	movs	r3, #0
 8015700:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(nExt_Power_GPIO_Port, &GPIO_InitStruct);
 8015702:	f107 0314 	add.w	r3, r7, #20
 8015706:	4619      	mov	r1, r3
 8015708:	4816      	ldr	r0, [pc, #88]	@ (8015764 <MX_GPIO_Init+0x2ec>)
 801570a:	f004 fa75 	bl	8019bf8 <HAL_GPIO_Init>

	/**/
	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 801570e:	4b19      	ldr	r3, [pc, #100]	@ (8015774 <MX_GPIO_Init+0x2fc>)
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	4a18      	ldr	r2, [pc, #96]	@ (8015774 <MX_GPIO_Init+0x2fc>)
 8015714:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015718:	6053      	str	r3, [r2, #4]

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 801571a:	2200      	movs	r2, #0
 801571c:	2100      	movs	r1, #0
 801571e:	200d      	movs	r0, #13
 8015720:	f003 f82f 	bl	8018782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8015724:	200d      	movs	r0, #13
 8015726:	f003 f847 	bl	80187b8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI6_IRQn, 0, 0);
 801572a:	2200      	movs	r2, #0
 801572c:	2100      	movs	r1, #0
 801572e:	2011      	movs	r0, #17
 8015730:	f003 f827 	bl	8018782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8015734:	2011      	movs	r0, #17
 8015736:	f003 f83f 	bl	80187b8 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 801573a:	2200      	movs	r2, #0
 801573c:	2100      	movs	r1, #0
 801573e:	2018      	movs	r0, #24
 8015740:	f003 f81f 	bl	8018782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8015744:	2018      	movs	r0, #24
 8015746:	f003 f837 	bl	80187b8 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	cameraPower = true;
 801574a:	4b0b      	ldr	r3, [pc, #44]	@ (8015778 <MX_GPIO_Init+0x300>)
 801574c:	2201      	movs	r2, #1
 801574e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END MX_GPIO_Init_2 */
}
 8015750:	bf00      	nop
 8015752:	3728      	adds	r7, #40	@ 0x28
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	46020c00 	.word	0x46020c00
 801575c:	42020800 	.word	0x42020800
 8015760:	42020000 	.word	0x42020000
 8015764:	42020400 	.word	0x42020400
 8015768:	10110000 	.word	0x10110000
 801576c:	10210000 	.word	0x10210000
 8015770:	42020c00 	.word	0x42020c00
 8015774:	46000400 	.word	0x46000400
 8015778:	200bbb7d 	.word	0x200bbb7d

0801577c <handleFaults>:
	}
	return messageCounter;
}

void handleFaults(void)
{
 801577c:	b580      	push	{r7, lr}
 801577e:	af00      	add	r7, sp, #0
	XPS_paramStore(&memory);
 8015780:	4803      	ldr	r0, [pc, #12]	@ (8015790 <handleFaults+0x14>)
 8015782:	f7fe f955 	bl	8013a30 <XPS_paramStore>
	saveParamDataToFlash(&memory);
 8015786:	4802      	ldr	r0, [pc, #8]	@ (8015790 <handleFaults+0x14>)
 8015788:	f7fd fdfc 	bl	8013384 <saveParamDataToFlash>
}
 801578c:	bf00      	nop
 801578e:	bd80      	pop	{r7, pc}
 8015790:	2007d870 	.word	0x2007d870

08015794 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	Log_Single ( "\1 ERROR HANDLE \n\r\0" );
 8015798:	4803      	ldr	r0, [pc, #12]	@ (80157a8 <Error_Handler+0x14>)
 801579a:	f7f1 f987 	bl	8006aac <Log_Single>
  __ASM volatile ("cpsid i" : : : "memory");
 801579e:	b672      	cpsid	i
}
 80157a0:	bf00      	nop
	//GAV take out disable IRQ
	__disable_irq ();
	while (1)
 80157a2:	bf00      	nop
 80157a4:	e7fd      	b.n	80157a2 <Error_Handler+0xe>
 80157a6:	bf00      	nop
 80157a8:	08030054 	.word	0x08030054

080157ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80157b2:	4b0e      	ldr	r3, [pc, #56]	@ (80157ec <HAL_MspInit+0x40>)
 80157b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80157b8:	4a0c      	ldr	r2, [pc, #48]	@ (80157ec <HAL_MspInit+0x40>)
 80157ba:	f043 0304 	orr.w	r3, r3, #4
 80157be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80157c2:	4b0a      	ldr	r3, [pc, #40]	@ (80157ec <HAL_MspInit+0x40>)
 80157c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80157c8:	f003 0304 	and.w	r3, r3, #4
 80157cc:	607b      	str	r3, [r7, #4]
 80157ce:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 80157d0:	f007 fc0c 	bl	801cfec <HAL_PWREx_EnableVddA>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* IWDG_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(IWDG_IRQn, 0, 0);
 80157d4:	2200      	movs	r2, #0
 80157d6:	2100      	movs	r1, #0
 80157d8:	201b      	movs	r0, #27
 80157da:	f002 ffd2 	bl	8018782 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(IWDG_IRQn);
 80157de:	201b      	movs	r0, #27
 80157e0:	f002 ffea 	bl	80187b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80157e4:	bf00      	nop
 80157e6:	3708      	adds	r7, #8
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	46020c00 	.word	0x46020c00

080157f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b0b4      	sub	sp, #208	@ 0xd0
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80157f8:	f107 0310 	add.w	r3, r7, #16
 80157fc:	22c0      	movs	r2, #192	@ 0xc0
 80157fe:	2100      	movs	r1, #0
 8015800:	4618      	mov	r0, r3
 8015802:	f011 fcb5 	bl	8027170 <memset>
  if(hadc->Instance==ADC1)
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	4a15      	ldr	r2, [pc, #84]	@ (8015860 <HAL_ADC_MspInit+0x70>)
 801580c:	4293      	cmp	r3, r2
 801580e:	d122      	bne.n	8015856 <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8015810:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8015814:	f04f 0300 	mov.w	r3, #0
 8015818:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 801581c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8015820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015824:	f107 0310 	add.w	r3, r7, #16
 8015828:	4618      	mov	r0, r3
 801582a:	f008 feab 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d001      	beq.n	8015838 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8015834:	f7ff ffae 	bl	8015794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8015838:	4b0a      	ldr	r3, [pc, #40]	@ (8015864 <HAL_ADC_MspInit+0x74>)
 801583a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801583e:	4a09      	ldr	r2, [pc, #36]	@ (8015864 <HAL_ADC_MspInit+0x74>)
 8015840:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015844:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015848:	4b06      	ldr	r3, [pc, #24]	@ (8015864 <HAL_ADC_MspInit+0x74>)
 801584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801584e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015852:	60fb      	str	r3, [r7, #12]
 8015854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8015856:	bf00      	nop
 8015858:	37d0      	adds	r7, #208	@ 0xd0
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	42028000 	.word	0x42028000
 8015864:	46020c00 	.word	0x46020c00

08015868 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8015868:	b480      	push	{r7}
 801586a:	b085      	sub	sp, #20
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	4a0b      	ldr	r2, [pc, #44]	@ (80158a4 <HAL_CRC_MspInit+0x3c>)
 8015876:	4293      	cmp	r3, r2
 8015878:	d10e      	bne.n	8015898 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 801587a:	4b0b      	ldr	r3, [pc, #44]	@ (80158a8 <HAL_CRC_MspInit+0x40>)
 801587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015880:	4a09      	ldr	r2, [pc, #36]	@ (80158a8 <HAL_CRC_MspInit+0x40>)
 8015882:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015886:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 801588a:	4b07      	ldr	r3, [pc, #28]	@ (80158a8 <HAL_CRC_MspInit+0x40>)
 801588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8015894:	60fb      	str	r3, [r7, #12]
 8015896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8015898:	bf00      	nop
 801589a:	3714      	adds	r7, #20
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr
 80158a4:	40023000 	.word	0x40023000
 80158a8:	46020c00 	.word	0x46020c00

080158ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b0ba      	sub	sp, #232	@ 0xe8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80158b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80158b8:	2200      	movs	r2, #0
 80158ba:	601a      	str	r2, [r3, #0]
 80158bc:	605a      	str	r2, [r3, #4]
 80158be:	609a      	str	r2, [r3, #8]
 80158c0:	60da      	str	r2, [r3, #12]
 80158c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80158c4:	f107 0310 	add.w	r3, r7, #16
 80158c8:	22c0      	movs	r2, #192	@ 0xc0
 80158ca:	2100      	movs	r1, #0
 80158cc:	4618      	mov	r0, r3
 80158ce:	f011 fc4f 	bl	8027170 <memset>
  if(hi2c->Instance==I2C1)
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	4a26      	ldr	r2, [pc, #152]	@ (8015970 <HAL_I2C_MspInit+0xc4>)
 80158d8:	4293      	cmp	r3, r2
 80158da:	d145      	bne.n	8015968 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80158dc:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80158e0:	f04f 0300 	mov.w	r3, #0
 80158e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80158e8:	2300      	movs	r3, #0
 80158ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80158ec:	f107 0310 	add.w	r3, r7, #16
 80158f0:	4618      	mov	r0, r3
 80158f2:	f008 fe47 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d001      	beq.n	8015900 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 80158fc:	f7ff ff4a 	bl	8015794 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015900:	4b1c      	ldr	r3, [pc, #112]	@ (8015974 <HAL_I2C_MspInit+0xc8>)
 8015902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015906:	4a1b      	ldr	r2, [pc, #108]	@ (8015974 <HAL_I2C_MspInit+0xc8>)
 8015908:	f043 0302 	orr.w	r3, r3, #2
 801590c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015910:	4b18      	ldr	r3, [pc, #96]	@ (8015974 <HAL_I2C_MspInit+0xc8>)
 8015912:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015916:	f003 0302 	and.w	r3, r3, #2
 801591a:	60fb      	str	r3, [r7, #12]
 801591c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801591e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8015922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015926:	2312      	movs	r3, #18
 8015928:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801592c:	2300      	movs	r3, #0
 801592e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015932:	2300      	movs	r3, #0
 8015934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015938:	2304      	movs	r3, #4
 801593a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801593e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015942:	4619      	mov	r1, r3
 8015944:	480c      	ldr	r0, [pc, #48]	@ (8015978 <HAL_I2C_MspInit+0xcc>)
 8015946:	f004 f957 	bl	8019bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801594a:	4b0a      	ldr	r3, [pc, #40]	@ (8015974 <HAL_I2C_MspInit+0xc8>)
 801594c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015950:	4a08      	ldr	r2, [pc, #32]	@ (8015974 <HAL_I2C_MspInit+0xc8>)
 8015952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015956:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 801595a:	4b06      	ldr	r3, [pc, #24]	@ (8015974 <HAL_I2C_MspInit+0xc8>)
 801595c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015964:	60bb      	str	r3, [r7, #8]
 8015966:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8015968:	bf00      	nop
 801596a:	37e8      	adds	r7, #232	@ 0xe8
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	40005400 	.word	0x40005400
 8015974:	46020c00 	.word	0x46020c00
 8015978:	42020400 	.word	0x42020400

0801597c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b0bc      	sub	sp, #240	@ 0xf0
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015984:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015988:	2200      	movs	r2, #0
 801598a:	601a      	str	r2, [r3, #0]
 801598c:	605a      	str	r2, [r3, #4]
 801598e:	609a      	str	r2, [r3, #8]
 8015990:	60da      	str	r2, [r3, #12]
 8015992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015994:	f107 0318 	add.w	r3, r7, #24
 8015998:	22c0      	movs	r2, #192	@ 0xc0
 801599a:	2100      	movs	r1, #0
 801599c:	4618      	mov	r0, r3
 801599e:	f011 fbe7 	bl	8027170 <memset>
  if(huart->Instance==LPUART1)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	4a5a      	ldr	r2, [pc, #360]	@ (8015b10 <HAL_UART_MspInit+0x194>)
 80159a8:	4293      	cmp	r3, r2
 80159aa:	d14d      	bne.n	8015a48 <HAL_UART_MspInit+0xcc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80159ac:	f04f 0220 	mov.w	r2, #32
 80159b0:	f04f 0300 	mov.w	r3, #0
 80159b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 80159b8:	2300      	movs	r3, #0
 80159ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80159bc:	f107 0318 	add.w	r3, r7, #24
 80159c0:	4618      	mov	r0, r3
 80159c2:	f008 fddf 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d001      	beq.n	80159d0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80159cc:	f7ff fee2 	bl	8015794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80159d0:	4b50      	ldr	r3, [pc, #320]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 80159d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80159d6:	4a4f      	ldr	r2, [pc, #316]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 80159d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159dc:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80159e0:	4b4c      	ldr	r3, [pc, #304]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 80159e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80159e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80159ea:	617b      	str	r3, [r7, #20]
 80159ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80159ee:	4b49      	ldr	r3, [pc, #292]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 80159f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80159f4:	4a47      	ldr	r2, [pc, #284]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 80159f6:	f043 0304 	orr.w	r3, r3, #4
 80159fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80159fe:	4b45      	ldr	r3, [pc, #276]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015a04:	f003 0304 	and.w	r3, r3, #4
 8015a08:	613b      	str	r3, [r7, #16]
 8015a0a:	693b      	ldr	r3, [r7, #16]
//    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
//    GPIO_InitStruct.Pull = GPIO_NOPULL;
//    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8015a0c:	2303      	movs	r3, #3
 8015a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a12:	2302      	movs	r3, #2
 8015a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8015a24:	2308      	movs	r3, #8
 8015a26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015a2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015a2e:	4619      	mov	r1, r3
 8015a30:	4839      	ldr	r0, [pc, #228]	@ (8015b18 <HAL_UART_MspInit+0x19c>)
 8015a32:	f004 f8e1 	bl	8019bf8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8015a36:	2200      	movs	r2, #0
 8015a38:	2100      	movs	r1, #0
 8015a3a:	2042      	movs	r0, #66	@ 0x42
 8015a3c:	f002 fea1 	bl	8018782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8015a40:	2042      	movs	r0, #66	@ 0x42
 8015a42:	f002 feb9 	bl	80187b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8015a46:	e05f      	b.n	8015b08 <HAL_UART_MspInit+0x18c>
  else if(huart->Instance==USART2)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	4a33      	ldr	r2, [pc, #204]	@ (8015b1c <HAL_UART_MspInit+0x1a0>)
 8015a4e:	4293      	cmp	r3, r2
 8015a50:	d15a      	bne.n	8015b08 <HAL_UART_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8015a52:	f04f 0202 	mov.w	r2, #2
 8015a56:	f04f 0300 	mov.w	r3, #0
 8015a5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015a62:	f107 0318 	add.w	r3, r7, #24
 8015a66:	4618      	mov	r0, r3
 8015a68:	f008 fd8c 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d001      	beq.n	8015a76 <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8015a72:	f7ff fe8f 	bl	8015794 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8015a76:	4b27      	ldr	r3, [pc, #156]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015a7c:	4a25      	ldr	r2, [pc, #148]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015a82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8015a86:	4b23      	ldr	r3, [pc, #140]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015a88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8015a90:	60fb      	str	r3, [r7, #12]
 8015a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015a94:	4b1f      	ldr	r3, [pc, #124]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015a9c:	f043 0301 	orr.w	r3, r3, #1
 8015aa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8015b14 <HAL_UART_MspInit+0x198>)
 8015aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015aaa:	f003 0301 	and.w	r3, r3, #1
 8015aae:	60bb      	str	r3, [r7, #8]
 8015ab0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015ab2:	2304      	movs	r3, #4
 8015ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ab8:	2302      	movs	r3, #2
 8015aba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8015aca:	2307      	movs	r3, #7
 8015acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015ad0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	4812      	ldr	r0, [pc, #72]	@ (8015b20 <HAL_UART_MspInit+0x1a4>)
 8015ad8:	f004 f88e 	bl	8019bf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8015adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ae4:	2302      	movs	r3, #2
 8015ae6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015aea:	2300      	movs	r3, #0
 8015aec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015af0:	2300      	movs	r3, #0
 8015af2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8015af6:	2303      	movs	r3, #3
 8015af8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015afc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015b00:	4619      	mov	r1, r3
 8015b02:	4807      	ldr	r0, [pc, #28]	@ (8015b20 <HAL_UART_MspInit+0x1a4>)
 8015b04:	f004 f878 	bl	8019bf8 <HAL_GPIO_Init>
}
 8015b08:	bf00      	nop
 8015b0a:	37f0      	adds	r7, #240	@ 0xf0
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}
 8015b10:	46002400 	.word	0x46002400
 8015b14:	46020c00 	.word	0x46020c00
 8015b18:	42020800 	.word	0x42020800
 8015b1c:	40004400 	.word	0x40004400
 8015b20:	42020000 	.word	0x42020000

08015b24 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	4a14      	ldr	r2, [pc, #80]	@ (8015b84 <HAL_UART_MspDeInit+0x60>)
 8015b32:	4293      	cmp	r3, r2
 8015b34:	d10f      	bne.n	8015b56 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8015b36:	4b14      	ldr	r3, [pc, #80]	@ (8015b88 <HAL_UART_MspDeInit+0x64>)
 8015b38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015b3c:	4a12      	ldr	r2, [pc, #72]	@ (8015b88 <HAL_UART_MspDeInit+0x64>)
 8015b3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8015b42:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8015b46:	2103      	movs	r1, #3
 8015b48:	4810      	ldr	r0, [pc, #64]	@ (8015b8c <HAL_UART_MspDeInit+0x68>)
 8015b4a:	f004 fa2d 	bl	8019fa8 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8015b4e:	2042      	movs	r0, #66	@ 0x42
 8015b50:	f002 fe46 	bl	80187e0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8015b54:	e011      	b.n	8015b7a <HAL_UART_MspDeInit+0x56>
  else if(huart->Instance==USART2)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8015b90 <HAL_UART_MspDeInit+0x6c>)
 8015b5c:	4293      	cmp	r3, r2
 8015b5e:	d10c      	bne.n	8015b7a <HAL_UART_MspDeInit+0x56>
    __HAL_RCC_USART2_CLK_DISABLE();
 8015b60:	4b09      	ldr	r3, [pc, #36]	@ (8015b88 <HAL_UART_MspDeInit+0x64>)
 8015b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015b66:	4a08      	ldr	r2, [pc, #32]	@ (8015b88 <HAL_UART_MspDeInit+0x64>)
 8015b68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8015b6c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_15);
 8015b70:	f248 0104 	movw	r1, #32772	@ 0x8004
 8015b74:	4807      	ldr	r0, [pc, #28]	@ (8015b94 <HAL_UART_MspDeInit+0x70>)
 8015b76:	f004 fa17 	bl	8019fa8 <HAL_GPIO_DeInit>
}
 8015b7a:	bf00      	nop
 8015b7c:	3708      	adds	r7, #8
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	46002400 	.word	0x46002400
 8015b88:	46020c00 	.word	0x46020c00
 8015b8c:	42020800 	.word	0x42020800
 8015b90:	40004400 	.word	0x40004400
 8015b94:	42020000 	.word	0x42020000

08015b98 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b0bc      	sub	sp, #240	@ 0xf0
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ba0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	601a      	str	r2, [r3, #0]
 8015ba8:	605a      	str	r2, [r3, #4]
 8015baa:	609a      	str	r2, [r3, #8]
 8015bac:	60da      	str	r2, [r3, #12]
 8015bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015bb0:	f107 0318 	add.w	r3, r7, #24
 8015bb4:	22c0      	movs	r2, #192	@ 0xc0
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f011 fad9 	bl	8027170 <memset>
  if(hospi->Instance==OCTOSPI1)
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	4a40      	ldr	r2, [pc, #256]	@ (8015cc4 <HAL_OSPI_MspInit+0x12c>)
 8015bc4:	4293      	cmp	r3, r2
 8015bc6:	d178      	bne.n	8015cba <HAL_OSPI_MspInit+0x122>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8015bc8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8015bcc:	f04f 0300 	mov.w	r3, #0
 8015bd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015bda:	f107 0318 	add.w	r3, r7, #24
 8015bde:	4618      	mov	r0, r3
 8015be0:	f008 fcd0 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d001      	beq.n	8015bee <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8015bea:	f7ff fdd3 	bl	8015794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8015bee:	4b36      	ldr	r3, [pc, #216]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015bf4:	4a34      	ldr	r2, [pc, #208]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015bfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015bfe:	4b32      	ldr	r3, [pc, #200]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015c08:	617b      	str	r3, [r7, #20]
 8015c0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8015c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015c12:	4a2d      	ldr	r2, [pc, #180]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c14:	f043 0310 	orr.w	r3, r3, #16
 8015c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8015c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015c22:	f003 0310 	and.w	r3, r3, #16
 8015c26:	613b      	str	r3, [r7, #16]
 8015c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015c2a:	4b27      	ldr	r3, [pc, #156]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015c30:	4a25      	ldr	r2, [pc, #148]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c32:	f043 0301 	orr.w	r3, r3, #1
 8015c36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015c3a:	4b23      	ldr	r3, [pc, #140]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015c40:	f003 0301 	and.w	r3, r3, #1
 8015c44:	60fb      	str	r3, [r7, #12]
 8015c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015c48:	4b1f      	ldr	r3, [pc, #124]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c50:	f043 0302 	orr.w	r3, r3, #2
 8015c54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015c58:	4b1b      	ldr	r3, [pc, #108]	@ (8015cc8 <HAL_OSPI_MspInit+0x130>)
 8015c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015c5e:	f003 0302 	and.w	r3, r3, #2
 8015c62:	60bb      	str	r3, [r7, #8]
 8015c64:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> OCTOSPIM_P1_IO3
    PA7     ------> OCTOSPIM_P1_IO2
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    */
    GPIO_InitStruct.Pin = MEM_SCK_Pin|Mem_D3_Pin|Mem_D2_Pin;
 8015c66:	23c8      	movs	r3, #200	@ 0xc8
 8015c68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c6c:	2302      	movs	r3, #2
 8015c6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c72:	2300      	movs	r3, #0
 8015c74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c78:	2303      	movs	r3, #3
 8015c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8015c7e:	230a      	movs	r3, #10
 8015c80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015c84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015c88:	4619      	mov	r1, r3
 8015c8a:	4810      	ldr	r0, [pc, #64]	@ (8015ccc <HAL_OSPI_MspInit+0x134>)
 8015c8c:	f003 ffb4 	bl	8019bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Mem_D1_Pin|Mem_DO_Pin;
 8015c90:	2303      	movs	r3, #3
 8015c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c96:	2302      	movs	r3, #2
 8015c98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ca2:	2303      	movs	r3, #3
 8015ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8015ca8:	230a      	movs	r3, #10
 8015caa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015cae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	4806      	ldr	r0, [pc, #24]	@ (8015cd0 <HAL_OSPI_MspInit+0x138>)
 8015cb6:	f003 ff9f 	bl	8019bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8015cba:	bf00      	nop
 8015cbc:	37f0      	adds	r7, #240	@ 0xf0
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	420d1400 	.word	0x420d1400
 8015cc8:	46020c00 	.word	0x46020c00
 8015ccc:	42020000 	.word	0x42020000
 8015cd0:	42020400 	.word	0x42020400

08015cd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b0b4      	sub	sp, #208	@ 0xd0
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015cdc:	f107 0310 	add.w	r3, r7, #16
 8015ce0:	22c0      	movs	r2, #192	@ 0xc0
 8015ce2:	2100      	movs	r1, #0
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f011 fa43 	bl	8027170 <memset>
  if(hrtc->Instance==RTC)
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	4a1f      	ldr	r2, [pc, #124]	@ (8015d6c <HAL_RTC_MspInit+0x98>)
 8015cf0:	4293      	cmp	r3, r2
 8015cf2:	d137      	bne.n	8015d64 <HAL_RTC_MspInit+0x90>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8015cf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8015cf8:	f04f 0300 	mov.w	r3, #0
 8015cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8015d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015d08:	f107 0310 	add.w	r3, r7, #16
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	f008 fc39 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 8015d12:	4603      	mov	r3, r0
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d001      	beq.n	8015d1c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8015d18:	f7ff fd3c 	bl	8015794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015d1c:	4b14      	ldr	r3, [pc, #80]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015d22:	4a13      	ldr	r2, [pc, #76]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8015d28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8015d2c:	4b10      	ldr	r3, [pc, #64]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015d32:	4a0f      	ldr	r2, [pc, #60]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015d38:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8015d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015d46:	60fb      	str	r3, [r7, #12]
 8015d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8015d4a:	4b09      	ldr	r3, [pc, #36]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015d50:	4a07      	ldr	r2, [pc, #28]	@ (8015d70 <HAL_RTC_MspInit+0x9c>)
 8015d52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015d56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	2002      	movs	r0, #2
 8015d60:	f002 fd0f 	bl	8018782 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015d64:	bf00      	nop
 8015d66:	37d0      	adds	r7, #208	@ 0xd0
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	46007800 	.word	0x46007800
 8015d70:	46020c00 	.word	0x46020c00

08015d74 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	4a10      	ldr	r2, [pc, #64]	@ (8015dc4 <HAL_RTC_MspDeInit+0x50>)
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d11a      	bne.n	8015dbc <HAL_RTC_MspDeInit+0x48>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8015d86:	4b10      	ldr	r3, [pc, #64]	@ (8015dc8 <HAL_RTC_MspDeInit+0x54>)
 8015d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8015d8c:	4a0e      	ldr	r2, [pc, #56]	@ (8015dc8 <HAL_RTC_MspDeInit+0x54>)
 8015d8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8015d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8015d96:	4b0c      	ldr	r3, [pc, #48]	@ (8015dc8 <HAL_RTC_MspDeInit+0x54>)
 8015d98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8015dc8 <HAL_RTC_MspDeInit+0x54>)
 8015d9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015da2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    __HAL_RCC_RTCAPB_CLKAM_DISABLE();
 8015da6:	4b08      	ldr	r3, [pc, #32]	@ (8015dc8 <HAL_RTC_MspDeInit+0x54>)
 8015da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015dac:	4a06      	ldr	r2, [pc, #24]	@ (8015dc8 <HAL_RTC_MspDeInit+0x54>)
 8015dae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015db2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8015db6:	2002      	movs	r0, #2
 8015db8:	f002 fd12 	bl	80187e0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8015dbc:	bf00      	nop
 8015dbe:	3708      	adds	r7, #8
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	46007800 	.word	0x46007800
 8015dc8:	46020c00 	.word	0x46020c00

08015dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b0ba      	sub	sp, #232	@ 0xe8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015dd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]
 8015ddc:	605a      	str	r2, [r3, #4]
 8015dde:	609a      	str	r2, [r3, #8]
 8015de0:	60da      	str	r2, [r3, #12]
 8015de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015de4:	f107 0310 	add.w	r3, r7, #16
 8015de8:	22c0      	movs	r2, #192	@ 0xc0
 8015dea:	2100      	movs	r1, #0
 8015dec:	4618      	mov	r0, r3
 8015dee:	f011 f9bf 	bl	8027170 <memset>
  if(hspi->Instance==SPI2)
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	4a32      	ldr	r2, [pc, #200]	@ (8015ec0 <HAL_SPI_MspInit+0xf4>)
 8015df8:	4293      	cmp	r3, r2
 8015dfa:	d15d      	bne.n	8015eb8 <HAL_SPI_MspInit+0xec>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8015dfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8015e00:	f04f 0300 	mov.w	r3, #0
 8015e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8015e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8015e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015e10:	f107 0310 	add.w	r3, r7, #16
 8015e14:	4618      	mov	r0, r3
 8015e16:	f008 fbb5 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d001      	beq.n	8015e24 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8015e20:	f7ff fcb8 	bl	8015794 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8015e24:	4b27      	ldr	r3, [pc, #156]	@ (8015ec4 <HAL_SPI_MspInit+0xf8>)
 8015e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015e2a:	4a26      	ldr	r2, [pc, #152]	@ (8015ec4 <HAL_SPI_MspInit+0xf8>)
 8015e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015e30:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8015e34:	4b23      	ldr	r3, [pc, #140]	@ (8015ec4 <HAL_SPI_MspInit+0xf8>)
 8015e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8015e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015e3e:	60fb      	str	r3, [r7, #12]
 8015e40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015e42:	4b20      	ldr	r3, [pc, #128]	@ (8015ec4 <HAL_SPI_MspInit+0xf8>)
 8015e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015e48:	4a1e      	ldr	r2, [pc, #120]	@ (8015ec4 <HAL_SPI_MspInit+0xf8>)
 8015e4a:	f043 0302 	orr.w	r3, r3, #2
 8015e4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015e52:	4b1c      	ldr	r3, [pc, #112]	@ (8015ec4 <HAL_SPI_MspInit+0xf8>)
 8015e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015e58:	f003 0302 	and.w	r3, r3, #2
 8015e5c:	60bb      	str	r3, [r7, #8]
 8015e5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8015e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015e64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e68:	2302      	movs	r3, #2
 8015e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8015e6e:	2302      	movs	r3, #2
 8015e70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015e74:	2302      	movs	r3, #2
 8015e76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8015e7a:	2305      	movs	r3, #5
 8015e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015e84:	4619      	mov	r1, r3
 8015e86:	4810      	ldr	r0, [pc, #64]	@ (8015ec8 <HAL_SPI_MspInit+0xfc>)
 8015e88:	f003 feb6 	bl	8019bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8015e8c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8015e90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e94:	2302      	movs	r3, #2
 8015e96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8015ea0:	2302      	movs	r3, #2
 8015ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8015ea6:	2305      	movs	r3, #5
 8015ea8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015eac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015eb0:	4619      	mov	r1, r3
 8015eb2:	4805      	ldr	r0, [pc, #20]	@ (8015ec8 <HAL_SPI_MspInit+0xfc>)
 8015eb4:	f003 fea0 	bl	8019bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8015eb8:	bf00      	nop
 8015eba:	37e8      	adds	r7, #232	@ 0xe8
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	bd80      	pop	{r7, pc}
 8015ec0:	40003800 	.word	0x40003800
 8015ec4:	46020c00 	.word	0x46020c00
 8015ec8:	42020400 	.word	0x42020400

08015ecc <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b0bc      	sub	sp, #240	@ 0xf0
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ed4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015ed8:	2200      	movs	r2, #0
 8015eda:	601a      	str	r2, [r3, #0]
 8015edc:	605a      	str	r2, [r3, #4]
 8015ede:	609a      	str	r2, [r3, #8]
 8015ee0:	60da      	str	r2, [r3, #12]
 8015ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015ee4:	f107 0318 	add.w	r3, r7, #24
 8015ee8:	22c0      	movs	r2, #192	@ 0xc0
 8015eea:	2100      	movs	r1, #0
 8015eec:	4618      	mov	r0, r3
 8015eee:	f011 f93f 	bl	8027170 <memset>
  if(hhcd->Instance==USB_OTG_FS)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4a40      	ldr	r2, [pc, #256]	@ (8015ff8 <HAL_HCD_MspInit+0x12c>)
 8015ef8:	4293      	cmp	r3, r2
 8015efa:	d179      	bne.n	8015ff0 <HAL_HCD_MspInit+0x124>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8015efc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8015f00:	f04f 0300 	mov.w	r3, #0
 8015f04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015f0e:	f107 0318 	add.w	r3, r7, #24
 8015f12:	4618      	mov	r0, r3
 8015f14:	f008 fb36 	bl	801e584 <HAL_RCCEx_PeriphCLKConfig>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d001      	beq.n	8015f22 <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 8015f1e:	f7ff fc39 	bl	8015794 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015f22:	4b36      	ldr	r3, [pc, #216]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015f28:	4a34      	ldr	r2, [pc, #208]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015f2a:	f043 0301 	orr.w	r3, r3, #1
 8015f2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015f32:	4b32      	ldr	r3, [pc, #200]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015f38:	f003 0301 	and.w	r3, r3, #1
 8015f3c:	617b      	str	r3, [r7, #20]
 8015f3e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_Vbus_Pin;
 8015f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(USB_Vbus_GPIO_Port, &GPIO_InitStruct);
 8015f54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015f58:	4619      	mov	r1, r3
 8015f5a:	4829      	ldr	r0, [pc, #164]	@ (8016000 <HAL_HCD_MspInit+0x134>)
 8015f5c:	f003 fe4c 	bl	8019bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8015f60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015f64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015f68:	2302      	movs	r3, #2
 8015f6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015f6e:	2300      	movs	r3, #0
 8015f70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015f74:	2300      	movs	r3, #0
 8015f76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015f7a:	230a      	movs	r3, #10
 8015f7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015f80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8015f84:	4619      	mov	r1, r3
 8015f86:	481e      	ldr	r0, [pc, #120]	@ (8016000 <HAL_HCD_MspInit+0x134>)
 8015f88:	f003 fe36 	bl	8019bf8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015f92:	4a1a      	ldr	r2, [pc, #104]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015f94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8015f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8015f9c:	4b17      	ldr	r3, [pc, #92]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015fa6:	613b      	str	r3, [r7, #16]
 8015fa8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015faa:	4b14      	ldr	r3, [pc, #80]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015fb0:	f003 0304 	and.w	r3, r3, #4
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d119      	bne.n	8015fec <HAL_HCD_MspInit+0x120>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015fb8:	4b10      	ldr	r3, [pc, #64]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015fc0:	f043 0304 	orr.w	r3, r3, #4
 8015fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8015fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015fce:	f003 0304 	and.w	r3, r3, #4
 8015fd2:	60fb      	str	r3, [r7, #12]
 8015fd4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8015fd6:	f006 fff9 	bl	801cfcc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8015fda:	4b08      	ldr	r3, [pc, #32]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015fe0:	4a06      	ldr	r2, [pc, #24]	@ (8015ffc <HAL_HCD_MspInit+0x130>)
 8015fe2:	f023 0304 	bic.w	r3, r3, #4
 8015fe6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8015fea:	e001      	b.n	8015ff0 <HAL_HCD_MspInit+0x124>
      HAL_PWREx_EnableVddUSB();
 8015fec:	f006 ffee 	bl	801cfcc <HAL_PWREx_EnableVddUSB>
}
 8015ff0:	bf00      	nop
 8015ff2:	37f0      	adds	r7, #240	@ 0xf0
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	42040000 	.word	0x42040000
 8015ffc:	46020c00 	.word	0x46020c00
 8016000:	42020000 	.word	0x42020000

08016004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016004:	b480      	push	{r7}
 8016006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8016008:	bf00      	nop
 801600a:	e7fd      	b.n	8016008 <NMI_Handler+0x4>

0801600c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801600c:	b580      	push	{r7, lr}
 801600e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	handleFaults();
 8016010:	f7ff fbb4 	bl	801577c <handleFaults>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8016014:	bf00      	nop
 8016016:	e7fd      	b.n	8016014 <HardFault_Handler+0x8>

08016018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8016018:	b480      	push	{r7}
 801601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801601c:	bf00      	nop
 801601e:	e7fd      	b.n	801601c <MemManage_Handler+0x4>

08016020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016020:	b480      	push	{r7}
 8016022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016024:	bf00      	nop
 8016026:	e7fd      	b.n	8016024 <BusFault_Handler+0x4>

08016028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016028:	b480      	push	{r7}
 801602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801602c:	bf00      	nop
 801602e:	e7fd      	b.n	801602c <UsageFault_Handler+0x4>

08016030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8016030:	b480      	push	{r7}
 8016032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016034:	bf00      	nop
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801603e:	b480      	push	{r7}
 8016040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8016042:	bf00      	nop
 8016044:	46bd      	mov	sp, r7
 8016046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604a:	4770      	bx	lr

0801604c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801604c:	b480      	push	{r7}
 801604e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8016050:	bf00      	nop
 8016052:	46bd      	mov	sp, r7
 8016054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016058:	4770      	bx	lr

0801605a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801605a:	b580      	push	{r7, lr}
 801605c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801605e:	f000 f9f1 	bl	8016444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8016062:	bf00      	nop
 8016064:	bd80      	pop	{r7, pc}
	...

08016068 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
 // HAL_RTC_AlarmIRQHandler(&hrtc);

  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 801606c:	4802      	ldr	r0, [pc, #8]	@ (8016078 <RTC_IRQHandler+0x10>)
 801606e:	f00b fdcd 	bl	8021c0c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8016072:	bf00      	nop
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	2007d344 	.word	0x2007d344

0801607c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_OverCurrent_Pin);
 8016080:	2004      	movs	r0, #4
 8016082:	f004 f8b9 	bl	801a1f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8016086:	bf00      	nop
 8016088:	bd80      	pop	{r7, pc}

0801608a <EXTI5_IRQHandler>:


void EXTI5_IRQHandler(void)
{
 801608a:	b580      	push	{r7, lr}
 801608c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_Pin);
 801608e:	2020      	movs	r0, #32
 8016090:	f004 f8b2 	bl	801a1f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8016094:	bf00      	nop
 8016096:	bd80      	pop	{r7, pc}

08016098 <EXTI6_IRQHandler>:

/**
  * @brief This function handles EXTI Line6 interrupt.
  */
void EXTI6_IRQHandler(void)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nExt_Power_Pin);
 801609c:	2040      	movs	r0, #64	@ 0x40
 801609e:	f004 f8ab 	bl	801a1f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 80160a2:	bf00      	nop
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80160a6:	b580      	push	{r7, lr}
 80160a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_Pin);
 80160aa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80160ae:	f004 f8a3 	bl	801a1f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80160b2:	bf00      	nop
 80160b4:	bd80      	pop	{r7, pc}
	...

080160b8 <IWDG_IRQHandler>:

/**
  * @brief This function handles IWDG global interrupt.
  */
void IWDG_IRQHandler(void)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_IRQn 0 */
  // KCS save parameters to XPS......
  /* USER CODE END IWDG_IRQn 0 */
  HAL_IWDG_IRQHandler(&hiwdg);
 80160bc:	4802      	ldr	r0, [pc, #8]	@ (80160c8 <IWDG_IRQHandler+0x10>)
 80160be:	f005 f898 	bl	801b1f2 <HAL_IWDG_IRQHandler>
  /* USER CODE BEGIN IWDG_IRQn 1 */

  /* USER CODE END IWDG_IRQn 1 */
}
 80160c2:	bf00      	nop
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop
 80160c8:	2007d0bc 	.word	0x2007d0bc

080160cc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80160d0:	4802      	ldr	r0, [pc, #8]	@ (80160dc <LPUART1_IRQHandler+0x10>)
 80160d2:	f00c ffb3 	bl	802303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80160d6:	bf00      	nop
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop
 80160dc:	2007d1c0 	.word	0x2007d1c0

080160e0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80160e4:	4802      	ldr	r0, [pc, #8]	@ (80160f0 <LPTIM1_IRQHandler+0x10>)
 80160e6:	f005 f89e 	bl	801b226 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80160ea:	bf00      	nop
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	2007d0d0 	.word	0x2007d0d0

080160f4 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 80160f8:	4802      	ldr	r0, [pc, #8]	@ (8016104 <LPTIM2_IRQHandler+0x10>)
 80160fa:	f005 f894 	bl	801b226 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80160fe:	bf00      	nop
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	2007d120 	.word	0x2007d120

08016108 <PWR_S3WU_IRQHandler>:

/**
  * @brief This function handles PWR wake up from Stop3 interrupt.
  */
void PWR_S3WU_IRQHandler(void)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PWR_S3WU_IRQn 0 */

  /* USER CODE END PWR_S3WU_IRQn 0 */
  HAL_PWREx_S3WU_IRQHandler(PWR_WAKEUP_PIN1 | PWR_WAKEUP_PIN6);
 801610c:	2021      	movs	r0, #33	@ 0x21
 801610e:	f006 fead 	bl	801ce6c <HAL_PWREx_S3WU_IRQHandler>
  /* USER CODE BEGIN PWR_S3WU_IRQn 1 */

  /* USER CODE END PWR_S3WU_IRQn 1 */
}
 8016112:	bf00      	nop
 8016114:	bd80      	pop	{r7, pc}
	...

08016118 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 801611c:	4802      	ldr	r0, [pc, #8]	@ (8016128 <LPTIM3_IRQHandler+0x10>)
 801611e:	f005 f882 	bl	801b226 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 8016122:	bf00      	nop
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop
 8016128:	2007d170 	.word	0x2007d170

0801612c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801612c:	b480      	push	{r7}
 801612e:	af00      	add	r7, sp, #0
	return 1;
 8016130:	2301      	movs	r3, #1
}
 8016132:	4618      	mov	r0, r3
 8016134:	46bd      	mov	sp, r7
 8016136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613a:	4770      	bx	lr

0801613c <_kill>:

int _kill(int pid, int sig)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b082      	sub	sp, #8
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016146:	f011 fe65 	bl	8027e14 <__errno>
 801614a:	4603      	mov	r3, r0
 801614c:	2216      	movs	r2, #22
 801614e:	601a      	str	r2, [r3, #0]
	return -1;
 8016150:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016154:	4618      	mov	r0, r3
 8016156:	3708      	adds	r7, #8
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}

0801615c <_exit>:

void _exit (int status)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8016164:	f04f 31ff 	mov.w	r1, #4294967295
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f7ff ffe7 	bl	801613c <_kill>
	while (1) {}		/* Make sure we hang here */
 801616e:	bf00      	nop
 8016170:	e7fd      	b.n	801616e <_exit+0x12>

08016172 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8016172:	b580      	push	{r7, lr}
 8016174:	b086      	sub	sp, #24
 8016176:	af00      	add	r7, sp, #0
 8016178:	60f8      	str	r0, [r7, #12]
 801617a:	60b9      	str	r1, [r7, #8]
 801617c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801617e:	2300      	movs	r3, #0
 8016180:	617b      	str	r3, [r7, #20]
 8016182:	e00a      	b.n	801619a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8016184:	f3af 8000 	nop.w
 8016188:	4601      	mov	r1, r0
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	1c5a      	adds	r2, r3, #1
 801618e:	60ba      	str	r2, [r7, #8]
 8016190:	b2ca      	uxtb	r2, r1
 8016192:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	3301      	adds	r3, #1
 8016198:	617b      	str	r3, [r7, #20]
 801619a:	697a      	ldr	r2, [r7, #20]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	429a      	cmp	r2, r3
 80161a0:	dbf0      	blt.n	8016184 <_read+0x12>
	}

return len;
 80161a2:	687b      	ldr	r3, [r7, #4]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3718      	adds	r7, #24
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}

080161ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b086      	sub	sp, #24
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	60f8      	str	r0, [r7, #12]
 80161b4:	60b9      	str	r1, [r7, #8]
 80161b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80161b8:	2300      	movs	r3, #0
 80161ba:	617b      	str	r3, [r7, #20]
 80161bc:	e009      	b.n	80161d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	1c5a      	adds	r2, r3, #1
 80161c2:	60ba      	str	r2, [r7, #8]
 80161c4:	781b      	ldrb	r3, [r3, #0]
 80161c6:	4618      	mov	r0, r3
 80161c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	3301      	adds	r3, #1
 80161d0:	617b      	str	r3, [r7, #20]
 80161d2:	697a      	ldr	r2, [r7, #20]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	dbf1      	blt.n	80161be <_write+0x12>
	}
	return len;
 80161da:	687b      	ldr	r3, [r7, #4]
}
 80161dc:	4618      	mov	r0, r3
 80161de:	3718      	adds	r7, #24
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <_close>:

int _close(int file)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
	return -1;
 80161ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80161f0:	4618      	mov	r0, r3
 80161f2:	370c      	adds	r7, #12
 80161f4:	46bd      	mov	sp, r7
 80161f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fa:	4770      	bx	lr

080161fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80161fc:	b480      	push	{r7}
 80161fe:	b083      	sub	sp, #12
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801620c:	605a      	str	r2, [r3, #4]
	return 0;
 801620e:	2300      	movs	r3, #0
}
 8016210:	4618      	mov	r0, r3
 8016212:	370c      	adds	r7, #12
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr

0801621c <_isatty>:

int _isatty(int file)
{
 801621c:	b480      	push	{r7}
 801621e:	b083      	sub	sp, #12
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
	return 1;
 8016224:	2301      	movs	r3, #1
}
 8016226:	4618      	mov	r0, r3
 8016228:	370c      	adds	r7, #12
 801622a:	46bd      	mov	sp, r7
 801622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016230:	4770      	bx	lr

08016232 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8016232:	b480      	push	{r7}
 8016234:	b085      	sub	sp, #20
 8016236:	af00      	add	r7, sp, #0
 8016238:	60f8      	str	r0, [r7, #12]
 801623a:	60b9      	str	r1, [r7, #8]
 801623c:	607a      	str	r2, [r7, #4]
	return 0;
 801623e:	2300      	movs	r3, #0
}
 8016240:	4618      	mov	r0, r3
 8016242:	3714      	adds	r7, #20
 8016244:	46bd      	mov	sp, r7
 8016246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624a:	4770      	bx	lr

0801624c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b086      	sub	sp, #24
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8016254:	4a14      	ldr	r2, [pc, #80]	@ (80162a8 <_sbrk+0x5c>)
 8016256:	4b15      	ldr	r3, [pc, #84]	@ (80162ac <_sbrk+0x60>)
 8016258:	1ad3      	subs	r3, r2, r3
 801625a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801625c:	697b      	ldr	r3, [r7, #20]
 801625e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8016260:	4b13      	ldr	r3, [pc, #76]	@ (80162b0 <_sbrk+0x64>)
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d102      	bne.n	801626e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8016268:	4b11      	ldr	r3, [pc, #68]	@ (80162b0 <_sbrk+0x64>)
 801626a:	4a12      	ldr	r2, [pc, #72]	@ (80162b4 <_sbrk+0x68>)
 801626c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801626e:	4b10      	ldr	r3, [pc, #64]	@ (80162b0 <_sbrk+0x64>)
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	4413      	add	r3, r2
 8016276:	693a      	ldr	r2, [r7, #16]
 8016278:	429a      	cmp	r2, r3
 801627a:	d207      	bcs.n	801628c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801627c:	f011 fdca 	bl	8027e14 <__errno>
 8016280:	4603      	mov	r3, r0
 8016282:	220c      	movs	r2, #12
 8016284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8016286:	f04f 33ff 	mov.w	r3, #4294967295
 801628a:	e009      	b.n	80162a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801628c:	4b08      	ldr	r3, [pc, #32]	@ (80162b0 <_sbrk+0x64>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8016292:	4b07      	ldr	r3, [pc, #28]	@ (80162b0 <_sbrk+0x64>)
 8016294:	681a      	ldr	r2, [r3, #0]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	4413      	add	r3, r2
 801629a:	4a05      	ldr	r2, [pc, #20]	@ (80162b0 <_sbrk+0x64>)
 801629c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801629e:	68fb      	ldr	r3, [r7, #12]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3718      	adds	r7, #24
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	200c0000 	.word	0x200c0000
 80162ac:	00000400 	.word	0x00000400
 80162b0:	200bbb84 	.word	0x200bbb84
 80162b4:	200bbd00 	.word	0x200bbd00

080162b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function

Reset_Handler: ldr   sp, =_estack    /* set stack pointer */
 80162b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80162f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80162bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80162be:	e003      	b.n	80162c8 <LoopCopyDataInit>

080162c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80162c0:	4b0c      	ldr	r3, [pc, #48]	@ (80162f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80162c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80162c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80162c6:	3104      	adds	r1, #4

080162c8 <LoopCopyDataInit>:

LoopCopyDataInit:	ldr	r0, =_sdata
 80162c8:	480b      	ldr	r0, [pc, #44]	@ (80162f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80162ca:	4b0c      	ldr	r3, [pc, #48]	@ (80162fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80162cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80162ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80162d0:	d3f6      	bcc.n	80162c0 <CopyDataInit>
	ldr	r2, =_sbss
 80162d2:	4a0b      	ldr	r2, [pc, #44]	@ (8016300 <LoopForever+0x12>)
	b	LoopFillZerobss
 80162d4:	e002      	b.n	80162dc <LoopFillZerobss>

080162d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80162d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80162d8:	f842 3b04 	str.w	r3, [r2], #4

080162dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80162dc:	4b09      	ldr	r3, [pc, #36]	@ (8016304 <LoopForever+0x16>)
	cmp	r2, r3
 80162de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80162e0:	d3f9      	bcc.n	80162d6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80162e2:	f000 f813 	bl	801630c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80162e6:	f011 fd9b 	bl	8027e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80162ea:	f7fe fc2f 	bl	8014b4c <main>

080162ee <LoopForever>:

LoopForever:
    b LoopForever
 80162ee:	e7fe      	b.n	80162ee <LoopForever>
Reset_Handler: ldr   sp, =_estack    /* set stack pointer */
 80162f0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80162f4:	0803082c 	.word	0x0803082c
LoopCopyDataInit:	ldr	r0, =_sdata
 80162f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80162fc:	200005b0 	.word	0x200005b0
	ldr	r2, =_sbss
 8016300:	200005b0 	.word	0x200005b0
	ldr	r3, = _ebss
 8016304:	200bbcfc 	.word	0x200bbcfc

08016308 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8016308:	e7fe      	b.n	8016308 <ADC1_IRQHandler>
	...

0801630c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 801630c:	b480      	push	{r7}
 801630e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8016310:	4b18      	ldr	r3, [pc, #96]	@ (8016374 <SystemInit+0x68>)
 8016312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016316:	4a17      	ldr	r2, [pc, #92]	@ (8016374 <SystemInit+0x68>)
 8016318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801631c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8016320:	4b15      	ldr	r3, [pc, #84]	@ (8016378 <SystemInit+0x6c>)
 8016322:	2201      	movs	r2, #1
 8016324:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8016326:	4b14      	ldr	r3, [pc, #80]	@ (8016378 <SystemInit+0x6c>)
 8016328:	2200      	movs	r2, #0
 801632a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 801632c:	4b12      	ldr	r3, [pc, #72]	@ (8016378 <SystemInit+0x6c>)
 801632e:	2200      	movs	r2, #0
 8016330:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8016332:	4b11      	ldr	r3, [pc, #68]	@ (8016378 <SystemInit+0x6c>)
 8016334:	2200      	movs	r2, #0
 8016336:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8016338:	4b0f      	ldr	r3, [pc, #60]	@ (8016378 <SystemInit+0x6c>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	4a0e      	ldr	r2, [pc, #56]	@ (8016378 <SystemInit+0x6c>)
 801633e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8016342:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8016346:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8016348:	4b0b      	ldr	r3, [pc, #44]	@ (8016378 <SystemInit+0x6c>)
 801634a:	2200      	movs	r2, #0
 801634c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 801634e:	4b0a      	ldr	r3, [pc, #40]	@ (8016378 <SystemInit+0x6c>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4a09      	ldr	r2, [pc, #36]	@ (8016378 <SystemInit+0x6c>)
 8016354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016358:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 801635a:	4b07      	ldr	r3, [pc, #28]	@ (8016378 <SystemInit+0x6c>)
 801635c:	2200      	movs	r2, #0
 801635e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8016360:	4b04      	ldr	r3, [pc, #16]	@ (8016374 <SystemInit+0x68>)
 8016362:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8016366:	609a      	str	r2, [r3, #8]
  #endif
}
 8016368:	bf00      	nop
 801636a:	46bd      	mov	sp, r7
 801636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016370:	4770      	bx	lr
 8016372:	bf00      	nop
 8016374:	e000ed00 	.word	0xe000ed00
 8016378:	46020c00 	.word	0x46020c00

0801637c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8016380:	4b11      	ldr	r3, [pc, #68]	@ (80163c8 <HAL_Init+0x4c>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	4a10      	ldr	r2, [pc, #64]	@ (80163c8 <HAL_Init+0x4c>)
 8016386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801638a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801638c:	2003      	movs	r0, #3
 801638e:	f002 f9ed 	bl	801876c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8016392:	f007 ff19 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 8016396:	4602      	mov	r2, r0
 8016398:	4b0c      	ldr	r3, [pc, #48]	@ (80163cc <HAL_Init+0x50>)
 801639a:	6a1b      	ldr	r3, [r3, #32]
 801639c:	f003 030f 	and.w	r3, r3, #15
 80163a0:	490b      	ldr	r1, [pc, #44]	@ (80163d0 <HAL_Init+0x54>)
 80163a2:	5ccb      	ldrb	r3, [r1, r3]
 80163a4:	fa22 f303 	lsr.w	r3, r2, r3
 80163a8:	4a0a      	ldr	r2, [pc, #40]	@ (80163d4 <HAL_Init+0x58>)
 80163aa:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80163ac:	2000      	movs	r0, #0
 80163ae:	f000 f813 	bl	80163d8 <HAL_InitTick>
 80163b2:	4603      	mov	r3, r0
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d001      	beq.n	80163bc <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80163b8:	2301      	movs	r3, #1
 80163ba:	e002      	b.n	80163c2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80163bc:	f7ff f9f6 	bl	80157ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80163c0:	2300      	movs	r3, #0
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	bd80      	pop	{r7, pc}
 80163c6:	bf00      	nop
 80163c8:	40022000 	.word	0x40022000
 80163cc:	46020c00 	.word	0x46020c00
 80163d0:	080301a0 	.word	0x080301a0
 80163d4:	20000360 	.word	0x20000360

080163d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b082      	sub	sp, #8
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80163e0:	4b15      	ldr	r3, [pc, #84]	@ (8016438 <HAL_InitTick+0x60>)
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d101      	bne.n	80163ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e021      	b.n	8016430 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80163ec:	4b13      	ldr	r3, [pc, #76]	@ (801643c <HAL_InitTick+0x64>)
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	4b11      	ldr	r3, [pc, #68]	@ (8016438 <HAL_InitTick+0x60>)
 80163f2:	781b      	ldrb	r3, [r3, #0]
 80163f4:	4619      	mov	r1, r3
 80163f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80163fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80163fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016402:	4618      	mov	r0, r3
 8016404:	f002 f9fa 	bl	80187fc <HAL_SYSTICK_Config>
 8016408:	4603      	mov	r3, r0
 801640a:	2b00      	cmp	r3, #0
 801640c:	d001      	beq.n	8016412 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 801640e:	2301      	movs	r3, #1
 8016410:	e00e      	b.n	8016430 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	2b0f      	cmp	r3, #15
 8016416:	d80a      	bhi.n	801642e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8016418:	2200      	movs	r2, #0
 801641a:	6879      	ldr	r1, [r7, #4]
 801641c:	f04f 30ff 	mov.w	r0, #4294967295
 8016420:	f002 f9af 	bl	8018782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8016424:	4a06      	ldr	r2, [pc, #24]	@ (8016440 <HAL_InitTick+0x68>)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801642a:	2300      	movs	r3, #0
 801642c:	e000      	b.n	8016430 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801642e:	2301      	movs	r3, #1
}
 8016430:	4618      	mov	r0, r3
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}
 8016438:	20000368 	.word	0x20000368
 801643c:	20000360 	.word	0x20000360
 8016440:	20000364 	.word	0x20000364

08016444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8016444:	b480      	push	{r7}
 8016446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8016448:	4b06      	ldr	r3, [pc, #24]	@ (8016464 <HAL_IncTick+0x20>)
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	461a      	mov	r2, r3
 801644e:	4b06      	ldr	r3, [pc, #24]	@ (8016468 <HAL_IncTick+0x24>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	4413      	add	r3, r2
 8016454:	4a04      	ldr	r2, [pc, #16]	@ (8016468 <HAL_IncTick+0x24>)
 8016456:	6013      	str	r3, [r2, #0]
}
 8016458:	bf00      	nop
 801645a:	46bd      	mov	sp, r7
 801645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	20000368 	.word	0x20000368
 8016468:	200bbb88 	.word	0x200bbb88

0801646c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801646c:	b480      	push	{r7}
 801646e:	af00      	add	r7, sp, #0
  return uwTick;
 8016470:	4b03      	ldr	r3, [pc, #12]	@ (8016480 <HAL_GetTick+0x14>)
 8016472:	681b      	ldr	r3, [r3, #0]
}
 8016474:	4618      	mov	r0, r3
 8016476:	46bd      	mov	sp, r7
 8016478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647c:	4770      	bx	lr
 801647e:	bf00      	nop
 8016480:	200bbb88 	.word	0x200bbb88

08016484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b084      	sub	sp, #16
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801648c:	f7ff ffee 	bl	801646c <HAL_GetTick>
 8016490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801649c:	d005      	beq.n	80164aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801649e:	4b0a      	ldr	r3, [pc, #40]	@ (80164c8 <HAL_Delay+0x44>)
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	461a      	mov	r2, r3
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	4413      	add	r3, r2
 80164a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80164aa:	bf00      	nop
 80164ac:	f7ff ffde 	bl	801646c <HAL_GetTick>
 80164b0:	4602      	mov	r2, r0
 80164b2:	68bb      	ldr	r3, [r7, #8]
 80164b4:	1ad3      	subs	r3, r2, r3
 80164b6:	68fa      	ldr	r2, [r7, #12]
 80164b8:	429a      	cmp	r2, r3
 80164ba:	d8f7      	bhi.n	80164ac <HAL_Delay+0x28>
  {
  }
}
 80164bc:	bf00      	nop
 80164be:	bf00      	nop
 80164c0:	3710      	adds	r7, #16
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	20000368 	.word	0x20000368

080164cc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80164cc:	b480      	push	{r7}
 80164ce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80164d0:	4b05      	ldr	r3, [pc, #20]	@ (80164e8 <HAL_SuspendTick+0x1c>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	4a04      	ldr	r2, [pc, #16]	@ (80164e8 <HAL_SuspendTick+0x1c>)
 80164d6:	f023 0302 	bic.w	r3, r3, #2
 80164da:	6013      	str	r3, [r2, #0]
}
 80164dc:	bf00      	nop
 80164de:	46bd      	mov	sp, r7
 80164e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	e000e010 	.word	0xe000e010

080164ec <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80164ec:	b480      	push	{r7}
 80164ee:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80164f0:	4b05      	ldr	r3, [pc, #20]	@ (8016508 <HAL_ResumeTick+0x1c>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	4a04      	ldr	r2, [pc, #16]	@ (8016508 <HAL_ResumeTick+0x1c>)
 80164f6:	f043 0302 	orr.w	r3, r3, #2
 80164fa:	6013      	str	r3, [r2, #0]
}
 80164fc:	bf00      	nop
 80164fe:	46bd      	mov	sp, r7
 8016500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016504:	4770      	bx	lr
 8016506:	bf00      	nop
 8016508:	e000e010 	.word	0xe000e010

0801650c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801650c:	b480      	push	{r7}
 801650e:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8016510:	4b04      	ldr	r3, [pc, #16]	@ (8016524 <HAL_GetREVID+0x18>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	0c1b      	lsrs	r3, r3, #16
 8016516:	b29b      	uxth	r3, r3
}
 8016518:	4618      	mov	r0, r3
 801651a:	46bd      	mov	sp, r7
 801651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016520:	4770      	bx	lr
 8016522:	bf00      	nop
 8016524:	e0044000 	.word	0xe0044000

08016528 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8016528:	b480      	push	{r7}
 801652a:	b083      	sub	sp, #12
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
 8016530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	431a      	orrs	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	601a      	str	r2, [r3, #0]
}
 8016542:	bf00      	nop
 8016544:	370c      	adds	r7, #12
 8016546:	46bd      	mov	sp, r7
 8016548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654c:	4770      	bx	lr

0801654e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801654e:	b480      	push	{r7}
 8016550:	b083      	sub	sp, #12
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	431a      	orrs	r2, r3
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	601a      	str	r2, [r3, #0]
}
 8016568:	bf00      	nop
 801656a:	370c      	adds	r7, #12
 801656c:	46bd      	mov	sp, r7
 801656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016572:	4770      	bx	lr

08016574 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8016574:	b480      	push	{r7}
 8016576:	b083      	sub	sp, #12
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8016584:	4618      	mov	r0, r3
 8016586:	370c      	adds	r7, #12
 8016588:	46bd      	mov	sp, r7
 801658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658e:	4770      	bx	lr

08016590 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8016590:	b480      	push	{r7}
 8016592:	b085      	sub	sp, #20
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	4a0a      	ldr	r2, [pc, #40]	@ (80165cc <LL_ADC_SetResolution+0x3c>)
 80165a2:	4293      	cmp	r3, r2
 80165a4:	d104      	bne.n	80165b0 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	3b01      	subs	r3, #1
 80165aa:	f003 030c 	and.w	r3, r3, #12
 80165ae:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	f023 020c 	bic.w	r2, r3, #12
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	431a      	orrs	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	60da      	str	r2, [r3, #12]
}
 80165c0:	bf00      	nop
 80165c2:	3714      	adds	r7, #20
 80165c4:	46bd      	mov	sp, r7
 80165c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ca:	4770      	bx	lr
 80165cc:	46021000 	.word	0x46021000

080165d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80165d0:	b480      	push	{r7}
 80165d2:	b087      	sub	sp, #28
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	60f8      	str	r0, [r7, #12]
 80165d8:	60b9      	str	r1, [r7, #8]
 80165da:	607a      	str	r2, [r7, #4]
 80165dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	3360      	adds	r3, #96	@ 0x60
 80165e2:	461a      	mov	r2, r3
 80165e4:	68bb      	ldr	r3, [r7, #8]
 80165e6:	009b      	lsls	r3, r3, #2
 80165e8:	4413      	add	r3, r2
 80165ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	005b      	lsls	r3, r3, #1
 80165f8:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	430b      	orrs	r3, r1
 8016600:	431a      	orrs	r2, r3
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 8016606:	bf00      	nop
 8016608:	371c      	adds	r7, #28
 801660a:	46bd      	mov	sp, r7
 801660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016610:	4770      	bx	lr

08016612 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8016612:	b480      	push	{r7}
 8016614:	b085      	sub	sp, #20
 8016616:	af00      	add	r7, sp, #0
 8016618:	6078      	str	r0, [r7, #4]
 801661a:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	3360      	adds	r3, #96	@ 0x60
 8016620:	461a      	mov	r2, r3
 8016622:	683b      	ldr	r3, [r7, #0]
 8016624:	009b      	lsls	r3, r3, #2
 8016626:	4413      	add	r3, r2
 8016628:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8016632:	4618      	mov	r0, r3
 8016634:	3714      	adds	r7, #20
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801663e:	b480      	push	{r7}
 8016640:	b087      	sub	sp, #28
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	60b9      	str	r1, [r7, #8]
 8016648:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	3360      	adds	r3, #96	@ 0x60
 801664e:	461a      	mov	r2, r3
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	009b      	lsls	r3, r3, #2
 8016654:	4413      	add	r3, r2
 8016656:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8016658:	697b      	ldr	r3, [r7, #20]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	431a      	orrs	r2, r3
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	601a      	str	r2, [r3, #0]
}
 8016668:	bf00      	nop
 801666a:	371c      	adds	r7, #28
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr

08016674 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8016674:	b480      	push	{r7}
 8016676:	b087      	sub	sp, #28
 8016678:	af00      	add	r7, sp, #0
 801667a:	60f8      	str	r0, [r7, #12]
 801667c:	60b9      	str	r1, [r7, #8]
 801667e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	3360      	adds	r3, #96	@ 0x60
 8016684:	461a      	mov	r2, r3
 8016686:	68bb      	ldr	r3, [r7, #8]
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	4413      	add	r3, r2
 801668c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 801668e:	697b      	ldr	r3, [r7, #20]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	431a      	orrs	r2, r3
 801669a:	697b      	ldr	r3, [r7, #20]
 801669c:	601a      	str	r2, [r3, #0]
}
 801669e:	bf00      	nop
 80166a0:	371c      	adds	r7, #28
 80166a2:	46bd      	mov	sp, r7
 80166a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a8:	4770      	bx	lr

080166aa <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80166aa:	b480      	push	{r7}
 80166ac:	b087      	sub	sp, #28
 80166ae:	af00      	add	r7, sp, #0
 80166b0:	60f8      	str	r0, [r7, #12]
 80166b2:	60b9      	str	r1, [r7, #8]
 80166b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	3360      	adds	r3, #96	@ 0x60
 80166ba:	461a      	mov	r2, r3
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	009b      	lsls	r3, r3, #2
 80166c0:	4413      	add	r3, r2
 80166c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	431a      	orrs	r2, r3
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	601a      	str	r2, [r3, #0]
}
 80166d4:	bf00      	nop
 80166d6:	371c      	adds	r7, #28
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr

080166e0 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80166e0:	b480      	push	{r7}
 80166e2:	b083      	sub	sp, #12
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
 80166e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80166f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80166f6:	683a      	ldr	r2, [r7, #0]
 80166f8:	431a      	orrs	r2, r3
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016702:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016706:	683a      	ldr	r2, [r7, #0]
 8016708:	2a00      	cmp	r2, #0
 801670a:	d002      	beq.n	8016712 <LL_ADC_SetGainCompensation+0x32>
 801670c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016710:	e000      	b.n	8016714 <LL_ADC_SetGainCompensation+0x34>
 8016712:	2200      	movs	r2, #0
 8016714:	431a      	orrs	r2, r3
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	671a      	str	r2, [r3, #112]	@ 0x70
}
 801671a:	bf00      	nop
 801671c:	370c      	adds	r7, #12
 801671e:	46bd      	mov	sp, r7
 8016720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016724:	4770      	bx	lr

08016726 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8016726:	b480      	push	{r7}
 8016728:	b085      	sub	sp, #20
 801672a:	af00      	add	r7, sp, #0
 801672c:	60f8      	str	r0, [r7, #12]
 801672e:	60b9      	str	r1, [r7, #8]
 8016730:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	695a      	ldr	r2, [r3, #20]
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	f003 0304 	and.w	r3, r3, #4
 801673c:	2107      	movs	r1, #7
 801673e:	fa01 f303 	lsl.w	r3, r1, r3
 8016742:	43db      	mvns	r3, r3
 8016744:	401a      	ands	r2, r3
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	f003 0304 	and.w	r3, r3, #4
 801674c:	6879      	ldr	r1, [r7, #4]
 801674e:	fa01 f303 	lsl.w	r3, r1, r3
 8016752:	431a      	orrs	r2, r3
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8016758:	bf00      	nop
 801675a:	3714      	adds	r7, #20
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr

08016764 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8016764:	b480      	push	{r7}
 8016766:	b083      	sub	sp, #12
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8016774:	2b00      	cmp	r3, #0
 8016776:	d101      	bne.n	801677c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8016778:	2301      	movs	r3, #1
 801677a:	e000      	b.n	801677e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 801677c:	2300      	movs	r3, #0
}
 801677e:	4618      	mov	r0, r3
 8016780:	370c      	adds	r7, #12
 8016782:	46bd      	mov	sp, r7
 8016784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016788:	4770      	bx	lr
	...

0801678c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801678c:	b480      	push	{r7}
 801678e:	b089      	sub	sp, #36	@ 0x24
 8016790:	af00      	add	r7, sp, #0
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	60b9      	str	r1, [r7, #8]
 8016796:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	4a2b      	ldr	r2, [pc, #172]	@ (8016848 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 801679c:	4293      	cmp	r3, r2
 801679e:	d020      	beq.n	80167e2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	3330      	adds	r3, #48	@ 0x30
 80167a4:	461a      	mov	r2, r3
 80167a6:	68bb      	ldr	r3, [r7, #8]
 80167a8:	0a1b      	lsrs	r3, r3, #8
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	f003 030c 	and.w	r3, r3, #12
 80167b0:	4413      	add	r3, r2
 80167b2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80167b4:	69fb      	ldr	r3, [r7, #28]
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	f003 031f 	and.w	r3, r3, #31
 80167be:	211f      	movs	r1, #31
 80167c0:	fa01 f303 	lsl.w	r3, r1, r3
 80167c4:	43db      	mvns	r3, r3
 80167c6:	401a      	ands	r2, r3
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	0e9b      	lsrs	r3, r3, #26
 80167cc:	f003 011f 	and.w	r1, r3, #31
 80167d0:	68bb      	ldr	r3, [r7, #8]
 80167d2:	f003 031f 	and.w	r3, r3, #31
 80167d6:	fa01 f303 	lsl.w	r3, r1, r3
 80167da:	431a      	orrs	r2, r3
 80167dc:	69fb      	ldr	r3, [r7, #28]
 80167de:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80167e0:	e02b      	b.n	801683a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	f003 031f 	and.w	r3, r3, #31
 80167ec:	210f      	movs	r1, #15
 80167ee:	fa01 f303 	lsl.w	r3, r1, r3
 80167f2:	43db      	mvns	r3, r3
 80167f4:	401a      	ands	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d104      	bne.n	801680a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	0e9b      	lsrs	r3, r3, #26
 8016804:	f003 031f 	and.w	r3, r3, #31
 8016808:	e010      	b.n	801682c <LL_ADC_REG_SetSequencerRanks+0xa0>
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	fa93 f3a3 	rbit	r3, r3
 8016814:	613b      	str	r3, [r7, #16]
  return result;
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801681a:	69bb      	ldr	r3, [r7, #24]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d101      	bne.n	8016824 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8016820:	2320      	movs	r3, #32
 8016822:	e003      	b.n	801682c <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8016824:	69bb      	ldr	r3, [r7, #24]
 8016826:	fab3 f383 	clz	r3, r3
 801682a:	b2db      	uxtb	r3, r3
 801682c:	68b9      	ldr	r1, [r7, #8]
 801682e:	f001 011f 	and.w	r1, r1, #31
 8016832:	408b      	lsls	r3, r1
 8016834:	431a      	orrs	r2, r3
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801683a:	bf00      	nop
 801683c:	3724      	adds	r7, #36	@ 0x24
 801683e:	46bd      	mov	sp, r7
 8016840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	46021000 	.word	0x46021000

0801684c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 801684c:	b480      	push	{r7}
 801684e:	b087      	sub	sp, #28
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
 8016854:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801685c:	2b00      	cmp	r3, #0
 801685e:	d107      	bne.n	8016870 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	0e9b      	lsrs	r3, r3, #26
 8016864:	f003 031f 	and.w	r3, r3, #31
 8016868:	2201      	movs	r2, #1
 801686a:	fa02 f303 	lsl.w	r3, r2, r3
 801686e:	e015      	b.n	801689c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016874:	693b      	ldr	r3, [r7, #16]
 8016876:	fa93 f3a3 	rbit	r3, r3
 801687a:	60fb      	str	r3, [r7, #12]
  return result;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8016880:	697b      	ldr	r3, [r7, #20]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d101      	bne.n	801688a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8016886:	2320      	movs	r3, #32
 8016888:	e003      	b.n	8016892 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	fab3 f383 	clz	r3, r3
 8016890:	b2db      	uxtb	r3, r3
 8016892:	f003 031f 	and.w	r3, r3, #31
 8016896:	2201      	movs	r2, #1
 8016898:	fa02 f303 	lsl.w	r3, r2, r3
 801689c:	687a      	ldr	r2, [r7, #4]
 801689e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80168a0:	431a      	orrs	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80168a6:	bf00      	nop
 80168a8:	371c      	adds	r7, #28
 80168aa:	46bd      	mov	sp, r7
 80168ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b0:	4770      	bx	lr

080168b2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80168b2:	b480      	push	{r7}
 80168b4:	b083      	sub	sp, #12
 80168b6:	af00      	add	r7, sp, #0
 80168b8:	6078      	str	r0, [r7, #4]
 80168ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80168c0:	683b      	ldr	r3, [r7, #0]
 80168c2:	0e9b      	lsrs	r3, r3, #26
 80168c4:	f003 031f 	and.w	r3, r3, #31
 80168c8:	2101      	movs	r1, #1
 80168ca:	fa01 f303 	lsl.w	r3, r1, r3
 80168ce:	43db      	mvns	r3, r3
 80168d0:	401a      	ands	r2, r3
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80168d6:	bf00      	nop
 80168d8:	370c      	adds	r7, #12
 80168da:	46bd      	mov	sp, r7
 80168dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168e0:	4770      	bx	lr
	...

080168e4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80168e4:	b480      	push	{r7}
 80168e6:	b08b      	sub	sp, #44	@ 0x2c
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80168f0:	68fb      	ldr	r3, [r7, #12]
 80168f2:	4a2d      	ldr	r2, [pc, #180]	@ (80169a8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80168f4:	4293      	cmp	r3, r2
 80168f6:	d042      	beq.n	801697e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d104      	bne.n	801690c <LL_ADC_SetChannelSamplingTime+0x28>
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	0e9b      	lsrs	r3, r3, #26
 8016906:	f003 021f 	and.w	r2, r3, #31
 801690a:	e011      	b.n	8016930 <LL_ADC_SetChannelSamplingTime+0x4c>
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016910:	69bb      	ldr	r3, [r7, #24]
 8016912:	fa93 f3a3 	rbit	r3, r3
 8016916:	617b      	str	r3, [r7, #20]
  return result;
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 801691c:	69fb      	ldr	r3, [r7, #28]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d101      	bne.n	8016926 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8016922:	2320      	movs	r3, #32
 8016924:	e003      	b.n	801692e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8016926:	69fb      	ldr	r3, [r7, #28]
 8016928:	fab3 f383 	clz	r3, r3
 801692c:	b2db      	uxtb	r3, r3
 801692e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	0e5b      	lsrs	r3, r3, #25
 8016934:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8016938:	460b      	mov	r3, r1
 801693a:	009b      	lsls	r3, r3, #2
 801693c:	440b      	add	r3, r1
 801693e:	005b      	lsls	r3, r3, #1
 8016940:	1ad2      	subs	r2, r2, r3
 8016942:	4613      	mov	r3, r2
 8016944:	005b      	lsls	r3, r3, #1
 8016946:	4413      	add	r3, r2
 8016948:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	3314      	adds	r3, #20
 801694e:	461a      	mov	r2, r3
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	0e5b      	lsrs	r3, r3, #25
 8016954:	009b      	lsls	r3, r3, #2
 8016956:	f003 0304 	and.w	r3, r3, #4
 801695a:	4413      	add	r3, r2
 801695c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 801695e:	6a3b      	ldr	r3, [r7, #32]
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	2107      	movs	r1, #7
 8016964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016966:	fa01 f303 	lsl.w	r3, r1, r3
 801696a:	43db      	mvns	r3, r3
 801696c:	401a      	ands	r2, r3
 801696e:	6879      	ldr	r1, [r7, #4]
 8016970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016972:	fa01 f303 	lsl.w	r3, r1, r3
 8016976:	431a      	orrs	r2, r3
 8016978:	6a3b      	ldr	r3, [r7, #32]
 801697a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 801697c:	e00e      	b.n	801699c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	695a      	ldr	r2, [r3, #20]
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	021b      	lsls	r3, r3, #8
 8016986:	43db      	mvns	r3, r3
 8016988:	401a      	ands	r2, r3
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	0219      	lsls	r1, r3, #8
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	400b      	ands	r3, r1
 8016992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8016996:	431a      	orrs	r2, r3
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	615a      	str	r2, [r3, #20]
}
 801699c:	bf00      	nop
 801699e:	372c      	adds	r7, #44	@ 0x2c
 80169a0:	46bd      	mov	sp, r7
 80169a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169a6:	4770      	bx	lr
 80169a8:	46021000 	.word	0x46021000

080169ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80169ac:	b480      	push	{r7}
 80169ae:	b085      	sub	sp, #20
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	60b9      	str	r1, [r7, #8]
 80169b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80169be:	68bb      	ldr	r3, [r7, #8]
 80169c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80169c4:	43db      	mvns	r3, r3
 80169c6:	401a      	ands	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f003 0318 	and.w	r3, r3, #24
 80169ce:	4908      	ldr	r1, [pc, #32]	@ (80169f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80169d0:	40d9      	lsrs	r1, r3
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	400b      	ands	r3, r1
 80169d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80169da:	431a      	orrs	r2, r3
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80169e2:	bf00      	nop
 80169e4:	3714      	adds	r7, #20
 80169e6:	46bd      	mov	sp, r7
 80169e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ec:	4770      	bx	lr
 80169ee:	bf00      	nop
 80169f0:	000fffff 	.word	0x000fffff

080169f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80169f4:	b480      	push	{r7}
 80169f6:	b083      	sub	sp, #12
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8016a04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016a08:	687a      	ldr	r2, [r7, #4]
 8016a0a:	6093      	str	r3, [r2, #8]
}
 8016a0c:	bf00      	nop
 8016a0e:	370c      	adds	r7, #12
 8016a10:	46bd      	mov	sp, r7
 8016a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a16:	4770      	bx	lr

08016a18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8016a18:	b480      	push	{r7}
 8016a1a:	b083      	sub	sp, #12
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	689b      	ldr	r3, [r3, #8]
 8016a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8016a2c:	d101      	bne.n	8016a32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8016a2e:	2301      	movs	r3, #1
 8016a30:	e000      	b.n	8016a34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8016a32:	2300      	movs	r3, #0
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	370c      	adds	r7, #12
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr

08016a40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	689b      	ldr	r3, [r3, #8]
 8016a4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8016a50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016a54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	609a      	str	r2, [r3, #8]
}
 8016a5c:	bf00      	nop
 8016a5e:	370c      	adds	r7, #12
 8016a60:	46bd      	mov	sp, r7
 8016a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a66:	4770      	bx	lr

08016a68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8016a68:	b480      	push	{r7}
 8016a6a:	b083      	sub	sp, #12
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	689b      	ldr	r3, [r3, #8]
 8016a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016a7c:	d101      	bne.n	8016a82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8016a7e:	2301      	movs	r3, #1
 8016a80:	e000      	b.n	8016a84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8016a82:	2300      	movs	r3, #0
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	370c      	adds	r7, #12
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr

08016a90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8016a90:	b480      	push	{r7}
 8016a92:	b083      	sub	sp, #12
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	689b      	ldr	r3, [r3, #8]
 8016a9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016aa0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016aa4:	f043 0201 	orr.w	r2, r3, #1
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	609a      	str	r2, [r3, #8]
}
 8016aac:	bf00      	nop
 8016aae:	370c      	adds	r7, #12
 8016ab0:	46bd      	mov	sp, r7
 8016ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab6:	4770      	bx	lr

08016ab8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8016ab8:	b480      	push	{r7}
 8016aba:	b083      	sub	sp, #12
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	689b      	ldr	r3, [r3, #8]
 8016ac4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016acc:	f043 0202 	orr.w	r2, r3, #2
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	609a      	str	r2, [r3, #8]
}
 8016ad4:	bf00      	nop
 8016ad6:	370c      	adds	r7, #12
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ade:	4770      	bx	lr

08016ae0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	689b      	ldr	r3, [r3, #8]
 8016aec:	f003 0301 	and.w	r3, r3, #1
 8016af0:	2b01      	cmp	r3, #1
 8016af2:	d101      	bne.n	8016af8 <LL_ADC_IsEnabled+0x18>
 8016af4:	2301      	movs	r3, #1
 8016af6:	e000      	b.n	8016afa <LL_ADC_IsEnabled+0x1a>
 8016af8:	2300      	movs	r3, #0
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	370c      	adds	r7, #12
 8016afe:	46bd      	mov	sp, r7
 8016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b04:	4770      	bx	lr

08016b06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8016b06:	b480      	push	{r7}
 8016b08:	b083      	sub	sp, #12
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	689b      	ldr	r3, [r3, #8]
 8016b12:	f003 0302 	and.w	r3, r3, #2
 8016b16:	2b02      	cmp	r3, #2
 8016b18:	d101      	bne.n	8016b1e <LL_ADC_IsDisableOngoing+0x18>
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e000      	b.n	8016b20 <LL_ADC_IsDisableOngoing+0x1a>
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	370c      	adds	r7, #12
 8016b24:	46bd      	mov	sp, r7
 8016b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2a:	4770      	bx	lr

08016b2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8016b2c:	b480      	push	{r7}
 8016b2e:	b083      	sub	sp, #12
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	689b      	ldr	r3, [r3, #8]
 8016b38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016b40:	f043 0204 	orr.w	r2, r3, #4
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	609a      	str	r2, [r3, #8]
}
 8016b48:	bf00      	nop
 8016b4a:	370c      	adds	r7, #12
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b52:	4770      	bx	lr

08016b54 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8016b54:	b480      	push	{r7}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	689b      	ldr	r3, [r3, #8]
 8016b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016b64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016b68:	f043 0210 	orr.w	r2, r3, #16
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8016b70:	bf00      	nop
 8016b72:	370c      	adds	r7, #12
 8016b74:	46bd      	mov	sp, r7
 8016b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7a:	4770      	bx	lr

08016b7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	689b      	ldr	r3, [r3, #8]
 8016b88:	f003 0304 	and.w	r3, r3, #4
 8016b8c:	2b04      	cmp	r3, #4
 8016b8e:	d101      	bne.n	8016b94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8016b90:	2301      	movs	r3, #1
 8016b92:	e000      	b.n	8016b96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8016b94:	2300      	movs	r3, #0
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	370c      	adds	r7, #12
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr

08016ba2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8016ba2:	b480      	push	{r7}
 8016ba4:	b083      	sub	sp, #12
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_JADSTP);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	689b      	ldr	r3, [r3, #8]
 8016bae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016bb2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8016bb6:	f043 0220 	orr.w	r2, r3, #32
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	609a      	str	r2, [r3, #8]
}
 8016bbe:	bf00      	nop
 8016bc0:	370c      	adds	r7, #12
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc8:	4770      	bx	lr

08016bca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8016bca:	b480      	push	{r7}
 8016bcc:	b083      	sub	sp, #12
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	689b      	ldr	r3, [r3, #8]
 8016bd6:	f003 0308 	and.w	r3, r3, #8
 8016bda:	2b08      	cmp	r3, #8
 8016bdc:	d101      	bne.n	8016be2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8016bde:	2301      	movs	r3, #1
 8016be0:	e000      	b.n	8016be4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8016be2:	2300      	movs	r3, #0
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	370c      	adds	r7, #12
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b08a      	sub	sp, #40	@ 0x28
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8016c02:	2300      	movs	r3, #0
 8016c04:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d101      	bne.n	8016c10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	e2b3      	b.n	8017178 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	691b      	ldr	r3, [r3, #16]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d003      	beq.n	8016c20 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	4a8b      	ldr	r2, [pc, #556]	@ (8016e4c <HAL_ADC_Init+0x25c>)
 8016c1e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d109      	bne.n	8016c3c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f7fe fde1 	bl	80157f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	2200      	movs	r2, #0
 8016c32:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	2200      	movs	r2, #0
 8016c38:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4618      	mov	r0, r3
 8016c42:	f7ff fee9 	bl	8016a18 <LL_ADC_IsDeepPowerDownEnabled>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d004      	beq.n	8016c56 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7ff fecf 	bl	80169f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7ff ff04 	bl	8016a68 <LL_ADC_IsInternalRegulatorEnabled>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d115      	bne.n	8016c92 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7ff fee8 	bl	8016a40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016c70:	4b77      	ldr	r3, [pc, #476]	@ (8016e50 <HAL_ADC_Init+0x260>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	099b      	lsrs	r3, r3, #6
 8016c76:	4a77      	ldr	r2, [pc, #476]	@ (8016e54 <HAL_ADC_Init+0x264>)
 8016c78:	fba2 2303 	umull	r2, r3, r2, r3
 8016c7c:	099b      	lsrs	r3, r3, #6
 8016c7e:	3301      	adds	r3, #1
 8016c80:	005b      	lsls	r3, r3, #1
 8016c82:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8016c84:	e002      	b.n	8016c8c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	3b01      	subs	r3, #1
 8016c8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d1f9      	bne.n	8016c86 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7ff fee6 	bl	8016a68 <LL_ADC_IsInternalRegulatorEnabled>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d10e      	bne.n	8016cc0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016ca6:	f043 0210 	orr.w	r2, r3, #16
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016cb2:	f043 0201 	orr.w	r2, r3, #1
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8016cba:	2301      	movs	r3, #1
 8016cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7ff ff59 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 8016cca:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016cd0:	f003 0310 	and.w	r3, r3, #16
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	f040 8244 	bne.w	8017162 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8016cda:	69bb      	ldr	r3, [r7, #24]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	f040 8240 	bne.w	8017162 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016ce6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8016cea:	f043 0202 	orr.w	r2, r3, #2
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	f7ff fef2 	bl	8016ae0 <LL_ADC_IsEnabled>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d140      	bne.n	8016d84 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4a51      	ldr	r2, [pc, #324]	@ (8016e4c <HAL_ADC_Init+0x25c>)
 8016d08:	4293      	cmp	r3, r2
 8016d0a:	d028      	beq.n	8016d5e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	4a51      	ldr	r2, [pc, #324]	@ (8016e58 <HAL_ADC_Init+0x268>)
 8016d12:	4293      	cmp	r3, r2
 8016d14:	d109      	bne.n	8016d2a <HAL_ADC_Init+0x13a>
 8016d16:	4850      	ldr	r0, [pc, #320]	@ (8016e58 <HAL_ADC_Init+0x268>)
 8016d18:	f7ff fee2 	bl	8016ae0 <LL_ADC_IsEnabled>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	bf0c      	ite	eq
 8016d22:	2301      	moveq	r3, #1
 8016d24:	2300      	movne	r3, #0
 8016d26:	b2db      	uxtb	r3, r3
 8016d28:	e008      	b.n	8016d3c <HAL_ADC_Init+0x14c>
 8016d2a:	4848      	ldr	r0, [pc, #288]	@ (8016e4c <HAL_ADC_Init+0x25c>)
 8016d2c:	f7ff fed8 	bl	8016ae0 <LL_ADC_IsEnabled>
 8016d30:	4603      	mov	r3, r0
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	bf0c      	ite	eq
 8016d36:	2301      	moveq	r3, #1
 8016d38:	2300      	movne	r3, #0
 8016d3a:	b2db      	uxtb	r3, r3
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d021      	beq.n	8016d84 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	4a44      	ldr	r2, [pc, #272]	@ (8016e58 <HAL_ADC_Init+0x268>)
 8016d46:	4293      	cmp	r3, r2
 8016d48:	d101      	bne.n	8016d4e <HAL_ADC_Init+0x15e>
 8016d4a:	4a44      	ldr	r2, [pc, #272]	@ (8016e5c <HAL_ADC_Init+0x26c>)
 8016d4c:	e000      	b.n	8016d50 <HAL_ADC_Init+0x160>
 8016d4e:	4a44      	ldr	r2, [pc, #272]	@ (8016e60 <HAL_ADC_Init+0x270>)
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	685b      	ldr	r3, [r3, #4]
 8016d54:	4619      	mov	r1, r3
 8016d56:	4610      	mov	r0, r2
 8016d58:	f7ff fbe6 	bl	8016528 <LL_ADC_SetCommonClock>
 8016d5c:	e012      	b.n	8016d84 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	689b      	ldr	r3, [r3, #8]
 8016d66:	4619      	mov	r1, r3
 8016d68:	4610      	mov	r0, r2
 8016d6a:	f7ff fc11 	bl	8016590 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8016d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8016e60 <HAL_ADC_Init+0x270>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8016d7e:	4938      	ldr	r1, [pc, #224]	@ (8016e60 <HAL_ADC_Init+0x270>)
 8016d80:	4313      	orrs	r3, r2
 8016d82:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	4a30      	ldr	r2, [pc, #192]	@ (8016e4c <HAL_ADC_Init+0x25c>)
 8016d8a:	4293      	cmp	r3, r2
 8016d8c:	d010      	beq.n	8016db0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8016d94:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8016d9a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8016da0:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016da8:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8016daa:	4313      	orrs	r3, r2
 8016dac:	623b      	str	r3, [r7, #32]
 8016dae:	e030      	b.n	8016e12 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	7f1b      	ldrb	r3, [r3, #28]
 8016db4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8016dbc:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016dbe:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8016dc0:	687a      	ldr	r2, [r7, #4]
 8016dc2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8016dc4:	2a00      	cmp	r2, #0
 8016dc6:	d002      	beq.n	8016dce <HAL_ADC_Init+0x1de>
 8016dc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8016dcc:	e000      	b.n	8016dd0 <HAL_ADC_Init+0x1e0>
 8016dce:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8016dd0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8016dd6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	691b      	ldr	r3, [r3, #16]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	da04      	bge.n	8016dea <HAL_ADC_Init+0x1fa>
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	691b      	ldr	r3, [r3, #16]
 8016de4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016de8:	e001      	b.n	8016dee <HAL_ADC_Init+0x1fe>
 8016dea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8016dee:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	4918      	ldr	r1, [pc, #96]	@ (8016e58 <HAL_ADC_Init+0x268>)
 8016df6:	428b      	cmp	r3, r1
 8016df8:	d103      	bne.n	8016e02 <HAL_ADC_Init+0x212>
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016e00:	e003      	b.n	8016e0a <HAL_ADC_Init+0x21a>
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016e08:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8016e0a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016e0c:	6a3a      	ldr	r2, [r7, #32]
 8016e0e:	4313      	orrs	r3, r2
 8016e10:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016e18:	2b01      	cmp	r3, #1
 8016e1a:	d12f      	bne.n	8016e7c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4a0a      	ldr	r2, [pc, #40]	@ (8016e4c <HAL_ADC_Init+0x25c>)
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d007      	beq.n	8016e36 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016e2a:	3b01      	subs	r3, #1
 8016e2c:	045b      	lsls	r3, r3, #17
 8016e2e:	6a3a      	ldr	r2, [r7, #32]
 8016e30:	4313      	orrs	r3, r2
 8016e32:	623b      	str	r3, [r7, #32]
 8016e34:	e022      	b.n	8016e7c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d111      	bne.n	8016e64 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8016e40:	6a3b      	ldr	r3, [r7, #32]
 8016e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016e46:	623b      	str	r3, [r7, #32]
 8016e48:	e018      	b.n	8016e7c <HAL_ADC_Init+0x28c>
 8016e4a:	bf00      	nop
 8016e4c:	46021000 	.word	0x46021000
 8016e50:	20000360 	.word	0x20000360
 8016e54:	053e2d63 	.word	0x053e2d63
 8016e58:	42028000 	.word	0x42028000
 8016e5c:	42028308 	.word	0x42028308
 8016e60:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016e68:	f043 0220 	orr.w	r2, r3, #32
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016e74:	f043 0201 	orr.w	r2, r3, #1
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	4a92      	ldr	r2, [pc, #584]	@ (80170cc <HAL_ADC_Init+0x4dc>)
 8016e82:	4293      	cmp	r3, r2
 8016e84:	d018      	beq.n	8016eb8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d009      	beq.n	8016ea2 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016e92:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016e9a:	4313      	orrs	r3, r2
 8016e9c:	6a3a      	ldr	r2, [r7, #32]
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	68da      	ldr	r2, [r3, #12]
 8016ea8:	4b89      	ldr	r3, [pc, #548]	@ (80170d0 <HAL_ADC_Init+0x4e0>)
 8016eaa:	4013      	ands	r3, r2
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	6812      	ldr	r2, [r2, #0]
 8016eb0:	6a39      	ldr	r1, [r7, #32]
 8016eb2:	430b      	orrs	r3, r1
 8016eb4:	60d3      	str	r3, [r2, #12]
 8016eb6:	e031      	b.n	8016f1c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d009      	beq.n	8016ed4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ec4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016ecc:	4313      	orrs	r3, r2
 8016ece:	6a3a      	ldr	r2, [r7, #32]
 8016ed0:	4313      	orrs	r3, r2
 8016ed2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	68da      	ldr	r2, [r3, #12]
 8016eda:	4b7e      	ldr	r3, [pc, #504]	@ (80170d4 <HAL_ADC_Init+0x4e4>)
 8016edc:	4013      	ands	r3, r2
 8016ede:	687a      	ldr	r2, [r7, #4]
 8016ee0:	6812      	ldr	r2, [r2, #0]
 8016ee2:	6a39      	ldr	r1, [r7, #32]
 8016ee4:	430b      	orrs	r3, r1
 8016ee6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6a1b      	ldr	r3, [r3, #32]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d008      	beq.n	8016f02 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6a1a      	ldr	r2, [r3, #32]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	430a      	orrs	r2, r1
 8016f00:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d008      	beq.n	8016f1c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	430a      	orrs	r2, r1
 8016f1a:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	4a6a      	ldr	r2, [pc, #424]	@ (80170cc <HAL_ADC_Init+0x4dc>)
 8016f22:	4293      	cmp	r3, r2
 8016f24:	f000 8093 	beq.w	801704e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f7ff fe25 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 8016f32:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7ff fe46 	bl	8016bca <LL_ADC_INJ_IsConversionOngoing>
 8016f3e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d161      	bne.n	801700a <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d15e      	bne.n	801700a <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	7f1b      	ldrb	r3, [r3, #28]
 8016f50:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	4960      	ldr	r1, [pc, #384]	@ (80170d8 <HAL_ADC_Init+0x4e8>)
 8016f58:	428b      	cmp	r3, r1
 8016f5a:	d102      	bne.n	8016f62 <HAL_ADC_Init+0x372>
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f60:	e002      	b.n	8016f68 <HAL_ADC_Init+0x378>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f66:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8016f68:	4313      	orrs	r3, r2
 8016f6a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	68db      	ldr	r3, [r3, #12]
 8016f72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016f76:	f023 0303 	bic.w	r3, r3, #3
 8016f7a:	687a      	ldr	r2, [r7, #4]
 8016f7c:	6812      	ldr	r2, [r2, #0]
 8016f7e:	6a39      	ldr	r1, [r7, #32]
 8016f80:	430b      	orrs	r3, r1
 8016f82:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	68db      	ldr	r3, [r3, #12]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d007      	beq.n	8016f9c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681a      	ldr	r2, [r3, #0]
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	4619      	mov	r1, r3
 8016f96:	4610      	mov	r0, r2
 8016f98:	f7ff fba2 	bl	80166e0 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	d11e      	bne.n	8016fe4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016faa:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	691a      	ldr	r2, [r3, #16]
 8016fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80170dc <HAL_ADC_Init+0x4ec>)
 8016fb4:	4013      	ands	r3, r2
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8016fba:	0411      	lsls	r1, r2, #16
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8016fc0:	4311      	orrs	r1, r2
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8016fc6:	4311      	orrs	r1, r2
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8016fcc:	4311      	orrs	r1, r2
 8016fce:	687a      	ldr	r2, [r7, #4]
 8016fd0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8016fd2:	0892      	lsrs	r2, r2, #2
 8016fd4:	430a      	orrs	r2, r1
 8016fd6:	431a      	orrs	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	f042 0201 	orr.w	r2, r2, #1
 8016fe0:	611a      	str	r2, [r3, #16]
 8016fe2:	e007      	b.n	8016ff4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	691a      	ldr	r2, [r3, #16]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f022 0201 	bic.w	r2, r2, #1
 8016ff2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	691b      	ldr	r3, [r3, #16]
 8016ffa:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	430a      	orrs	r2, r1
 8017008:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	691b      	ldr	r3, [r3, #16]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d10c      	bne.n	801702c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017018:	f023 010f 	bic.w	r1, r3, #15
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017020:	1e5a      	subs	r2, r3, #1
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	430a      	orrs	r2, r1
 8017028:	631a      	str	r2, [r3, #48]	@ 0x30
 801702a:	e007      	b.n	801703c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	f022 020f 	bic.w	r2, r2, #15
 801703a:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017040:	f023 0303 	bic.w	r3, r3, #3
 8017044:	f043 0201 	orr.w	r2, r3, #1
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 801704c:	e092      	b.n	8017174 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8017054:	2b01      	cmp	r3, #1
 8017056:	d111      	bne.n	801707c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8017060:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8017066:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 801706c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 801706e:	69fa      	ldr	r2, [r7, #28]
 8017070:	4313      	orrs	r3, r2
 8017072:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8017074:	69fb      	ldr	r3, [r7, #28]
 8017076:	f043 0301 	orr.w	r3, r3, #1
 801707a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	691a      	ldr	r2, [r3, #16]
 8017082:	4b17      	ldr	r3, [pc, #92]	@ (80170e0 <HAL_ADC_Init+0x4f0>)
 8017084:	4013      	ands	r3, r2
 8017086:	687a      	ldr	r2, [r7, #4]
 8017088:	6812      	ldr	r2, [r2, #0]
 801708a:	69f9      	ldr	r1, [r7, #28]
 801708c:	430b      	orrs	r3, r1
 801708e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	6818      	ldr	r0, [r3, #0]
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017098:	461a      	mov	r2, r3
 801709a:	2100      	movs	r1, #0
 801709c:	f7ff fb43 	bl	8016726 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	6818      	ldr	r0, [r3, #0]
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170a8:	461a      	mov	r2, r3
 80170aa:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 80170ae:	f7ff fb3a 	bl	8016726 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	691b      	ldr	r3, [r3, #16]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d114      	bne.n	80170e4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	f062 020f 	orn	r2, r2, #15
 80170c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80170ca:	e024      	b.n	8017116 <HAL_ADC_Init+0x526>
 80170cc:	46021000 	.word	0x46021000
 80170d0:	fff0c013 	.word	0xfff0c013
 80170d4:	ffde800d 	.word	0xffde800d
 80170d8:	42028000 	.word	0x42028000
 80170dc:	fc00f81e 	.word	0xfc00f81e
 80170e0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	691b      	ldr	r3, [r3, #16]
 80170e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80170ec:	d113      	bne.n	8017116 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170f8:	3b01      	subs	r3, #1
 80170fa:	009b      	lsls	r3, r3, #2
 80170fc:	f003 031c 	and.w	r3, r3, #28
 8017100:	f06f 020f 	mvn.w	r2, #15
 8017104:	fa02 f103 	lsl.w	r1, r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	430a      	orrs	r2, r1
 8017114:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	68da      	ldr	r2, [r3, #12]
 801711c:	4b18      	ldr	r3, [pc, #96]	@ (8017180 <HAL_ADC_Init+0x590>)
 801711e:	4013      	ands	r3, r2
 8017120:	6a3a      	ldr	r2, [r7, #32]
 8017122:	429a      	cmp	r2, r3
 8017124:	d10b      	bne.n	801713e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	2200      	movs	r2, #0
 801712a:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017130:	f023 0303 	bic.w	r3, r3, #3
 8017134:	f043 0201 	orr.w	r2, r3, #1
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 801713c:	e01a      	b.n	8017174 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017142:	f023 0312 	bic.w	r3, r3, #18
 8017146:	f043 0210 	orr.w	r2, r3, #16
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017152:	f043 0201 	orr.w	r2, r3, #1
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 801715a:	2301      	movs	r3, #1
 801715c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8017160:	e008      	b.n	8017174 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017166:	f043 0210 	orr.w	r2, r3, #16
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 801716e:	2301      	movs	r3, #1
 8017170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8017174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8017178:	4618      	mov	r0, r3
 801717a:	3728      	adds	r7, #40	@ 0x28
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}
 8017180:	833ffff3 	.word	0x833ffff3

08017184 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b084      	sub	sp, #16
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4618      	mov	r0, r3
 8017192:	f7ff fcf3 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 8017196:	4603      	mov	r3, r0
 8017198:	2b00      	cmp	r3, #0
 801719a:	d15d      	bne.n	8017258 <HAL_ADC_Start+0xd4>
  {
    __HAL_LOCK(hadc);
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	d101      	bne.n	80171aa <HAL_ADC_Start+0x26>
 80171a6:	2302      	movs	r3, #2
 80171a8:	e059      	b.n	801725e <HAL_ADC_Start+0xda>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	2201      	movs	r2, #1
 80171ae:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f001 f916 	bl	80183e4 <ADC_Enable>
 80171b8:	4603      	mov	r3, r0
 80171ba:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80171bc:	7bfb      	ldrb	r3, [r7, #15]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d145      	bne.n	801724e <HAL_ADC_Start+0xca>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80171c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80171ca:	f023 0301 	bic.w	r3, r3, #1
 80171ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	679a      	str	r2, [r3, #120]	@ 0x78
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	4a23      	ldr	r2, [pc, #140]	@ (8017268 <HAL_ADC_Start+0xe4>)
 80171dc:	4293      	cmp	r3, r2
 80171de:	d011      	beq.n	8017204 <HAL_ADC_Start+0x80>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */
        /* Set ADC error code */
        /* Check if a conversion is on going on ADC group injected */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80171e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80171e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80171ec:	d106      	bne.n	80171fc <HAL_ADC_Start+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80171f2:	f023 0206 	bic.w	r2, r3, #6
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80171fa:	e006      	b.n	801720a <HAL_ADC_Start+0x86>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2200      	movs	r2, #0
 8017200:	67da      	str	r2, [r3, #124]	@ 0x7c
 8017202:	e002      	b.n	801720a <HAL_ADC_Start+0x86>
      }
      else
      {
        /* Set ADC error code */
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2200      	movs	r2, #0
 8017208:	67da      	str	r2, [r3, #124]	@ 0x7c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	221c      	movs	r2, #28
 8017210:	601a      	str	r2, [r3, #0]

      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	2200      	movs	r2, #0
 8017216:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */

      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	4a12      	ldr	r2, [pc, #72]	@ (8017268 <HAL_ADC_Start+0xe4>)
 8017220:	4293      	cmp	r3, r2
 8017222:	d00e      	beq.n	8017242 <HAL_ADC_Start+0xbe>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }

        }
#else
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_JAUTO) != 0UL)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	68db      	ldr	r3, [r3, #12]
 801722a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801722e:	2b00      	cmp	r3, #0
 8017230:	d007      	beq.n	8017242 <HAL_ADC_Start+0xbe>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017236:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 801723a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	679a      	str	r2, [r3, #120]	@ 0x78
        }
#endif /* ADC_MULTIMODE_SUPPORT */
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	4618      	mov	r0, r3
 8017248:	f7ff fc70 	bl	8016b2c <LL_ADC_REG_StartConversion>
 801724c:	e006      	b.n	801725c <HAL_ADC_Start+0xd8>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	2200      	movs	r2, #0
 8017252:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8017256:	e001      	b.n	801725c <HAL_ADC_Start+0xd8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8017258:	2302      	movs	r3, #2
 801725a:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 801725c:	7bfb      	ldrb	r3, [r7, #15]
}
 801725e:	4618      	mov	r0, r3
 8017260:	3710      	adds	r7, #16
 8017262:	46bd      	mov	sp, r7
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	46021000 	.word	0x46021000

0801726c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801727a:	2b01      	cmp	r3, #1
 801727c:	d101      	bne.n	8017282 <HAL_ADC_Stop+0x16>
 801727e:	2302      	movs	r3, #2
 8017280:	e023      	b.n	80172ca <HAL_ADC_Stop+0x5e>
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	2201      	movs	r2, #1
 8017286:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801728a:	2103      	movs	r1, #3
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f000 ffed 	bl	801826c <ADC_ConversionStop>
 8017292:	4603      	mov	r3, r0
 8017294:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8017296:	7bfb      	ldrb	r3, [r7, #15]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d111      	bne.n	80172c0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f001 f911 	bl	80184c4 <ADC_Disable>
 80172a2:	4603      	mov	r3, r0
 80172a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80172a6:	7bfb      	ldrb	r3, [r7, #15]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d109      	bne.n	80172c0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80172b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80172b4:	f023 0301 	bic.w	r3, r3, #1
 80172b8:	f043 0201 	orr.w	r2, r3, #1
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	679a      	str	r2, [r3, #120]	@ 0x78
                        HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2200      	movs	r2, #0
 80172c4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 80172c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3710      	adds	r7, #16
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
	...

080172d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b086      	sub	sp, #24
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
 80172dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	699b      	ldr	r3, [r3, #24]
 80172e2:	2b08      	cmp	r3, #8
 80172e4:	d102      	bne.n	80172ec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80172e6:	2308      	movs	r3, #8
 80172e8:	617b      	str	r3, [r7, #20]
 80172ea:	e027      	b.n	801733c <HAL_ADC_PollForConversion+0x68>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */

    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	4a6a      	ldr	r2, [pc, #424]	@ (801749c <HAL_ADC_PollForConversion+0x1c8>)
 80172f2:	4293      	cmp	r3, r2
 80172f4:	d011      	beq.n	801731a <HAL_ADC_PollForConversion+0x46>
          tmp_flag_end = (ADC_FLAG_EOC);
        }
      }
#else
      /* Check ADC DMA mode */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT_0) != 0UL)
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	68db      	ldr	r3, [r3, #12]
 80172fc:	f003 0301 	and.w	r3, r3, #1
 8017300:	2b00      	cmp	r3, #0
 8017302:	d007      	beq.n	8017314 <HAL_ADC_PollForConversion+0x40>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017308:	f043 0220 	orr.w	r2, r3, #32
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	679a      	str	r2, [r3, #120]	@ 0x78
        return HAL_ERROR;
 8017310:	2301      	movs	r3, #1
 8017312:	e0be      	b.n	8017492 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8017314:	2304      	movs	r3, #4
 8017316:	617b      	str	r3, [r7, #20]
 8017318:	e010      	b.n	801733c <HAL_ADC_PollForConversion+0x68>
      }
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      if ((hadc->Instance->CFGR1 & ADC4_CFGR1_DMAEN) != 0UL)
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	68db      	ldr	r3, [r3, #12]
 8017320:	f003 0301 	and.w	r3, r3, #1
 8017324:	2b00      	cmp	r3, #0
 8017326:	d007      	beq.n	8017338 <HAL_ADC_PollForConversion+0x64>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801732c:	f043 0220 	orr.w	r2, r3, #32
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	679a      	str	r2, [r3, #120]	@ 0x78
        return HAL_ERROR;
 8017334:	2301      	movs	r3, #1
 8017336:	e0ac      	b.n	8017492 <HAL_ADC_PollForConversion+0x1be>
      }
      else
      {
        tmp_flag_end = (ADC_FLAG_EOC);
 8017338:	2304      	movs	r3, #4
 801733a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801733c:	f7ff f896 	bl	801646c <HAL_GetTick>
 8017340:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8017342:	e021      	b.n	8017388 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801734a:	d01d      	beq.n	8017388 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801734c:	f7ff f88e 	bl	801646c <HAL_GetTick>
 8017350:	4602      	mov	r2, r0
 8017352:	693b      	ldr	r3, [r7, #16]
 8017354:	1ad3      	subs	r3, r2, r3
 8017356:	683a      	ldr	r2, [r7, #0]
 8017358:	429a      	cmp	r2, r3
 801735a:	d302      	bcc.n	8017362 <HAL_ADC_PollForConversion+0x8e>
 801735c:	683b      	ldr	r3, [r7, #0]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d112      	bne.n	8017388 <HAL_ADC_PollForConversion+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	4013      	ands	r3, r2
 801736c:	2b00      	cmp	r3, #0
 801736e:	d10b      	bne.n	8017388 <HAL_ADC_PollForConversion+0xb4>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017374:	f043 0204 	orr.w	r2, r3, #4
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8017384:	2303      	movs	r3, #3
 8017386:	e084      	b.n	8017492 <HAL_ADC_PollForConversion+0x1be>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	681a      	ldr	r2, [r3, #0]
 801738e:	697b      	ldr	r3, [r7, #20]
 8017390:	4013      	ands	r3, r2
 8017392:	2b00      	cmp	r3, #0
 8017394:	d0d6      	beq.n	8017344 <HAL_ADC_PollForConversion+0x70>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801739a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7ff f9dc 	bl	8016764 <LL_ADC_REG_IsTriggerSourceSWStart>
 80173ac:	4603      	mov	r3, r0
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d06e      	beq.n	8017490 <HAL_ADC_PollForConversion+0x1bc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d169      	bne.n	8017490 <HAL_ADC_PollForConversion+0x1bc>
     )
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	4a36      	ldr	r2, [pc, #216]	@ (801749c <HAL_ADC_PollForConversion+0x1c8>)
 80173c2:	4293      	cmp	r3, r2
 80173c4:	d02e      	beq.n	8017424 <HAL_ADC_PollForConversion+0x150>
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	f003 0308 	and.w	r3, r3, #8
 80173d0:	2b08      	cmp	r3, #8
 80173d2:	d111      	bne.n	80173f8 <HAL_ADC_PollForConversion+0x124>
      {
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	679a      	str	r2, [r3, #120]	@ 0x78

        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d105      	bne.n	80173f8 <HAL_ADC_PollForConversion+0x124>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173f0:	f043 0201 	orr.w	r2, r3, #1
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	679a      	str	r2, [r3, #120]	@ 0x78
        tmp_adc_master = ADC_MASTER_REGISTER(hadc);
        tmp_cfgr = READ_REG(tmp_adc_master->CFGR1);
      }
#else
      /* Retrieve handle ADC CFGR register */
      tmp_cfgr = READ_REG(hadc->Instance->CFGR1);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	68db      	ldr	r3, [r3, #12]
 80173fe:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */
      /* Clear polled flag */
      if (tmp_flag_end == ADC_FLAG_EOS)
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	2b08      	cmp	r3, #8
 8017404:	d104      	bne.n	8017410 <HAL_ADC_PollForConversion+0x13c>
      {
        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2208      	movs	r2, #8
 801740c:	601a      	str	r2, [r3, #0]
 801740e:	e03f      	b.n	8017490 <HAL_ADC_PollForConversion+0x1bc>
      else
      {
        /* Clear end of conversion EOC flag of regular group if low power feature */
        /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
        /* until data register is read using function HAL_ADC_GetValue().         */
        if (READ_BIT(tmp_cfgr, ADC_CFGR1_AUTDLY) == 0UL)
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017416:	2b00      	cmp	r3, #0
 8017418:	d13a      	bne.n	8017490 <HAL_ADC_PollForConversion+0x1bc>
        {
          __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	220c      	movs	r2, #12
 8017420:	601a      	str	r2, [r3, #0]
 8017422:	e035      	b.n	8017490 <HAL_ADC_PollForConversion+0x1bc>
      }
    }
    else
    {
      /* Check whether end of sequence is reached */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	f003 0308 	and.w	r3, r3, #8
 801742e:	2b08      	cmp	r3, #8
 8017430:	d126      	bne.n	8017480 <HAL_ADC_PollForConversion+0x1ac>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
        /* ADSTART==0 (no conversion on going)                                  */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	4618      	mov	r0, r3
 8017438:	f7ff fba0 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 801743c:	4603      	mov	r3, r0
 801743e:	2b00      	cmp	r3, #0
 8017440:	d112      	bne.n	8017468 <HAL_ADC_PollForConversion+0x194>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in          */
          /* HAL_Start_IT(), but is not disabled here because can be used       */
          /* by overrun IRQ process below.                                      */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	685a      	ldr	r2, [r3, #4]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f022 020c 	bic.w	r2, r2, #12
 8017450:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017456:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801745a:	f023 0301 	bic.w	r3, r3, #1
 801745e:	f043 0201 	orr.w	r2, r3, #1
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	679a      	str	r2, [r3, #120]	@ 0x78
 8017466:	e00b      	b.n	8017480 <HAL_ADC_PollForConversion+0x1ac>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801746c:	f043 0220 	orr.w	r2, r3, #32
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017478:	f043 0201 	orr.w	r2, r3, #1
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	67da      	str	r2, [r3, #124]	@ 0x7c
      }

      /* Clear end of conversion flag of regular group if low power feature       */
      /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
      /* until data register is read using function HAL_ADC_GetValue().           */
      if (hadc->Init.LowPowerAutoWait == DISABLE)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	7f1b      	ldrb	r3, [r3, #28]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d103      	bne.n	8017490 <HAL_ADC_PollForConversion+0x1bc>
      {
        /* Clear regular group conversion flag */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	220c      	movs	r2, #12
 801748e:	601a      	str	r2, [r3, #0]
      }

    }
  }

  return HAL_OK;
 8017490:	2300      	movs	r3, #0
}
 8017492:	4618      	mov	r0, r3
 8017494:	3718      	adds	r7, #24
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}
 801749a:	bf00      	nop
 801749c:	46021000 	.word	0x46021000

080174a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80174a0:	b480      	push	{r7}
 80174a2:	b083      	sub	sp, #12
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	370c      	adds	r7, #12
 80174b2:	46bd      	mov	sp, r7
 80174b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b8:	4770      	bx	lr
	...

080174bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b0bc      	sub	sp, #240	@ 0xf0
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80174c6:	2300      	movs	r3, #0
 80174c8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80174cc:	2300      	movs	r3, #0
 80174ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	4aa8      	ldr	r2, [pc, #672]	@ (8017778 <HAL_ADC_ConfigChannel+0x2bc>)
 80174d6:	4293      	cmp	r3, r2
 80174d8:	d103      	bne.n	80174e2 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	691b      	ldr	r3, [r3, #16]
 80174de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80174e8:	2b01      	cmp	r3, #1
 80174ea:	d102      	bne.n	80174f2 <HAL_ADC_ConfigChannel+0x36>
 80174ec:	2302      	movs	r3, #2
 80174ee:	f000 beb5 	b.w	801825c <HAL_ADC_ConfigChannel+0xda0>
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2201      	movs	r2, #1
 80174f6:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ff fb3c 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 8017504:	4603      	mov	r3, r0
 8017506:	2b00      	cmp	r3, #0
 8017508:	f040 8695 	bne.w	8018236 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	4a99      	ldr	r2, [pc, #612]	@ (8017778 <HAL_ADC_ConfigChannel+0x2bc>)
 8017512:	4293      	cmp	r3, r2
 8017514:	f000 83ea 	beq.w	8017cec <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017520:	2b00      	cmp	r3, #0
 8017522:	d108      	bne.n	8017536 <HAL_ADC_ConfigChannel+0x7a>
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	0e9b      	lsrs	r3, r3, #26
 801752a:	f003 031f 	and.w	r3, r3, #31
 801752e:	2201      	movs	r2, #1
 8017530:	fa02 f303 	lsl.w	r3, r2, r3
 8017534:	e01d      	b.n	8017572 <HAL_ADC_ConfigChannel+0xb6>
 8017536:	683b      	ldr	r3, [r7, #0]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801753e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8017542:	fa93 f3a3 	rbit	r3, r3
 8017546:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 801754a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801754e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 8017552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017556:	2b00      	cmp	r3, #0
 8017558:	d101      	bne.n	801755e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 801755a:	2320      	movs	r3, #32
 801755c:	e004      	b.n	8017568 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 801755e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8017562:	fab3 f383 	clz	r3, r3
 8017566:	b2db      	uxtb	r3, r3
 8017568:	f003 031f 	and.w	r3, r3, #31
 801756c:	2201      	movs	r2, #1
 801756e:	fa02 f303 	lsl.w	r3, r2, r3
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	6812      	ldr	r2, [r2, #0]
 8017576:	69d1      	ldr	r1, [r2, #28]
 8017578:	687a      	ldr	r2, [r7, #4]
 801757a:	6812      	ldr	r2, [r2, #0]
 801757c:	430b      	orrs	r3, r1
 801757e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6818      	ldr	r0, [r3, #0]
 8017584:	683b      	ldr	r3, [r7, #0]
 8017586:	6859      	ldr	r1, [r3, #4]
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	461a      	mov	r2, r3
 801758e:	f7ff f8fd 	bl	801678c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	4618      	mov	r0, r3
 8017598:	f7ff faf0 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 801759c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7ff fb10 	bl	8016bca <LL_ADC_INJ_IsConversionOngoing>
 80175aa:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80175ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	f040 81ed 	bne.w	8017992 <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80175b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80175bc:	2b00      	cmp	r3, #0
 80175be:	f040 81e8 	bne.w	8017992 <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	6818      	ldr	r0, [r3, #0]
 80175c6:	683b      	ldr	r3, [r7, #0]
 80175c8:	6819      	ldr	r1, [r3, #0]
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	689b      	ldr	r3, [r3, #8]
 80175ce:	461a      	mov	r2, r3
 80175d0:	f7ff f988 	bl	80168e4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80175d4:	683b      	ldr	r3, [r7, #0]
 80175d6:	695a      	ldr	r2, [r3, #20]
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	089b      	lsrs	r3, r3, #2
 80175e0:	f003 0303 	and.w	r3, r3, #3
 80175e4:	005b      	lsls	r3, r3, #1
 80175e6:	fa02 f303 	lsl.w	r3, r2, r3
 80175ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80175ee:	683b      	ldr	r3, [r7, #0]
 80175f0:	691b      	ldr	r3, [r3, #16]
 80175f2:	2b04      	cmp	r3, #4
 80175f4:	d046      	beq.n	8017684 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6818      	ldr	r0, [r3, #0]
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	6919      	ldr	r1, [r3, #16]
 80175fe:	683b      	ldr	r3, [r7, #0]
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8017606:	f7fe ffe3 	bl	80165d0 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	6818      	ldr	r0, [r3, #0]
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	6919      	ldr	r1, [r3, #16]
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	69db      	ldr	r3, [r3, #28]
 8017616:	461a      	mov	r2, r3
 8017618:	f7ff f811 	bl	801663e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	7e9b      	ldrb	r3, [r3, #26]
 8017620:	2b01      	cmp	r3, #1
 8017622:	d11e      	bne.n	8017662 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	6818      	ldr	r0, [r3, #0]
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8017630:	2b00      	cmp	r3, #0
 8017632:	d102      	bne.n	801763a <HAL_ADC_ConfigChannel+0x17e>
 8017634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8017638:	e000      	b.n	801763c <HAL_ADC_ConfigChannel+0x180>
 801763a:	2300      	movs	r3, #0
 801763c:	461a      	mov	r2, r3
 801763e:	f7ff f834 	bl	80166aa <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6818      	ldr	r0, [r3, #0]
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 801764a:	683b      	ldr	r3, [r7, #0]
 801764c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 801764e:	2b01      	cmp	r3, #1
 8017650:	d102      	bne.n	8017658 <HAL_ADC_ConfigChannel+0x19c>
 8017652:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8017656:	e000      	b.n	801765a <HAL_ADC_ConfigChannel+0x19e>
 8017658:	2300      	movs	r3, #0
 801765a:	461a      	mov	r2, r3
 801765c:	f7ff f80a 	bl	8016674 <LL_ADC_SetOffsetSignedSaturation>
 8017660:	e197      	b.n	8017992 <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6818      	ldr	r0, [r3, #0]
 8017666:	683b      	ldr	r3, [r7, #0]
 8017668:	691b      	ldr	r3, [r3, #16]
 801766a:	2200      	movs	r2, #0
 801766c:	4619      	mov	r1, r3
 801766e:	f7ff f81c 	bl	80166aa <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6818      	ldr	r0, [r3, #0]
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	691b      	ldr	r3, [r3, #16]
 801767a:	2200      	movs	r2, #0
 801767c:	4619      	mov	r1, r3
 801767e:	f7fe fff9 	bl	8016674 <LL_ADC_SetOffsetSignedSaturation>
 8017682:	e186      	b.n	8017992 <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	2100      	movs	r1, #0
 801768a:	4618      	mov	r0, r3
 801768c:	f7fe ffc1 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017690:	4603      	mov	r3, r0
 8017692:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017696:	2b00      	cmp	r3, #0
 8017698:	d10a      	bne.n	80176b0 <HAL_ADC_ConfigChannel+0x1f4>
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	2100      	movs	r1, #0
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7fe ffb6 	bl	8016612 <LL_ADC_GetOffsetChannel>
 80176a6:	4603      	mov	r3, r0
 80176a8:	0e9b      	lsrs	r3, r3, #26
 80176aa:	f003 021f 	and.w	r2, r3, #31
 80176ae:	e01e      	b.n	80176ee <HAL_ADC_ConfigChannel+0x232>
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2100      	movs	r1, #0
 80176b6:	4618      	mov	r0, r3
 80176b8:	f7fe ffab 	bl	8016612 <LL_ADC_GetOffsetChannel>
 80176bc:	4603      	mov	r3, r0
 80176be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80176c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80176c6:	fa93 f3a3 	rbit	r3, r3
 80176ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 80176ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80176d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80176d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d101      	bne.n	80176e2 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80176de:	2320      	movs	r3, #32
 80176e0:	e004      	b.n	80176ec <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80176e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80176e6:	fab3 f383 	clz	r3, r3
 80176ea:	b2db      	uxtb	r3, r3
 80176ec:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80176ee:	683b      	ldr	r3, [r7, #0]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d105      	bne.n	8017706 <HAL_ADC_ConfigChannel+0x24a>
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	0e9b      	lsrs	r3, r3, #26
 8017700:	f003 031f 	and.w	r3, r3, #31
 8017704:	e018      	b.n	8017738 <HAL_ADC_ConfigChannel+0x27c>
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801770e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017712:	fa93 f3a3 	rbit	r3, r3
 8017716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 801771a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801771e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8017722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8017726:	2b00      	cmp	r3, #0
 8017728:	d101      	bne.n	801772e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 801772a:	2320      	movs	r3, #32
 801772c:	e004      	b.n	8017738 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 801772e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8017732:	fab3 f383 	clz	r3, r3
 8017736:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8017738:	429a      	cmp	r2, r3
 801773a:	d107      	bne.n	801774c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	6818      	ldr	r0, [r3, #0]
 8017740:	683b      	ldr	r3, [r7, #0]
 8017742:	681a      	ldr	r2, [r3, #0]
 8017744:	2300      	movs	r3, #0
 8017746:	2100      	movs	r1, #0
 8017748:	f7fe ff42 	bl	80165d0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2101      	movs	r1, #1
 8017752:	4618      	mov	r0, r3
 8017754:	f7fe ff5d 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017758:	4603      	mov	r3, r0
 801775a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801775e:	2b00      	cmp	r3, #0
 8017760:	d10c      	bne.n	801777c <HAL_ADC_ConfigChannel+0x2c0>
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2101      	movs	r1, #1
 8017768:	4618      	mov	r0, r3
 801776a:	f7fe ff52 	bl	8016612 <LL_ADC_GetOffsetChannel>
 801776e:	4603      	mov	r3, r0
 8017770:	0e9b      	lsrs	r3, r3, #26
 8017772:	f003 021f 	and.w	r2, r3, #31
 8017776:	e020      	b.n	80177ba <HAL_ADC_ConfigChannel+0x2fe>
 8017778:	46021000 	.word	0x46021000
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	2101      	movs	r1, #1
 8017782:	4618      	mov	r0, r3
 8017784:	f7fe ff45 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017788:	4603      	mov	r3, r0
 801778a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801778e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017792:	fa93 f3a3 	rbit	r3, r3
 8017796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 801779a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801779e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80177a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d101      	bne.n	80177ae <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80177aa:	2320      	movs	r3, #32
 80177ac:	e004      	b.n	80177b8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80177ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80177b2:	fab3 f383 	clz	r3, r3
 80177b6:	b2db      	uxtb	r3, r3
 80177b8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d105      	bne.n	80177d2 <HAL_ADC_ConfigChannel+0x316>
 80177c6:	683b      	ldr	r3, [r7, #0]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	0e9b      	lsrs	r3, r3, #26
 80177cc:	f003 031f 	and.w	r3, r3, #31
 80177d0:	e018      	b.n	8017804 <HAL_ADC_ConfigChannel+0x348>
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80177da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80177de:	fa93 f3a3 	rbit	r3, r3
 80177e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80177e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80177ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80177ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d101      	bne.n	80177fa <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80177f6:	2320      	movs	r3, #32
 80177f8:	e004      	b.n	8017804 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80177fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80177fe:	fab3 f383 	clz	r3, r3
 8017802:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8017804:	429a      	cmp	r2, r3
 8017806:	d107      	bne.n	8017818 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6818      	ldr	r0, [r3, #0]
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	681a      	ldr	r2, [r3, #0]
 8017810:	2300      	movs	r3, #0
 8017812:	2101      	movs	r1, #1
 8017814:	f7fe fedc 	bl	80165d0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2102      	movs	r1, #2
 801781e:	4618      	mov	r0, r3
 8017820:	f7fe fef7 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017824:	4603      	mov	r3, r0
 8017826:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801782a:	2b00      	cmp	r3, #0
 801782c:	d10a      	bne.n	8017844 <HAL_ADC_ConfigChannel+0x388>
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	2102      	movs	r1, #2
 8017834:	4618      	mov	r0, r3
 8017836:	f7fe feec 	bl	8016612 <LL_ADC_GetOffsetChannel>
 801783a:	4603      	mov	r3, r0
 801783c:	0e9b      	lsrs	r3, r3, #26
 801783e:	f003 021f 	and.w	r2, r3, #31
 8017842:	e01e      	b.n	8017882 <HAL_ADC_ConfigChannel+0x3c6>
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2102      	movs	r1, #2
 801784a:	4618      	mov	r0, r3
 801784c:	f7fe fee1 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017850:	4603      	mov	r3, r0
 8017852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017856:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801785a:	fa93 f3a3 	rbit	r3, r3
 801785e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8017862:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 801786a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801786e:	2b00      	cmp	r3, #0
 8017870:	d101      	bne.n	8017876 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8017872:	2320      	movs	r3, #32
 8017874:	e004      	b.n	8017880 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8017876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801787a:	fab3 f383 	clz	r3, r3
 801787e:	b2db      	uxtb	r3, r3
 8017880:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801788a:	2b00      	cmp	r3, #0
 801788c:	d105      	bne.n	801789a <HAL_ADC_ConfigChannel+0x3de>
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	0e9b      	lsrs	r3, r3, #26
 8017894:	f003 031f 	and.w	r3, r3, #31
 8017898:	e018      	b.n	80178cc <HAL_ADC_ConfigChannel+0x410>
 801789a:	683b      	ldr	r3, [r7, #0]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80178a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80178a6:	fa93 f3a3 	rbit	r3, r3
 80178aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80178ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80178b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80178b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d101      	bne.n	80178c2 <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 80178be:	2320      	movs	r3, #32
 80178c0:	e004      	b.n	80178cc <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 80178c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80178c6:	fab3 f383 	clz	r3, r3
 80178ca:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80178cc:	429a      	cmp	r2, r3
 80178ce:	d107      	bne.n	80178e0 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6818      	ldr	r0, [r3, #0]
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	681a      	ldr	r2, [r3, #0]
 80178d8:	2300      	movs	r3, #0
 80178da:	2102      	movs	r1, #2
 80178dc:	f7fe fe78 	bl	80165d0 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2103      	movs	r1, #3
 80178e6:	4618      	mov	r0, r3
 80178e8:	f7fe fe93 	bl	8016612 <LL_ADC_GetOffsetChannel>
 80178ec:	4603      	mov	r3, r0
 80178ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d10a      	bne.n	801790c <HAL_ADC_ConfigChannel+0x450>
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	2103      	movs	r1, #3
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7fe fe88 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017902:	4603      	mov	r3, r0
 8017904:	0e9b      	lsrs	r3, r3, #26
 8017906:	f003 021f 	and.w	r2, r3, #31
 801790a:	e01a      	b.n	8017942 <HAL_ADC_ConfigChannel+0x486>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	2103      	movs	r1, #3
 8017912:	4618      	mov	r0, r3
 8017914:	f7fe fe7d 	bl	8016612 <LL_ADC_GetOffsetChannel>
 8017918:	4603      	mov	r3, r0
 801791a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801791c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801791e:	fa93 f3a3 	rbit	r3, r3
 8017922:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8017924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 801792a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801792e:	2b00      	cmp	r3, #0
 8017930:	d101      	bne.n	8017936 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8017932:	2320      	movs	r3, #32
 8017934:	e004      	b.n	8017940 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8017936:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801793a:	fab3 f383 	clz	r3, r3
 801793e:	b2db      	uxtb	r3, r3
 8017940:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801794a:	2b00      	cmp	r3, #0
 801794c:	d105      	bne.n	801795a <HAL_ADC_ConfigChannel+0x49e>
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	0e9b      	lsrs	r3, r3, #26
 8017954:	f003 031f 	and.w	r3, r3, #31
 8017958:	e011      	b.n	801797e <HAL_ADC_ConfigChannel+0x4c2>
 801795a:	683b      	ldr	r3, [r7, #0]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017962:	fa93 f3a3 	rbit	r3, r3
 8017966:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8017968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801796a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 801796c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801796e:	2b00      	cmp	r3, #0
 8017970:	d101      	bne.n	8017976 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 8017972:	2320      	movs	r3, #32
 8017974:	e003      	b.n	801797e <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8017976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017978:	fab3 f383 	clz	r3, r3
 801797c:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801797e:	429a      	cmp	r2, r3
 8017980:	d107      	bne.n	8017992 <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	6818      	ldr	r0, [r3, #0]
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	681a      	ldr	r2, [r3, #0]
 801798a:	2300      	movs	r3, #0
 801798c:	2103      	movs	r1, #3
 801798e:	f7fe fe1f 	bl	80165d0 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	4618      	mov	r0, r3
 8017998:	f7ff f8a2 	bl	8016ae0 <LL_ADC_IsEnabled>
 801799c:	4603      	mov	r3, r0
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f040 8456 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6818      	ldr	r0, [r3, #0]
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	6819      	ldr	r1, [r3, #0]
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	68db      	ldr	r3, [r3, #12]
 80179b0:	461a      	mov	r2, r3
 80179b2:	f7fe fffb 	bl	80169ac <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80179be:	f040 80d6 	bne.w	8017b6e <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d10b      	bne.n	80179e6 <HAL_ADC_ConfigChannel+0x52a>
 80179ce:	683b      	ldr	r3, [r7, #0]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	0e9b      	lsrs	r3, r3, #26
 80179d4:	3301      	adds	r3, #1
 80179d6:	f003 031f 	and.w	r3, r3, #31
 80179da:	2b09      	cmp	r3, #9
 80179dc:	bf94      	ite	ls
 80179de:	2301      	movls	r3, #1
 80179e0:	2300      	movhi	r3, #0
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	e019      	b.n	8017a1a <HAL_ADC_ConfigChannel+0x55e>
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80179ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80179ee:	fa93 f3a3 	rbit	r3, r3
 80179f2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80179f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80179f6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80179f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d101      	bne.n	8017a02 <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 80179fe:	2320      	movs	r3, #32
 8017a00:	e003      	b.n	8017a0a <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 8017a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017a04:	fab3 f383 	clz	r3, r3
 8017a08:	b2db      	uxtb	r3, r3
 8017a0a:	3301      	adds	r3, #1
 8017a0c:	f003 031f 	and.w	r3, r3, #31
 8017a10:	2b09      	cmp	r3, #9
 8017a12:	bf94      	ite	ls
 8017a14:	2301      	movls	r3, #1
 8017a16:	2300      	movhi	r3, #0
 8017a18:	b2db      	uxtb	r3, r3
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d04d      	beq.n	8017aba <HAL_ADC_ConfigChannel+0x5fe>
 8017a1e:	683b      	ldr	r3, [r7, #0]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d107      	bne.n	8017a3a <HAL_ADC_ConfigChannel+0x57e>
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	0e9b      	lsrs	r3, r3, #26
 8017a30:	3301      	adds	r3, #1
 8017a32:	069b      	lsls	r3, r3, #26
 8017a34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8017a38:	e015      	b.n	8017a66 <HAL_ADC_ConfigChannel+0x5aa>
 8017a3a:	683b      	ldr	r3, [r7, #0]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a42:	fa93 f3a3 	rbit	r3, r3
 8017a46:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8017a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8017a4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d101      	bne.n	8017a56 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 8017a52:	2320      	movs	r3, #32
 8017a54:	e003      	b.n	8017a5e <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8017a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a58:	fab3 f383 	clz	r3, r3
 8017a5c:	b2db      	uxtb	r3, r3
 8017a5e:	3301      	adds	r3, #1
 8017a60:	069b      	lsls	r3, r3, #26
 8017a62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d109      	bne.n	8017a86 <HAL_ADC_ConfigChannel+0x5ca>
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	0e9b      	lsrs	r3, r3, #26
 8017a78:	3301      	adds	r3, #1
 8017a7a:	f003 031f 	and.w	r3, r3, #31
 8017a7e:	2101      	movs	r1, #1
 8017a80:	fa01 f303 	lsl.w	r3, r1, r3
 8017a84:	e017      	b.n	8017ab6 <HAL_ADC_ConfigChannel+0x5fa>
 8017a86:	683b      	ldr	r3, [r7, #0]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a8e:	fa93 f3a3 	rbit	r3, r3
 8017a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8017a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017a96:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8017a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d101      	bne.n	8017aa2 <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8017a9e:	2320      	movs	r3, #32
 8017aa0:	e003      	b.n	8017aaa <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 8017aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017aa4:	fab3 f383 	clz	r3, r3
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	3301      	adds	r3, #1
 8017aac:	f003 031f 	and.w	r3, r3, #31
 8017ab0:	2101      	movs	r1, #1
 8017ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8017ab6:	4313      	orrs	r3, r2
 8017ab8:	e04e      	b.n	8017b58 <HAL_ADC_ConfigChannel+0x69c>
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d107      	bne.n	8017ad6 <HAL_ADC_ConfigChannel+0x61a>
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	0e9b      	lsrs	r3, r3, #26
 8017acc:	3301      	adds	r3, #1
 8017ace:	069b      	lsls	r3, r3, #26
 8017ad0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8017ad4:	e015      	b.n	8017b02 <HAL_ADC_ConfigChannel+0x646>
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017ade:	fa93 f3a3 	rbit	r3, r3
 8017ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8017ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8017ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d101      	bne.n	8017af2 <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8017aee:	2320      	movs	r3, #32
 8017af0:	e003      	b.n	8017afa <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 8017af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017af4:	fab3 f383 	clz	r3, r3
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	3301      	adds	r3, #1
 8017afc:	069b      	lsls	r3, r3, #26
 8017afe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d109      	bne.n	8017b22 <HAL_ADC_ConfigChannel+0x666>
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	0e9b      	lsrs	r3, r3, #26
 8017b14:	3301      	adds	r3, #1
 8017b16:	f003 031f 	and.w	r3, r3, #31
 8017b1a:	2101      	movs	r1, #1
 8017b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8017b20:	e017      	b.n	8017b52 <HAL_ADC_ConfigChannel+0x696>
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b2a:	fa93 f3a3 	rbit	r3, r3
 8017b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8017b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8017b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d101      	bne.n	8017b3e <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8017b3a:	2320      	movs	r3, #32
 8017b3c:	e003      	b.n	8017b46 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 8017b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b40:	fab3 f383 	clz	r3, r3
 8017b44:	b2db      	uxtb	r3, r3
 8017b46:	3301      	adds	r3, #1
 8017b48:	f003 031f 	and.w	r3, r3, #31
 8017b4c:	2101      	movs	r1, #1
 8017b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8017b52:	4313      	orrs	r3, r2
 8017b54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017b58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	6818      	ldr	r0, [r3, #0]
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	689b      	ldr	r3, [r3, #8]
 8017b64:	461a      	mov	r2, r3
 8017b66:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8017b6a:	f7fe febb 	bl	80168e4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	f280 836c 	bge.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	4a97      	ldr	r2, [pc, #604]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017b7e:	4293      	cmp	r3, r2
 8017b80:	d101      	bne.n	8017b86 <HAL_ADC_ConfigChannel+0x6ca>
 8017b82:	4b97      	ldr	r3, [pc, #604]	@ (8017de0 <HAL_ADC_ConfigChannel+0x924>)
 8017b84:	e000      	b.n	8017b88 <HAL_ADC_ConfigChannel+0x6cc>
 8017b86:	4b97      	ldr	r3, [pc, #604]	@ (8017de4 <HAL_ADC_ConfigChannel+0x928>)
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7fe fcf3 	bl	8016574 <LL_ADC_GetCommonPathInternalCh>
 8017b8e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	4a91      	ldr	r2, [pc, #580]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d109      	bne.n	8017bb0 <HAL_ADC_ConfigChannel+0x6f4>
 8017b9c:	488f      	ldr	r0, [pc, #572]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017b9e:	f7fe ff9f 	bl	8016ae0 <LL_ADC_IsEnabled>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	bf0c      	ite	eq
 8017ba8:	2301      	moveq	r3, #1
 8017baa:	2300      	movne	r3, #0
 8017bac:	b2db      	uxtb	r3, r3
 8017bae:	e008      	b.n	8017bc2 <HAL_ADC_ConfigChannel+0x706>
 8017bb0:	488d      	ldr	r0, [pc, #564]	@ (8017de8 <HAL_ADC_ConfigChannel+0x92c>)
 8017bb2:	f7fe ff95 	bl	8016ae0 <LL_ADC_IsEnabled>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	bf0c      	ite	eq
 8017bbc:	2301      	moveq	r3, #1
 8017bbe:	2300      	movne	r3, #0
 8017bc0:	b2db      	uxtb	r3, r3
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	f000 8088 	beq.w	8017cd8 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	4a87      	ldr	r2, [pc, #540]	@ (8017dec <HAL_ADC_ConfigChannel+0x930>)
 8017bce:	4293      	cmp	r3, r2
 8017bd0:	d132      	bne.n	8017c38 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8017bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d12c      	bne.n	8017c38 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	4a7e      	ldr	r2, [pc, #504]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017be4:	4293      	cmp	r3, r2
 8017be6:	d005      	beq.n	8017bf4 <HAL_ADC_ConfigChannel+0x738>
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	4a7e      	ldr	r2, [pc, #504]	@ (8017de8 <HAL_ADC_ConfigChannel+0x92c>)
 8017bee:	4293      	cmp	r3, r2
 8017bf0:	f040 832b 	bne.w	801824a <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	4a78      	ldr	r2, [pc, #480]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017bfa:	4293      	cmp	r3, r2
 8017bfc:	d101      	bne.n	8017c02 <HAL_ADC_ConfigChannel+0x746>
 8017bfe:	4a78      	ldr	r2, [pc, #480]	@ (8017de0 <HAL_ADC_ConfigChannel+0x924>)
 8017c00:	e000      	b.n	8017c04 <HAL_ADC_ConfigChannel+0x748>
 8017c02:	4a78      	ldr	r2, [pc, #480]	@ (8017de4 <HAL_ADC_ConfigChannel+0x928>)
 8017c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017c0c:	4619      	mov	r1, r3
 8017c0e:	4610      	mov	r0, r2
 8017c10:	f7fe fc9d 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8017c14:	4b76      	ldr	r3, [pc, #472]	@ (8017df0 <HAL_ADC_ConfigChannel+0x934>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	099b      	lsrs	r3, r3, #6
 8017c1a:	4a76      	ldr	r2, [pc, #472]	@ (8017df4 <HAL_ADC_ConfigChannel+0x938>)
 8017c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8017c20:	099b      	lsrs	r3, r3, #6
 8017c22:	3301      	adds	r3, #1
 8017c24:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8017c26:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8017c28:	e002      	b.n	8017c30 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8017c2a:	68bb      	ldr	r3, [r7, #8]
 8017c2c:	3b01      	subs	r3, #1
 8017c2e:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d1f9      	bne.n	8017c2a <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8017c36:	e308      	b.n	801824a <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8017c38:	683b      	ldr	r3, [r7, #0]
 8017c3a:	681b      	ldr	r3, [r3, #0]
 8017c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8017df8 <HAL_ADC_ConfigChannel+0x93c>)
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	d121      	bne.n	8017c86 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8017c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d11b      	bne.n	8017c86 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	4a62      	ldr	r2, [pc, #392]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017c54:	4293      	cmp	r3, r2
 8017c56:	d005      	beq.n	8017c64 <HAL_ADC_ConfigChannel+0x7a8>
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	4a62      	ldr	r2, [pc, #392]	@ (8017de8 <HAL_ADC_ConfigChannel+0x92c>)
 8017c5e:	4293      	cmp	r3, r2
 8017c60:	f040 82f5 	bne.w	801824e <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	4a5c      	ldr	r2, [pc, #368]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017c6a:	4293      	cmp	r3, r2
 8017c6c:	d101      	bne.n	8017c72 <HAL_ADC_ConfigChannel+0x7b6>
 8017c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8017de0 <HAL_ADC_ConfigChannel+0x924>)
 8017c70:	e000      	b.n	8017c74 <HAL_ADC_ConfigChannel+0x7b8>
 8017c72:	4a5c      	ldr	r2, [pc, #368]	@ (8017de4 <HAL_ADC_ConfigChannel+0x928>)
 8017c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	4610      	mov	r0, r2
 8017c80:	f7fe fc65 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8017c84:	e2e3      	b.n	801824e <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8017c86:	683b      	ldr	r3, [r7, #0]
 8017c88:	681b      	ldr	r3, [r3, #0]
 8017c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8017dfc <HAL_ADC_ConfigChannel+0x940>)
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	f040 82df 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8017c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	f040 82d8 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	d005      	beq.n	8017cb6 <HAL_ADC_ConfigChannel+0x7fa>
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	4a4e      	ldr	r2, [pc, #312]	@ (8017de8 <HAL_ADC_ConfigChannel+0x92c>)
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	f040 82cd 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a48      	ldr	r2, [pc, #288]	@ (8017ddc <HAL_ADC_ConfigChannel+0x920>)
 8017cbc:	4293      	cmp	r3, r2
 8017cbe:	d101      	bne.n	8017cc4 <HAL_ADC_ConfigChannel+0x808>
 8017cc0:	4a47      	ldr	r2, [pc, #284]	@ (8017de0 <HAL_ADC_ConfigChannel+0x924>)
 8017cc2:	e000      	b.n	8017cc6 <HAL_ADC_ConfigChannel+0x80a>
 8017cc4:	4a47      	ldr	r2, [pc, #284]	@ (8017de4 <HAL_ADC_ConfigChannel+0x928>)
 8017cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017cca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8017cce:	4619      	mov	r1, r3
 8017cd0:	4610      	mov	r0, r2
 8017cd2:	f7fe fc3c 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
 8017cd6:	e2bb      	b.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017cdc:	f043 0220 	orr.w	r2, r3, #32
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8017cea:	e2b1      	b.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8017cf4:	f7fe fc0a 	bl	801650c <HAL_GetREVID>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017cfe:	d130      	bne.n	8017d62 <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8017d00:	683b      	ldr	r3, [r7, #0]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	4a3e      	ldr	r2, [pc, #248]	@ (8017e00 <HAL_ADC_ConfigChannel+0x944>)
 8017d06:	4293      	cmp	r3, r2
 8017d08:	d103      	bne.n	8017d12 <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8017d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8017e04 <HAL_ADC_ConfigChannel+0x948>)
 8017d0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017d10:	e027      	b.n	8017d62 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a3c      	ldr	r2, [pc, #240]	@ (8017e08 <HAL_ADC_ConfigChannel+0x94c>)
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d103      	bne.n	8017d24 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8017d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8017e0c <HAL_ADC_ConfigChannel+0x950>)
 8017d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017d22:	e01e      	b.n	8017d62 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	4a39      	ldr	r2, [pc, #228]	@ (8017e10 <HAL_ADC_ConfigChannel+0x954>)
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	d103      	bne.n	8017d36 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8017d2e:	4b39      	ldr	r3, [pc, #228]	@ (8017e14 <HAL_ADC_ConfigChannel+0x958>)
 8017d30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017d34:	e015      	b.n	8017d62 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	4a37      	ldr	r2, [pc, #220]	@ (8017e18 <HAL_ADC_ConfigChannel+0x95c>)
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d103      	bne.n	8017d48 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8017d40:	4b36      	ldr	r3, [pc, #216]	@ (8017e1c <HAL_ADC_ConfigChannel+0x960>)
 8017d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017d46:	e00c      	b.n	8017d62 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	4a34      	ldr	r2, [pc, #208]	@ (8017e20 <HAL_ADC_ConfigChannel+0x964>)
 8017d4e:	4293      	cmp	r3, r2
 8017d50:	d103      	bne.n	8017d5a <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8017d52:	4b31      	ldr	r3, [pc, #196]	@ (8017e18 <HAL_ADC_ConfigChannel+0x95c>)
 8017d54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8017d58:	e003      	b.n	8017d62 <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8017d62:	683b      	ldr	r3, [r7, #0]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	2b02      	cmp	r3, #2
 8017d68:	f000 81a2 	beq.w	80180b0 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	691b      	ldr	r3, [r3, #16]
 8017d70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8017d74:	d004      	beq.n	8017d80 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8017d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8017e24 <HAL_ADC_ConfigChannel+0x968>)
 8017d7c:	4293      	cmp	r3, r2
 8017d7e:	d107      	bne.n	8017d90 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f7fe fd5f 	bl	801684c <LL_ADC_REG_SetSequencerChAdd>
 8017d8e:	e0c1      	b.n	8017f14 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	685b      	ldr	r3, [r3, #4]
 8017d9a:	f003 031f 	and.w	r3, r3, #31
 8017d9e:	210f      	movs	r1, #15
 8017da0:	fa01 f303 	lsl.w	r3, r1, r3
 8017da4:	43db      	mvns	r3, r3
 8017da6:	401a      	ands	r2, r3
 8017da8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017dac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d105      	bne.n	8017dc0 <HAL_ADC_ConfigChannel+0x904>
 8017db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017db8:	0e9b      	lsrs	r3, r3, #26
 8017dba:	f003 031f 	and.w	r3, r3, #31
 8017dbe:	e037      	b.n	8017e30 <HAL_ADC_ConfigChannel+0x974>
 8017dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc8:	fa93 f3a3 	rbit	r3, r3
 8017dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8017dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8017dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d127      	bne.n	8017e28 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8017dd8:	2320      	movs	r3, #32
 8017dda:	e029      	b.n	8017e30 <HAL_ADC_ConfigChannel+0x974>
 8017ddc:	42028000 	.word	0x42028000
 8017de0:	42028308 	.word	0x42028308
 8017de4:	46021308 	.word	0x46021308
 8017de8:	46021000 	.word	0x46021000
 8017dec:	ce080000 	.word	0xce080000
 8017df0:	20000360 	.word	0x20000360
 8017df4:	053e2d63 	.word	0x053e2d63
 8017df8:	ca040000 	.word	0xca040000
 8017dfc:	80000001 	.word	0x80000001
 8017e00:	b6002000 	.word	0xb6002000
 8017e04:	da400000 	.word	0xda400000
 8017e08:	ba004000 	.word	0xba004000
 8017e0c:	de800000 	.word	0xde800000
 8017e10:	b2001000 	.word	0xb2001000
 8017e14:	81000001 	.word	0x81000001
 8017e18:	d6200000 	.word	0xd6200000
 8017e1c:	d2100000 	.word	0xd2100000
 8017e20:	d7200000 	.word	0xd7200000
 8017e24:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8017e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e2a:	fab3 f383 	clz	r3, r3
 8017e2e:	b2db      	uxtb	r3, r3
 8017e30:	6839      	ldr	r1, [r7, #0]
 8017e32:	6849      	ldr	r1, [r1, #4]
 8017e34:	f001 011f 	and.w	r1, r1, #31
 8017e38:	408b      	lsls	r3, r1
 8017e3a:	431a      	orrs	r2, r3
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	685b      	ldr	r3, [r3, #4]
 8017e46:	089b      	lsrs	r3, r3, #2
 8017e48:	1c5a      	adds	r2, r3, #1
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e4e:	429a      	cmp	r2, r3
 8017e50:	d860      	bhi.n	8017f14 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8017e52:	f7fe fb5b 	bl	801650c <HAL_GetREVID>
 8017e56:	4603      	mov	r3, r0
 8017e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017e5c:	d851      	bhi.n	8017f02 <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8017e5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017e62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d10a      	bne.n	8017e80 <HAL_ADC_ConfigChannel+0x9c4>
 8017e6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017e6e:	0e9b      	lsrs	r3, r3, #26
 8017e70:	f003 031f 	and.w	r3, r3, #31
 8017e74:	2b13      	cmp	r3, #19
 8017e76:	bf8c      	ite	hi
 8017e78:	2301      	movhi	r3, #1
 8017e7a:	2300      	movls	r3, #0
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	e016      	b.n	8017eae <HAL_ADC_ConfigChannel+0x9f2>
 8017e80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017e84:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017e86:	69fb      	ldr	r3, [r7, #28]
 8017e88:	fa93 f3a3 	rbit	r3, r3
 8017e8c:	61bb      	str	r3, [r7, #24]
  return result;
 8017e8e:	69bb      	ldr	r3, [r7, #24]
 8017e90:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8017e92:	6a3b      	ldr	r3, [r7, #32]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d101      	bne.n	8017e9c <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8017e98:	2320      	movs	r3, #32
 8017e9a:	e003      	b.n	8017ea4 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8017e9c:	6a3b      	ldr	r3, [r7, #32]
 8017e9e:	fab3 f383 	clz	r3, r3
 8017ea2:	b2db      	uxtb	r3, r3
 8017ea4:	2b13      	cmp	r3, #19
 8017ea6:	bf8c      	ite	hi
 8017ea8:	2301      	movhi	r3, #1
 8017eaa:	2300      	movls	r3, #0
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d027      	beq.n	8017f02 <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8017eb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017eb6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d109      	bne.n	8017ed2 <HAL_ADC_ConfigChannel+0xa16>
 8017ebe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017ec2:	0e9b      	lsrs	r3, r3, #26
 8017ec4:	f003 031f 	and.w	r3, r3, #31
 8017ec8:	3b09      	subs	r3, #9
 8017eca:	2201      	movs	r2, #1
 8017ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed0:	e015      	b.n	8017efe <HAL_ADC_ConfigChannel+0xa42>
 8017ed2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8017ed6:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8017ed8:	693b      	ldr	r3, [r7, #16]
 8017eda:	fa93 f3a3 	rbit	r3, r3
 8017ede:	60fb      	str	r3, [r7, #12]
  return result;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d101      	bne.n	8017eee <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8017eea:	2320      	movs	r3, #32
 8017eec:	e003      	b.n	8017ef6 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8017eee:	697b      	ldr	r3, [r7, #20]
 8017ef0:	fab3 f383 	clz	r3, r3
 8017ef4:	b2db      	uxtb	r3, r3
 8017ef6:	3b09      	subs	r3, #9
 8017ef8:	2201      	movs	r2, #1
 8017efa:	fa02 f303 	lsl.w	r3, r2, r3
 8017efe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	6818      	ldr	r0, [r3, #0]
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	685b      	ldr	r3, [r3, #4]
 8017f0a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8017f0e:	4619      	mov	r1, r3
 8017f10:	f7fe fc3c 	bl	801678c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	6818      	ldr	r0, [r3, #0]
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	689b      	ldr	r3, [r3, #8]
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8017f22:	f7fe fcdf 	bl	80168e4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	f280 8190 	bge.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	4a97      	ldr	r2, [pc, #604]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8017f36:	4293      	cmp	r3, r2
 8017f38:	d101      	bne.n	8017f3e <HAL_ADC_ConfigChannel+0xa82>
 8017f3a:	4b97      	ldr	r3, [pc, #604]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8017f3c:	e000      	b.n	8017f40 <HAL_ADC_ConfigChannel+0xa84>
 8017f3e:	4b97      	ldr	r3, [pc, #604]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8017f40:	4618      	mov	r0, r3
 8017f42:	f7fe fb17 	bl	8016574 <LL_ADC_GetCommonPathInternalCh>
 8017f46:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8017f4a:	683b      	ldr	r3, [r7, #0]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	4a94      	ldr	r2, [pc, #592]	@ (80181a0 <HAL_ADC_ConfigChannel+0xce4>)
 8017f50:	4293      	cmp	r3, r2
 8017f52:	d126      	bne.n	8017fa2 <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8017f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d120      	bne.n	8017fa2 <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	4a8b      	ldr	r2, [pc, #556]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8017f66:	4293      	cmp	r3, r2
 8017f68:	d101      	bne.n	8017f6e <HAL_ADC_ConfigChannel+0xab2>
 8017f6a:	4a8b      	ldr	r2, [pc, #556]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8017f6c:	e000      	b.n	8017f70 <HAL_ADC_ConfigChannel+0xab4>
 8017f6e:	4a8b      	ldr	r2, [pc, #556]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8017f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017f74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017f78:	4619      	mov	r1, r3
 8017f7a:	4610      	mov	r0, r2
 8017f7c:	f7fe fae7 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8017f80:	4b88      	ldr	r3, [pc, #544]	@ (80181a4 <HAL_ADC_ConfigChannel+0xce8>)
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	099b      	lsrs	r3, r3, #6
 8017f86:	4a88      	ldr	r2, [pc, #544]	@ (80181a8 <HAL_ADC_ConfigChannel+0xcec>)
 8017f88:	fba2 2303 	umull	r2, r3, r2, r3
 8017f8c:	099b      	lsrs	r3, r3, #6
 8017f8e:	005b      	lsls	r3, r3, #1
 8017f90:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8017f92:	e002      	b.n	8017f9a <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	3b01      	subs	r3, #1
 8017f98:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8017f9a:	68bb      	ldr	r3, [r7, #8]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d1f9      	bne.n	8017f94 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8017fa0:	e067      	b.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4a81      	ldr	r2, [pc, #516]	@ (80181ac <HAL_ADC_ConfigChannel+0xcf0>)
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	d116      	bne.n	8017fda <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8017fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d110      	bne.n	8017fda <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	4a75      	ldr	r2, [pc, #468]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	d101      	bne.n	8017fc6 <HAL_ADC_ConfigChannel+0xb0a>
 8017fc2:	4a75      	ldr	r2, [pc, #468]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8017fc4:	e000      	b.n	8017fc8 <HAL_ADC_ConfigChannel+0xb0c>
 8017fc6:	4a75      	ldr	r2, [pc, #468]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8017fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	4610      	mov	r0, r2
 8017fd4:	f7fe fabb 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
 8017fd8:	e04b      	b.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	4a74      	ldr	r2, [pc, #464]	@ (80181b0 <HAL_ADC_ConfigChannel+0xcf4>)
 8017fe0:	4293      	cmp	r3, r2
 8017fe2:	d116      	bne.n	8018012 <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8017fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8017fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d110      	bne.n	8018012 <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	681b      	ldr	r3, [r3, #0]
 8017ff4:	4a67      	ldr	r2, [pc, #412]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	d101      	bne.n	8017ffe <HAL_ADC_ConfigChannel+0xb42>
 8017ffa:	4a67      	ldr	r2, [pc, #412]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8017ffc:	e000      	b.n	8018000 <HAL_ADC_ConfigChannel+0xb44>
 8017ffe:	4a67      	ldr	r2, [pc, #412]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8018000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8018008:	4619      	mov	r1, r3
 801800a:	4610      	mov	r0, r2
 801800c:	f7fe fa9f 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
 8018010:	e02f      	b.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8018012:	683b      	ldr	r3, [r7, #0]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	4a67      	ldr	r2, [pc, #412]	@ (80181b4 <HAL_ADC_ConfigChannel+0xcf8>)
 8018018:	4293      	cmp	r3, r2
 801801a:	d12a      	bne.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801801c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018024:	2b00      	cmp	r3, #0
 8018026:	d124      	bne.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	4a62      	ldr	r2, [pc, #392]	@ (80181b8 <HAL_ADC_ConfigChannel+0xcfc>)
 801802e:	4293      	cmp	r3, r2
 8018030:	d11f      	bne.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	4a57      	ldr	r2, [pc, #348]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8018038:	4293      	cmp	r3, r2
 801803a:	d101      	bne.n	8018040 <HAL_ADC_ConfigChannel+0xb84>
 801803c:	4a56      	ldr	r2, [pc, #344]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 801803e:	e000      	b.n	8018042 <HAL_ADC_ConfigChannel+0xb86>
 8018040:	4a56      	ldr	r2, [pc, #344]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8018042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018046:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801804a:	4619      	mov	r1, r3
 801804c:	4610      	mov	r0, r2
 801804e:	f7fe fa7e 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8018052:	f7fe fa5b 	bl	801650c <HAL_GetREVID>
 8018056:	4603      	mov	r3, r0
 8018058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801805c:	d809      	bhi.n	8018072 <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	f042 0201 	orr.w	r2, r2, #1
 801806e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8018072:	f7fe fa4b 	bl	801650c <HAL_GetREVID>
 8018076:	4603      	mov	r3, r0
 8018078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801807c:	f040 80e8 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	4a4d      	ldr	r2, [pc, #308]	@ (80181bc <HAL_ADC_ConfigChannel+0xd00>)
 8018086:	4293      	cmp	r3, r2
 8018088:	f040 80e2 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018094:	2b00      	cmp	r3, #0
 8018096:	f040 80db 	bne.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	f042 0201 	orr.w	r2, r2, #1
 80180aa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80180ae:	e0cf      	b.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	691b      	ldr	r3, [r3, #16]
 80180b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80180b8:	d004      	beq.n	80180c4 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80180be:	4a40      	ldr	r2, [pc, #256]	@ (80181c0 <HAL_ADC_ConfigChannel+0xd04>)
 80180c0:	4293      	cmp	r3, r2
 80180c2:	d106      	bne.n	80180d2 <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80180cc:	4618      	mov	r0, r3
 80180ce:	f7fe fbf0 	bl	80168b2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	f280 80ba 	bge.w	8018250 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a2c      	ldr	r2, [pc, #176]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d101      	bne.n	80180ea <HAL_ADC_ConfigChannel+0xc2e>
 80180e6:	4b2c      	ldr	r3, [pc, #176]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 80180e8:	e000      	b.n	80180ec <HAL_ADC_ConfigChannel+0xc30>
 80180ea:	4b2c      	ldr	r3, [pc, #176]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7fe fa41 	bl	8016574 <LL_ADC_GetCommonPathInternalCh>
 80180f2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4a32      	ldr	r2, [pc, #200]	@ (80181c4 <HAL_ADC_ConfigChannel+0xd08>)
 80180fc:	4293      	cmp	r3, r2
 80180fe:	d110      	bne.n	8018122 <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	4a23      	ldr	r2, [pc, #140]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8018106:	4293      	cmp	r3, r2
 8018108:	d101      	bne.n	801810e <HAL_ADC_ConfigChannel+0xc52>
 801810a:	4a23      	ldr	r2, [pc, #140]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 801810c:	e000      	b.n	8018110 <HAL_ADC_ConfigChannel+0xc54>
 801810e:	4a23      	ldr	r2, [pc, #140]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8018110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018114:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8018118:	4619      	mov	r1, r3
 801811a:	4610      	mov	r0, r2
 801811c:	f7fe fa17 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
 8018120:	e06d      	b.n	80181fe <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	4a28      	ldr	r2, [pc, #160]	@ (80181c8 <HAL_ADC_ConfigChannel+0xd0c>)
 8018128:	4293      	cmp	r3, r2
 801812a:	d110      	bne.n	801814e <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4a18      	ldr	r2, [pc, #96]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 8018132:	4293      	cmp	r3, r2
 8018134:	d101      	bne.n	801813a <HAL_ADC_ConfigChannel+0xc7e>
 8018136:	4a18      	ldr	r2, [pc, #96]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8018138:	e000      	b.n	801813c <HAL_ADC_ConfigChannel+0xc80>
 801813a:	4a18      	ldr	r2, [pc, #96]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 801813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018140:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8018144:	4619      	mov	r1, r3
 8018146:	4610      	mov	r0, r2
 8018148:	f7fe fa01 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
 801814c:	e057      	b.n	80181fe <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4a17      	ldr	r2, [pc, #92]	@ (80181b0 <HAL_ADC_ConfigChannel+0xcf4>)
 8018154:	4293      	cmp	r3, r2
 8018156:	d110      	bne.n	801817a <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	4a0d      	ldr	r2, [pc, #52]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 801815e:	4293      	cmp	r3, r2
 8018160:	d101      	bne.n	8018166 <HAL_ADC_ConfigChannel+0xcaa>
 8018162:	4a0d      	ldr	r2, [pc, #52]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8018164:	e000      	b.n	8018168 <HAL_ADC_ConfigChannel+0xcac>
 8018166:	4a0d      	ldr	r2, [pc, #52]	@ (801819c <HAL_ADC_ConfigChannel+0xce0>)
 8018168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801816c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8018170:	4619      	mov	r1, r3
 8018172:	4610      	mov	r0, r2
 8018174:	f7fe f9eb 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
 8018178:	e041      	b.n	80181fe <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 801817a:	683b      	ldr	r3, [r7, #0]
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	4a0d      	ldr	r2, [pc, #52]	@ (80181b4 <HAL_ADC_ConfigChannel+0xcf8>)
 8018180:	4293      	cmp	r3, r2
 8018182:	d13c      	bne.n	80181fe <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	4a02      	ldr	r2, [pc, #8]	@ (8018194 <HAL_ADC_ConfigChannel+0xcd8>)
 801818a:	4293      	cmp	r3, r2
 801818c:	d11e      	bne.n	80181cc <HAL_ADC_ConfigChannel+0xd10>
 801818e:	4a02      	ldr	r2, [pc, #8]	@ (8018198 <HAL_ADC_ConfigChannel+0xcdc>)
 8018190:	e01d      	b.n	80181ce <HAL_ADC_ConfigChannel+0xd12>
 8018192:	bf00      	nop
 8018194:	42028000 	.word	0x42028000
 8018198:	42028308 	.word	0x42028308
 801819c:	46021308 	.word	0x46021308
 80181a0:	b6002000 	.word	0xb6002000
 80181a4:	20000360 	.word	0x20000360
 80181a8:	053e2d63 	.word	0x053e2d63
 80181ac:	ba004000 	.word	0xba004000
 80181b0:	80000001 	.word	0x80000001
 80181b4:	b2001000 	.word	0xb2001000
 80181b8:	46021000 	.word	0x46021000
 80181bc:	d7200000 	.word	0xd7200000
 80181c0:	80000010 	.word	0x80000010
 80181c4:	ce080000 	.word	0xce080000
 80181c8:	ca040000 	.word	0xca040000
 80181cc:	4a25      	ldr	r2, [pc, #148]	@ (8018264 <HAL_ADC_ConfigChannel+0xda8>)
 80181ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80181d2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80181d6:	4619      	mov	r1, r3
 80181d8:	4610      	mov	r0, r2
 80181da:	f7fe f9b8 	bl	801654e <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80181de:	f7fe f995 	bl	801650c <HAL_GetREVID>
 80181e2:	4603      	mov	r3, r0
 80181e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80181e8:	d809      	bhi.n	80181fe <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	f042 0201 	orr.w	r2, r2, #1
 80181fa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 80181fe:	f7fe f985 	bl	801650c <HAL_GetREVID>
 8018202:	4603      	mov	r3, r0
 8018204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8018208:	d122      	bne.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 801820a:	683b      	ldr	r3, [r7, #0]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	4a16      	ldr	r2, [pc, #88]	@ (8018268 <HAL_ADC_ConfigChannel+0xdac>)
 8018210:	4293      	cmp	r3, r2
 8018212:	d11d      	bne.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8018214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018218:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801821c:	2b00      	cmp	r3, #0
 801821e:	d117      	bne.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	f042 0201 	orr.w	r2, r2, #1
 8018230:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8018234:	e00c      	b.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801823a:	f043 0220 	orr.w	r2, r3, #32
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8018242:	2301      	movs	r3, #1
 8018244:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8018248:	e002      	b.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801824a:	bf00      	nop
 801824c:	e000      	b.n	8018250 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801824e:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2200      	movs	r2, #0
 8018254:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8018258:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 801825c:	4618      	mov	r0, r3
 801825e:	37f0      	adds	r7, #240	@ 0xf0
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	46021308 	.word	0x46021308
 8018268:	d7200000 	.word	0xd7200000

0801826c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b088      	sub	sp, #32
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
 8018274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t conversion_timeout_cpu_cycles = 0UL;
 8018276:	2300      	movs	r3, #0
 8018278:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	4618      	mov	r0, r3
 8018284:	f7fe fc7a 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 8018288:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4618      	mov	r0, r3
 8018290:	f7fe fc9b 	bl	8016bca <LL_ADC_INJ_IsConversionOngoing>
 8018294:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL) || (tmp_adc_is_conversion_on_going_injected != 0UL))
 8018296:	693b      	ldr	r3, [r7, #16]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d103      	bne.n	80182a4 <ADC_ConversionStop+0x38>
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	f000 8099 	beq.w	80183d6 <ADC_ConversionStop+0x16a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR1 & ADC_CFGR1_JAUTO) != 0UL)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	68db      	ldr	r3, [r3, #12]
 80182aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d02b      	beq.n	801830a <ADC_ConversionStop+0x9e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80182b8:	2b01      	cmp	r3, #1
 80182ba:	d126      	bne.n	801830a <ADC_ConversionStop+0x9e>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	7f1b      	ldrb	r3, [r3, #28]
 80182c0:	2b01      	cmp	r3, #1
 80182c2:	d122      	bne.n	801830a <ADC_ConversionStop+0x9e>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80182c4:	2301      	movs	r3, #1
 80182c6:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80182c8:	e014      	b.n	80182f4 <ADC_ConversionStop+0x88>
      {
        if (conversion_timeout_cpu_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80182ca:	69fb      	ldr	r3, [r7, #28]
 80182cc:	4a44      	ldr	r2, [pc, #272]	@ (80183e0 <ADC_ConversionStop+0x174>)
 80182ce:	4293      	cmp	r3, r2
 80182d0:	d90d      	bls.n	80182ee <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80182d6:	f043 0210 	orr.w	r2, r3, #16
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80182e2:	f043 0201 	orr.w	r2, r3, #1
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80182ea:	2301      	movs	r3, #1
 80182ec:	e074      	b.n	80183d8 <ADC_ConversionStop+0x16c>
        }
        conversion_timeout_cpu_cycles++;
 80182ee:	69fb      	ldr	r3, [r7, #28]
 80182f0:	3301      	adds	r3, #1
 80182f2:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80182fe:	2b40      	cmp	r3, #64	@ 0x40
 8018300:	d1e3      	bne.n	80182ca <ADC_ConversionStop+0x5e>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	2240      	movs	r2, #64	@ 0x40
 8018308:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801830a:	69bb      	ldr	r3, [r7, #24]
 801830c:	2b02      	cmp	r3, #2
 801830e:	d014      	beq.n	801833a <ADC_ConversionStop+0xce>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	4618      	mov	r0, r3
 8018316:	f7fe fc31 	bl	8016b7c <LL_ADC_REG_IsConversionOngoing>
 801831a:	4603      	mov	r3, r0
 801831c:	2b00      	cmp	r3, #0
 801831e:	d00c      	beq.n	801833a <ADC_ConversionStop+0xce>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	681b      	ldr	r3, [r3, #0]
 8018324:	4618      	mov	r0, r3
 8018326:	f7fe fbee 	bl	8016b06 <LL_ADC_IsDisableOngoing>
 801832a:	4603      	mov	r3, r0
 801832c:	2b00      	cmp	r3, #0
 801832e:	d104      	bne.n	801833a <ADC_ConversionStop+0xce>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	4618      	mov	r0, r3
 8018336:	f7fe fc0d 	bl	8016b54 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801833a:	69bb      	ldr	r3, [r7, #24]
 801833c:	2b01      	cmp	r3, #1
 801833e:	d014      	beq.n	801836a <ADC_ConversionStop+0xfe>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	4618      	mov	r0, r3
 8018346:	f7fe fc40 	bl	8016bca <LL_ADC_INJ_IsConversionOngoing>
 801834a:	4603      	mov	r3, r0
 801834c:	2b00      	cmp	r3, #0
 801834e:	d00c      	beq.n	801836a <ADC_ConversionStop+0xfe>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4618      	mov	r0, r3
 8018356:	f7fe fbd6 	bl	8016b06 <LL_ADC_IsDisableOngoing>
 801835a:	4603      	mov	r3, r0
 801835c:	2b00      	cmp	r3, #0
 801835e:	d104      	bne.n	801836a <ADC_ConversionStop+0xfe>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	4618      	mov	r0, r3
 8018366:	f7fe fc1c 	bl	8016ba2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801836a:	69bb      	ldr	r3, [r7, #24]
 801836c:	2b02      	cmp	r3, #2
 801836e:	d005      	beq.n	801837c <ADC_ConversionStop+0x110>
 8018370:	69bb      	ldr	r3, [r7, #24]
 8018372:	2b03      	cmp	r3, #3
 8018374:	d105      	bne.n	8018382 <ADC_ConversionStop+0x116>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8018376:	230c      	movs	r3, #12
 8018378:	617b      	str	r3, [r7, #20]
        break;
 801837a:	e005      	b.n	8018388 <ADC_ConversionStop+0x11c>
      case ADC_INJECTED_GROUP:
        tmp_adc_cr_adstart_jadstart = ADC_CR_JADSTART;
 801837c:	2308      	movs	r3, #8
 801837e:	617b      	str	r3, [r7, #20]
        break;
 8018380:	e002      	b.n	8018388 <ADC_ConversionStop+0x11c>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_adc_cr_adstart_jadstart = ADC_CR_ADSTART;
 8018382:	2304      	movs	r3, #4
 8018384:	617b      	str	r3, [r7, #20]
        break;
 8018386:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8018388:	f7fe f870 	bl	801646c <HAL_GetTick>
 801838c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 801838e:	e01b      	b.n	80183c8 <ADC_ConversionStop+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8018390:	f7fe f86c 	bl	801646c <HAL_GetTick>
 8018394:	4602      	mov	r2, r0
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	1ad3      	subs	r3, r2, r3
 801839a:	2b05      	cmp	r3, #5
 801839c:	d914      	bls.n	80183c8 <ADC_ConversionStop+0x15c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	689a      	ldr	r2, [r3, #8]
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	4013      	ands	r3, r2
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d00d      	beq.n	80183c8 <ADC_ConversionStop+0x15c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80183b0:	f043 0210 	orr.w	r2, r3, #16
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80183bc:	f043 0201 	orr.w	r2, r3, #1
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80183c4:	2301      	movs	r3, #1
 80183c6:	e007      	b.n	80183d8 <ADC_ConversionStop+0x16c>
    while ((hadc->Instance->CR & tmp_adc_cr_adstart_jadstart) != 0UL)
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	689a      	ldr	r2, [r3, #8]
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	4013      	ands	r3, r2
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d1dc      	bne.n	8018390 <ADC_ConversionStop+0x124>
        }
      }
    }
  }

  return HAL_OK;
 80183d6:	2300      	movs	r3, #0
}
 80183d8:	4618      	mov	r0, r3
 80183da:	3720      	adds	r7, #32
 80183dc:	46bd      	mov	sp, r7
 80183de:	bd80      	pop	{r7, pc}
 80183e0:	000cdbff 	.word	0x000cdbff

080183e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b084      	sub	sp, #16
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	4618      	mov	r0, r3
 80183f2:	f7fe fb75 	bl	8016ae0 <LL_ADC_IsEnabled>
 80183f6:	4603      	mov	r3, r0
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d15a      	bne.n	80184b2 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	689a      	ldr	r2, [r3, #8]
 8018402:	4b2e      	ldr	r3, [pc, #184]	@ (80184bc <ADC_Enable+0xd8>)
 8018404:	4013      	ands	r3, r2
 8018406:	2b00      	cmp	r3, #0
 8018408:	d00d      	beq.n	8018426 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801840e:	f043 0210 	orr.w	r2, r3, #16
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801841a:	f043 0201 	orr.w	r2, r3, #1
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 8018422:	2301      	movs	r3, #1
 8018424:	e046      	b.n	80184b4 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	2201      	movs	r2, #1
 801842c:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	4618      	mov	r0, r3
 8018434:	f7fe fb2c 	bl	8016a90 <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	6a1b      	ldr	r3, [r3, #32]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d004      	beq.n	801844a <ADC_Enable+0x66>
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4a1e      	ldr	r2, [pc, #120]	@ (80184c0 <ADC_Enable+0xdc>)
 8018446:	4293      	cmp	r3, r2
 8018448:	d033      	beq.n	80184b2 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 801844a:	f7fe f80f 	bl	801646c <HAL_GetTick>
 801844e:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8018450:	e028      	b.n	80184a4 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	4618      	mov	r0, r3
 8018458:	f7fe fb42 	bl	8016ae0 <LL_ADC_IsEnabled>
 801845c:	4603      	mov	r3, r0
 801845e:	2b00      	cmp	r3, #0
 8018460:	d104      	bne.n	801846c <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	4618      	mov	r0, r3
 8018468:	f7fe fb12 	bl	8016a90 <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801846c:	f7fd fffe 	bl	801646c <HAL_GetTick>
 8018470:	4602      	mov	r2, r0
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	1ad3      	subs	r3, r2, r3
 8018476:	2b02      	cmp	r3, #2
 8018478:	d914      	bls.n	80184a4 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	681b      	ldr	r3, [r3, #0]
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	f003 0301 	and.w	r3, r3, #1
 8018484:	2b01      	cmp	r3, #1
 8018486:	d00d      	beq.n	80184a4 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801848c:	f043 0210 	orr.w	r2, r3, #16
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018498:	f043 0201 	orr.w	r2, r3, #1
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 80184a0:	2301      	movs	r3, #1
 80184a2:	e007      	b.n	80184b4 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	f003 0301 	and.w	r3, r3, #1
 80184ae:	2b01      	cmp	r3, #1
 80184b0:	d1cf      	bne.n	8018452 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 80184b2:	2300      	movs	r3, #0
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}
 80184bc:	8000003f 	.word	0x8000003f
 80184c0:	46021000 	.word	0x46021000

080184c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b084      	sub	sp, #16
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7fe fb18 	bl	8016b06 <LL_ADC_IsDisableOngoing>
 80184d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	4618      	mov	r0, r3
 80184de:	f7fe faff 	bl	8016ae0 <LL_ADC_IsEnabled>
 80184e2:	4603      	mov	r3, r0
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d047      	beq.n	8018578 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d144      	bne.n	8018578 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	689b      	ldr	r3, [r3, #8]
 80184f4:	f003 030d 	and.w	r3, r3, #13
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d10c      	bne.n	8018516 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	4618      	mov	r0, r3
 8018502:	f7fe fad9 	bl	8016ab8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	2203      	movs	r2, #3
 801850c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801850e:	f7fd ffad 	bl	801646c <HAL_GetTick>
 8018512:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8018514:	e029      	b.n	801856a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801851a:	f043 0210 	orr.w	r2, r3, #16
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018526:	f043 0201 	orr.w	r2, r3, #1
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 801852e:	2301      	movs	r3, #1
 8018530:	e023      	b.n	801857a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8018532:	f7fd ff9b 	bl	801646c <HAL_GetTick>
 8018536:	4602      	mov	r2, r0
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	1ad3      	subs	r3, r2, r3
 801853c:	2b02      	cmp	r3, #2
 801853e:	d914      	bls.n	801856a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	689b      	ldr	r3, [r3, #8]
 8018546:	f003 0301 	and.w	r3, r3, #1
 801854a:	2b00      	cmp	r3, #0
 801854c:	d00d      	beq.n	801856a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8018552:	f043 0210 	orr.w	r2, r3, #16
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801855e:	f043 0201 	orr.w	r2, r3, #1
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 8018566:	2301      	movs	r3, #1
 8018568:	e007      	b.n	801857a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	689b      	ldr	r3, [r3, #8]
 8018570:	f003 0301 	and.w	r3, r3, #1
 8018574:	2b00      	cmp	r3, #0
 8018576:	d1dc      	bne.n	8018532 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8018578:	2300      	movs	r3, #0
}
 801857a:	4618      	mov	r0, r3
 801857c:	3710      	adds	r7, #16
 801857e:	46bd      	mov	sp, r7
 8018580:	bd80      	pop	{r7, pc}
	...

08018584 <__NVIC_SetPriorityGrouping>:
{
 8018584:	b480      	push	{r7}
 8018586:	b085      	sub	sp, #20
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f003 0307 	and.w	r3, r3, #7
 8018592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8018594:	4b0c      	ldr	r3, [pc, #48]	@ (80185c8 <__NVIC_SetPriorityGrouping+0x44>)
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801859a:	68ba      	ldr	r2, [r7, #8]
 801859c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80185a0:	4013      	ands	r3, r2
 80185a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80185ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80185b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80185b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80185b6:	4a04      	ldr	r2, [pc, #16]	@ (80185c8 <__NVIC_SetPriorityGrouping+0x44>)
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	60d3      	str	r3, [r2, #12]
}
 80185bc:	bf00      	nop
 80185be:	3714      	adds	r7, #20
 80185c0:	46bd      	mov	sp, r7
 80185c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c6:	4770      	bx	lr
 80185c8:	e000ed00 	.word	0xe000ed00

080185cc <__NVIC_GetPriorityGrouping>:
{
 80185cc:	b480      	push	{r7}
 80185ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80185d0:	4b04      	ldr	r3, [pc, #16]	@ (80185e4 <__NVIC_GetPriorityGrouping+0x18>)
 80185d2:	68db      	ldr	r3, [r3, #12]
 80185d4:	0a1b      	lsrs	r3, r3, #8
 80185d6:	f003 0307 	and.w	r3, r3, #7
}
 80185da:	4618      	mov	r0, r3
 80185dc:	46bd      	mov	sp, r7
 80185de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e2:	4770      	bx	lr
 80185e4:	e000ed00 	.word	0xe000ed00

080185e8 <__NVIC_EnableIRQ>:
{
 80185e8:	b480      	push	{r7}
 80185ea:	b083      	sub	sp, #12
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	4603      	mov	r3, r0
 80185f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80185f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	db0b      	blt.n	8018612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80185fa:	79fb      	ldrb	r3, [r7, #7]
 80185fc:	f003 021f 	and.w	r2, r3, #31
 8018600:	4907      	ldr	r1, [pc, #28]	@ (8018620 <__NVIC_EnableIRQ+0x38>)
 8018602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018606:	095b      	lsrs	r3, r3, #5
 8018608:	2001      	movs	r0, #1
 801860a:	fa00 f202 	lsl.w	r2, r0, r2
 801860e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8018612:	bf00      	nop
 8018614:	370c      	adds	r7, #12
 8018616:	46bd      	mov	sp, r7
 8018618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861c:	4770      	bx	lr
 801861e:	bf00      	nop
 8018620:	e000e100 	.word	0xe000e100

08018624 <__NVIC_DisableIRQ>:
{
 8018624:	b480      	push	{r7}
 8018626:	b083      	sub	sp, #12
 8018628:	af00      	add	r7, sp, #0
 801862a:	4603      	mov	r3, r0
 801862c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801862e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018632:	2b00      	cmp	r3, #0
 8018634:	db12      	blt.n	801865c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8018636:	79fb      	ldrb	r3, [r7, #7]
 8018638:	f003 021f 	and.w	r2, r3, #31
 801863c:	490a      	ldr	r1, [pc, #40]	@ (8018668 <__NVIC_DisableIRQ+0x44>)
 801863e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018642:	095b      	lsrs	r3, r3, #5
 8018644:	2001      	movs	r0, #1
 8018646:	fa00 f202 	lsl.w	r2, r0, r2
 801864a:	3320      	adds	r3, #32
 801864c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8018650:	f3bf 8f4f 	dsb	sy
}
 8018654:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8018656:	f3bf 8f6f 	isb	sy
}
 801865a:	bf00      	nop
}
 801865c:	bf00      	nop
 801865e:	370c      	adds	r7, #12
 8018660:	46bd      	mov	sp, r7
 8018662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018666:	4770      	bx	lr
 8018668:	e000e100 	.word	0xe000e100

0801866c <__NVIC_SetPriority>:
{
 801866c:	b480      	push	{r7}
 801866e:	b083      	sub	sp, #12
 8018670:	af00      	add	r7, sp, #0
 8018672:	4603      	mov	r3, r0
 8018674:	6039      	str	r1, [r7, #0]
 8018676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801867c:	2b00      	cmp	r3, #0
 801867e:	db0a      	blt.n	8018696 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	b2da      	uxtb	r2, r3
 8018684:	490c      	ldr	r1, [pc, #48]	@ (80186b8 <__NVIC_SetPriority+0x4c>)
 8018686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801868a:	0112      	lsls	r2, r2, #4
 801868c:	b2d2      	uxtb	r2, r2
 801868e:	440b      	add	r3, r1
 8018690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8018694:	e00a      	b.n	80186ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018696:	683b      	ldr	r3, [r7, #0]
 8018698:	b2da      	uxtb	r2, r3
 801869a:	4908      	ldr	r1, [pc, #32]	@ (80186bc <__NVIC_SetPriority+0x50>)
 801869c:	79fb      	ldrb	r3, [r7, #7]
 801869e:	f003 030f 	and.w	r3, r3, #15
 80186a2:	3b04      	subs	r3, #4
 80186a4:	0112      	lsls	r2, r2, #4
 80186a6:	b2d2      	uxtb	r2, r2
 80186a8:	440b      	add	r3, r1
 80186aa:	761a      	strb	r2, [r3, #24]
}
 80186ac:	bf00      	nop
 80186ae:	370c      	adds	r7, #12
 80186b0:	46bd      	mov	sp, r7
 80186b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b6:	4770      	bx	lr
 80186b8:	e000e100 	.word	0xe000e100
 80186bc:	e000ed00 	.word	0xe000ed00

080186c0 <NVIC_EncodePriority>:
{
 80186c0:	b480      	push	{r7}
 80186c2:	b089      	sub	sp, #36	@ 0x24
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	f003 0307 	and.w	r3, r3, #7
 80186d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80186d4:	69fb      	ldr	r3, [r7, #28]
 80186d6:	f1c3 0307 	rsb	r3, r3, #7
 80186da:	2b04      	cmp	r3, #4
 80186dc:	bf28      	it	cs
 80186de:	2304      	movcs	r3, #4
 80186e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80186e2:	69fb      	ldr	r3, [r7, #28]
 80186e4:	3304      	adds	r3, #4
 80186e6:	2b06      	cmp	r3, #6
 80186e8:	d902      	bls.n	80186f0 <NVIC_EncodePriority+0x30>
 80186ea:	69fb      	ldr	r3, [r7, #28]
 80186ec:	3b03      	subs	r3, #3
 80186ee:	e000      	b.n	80186f2 <NVIC_EncodePriority+0x32>
 80186f0:	2300      	movs	r3, #0
 80186f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80186f4:	f04f 32ff 	mov.w	r2, #4294967295
 80186f8:	69bb      	ldr	r3, [r7, #24]
 80186fa:	fa02 f303 	lsl.w	r3, r2, r3
 80186fe:	43da      	mvns	r2, r3
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	401a      	ands	r2, r3
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8018708:	f04f 31ff 	mov.w	r1, #4294967295
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	fa01 f303 	lsl.w	r3, r1, r3
 8018712:	43d9      	mvns	r1, r3
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8018718:	4313      	orrs	r3, r2
}
 801871a:	4618      	mov	r0, r3
 801871c:	3724      	adds	r7, #36	@ 0x24
 801871e:	46bd      	mov	sp, r7
 8018720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018724:	4770      	bx	lr
	...

08018728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b082      	sub	sp, #8
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	3b01      	subs	r3, #1
 8018734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018738:	d301      	bcc.n	801873e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801873a:	2301      	movs	r3, #1
 801873c:	e00f      	b.n	801875e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801873e:	4a0a      	ldr	r2, [pc, #40]	@ (8018768 <SysTick_Config+0x40>)
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	3b01      	subs	r3, #1
 8018744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8018746:	210f      	movs	r1, #15
 8018748:	f04f 30ff 	mov.w	r0, #4294967295
 801874c:	f7ff ff8e 	bl	801866c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8018750:	4b05      	ldr	r3, [pc, #20]	@ (8018768 <SysTick_Config+0x40>)
 8018752:	2200      	movs	r2, #0
 8018754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8018756:	4b04      	ldr	r3, [pc, #16]	@ (8018768 <SysTick_Config+0x40>)
 8018758:	2207      	movs	r2, #7
 801875a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801875c:	2300      	movs	r3, #0
}
 801875e:	4618      	mov	r0, r3
 8018760:	3708      	adds	r7, #8
 8018762:	46bd      	mov	sp, r7
 8018764:	bd80      	pop	{r7, pc}
 8018766:	bf00      	nop
 8018768:	e000e010 	.word	0xe000e010

0801876c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b082      	sub	sp, #8
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8018774:	6878      	ldr	r0, [r7, #4]
 8018776:	f7ff ff05 	bl	8018584 <__NVIC_SetPriorityGrouping>
}
 801877a:	bf00      	nop
 801877c:	3708      	adds	r7, #8
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}

08018782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8018782:	b580      	push	{r7, lr}
 8018784:	b086      	sub	sp, #24
 8018786:	af00      	add	r7, sp, #0
 8018788:	4603      	mov	r3, r0
 801878a:	60b9      	str	r1, [r7, #8]
 801878c:	607a      	str	r2, [r7, #4]
 801878e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8018790:	f7ff ff1c 	bl	80185cc <__NVIC_GetPriorityGrouping>
 8018794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8018796:	687a      	ldr	r2, [r7, #4]
 8018798:	68b9      	ldr	r1, [r7, #8]
 801879a:	6978      	ldr	r0, [r7, #20]
 801879c:	f7ff ff90 	bl	80186c0 <NVIC_EncodePriority>
 80187a0:	4602      	mov	r2, r0
 80187a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80187a6:	4611      	mov	r1, r2
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7ff ff5f 	bl	801866c <__NVIC_SetPriority>
}
 80187ae:	bf00      	nop
 80187b0:	3718      	adds	r7, #24
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
	...

080187b8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
 80187be:	4603      	mov	r3, r0
 80187c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  // KCS gage doesn't remember
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80187c2:	4b06      	ldr	r3, [pc, #24]	@ (80187dc <HAL_NVIC_EnableIRQ+0x24>)
 80187c4:	2204      	movs	r2, #4
 80187c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  NVIC_EnableIRQ(IRQn);
 80187c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7ff ff0b 	bl	80185e8 <__NVIC_EnableIRQ>
}
 80187d2:	bf00      	nop
 80187d4:	3708      	adds	r7, #8
 80187d6:	46bd      	mov	sp, r7
 80187d8:	bd80      	pop	{r7, pc}
 80187da:	bf00      	nop
 80187dc:	46007800 	.word	0x46007800

080187e0 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	b082      	sub	sp, #8
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	4603      	mov	r3, r0
 80187e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80187ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7ff ff18 	bl	8018624 <__NVIC_DisableIRQ>
}
 80187f4:	bf00      	nop
 80187f6:	3708      	adds	r7, #8
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}

080187fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b082      	sub	sp, #8
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f7ff ff8f 	bl	8018728 <SysTick_Config>
 801880a:	4603      	mov	r3, r0
}
 801880c:	4618      	mov	r0, r3
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d101      	bne.n	8018826 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8018822:	2301      	movs	r3, #1
 8018824:	e054      	b.n	80188d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	7f5b      	ldrb	r3, [r3, #29]
 801882a:	b2db      	uxtb	r3, r3
 801882c:	2b00      	cmp	r3, #0
 801882e:	d105      	bne.n	801883c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	2200      	movs	r2, #0
 8018834:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8018836:	6878      	ldr	r0, [r7, #4]
 8018838:	f7fd f816 	bl	8015868 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2202      	movs	r2, #2
 8018840:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	791b      	ldrb	r3, [r3, #4]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d10c      	bne.n	8018864 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	4a22      	ldr	r2, [pc, #136]	@ (80188d8 <HAL_CRC_Init+0xc4>)
 8018850:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	689a      	ldr	r2, [r3, #8]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	f022 0218 	bic.w	r2, r2, #24
 8018860:	609a      	str	r2, [r3, #8]
 8018862:	e00c      	b.n	801887e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6899      	ldr	r1, [r3, #8]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	68db      	ldr	r3, [r3, #12]
 801886c:	461a      	mov	r2, r3
 801886e:	6878      	ldr	r0, [r7, #4]
 8018870:	f000 f98c 	bl	8018b8c <HAL_CRCEx_Polynomial_Set>
 8018874:	4603      	mov	r3, r0
 8018876:	2b00      	cmp	r3, #0
 8018878:	d001      	beq.n	801887e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 801887a:	2301      	movs	r3, #1
 801887c:	e028      	b.n	80188d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	795b      	ldrb	r3, [r3, #5]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d105      	bne.n	8018892 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	f04f 32ff 	mov.w	r2, #4294967295
 801888e:	611a      	str	r2, [r3, #16]
 8018890:	e004      	b.n	801889c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	687a      	ldr	r2, [r7, #4]
 8018898:	6912      	ldr	r2, [r2, #16]
 801889a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	689b      	ldr	r3, [r3, #8]
 80188a2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	695a      	ldr	r2, [r3, #20]
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	430a      	orrs	r2, r1
 80188b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	689b      	ldr	r3, [r3, #8]
 80188b8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	699a      	ldr	r2, [r3, #24]
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	430a      	orrs	r2, r1
 80188c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2201      	movs	r2, #1
 80188cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80188ce:	2300      	movs	r3, #0
}
 80188d0:	4618      	mov	r0, r3
 80188d2:	3708      	adds	r7, #8
 80188d4:	46bd      	mov	sp, r7
 80188d6:	bd80      	pop	{r7, pc}
 80188d8:	04c11db7 	.word	0x04c11db7

080188dc <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80188dc:	b580      	push	{r7, lr}
 80188de:	b086      	sub	sp, #24
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	60f8      	str	r0, [r7, #12]
 80188e4:	60b9      	str	r1, [r7, #8]
 80188e6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80188e8:	2300      	movs	r3, #0
 80188ea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80188ec:	68fb      	ldr	r3, [r7, #12]
 80188ee:	2202      	movs	r2, #2
 80188f0:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	6a1b      	ldr	r3, [r3, #32]
 80188f6:	2b03      	cmp	r3, #3
 80188f8:	d006      	beq.n	8018908 <HAL_CRC_Accumulate+0x2c>
 80188fa:	2b03      	cmp	r3, #3
 80188fc:	d829      	bhi.n	8018952 <HAL_CRC_Accumulate+0x76>
 80188fe:	2b01      	cmp	r3, #1
 8018900:	d019      	beq.n	8018936 <HAL_CRC_Accumulate+0x5a>
 8018902:	2b02      	cmp	r3, #2
 8018904:	d01e      	beq.n	8018944 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8018906:	e024      	b.n	8018952 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8018908:	2300      	movs	r3, #0
 801890a:	617b      	str	r3, [r7, #20]
 801890c:	e00a      	b.n	8018924 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 801890e:	697b      	ldr	r3, [r7, #20]
 8018910:	009b      	lsls	r3, r3, #2
 8018912:	68ba      	ldr	r2, [r7, #8]
 8018914:	441a      	add	r2, r3
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	6812      	ldr	r2, [r2, #0]
 801891c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 801891e:	697b      	ldr	r3, [r7, #20]
 8018920:	3301      	adds	r3, #1
 8018922:	617b      	str	r3, [r7, #20]
 8018924:	697a      	ldr	r2, [r7, #20]
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	429a      	cmp	r2, r3
 801892a:	d3f0      	bcc.n	801890e <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	613b      	str	r3, [r7, #16]
      break;
 8018934:	e00e      	b.n	8018954 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8018936:	687a      	ldr	r2, [r7, #4]
 8018938:	68b9      	ldr	r1, [r7, #8]
 801893a:	68f8      	ldr	r0, [r7, #12]
 801893c:	f000 f85e 	bl	80189fc <CRC_Handle_8>
 8018940:	6138      	str	r0, [r7, #16]
      break;
 8018942:	e007      	b.n	8018954 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8018944:	687a      	ldr	r2, [r7, #4]
 8018946:	68b9      	ldr	r1, [r7, #8]
 8018948:	68f8      	ldr	r0, [r7, #12]
 801894a:	f000 f8e5 	bl	8018b18 <CRC_Handle_16>
 801894e:	6138      	str	r0, [r7, #16]
      break;
 8018950:	e000      	b.n	8018954 <HAL_CRC_Accumulate+0x78>
      break;
 8018952:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	2201      	movs	r2, #1
 8018958:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 801895a:	693b      	ldr	r3, [r7, #16]
}
 801895c:	4618      	mov	r0, r3
 801895e:	3718      	adds	r7, #24
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}

08018964 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b086      	sub	sp, #24
 8018968:	af00      	add	r7, sp, #0
 801896a:	60f8      	str	r0, [r7, #12]
 801896c:	60b9      	str	r1, [r7, #8]
 801896e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8018970:	2300      	movs	r3, #0
 8018972:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	2202      	movs	r2, #2
 8018978:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	689a      	ldr	r2, [r3, #8]
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	f042 0201 	orr.w	r2, r2, #1
 8018988:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	6a1b      	ldr	r3, [r3, #32]
 801898e:	2b03      	cmp	r3, #3
 8018990:	d006      	beq.n	80189a0 <HAL_CRC_Calculate+0x3c>
 8018992:	2b03      	cmp	r3, #3
 8018994:	d829      	bhi.n	80189ea <HAL_CRC_Calculate+0x86>
 8018996:	2b01      	cmp	r3, #1
 8018998:	d019      	beq.n	80189ce <HAL_CRC_Calculate+0x6a>
 801899a:	2b02      	cmp	r3, #2
 801899c:	d01e      	beq.n	80189dc <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 801899e:	e024      	b.n	80189ea <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80189a0:	2300      	movs	r3, #0
 80189a2:	617b      	str	r3, [r7, #20]
 80189a4:	e00a      	b.n	80189bc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	009b      	lsls	r3, r3, #2
 80189aa:	68ba      	ldr	r2, [r7, #8]
 80189ac:	441a      	add	r2, r3
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	6812      	ldr	r2, [r2, #0]
 80189b4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80189b6:	697b      	ldr	r3, [r7, #20]
 80189b8:	3301      	adds	r3, #1
 80189ba:	617b      	str	r3, [r7, #20]
 80189bc:	697a      	ldr	r2, [r7, #20]
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d3f0      	bcc.n	80189a6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	613b      	str	r3, [r7, #16]
      break;
 80189cc:	e00e      	b.n	80189ec <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80189ce:	687a      	ldr	r2, [r7, #4]
 80189d0:	68b9      	ldr	r1, [r7, #8]
 80189d2:	68f8      	ldr	r0, [r7, #12]
 80189d4:	f000 f812 	bl	80189fc <CRC_Handle_8>
 80189d8:	6138      	str	r0, [r7, #16]
      break;
 80189da:	e007      	b.n	80189ec <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80189dc:	687a      	ldr	r2, [r7, #4]
 80189de:	68b9      	ldr	r1, [r7, #8]
 80189e0:	68f8      	ldr	r0, [r7, #12]
 80189e2:	f000 f899 	bl	8018b18 <CRC_Handle_16>
 80189e6:	6138      	str	r0, [r7, #16]
      break;
 80189e8:	e000      	b.n	80189ec <HAL_CRC_Calculate+0x88>
      break;
 80189ea:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	2201      	movs	r2, #1
 80189f0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80189f2:	693b      	ldr	r3, [r7, #16]
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3718      	adds	r7, #24
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80189fc:	b480      	push	{r7}
 80189fe:	b089      	sub	sp, #36	@ 0x24
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	60f8      	str	r0, [r7, #12]
 8018a04:	60b9      	str	r1, [r7, #8]
 8018a06:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8018a08:	2300      	movs	r3, #0
 8018a0a:	61fb      	str	r3, [r7, #28]
 8018a0c:	e023      	b.n	8018a56 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8018a0e:	69fb      	ldr	r3, [r7, #28]
 8018a10:	009b      	lsls	r3, r3, #2
 8018a12:	68ba      	ldr	r2, [r7, #8]
 8018a14:	4413      	add	r3, r2
 8018a16:	781b      	ldrb	r3, [r3, #0]
 8018a18:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8018a1a:	69fb      	ldr	r3, [r7, #28]
 8018a1c:	009b      	lsls	r3, r3, #2
 8018a1e:	3301      	adds	r3, #1
 8018a20:	68b9      	ldr	r1, [r7, #8]
 8018a22:	440b      	add	r3, r1
 8018a24:	781b      	ldrb	r3, [r3, #0]
 8018a26:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8018a28:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8018a2a:	69fb      	ldr	r3, [r7, #28]
 8018a2c:	009b      	lsls	r3, r3, #2
 8018a2e:	3302      	adds	r3, #2
 8018a30:	68b9      	ldr	r1, [r7, #8]
 8018a32:	440b      	add	r3, r1
 8018a34:	781b      	ldrb	r3, [r3, #0]
 8018a36:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8018a38:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8018a3a:	69fb      	ldr	r3, [r7, #28]
 8018a3c:	009b      	lsls	r3, r3, #2
 8018a3e:	3303      	adds	r3, #3
 8018a40:	68b9      	ldr	r1, [r7, #8]
 8018a42:	440b      	add	r3, r1
 8018a44:	781b      	ldrb	r3, [r3, #0]
 8018a46:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8018a4c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8018a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8018a50:	69fb      	ldr	r3, [r7, #28]
 8018a52:	3301      	adds	r3, #1
 8018a54:	61fb      	str	r3, [r7, #28]
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	089b      	lsrs	r3, r3, #2
 8018a5a:	69fa      	ldr	r2, [r7, #28]
 8018a5c:	429a      	cmp	r2, r3
 8018a5e:	d3d6      	bcc.n	8018a0e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f003 0303 	and.w	r3, r3, #3
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d04d      	beq.n	8018b06 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f003 0303 	and.w	r3, r3, #3
 8018a70:	2b01      	cmp	r3, #1
 8018a72:	d107      	bne.n	8018a84 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8018a74:	69fb      	ldr	r3, [r7, #28]
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	68ba      	ldr	r2, [r7, #8]
 8018a7a:	4413      	add	r3, r2
 8018a7c:	68fa      	ldr	r2, [r7, #12]
 8018a7e:	6812      	ldr	r2, [r2, #0]
 8018a80:	781b      	ldrb	r3, [r3, #0]
 8018a82:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	f003 0303 	and.w	r3, r3, #3
 8018a8a:	2b02      	cmp	r3, #2
 8018a8c:	d116      	bne.n	8018abc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8018a8e:	69fb      	ldr	r3, [r7, #28]
 8018a90:	009b      	lsls	r3, r3, #2
 8018a92:	68ba      	ldr	r2, [r7, #8]
 8018a94:	4413      	add	r3, r2
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	021b      	lsls	r3, r3, #8
 8018a9a:	b21a      	sxth	r2, r3
 8018a9c:	69fb      	ldr	r3, [r7, #28]
 8018a9e:	009b      	lsls	r3, r3, #2
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	68b9      	ldr	r1, [r7, #8]
 8018aa4:	440b      	add	r3, r1
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	b21b      	sxth	r3, r3
 8018aaa:	4313      	orrs	r3, r2
 8018aac:	b21b      	sxth	r3, r3
 8018aae:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8018ab6:	697b      	ldr	r3, [r7, #20]
 8018ab8:	8b7a      	ldrh	r2, [r7, #26]
 8018aba:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f003 0303 	and.w	r3, r3, #3
 8018ac2:	2b03      	cmp	r3, #3
 8018ac4:	d11f      	bne.n	8018b06 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8018ac6:	69fb      	ldr	r3, [r7, #28]
 8018ac8:	009b      	lsls	r3, r3, #2
 8018aca:	68ba      	ldr	r2, [r7, #8]
 8018acc:	4413      	add	r3, r2
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	021b      	lsls	r3, r3, #8
 8018ad2:	b21a      	sxth	r2, r3
 8018ad4:	69fb      	ldr	r3, [r7, #28]
 8018ad6:	009b      	lsls	r3, r3, #2
 8018ad8:	3301      	adds	r3, #1
 8018ada:	68b9      	ldr	r1, [r7, #8]
 8018adc:	440b      	add	r3, r1
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	b21b      	sxth	r3, r3
 8018ae2:	4313      	orrs	r3, r2
 8018ae4:	b21b      	sxth	r3, r3
 8018ae6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8018aee:	697b      	ldr	r3, [r7, #20]
 8018af0:	8b7a      	ldrh	r2, [r7, #26]
 8018af2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8018af4:	69fb      	ldr	r3, [r7, #28]
 8018af6:	009b      	lsls	r3, r3, #2
 8018af8:	3302      	adds	r3, #2
 8018afa:	68ba      	ldr	r2, [r7, #8]
 8018afc:	4413      	add	r3, r2
 8018afe:	68fa      	ldr	r2, [r7, #12]
 8018b00:	6812      	ldr	r2, [r2, #0]
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8018b06:	68fb      	ldr	r3, [r7, #12]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	681b      	ldr	r3, [r3, #0]
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3724      	adds	r7, #36	@ 0x24
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr

08018b18 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8018b18:	b480      	push	{r7}
 8018b1a:	b087      	sub	sp, #28
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	60f8      	str	r0, [r7, #12]
 8018b20:	60b9      	str	r1, [r7, #8]
 8018b22:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8018b24:	2300      	movs	r3, #0
 8018b26:	617b      	str	r3, [r7, #20]
 8018b28:	e013      	b.n	8018b52 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8018b2a:	697b      	ldr	r3, [r7, #20]
 8018b2c:	009b      	lsls	r3, r3, #2
 8018b2e:	68ba      	ldr	r2, [r7, #8]
 8018b30:	4413      	add	r3, r2
 8018b32:	881b      	ldrh	r3, [r3, #0]
 8018b34:	041a      	lsls	r2, r3, #16
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	3302      	adds	r3, #2
 8018b3c:	68b9      	ldr	r1, [r7, #8]
 8018b3e:	440b      	add	r3, r1
 8018b40:	881b      	ldrh	r3, [r3, #0]
 8018b42:	4619      	mov	r1, r3
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	430a      	orrs	r2, r1
 8018b4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	3301      	adds	r3, #1
 8018b50:	617b      	str	r3, [r7, #20]
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	085b      	lsrs	r3, r3, #1
 8018b56:	697a      	ldr	r2, [r7, #20]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d3e6      	bcc.n	8018b2a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	f003 0301 	and.w	r3, r3, #1
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d009      	beq.n	8018b7a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8018b6c:	697b      	ldr	r3, [r7, #20]
 8018b6e:	009b      	lsls	r3, r3, #2
 8018b70:	68ba      	ldr	r2, [r7, #8]
 8018b72:	4413      	add	r3, r2
 8018b74:	881a      	ldrh	r2, [r3, #0]
 8018b76:	693b      	ldr	r3, [r7, #16]
 8018b78:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	681b      	ldr	r3, [r3, #0]
}
 8018b80:	4618      	mov	r0, r3
 8018b82:	371c      	adds	r7, #28
 8018b84:	46bd      	mov	sp, r7
 8018b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8a:	4770      	bx	lr

08018b8c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8018b8c:	b480      	push	{r7}
 8018b8e:	b087      	sub	sp, #28
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8018b9c:	231f      	movs	r3, #31
 8018b9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	f003 0301 	and.w	r3, r3, #1
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d102      	bne.n	8018bb0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8018baa:	2301      	movs	r3, #1
 8018bac:	75fb      	strb	r3, [r7, #23]
 8018bae:	e063      	b.n	8018c78 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8018bb0:	bf00      	nop
 8018bb2:	693b      	ldr	r3, [r7, #16]
 8018bb4:	1e5a      	subs	r2, r3, #1
 8018bb6:	613a      	str	r2, [r7, #16]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d009      	beq.n	8018bd0 <HAL_CRCEx_Polynomial_Set+0x44>
 8018bbc:	693b      	ldr	r3, [r7, #16]
 8018bbe:	f003 031f 	and.w	r3, r3, #31
 8018bc2:	68ba      	ldr	r2, [r7, #8]
 8018bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8018bc8:	f003 0301 	and.w	r3, r3, #1
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d0f0      	beq.n	8018bb2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	2b18      	cmp	r3, #24
 8018bd4:	d846      	bhi.n	8018c64 <HAL_CRCEx_Polynomial_Set+0xd8>
 8018bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8018bdc <HAL_CRCEx_Polynomial_Set+0x50>)
 8018bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bdc:	08018c6b 	.word	0x08018c6b
 8018be0:	08018c65 	.word	0x08018c65
 8018be4:	08018c65 	.word	0x08018c65
 8018be8:	08018c65 	.word	0x08018c65
 8018bec:	08018c65 	.word	0x08018c65
 8018bf0:	08018c65 	.word	0x08018c65
 8018bf4:	08018c65 	.word	0x08018c65
 8018bf8:	08018c65 	.word	0x08018c65
 8018bfc:	08018c59 	.word	0x08018c59
 8018c00:	08018c65 	.word	0x08018c65
 8018c04:	08018c65 	.word	0x08018c65
 8018c08:	08018c65 	.word	0x08018c65
 8018c0c:	08018c65 	.word	0x08018c65
 8018c10:	08018c65 	.word	0x08018c65
 8018c14:	08018c65 	.word	0x08018c65
 8018c18:	08018c65 	.word	0x08018c65
 8018c1c:	08018c4d 	.word	0x08018c4d
 8018c20:	08018c65 	.word	0x08018c65
 8018c24:	08018c65 	.word	0x08018c65
 8018c28:	08018c65 	.word	0x08018c65
 8018c2c:	08018c65 	.word	0x08018c65
 8018c30:	08018c65 	.word	0x08018c65
 8018c34:	08018c65 	.word	0x08018c65
 8018c38:	08018c65 	.word	0x08018c65
 8018c3c:	08018c41 	.word	0x08018c41
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8018c40:	693b      	ldr	r3, [r7, #16]
 8018c42:	2b06      	cmp	r3, #6
 8018c44:	d913      	bls.n	8018c6e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8018c46:	2301      	movs	r3, #1
 8018c48:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8018c4a:	e010      	b.n	8018c6e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	2b07      	cmp	r3, #7
 8018c50:	d90f      	bls.n	8018c72 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8018c52:	2301      	movs	r3, #1
 8018c54:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8018c56:	e00c      	b.n	8018c72 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8018c58:	693b      	ldr	r3, [r7, #16]
 8018c5a:	2b0f      	cmp	r3, #15
 8018c5c:	d90b      	bls.n	8018c76 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8018c5e:	2301      	movs	r3, #1
 8018c60:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8018c62:	e008      	b.n	8018c76 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8018c64:	2301      	movs	r3, #1
 8018c66:	75fb      	strb	r3, [r7, #23]
        break;
 8018c68:	e006      	b.n	8018c78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8018c6a:	bf00      	nop
 8018c6c:	e004      	b.n	8018c78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8018c6e:	bf00      	nop
 8018c70:	e002      	b.n	8018c78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8018c72:	bf00      	nop
 8018c74:	e000      	b.n	8018c78 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8018c76:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8018c78:	7dfb      	ldrb	r3, [r7, #23]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d10d      	bne.n	8018c9a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	68ba      	ldr	r2, [r7, #8]
 8018c84:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	f023 0118 	bic.w	r1, r3, #24
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	687a      	ldr	r2, [r7, #4]
 8018c96:	430a      	orrs	r2, r1
 8018c98:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8018c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	371c      	adds	r7, #28
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca6:	4770      	bx	lr

08018ca8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	60f8      	str	r0, [r7, #12]
 8018cb0:	60b9      	str	r1, [r7, #8]
 8018cb2:	607a      	str	r2, [r7, #4]
 8018cb4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d101      	bne.n	8018cc0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8018cbc:	2301      	movs	r3, #1
 8018cbe:	e04f      	b.n	8018d60 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8018cc6:	2b01      	cmp	r3, #1
 8018cc8:	d101      	bne.n	8018cce <HAL_DMA_Start_IT+0x26>
 8018cca:	2302      	movs	r3, #2
 8018ccc:	e048      	b.n	8018d60 <HAL_DMA_Start_IT+0xb8>
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018cdc:	b2db      	uxtb	r3, r3
 8018cde:	2b01      	cmp	r3, #1
 8018ce0:	d136      	bne.n	8018d50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	2202      	movs	r2, #2
 8018ce6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	2200      	movs	r2, #0
 8018cee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	687a      	ldr	r2, [r7, #4]
 8018cf4:	68b9      	ldr	r1, [r7, #8]
 8018cf6:	68f8      	ldr	r0, [r7, #12]
 8018cf8:	f000 f8e7 	bl	8018eca <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	695a      	ldr	r2, [r3, #20]
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8018d0a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d007      	beq.n	8018d24 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	695a      	ldr	r2, [r3, #20]
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018d22:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d007      	beq.n	8018d3c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8018d2c:	68fb      	ldr	r3, [r7, #12]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	695a      	ldr	r2, [r3, #20]
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8018d3a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	695a      	ldr	r2, [r3, #20]
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	681b      	ldr	r3, [r3, #0]
 8018d46:	f042 0201 	orr.w	r2, r2, #1
 8018d4a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	e007      	b.n	8018d60 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	2240      	movs	r2, #64	@ 0x40
 8018d54:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	2200      	movs	r2, #0
 8018d5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8018d5e:	2301      	movs	r3, #1
}
 8018d60:	4618      	mov	r0, r3
 8018d62:	3710      	adds	r7, #16
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}

08018d68 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8018d68:	b580      	push	{r7, lr}
 8018d6a:	b084      	sub	sp, #16
 8018d6c:	af00      	add	r7, sp, #0
 8018d6e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8018d70:	f7fd fb7c 	bl	801646c <HAL_GetTick>
 8018d74:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d101      	bne.n	8018d80 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8018d7c:	2301      	movs	r3, #1
 8018d7e:	e06b      	b.n	8018e58 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018d86:	b2db      	uxtb	r3, r3
 8018d88:	2b02      	cmp	r3, #2
 8018d8a:	d008      	beq.n	8018d9e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2220      	movs	r2, #32
 8018d90:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	2200      	movs	r2, #0
 8018d96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8018d9a:	2301      	movs	r3, #1
 8018d9c:	e05c      	b.n	8018e58 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	695a      	ldr	r2, [r3, #20]
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	f042 0204 	orr.w	r2, r2, #4
 8018dac:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2205      	movs	r2, #5
 8018db2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8018db6:	e020      	b.n	8018dfa <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8018db8:	f7fd fb58 	bl	801646c <HAL_GetTick>
 8018dbc:	4602      	mov	r2, r0
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	1ad3      	subs	r3, r2, r3
 8018dc2:	2b05      	cmp	r3, #5
 8018dc4:	d919      	bls.n	8018dfa <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018dca:	f043 0210 	orr.w	r2, r3, #16
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	2203      	movs	r2, #3
 8018dd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d003      	beq.n	8018dee <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018dea:	2201      	movs	r2, #1
 8018dec:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2200      	movs	r2, #0
 8018df2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8018df6:	2301      	movs	r3, #1
 8018df8:	e02e      	b.n	8018e58 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	691b      	ldr	r3, [r3, #16]
 8018e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d0d7      	beq.n	8018db8 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	695a      	ldr	r2, [r3, #20]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f042 0202 	orr.w	r2, r2, #2
 8018e16:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2204      	movs	r2, #4
 8018e1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8018e28:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	2201      	movs	r2, #1
 8018e2e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d007      	beq.n	8018e4e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018e42:	2201      	movs	r2, #1
 8018e44:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	2200      	movs	r2, #0
 8018e52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8018e56:	2300      	movs	r3, #0
}
 8018e58:	4618      	mov	r0, r3
 8018e5a:	3710      	adds	r7, #16
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}

08018e60 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8018e60:	b480      	push	{r7}
 8018e62:	b083      	sub	sp, #12
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d101      	bne.n	8018e72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8018e6e:	2301      	movs	r3, #1
 8018e70:	e019      	b.n	8018ea6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018e78:	b2db      	uxtb	r3, r3
 8018e7a:	2b02      	cmp	r3, #2
 8018e7c:	d004      	beq.n	8018e88 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	2220      	movs	r2, #32
 8018e82:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8018e84:	2301      	movs	r3, #1
 8018e86:	e00e      	b.n	8018ea6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2204      	movs	r2, #4
 8018e8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	695b      	ldr	r3, [r3, #20]
 8018e96:	687a      	ldr	r2, [r7, #4]
 8018e98:	6812      	ldr	r2, [r2, #0]
 8018e9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018e9e:	f043 0304 	orr.w	r3, r3, #4
 8018ea2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8018ea4:	2300      	movs	r3, #0
}
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	370c      	adds	r7, #12
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb0:	4770      	bx	lr

08018eb2 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8018eb2:	b480      	push	{r7}
 8018eb4:	b083      	sub	sp, #12
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	370c      	adds	r7, #12
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec8:	4770      	bx	lr

08018eca <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8018eca:	b480      	push	{r7}
 8018ecc:	b085      	sub	sp, #20
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	60f8      	str	r0, [r7, #12]
 8018ed2:	60b9      	str	r1, [r7, #8]
 8018ed4:	607a      	str	r2, [r7, #4]
 8018ed6:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018ede:	0c1b      	lsrs	r3, r3, #16
 8018ee0:	041b      	lsls	r3, r3, #16
 8018ee2:	683a      	ldr	r2, [r7, #0]
 8018ee4:	b291      	uxth	r1, r2
 8018ee6:	68fa      	ldr	r2, [r7, #12]
 8018ee8:	6812      	ldr	r2, [r2, #0]
 8018eea:	430b      	orrs	r3, r1
 8018eec:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8018ef6:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	68ba      	ldr	r2, [r7, #8]
 8018efe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	687a      	ldr	r2, [r7, #4]
 8018f06:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8018f08:	bf00      	nop
 8018f0a:	3714      	adds	r7, #20
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr

08018f14 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b086      	sub	sp, #24
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d003      	beq.n	8018f2a <HAL_DMAEx_List_Start_IT+0x16>
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d101      	bne.n	8018f2e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	e082      	b.n	8019034 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018f34:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	681b      	ldr	r3, [r3, #0]
 8018f3a:	695b      	ldr	r3, [r3, #20]
 8018f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018f40:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8018f42:	7dfb      	ldrb	r3, [r7, #23]
 8018f44:	2b01      	cmp	r3, #1
 8018f46:	d005      	beq.n	8018f54 <HAL_DMAEx_List_Start_IT+0x40>
 8018f48:	7dfb      	ldrb	r3, [r7, #23]
 8018f4a:	2b02      	cmp	r3, #2
 8018f4c:	d16a      	bne.n	8019024 <HAL_DMAEx_List_Start_IT+0x110>
 8018f4e:	693b      	ldr	r3, [r7, #16]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d067      	beq.n	8019024 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d157      	bne.n	8019010 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8018f66:	2b01      	cmp	r3, #1
 8018f68:	d101      	bne.n	8018f6e <HAL_DMAEx_List_Start_IT+0x5a>
 8018f6a:	2302      	movs	r3, #2
 8018f6c:	e062      	b.n	8019034 <HAL_DMAEx_List_Start_IT+0x120>
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	2201      	movs	r2, #1
 8018f72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	2202      	movs	r2, #2
 8018f7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f82:	2202      	movs	r2, #2
 8018f84:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	2200      	movs	r2, #0
 8018f8a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018f90:	2200      	movs	r2, #0
 8018f92:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	695a      	ldr	r2, [r3, #20]
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8018fa2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d007      	beq.n	8018fbc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	695a      	ldr	r2, [r3, #20]
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018fba:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d007      	beq.n	8018fd4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	695a      	ldr	r2, [r3, #20]
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8018fd2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f107 010c 	add.w	r1, r7, #12
 8018fde:	2200      	movs	r2, #0
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	f000 f82b 	bl	801903c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	4619      	mov	r1, r3
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681a      	ldr	r2, [r3, #0]
 8018ff2:	0c0b      	lsrs	r3, r1, #16
 8018ff4:	041b      	lsls	r3, r3, #16
 8018ff6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	461a      	mov	r2, r3
 8019000:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8019004:	4013      	ands	r3, r2
 8019006:	68f9      	ldr	r1, [r7, #12]
 8019008:	687a      	ldr	r2, [r7, #4]
 801900a:	6812      	ldr	r2, [r2, #0]
 801900c:	430b      	orrs	r3, r1
 801900e:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	695a      	ldr	r2, [r3, #20]
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	f042 0201 	orr.w	r2, r2, #1
 801901e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8019020:	2300      	movs	r3, #0
 8019022:	e007      	b.n	8019034 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	2240      	movs	r2, #64	@ 0x40
 8019028:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	2200      	movs	r2, #0
 801902e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8019032:	2301      	movs	r3, #1
}
 8019034:	4618      	mov	r0, r3
 8019036:	3718      	adds	r7, #24
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 801903c:	b480      	push	{r7}
 801903e:	b085      	sub	sp, #20
 8019040:	af00      	add	r7, sp, #0
 8019042:	60f8      	str	r0, [r7, #12]
 8019044:	60b9      	str	r1, [r7, #8]
 8019046:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	6a1b      	ldr	r3, [r3, #32]
 801904c:	f003 0302 	and.w	r3, r3, #2
 8019050:	2b00      	cmp	r3, #0
 8019052:	d00c      	beq.n	801906e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8019054:	68bb      	ldr	r3, [r7, #8]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d002      	beq.n	8019060 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 801905a:	68bb      	ldr	r3, [r7, #8]
 801905c:	4a0d      	ldr	r2, [pc, #52]	@ (8019094 <DMA_List_GetCLLRNodeInfo+0x58>)
 801905e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d00f      	beq.n	8019086 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2207      	movs	r2, #7
 801906a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 801906c:	e00b      	b.n	8019086 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 801906e:	68bb      	ldr	r3, [r7, #8]
 8019070:	2b00      	cmp	r3, #0
 8019072:	d002      	beq.n	801907a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	4a08      	ldr	r2, [pc, #32]	@ (8019098 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8019078:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d002      	beq.n	8019086 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	2205      	movs	r2, #5
 8019084:	601a      	str	r2, [r3, #0]
}
 8019086:	bf00      	nop
 8019088:	3714      	adds	r7, #20
 801908a:	46bd      	mov	sp, r7
 801908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019090:	4770      	bx	lr
 8019092:	bf00      	nop
 8019094:	fe010000 	.word	0xfe010000
 8019098:	f8010000 	.word	0xf8010000

0801909c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b086      	sub	sp, #24
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	60f8      	str	r0, [r7, #12]
 80190a4:	60b9      	str	r1, [r7, #8]
 80190a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80190a8:	4b1f      	ldr	r3, [pc, #124]	@ (8019128 <HAL_FLASH_Program+0x8c>)
 80190aa:	781b      	ldrb	r3, [r3, #0]
 80190ac:	2b01      	cmp	r3, #1
 80190ae:	d101      	bne.n	80190b4 <HAL_FLASH_Program+0x18>
 80190b0:	2302      	movs	r3, #2
 80190b2:	e034      	b.n	801911e <HAL_FLASH_Program+0x82>
 80190b4:	4b1c      	ldr	r3, [pc, #112]	@ (8019128 <HAL_FLASH_Program+0x8c>)
 80190b6:	2201      	movs	r2, #1
 80190b8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80190ba:	4b1b      	ldr	r3, [pc, #108]	@ (8019128 <HAL_FLASH_Program+0x8c>)
 80190bc:	2200      	movs	r2, #0
 80190be:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80190c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80190c4:	f000 f8a2 	bl	801920c <FLASH_WaitForLastOperation>
 80190c8:	4603      	mov	r3, r0
 80190ca:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80190cc:	7dfb      	ldrb	r3, [r7, #23]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d121      	bne.n	8019116 <HAL_FLASH_Program+0x7a>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 80190d2:	4a15      	ldr	r2, [pc, #84]	@ (8019128 <HAL_FLASH_Program+0x8c>)
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80190d8:	4b14      	ldr	r3, [pc, #80]	@ (801912c <HAL_FLASH_Program+0x90>)
 80190da:	613b      	str	r3, [r7, #16]

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80190e2:	2b01      	cmp	r3, #1
 80190e4:	d104      	bne.n	80190f0 <HAL_FLASH_Program+0x54>
    {
      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(Address, DataAddress);
 80190e6:	6879      	ldr	r1, [r7, #4]
 80190e8:	68b8      	ldr	r0, [r7, #8]
 80190ea:	f000 f8d5 	bl	8019298 <FLASH_Program_QuadWord>
 80190ee:	e003      	b.n	80190f8 <HAL_FLASH_Program+0x5c>
    }
    else
    {
      /* Program a burst of 8 quad-words at a specified address */
      FLASH_Program_Burst(Address, DataAddress);
 80190f0:	6879      	ldr	r1, [r7, #4]
 80190f2:	68b8      	ldr	r0, [r7, #8]
 80190f4:	f000 f90c 	bl	8019310 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80190f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80190fc:	f000 f886 	bl	801920c <FLASH_WaitForLastOperation>
 8019100:	4603      	mov	r3, r0
 8019102:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG (and BWR Bit in Burst programming mode) */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 8019104:	693b      	ldr	r3, [r7, #16]
 8019106:	681a      	ldr	r2, [r3, #0]
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801910e:	43db      	mvns	r3, r3
 8019110:	401a      	ands	r2, r3
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019116:	4b04      	ldr	r3, [pc, #16]	@ (8019128 <HAL_FLASH_Program+0x8c>)
 8019118:	2200      	movs	r2, #0
 801911a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801911c:	7dfb      	ldrb	r3, [r7, #23]
}
 801911e:	4618      	mov	r0, r3
 8019120:	3718      	adds	r7, #24
 8019122:	46bd      	mov	sp, r7
 8019124:	bd80      	pop	{r7, pc}
 8019126:	bf00      	nop
 8019128:	2000036c 	.word	0x2000036c
 801912c:	40022028 	.word	0x40022028

08019130 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8019130:	b480      	push	{r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8019136:	2300      	movs	r3, #0
 8019138:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 801913a:	4b0b      	ldr	r3, [pc, #44]	@ (8019168 <HAL_FLASH_Unlock+0x38>)
 801913c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801913e:	2b00      	cmp	r3, #0
 8019140:	da0b      	bge.n	801915a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8019142:	4b09      	ldr	r3, [pc, #36]	@ (8019168 <HAL_FLASH_Unlock+0x38>)
 8019144:	4a09      	ldr	r2, [pc, #36]	@ (801916c <HAL_FLASH_Unlock+0x3c>)
 8019146:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8019148:	4b07      	ldr	r3, [pc, #28]	@ (8019168 <HAL_FLASH_Unlock+0x38>)
 801914a:	4a09      	ldr	r2, [pc, #36]	@ (8019170 <HAL_FLASH_Unlock+0x40>)
 801914c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 801914e:	4b06      	ldr	r3, [pc, #24]	@ (8019168 <HAL_FLASH_Unlock+0x38>)
 8019150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019152:	2b00      	cmp	r3, #0
 8019154:	da01      	bge.n	801915a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8019156:	2301      	movs	r3, #1
 8019158:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 801915a:	79fb      	ldrb	r3, [r7, #7]
}
 801915c:	4618      	mov	r0, r3
 801915e:	370c      	adds	r7, #12
 8019160:	46bd      	mov	sp, r7
 8019162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019166:	4770      	bx	lr
 8019168:	40022000 	.word	0x40022000
 801916c:	45670123 	.word	0x45670123
 8019170:	cdef89ab 	.word	0xcdef89ab

08019174 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8019174:	b480      	push	{r7}
 8019176:	b083      	sub	sp, #12
 8019178:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801917a:	2301      	movs	r3, #1
 801917c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 801917e:	4b09      	ldr	r3, [pc, #36]	@ (80191a4 <HAL_FLASH_Lock+0x30>)
 8019180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019182:	4a08      	ldr	r2, [pc, #32]	@ (80191a4 <HAL_FLASH_Lock+0x30>)
 8019184:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019188:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 801918a:	4b06      	ldr	r3, [pc, #24]	@ (80191a4 <HAL_FLASH_Lock+0x30>)
 801918c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801918e:	2b00      	cmp	r3, #0
 8019190:	da01      	bge.n	8019196 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8019192:	2300      	movs	r3, #0
 8019194:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8019196:	79fb      	ldrb	r3, [r7, #7]
}
 8019198:	4618      	mov	r0, r3
 801919a:	370c      	adds	r7, #12
 801919c:	46bd      	mov	sp, r7
 801919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a2:	4770      	bx	lr
 80191a4:	40022000 	.word	0x40022000

080191a8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80191a8:	b480      	push	{r7}
 80191aa:	af00      	add	r7, sp, #0
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 80191ac:	4b0c      	ldr	r3, [pc, #48]	@ (80191e0 <HAL_FLASH_OB_Unlock+0x38>)
 80191ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d00d      	beq.n	80191d4 <HAL_FLASH_OB_Unlock+0x2c>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80191b8:	4b09      	ldr	r3, [pc, #36]	@ (80191e0 <HAL_FLASH_OB_Unlock+0x38>)
 80191ba:	4a0a      	ldr	r2, [pc, #40]	@ (80191e4 <HAL_FLASH_OB_Unlock+0x3c>)
 80191bc:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80191be:	4b08      	ldr	r3, [pc, #32]	@ (80191e0 <HAL_FLASH_OB_Unlock+0x38>)
 80191c0:	4a09      	ldr	r2, [pc, #36]	@ (80191e8 <HAL_FLASH_OB_Unlock+0x40>)
 80191c2:	611a      	str	r2, [r3, #16]

    /* Verify that the Option Bytes are unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 80191c4:	4b06      	ldr	r3, [pc, #24]	@ (80191e0 <HAL_FLASH_OB_Unlock+0x38>)
 80191c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d001      	beq.n	80191d4 <HAL_FLASH_OB_Unlock+0x2c>
    {
      return HAL_ERROR;
 80191d0:	2301      	movs	r3, #1
 80191d2:	e000      	b.n	80191d6 <HAL_FLASH_OB_Unlock+0x2e>
    }
  }

  return HAL_OK;
 80191d4:	2300      	movs	r3, #0
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	46bd      	mov	sp, r7
 80191da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191de:	4770      	bx	lr
 80191e0:	40022000 	.word	0x40022000
 80191e4:	08192a3b 	.word	0x08192a3b
 80191e8:	4c5d6e7f 	.word	0x4c5d6e7f

080191ec <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80191ec:	b480      	push	{r7}
 80191ee:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_OBL_LAUNCH);
 80191f0:	4b05      	ldr	r3, [pc, #20]	@ (8019208 <HAL_FLASH_OB_Launch+0x1c>)
 80191f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80191f4:	4a04      	ldr	r2, [pc, #16]	@ (8019208 <HAL_FLASH_OB_Launch+0x1c>)
 80191f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80191fa:	6293      	str	r3, [r2, #40]	@ 0x28

  /* We should not reach here : Option byte launch generates Option byte reset
     so return error */
  return HAL_ERROR;
 80191fc:	2301      	movs	r3, #1
}
 80191fe:	4618      	mov	r0, r3
 8019200:	46bd      	mov	sp, r7
 8019202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019206:	4770      	bx	lr
 8019208:	40022000 	.word	0x40022000

0801920c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8019214:	f7fd f92a 	bl	801646c <HAL_GetTick>
 8019218:	4602      	mov	r2, r0
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	4413      	add	r3, r2
 801921e:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8019220:	4b1b      	ldr	r3, [pc, #108]	@ (8019290 <FLASH_WaitForLastOperation+0x84>)
 8019222:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8019224:	e00b      	b.n	801923e <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801922c:	d007      	beq.n	801923e <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 801922e:	f7fd f91d 	bl	801646c <HAL_GetTick>
 8019232:	4602      	mov	r2, r0
 8019234:	697b      	ldr	r3, [r7, #20]
 8019236:	4293      	cmp	r3, r2
 8019238:	d801      	bhi.n	801923e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 801923a:	2303      	movs	r3, #3
 801923c:	e023      	b.n	8019286 <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 801923e:	693b      	ldr	r3, [r7, #16]
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8019246:	2b00      	cmp	r3, #0
 8019248:	d1ed      	bne.n	8019226 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	681a      	ldr	r2, [r3, #0]
 801924e:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8019252:	4013      	ands	r3, r2
 8019254:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	2b00      	cmp	r3, #0
 801925a:	d00a      	beq.n	8019272 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 801925c:	4b0d      	ldr	r3, [pc, #52]	@ (8019294 <FLASH_WaitForLastOperation+0x88>)
 801925e:	685a      	ldr	r2, [r3, #4]
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	4313      	orrs	r3, r2
 8019264:	4a0b      	ldr	r2, [pc, #44]	@ (8019294 <FLASH_WaitForLastOperation+0x88>)
 8019266:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8019268:	693b      	ldr	r3, [r7, #16]
 801926a:	68fa      	ldr	r2, [r7, #12]
 801926c:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 801926e:	2301      	movs	r3, #1
 8019270:	e009      	b.n	8019286 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	f003 0301 	and.w	r3, r3, #1
 801927a:	2b00      	cmp	r3, #0
 801927c:	d002      	beq.n	8019284 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 801927e:	693b      	ldr	r3, [r7, #16]
 8019280:	2201      	movs	r2, #1
 8019282:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8019284:	2300      	movs	r3, #0
}
 8019286:	4618      	mov	r0, r3
 8019288:	3718      	adds	r7, #24
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}
 801928e:	bf00      	nop
 8019290:	40022020 	.word	0x40022020
 8019294:	2000036c 	.word	0x2000036c

08019298 <FLASH_Program_QuadWord>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
 8019298:	b480      	push	{r7}
 801929a:	b08b      	sub	sp, #44	@ 0x2c
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 80192a2:	2304      	movs	r3, #4
 80192a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 80192ac:	683b      	ldr	r3, [r7, #0]
 80192ae:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 80192b0:	4b16      	ldr	r3, [pc, #88]	@ (801930c <FLASH_Program_QuadWord+0x74>)
 80192b2:	61bb      	str	r3, [r7, #24]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_NSCR_PG);
 80192b4:	69bb      	ldr	r3, [r7, #24]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	f043 0201 	orr.w	r2, r3, #1
 80192bc:	69bb      	ldr	r3, [r7, #24]
 80192be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80192c0:	f3ef 8310 	mrs	r3, PRIMASK
 80192c4:	613b      	str	r3, [r7, #16]
  return(result);
 80192c6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80192c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192ca:	b672      	cpsid	i
}
 80192cc:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 80192ce:	69fb      	ldr	r3, [r7, #28]
 80192d0:	681a      	ldr	r2, [r3, #0]
 80192d2:	6a3b      	ldr	r3, [r7, #32]
 80192d4:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80192d6:	6a3b      	ldr	r3, [r7, #32]
 80192d8:	3304      	adds	r3, #4
 80192da:	623b      	str	r3, [r7, #32]
    src_addr++;
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	3304      	adds	r3, #4
 80192e0:	61fb      	str	r3, [r7, #28]
    index--;
 80192e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80192e6:	3b01      	subs	r3, #1
 80192e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 80192ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d1ec      	bne.n	80192ce <FLASH_Program_QuadWord+0x36>
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	f383 8810 	msr	PRIMASK, r3
}
 80192fe:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8019300:	bf00      	nop
 8019302:	372c      	adds	r7, #44	@ 0x2c
 8019304:	46bd      	mov	sp, r7
 8019306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930a:	4770      	bx	lr
 801930c:	40022028 	.word	0x40022028

08019310 <FLASH_Program_Burst>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
 8019310:	b480      	push	{r7}
 8019312:	b08b      	sub	sp, #44	@ 0x2c
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	6039      	str	r1, [r7, #0]
  uint8_t burst_index = FLASH_NB_WORDS_IN_BURST;
 801931a:	2320      	movs	r3, #32
 801931c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8019328:	4b17      	ldr	r3, [pc, #92]	@ (8019388 <FLASH_Program_Burst+0x78>)
 801932a:	61bb      	str	r3, [r7, #24]

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR_PG | FLASH_NSCR_BWR));
 801932c:	69bb      	ldr	r3, [r7, #24]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8019334:	f043 0301 	orr.w	r3, r3, #1
 8019338:	69ba      	ldr	r2, [r7, #24]
 801933a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801933c:	f3ef 8310 	mrs	r3, PRIMASK
 8019340:	613b      	str	r3, [r7, #16]
  return(result);
 8019342:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8019344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019346:	b672      	cpsid	i
}
 8019348:	bf00      	nop
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 801934a:	69fb      	ldr	r3, [r7, #28]
 801934c:	681a      	ldr	r2, [r3, #0]
 801934e:	6a3b      	ldr	r3, [r7, #32]
 8019350:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8019352:	6a3b      	ldr	r3, [r7, #32]
 8019354:	3304      	adds	r3, #4
 8019356:	623b      	str	r3, [r7, #32]
    src_addr++;
 8019358:	69fb      	ldr	r3, [r7, #28]
 801935a:	3304      	adds	r3, #4
 801935c:	61fb      	str	r3, [r7, #28]
    burst_index--;
 801935e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019362:	3b01      	subs	r3, #1
 8019364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (burst_index != 0U);
 8019368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801936c:	2b00      	cmp	r3, #0
 801936e:	d1ec      	bne.n	801934a <FLASH_Program_Burst+0x3a>
 8019370:	697b      	ldr	r3, [r7, #20]
 8019372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	f383 8810 	msr	PRIMASK, r3
}
 801937a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801937c:	bf00      	nop
 801937e:	372c      	adds	r7, #44	@ 0x2c
 8019380:	46bd      	mov	sp, r7
 8019382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019386:	4770      	bx	lr
 8019388:	40022028 	.word	0x40022028

0801938c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801938c:	b580      	push	{r7, lr}
 801938e:	b086      	sub	sp, #24
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019396:	4b33      	ldr	r3, [pc, #204]	@ (8019464 <HAL_FLASHEx_Erase+0xd8>)
 8019398:	781b      	ldrb	r3, [r3, #0]
 801939a:	2b01      	cmp	r3, #1
 801939c:	d101      	bne.n	80193a2 <HAL_FLASHEx_Erase+0x16>
 801939e:	2302      	movs	r3, #2
 80193a0:	e05c      	b.n	801945c <HAL_FLASHEx_Erase+0xd0>
 80193a2:	4b30      	ldr	r3, [pc, #192]	@ (8019464 <HAL_FLASHEx_Erase+0xd8>)
 80193a4:	2201      	movs	r2, #1
 80193a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80193a8:	4b2e      	ldr	r3, [pc, #184]	@ (8019464 <HAL_FLASHEx_Erase+0xd8>)
 80193aa:	2200      	movs	r2, #0
 80193ac:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80193ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80193b2:	f7ff ff2b 	bl	801920c <FLASH_WaitForLastOperation>
 80193b6:	4603      	mov	r3, r0
 80193b8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80193ba:	7dfb      	ldrb	r3, [r7, #23]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d149      	bne.n	8019454 <HAL_FLASHEx_Erase+0xc8>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	4a27      	ldr	r2, [pc, #156]	@ (8019464 <HAL_FLASHEx_Erase+0xd8>)
 80193c6:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH->NSCR);
 80193c8:	4b27      	ldr	r3, [pc, #156]	@ (8019468 <HAL_FLASHEx_Erase+0xdc>)
 80193ca:	60fb      	str	r3, [r7, #12]

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80193d4:	f248 0204 	movw	r2, #32772	@ 0x8004
 80193d8:	4293      	cmp	r3, r2
 80193da:	d10b      	bne.n	80193f4 <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	685b      	ldr	r3, [r3, #4]
 80193e0:	4618      	mov	r0, r3
 80193e2:	f000 f909 	bl	80195f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80193e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80193ea:	f7ff ff0f 	bl	801920c <FLASH_WaitForLastOperation>
 80193ee:	4603      	mov	r3, r0
 80193f0:	75fb      	strb	r3, [r7, #23]
 80193f2:	e025      	b.n	8019440 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	f04f 32ff 	mov.w	r2, #4294967295
 80193fa:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	689b      	ldr	r3, [r3, #8]
 8019400:	613b      	str	r3, [r7, #16]
 8019402:	e015      	b.n	8019430 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	4619      	mov	r1, r3
 801940a:	6938      	ldr	r0, [r7, #16]
 801940c:	f000 f91a 	bl	8019644 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8019410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8019414:	f7ff fefa 	bl	801920c <FLASH_WaitForLastOperation>
 8019418:	4603      	mov	r3, r0
 801941a:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 801941c:	7dfb      	ldrb	r3, [r7, #23]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d003      	beq.n	801942a <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	693a      	ldr	r2, [r7, #16]
 8019426:	601a      	str	r2, [r3, #0]
          break;
 8019428:	e00a      	b.n	8019440 <HAL_FLASHEx_Erase+0xb4>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801942a:	693b      	ldr	r3, [r7, #16]
 801942c:	3301      	adds	r3, #1
 801942e:	613b      	str	r3, [r7, #16]
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	689a      	ldr	r2, [r3, #8]
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	68db      	ldr	r3, [r3, #12]
 8019438:	4413      	add	r3, r2
 801943a:	693a      	ldr	r2, [r7, #16]
 801943c:	429a      	cmp	r2, r3
 801943e:	d3e1      	bcc.n	8019404 <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	681a      	ldr	r2, [r3, #0]
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801944c:	43db      	mvns	r3, r3
 801944e:	401a      	ands	r2, r3
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019454:	4b03      	ldr	r3, [pc, #12]	@ (8019464 <HAL_FLASHEx_Erase+0xd8>)
 8019456:	2200      	movs	r2, #0
 8019458:	701a      	strb	r2, [r3, #0]

  return status;
 801945a:	7dfb      	ldrb	r3, [r7, #23]
}
 801945c:	4618      	mov	r0, r3
 801945e:	3718      	adds	r7, #24
 8019460:	46bd      	mov	sp, r7
 8019462:	bd80      	pop	{r7, pc}
 8019464:	2000036c 	.word	0x2000036c
 8019468:	40022028 	.word	0x40022028

0801946c <HAL_FLASHEx_OBProgram>:
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b084      	sub	sp, #16
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8019474:	4b37      	ldr	r3, [pc, #220]	@ (8019554 <HAL_FLASHEx_OBProgram+0xe8>)
 8019476:	781b      	ldrb	r3, [r3, #0]
 8019478:	2b01      	cmp	r3, #1
 801947a:	d101      	bne.n	8019480 <HAL_FLASHEx_OBProgram+0x14>
 801947c:	2302      	movs	r3, #2
 801947e:	e064      	b.n	801954a <HAL_FLASHEx_OBProgram+0xde>
 8019480:	4b34      	ldr	r3, [pc, #208]	@ (8019554 <HAL_FLASHEx_OBProgram+0xe8>)
 8019482:	2201      	movs	r2, #1
 8019484:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8019486:	4b33      	ldr	r3, [pc, #204]	@ (8019554 <HAL_FLASHEx_OBProgram+0xe8>)
 8019488:	2200      	movs	r2, #0
 801948a:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 801948c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8019490:	f7ff febc 	bl	801920c <FLASH_WaitForLastOperation>
 8019494:	4603      	mov	r3, r0
 8019496:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8019498:	7bfb      	ldrb	r3, [r7, #15]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d151      	bne.n	8019542 <HAL_FLASHEx_OBProgram+0xd6>
  {
    /* Write protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	f003 0301 	and.w	r3, r3, #1
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d009      	beq.n	80194be <HAL_FLASHEx_OBProgram+0x52>
    {
      /* Configure of Write protection on the selected area */
      FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset, pOBInit->WRPLock);
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	6858      	ldr	r0, [r3, #4]
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	6899      	ldr	r1, [r3, #8]
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	68da      	ldr	r2, [r3, #12]
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	7c1b      	ldrb	r3, [r3, #16]
 80194ba:	f000 f8f3 	bl	80196a4 <FLASH_OB_WRPConfig>
    }

    /* Read protection configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	f003 0302 	and.w	r3, r3, #2
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d004      	beq.n	80194d4 <HAL_FLASHEx_OBProgram+0x68>
    {
      /* Configure the Read protection level */
      FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	695b      	ldr	r3, [r3, #20]
 80194ce:	4618      	mov	r0, r3
 80194d0:	f000 f92e 	bl	8019730 <FLASH_OB_RDPConfig>
    }

    /* Read protection key configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_RDPKEY) != 0U)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d008      	beq.n	80194f2 <HAL_FLASHEx_OBProgram+0x86>
    {
      /* Configure the Read protection key */
      FLASH_OB_RDPKeyConfig(pOBInit->RDPKeyType, pOBInit->RDPKey1, pOBInit->RDPKey2);
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80194ec:	461a      	mov	r2, r3
 80194ee:	f000 f933 	bl	8019758 <FLASH_OB_RDPKeyConfig>
    }

    /* User Configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	f003 0304 	and.w	r3, r3, #4
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d007      	beq.n	801950e <HAL_FLASHEx_OBProgram+0xa2>
    {
      /* Configure the user option bytes */
      FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig);
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	699a      	ldr	r2, [r3, #24]
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	69db      	ldr	r3, [r3, #28]
 8019506:	4619      	mov	r1, r3
 8019508:	4610      	mov	r0, r2
 801950a:	f000 f943 	bl	8019794 <FLASH_OB_UserConfig>
      FLASH_OB_BootLockConfig(pOBInit->BootLock);
    }
#endif /* __ARM_FEATURE_CMSE */

    /* Boot address configuration */
    if ((pOBInit->OptionType & OPTIONBYTE_BOOTADDR) != 0U)
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	f003 0308 	and.w	r3, r3, #8
 8019516:	2b00      	cmp	r3, #0
 8019518:	d007      	beq.n	801952a <HAL_FLASHEx_OBProgram+0xbe>
    {
      /* Configure the boot address */
      FLASH_OB_BootAddrConfig(pOBInit->BootAddrConfig, pOBInit->BootAddr);
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6a1a      	ldr	r2, [r3, #32]
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019522:	4619      	mov	r1, r3
 8019524:	4610      	mov	r0, r2
 8019526:	f000 fa8b 	bl	8019a40 <FLASH_OB_BootAddrConfig>
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->NSCR, FLASH_NSCR_OPTSTRT);
 801952a:	4b0b      	ldr	r3, [pc, #44]	@ (8019558 <HAL_FLASHEx_OBProgram+0xec>)
 801952c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801952e:	4a0a      	ldr	r2, [pc, #40]	@ (8019558 <HAL_FLASHEx_OBProgram+0xec>)
 8019530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019534:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8019536:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801953a:	f7ff fe67 	bl	801920c <FLASH_WaitForLastOperation>
 801953e:	4603      	mov	r3, r0
 8019540:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8019542:	4b04      	ldr	r3, [pc, #16]	@ (8019554 <HAL_FLASHEx_OBProgram+0xe8>)
 8019544:	2200      	movs	r2, #0
 8019546:	701a      	strb	r2, [r3, #0]

  return status;
 8019548:	7bfb      	ldrb	r3, [r7, #15]
}
 801954a:	4618      	mov	r0, r3
 801954c:	3710      	adds	r7, #16
 801954e:	46bd      	mov	sp, r7
 8019550:	bd80      	pop	{r7, pc}
 8019552:	bf00      	nop
 8019554:	2000036c 	.word	0x2000036c
 8019558:	40022000 	.word	0x40022000

0801955c <HAL_FLASHEx_OBGetConfig>:
  *         Boot Address, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b082      	sub	sp, #8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2206      	movs	r2, #6
 8019568:	601a      	str	r2, [r3, #0]

  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	685b      	ldr	r3, [r3, #4]
 801956e:	2b01      	cmp	r3, #1
 8019570:	d00b      	beq.n	801958a <HAL_FLASHEx_OBGetConfig+0x2e>
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	685b      	ldr	r3, [r3, #4]
 8019576:	2b02      	cmp	r3, #2
 8019578:	d007      	beq.n	801958a <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 801957e:	2b04      	cmp	r3, #4
 8019580:	d003      	beq.n	801958a <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	685b      	ldr	r3, [r3, #4]
 8019586:	2b08      	cmp	r3, #8
 8019588:	d111      	bne.n	80195ae <HAL_FLASHEx_OBGetConfig+0x52>
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	f043 0201 	orr.w	r2, r3, #1
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset), &(pOBInit->WRPLock));
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	6858      	ldr	r0, [r3, #4]
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	f103 0108 	add.w	r1, r3, #8
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f103 020c 	add.w	r2, r3, #12
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	3310      	adds	r3, #16
 80195aa:	f000 fa63 	bl	8019a74 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80195ae:	f000 fad3 	bl	8019b58 <FLASH_OB_GetRDP>
 80195b2:	4602      	mov	r2, r0
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	615a      	str	r2, [r3, #20]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80195b8:	f000 faea 	bl	8019b90 <FLASH_OB_GetUser>
 80195bc:	4602      	mov	r2, r0
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	61da      	str	r2, [r3, #28]
  /* Get the value of the selected boot address */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1) ||
      (pOBInit->BootAddrConfig == OB_BOOTADDR_SEC0))
#else
  if ((pOBInit->BootAddrConfig == OB_BOOTADDR_NS0) || (pOBInit->BootAddrConfig == OB_BOOTADDR_NS1))
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	6a1b      	ldr	r3, [r3, #32]
 80195c6:	2b01      	cmp	r3, #1
 80195c8:	d003      	beq.n	80195d2 <HAL_FLASHEx_OBGetConfig+0x76>
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6a1b      	ldr	r3, [r3, #32]
 80195ce:	2b02      	cmp	r3, #2
 80195d0:	d10d      	bne.n	80195ee <HAL_FLASHEx_OBGetConfig+0x92>
#endif /* __ARM_FEATURE_CMSE */
  {
    pOBInit->OptionType |= OPTIONBYTE_BOOTADDR;
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	f043 0208 	orr.w	r2, r3, #8
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetBootAddr(pOBInit->BootAddrConfig, &(pOBInit->BootAddr));
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	6a1a      	ldr	r2, [r3, #32]
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	3324      	adds	r3, #36	@ 0x24
 80195e6:	4619      	mov	r1, r3
 80195e8:	4610      	mov	r0, r2
 80195ea:	f000 fae5 	bl	8019bb8 <FLASH_OB_GetBootAddr>
  }
}
 80195ee:	bf00      	nop
 80195f0:	3708      	adds	r7, #8
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
	...

080195f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80195f8:	b480      	push	{r7}
 80195fa:	b085      	sub	sp, #20
 80195fc:	af00      	add	r7, sp, #0
 80195fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8019600:	4b0f      	ldr	r3, [pc, #60]	@ (8019640 <FLASH_MassErase+0x48>)
 8019602:	60fb      	str	r3, [r7, #12]

  /* Set the Mass Erase Bit for the bank 1 and proceed to erase */
  if ((Banks & FLASH_BANK_1) != 0U)
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	f003 0301 	and.w	r3, r3, #1
 801960a:	2b00      	cmp	r3, #0
 801960c:	d007      	beq.n	801961e <FLASH_MassErase+0x26>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER1 | FLASH_NSCR_STRT);
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019616:	f043 0304 	orr.w	r3, r3, #4
 801961a:	68fa      	ldr	r2, [r7, #12]
 801961c:	6013      	str	r3, [r2, #0]
  }

  /* Set the Mass Erase Bit for the bank 2 and proceed to erase */
  if ((Banks & FLASH_BANK_2) != 0U)
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	f003 0302 	and.w	r3, r3, #2
 8019624:	2b00      	cmp	r3, #0
 8019626:	d005      	beq.n	8019634 <FLASH_MassErase+0x3c>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER2 | FLASH_NSCR_STRT);
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	f443 32c0 	orr.w	r2, r3, #98304	@ 0x18000
 8019630:	68fb      	ldr	r3, [r7, #12]
 8019632:	601a      	str	r2, [r3, #0]
  }
}
 8019634:	bf00      	nop
 8019636:	3714      	adds	r7, #20
 8019638:	46bd      	mov	sp, r7
 801963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963e:	4770      	bx	lr
 8019640:	40022028 	.word	0x40022028

08019644 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8019644:	b480      	push	{r7}
 8019646:	b085      	sub	sp, #20
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
 801964c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 801964e:	4b14      	ldr	r3, [pc, #80]	@ (80196a0 <FLASH_PageErase+0x5c>)
 8019650:	60fb      	str	r3, [r7, #12]

  if ((Banks & FLASH_BANK_1) != 0U)
 8019652:	683b      	ldr	r3, [r7, #0]
 8019654:	f003 0301 	and.w	r3, r3, #1
 8019658:	2b00      	cmp	r3, #0
 801965a:	d006      	beq.n	801966a <FLASH_PageErase+0x26>
  {
    CLEAR_BIT((*reg_cr), FLASH_NSCR_BKER);
 801965c:	68fb      	ldr	r3, [r7, #12]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	601a      	str	r2, [r3, #0]
 8019668:	e005      	b.n	8019676 <FLASH_PageErase+0x32>
  }
  else
  {
    SET_BIT((*reg_cr), FLASH_NSCR_BKER);
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8019672:	68fb      	ldr	r3, [r7, #12]
 8019674:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR_PNB | FLASH_NSCR_PER | FLASH_NSCR_STRT), \
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	f423 3381 	bic.w	r3, r3, #66048	@ 0x10200
 801967e:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8019682:	687a      	ldr	r2, [r7, #4]
 8019684:	00d2      	lsls	r2, r2, #3
 8019686:	4313      	orrs	r3, r2
 8019688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801968c:	f043 0302 	orr.w	r3, r3, #2
 8019690:	68fa      	ldr	r2, [r7, #12]
 8019692:	6013      	str	r3, [r2, #0]
             ((Page << FLASH_NSCR_PNB_Pos) | FLASH_NSCR_PER | FLASH_NSCR_STRT));
}
 8019694:	bf00      	nop
 8019696:	3714      	adds	r7, #20
 8019698:	46bd      	mov	sp, r7
 801969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969e:	4770      	bx	lr
 80196a0:	40022028 	.word	0x40022028

080196a4 <FLASH_OB_WRPConfig>:
  *
  * @retval None
  */
static void FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRPEndOffset,
                               FunctionalState WRPLock)
{
 80196a4:	b480      	push	{r7}
 80196a6:	b085      	sub	sp, #20
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	60f8      	str	r0, [r7, #12]
 80196ac:	60b9      	str	r1, [r7, #8]
 80196ae:	607a      	str	r2, [r7, #4]
 80196b0:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRPEndOffset));
  assert_param(IS_FUNCTIONAL_STATE(WRPLock));

  /* Configure the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	2b01      	cmp	r3, #1
 80196b6:	d10a      	bne.n	80196ce <FLASH_OB_WRPConfig+0x2a>
  {
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 80196b8:	78fb      	ldrb	r3, [r7, #3]
 80196ba:	43db      	mvns	r3, r3
 80196bc:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP1AR_WRP1A_PEND_Pos) | \
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	041b      	lsls	r3, r3, #16
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 80196c2:	431a      	orrs	r2, r3
 80196c4:	4919      	ldr	r1, [pc, #100]	@ (801972c <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP1AR_WRP1A_PEND_Pos) | \
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	4313      	orrs	r3, r2
    FLASH->WRP1AR = (((uint32_t)(~WRPLock) << FLASH_WRP1AR_UNLOCK_Pos)       | \
 80196ca:	658b      	str	r3, [r1, #88]	@ 0x58
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 80196cc:	e028      	b.n	8019720 <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	2b02      	cmp	r3, #2
 80196d2:	d10a      	bne.n	80196ea <FLASH_OB_WRPConfig+0x46>
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 80196d4:	78fb      	ldrb	r3, [r7, #3]
 80196d6:	43db      	mvns	r3, r3
 80196d8:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP1BR_WRP1B_PEND_Pos) | \
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	041b      	lsls	r3, r3, #16
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 80196de:	431a      	orrs	r2, r3
 80196e0:	4912      	ldr	r1, [pc, #72]	@ (801972c <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP1BR_WRP1B_PEND_Pos) | \
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	4313      	orrs	r3, r2
    FLASH->WRP1BR = (((uint32_t)(~WRPLock) << FLASH_WRP1BR_UNLOCK_Pos)       | \
 80196e6:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 80196e8:	e01a      	b.n	8019720 <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	2b04      	cmp	r3, #4
 80196ee:	d10a      	bne.n	8019706 <FLASH_OB_WRPConfig+0x62>
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 80196f0:	78fb      	ldrb	r3, [r7, #3]
 80196f2:	43db      	mvns	r3, r3
 80196f4:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP2AR_WRP2A_PEND_Pos) | \
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	041b      	lsls	r3, r3, #16
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 80196fa:	431a      	orrs	r2, r3
 80196fc:	490b      	ldr	r1, [pc, #44]	@ (801972c <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP2AR_WRP2A_PEND_Pos) | \
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	4313      	orrs	r3, r2
    FLASH->WRP2AR = (((uint32_t)(~WRPLock) << FLASH_WRP2AR_UNLOCK_Pos)       | \
 8019702:	668b      	str	r3, [r1, #104]	@ 0x68
}
 8019704:	e00c      	b.n	8019720 <FLASH_OB_WRPConfig+0x7c>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	2b08      	cmp	r3, #8
 801970a:	d109      	bne.n	8019720 <FLASH_OB_WRPConfig+0x7c>
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 801970c:	78fb      	ldrb	r3, [r7, #3]
 801970e:	43db      	mvns	r3, r3
 8019710:	07da      	lsls	r2, r3, #31
                     (WRPEndOffset << FLASH_WRP2BR_WRP2B_PEND_Pos) | \
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	041b      	lsls	r3, r3, #16
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 8019716:	431a      	orrs	r2, r3
 8019718:	4904      	ldr	r1, [pc, #16]	@ (801972c <FLASH_OB_WRPConfig+0x88>)
                     (WRPEndOffset << FLASH_WRP2BR_WRP2B_PEND_Pos) | \
 801971a:	68bb      	ldr	r3, [r7, #8]
 801971c:	4313      	orrs	r3, r2
    FLASH->WRP2BR = (((uint32_t)(~WRPLock) << FLASH_WRP2BR_UNLOCK_Pos)       | \
 801971e:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 8019720:	bf00      	nop
 8019722:	3714      	adds	r7, #20
 8019724:	46bd      	mov	sp, r7
 8019726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801972a:	4770      	bx	lr
 801972c:	40022000 	.word	0x40022000

08019730 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval None
  */
static void FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8019730:	b480      	push	{r7}
 8019732:	b083      	sub	sp, #12
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Configure the RDP level in the option bytes register */
  MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8019738:	4b06      	ldr	r3, [pc, #24]	@ (8019754 <FLASH_OB_RDPConfig+0x24>)
 801973a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801973c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8019740:	4904      	ldr	r1, [pc, #16]	@ (8019754 <FLASH_OB_RDPConfig+0x24>)
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	4313      	orrs	r3, r2
 8019746:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8019748:	bf00      	nop
 801974a:	370c      	adds	r7, #12
 801974c:	46bd      	mov	sp, r7
 801974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019752:	4770      	bx	lr
 8019754:	40022000 	.word	0x40022000

08019758 <FLASH_OB_RDPKeyConfig>:
  * @param  RDPKey1 specifies the RDP key 1.
  * @param  RDPKey2 specifies the RDP key 2.
  * @retval None
  */
static void FLASH_OB_RDPKeyConfig(uint32_t RDPKeyType, uint32_t RDPKey1, uint32_t RDPKey2)
{
 8019758:	b480      	push	{r7}
 801975a:	b085      	sub	sp, #20
 801975c:	af00      	add	r7, sp, #0
 801975e:	60f8      	str	r0, [r7, #12]
 8019760:	60b9      	str	r1, [r7, #8]
 8019762:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_OB_RDP_KEY_TYPE(RDPKeyType));

  /* Configure the RDP OEM key */
  if (RDPKeyType == OB_RDP_KEY_OEM1)
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	2b01      	cmp	r3, #1
 8019768:	d106      	bne.n	8019778 <FLASH_OB_RDPKeyConfig+0x20>
  {
    WRITE_REG(FLASH->OEM1KEYR1, RDPKey1);
 801976a:	4a09      	ldr	r2, [pc, #36]	@ (8019790 <FLASH_OB_RDPKeyConfig+0x38>)
 801976c:	68bb      	ldr	r3, [r7, #8]
 801976e:	6713      	str	r3, [r2, #112]	@ 0x70
    WRITE_REG(FLASH->OEM1KEYR2, RDPKey2);
 8019770:	4a07      	ldr	r2, [pc, #28]	@ (8019790 <FLASH_OB_RDPKeyConfig+0x38>)
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	6753      	str	r3, [r2, #116]	@ 0x74
  else
  {
    WRITE_REG(FLASH->OEM2KEYR1, RDPKey1);
    WRITE_REG(FLASH->OEM2KEYR2, RDPKey2);
  }
}
 8019776:	e005      	b.n	8019784 <FLASH_OB_RDPKeyConfig+0x2c>
    WRITE_REG(FLASH->OEM2KEYR1, RDPKey1);
 8019778:	4a05      	ldr	r2, [pc, #20]	@ (8019790 <FLASH_OB_RDPKeyConfig+0x38>)
 801977a:	68bb      	ldr	r3, [r7, #8]
 801977c:	6793      	str	r3, [r2, #120]	@ 0x78
    WRITE_REG(FLASH->OEM2KEYR2, RDPKey2);
 801977e:	4a04      	ldr	r2, [pc, #16]	@ (8019790 <FLASH_OB_RDPKeyConfig+0x38>)
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	67d3      	str	r3, [r2, #124]	@ 0x7c
}
 8019784:	bf00      	nop
 8019786:	3714      	adds	r7, #20
 8019788:	46bd      	mov	sp, r7
 801978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978e:	4770      	bx	lr
 8019790:	40022000 	.word	0x40022000

08019794 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  * @retval None
  */
static void FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8019794:	b480      	push	{r7}
 8019796:	b085      	sub	sp, #20
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
 801979c:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 801979e:	2300      	movs	r3, #0
 80197a0:	60fb      	str	r3, [r7, #12]
  uint32_t optr_reg_mask = 0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  if ((UserType & OB_USER_BOR_LEV) != 0U)
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	f003 0301 	and.w	r3, r3, #1
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d009      	beq.n	80197c4 <FLASH_OB_UserConfig+0x30>
  {
    /* BOR level option byte should be modified */
    assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

    /* Set value and mask for BOR level option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 80197b0:	683b      	ldr	r3, [r7, #0]
 80197b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80197b6:	68fa      	ldr	r2, [r7, #12]
 80197b8:	4313      	orrs	r3, r2
 80197ba:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80197c2:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_STOP) != 0U)
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f003 0302 	and.w	r3, r3, #2
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d009      	beq.n	80197e2 <FLASH_OB_UserConfig+0x4e>
  {
    /* nRST_STOP option byte should be modified */
    assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

    /* Set value and mask for nRST_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80197d4:	68fa      	ldr	r2, [r7, #12]
 80197d6:	4313      	orrs	r3, r2
 80197d8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 80197da:	68bb      	ldr	r3, [r7, #8]
 80197dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80197e0:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_STDBY) != 0U)
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	f003 0304 	and.w	r3, r3, #4
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d009      	beq.n	8019800 <FLASH_OB_UserConfig+0x6c>
  {
    /* nRST_STDBY option byte should be modified */
    assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

    /* Set value and mask for nRST_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 80197ec:	683b      	ldr	r3, [r7, #0]
 80197ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80197f2:	68fa      	ldr	r2, [r7, #12]
 80197f4:	4313      	orrs	r3, r2
 80197f6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80197fe:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NRST_SHDW) != 0U)
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	f003 0308 	and.w	r3, r3, #8
 8019806:	2b00      	cmp	r3, #0
 8019808:	d009      	beq.n	801981e <FLASH_OB_UserConfig+0x8a>
  {
    /* nRST_SHDW option byte should be modified */
    assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

    /* Set value and mask for nRST_SHDW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019810:	68fa      	ldr	r2, [r7, #12]
 8019812:	4313      	orrs	r3, r2
 8019814:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8019816:	68bb      	ldr	r3, [r7, #8]
 8019818:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801981c:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SRAM_RST) != 0U)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	f003 0310 	and.w	r3, r3, #16
 8019824:	2b00      	cmp	r3, #0
 8019826:	d009      	beq.n	801983c <FLASH_OB_UserConfig+0xa8>
  {
    /* SRAM_RST option byte should be modified */
    assert_param(IS_OB_USER_SRAM_RST(UserConfig & FLASH_OPTR_SRAM_RST));

    /* Set value and mask for SRAM_RST option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_RST);
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801982e:	68fa      	ldr	r2, [r7, #12]
 8019830:	4313      	orrs	r3, r2
 8019832:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM_RST;
 8019834:	68bb      	ldr	r3, [r7, #8]
 8019836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801983a:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_SW) != 0U)
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	f003 0320 	and.w	r3, r3, #32
 8019842:	2b00      	cmp	r3, #0
 8019844:	d009      	beq.n	801985a <FLASH_OB_UserConfig+0xc6>
  {
    /* IWDG_SW option byte should be modified */
    assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

    /* Set value and mask for IWDG_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8019846:	683b      	ldr	r3, [r7, #0]
 8019848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801984c:	68fa      	ldr	r2, [r7, #12]
 801984e:	4313      	orrs	r3, r2
 8019850:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8019852:	68bb      	ldr	r3, [r7, #8]
 8019854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019858:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_STOP) != 0U)
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019860:	2b00      	cmp	r3, #0
 8019862:	d009      	beq.n	8019878 <FLASH_OB_UserConfig+0xe4>
  {
    /* IWDG_STOP option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

    /* Set value and mask for IWDG_STOP option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801986a:	68fa      	ldr	r2, [r7, #12]
 801986c:	4313      	orrs	r3, r2
 801986e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8019876:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801987e:	2b00      	cmp	r3, #0
 8019880:	d009      	beq.n	8019896 <FLASH_OB_UserConfig+0x102>
  {
    /* IWDG_STDBY option byte should be modified */
    assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

    /* Set value and mask for IWDG_STDBY option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019888:	68fa      	ldr	r2, [r7, #12]
 801988a:	4313      	orrs	r3, r2
 801988c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8019894:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_WWDG_SW) != 0U)
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801989c:	2b00      	cmp	r3, #0
 801989e:	d009      	beq.n	80198b4 <FLASH_OB_UserConfig+0x120>
  {
    /* WWDG_SW option byte should be modified */
    assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

    /* Set value and mask for WWDG_SW option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 80198a0:	683b      	ldr	r3, [r7, #0]
 80198a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80198a6:	68fa      	ldr	r2, [r7, #12]
 80198a8:	4313      	orrs	r3, r2
 80198aa:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 80198ac:	68bb      	ldr	r3, [r7, #8]
 80198ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80198b2:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SWAP_BANK) != 0U)
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d009      	beq.n	80198d2 <FLASH_OB_UserConfig+0x13e>
  {
    /* SWAP_BANK option byte should be modified */
    assert_param(IS_OB_USER_SWAP_BANK(UserConfig & FLASH_OPTR_SWAP_BANK));

    /* Set value and mask for SWAP_BANK option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SWAP_BANK);
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80198c4:	68fa      	ldr	r2, [r7, #12]
 80198c6:	4313      	orrs	r3, r2
 80198c8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SWAP_BANK;
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80198d0:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_DUALBANK) != 0U)
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d009      	beq.n	80198f0 <FLASH_OB_UserConfig+0x15c>
  {
    /* DUALBANK option byte should be modified */
    assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

    /* Set value and mask for DUALBANK option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80198e2:	68fa      	ldr	r2, [r7, #12]
 80198e4:	4313      	orrs	r3, r2
 80198e6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_DUALBANK;
 80198e8:	68bb      	ldr	r3, [r7, #8]
 80198ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80198ee:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_BKPRAM_ECC) != 0U)
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d009      	beq.n	801990e <FLASH_OB_UserConfig+0x17a>
  {
    /* BKPRAM_ECC option byte should be modified */
    assert_param(IS_OB_USER_BKPRAM_ECC(UserConfig & FLASH_OPTR_BKPRAM_ECC));

    /* Set value and mask for BKPRAM_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_BKPRAM_ECC);
 80198fa:	683b      	ldr	r3, [r7, #0]
 80198fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019900:	68fa      	ldr	r2, [r7, #12]
 8019902:	4313      	orrs	r3, r2
 8019904:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_BKPRAM_ECC;
 8019906:	68bb      	ldr	r3, [r7, #8]
 8019908:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801990c:	60bb      	str	r3, [r7, #8]
  }
#if defined(SRAM3_BASE)
  if ((UserType & OB_USER_SRAM3_ECC) != 0U)
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019914:	2b00      	cmp	r3, #0
 8019916:	d009      	beq.n	801992c <FLASH_OB_UserConfig+0x198>
  {
    /* SRAM3_ECC option byte should be modified */
    assert_param(IS_OB_USER_SRAM3_ECC(UserConfig & FLASH_OPTR_SRAM3_ECC));

    /* Set value and mask for SRAM3_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM3_ECC);
 8019918:	683b      	ldr	r3, [r7, #0]
 801991a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801991e:	68fa      	ldr	r2, [r7, #12]
 8019920:	4313      	orrs	r3, r2
 8019922:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM3_ECC;
 8019924:	68bb      	ldr	r3, [r7, #8]
 8019926:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801992a:	60bb      	str	r3, [r7, #8]
  }
#endif /* SRAM3_BASE */
  if ((UserType & OB_USER_SRAM2_ECC) != 0U)
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019932:	2b00      	cmp	r3, #0
 8019934:	d009      	beq.n	801994a <FLASH_OB_UserConfig+0x1b6>
  {
    /* SRAM2_ECC option byte should be modified */
    assert_param(IS_OB_USER_SRAM2_ECC(UserConfig & FLASH_OPTR_SRAM2_ECC));

    /* Set value and mask for SRAM2_ECC option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_ECC);
 8019936:	683b      	ldr	r3, [r7, #0]
 8019938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801993c:	68fa      	ldr	r2, [r7, #12]
 801993e:	4313      	orrs	r3, r2
 8019940:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM2_ECC;
 8019942:	68bb      	ldr	r3, [r7, #8]
 8019944:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019948:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_SRAM2_RST) != 0U)
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019950:	2b00      	cmp	r3, #0
 8019952:	d009      	beq.n	8019968 <FLASH_OB_UserConfig+0x1d4>
  {
    /* SRAM2_RST option byte should be modified */
    assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

    /* Set value and mask for SRAM2_RST option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801995a:	68fa      	ldr	r2, [r7, #12]
 801995c:	4313      	orrs	r3, r2
 801995e:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8019966:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NSWBOOT0) != 0U)
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801996e:	2b00      	cmp	r3, #0
 8019970:	d009      	beq.n	8019986 <FLASH_OB_UserConfig+0x1f2>
  {
    /* nSWBOOT0 option byte should be modified */
    assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

    /* Set value and mask for nSWBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8019972:	683b      	ldr	r3, [r7, #0]
 8019974:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019978:	68fa      	ldr	r2, [r7, #12]
 801997a:	4313      	orrs	r3, r2
 801997c:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 801997e:	68bb      	ldr	r3, [r7, #8]
 8019980:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8019984:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_NBOOT0) != 0U)
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801998c:	2b00      	cmp	r3, #0
 801998e:	d009      	beq.n	80199a4 <FLASH_OB_UserConfig+0x210>
  {
    /* nBOOT0 option byte should be modified */
    assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

    /* Set value and mask for nBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019996:	68fa      	ldr	r2, [r7, #12]
 8019998:	4313      	orrs	r3, r2
 801999a:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_nBOOT0;
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80199a2:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_PA15_PUPEN) != 0U)
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d009      	beq.n	80199c2 <FLASH_OB_UserConfig+0x22e>
  {
    /* PA15_PUPEN option byte should be modified */
    assert_param(IS_OB_USER_PA15_PUPEN(UserConfig & FLASH_OPTR_PA15_PUPEN));

    /* Set value and mask for nBOOT0 option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_PA15_PUPEN);
 80199ae:	683b      	ldr	r3, [r7, #0]
 80199b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80199b4:	68fa      	ldr	r2, [r7, #12]
 80199b6:	4313      	orrs	r3, r2
 80199b8:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_PA15_PUPEN;
 80199ba:	68bb      	ldr	r3, [r7, #8]
 80199bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80199c0:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IO_VDD_HSLV) != 0U)
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d009      	beq.n	80199e0 <FLASH_OB_UserConfig+0x24c>
  {
    /* IO_VDD_HSLV option byte should be modified */
    assert_param(IS_OB_USER_IO_VDD_HSLV(UserConfig & FLASH_OPTR_IO_VDD_HSLV));

    /* Set value and mask for IO_VDD_HSLV option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IO_VDD_HSLV);
 80199cc:	683b      	ldr	r3, [r7, #0]
 80199ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80199d2:	68fa      	ldr	r2, [r7, #12]
 80199d4:	4313      	orrs	r3, r2
 80199d6:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IO_VDD_HSLV;
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80199de:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_IO_VDDIO2_HSLV) != 0U)
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d009      	beq.n	80199fe <FLASH_OB_UserConfig+0x26a>
  {
    /* IO_VDDIO2_HSLV option byte should be modified */
    assert_param(IS_OB_USER_IO_VDDIO2_HSLV(UserConfig & FLASH_OPTR_IO_VDDIO2_HSLV));

    /* Set value and mask for IO_VDDIO2_HSLV option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_IO_VDDIO2_HSLV);
 80199ea:	683b      	ldr	r3, [r7, #0]
 80199ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80199f0:	68fa      	ldr	r2, [r7, #12]
 80199f2:	4313      	orrs	r3, r2
 80199f4:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_IO_VDDIO2_HSLV;
 80199f6:	68bb      	ldr	r3, [r7, #8]
 80199f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80199fc:	60bb      	str	r3, [r7, #8]
  }

  if ((UserType & OB_USER_TZEN) != 0U)
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d009      	beq.n	8019a1c <FLASH_OB_UserConfig+0x288>
  {
    /* TZEN option byte should be modified */
    assert_param(IS_OB_USER_TZEN(UserConfig & FLASH_OPTR_TZEN));

    /* Set value and mask for TZEN option byte */
    optr_reg_val |= (UserConfig & FLASH_OPTR_TZEN);
 8019a08:	683b      	ldr	r3, [r7, #0]
 8019a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8019a0e:	68fa      	ldr	r2, [r7, #12]
 8019a10:	4313      	orrs	r3, r2
 8019a12:	60fb      	str	r3, [r7, #12]
    optr_reg_mask |= FLASH_OPTR_TZEN;
 8019a14:	68bb      	ldr	r3, [r7, #8]
 8019a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019a1a:	60bb      	str	r3, [r7, #8]
  }

  /* Configure the option bytes register */
  MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8019a1c:	4b07      	ldr	r3, [pc, #28]	@ (8019a3c <FLASH_OB_UserConfig+0x2a8>)
 8019a1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	43db      	mvns	r3, r3
 8019a24:	401a      	ands	r2, r3
 8019a26:	4905      	ldr	r1, [pc, #20]	@ (8019a3c <FLASH_OB_UserConfig+0x2a8>)
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	4313      	orrs	r3, r2
 8019a2c:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8019a2e:	bf00      	nop
 8019a30:	3714      	adds	r7, #20
 8019a32:	46bd      	mov	sp, r7
 8019a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a38:	4770      	bx	lr
 8019a3a:	bf00      	nop
 8019a3c:	40022000 	.word	0x40022000

08019a40 <FLASH_OB_BootAddrConfig>:
  *          This parameter can be page number between 0 and 0xFFFFFF00
  *
  * @retval None
  */
static void FLASH_OB_BootAddrConfig(uint32_t BootAddrConfig, uint32_t BootAddr)
{
 8019a40:	b480      	push	{r7}
 8019a42:	b083      	sub	sp, #12
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	6078      	str	r0, [r7, #4]
 8019a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_OB_BOOTADDR_CONFIG(BootAddrConfig));

  if (BootAddrConfig == OB_BOOTADDR_NS0)
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	2b01      	cmp	r3, #1
 8019a4e:	d103      	bne.n	8019a58 <FLASH_OB_BootAddrConfig+0x18>
  {
    FLASH->NSBOOTADD0R = BootAddr;
 8019a50:	4a07      	ldr	r2, [pc, #28]	@ (8019a70 <FLASH_OB_BootAddrConfig+0x30>)
 8019a52:	683b      	ldr	r3, [r7, #0]
 8019a54:	6453      	str	r3, [r2, #68]	@ 0x44
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8019a56:	e005      	b.n	8019a64 <FLASH_OB_BootAddrConfig+0x24>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	2b02      	cmp	r3, #2
 8019a5c:	d102      	bne.n	8019a64 <FLASH_OB_BootAddrConfig+0x24>
    FLASH->NSBOOTADD1R = BootAddr;
 8019a5e:	4a04      	ldr	r2, [pc, #16]	@ (8019a70 <FLASH_OB_BootAddrConfig+0x30>)
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8019a64:	bf00      	nop
 8019a66:	370c      	adds	r7, #12
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6e:	4770      	bx	lr
 8019a70:	40022000 	.word	0x40022000

08019a74 <FLASH_OB_GetWRP>:
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRPEndOffset,
                            FunctionalState *WRPLock)
{
 8019a74:	b480      	push	{r7}
 8019a76:	b085      	sub	sp, #20
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	60f8      	str	r0, [r7, #12]
 8019a7c:	60b9      	str	r1, [r7, #8]
 8019a7e:	607a      	str	r2, [r7, #4]
 8019a80:	603b      	str	r3, [r7, #0]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	2b01      	cmp	r3, #1
 8019a86:	d115      	bne.n	8019ab4 <FLASH_OB_GetWRP+0x40>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PSTRT);
 8019a88:	4b32      	ldr	r3, [pc, #200]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019a90:	68bb      	ldr	r3, [r7, #8]
 8019a92:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_PEND) >> FLASH_WRP1AR_WRP1A_PEND_Pos);
 8019a94:	4b2f      	ldr	r3, [pc, #188]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019a98:	0c1b      	lsrs	r3, r3, #16
 8019a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8019aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019aa6:	43db      	mvns	r3, r3
 8019aa8:	0fdb      	lsrs	r3, r3, #31
 8019aaa:	b2db      	uxtb	r3, r3
 8019aac:	461a      	mov	r2, r3
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8019ab2:	e049      	b.n	8019b48 <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	2b02      	cmp	r3, #2
 8019ab8:	d115      	bne.n	8019ae6 <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PSTRT);
 8019aba:	4b26      	ldr	r3, [pc, #152]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019abe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_PEND) >> FLASH_WRP1BR_WRP1B_PEND_Pos);
 8019ac6:	4b23      	ldr	r3, [pc, #140]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019aca:	0c1b      	lsrs	r3, r3, #16
 8019acc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8019ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019ad8:	43db      	mvns	r3, r3
 8019ada:	0fdb      	lsrs	r3, r3, #31
 8019adc:	b2db      	uxtb	r3, r3
 8019ade:	461a      	mov	r2, r3
 8019ae0:	683b      	ldr	r3, [r7, #0]
 8019ae2:	701a      	strb	r2, [r3, #0]
}
 8019ae4:	e030      	b.n	8019b48 <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	2b04      	cmp	r3, #4
 8019aea:	d115      	bne.n	8019b18 <FLASH_OB_GetWRP+0xa4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PSTRT);
 8019aec:	4b19      	ldr	r3, [pc, #100]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019aee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019af0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_PEND) >> FLASH_WRP2AR_WRP2A_PEND_Pos);
 8019af8:	4b16      	ldr	r3, [pc, #88]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019afc:	0c1b      	lsrs	r3, r3, #16
 8019afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8019b06:	4b13      	ldr	r3, [pc, #76]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019b0a:	43db      	mvns	r3, r3
 8019b0c:	0fdb      	lsrs	r3, r3, #31
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	461a      	mov	r2, r3
 8019b12:	683b      	ldr	r3, [r7, #0]
 8019b14:	701a      	strb	r2, [r3, #0]
}
 8019b16:	e017      	b.n	8019b48 <FLASH_OB_GetWRP+0xd4>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	2b08      	cmp	r3, #8
 8019b1c:	d114      	bne.n	8019b48 <FLASH_OB_GetWRP+0xd4>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PSTRT);
 8019b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019b26:	68bb      	ldr	r3, [r7, #8]
 8019b28:	601a      	str	r2, [r3, #0]
    *WRPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_PEND) >> FLASH_WRP2BR_WRP2B_PEND_Pos);
 8019b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b2e:	0c1b      	lsrs	r3, r3, #16
 8019b30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	601a      	str	r2, [r3, #0]
    *WRPLock = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_UNLOCK) != 0U) ? DISABLE : ENABLE;
 8019b38:	4b06      	ldr	r3, [pc, #24]	@ (8019b54 <FLASH_OB_GetWRP+0xe0>)
 8019b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b3c:	43db      	mvns	r3, r3
 8019b3e:	0fdb      	lsrs	r3, r3, #31
 8019b40:	b2db      	uxtb	r3, r3
 8019b42:	461a      	mov	r2, r3
 8019b44:	683b      	ldr	r3, [r7, #0]
 8019b46:	701a      	strb	r2, [r3, #0]
}
 8019b48:	bf00      	nop
 8019b4a:	3714      	adds	r7, #20
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b52:	4770      	bx	lr
 8019b54:	40022000 	.word	0x40022000

08019b58 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0_5: No debug access to secure area
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8019b58:	b480      	push	{r7}
 8019b5a:	b083      	sub	sp, #12
 8019b5c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8019b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8019b8c <FLASH_OB_GetRDP+0x34>)
 8019b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019b62:	b2db      	uxtb	r3, r3
 8019b64:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_0_5) && (rdp_level != OB_RDP_LEVEL_2))
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	2baa      	cmp	r3, #170	@ 0xaa
 8019b6a:	d007      	beq.n	8019b7c <FLASH_OB_GetRDP+0x24>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	2b55      	cmp	r3, #85	@ 0x55
 8019b70:	d004      	beq.n	8019b7c <FLASH_OB_GetRDP+0x24>
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	2bcc      	cmp	r3, #204	@ 0xcc
 8019b76:	d001      	beq.n	8019b7c <FLASH_OB_GetRDP+0x24>
  {
    return (OB_RDP_LEVEL_1);
 8019b78:	23bb      	movs	r3, #187	@ 0xbb
 8019b7a:	e000      	b.n	8019b7e <FLASH_OB_GetRDP+0x26>
  }
  else
  {
    return rdp_level;
 8019b7c:	687b      	ldr	r3, [r7, #4]
  }
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	370c      	adds	r7, #12
 8019b82:	46bd      	mov	sp, r7
 8019b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b88:	4770      	bx	lr
 8019b8a:	bf00      	nop
 8019b8c:	40022000 	.word	0x40022000

08019b90 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_nSWBOOT0, @ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_PA15_PUPEN, @ref FLASH_OB_USER_IO_VDD_HSLV,
  *         @ref FLASH_OB_USER_IO_VDDIO2_HSLV and @ref OB_USER_TZEN
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8019b90:	b480      	push	{r7}
 8019b92:	b083      	sub	sp, #12
 8019b94:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8019b96:	4b07      	ldr	r3, [pc, #28]	@ (8019bb4 <FLASH_OB_GetUser+0x24>)
 8019b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019b9a:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019ba2:	607b      	str	r3, [r7, #4]

  return user_config;
 8019ba4:	687b      	ldr	r3, [r7, #4]
}
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	370c      	adds	r7, #12
 8019baa:	46bd      	mov	sp, r7
 8019bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb0:	4770      	bx	lr
 8019bb2:	bf00      	nop
 8019bb4:	40022000 	.word	0x40022000

08019bb8 <FLASH_OB_GetBootAddr>:
  * @param[out]  BootAddr specifies the boot address value
  *
  * @retval None
  */
static void FLASH_OB_GetBootAddr(uint32_t BootAddrConfig, uint32_t *BootAddr)
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b083      	sub	sp, #12
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	6039      	str	r1, [r7, #0]
  if (BootAddrConfig == OB_BOOTADDR_NS0)
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	2b01      	cmp	r3, #1
 8019bc6:	d106      	bne.n	8019bd6 <FLASH_OB_GetBootAddr+0x1e>
  {
    *BootAddr = (FLASH->NSBOOTADD0R & FLASH_NSBOOTADD0R_NSBOOTADD0);
 8019bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8019bf4 <FLASH_OB_GetBootAddr+0x3c>)
 8019bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019bcc:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	601a      	str	r2, [r3, #0]
#endif /* __ARM_FEATURE_CMSE */
  else
  {
    /* Empty statement (to be compliant MISRA 15.7) */
  }
}
 8019bd4:	e008      	b.n	8019be8 <FLASH_OB_GetBootAddr+0x30>
  else if (BootAddrConfig == OB_BOOTADDR_NS1)
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	2b02      	cmp	r3, #2
 8019bda:	d105      	bne.n	8019be8 <FLASH_OB_GetBootAddr+0x30>
    *BootAddr = (FLASH->NSBOOTADD1R & FLASH_NSBOOTADD1R_NSBOOTADD1);
 8019bdc:	4b05      	ldr	r3, [pc, #20]	@ (8019bf4 <FLASH_OB_GetBootAddr+0x3c>)
 8019bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019be0:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8019be4:	683b      	ldr	r3, [r7, #0]
 8019be6:	601a      	str	r2, [r3, #0]
}
 8019be8:	bf00      	nop
 8019bea:	370c      	adds	r7, #12
 8019bec:	46bd      	mov	sp, r7
 8019bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf2:	4770      	bx	lr
 8019bf4:	40022000 	.word	0x40022000

08019bf8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8019bf8:	b480      	push	{r7}
 8019bfa:	b089      	sub	sp, #36	@ 0x24
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
 8019c00:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8019c02:	2300      	movs	r3, #0
 8019c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8019c0a:	e1ba      	b.n	8019f82 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8019c0c:	683b      	ldr	r3, [r7, #0]
 8019c0e:	681a      	ldr	r2, [r3, #0]
 8019c10:	2101      	movs	r1, #1
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	fa01 f303 	lsl.w	r3, r1, r3
 8019c18:	4013      	ands	r3, r2
 8019c1a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8019c1c:	697b      	ldr	r3, [r7, #20]
 8019c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	f000 81aa 	beq.w	8019f7c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	4a55      	ldr	r2, [pc, #340]	@ (8019d80 <HAL_GPIO_Init+0x188>)
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	d15d      	bne.n	8019cec <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8019c36:	2201      	movs	r2, #1
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8019c3e:	43db      	mvns	r3, r3
 8019c40:	69fa      	ldr	r2, [r7, #28]
 8019c42:	4013      	ands	r3, r2
 8019c44:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	685b      	ldr	r3, [r3, #4]
 8019c4a:	f003 0201 	and.w	r2, r3, #1
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	fa02 f303 	lsl.w	r3, r2, r3
 8019c54:	69fa      	ldr	r2, [r7, #28]
 8019c56:	4313      	orrs	r3, r2
 8019c58:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	69fa      	ldr	r2, [r7, #28]
 8019c5e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8019c60:	4a48      	ldr	r2, [pc, #288]	@ (8019d84 <HAL_GPIO_Init+0x18c>)
 8019c62:	697b      	ldr	r3, [r7, #20]
 8019c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019c68:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8019c6a:	4a46      	ldr	r2, [pc, #280]	@ (8019d84 <HAL_GPIO_Init+0x18c>)
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	00db      	lsls	r3, r3, #3
 8019c70:	4413      	add	r3, r2
 8019c72:	685b      	ldr	r3, [r3, #4]
 8019c74:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8019c76:	69bb      	ldr	r3, [r7, #24]
 8019c78:	08da      	lsrs	r2, r3, #3
 8019c7a:	693b      	ldr	r3, [r7, #16]
 8019c7c:	3208      	adds	r2, #8
 8019c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c82:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8019c84:	69bb      	ldr	r3, [r7, #24]
 8019c86:	f003 0307 	and.w	r3, r3, #7
 8019c8a:	009b      	lsls	r3, r3, #2
 8019c8c:	220f      	movs	r2, #15
 8019c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8019c92:	43db      	mvns	r3, r3
 8019c94:	69fa      	ldr	r2, [r7, #28]
 8019c96:	4013      	ands	r3, r2
 8019c98:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8019c9a:	69bb      	ldr	r3, [r7, #24]
 8019c9c:	f003 0307 	and.w	r3, r3, #7
 8019ca0:	009b      	lsls	r3, r3, #2
 8019ca2:	220b      	movs	r2, #11
 8019ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8019ca8:	69fa      	ldr	r2, [r7, #28]
 8019caa:	4313      	orrs	r3, r2
 8019cac:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8019cae:	69bb      	ldr	r3, [r7, #24]
 8019cb0:	08da      	lsrs	r2, r3, #3
 8019cb2:	693b      	ldr	r3, [r7, #16]
 8019cb4:	3208      	adds	r2, #8
 8019cb6:	69f9      	ldr	r1, [r7, #28]
 8019cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	005b      	lsls	r3, r3, #1
 8019cc6:	2203      	movs	r2, #3
 8019cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8019ccc:	43db      	mvns	r3, r3
 8019cce:	69fa      	ldr	r2, [r7, #28]
 8019cd0:	4013      	ands	r3, r2
 8019cd2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8019cd4:	69bb      	ldr	r3, [r7, #24]
 8019cd6:	005b      	lsls	r3, r3, #1
 8019cd8:	2202      	movs	r2, #2
 8019cda:	fa02 f303 	lsl.w	r3, r2, r3
 8019cde:	69fa      	ldr	r2, [r7, #28]
 8019ce0:	4313      	orrs	r3, r2
 8019ce2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	69fa      	ldr	r2, [r7, #28]
 8019ce8:	601a      	str	r2, [r3, #0]
 8019cea:	e067      	b.n	8019dbc <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8019cec:	683b      	ldr	r3, [r7, #0]
 8019cee:	685b      	ldr	r3, [r3, #4]
 8019cf0:	2b02      	cmp	r3, #2
 8019cf2:	d003      	beq.n	8019cfc <HAL_GPIO_Init+0x104>
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	2b12      	cmp	r3, #18
 8019cfa:	d145      	bne.n	8019d88 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8019cfc:	697b      	ldr	r3, [r7, #20]
 8019cfe:	08da      	lsrs	r2, r3, #3
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	3208      	adds	r2, #8
 8019d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019d08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8019d0a:	697b      	ldr	r3, [r7, #20]
 8019d0c:	f003 0307 	and.w	r3, r3, #7
 8019d10:	009b      	lsls	r3, r3, #2
 8019d12:	220f      	movs	r2, #15
 8019d14:	fa02 f303 	lsl.w	r3, r2, r3
 8019d18:	43db      	mvns	r3, r3
 8019d1a:	69fa      	ldr	r2, [r7, #28]
 8019d1c:	4013      	ands	r3, r2
 8019d1e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	691b      	ldr	r3, [r3, #16]
 8019d24:	f003 020f 	and.w	r2, r3, #15
 8019d28:	697b      	ldr	r3, [r7, #20]
 8019d2a:	f003 0307 	and.w	r3, r3, #7
 8019d2e:	009b      	lsls	r3, r3, #2
 8019d30:	fa02 f303 	lsl.w	r3, r2, r3
 8019d34:	69fa      	ldr	r2, [r7, #28]
 8019d36:	4313      	orrs	r3, r2
 8019d38:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8019d3a:	697b      	ldr	r3, [r7, #20]
 8019d3c:	08da      	lsrs	r2, r3, #3
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	3208      	adds	r2, #8
 8019d42:	69f9      	ldr	r1, [r7, #28]
 8019d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8019d48:	693b      	ldr	r3, [r7, #16]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8019d4e:	69bb      	ldr	r3, [r7, #24]
 8019d50:	005b      	lsls	r3, r3, #1
 8019d52:	2203      	movs	r2, #3
 8019d54:	fa02 f303 	lsl.w	r3, r2, r3
 8019d58:	43db      	mvns	r3, r3
 8019d5a:	69fa      	ldr	r2, [r7, #28]
 8019d5c:	4013      	ands	r3, r2
 8019d5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8019d60:	683b      	ldr	r3, [r7, #0]
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	f003 0203 	and.w	r2, r3, #3
 8019d68:	69bb      	ldr	r3, [r7, #24]
 8019d6a:	005b      	lsls	r3, r3, #1
 8019d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8019d70:	69fa      	ldr	r2, [r7, #28]
 8019d72:	4313      	orrs	r3, r2
 8019d74:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	69fa      	ldr	r2, [r7, #28]
 8019d7a:	601a      	str	r2, [r3, #0]
 8019d7c:	e01e      	b.n	8019dbc <HAL_GPIO_Init+0x1c4>
 8019d7e:	bf00      	nop
 8019d80:	46020000 	.word	0x46020000
 8019d84:	080301f8 	.word	0x080301f8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8019d88:	693b      	ldr	r3, [r7, #16]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8019d8e:	69bb      	ldr	r3, [r7, #24]
 8019d90:	005b      	lsls	r3, r3, #1
 8019d92:	2203      	movs	r2, #3
 8019d94:	fa02 f303 	lsl.w	r3, r2, r3
 8019d98:	43db      	mvns	r3, r3
 8019d9a:	69fa      	ldr	r2, [r7, #28]
 8019d9c:	4013      	ands	r3, r2
 8019d9e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	685b      	ldr	r3, [r3, #4]
 8019da4:	f003 0203 	and.w	r2, r3, #3
 8019da8:	69bb      	ldr	r3, [r7, #24]
 8019daa:	005b      	lsls	r3, r3, #1
 8019dac:	fa02 f303 	lsl.w	r3, r2, r3
 8019db0:	69fa      	ldr	r2, [r7, #28]
 8019db2:	4313      	orrs	r3, r2
 8019db4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8019db6:	693b      	ldr	r3, [r7, #16]
 8019db8:	69fa      	ldr	r2, [r7, #28]
 8019dba:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8019dbc:	683b      	ldr	r3, [r7, #0]
 8019dbe:	685b      	ldr	r3, [r3, #4]
 8019dc0:	2b01      	cmp	r3, #1
 8019dc2:	d00b      	beq.n	8019ddc <HAL_GPIO_Init+0x1e4>
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	685b      	ldr	r3, [r3, #4]
 8019dc8:	2b02      	cmp	r3, #2
 8019dca:	d007      	beq.n	8019ddc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8019dd0:	2b11      	cmp	r3, #17
 8019dd2:	d003      	beq.n	8019ddc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	685b      	ldr	r3, [r3, #4]
 8019dd8:	2b12      	cmp	r3, #18
 8019dda:	d130      	bne.n	8019e3e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8019ddc:	693b      	ldr	r3, [r7, #16]
 8019dde:	689b      	ldr	r3, [r3, #8]
 8019de0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8019de2:	69bb      	ldr	r3, [r7, #24]
 8019de4:	005b      	lsls	r3, r3, #1
 8019de6:	2203      	movs	r2, #3
 8019de8:	fa02 f303 	lsl.w	r3, r2, r3
 8019dec:	43db      	mvns	r3, r3
 8019dee:	69fa      	ldr	r2, [r7, #28]
 8019df0:	4013      	ands	r3, r2
 8019df2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8019df4:	683b      	ldr	r3, [r7, #0]
 8019df6:	68da      	ldr	r2, [r3, #12]
 8019df8:	69bb      	ldr	r3, [r7, #24]
 8019dfa:	005b      	lsls	r3, r3, #1
 8019dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8019e00:	69fa      	ldr	r2, [r7, #28]
 8019e02:	4313      	orrs	r3, r2
 8019e04:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	69fa      	ldr	r2, [r7, #28]
 8019e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8019e0c:	693b      	ldr	r3, [r7, #16]
 8019e0e:	685b      	ldr	r3, [r3, #4]
 8019e10:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8019e12:	2201      	movs	r2, #1
 8019e14:	69bb      	ldr	r3, [r7, #24]
 8019e16:	fa02 f303 	lsl.w	r3, r2, r3
 8019e1a:	43db      	mvns	r3, r3
 8019e1c:	69fa      	ldr	r2, [r7, #28]
 8019e1e:	4013      	ands	r3, r2
 8019e20:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	685b      	ldr	r3, [r3, #4]
 8019e26:	091b      	lsrs	r3, r3, #4
 8019e28:	f003 0201 	and.w	r2, r3, #1
 8019e2c:	69bb      	ldr	r3, [r7, #24]
 8019e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8019e32:	69fa      	ldr	r2, [r7, #28]
 8019e34:	4313      	orrs	r3, r2
 8019e36:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8019e38:	693b      	ldr	r3, [r7, #16]
 8019e3a:	69fa      	ldr	r2, [r7, #28]
 8019e3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	685b      	ldr	r3, [r3, #4]
 8019e42:	2b03      	cmp	r3, #3
 8019e44:	d017      	beq.n	8019e76 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	68db      	ldr	r3, [r3, #12]
 8019e4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8019e4c:	69bb      	ldr	r3, [r7, #24]
 8019e4e:	005b      	lsls	r3, r3, #1
 8019e50:	2203      	movs	r2, #3
 8019e52:	fa02 f303 	lsl.w	r3, r2, r3
 8019e56:	43db      	mvns	r3, r3
 8019e58:	69fa      	ldr	r2, [r7, #28]
 8019e5a:	4013      	ands	r3, r2
 8019e5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	689a      	ldr	r2, [r3, #8]
 8019e62:	69bb      	ldr	r3, [r7, #24]
 8019e64:	005b      	lsls	r3, r3, #1
 8019e66:	fa02 f303 	lsl.w	r3, r2, r3
 8019e6a:	69fa      	ldr	r2, [r7, #28]
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8019e70:	693b      	ldr	r3, [r7, #16]
 8019e72:	69fa      	ldr	r2, [r7, #28]
 8019e74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8019e76:	683b      	ldr	r3, [r7, #0]
 8019e78:	685b      	ldr	r3, [r3, #4]
 8019e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d07c      	beq.n	8019f7c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8019e82:	4a47      	ldr	r2, [pc, #284]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	089b      	lsrs	r3, r3, #2
 8019e88:	3318      	adds	r3, #24
 8019e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8019e90:	697b      	ldr	r3, [r7, #20]
 8019e92:	f003 0303 	and.w	r3, r3, #3
 8019e96:	00db      	lsls	r3, r3, #3
 8019e98:	220f      	movs	r2, #15
 8019e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8019e9e:	43db      	mvns	r3, r3
 8019ea0:	69fa      	ldr	r2, [r7, #28]
 8019ea2:	4013      	ands	r3, r2
 8019ea4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	0a9a      	lsrs	r2, r3, #10
 8019eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8019fa4 <HAL_GPIO_Init+0x3ac>)
 8019eac:	4013      	ands	r3, r2
 8019eae:	697a      	ldr	r2, [r7, #20]
 8019eb0:	f002 0203 	and.w	r2, r2, #3
 8019eb4:	00d2      	lsls	r2, r2, #3
 8019eb6:	4093      	lsls	r3, r2
 8019eb8:	69fa      	ldr	r2, [r7, #28]
 8019eba:	4313      	orrs	r3, r2
 8019ebc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8019ebe:	4938      	ldr	r1, [pc, #224]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019ec0:	697b      	ldr	r3, [r7, #20]
 8019ec2:	089b      	lsrs	r3, r3, #2
 8019ec4:	3318      	adds	r3, #24
 8019ec6:	69fa      	ldr	r2, [r7, #28]
 8019ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8019ecc:	4b34      	ldr	r3, [pc, #208]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	43db      	mvns	r3, r3
 8019ed6:	69fa      	ldr	r2, [r7, #28]
 8019ed8:	4013      	ands	r3, r2
 8019eda:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	685b      	ldr	r3, [r3, #4]
 8019ee0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d003      	beq.n	8019ef0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8019ee8:	69fa      	ldr	r2, [r7, #28]
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	4313      	orrs	r3, r2
 8019eee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8019ef0:	4a2b      	ldr	r2, [pc, #172]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019ef2:	69fb      	ldr	r3, [r7, #28]
 8019ef4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8019ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019ef8:	685b      	ldr	r3, [r3, #4]
 8019efa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	43db      	mvns	r3, r3
 8019f00:	69fa      	ldr	r2, [r7, #28]
 8019f02:	4013      	ands	r3, r2
 8019f04:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8019f06:	683b      	ldr	r3, [r7, #0]
 8019f08:	685b      	ldr	r3, [r3, #4]
 8019f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d003      	beq.n	8019f1a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8019f12:	69fa      	ldr	r2, [r7, #28]
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	4313      	orrs	r3, r2
 8019f18:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8019f1a:	4a21      	ldr	r2, [pc, #132]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019f1c:	69fb      	ldr	r3, [r7, #28]
 8019f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8019f20:	4b1f      	ldr	r3, [pc, #124]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8019f26:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	43db      	mvns	r3, r3
 8019f2c:	69fa      	ldr	r2, [r7, #28]
 8019f2e:	4013      	ands	r3, r2
 8019f30:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	685b      	ldr	r3, [r3, #4]
 8019f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d003      	beq.n	8019f46 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8019f3e:	69fa      	ldr	r2, [r7, #28]
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	4313      	orrs	r3, r2
 8019f44:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8019f46:	4a16      	ldr	r2, [pc, #88]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019f48:	69fb      	ldr	r3, [r7, #28]
 8019f4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8019f4e:	4b14      	ldr	r3, [pc, #80]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019f54:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	43db      	mvns	r3, r3
 8019f5a:	69fa      	ldr	r2, [r7, #28]
 8019f5c:	4013      	ands	r3, r2
 8019f5e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8019f60:	683b      	ldr	r3, [r7, #0]
 8019f62:	685b      	ldr	r3, [r3, #4]
 8019f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d003      	beq.n	8019f74 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8019f6c:	69fa      	ldr	r2, [r7, #28]
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	4313      	orrs	r3, r2
 8019f72:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8019f74:	4a0a      	ldr	r2, [pc, #40]	@ (8019fa0 <HAL_GPIO_Init+0x3a8>)
 8019f76:	69fb      	ldr	r3, [r7, #28]
 8019f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8019f7c:	697b      	ldr	r3, [r7, #20]
 8019f7e:	3301      	adds	r3, #1
 8019f80:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8019f82:	683b      	ldr	r3, [r7, #0]
 8019f84:	681a      	ldr	r2, [r3, #0]
 8019f86:	697b      	ldr	r3, [r7, #20]
 8019f88:	fa22 f303 	lsr.w	r3, r2, r3
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	f47f ae3d 	bne.w	8019c0c <HAL_GPIO_Init+0x14>
  }
}
 8019f92:	bf00      	nop
 8019f94:	bf00      	nop
 8019f96:	3724      	adds	r7, #36	@ 0x24
 8019f98:	46bd      	mov	sp, r7
 8019f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f9e:	4770      	bx	lr
 8019fa0:	46022000 	.word	0x46022000
 8019fa4:	002f7f7f 	.word	0x002f7f7f

08019fa8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8019fa8:	b480      	push	{r7}
 8019faa:	b089      	sub	sp, #36	@ 0x24
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8019fba:	e0bc      	b.n	801a136 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8019fbc:	2201      	movs	r2, #1
 8019fbe:	69bb      	ldr	r3, [r7, #24]
 8019fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8019fc4:	683a      	ldr	r2, [r7, #0]
 8019fc6:	4013      	ands	r3, r2
 8019fc8:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8019fca:	69bb      	ldr	r3, [r7, #24]
 8019fcc:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8019fce:	693b      	ldr	r3, [r7, #16]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	f000 80ad 	beq.w	801a130 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	4a5e      	ldr	r2, [pc, #376]	@ (801a154 <HAL_GPIO_DeInit+0x1ac>)
 8019fda:	4293      	cmp	r3, r2
 8019fdc:	d115      	bne.n	801a00a <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8019fde:	4a5e      	ldr	r2, [pc, #376]	@ (801a158 <HAL_GPIO_DeInit+0x1b0>)
 8019fe0:	69fb      	ldr	r3, [r7, #28]
 8019fe2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019fe6:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8019fe8:	4a5b      	ldr	r2, [pc, #364]	@ (801a158 <HAL_GPIO_DeInit+0x1b0>)
 8019fea:	69bb      	ldr	r3, [r7, #24]
 8019fec:	00db      	lsls	r3, r3, #3
 8019fee:	4413      	add	r3, r2
 8019ff0:	685b      	ldr	r3, [r3, #4]
 8019ff2:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8019ff4:	4b57      	ldr	r3, [pc, #348]	@ (801a154 <HAL_GPIO_DeInit+0x1ac>)
 8019ff6:	681a      	ldr	r2, [r3, #0]
 8019ff8:	2101      	movs	r1, #1
 8019ffa:	69fb      	ldr	r3, [r7, #28]
 8019ffc:	fa01 f303 	lsl.w	r3, r1, r3
 801a000:	43db      	mvns	r3, r3
 801a002:	4954      	ldr	r1, [pc, #336]	@ (801a154 <HAL_GPIO_DeInit+0x1ac>)
 801a004:	4013      	ands	r3, r2
 801a006:	600b      	str	r3, [r1, #0]
 801a008:	e053      	b.n	801a0b2 <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 801a00a:	4a54      	ldr	r2, [pc, #336]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a00c:	69bb      	ldr	r3, [r7, #24]
 801a00e:	089b      	lsrs	r3, r3, #2
 801a010:	3318      	adds	r3, #24
 801a012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a016:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 801a018:	69bb      	ldr	r3, [r7, #24]
 801a01a:	f003 0303 	and.w	r3, r3, #3
 801a01e:	00db      	lsls	r3, r3, #3
 801a020:	220f      	movs	r2, #15
 801a022:	fa02 f303 	lsl.w	r3, r2, r3
 801a026:	68fa      	ldr	r2, [r7, #12]
 801a028:	4013      	ands	r3, r2
 801a02a:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 801a02c:	687b      	ldr	r3, [r7, #4]
 801a02e:	0a9a      	lsrs	r2, r3, #10
 801a030:	4b4b      	ldr	r3, [pc, #300]	@ (801a160 <HAL_GPIO_DeInit+0x1b8>)
 801a032:	4013      	ands	r3, r2
 801a034:	69ba      	ldr	r2, [r7, #24]
 801a036:	f002 0203 	and.w	r2, r2, #3
 801a03a:	00d2      	lsls	r2, r2, #3
 801a03c:	4093      	lsls	r3, r2
 801a03e:	68fa      	ldr	r2, [r7, #12]
 801a040:	429a      	cmp	r2, r3
 801a042:	d136      	bne.n	801a0b2 <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 801a044:	4b45      	ldr	r3, [pc, #276]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a046:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	43db      	mvns	r3, r3
 801a04e:	4943      	ldr	r1, [pc, #268]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a050:	4013      	ands	r3, r2
 801a052:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
          EXTI->EMR1 &= ~(iocurrent);
 801a056:	4b41      	ldr	r3, [pc, #260]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a058:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801a05c:	693b      	ldr	r3, [r7, #16]
 801a05e:	43db      	mvns	r3, r3
 801a060:	493e      	ldr	r1, [pc, #248]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a062:	4013      	ands	r3, r2
 801a064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 801a068:	4b3c      	ldr	r3, [pc, #240]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	693b      	ldr	r3, [r7, #16]
 801a06e:	43db      	mvns	r3, r3
 801a070:	493a      	ldr	r1, [pc, #232]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a072:	4013      	ands	r3, r2
 801a074:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 801a076:	4b39      	ldr	r3, [pc, #228]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a078:	685a      	ldr	r2, [r3, #4]
 801a07a:	693b      	ldr	r3, [r7, #16]
 801a07c:	43db      	mvns	r3, r3
 801a07e:	4937      	ldr	r1, [pc, #220]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a080:	4013      	ands	r3, r2
 801a082:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 801a084:	69bb      	ldr	r3, [r7, #24]
 801a086:	f003 0303 	and.w	r3, r3, #3
 801a08a:	00db      	lsls	r3, r3, #3
 801a08c:	220f      	movs	r2, #15
 801a08e:	fa02 f303 	lsl.w	r3, r2, r3
 801a092:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 801a094:	4a31      	ldr	r2, [pc, #196]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a096:	69bb      	ldr	r3, [r7, #24]
 801a098:	089b      	lsrs	r3, r3, #2
 801a09a:	3318      	adds	r3, #24
 801a09c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	43da      	mvns	r2, r3
 801a0a4:	482d      	ldr	r0, [pc, #180]	@ (801a15c <HAL_GPIO_DeInit+0x1b4>)
 801a0a6:	69bb      	ldr	r3, [r7, #24]
 801a0a8:	089b      	lsrs	r3, r3, #2
 801a0aa:	400a      	ands	r2, r1
 801a0ac:	3318      	adds	r3, #24
 801a0ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	681a      	ldr	r2, [r3, #0]
 801a0b6:	69fb      	ldr	r3, [r7, #28]
 801a0b8:	005b      	lsls	r3, r3, #1
 801a0ba:	2103      	movs	r1, #3
 801a0bc:	fa01 f303 	lsl.w	r3, r1, r3
 801a0c0:	431a      	orrs	r2, r3
 801a0c2:	697b      	ldr	r3, [r7, #20]
 801a0c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 801a0c6:	69fb      	ldr	r3, [r7, #28]
 801a0c8:	08da      	lsrs	r2, r3, #3
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	3208      	adds	r2, #8
 801a0ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a0d2:	69fb      	ldr	r3, [r7, #28]
 801a0d4:	f003 0307 	and.w	r3, r3, #7
 801a0d8:	009b      	lsls	r3, r3, #2
 801a0da:	220f      	movs	r2, #15
 801a0dc:	fa02 f303 	lsl.w	r3, r2, r3
 801a0e0:	43db      	mvns	r3, r3
 801a0e2:	69fa      	ldr	r2, [r7, #28]
 801a0e4:	08d2      	lsrs	r2, r2, #3
 801a0e6:	4019      	ands	r1, r3
 801a0e8:	697b      	ldr	r3, [r7, #20]
 801a0ea:	3208      	adds	r2, #8
 801a0ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 801a0f0:	697b      	ldr	r3, [r7, #20]
 801a0f2:	689a      	ldr	r2, [r3, #8]
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	005b      	lsls	r3, r3, #1
 801a0f8:	2103      	movs	r1, #3
 801a0fa:	fa01 f303 	lsl.w	r3, r1, r3
 801a0fe:	43db      	mvns	r3, r3
 801a100:	401a      	ands	r2, r3
 801a102:	697b      	ldr	r3, [r7, #20]
 801a104:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 801a106:	697b      	ldr	r3, [r7, #20]
 801a108:	685a      	ldr	r2, [r3, #4]
 801a10a:	2101      	movs	r1, #1
 801a10c:	69fb      	ldr	r3, [r7, #28]
 801a10e:	fa01 f303 	lsl.w	r3, r1, r3
 801a112:	43db      	mvns	r3, r3
 801a114:	401a      	ands	r2, r3
 801a116:	697b      	ldr	r3, [r7, #20]
 801a118:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 801a11a:	697b      	ldr	r3, [r7, #20]
 801a11c:	68da      	ldr	r2, [r3, #12]
 801a11e:	69fb      	ldr	r3, [r7, #28]
 801a120:	005b      	lsls	r3, r3, #1
 801a122:	2103      	movs	r1, #3
 801a124:	fa01 f303 	lsl.w	r3, r1, r3
 801a128:	43db      	mvns	r3, r3
 801a12a:	401a      	ands	r2, r3
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	60da      	str	r2, [r3, #12]
    }

    position++;
 801a130:	69bb      	ldr	r3, [r7, #24]
 801a132:	3301      	adds	r3, #1
 801a134:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 801a136:	683a      	ldr	r2, [r7, #0]
 801a138:	69bb      	ldr	r3, [r7, #24]
 801a13a:	fa22 f303 	lsr.w	r3, r2, r3
 801a13e:	2b00      	cmp	r3, #0
 801a140:	f47f af3c 	bne.w	8019fbc <HAL_GPIO_DeInit+0x14>
  }
}
 801a144:	bf00      	nop
 801a146:	bf00      	nop
 801a148:	3724      	adds	r7, #36	@ 0x24
 801a14a:	46bd      	mov	sp, r7
 801a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a150:	4770      	bx	lr
 801a152:	bf00      	nop
 801a154:	46020000 	.word	0x46020000
 801a158:	080301f8 	.word	0x080301f8
 801a15c:	46022000 	.word	0x46022000
 801a160:	002f7f7f 	.word	0x002f7f7f

0801a164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801a164:	b480      	push	{r7}
 801a166:	b085      	sub	sp, #20
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
 801a16c:	460b      	mov	r3, r1
 801a16e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	691a      	ldr	r2, [r3, #16]
 801a174:	887b      	ldrh	r3, [r7, #2]
 801a176:	4013      	ands	r3, r2
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d002      	beq.n	801a182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801a17c:	2301      	movs	r3, #1
 801a17e:	73fb      	strb	r3, [r7, #15]
 801a180:	e001      	b.n	801a186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801a182:	2300      	movs	r3, #0
 801a184:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 801a186:	7bfb      	ldrb	r3, [r7, #15]
}
 801a188:	4618      	mov	r0, r3
 801a18a:	3714      	adds	r7, #20
 801a18c:	46bd      	mov	sp, r7
 801a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a192:	4770      	bx	lr

0801a194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801a194:	b480      	push	{r7}
 801a196:	b083      	sub	sp, #12
 801a198:	af00      	add	r7, sp, #0
 801a19a:	6078      	str	r0, [r7, #4]
 801a19c:	460b      	mov	r3, r1
 801a19e:	807b      	strh	r3, [r7, #2]
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801a1a4:	787b      	ldrb	r3, [r7, #1]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d003      	beq.n	801a1b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801a1aa:	887a      	ldrh	r2, [r7, #2]
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 801a1b0:	e002      	b.n	801a1b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 801a1b2:	887a      	ldrh	r2, [r7, #2]
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 801a1b8:	bf00      	nop
 801a1ba:	370c      	adds	r7, #12
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1c2:	4770      	bx	lr

0801a1c4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801a1c4:	b480      	push	{r7}
 801a1c6:	b085      	sub	sp, #20
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	6078      	str	r0, [r7, #4]
 801a1cc:	460b      	mov	r3, r1
 801a1ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	695b      	ldr	r3, [r3, #20]
 801a1d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801a1d6:	887a      	ldrh	r2, [r7, #2]
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	4013      	ands	r3, r2
 801a1dc:	041a      	lsls	r2, r3, #16
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	43d9      	mvns	r1, r3
 801a1e2:	887b      	ldrh	r3, [r7, #2]
 801a1e4:	400b      	ands	r3, r1
 801a1e6:	431a      	orrs	r2, r3
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	619a      	str	r2, [r3, #24]
}
 801a1ec:	bf00      	nop
 801a1ee:	3714      	adds	r7, #20
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f6:	4770      	bx	lr

0801a1f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	4603      	mov	r3, r0
 801a200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 801a202:	4b0f      	ldr	r3, [pc, #60]	@ (801a240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 801a204:	68da      	ldr	r2, [r3, #12]
 801a206:	88fb      	ldrh	r3, [r7, #6]
 801a208:	4013      	ands	r3, r2
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d006      	beq.n	801a21c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 801a20e:	4a0c      	ldr	r2, [pc, #48]	@ (801a240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 801a210:	88fb      	ldrh	r3, [r7, #6]
 801a212:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 801a214:	88fb      	ldrh	r3, [r7, #6]
 801a216:	4618      	mov	r0, r3
 801a218:	f7f1 f9d6 	bl	800b5c8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 801a21c:	4b08      	ldr	r3, [pc, #32]	@ (801a240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 801a21e:	691a      	ldr	r2, [r3, #16]
 801a220:	88fb      	ldrh	r3, [r7, #6]
 801a222:	4013      	ands	r3, r2
 801a224:	2b00      	cmp	r3, #0
 801a226:	d006      	beq.n	801a236 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 801a228:	4a05      	ldr	r2, [pc, #20]	@ (801a240 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 801a22a:	88fb      	ldrh	r3, [r7, #6]
 801a22c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 801a22e:	88fb      	ldrh	r3, [r7, #6]
 801a230:	4618      	mov	r0, r3
 801a232:	f7f1 f9d4 	bl	800b5de <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 801a236:	bf00      	nop
 801a238:	3708      	adds	r7, #8
 801a23a:	46bd      	mov	sp, r7
 801a23c:	bd80      	pop	{r7, pc}
 801a23e:	bf00      	nop
 801a240:	46022000 	.word	0x46022000

0801a244 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 801a244:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a246:	b08f      	sub	sp, #60	@ 0x3c
 801a248:	af0a      	add	r7, sp, #40	@ 0x28
 801a24a:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d101      	bne.n	801a256 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 801a252:	2301      	movs	r3, #1
 801a254:	e054      	b.n	801a300 <HAL_HCD_Init+0xbc>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hhcd->Instance;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	60fb      	str	r3, [r7, #12]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	f893 33f9 	ldrb.w	r3, [r3, #1017]	@ 0x3f9
 801a262:	b2db      	uxtb	r3, r3
 801a264:	2b00      	cmp	r3, #0
 801a266:	d106      	bne.n	801a276 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2200      	movs	r2, #0
 801a26c:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 801a270:	6878      	ldr	r0, [r7, #4]
 801a272:	f7fb fe2b 	bl	8015ecc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	2203      	movs	r2, #3
 801a27a:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801a286:	2b00      	cmp	r3, #0
 801a288:	d102      	bne.n	801a290 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2200      	movs	r2, #0
 801a28e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	4618      	mov	r0, r3
 801a296:	f00a fe64 	bl	8024f62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	603b      	str	r3, [r7, #0]
 801a2a0:	687e      	ldr	r6, [r7, #4]
 801a2a2:	466d      	mov	r5, sp
 801a2a4:	f106 0410 	add.w	r4, r6, #16
 801a2a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a2ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a2b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a2b4:	e885 0003 	stmia.w	r5, {r0, r1}
 801a2b8:	1d33      	adds	r3, r6, #4
 801a2ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a2bc:	6838      	ldr	r0, [r7, #0]
 801a2be:	f00a fe24 	bl	8024f0a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	2101      	movs	r1, #1
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f00a fe5b 	bl	8024f84 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	603b      	str	r3, [r7, #0]
 801a2d4:	687e      	ldr	r6, [r7, #4]
 801a2d6:	466d      	mov	r5, sp
 801a2d8:	f106 0410 	add.w	r4, r6, #16
 801a2dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a2e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a2e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a2e8:	e885 0003 	stmia.w	r5, {r0, r1}
 801a2ec:	1d33      	adds	r3, r6, #4
 801a2ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a2f0:	6838      	ldr	r0, [r7, #0]
 801a2f2:	f00a ff39 	bl	8025168 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2201      	movs	r2, #1
 801a2fa:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9

  return HAL_OK;
 801a2fe:	2300      	movs	r3, #0
}
 801a300:	4618      	mov	r0, r3
 801a302:	3714      	adds	r7, #20
 801a304:	46bd      	mov	sp, r7
 801a306:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b082      	sub	sp, #8
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d101      	bne.n	801a31a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801a316:	2301      	movs	r3, #1
 801a318:	e08d      	b.n	801a436 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801a320:	b2db      	uxtb	r3, r3
 801a322:	2b00      	cmp	r3, #0
 801a324:	d106      	bne.n	801a334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	2200      	movs	r2, #0
 801a32a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f7fb fabc 	bl	80158ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	2224      	movs	r2, #36	@ 0x24
 801a338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	681a      	ldr	r2, [r3, #0]
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	f022 0201 	bic.w	r2, r2, #1
 801a34a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	685a      	ldr	r2, [r3, #4]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801a358:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	689a      	ldr	r2, [r3, #8]
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801a368:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	68db      	ldr	r3, [r3, #12]
 801a36e:	2b01      	cmp	r3, #1
 801a370:	d107      	bne.n	801a382 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	689a      	ldr	r2, [r3, #8]
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801a37e:	609a      	str	r2, [r3, #8]
 801a380:	e006      	b.n	801a390 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	689a      	ldr	r2, [r3, #8]
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801a38e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	68db      	ldr	r3, [r3, #12]
 801a394:	2b02      	cmp	r3, #2
 801a396:	d108      	bne.n	801a3aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	685a      	ldr	r2, [r3, #4]
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801a3a6:	605a      	str	r2, [r3, #4]
 801a3a8:	e007      	b.n	801a3ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	685a      	ldr	r2, [r3, #4]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801a3b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	685b      	ldr	r3, [r3, #4]
 801a3c0:	687a      	ldr	r2, [r7, #4]
 801a3c2:	6812      	ldr	r2, [r2, #0]
 801a3c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a3c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801a3cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	68da      	ldr	r2, [r3, #12]
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801a3dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	691a      	ldr	r2, [r3, #16]
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	695b      	ldr	r3, [r3, #20]
 801a3e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	699b      	ldr	r3, [r3, #24]
 801a3ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	430a      	orrs	r2, r1
 801a3f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	69d9      	ldr	r1, [r3, #28]
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	6a1a      	ldr	r2, [r3, #32]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	430a      	orrs	r2, r1
 801a406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	681a      	ldr	r2, [r3, #0]
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	f042 0201 	orr.w	r2, r2, #1
 801a416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	2200      	movs	r2, #0
 801a41c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	2220      	movs	r2, #32
 801a422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	2200      	movs	r2, #0
 801a42a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	2200      	movs	r2, #0
 801a430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801a434:	2300      	movs	r3, #0
}
 801a436:	4618      	mov	r0, r3
 801a438:	3708      	adds	r7, #8
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}
	...

0801a440 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b088      	sub	sp, #32
 801a444:	af02      	add	r7, sp, #8
 801a446:	60f8      	str	r0, [r7, #12]
 801a448:	607a      	str	r2, [r7, #4]
 801a44a:	461a      	mov	r2, r3
 801a44c:	460b      	mov	r3, r1
 801a44e:	817b      	strh	r3, [r7, #10]
 801a450:	4613      	mov	r3, r2
 801a452:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801a45a:	b2db      	uxtb	r3, r3
 801a45c:	2b20      	cmp	r3, #32
 801a45e:	f040 80da 	bne.w	801a616 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801a468:	2b01      	cmp	r3, #1
 801a46a:	d101      	bne.n	801a470 <HAL_I2C_Master_Transmit+0x30>
 801a46c:	2302      	movs	r3, #2
 801a46e:	e0d3      	b.n	801a618 <HAL_I2C_Master_Transmit+0x1d8>
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	2201      	movs	r2, #1
 801a474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801a478:	f7fb fff8 	bl	801646c <HAL_GetTick>
 801a47c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801a47e:	697b      	ldr	r3, [r7, #20]
 801a480:	9300      	str	r3, [sp, #0]
 801a482:	2319      	movs	r3, #25
 801a484:	2201      	movs	r2, #1
 801a486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801a48a:	68f8      	ldr	r0, [r7, #12]
 801a48c:	f000 faef 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a490:	4603      	mov	r3, r0
 801a492:	2b00      	cmp	r3, #0
 801a494:	d001      	beq.n	801a49a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 801a496:	2301      	movs	r3, #1
 801a498:	e0be      	b.n	801a618 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	2221      	movs	r2, #33	@ 0x21
 801a49e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	2210      	movs	r2, #16
 801a4a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	687a      	ldr	r2, [r7, #4]
 801a4b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	893a      	ldrh	r2, [r7, #8]
 801a4ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	2200      	movs	r2, #0
 801a4c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	2bff      	cmp	r3, #255	@ 0xff
 801a4ca:	d90e      	bls.n	801a4ea <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	22ff      	movs	r2, #255	@ 0xff
 801a4d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a4d6:	b2da      	uxtb	r2, r3
 801a4d8:	8979      	ldrh	r1, [r7, #10]
 801a4da:	4b51      	ldr	r3, [pc, #324]	@ (801a620 <HAL_I2C_Master_Transmit+0x1e0>)
 801a4dc:	9300      	str	r3, [sp, #0]
 801a4de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a4e2:	68f8      	ldr	r0, [r7, #12]
 801a4e4:	f000 fcfe 	bl	801aee4 <I2C_TransferConfig>
 801a4e8:	e06c      	b.n	801a5c4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a4f8:	b2da      	uxtb	r2, r3
 801a4fa:	8979      	ldrh	r1, [r7, #10]
 801a4fc:	4b48      	ldr	r3, [pc, #288]	@ (801a620 <HAL_I2C_Master_Transmit+0x1e0>)
 801a4fe:	9300      	str	r3, [sp, #0]
 801a500:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a504:	68f8      	ldr	r0, [r7, #12]
 801a506:	f000 fced 	bl	801aee4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 801a50a:	e05b      	b.n	801a5c4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a50c:	697a      	ldr	r2, [r7, #20]
 801a50e:	6a39      	ldr	r1, [r7, #32]
 801a510:	68f8      	ldr	r0, [r7, #12]
 801a512:	f000 fafb 	bl	801ab0c <I2C_WaitOnTXISFlagUntilTimeout>
 801a516:	4603      	mov	r3, r0
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d001      	beq.n	801a520 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 801a51c:	2301      	movs	r3, #1
 801a51e:	e07b      	b.n	801a618 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a524:	781a      	ldrb	r2, [r3, #0]
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a530:	1c5a      	adds	r2, r3, #1
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	3b01      	subs	r3, #1
 801a53e:	b29a      	uxth	r2, r3
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a548:	3b01      	subs	r3, #1
 801a54a:	b29a      	uxth	r2, r3
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a554:	b29b      	uxth	r3, r3
 801a556:	2b00      	cmp	r3, #0
 801a558:	d034      	beq.n	801a5c4 <HAL_I2C_Master_Transmit+0x184>
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d130      	bne.n	801a5c4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801a562:	697b      	ldr	r3, [r7, #20]
 801a564:	9300      	str	r3, [sp, #0]
 801a566:	6a3b      	ldr	r3, [r7, #32]
 801a568:	2200      	movs	r2, #0
 801a56a:	2180      	movs	r1, #128	@ 0x80
 801a56c:	68f8      	ldr	r0, [r7, #12]
 801a56e:	f000 fa7e 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a572:	4603      	mov	r3, r0
 801a574:	2b00      	cmp	r3, #0
 801a576:	d001      	beq.n	801a57c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 801a578:	2301      	movs	r3, #1
 801a57a:	e04d      	b.n	801a618 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a580:	b29b      	uxth	r3, r3
 801a582:	2bff      	cmp	r3, #255	@ 0xff
 801a584:	d90e      	bls.n	801a5a4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	22ff      	movs	r2, #255	@ 0xff
 801a58a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a590:	b2da      	uxtb	r2, r3
 801a592:	8979      	ldrh	r1, [r7, #10]
 801a594:	2300      	movs	r3, #0
 801a596:	9300      	str	r3, [sp, #0]
 801a598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a59c:	68f8      	ldr	r0, [r7, #12]
 801a59e:	f000 fca1 	bl	801aee4 <I2C_TransferConfig>
 801a5a2:	e00f      	b.n	801a5c4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801a5a4:	68fb      	ldr	r3, [r7, #12]
 801a5a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a5a8:	b29a      	uxth	r2, r3
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a5b2:	b2da      	uxtb	r2, r3
 801a5b4:	8979      	ldrh	r1, [r7, #10]
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	9300      	str	r3, [sp, #0]
 801a5ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a5be:	68f8      	ldr	r0, [r7, #12]
 801a5c0:	f000 fc90 	bl	801aee4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801a5c4:	68fb      	ldr	r3, [r7, #12]
 801a5c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a5c8:	b29b      	uxth	r3, r3
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d19e      	bne.n	801a50c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a5ce:	697a      	ldr	r2, [r7, #20]
 801a5d0:	6a39      	ldr	r1, [r7, #32]
 801a5d2:	68f8      	ldr	r0, [r7, #12]
 801a5d4:	f000 fae1 	bl	801ab9a <I2C_WaitOnSTOPFlagUntilTimeout>
 801a5d8:	4603      	mov	r3, r0
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d001      	beq.n	801a5e2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 801a5de:	2301      	movs	r3, #1
 801a5e0:	e01a      	b.n	801a618 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	2220      	movs	r2, #32
 801a5e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	6859      	ldr	r1, [r3, #4]
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	681a      	ldr	r2, [r3, #0]
 801a5f4:	4b0b      	ldr	r3, [pc, #44]	@ (801a624 <HAL_I2C_Master_Transmit+0x1e4>)
 801a5f6:	400b      	ands	r3, r1
 801a5f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801a5fa:	68fb      	ldr	r3, [r7, #12]
 801a5fc:	2220      	movs	r2, #32
 801a5fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	2200      	movs	r2, #0
 801a606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	2200      	movs	r2, #0
 801a60e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801a612:	2300      	movs	r3, #0
 801a614:	e000      	b.n	801a618 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 801a616:	2302      	movs	r3, #2
  }
}
 801a618:	4618      	mov	r0, r3
 801a61a:	3718      	adds	r7, #24
 801a61c:	46bd      	mov	sp, r7
 801a61e:	bd80      	pop	{r7, pc}
 801a620:	80002000 	.word	0x80002000
 801a624:	fe00e800 	.word	0xfe00e800

0801a628 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b088      	sub	sp, #32
 801a62c:	af02      	add	r7, sp, #8
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	607a      	str	r2, [r7, #4]
 801a632:	461a      	mov	r2, r3
 801a634:	460b      	mov	r3, r1
 801a636:	817b      	strh	r3, [r7, #10]
 801a638:	4613      	mov	r3, r2
 801a63a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a63c:	68fb      	ldr	r3, [r7, #12]
 801a63e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801a642:	b2db      	uxtb	r3, r3
 801a644:	2b20      	cmp	r3, #32
 801a646:	f040 80db 	bne.w	801a800 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801a650:	2b01      	cmp	r3, #1
 801a652:	d101      	bne.n	801a658 <HAL_I2C_Master_Receive+0x30>
 801a654:	2302      	movs	r3, #2
 801a656:	e0d4      	b.n	801a802 <HAL_I2C_Master_Receive+0x1da>
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	2201      	movs	r2, #1
 801a65c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801a660:	f7fb ff04 	bl	801646c <HAL_GetTick>
 801a664:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801a666:	697b      	ldr	r3, [r7, #20]
 801a668:	9300      	str	r3, [sp, #0]
 801a66a:	2319      	movs	r3, #25
 801a66c:	2201      	movs	r2, #1
 801a66e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801a672:	68f8      	ldr	r0, [r7, #12]
 801a674:	f000 f9fb 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a678:	4603      	mov	r3, r0
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d001      	beq.n	801a682 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 801a67e:	2301      	movs	r3, #1
 801a680:	e0bf      	b.n	801a802 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	2222      	movs	r2, #34	@ 0x22
 801a686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	2210      	movs	r2, #16
 801a68e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	2200      	movs	r2, #0
 801a696:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	687a      	ldr	r2, [r7, #4]
 801a69c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	893a      	ldrh	r2, [r7, #8]
 801a6a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a6ae:	b29b      	uxth	r3, r3
 801a6b0:	2bff      	cmp	r3, #255	@ 0xff
 801a6b2:	d90e      	bls.n	801a6d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	22ff      	movs	r2, #255	@ 0xff
 801a6b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a6be:	b2da      	uxtb	r2, r3
 801a6c0:	8979      	ldrh	r1, [r7, #10]
 801a6c2:	4b52      	ldr	r3, [pc, #328]	@ (801a80c <HAL_I2C_Master_Receive+0x1e4>)
 801a6c4:	9300      	str	r3, [sp, #0]
 801a6c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a6ca:	68f8      	ldr	r0, [r7, #12]
 801a6cc:	f000 fc0a 	bl	801aee4 <I2C_TransferConfig>
 801a6d0:	e06d      	b.n	801a7ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a6d6:	b29a      	uxth	r2, r3
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a6e0:	b2da      	uxtb	r2, r3
 801a6e2:	8979      	ldrh	r1, [r7, #10]
 801a6e4:	4b49      	ldr	r3, [pc, #292]	@ (801a80c <HAL_I2C_Master_Receive+0x1e4>)
 801a6e6:	9300      	str	r3, [sp, #0]
 801a6e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a6ec:	68f8      	ldr	r0, [r7, #12]
 801a6ee:	f000 fbf9 	bl	801aee4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 801a6f2:	e05c      	b.n	801a7ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a6f4:	697a      	ldr	r2, [r7, #20]
 801a6f6:	6a39      	ldr	r1, [r7, #32]
 801a6f8:	68f8      	ldr	r0, [r7, #12]
 801a6fa:	f000 fa91 	bl	801ac20 <I2C_WaitOnRXNEFlagUntilTimeout>
 801a6fe:	4603      	mov	r3, r0
 801a700:	2b00      	cmp	r3, #0
 801a702:	d001      	beq.n	801a708 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 801a704:	2301      	movs	r3, #1
 801a706:	e07c      	b.n	801a802 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801a708:	68fb      	ldr	r3, [r7, #12]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a712:	b2d2      	uxtb	r2, r2
 801a714:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a71a:	1c5a      	adds	r2, r3, #1
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a724:	3b01      	subs	r3, #1
 801a726:	b29a      	uxth	r2, r3
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a730:	b29b      	uxth	r3, r3
 801a732:	3b01      	subs	r3, #1
 801a734:	b29a      	uxth	r2, r3
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a73e:	b29b      	uxth	r3, r3
 801a740:	2b00      	cmp	r3, #0
 801a742:	d034      	beq.n	801a7ae <HAL_I2C_Master_Receive+0x186>
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d130      	bne.n	801a7ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801a74c:	697b      	ldr	r3, [r7, #20]
 801a74e:	9300      	str	r3, [sp, #0]
 801a750:	6a3b      	ldr	r3, [r7, #32]
 801a752:	2200      	movs	r2, #0
 801a754:	2180      	movs	r1, #128	@ 0x80
 801a756:	68f8      	ldr	r0, [r7, #12]
 801a758:	f000 f989 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a75c:	4603      	mov	r3, r0
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d001      	beq.n	801a766 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 801a762:	2301      	movs	r3, #1
 801a764:	e04d      	b.n	801a802 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a76a:	b29b      	uxth	r3, r3
 801a76c:	2bff      	cmp	r3, #255	@ 0xff
 801a76e:	d90e      	bls.n	801a78e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	22ff      	movs	r2, #255	@ 0xff
 801a774:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801a776:	68fb      	ldr	r3, [r7, #12]
 801a778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a77a:	b2da      	uxtb	r2, r3
 801a77c:	8979      	ldrh	r1, [r7, #10]
 801a77e:	2300      	movs	r3, #0
 801a780:	9300      	str	r3, [sp, #0]
 801a782:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801a786:	68f8      	ldr	r0, [r7, #12]
 801a788:	f000 fbac 	bl	801aee4 <I2C_TransferConfig>
 801a78c:	e00f      	b.n	801a7ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a792:	b29a      	uxth	r2, r3
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801a79c:	b2da      	uxtb	r2, r3
 801a79e:	8979      	ldrh	r1, [r7, #10]
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 801a7a8:	68f8      	ldr	r0, [r7, #12]
 801a7aa:	f000 fb9b 	bl	801aee4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801a7b2:	b29b      	uxth	r3, r3
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d19d      	bne.n	801a6f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801a7b8:	697a      	ldr	r2, [r7, #20]
 801a7ba:	6a39      	ldr	r1, [r7, #32]
 801a7bc:	68f8      	ldr	r0, [r7, #12]
 801a7be:	f000 f9ec 	bl	801ab9a <I2C_WaitOnSTOPFlagUntilTimeout>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d001      	beq.n	801a7cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 801a7c8:	2301      	movs	r3, #1
 801a7ca:	e01a      	b.n	801a802 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	2220      	movs	r2, #32
 801a7d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	6859      	ldr	r1, [r3, #4]
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	681a      	ldr	r2, [r3, #0]
 801a7de:	4b0c      	ldr	r3, [pc, #48]	@ (801a810 <HAL_I2C_Master_Receive+0x1e8>)
 801a7e0:	400b      	ands	r3, r1
 801a7e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	2220      	movs	r2, #32
 801a7e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801a7ec:	68fb      	ldr	r3, [r7, #12]
 801a7ee:	2200      	movs	r2, #0
 801a7f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	2200      	movs	r2, #0
 801a7f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	e000      	b.n	801a802 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 801a800:	2302      	movs	r3, #2
  }
}
 801a802:	4618      	mov	r0, r3
 801a804:	3718      	adds	r7, #24
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	80002400 	.word	0x80002400
 801a810:	fe00e800 	.word	0xfe00e800

0801a814 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b08a      	sub	sp, #40	@ 0x28
 801a818:	af02      	add	r7, sp, #8
 801a81a:	60f8      	str	r0, [r7, #12]
 801a81c:	607a      	str	r2, [r7, #4]
 801a81e:	603b      	str	r3, [r7, #0]
 801a820:	460b      	mov	r3, r1
 801a822:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 801a824:	2300      	movs	r3, #0
 801a826:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801a82e:	b2db      	uxtb	r3, r3
 801a830:	2b20      	cmp	r3, #32
 801a832:	f040 80f3 	bne.w	801aa1c <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	699b      	ldr	r3, [r3, #24]
 801a83c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a844:	d101      	bne.n	801a84a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 801a846:	2302      	movs	r3, #2
 801a848:	e0e9      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801a84a:	68fb      	ldr	r3, [r7, #12]
 801a84c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801a850:	2b01      	cmp	r3, #1
 801a852:	d101      	bne.n	801a858 <HAL_I2C_IsDeviceReady+0x44>
 801a854:	2302      	movs	r3, #2
 801a856:	e0e2      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	2201      	movs	r2, #1
 801a85c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2224      	movs	r2, #36	@ 0x24
 801a864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	2200      	movs	r2, #0
 801a86c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	68db      	ldr	r3, [r3, #12]
 801a872:	2b01      	cmp	r3, #1
 801a874:	d107      	bne.n	801a886 <HAL_I2C_IsDeviceReady+0x72>
 801a876:	897b      	ldrh	r3, [r7, #10]
 801a878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a87c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a880:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801a884:	e006      	b.n	801a894 <HAL_I2C_IsDeviceReady+0x80>
 801a886:	897b      	ldrh	r3, [r7, #10]
 801a888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a88c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801a890:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 801a894:	68fa      	ldr	r2, [r7, #12]
 801a896:	6812      	ldr	r2, [r2, #0]
 801a898:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 801a89a:	f7fb fde7 	bl	801646c <HAL_GetTick>
 801a89e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	699b      	ldr	r3, [r3, #24]
 801a8a6:	f003 0320 	and.w	r3, r3, #32
 801a8aa:	2b20      	cmp	r3, #32
 801a8ac:	bf0c      	ite	eq
 801a8ae:	2301      	moveq	r3, #1
 801a8b0:	2300      	movne	r3, #0
 801a8b2:	b2db      	uxtb	r3, r3
 801a8b4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	699b      	ldr	r3, [r3, #24]
 801a8bc:	f003 0310 	and.w	r3, r3, #16
 801a8c0:	2b10      	cmp	r3, #16
 801a8c2:	bf0c      	ite	eq
 801a8c4:	2301      	moveq	r3, #1
 801a8c6:	2300      	movne	r3, #0
 801a8c8:	b2db      	uxtb	r3, r3
 801a8ca:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 801a8cc:	e034      	b.n	801a938 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8d4:	d01a      	beq.n	801a90c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a8d6:	f7fb fdc9 	bl	801646c <HAL_GetTick>
 801a8da:	4602      	mov	r2, r0
 801a8dc:	69bb      	ldr	r3, [r7, #24]
 801a8de:	1ad3      	subs	r3, r2, r3
 801a8e0:	683a      	ldr	r2, [r7, #0]
 801a8e2:	429a      	cmp	r2, r3
 801a8e4:	d302      	bcc.n	801a8ec <HAL_I2C_IsDeviceReady+0xd8>
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d10f      	bne.n	801a90c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	2220      	movs	r2, #32
 801a8f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a8f8:	f043 0220 	orr.w	r2, r3, #32
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	2200      	movs	r2, #0
 801a904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 801a908:	2301      	movs	r3, #1
 801a90a:	e088      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	699b      	ldr	r3, [r3, #24]
 801a912:	f003 0320 	and.w	r3, r3, #32
 801a916:	2b20      	cmp	r3, #32
 801a918:	bf0c      	ite	eq
 801a91a:	2301      	moveq	r3, #1
 801a91c:	2300      	movne	r3, #0
 801a91e:	b2db      	uxtb	r3, r3
 801a920:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801a922:	68fb      	ldr	r3, [r7, #12]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	699b      	ldr	r3, [r3, #24]
 801a928:	f003 0310 	and.w	r3, r3, #16
 801a92c:	2b10      	cmp	r3, #16
 801a92e:	bf0c      	ite	eq
 801a930:	2301      	moveq	r3, #1
 801a932:	2300      	movne	r3, #0
 801a934:	b2db      	uxtb	r3, r3
 801a936:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 801a938:	7ffb      	ldrb	r3, [r7, #31]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d102      	bne.n	801a944 <HAL_I2C_IsDeviceReady+0x130>
 801a93e:	7fbb      	ldrb	r3, [r7, #30]
 801a940:	2b00      	cmp	r3, #0
 801a942:	d0c4      	beq.n	801a8ce <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	699b      	ldr	r3, [r3, #24]
 801a94a:	f003 0310 	and.w	r3, r3, #16
 801a94e:	2b10      	cmp	r3, #16
 801a950:	d01a      	beq.n	801a988 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801a952:	69bb      	ldr	r3, [r7, #24]
 801a954:	9300      	str	r3, [sp, #0]
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	2200      	movs	r2, #0
 801a95a:	2120      	movs	r1, #32
 801a95c:	68f8      	ldr	r0, [r7, #12]
 801a95e:	f000 f886 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a962:	4603      	mov	r3, r0
 801a964:	2b00      	cmp	r3, #0
 801a966:	d001      	beq.n	801a96c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 801a968:	2301      	movs	r3, #1
 801a96a:	e058      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	2220      	movs	r2, #32
 801a972:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	2220      	movs	r2, #32
 801a978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801a97c:	68fb      	ldr	r3, [r7, #12]
 801a97e:	2200      	movs	r2, #0
 801a980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 801a984:	2300      	movs	r3, #0
 801a986:	e04a      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801a988:	69bb      	ldr	r3, [r7, #24]
 801a98a:	9300      	str	r3, [sp, #0]
 801a98c:	683b      	ldr	r3, [r7, #0]
 801a98e:	2200      	movs	r2, #0
 801a990:	2120      	movs	r1, #32
 801a992:	68f8      	ldr	r0, [r7, #12]
 801a994:	f000 f86b 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a998:	4603      	mov	r3, r0
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d001      	beq.n	801a9a2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 801a99e:	2301      	movs	r3, #1
 801a9a0:	e03d      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	2210      	movs	r2, #16
 801a9a8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	2220      	movs	r2, #32
 801a9b0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 801a9b2:	697b      	ldr	r3, [r7, #20]
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	429a      	cmp	r2, r3
 801a9b8:	d118      	bne.n	801a9ec <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	685a      	ldr	r2, [r3, #4]
 801a9c0:	68fb      	ldr	r3, [r7, #12]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801a9c8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 801a9ca:	69bb      	ldr	r3, [r7, #24]
 801a9cc:	9300      	str	r3, [sp, #0]
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	2120      	movs	r1, #32
 801a9d4:	68f8      	ldr	r0, [r7, #12]
 801a9d6:	f000 f84a 	bl	801aa6e <I2C_WaitOnFlagUntilTimeout>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d001      	beq.n	801a9e4 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 801a9e0:	2301      	movs	r3, #1
 801a9e2:	e01c      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	2220      	movs	r2, #32
 801a9ea:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 801a9ec:	697b      	ldr	r3, [r7, #20]
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 801a9f2:	697b      	ldr	r3, [r7, #20]
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	429a      	cmp	r2, r3
 801a9f8:	f63f af39 	bhi.w	801a86e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	2220      	movs	r2, #32
 801aa00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aa08:	f043 0220 	orr.w	r2, r3, #32
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	2200      	movs	r2, #0
 801aa14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 801aa18:	2301      	movs	r3, #1
 801aa1a:	e000      	b.n	801aa1e <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 801aa1c:	2302      	movs	r3, #2
  }
}
 801aa1e:	4618      	mov	r0, r3
 801aa20:	3720      	adds	r7, #32
 801aa22:	46bd      	mov	sp, r7
 801aa24:	bd80      	pop	{r7, pc}

0801aa26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801aa26:	b480      	push	{r7}
 801aa28:	b083      	sub	sp, #12
 801aa2a:	af00      	add	r7, sp, #0
 801aa2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	699b      	ldr	r3, [r3, #24]
 801aa34:	f003 0302 	and.w	r3, r3, #2
 801aa38:	2b02      	cmp	r3, #2
 801aa3a:	d103      	bne.n	801aa44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	2200      	movs	r2, #0
 801aa42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	699b      	ldr	r3, [r3, #24]
 801aa4a:	f003 0301 	and.w	r3, r3, #1
 801aa4e:	2b01      	cmp	r3, #1
 801aa50:	d007      	beq.n	801aa62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	681b      	ldr	r3, [r3, #0]
 801aa56:	699a      	ldr	r2, [r3, #24]
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	f042 0201 	orr.w	r2, r2, #1
 801aa60:	619a      	str	r2, [r3, #24]
  }
}
 801aa62:	bf00      	nop
 801aa64:	370c      	adds	r7, #12
 801aa66:	46bd      	mov	sp, r7
 801aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa6c:	4770      	bx	lr

0801aa6e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801aa6e:	b580      	push	{r7, lr}
 801aa70:	b084      	sub	sp, #16
 801aa72:	af00      	add	r7, sp, #0
 801aa74:	60f8      	str	r0, [r7, #12]
 801aa76:	60b9      	str	r1, [r7, #8]
 801aa78:	603b      	str	r3, [r7, #0]
 801aa7a:	4613      	mov	r3, r2
 801aa7c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801aa7e:	e031      	b.n	801aae4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa86:	d02d      	beq.n	801aae4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801aa88:	f7fb fcf0 	bl	801646c <HAL_GetTick>
 801aa8c:	4602      	mov	r2, r0
 801aa8e:	69bb      	ldr	r3, [r7, #24]
 801aa90:	1ad3      	subs	r3, r2, r3
 801aa92:	683a      	ldr	r2, [r7, #0]
 801aa94:	429a      	cmp	r2, r3
 801aa96:	d302      	bcc.n	801aa9e <I2C_WaitOnFlagUntilTimeout+0x30>
 801aa98:	683b      	ldr	r3, [r7, #0]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d122      	bne.n	801aae4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	699a      	ldr	r2, [r3, #24]
 801aaa4:	68bb      	ldr	r3, [r7, #8]
 801aaa6:	4013      	ands	r3, r2
 801aaa8:	68ba      	ldr	r2, [r7, #8]
 801aaaa:	429a      	cmp	r2, r3
 801aaac:	bf0c      	ite	eq
 801aaae:	2301      	moveq	r3, #1
 801aab0:	2300      	movne	r3, #0
 801aab2:	b2db      	uxtb	r3, r3
 801aab4:	461a      	mov	r2, r3
 801aab6:	79fb      	ldrb	r3, [r7, #7]
 801aab8:	429a      	cmp	r2, r3
 801aaba:	d113      	bne.n	801aae4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801aac0:	f043 0220 	orr.w	r2, r3, #32
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	2220      	movs	r2, #32
 801aacc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	2200      	movs	r2, #0
 801aad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	2200      	movs	r2, #0
 801aadc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801aae0:	2301      	movs	r3, #1
 801aae2:	e00f      	b.n	801ab04 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	699a      	ldr	r2, [r3, #24]
 801aaea:	68bb      	ldr	r3, [r7, #8]
 801aaec:	4013      	ands	r3, r2
 801aaee:	68ba      	ldr	r2, [r7, #8]
 801aaf0:	429a      	cmp	r2, r3
 801aaf2:	bf0c      	ite	eq
 801aaf4:	2301      	moveq	r3, #1
 801aaf6:	2300      	movne	r3, #0
 801aaf8:	b2db      	uxtb	r3, r3
 801aafa:	461a      	mov	r2, r3
 801aafc:	79fb      	ldrb	r3, [r7, #7]
 801aafe:	429a      	cmp	r2, r3
 801ab00:	d0be      	beq.n	801aa80 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ab02:	2300      	movs	r3, #0
}
 801ab04:	4618      	mov	r0, r3
 801ab06:	3710      	adds	r7, #16
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	bd80      	pop	{r7, pc}

0801ab0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b084      	sub	sp, #16
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	60f8      	str	r0, [r7, #12]
 801ab14:	60b9      	str	r1, [r7, #8]
 801ab16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ab18:	e033      	b.n	801ab82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801ab1a:	687a      	ldr	r2, [r7, #4]
 801ab1c:	68b9      	ldr	r1, [r7, #8]
 801ab1e:	68f8      	ldr	r0, [r7, #12]
 801ab20:	f000 f900 	bl	801ad24 <I2C_IsErrorOccurred>
 801ab24:	4603      	mov	r3, r0
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d001      	beq.n	801ab2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ab2a:	2301      	movs	r3, #1
 801ab2c:	e031      	b.n	801ab92 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab34:	d025      	beq.n	801ab82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab36:	f7fb fc99 	bl	801646c <HAL_GetTick>
 801ab3a:	4602      	mov	r2, r0
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	1ad3      	subs	r3, r2, r3
 801ab40:	68ba      	ldr	r2, [r7, #8]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d302      	bcc.n	801ab4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d11a      	bne.n	801ab82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	699b      	ldr	r3, [r3, #24]
 801ab52:	f003 0302 	and.w	r3, r3, #2
 801ab56:	2b02      	cmp	r3, #2
 801ab58:	d013      	beq.n	801ab82 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab5e:	f043 0220 	orr.w	r2, r3, #32
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	2220      	movs	r2, #32
 801ab6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	2200      	movs	r2, #0
 801ab72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	2200      	movs	r2, #0
 801ab7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 801ab7e:	2301      	movs	r3, #1
 801ab80:	e007      	b.n	801ab92 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	699b      	ldr	r3, [r3, #24]
 801ab88:	f003 0302 	and.w	r3, r3, #2
 801ab8c:	2b02      	cmp	r3, #2
 801ab8e:	d1c4      	bne.n	801ab1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801ab90:	2300      	movs	r3, #0
}
 801ab92:	4618      	mov	r0, r3
 801ab94:	3710      	adds	r7, #16
 801ab96:	46bd      	mov	sp, r7
 801ab98:	bd80      	pop	{r7, pc}

0801ab9a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801ab9a:	b580      	push	{r7, lr}
 801ab9c:	b084      	sub	sp, #16
 801ab9e:	af00      	add	r7, sp, #0
 801aba0:	60f8      	str	r0, [r7, #12]
 801aba2:	60b9      	str	r1, [r7, #8]
 801aba4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801aba6:	e02f      	b.n	801ac08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801aba8:	687a      	ldr	r2, [r7, #4]
 801abaa:	68b9      	ldr	r1, [r7, #8]
 801abac:	68f8      	ldr	r0, [r7, #12]
 801abae:	f000 f8b9 	bl	801ad24 <I2C_IsErrorOccurred>
 801abb2:	4603      	mov	r3, r0
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d001      	beq.n	801abbc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801abb8:	2301      	movs	r3, #1
 801abba:	e02d      	b.n	801ac18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801abbc:	f7fb fc56 	bl	801646c <HAL_GetTick>
 801abc0:	4602      	mov	r2, r0
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	1ad3      	subs	r3, r2, r3
 801abc6:	68ba      	ldr	r2, [r7, #8]
 801abc8:	429a      	cmp	r2, r3
 801abca:	d302      	bcc.n	801abd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801abcc:	68bb      	ldr	r3, [r7, #8]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d11a      	bne.n	801ac08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	699b      	ldr	r3, [r3, #24]
 801abd8:	f003 0320 	and.w	r3, r3, #32
 801abdc:	2b20      	cmp	r3, #32
 801abde:	d013      	beq.n	801ac08 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801abe4:	f043 0220 	orr.w	r2, r3, #32
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801abec:	68fb      	ldr	r3, [r7, #12]
 801abee:	2220      	movs	r2, #32
 801abf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	2200      	movs	r2, #0
 801abf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	2200      	movs	r2, #0
 801ac00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801ac04:	2301      	movs	r3, #1
 801ac06:	e007      	b.n	801ac18 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ac08:	68fb      	ldr	r3, [r7, #12]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	699b      	ldr	r3, [r3, #24]
 801ac0e:	f003 0320 	and.w	r3, r3, #32
 801ac12:	2b20      	cmp	r3, #32
 801ac14:	d1c8      	bne.n	801aba8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801ac16:	2300      	movs	r3, #0
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3710      	adds	r7, #16
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}

0801ac20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b084      	sub	sp, #16
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	60f8      	str	r0, [r7, #12]
 801ac28:	60b9      	str	r1, [r7, #8]
 801ac2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801ac2c:	e06b      	b.n	801ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801ac2e:	687a      	ldr	r2, [r7, #4]
 801ac30:	68b9      	ldr	r1, [r7, #8]
 801ac32:	68f8      	ldr	r0, [r7, #12]
 801ac34:	f000 f876 	bl	801ad24 <I2C_IsErrorOccurred>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d001      	beq.n	801ac42 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801ac3e:	2301      	movs	r3, #1
 801ac40:	e069      	b.n	801ad16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801ac42:	68fb      	ldr	r3, [r7, #12]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	699b      	ldr	r3, [r3, #24]
 801ac48:	f003 0320 	and.w	r3, r3, #32
 801ac4c:	2b20      	cmp	r3, #32
 801ac4e:	d138      	bne.n	801acc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	699b      	ldr	r3, [r3, #24]
 801ac56:	f003 0304 	and.w	r3, r3, #4
 801ac5a:	2b04      	cmp	r3, #4
 801ac5c:	d105      	bne.n	801ac6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d001      	beq.n	801ac6a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801ac66:	2300      	movs	r3, #0
 801ac68:	e055      	b.n	801ad16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801ac6a:	68fb      	ldr	r3, [r7, #12]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	699b      	ldr	r3, [r3, #24]
 801ac70:	f003 0310 	and.w	r3, r3, #16
 801ac74:	2b10      	cmp	r3, #16
 801ac76:	d107      	bne.n	801ac88 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ac78:	68fb      	ldr	r3, [r7, #12]
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	2210      	movs	r2, #16
 801ac7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 801ac80:	68fb      	ldr	r3, [r7, #12]
 801ac82:	2204      	movs	r2, #4
 801ac84:	645a      	str	r2, [r3, #68]	@ 0x44
 801ac86:	e002      	b.n	801ac8e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	2200      	movs	r2, #0
 801ac8c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	2220      	movs	r2, #32
 801ac94:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	6859      	ldr	r1, [r3, #4]
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	681a      	ldr	r2, [r3, #0]
 801aca0:	4b1f      	ldr	r3, [pc, #124]	@ (801ad20 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801aca2:	400b      	ands	r3, r1
 801aca4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	2220      	movs	r2, #32
 801acaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	2200      	movs	r2, #0
 801acb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801acb6:	68fb      	ldr	r3, [r7, #12]
 801acb8:	2200      	movs	r2, #0
 801acba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801acbe:	2301      	movs	r3, #1
 801acc0:	e029      	b.n	801ad16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801acc2:	f7fb fbd3 	bl	801646c <HAL_GetTick>
 801acc6:	4602      	mov	r2, r0
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	1ad3      	subs	r3, r2, r3
 801accc:	68ba      	ldr	r2, [r7, #8]
 801acce:	429a      	cmp	r2, r3
 801acd0:	d302      	bcc.n	801acd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801acd2:	68bb      	ldr	r3, [r7, #8]
 801acd4:	2b00      	cmp	r3, #0
 801acd6:	d116      	bne.n	801ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	699b      	ldr	r3, [r3, #24]
 801acde:	f003 0304 	and.w	r3, r3, #4
 801ace2:	2b04      	cmp	r3, #4
 801ace4:	d00f      	beq.n	801ad06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801acea:	f043 0220 	orr.w	r2, r3, #32
 801acee:	68fb      	ldr	r3, [r7, #12]
 801acf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	2220      	movs	r2, #32
 801acf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	2200      	movs	r2, #0
 801acfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 801ad02:	2301      	movs	r3, #1
 801ad04:	e007      	b.n	801ad16 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	699b      	ldr	r3, [r3, #24]
 801ad0c:	f003 0304 	and.w	r3, r3, #4
 801ad10:	2b04      	cmp	r3, #4
 801ad12:	d18c      	bne.n	801ac2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801ad14:	2300      	movs	r3, #0
}
 801ad16:	4618      	mov	r0, r3
 801ad18:	3710      	adds	r7, #16
 801ad1a:	46bd      	mov	sp, r7
 801ad1c:	bd80      	pop	{r7, pc}
 801ad1e:	bf00      	nop
 801ad20:	fe00e800 	.word	0xfe00e800

0801ad24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b08a      	sub	sp, #40	@ 0x28
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	60f8      	str	r0, [r7, #12]
 801ad2c:	60b9      	str	r1, [r7, #8]
 801ad2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ad30:	2300      	movs	r3, #0
 801ad32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	699b      	ldr	r3, [r3, #24]
 801ad3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801ad3e:	2300      	movs	r3, #0
 801ad40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801ad46:	69bb      	ldr	r3, [r7, #24]
 801ad48:	f003 0310 	and.w	r3, r3, #16
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d068      	beq.n	801ae22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801ad50:	68fb      	ldr	r3, [r7, #12]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	2210      	movs	r2, #16
 801ad56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801ad58:	e049      	b.n	801adee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801ad5a:	68bb      	ldr	r3, [r7, #8]
 801ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad60:	d045      	beq.n	801adee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801ad62:	f7fb fb83 	bl	801646c <HAL_GetTick>
 801ad66:	4602      	mov	r2, r0
 801ad68:	69fb      	ldr	r3, [r7, #28]
 801ad6a:	1ad3      	subs	r3, r2, r3
 801ad6c:	68ba      	ldr	r2, [r7, #8]
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	d302      	bcc.n	801ad78 <I2C_IsErrorOccurred+0x54>
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d13a      	bne.n	801adee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	685b      	ldr	r3, [r3, #4]
 801ad7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801ad82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801ad8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	699b      	ldr	r3, [r3, #24]
 801ad92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ad96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ad9a:	d121      	bne.n	801ade0 <I2C_IsErrorOccurred+0xbc>
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ada2:	d01d      	beq.n	801ade0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801ada4:	7cfb      	ldrb	r3, [r7, #19]
 801ada6:	2b20      	cmp	r3, #32
 801ada8:	d01a      	beq.n	801ade0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801adaa:	68fb      	ldr	r3, [r7, #12]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	685a      	ldr	r2, [r3, #4]
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801adb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801adba:	f7fb fb57 	bl	801646c <HAL_GetTick>
 801adbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801adc0:	e00e      	b.n	801ade0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801adc2:	f7fb fb53 	bl	801646c <HAL_GetTick>
 801adc6:	4602      	mov	r2, r0
 801adc8:	69fb      	ldr	r3, [r7, #28]
 801adca:	1ad3      	subs	r3, r2, r3
 801adcc:	2b19      	cmp	r3, #25
 801adce:	d907      	bls.n	801ade0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801add0:	6a3b      	ldr	r3, [r7, #32]
 801add2:	f043 0320 	orr.w	r3, r3, #32
 801add6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801add8:	2301      	movs	r3, #1
 801adda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801adde:	e006      	b.n	801adee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	699b      	ldr	r3, [r3, #24]
 801ade6:	f003 0320 	and.w	r3, r3, #32
 801adea:	2b20      	cmp	r3, #32
 801adec:	d1e9      	bne.n	801adc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	699b      	ldr	r3, [r3, #24]
 801adf4:	f003 0320 	and.w	r3, r3, #32
 801adf8:	2b20      	cmp	r3, #32
 801adfa:	d003      	beq.n	801ae04 <I2C_IsErrorOccurred+0xe0>
 801adfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d0aa      	beq.n	801ad5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801ae04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d103      	bne.n	801ae14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	2220      	movs	r2, #32
 801ae12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801ae14:	6a3b      	ldr	r3, [r7, #32]
 801ae16:	f043 0304 	orr.w	r3, r3, #4
 801ae1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801ae1c:	2301      	movs	r3, #1
 801ae1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	699b      	ldr	r3, [r3, #24]
 801ae28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801ae2a:	69bb      	ldr	r3, [r7, #24]
 801ae2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d00b      	beq.n	801ae4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801ae34:	6a3b      	ldr	r3, [r7, #32]
 801ae36:	f043 0301 	orr.w	r3, r3, #1
 801ae3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ae44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ae46:	2301      	movs	r3, #1
 801ae48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801ae4c:	69bb      	ldr	r3, [r7, #24]
 801ae4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d00b      	beq.n	801ae6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801ae56:	6a3b      	ldr	r3, [r7, #32]
 801ae58:	f043 0308 	orr.w	r3, r3, #8
 801ae5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ae66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ae68:	2301      	movs	r3, #1
 801ae6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801ae6e:	69bb      	ldr	r3, [r7, #24]
 801ae70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d00b      	beq.n	801ae90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801ae78:	6a3b      	ldr	r3, [r7, #32]
 801ae7a:	f043 0302 	orr.w	r3, r3, #2
 801ae7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ae88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 801ae90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d01c      	beq.n	801aed2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801ae98:	68f8      	ldr	r0, [r7, #12]
 801ae9a:	f7ff fdc4 	bl	801aa26 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	6859      	ldr	r1, [r3, #4]
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	681a      	ldr	r2, [r3, #0]
 801aea8:	4b0d      	ldr	r3, [pc, #52]	@ (801aee0 <I2C_IsErrorOccurred+0x1bc>)
 801aeaa:	400b      	ands	r3, r1
 801aeac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801aeb2:	6a3b      	ldr	r3, [r7, #32]
 801aeb4:	431a      	orrs	r2, r3
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	2220      	movs	r2, #32
 801aebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	2200      	movs	r2, #0
 801aec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	2200      	movs	r2, #0
 801aece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 801aed2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3728      	adds	r7, #40	@ 0x28
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}
 801aede:	bf00      	nop
 801aee0:	fe00e800 	.word	0xfe00e800

0801aee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801aee4:	b480      	push	{r7}
 801aee6:	b087      	sub	sp, #28
 801aee8:	af00      	add	r7, sp, #0
 801aeea:	60f8      	str	r0, [r7, #12]
 801aeec:	607b      	str	r3, [r7, #4]
 801aeee:	460b      	mov	r3, r1
 801aef0:	817b      	strh	r3, [r7, #10]
 801aef2:	4613      	mov	r3, r2
 801aef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801aef6:	897b      	ldrh	r3, [r7, #10]
 801aef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801aefc:	7a7b      	ldrb	r3, [r7, #9]
 801aefe:	041b      	lsls	r3, r3, #16
 801af00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801af04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801af0a:	6a3b      	ldr	r3, [r7, #32]
 801af0c:	4313      	orrs	r3, r2
 801af0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801af12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	685a      	ldr	r2, [r3, #4]
 801af1a:	6a3b      	ldr	r3, [r7, #32]
 801af1c:	0d5b      	lsrs	r3, r3, #21
 801af1e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801af22:	4b08      	ldr	r3, [pc, #32]	@ (801af44 <I2C_TransferConfig+0x60>)
 801af24:	430b      	orrs	r3, r1
 801af26:	43db      	mvns	r3, r3
 801af28:	ea02 0103 	and.w	r1, r2, r3
 801af2c:	68fb      	ldr	r3, [r7, #12]
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	697a      	ldr	r2, [r7, #20]
 801af32:	430a      	orrs	r2, r1
 801af34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801af36:	bf00      	nop
 801af38:	371c      	adds	r7, #28
 801af3a:	46bd      	mov	sp, r7
 801af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af40:	4770      	bx	lr
 801af42:	bf00      	nop
 801af44:	03ff63ff 	.word	0x03ff63ff

0801af48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801af48:	b480      	push	{r7}
 801af4a:	b083      	sub	sp, #12
 801af4c:	af00      	add	r7, sp, #0
 801af4e:	6078      	str	r0, [r7, #4]
 801af50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801af58:	b2db      	uxtb	r3, r3
 801af5a:	2b20      	cmp	r3, #32
 801af5c:	d138      	bne.n	801afd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801af64:	2b01      	cmp	r3, #1
 801af66:	d101      	bne.n	801af6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801af68:	2302      	movs	r3, #2
 801af6a:	e032      	b.n	801afd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	2201      	movs	r2, #1
 801af70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	2224      	movs	r2, #36	@ 0x24
 801af78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801af7c:	687b      	ldr	r3, [r7, #4]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	681a      	ldr	r2, [r3, #0]
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	f022 0201 	bic.w	r2, r2, #1
 801af8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	681a      	ldr	r2, [r3, #0]
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801af9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	6819      	ldr	r1, [r3, #0]
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	683a      	ldr	r2, [r7, #0]
 801afa8:	430a      	orrs	r2, r1
 801afaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	681a      	ldr	r2, [r3, #0]
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	f042 0201 	orr.w	r2, r2, #1
 801afba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	2220      	movs	r2, #32
 801afc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	2200      	movs	r2, #0
 801afc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801afcc:	2300      	movs	r3, #0
 801afce:	e000      	b.n	801afd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801afd0:	2302      	movs	r3, #2
  }
}
 801afd2:	4618      	mov	r0, r3
 801afd4:	370c      	adds	r7, #12
 801afd6:	46bd      	mov	sp, r7
 801afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afdc:	4770      	bx	lr

0801afde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801afde:	b480      	push	{r7}
 801afe0:	b085      	sub	sp, #20
 801afe2:	af00      	add	r7, sp, #0
 801afe4:	6078      	str	r0, [r7, #4]
 801afe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801afee:	b2db      	uxtb	r3, r3
 801aff0:	2b20      	cmp	r3, #32
 801aff2:	d139      	bne.n	801b068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801affa:	2b01      	cmp	r3, #1
 801affc:	d101      	bne.n	801b002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801affe:	2302      	movs	r3, #2
 801b000:	e033      	b.n	801b06a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	2201      	movs	r2, #1
 801b006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	2224      	movs	r2, #36	@ 0x24
 801b00e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	681a      	ldr	r2, [r3, #0]
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	f022 0201 	bic.w	r2, r2, #1
 801b020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801b030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	021b      	lsls	r3, r3, #8
 801b036:	68fa      	ldr	r2, [r7, #12]
 801b038:	4313      	orrs	r3, r2
 801b03a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	68fa      	ldr	r2, [r7, #12]
 801b042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	681a      	ldr	r2, [r3, #0]
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	f042 0201 	orr.w	r2, r2, #1
 801b052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	2220      	movs	r2, #32
 801b058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	2200      	movs	r2, #0
 801b060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801b064:	2300      	movs	r3, #0
 801b066:	e000      	b.n	801b06a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801b068:	2302      	movs	r3, #2
  }
}
 801b06a:	4618      	mov	r0, r3
 801b06c:	3714      	adds	r7, #20
 801b06e:	46bd      	mov	sp, r7
 801b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b074:	4770      	bx	lr
	...

0801b078 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 801b078:	b480      	push	{r7}
 801b07a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 801b07c:	4b05      	ldr	r3, [pc, #20]	@ (801b094 <HAL_ICACHE_Enable+0x1c>)
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	4a04      	ldr	r2, [pc, #16]	@ (801b094 <HAL_ICACHE_Enable+0x1c>)
 801b082:	f043 0301 	orr.w	r3, r3, #1
 801b086:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801b088:	2300      	movs	r3, #0
}
 801b08a:	4618      	mov	r0, r3
 801b08c:	46bd      	mov	sp, r7
 801b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b092:	4770      	bx	lr
 801b094:	40030400 	.word	0x40030400

0801b098 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b082      	sub	sp, #8
 801b09c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 801b0a2:	4b14      	ldr	r3, [pc, #80]	@ (801b0f4 <HAL_ICACHE_Disable+0x5c>)
 801b0a4:	2202      	movs	r2, #2
 801b0a6:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 801b0a8:	4b12      	ldr	r3, [pc, #72]	@ (801b0f4 <HAL_ICACHE_Disable+0x5c>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	4a11      	ldr	r2, [pc, #68]	@ (801b0f4 <HAL_ICACHE_Disable+0x5c>)
 801b0ae:	f023 0301 	bic.w	r3, r3, #1
 801b0b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b0b4:	f7fb f9da 	bl	801646c <HAL_GetTick>
 801b0b8:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 801b0ba:	e00f      	b.n	801b0dc <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 801b0bc:	f7fb f9d6 	bl	801646c <HAL_GetTick>
 801b0c0:	4602      	mov	r2, r0
 801b0c2:	683b      	ldr	r3, [r7, #0]
 801b0c4:	1ad3      	subs	r3, r2, r3
 801b0c6:	2b01      	cmp	r3, #1
 801b0c8:	d908      	bls.n	801b0dc <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 801b0ca:	4b0a      	ldr	r3, [pc, #40]	@ (801b0f4 <HAL_ICACHE_Disable+0x5c>)
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	f003 0301 	and.w	r3, r3, #1
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d002      	beq.n	801b0dc <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 801b0d6:	2303      	movs	r3, #3
 801b0d8:	71fb      	strb	r3, [r7, #7]
        break;
 801b0da:	e005      	b.n	801b0e8 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 801b0dc:	4b05      	ldr	r3, [pc, #20]	@ (801b0f4 <HAL_ICACHE_Disable+0x5c>)
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	f003 0301 	and.w	r3, r3, #1
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d1e9      	bne.n	801b0bc <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 801b0e8:	79fb      	ldrb	r3, [r7, #7]
}
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	3708      	adds	r7, #8
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	bd80      	pop	{r7, pc}
 801b0f2:	bf00      	nop
 801b0f4:	40030400 	.word	0x40030400

0801b0f8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801b0f8:	b580      	push	{r7, lr}
 801b0fa:	b084      	sub	sp, #16
 801b0fc:	af00      	add	r7, sp, #0
 801b0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d101      	bne.n	801b10a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801b106:	2301      	movs	r3, #1
 801b108:	e055      	b.n	801b1b6 <HAL_IWDG_Init+0xbe>

  /* Init the low level hardware */
  hiwdg->MspInitCallback(hiwdg);
#else
  /* Init the low level hardware */
  HAL_IWDG_MspInit(hiwdg);
 801b10a:	6878      	ldr	r0, [r7, #4]
 801b10c:	f000 f857 	bl	801b1be <HAL_IWDG_MspInit>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 801b118:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR, IWDG_WINR and EWCR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	f245 5255 	movw	r2, #21845	@ 0x5555
 801b122:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	687a      	ldr	r2, [r7, #4]
 801b12a:	6852      	ldr	r2, [r2, #4]
 801b12c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801b12e:	687b      	ldr	r3, [r7, #4]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	687a      	ldr	r2, [r7, #4]
 801b134:	6892      	ldr	r2, [r2, #8]
 801b136:	609a      	str	r2, [r3, #8]

  if (hiwdg->Init.EWI == IWDG_EWI_DISABLE)
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	691b      	ldr	r3, [r3, #16]
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d105      	bne.n	801b14c <HAL_IWDG_Init+0x54>
  {
    /* EWI comparator value equal 0, disable the early wakeup interrupt
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator to 0x00 */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIC;
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801b148:	615a      	str	r2, [r3, #20]
 801b14a:	e006      	b.n	801b15a <HAL_IWDG_Init+0x62>
  else
  {
    /* EWI comparator value different from 0, enable the early wakeup interrupt,
     * acknowledge the early wakeup interrupt in any cases. it clears the EWIF flag in SR register
     * Set Watchdog Early Wakeup Comparator value */
    hiwdg->Instance->EWCR = IWDG_EWCR_EWIE | IWDG_EWCR_EWIC | hiwdg->Init.EWI;
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	691a      	ldr	r2, [r3, #16]
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 801b158:	615a      	str	r2, [r3, #20]
  }

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801b15a:	f7fb f987 	bl	801646c <HAL_GetTick>
 801b15e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801b160:	e00f      	b.n	801b182 <HAL_IWDG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801b162:	f7fb f983 	bl	801646c <HAL_GetTick>
 801b166:	4602      	mov	r2, r0
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	1ad3      	subs	r3, r2, r3
 801b16c:	2b21      	cmp	r3, #33	@ 0x21
 801b16e:	d908      	bls.n	801b182 <HAL_IWDG_Init+0x8a>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	68db      	ldr	r3, [r3, #12]
 801b176:	f003 030f 	and.w	r3, r3, #15
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d001      	beq.n	801b182 <HAL_IWDG_Init+0x8a>
      {
        return HAL_TIMEOUT;
 801b17e:	2303      	movs	r3, #3
 801b180:	e019      	b.n	801b1b6 <HAL_IWDG_Init+0xbe>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	68db      	ldr	r3, [r3, #12]
 801b188:	f003 030f 	and.w	r3, r3, #15
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	d1e8      	bne.n	801b162 <HAL_IWDG_Init+0x6a>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	691a      	ldr	r2, [r3, #16]
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	429a      	cmp	r2, r3
 801b19c:	d005      	beq.n	801b1aa <HAL_IWDG_Init+0xb2>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	687a      	ldr	r2, [r7, #4]
 801b1a4:	68d2      	ldr	r2, [r2, #12]
 801b1a6:	611a      	str	r2, [r3, #16]
 801b1a8:	e004      	b.n	801b1b4 <HAL_IWDG_Init+0xbc>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 801b1b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b1b4:	2300      	movs	r3, #0
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3710      	adds	r7, #16
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}

0801b1be <HAL_IWDG_MspInit>:
  *         to avoid multiple initialize when HAL_IWDG_Init function is called
  *         again to change parameters.
  * @retval None
  */
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
 801b1be:	b480      	push	{r7}
 801b1c0:	b083      	sub	sp, #12
 801b1c2:	af00      	add	r7, sp, #0
 801b1c4:	6078      	str	r0, [r7, #4]
  UNUSED(hiwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 801b1c6:	bf00      	nop
 801b1c8:	370c      	adds	r7, #12
 801b1ca:	46bd      	mov	sp, r7
 801b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1d0:	4770      	bx	lr

0801b1d2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801b1d2:	b480      	push	{r7}
 801b1d4:	b083      	sub	sp, #12
 801b1d6:	af00      	add	r7, sp, #0
 801b1d8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 801b1e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801b1e4:	2300      	movs	r3, #0
}
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	370c      	adds	r7, #12
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f0:	4770      	bx	lr

0801b1f2 <HAL_IWDG_IRQHandler>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval None
  */
void HAL_IWDG_IRQHandler(IWDG_HandleTypeDef *hiwdg)
{
 801b1f2:	b580      	push	{r7, lr}
 801b1f4:	b082      	sub	sp, #8
 801b1f6:	af00      	add	r7, sp, #0
 801b1f8:	6078      	str	r0, [r7, #4]
  /* Check if IWDG Early Wakeup Interrupt occurred */
  if ((hiwdg->Instance->SR & IWDG_SR_EWIF) != 0x00u)
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	68db      	ldr	r3, [r3, #12]
 801b200:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801b204:	2b00      	cmp	r3, #0
 801b206:	d00a      	beq.n	801b21e <HAL_IWDG_IRQHandler+0x2c>
  {
    /* Clear the IWDG Early Wakeup flag */
    hiwdg->Instance->EWCR |= IWDG_EWCR_EWIC;
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	695a      	ldr	r2, [r3, #20]
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801b216:	615a      	str	r2, [r3, #20]
#if (USE_HAL_IWDG_REGISTER_CALLBACKS == 1)
    /* Early Wakeup registered callback */
    hiwdg->EwiCallback(hiwdg);
#else
    /* Early Wakeup callback */
    HAL_IWDG_EarlyWakeupCallback(hiwdg);
 801b218:	6878      	ldr	r0, [r7, #4]
 801b21a:	f7f0 f9f5 	bl	800b608 <HAL_IWDG_EarlyWakeupCallback>
#endif /* USE_HAL_IWDG_REGISTER_CALLBACKS */
  }
}
 801b21e:	bf00      	nop
 801b220:	3708      	adds	r7, #8
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}

0801b226 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801b226:	b580      	push	{r7, lr}
 801b228:	b082      	sub	sp, #8
 801b22a:	af00      	add	r7, sp, #0
 801b22c:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	f003 0301 	and.w	r3, r3, #1
 801b238:	2b01      	cmp	r3, #1
 801b23a:	d120      	bne.n	801b27e <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	689b      	ldr	r3, [r3, #8]
 801b242:	f003 0301 	and.w	r3, r3, #1
 801b246:	2b01      	cmp	r3, #1
 801b248:	d119      	bne.n	801b27e <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	2201      	movs	r2, #1
 801b250:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	2201      	movs	r2, #1
 801b256:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b260:	f003 0301 	and.w	r3, r3, #1
 801b264:	2b00      	cmp	r3, #0
 801b266:	d003      	beq.n	801b270 <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 801b268:	6878      	ldr	r0, [r7, #4]
 801b26a:	f000 f99c 	bl	801b5a6 <HAL_LPTIM_IC_CaptureCallback>
 801b26e:	e002      	b.n	801b276 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 801b270:	6878      	ldr	r0, [r7, #4]
 801b272:	f000 f93e 	bl	801b4f2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2200      	movs	r2, #0
 801b27a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	681b      	ldr	r3, [r3, #0]
 801b284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801b288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b28c:	d122      	bne.n	801b2d4 <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	689b      	ldr	r3, [r3, #8]
 801b294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801b298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b29c:	d11a      	bne.n	801b2d4 <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801b2a6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	2202      	movs	r2, #2
 801b2ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b2b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d003      	beq.n	801b2c6 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 801b2be:	6878      	ldr	r0, [r7, #4]
 801b2c0:	f000 f971 	bl	801b5a6 <HAL_LPTIM_IC_CaptureCallback>
 801b2c4:	e002      	b.n	801b2cc <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 801b2c6:	6878      	ldr	r0, [r7, #4]
 801b2c8:	f000 f913 	bl	801b4f2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	681b      	ldr	r3, [r3, #0]
 801b2da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801b2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b2e2:	d117      	bne.n	801b314 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	689b      	ldr	r3, [r3, #8]
 801b2ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801b2ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b2f2:	d10f      	bne.n	801b314 <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801b2fc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	2201      	movs	r2, #1
 801b302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 801b306:	6878      	ldr	r0, [r7, #4]
 801b308:	f000 f957 	bl	801b5ba <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	2200      	movs	r2, #0
 801b310:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b31e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b322:	d117      	bne.n	801b354 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	689b      	ldr	r3, [r3, #8]
 801b32a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b32e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b332:	d10f      	bne.n	801b354 <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	681b      	ldr	r3, [r3, #0]
 801b338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801b33c:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	2202      	movs	r2, #2
 801b342:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f000 f937 	bl	801b5ba <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	2200      	movs	r2, #0
 801b350:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	681b      	ldr	r3, [r3, #0]
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	f003 0302 	and.w	r3, r3, #2
 801b35e:	2b02      	cmp	r3, #2
 801b360:	d10d      	bne.n	801b37e <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	689b      	ldr	r3, [r3, #8]
 801b368:	f003 0302 	and.w	r3, r3, #2
 801b36c:	2b02      	cmp	r3, #2
 801b36e:	d106      	bne.n	801b37e <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	2202      	movs	r2, #2
 801b376:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 801b378:	6878      	ldr	r0, [r7, #4]
 801b37a:	f000 f8c4 	bl	801b506 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	f003 0304 	and.w	r3, r3, #4
 801b388:	2b04      	cmp	r3, #4
 801b38a:	d10d      	bne.n	801b3a8 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	689b      	ldr	r3, [r3, #8]
 801b392:	f003 0304 	and.w	r3, r3, #4
 801b396:	2b04      	cmp	r3, #4
 801b398:	d106      	bne.n	801b3a8 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	681b      	ldr	r3, [r3, #0]
 801b39e:	2204      	movs	r2, #4
 801b3a0:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801b3a2:	6878      	ldr	r0, [r7, #4]
 801b3a4:	f000 f8b9 	bl	801b51a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	f003 0308 	and.w	r3, r3, #8
 801b3b2:	2b08      	cmp	r3, #8
 801b3b4:	d111      	bne.n	801b3da <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	689b      	ldr	r3, [r3, #8]
 801b3bc:	f003 0308 	and.w	r3, r3, #8
 801b3c0:	2b08      	cmp	r3, #8
 801b3c2:	d10a      	bne.n	801b3da <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	2208      	movs	r2, #8
 801b3ca:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	2201      	movs	r2, #1
 801b3d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801b3d4:	6878      	ldr	r0, [r7, #4]
 801b3d6:	f000 f8aa 	bl	801b52e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b3e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801b3e8:	d113      	bne.n	801b412 <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	689b      	ldr	r3, [r3, #8]
 801b3f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b3f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801b3f8:	d10b      	bne.n	801b412 <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 801b402:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	2202      	movs	r2, #2
 801b408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801b40c:	6878      	ldr	r0, [r7, #4]
 801b40e:	f000 f88e 	bl	801b52e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f003 0310 	and.w	r3, r3, #16
 801b41c:	2b10      	cmp	r3, #16
 801b41e:	d10d      	bne.n	801b43c <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	689b      	ldr	r3, [r3, #8]
 801b426:	f003 0310 	and.w	r3, r3, #16
 801b42a:	2b10      	cmp	r3, #16
 801b42c:	d106      	bne.n	801b43c <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	2210      	movs	r2, #16
 801b434:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 801b436:	6878      	ldr	r0, [r7, #4]
 801b438:	f000 f883 	bl	801b542 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	f003 0320 	and.w	r3, r3, #32
 801b446:	2b20      	cmp	r3, #32
 801b448:	d10d      	bne.n	801b466 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	689b      	ldr	r3, [r3, #8]
 801b450:	f003 0320 	and.w	r3, r3, #32
 801b454:	2b20      	cmp	r3, #32
 801b456:	d106      	bne.n	801b466 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	2220      	movs	r2, #32
 801b45e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801b460:	6878      	ldr	r0, [r7, #4]
 801b462:	f000 f878 	bl	801b556 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b470:	2b40      	cmp	r3, #64	@ 0x40
 801b472:	d10d      	bne.n	801b490 <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	689b      	ldr	r3, [r3, #8]
 801b47a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b47e:	2b40      	cmp	r3, #64	@ 0x40
 801b480:	d106      	bne.n	801b490 <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	2240      	movs	r2, #64	@ 0x40
 801b488:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801b48a:	6878      	ldr	r0, [r7, #4]
 801b48c:	f000 f86d 	bl	801b56a <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b49a:	2b80      	cmp	r3, #128	@ 0x80
 801b49c:	d10d      	bne.n	801b4ba <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	689b      	ldr	r3, [r3, #8]
 801b4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b4a8:	2b80      	cmp	r3, #128	@ 0x80
 801b4aa:	d106      	bne.n	801b4ba <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	2280      	movs	r2, #128	@ 0x80
 801b4b2:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801b4b4:	6878      	ldr	r0, [r7, #4]
 801b4b6:	f000 f862 	bl	801b57e <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b4c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b4c8:	d10f      	bne.n	801b4ea <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	689b      	ldr	r3, [r3, #8]
 801b4d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b4d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b4d8:	d107      	bne.n	801b4ea <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b4e2:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801b4e4:	6878      	ldr	r0, [r7, #4]
 801b4e6:	f000 f854 	bl	801b592 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 801b4ea:	bf00      	nop
 801b4ec:	3708      	adds	r7, #8
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	bd80      	pop	{r7, pc}

0801b4f2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b4f2:	b480      	push	{r7}
 801b4f4:	b083      	sub	sp, #12
 801b4f6:	af00      	add	r7, sp, #0
 801b4f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 801b4fa:	bf00      	nop
 801b4fc:	370c      	adds	r7, #12
 801b4fe:	46bd      	mov	sp, r7
 801b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b504:	4770      	bx	lr

0801b506 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b506:	b480      	push	{r7}
 801b508:	b083      	sub	sp, #12
 801b50a:	af00      	add	r7, sp, #0
 801b50c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 801b50e:	bf00      	nop
 801b510:	370c      	adds	r7, #12
 801b512:	46bd      	mov	sp, r7
 801b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b518:	4770      	bx	lr

0801b51a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b51a:	b480      	push	{r7}
 801b51c:	b083      	sub	sp, #12
 801b51e:	af00      	add	r7, sp, #0
 801b520:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 801b522:	bf00      	nop
 801b524:	370c      	adds	r7, #12
 801b526:	46bd      	mov	sp, r7
 801b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52c:	4770      	bx	lr

0801b52e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b52e:	b480      	push	{r7}
 801b530:	b083      	sub	sp, #12
 801b532:	af00      	add	r7, sp, #0
 801b534:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 801b536:	bf00      	nop
 801b538:	370c      	adds	r7, #12
 801b53a:	46bd      	mov	sp, r7
 801b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b540:	4770      	bx	lr

0801b542 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b542:	b480      	push	{r7}
 801b544:	b083      	sub	sp, #12
 801b546:	af00      	add	r7, sp, #0
 801b548:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 801b54a:	bf00      	nop
 801b54c:	370c      	adds	r7, #12
 801b54e:	46bd      	mov	sp, r7
 801b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b554:	4770      	bx	lr

0801b556 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b556:	b480      	push	{r7}
 801b558:	b083      	sub	sp, #12
 801b55a:	af00      	add	r7, sp, #0
 801b55c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801b55e:	bf00      	nop
 801b560:	370c      	adds	r7, #12
 801b562:	46bd      	mov	sp, r7
 801b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b568:	4770      	bx	lr

0801b56a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b56a:	b480      	push	{r7}
 801b56c:	b083      	sub	sp, #12
 801b56e:	af00      	add	r7, sp, #0
 801b570:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801b572:	bf00      	nop
 801b574:	370c      	adds	r7, #12
 801b576:	46bd      	mov	sp, r7
 801b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b57c:	4770      	bx	lr

0801b57e <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b57e:	b480      	push	{r7}
 801b580:	b083      	sub	sp, #12
 801b582:	af00      	add	r7, sp, #0
 801b584:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 801b586:	bf00      	nop
 801b588:	370c      	adds	r7, #12
 801b58a:	46bd      	mov	sp, r7
 801b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b590:	4770      	bx	lr

0801b592 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b592:	b480      	push	{r7}
 801b594:	b083      	sub	sp, #12
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 801b59a:	bf00      	nop
 801b59c:	370c      	adds	r7, #12
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a4:	4770      	bx	lr

0801b5a6 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b5a6:	b480      	push	{r7}
 801b5a8:	b083      	sub	sp, #12
 801b5aa:	af00      	add	r7, sp, #0
 801b5ac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b5ae:	bf00      	nop
 801b5b0:	370c      	adds	r7, #12
 801b5b2:	46bd      	mov	sp, r7
 801b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b8:	4770      	bx	lr

0801b5ba <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 801b5ba:	b480      	push	{r7}
 801b5bc:	b083      	sub	sp, #12
 801b5be:	af00      	add	r7, sp, #0
 801b5c0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 801b5c2:	bf00      	nop
 801b5c4:	370c      	adds	r7, #12
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5cc:	4770      	bx	lr

0801b5ce <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 801b5ce:	b480      	push	{r7}
 801b5d0:	b083      	sub	sp, #12
 801b5d2:	af00      	add	r7, sp, #0
 801b5d4:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f043 0201 	orr.w	r2, r3, #1
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	601a      	str	r2, [r3, #0]
}
 801b5e2:	bf00      	nop
 801b5e4:	370c      	adds	r7, #12
 801b5e6:	46bd      	mov	sp, r7
 801b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ec:	4770      	bx	lr
	...

0801b5f0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b086      	sub	sp, #24
 801b5f4:	af02      	add	r7, sp, #8
 801b5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b5f8:	2300      	movs	r3, #0
 801b5fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 801b5fc:	f7fa ff36 	bl	801646c <HAL_GetTick>
 801b600:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	2b00      	cmp	r3, #0
 801b606:	d102      	bne.n	801b60e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 801b608:	2301      	movs	r3, #1
 801b60a:	73fb      	strb	r3, [r7, #15]
 801b60c:	e0a5      	b.n	801b75a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	2200      	movs	r2, #0
 801b612:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b618:	2b00      	cmp	r3, #0
 801b61a:	f040 809e 	bne.w	801b75a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 801b61e:	6878      	ldr	r0, [r7, #4]
 801b620:	f7fa faba 	bl	8015b98 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 801b624:	f241 3188 	movw	r1, #5000	@ 0x1388
 801b628:	6878      	ldr	r0, [r7, #4]
 801b62a:	f000 fb02 	bl	801bc32 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	681b      	ldr	r3, [r3, #0]
 801b632:	689a      	ldr	r2, [r3, #8]
 801b634:	4b4b      	ldr	r3, [pc, #300]	@ (801b764 <HAL_OSPI_Init+0x174>)
 801b636:	4013      	ands	r3, r2
 801b638:	687a      	ldr	r2, [r7, #4]
 801b63a:	68d1      	ldr	r1, [r2, #12]
 801b63c:	687a      	ldr	r2, [r7, #4]
 801b63e:	6912      	ldr	r2, [r2, #16]
 801b640:	3a01      	subs	r2, #1
 801b642:	0412      	lsls	r2, r2, #16
 801b644:	4311      	orrs	r1, r2
 801b646:	687a      	ldr	r2, [r7, #4]
 801b648:	6952      	ldr	r2, [r2, #20]
 801b64a:	3a01      	subs	r2, #1
 801b64c:	0212      	lsls	r2, r2, #8
 801b64e:	4311      	orrs	r1, r2
 801b650:	687a      	ldr	r2, [r7, #4]
 801b652:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801b654:	4311      	orrs	r1, r2
 801b656:	687a      	ldr	r2, [r7, #4]
 801b658:	69d2      	ldr	r2, [r2, #28]
 801b65a:	4311      	orrs	r1, r2
 801b65c:	687a      	ldr	r2, [r7, #4]
 801b65e:	6812      	ldr	r2, [r2, #0]
 801b660:	430b      	orrs	r3, r1
 801b662:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	68db      	ldr	r3, [r3, #12]
 801b66a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	6a1a      	ldr	r2, [r3, #32]
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	430a      	orrs	r2, r1
 801b678:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b67e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	430a      	orrs	r2, r1
 801b68a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	687a      	ldr	r2, [r7, #4]
 801b692:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801b694:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	685b      	ldr	r3, [r3, #4]
 801b6a4:	3b01      	subs	r3, #1
 801b6a6:	021a      	lsls	r2, r3, #8
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	430a      	orrs	r2, r1
 801b6ae:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b6b4:	9300      	str	r3, [sp, #0]
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	2200      	movs	r2, #0
 801b6ba:	2120      	movs	r1, #32
 801b6bc:	6878      	ldr	r0, [r7, #4]
 801b6be:	f000 ffb9 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 801b6c6:	7bfb      	ldrb	r3, [r7, #15]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d146      	bne.n	801b75a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	68db      	ldr	r3, [r3, #12]
 801b6d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b6da:	1e5a      	subs	r2, r3, #1
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	430a      	orrs	r2, r1
 801b6e2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	689a      	ldr	r2, [r3, #8]
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	681b      	ldr	r3, [r3, #0]
 801b6f6:	430a      	orrs	r2, r1
 801b6f8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801b702:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b70e:	431a      	orrs	r2, r3
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	430a      	orrs	r2, r1
 801b716:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	f042 0201 	orr.w	r2, r2, #1
 801b728:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	699b      	ldr	r3, [r3, #24]
 801b72e:	2b02      	cmp	r3, #2
 801b730:	d107      	bne.n	801b742 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	689a      	ldr	r2, [r3, #8]
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	681b      	ldr	r3, [r3, #0]
 801b73c:	f042 0202 	orr.w	r2, r2, #2
 801b740:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	68db      	ldr	r3, [r3, #12]
 801b746:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b74a:	d103      	bne.n	801b754 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	2201      	movs	r2, #1
 801b750:	651a      	str	r2, [r3, #80]	@ 0x50
 801b752:	e002      	b.n	801b75a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	2202      	movs	r2, #2
 801b758:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 801b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b75c:	4618      	mov	r0, r3
 801b75e:	3710      	adds	r7, #16
 801b760:	46bd      	mov	sp, r7
 801b762:	bd80      	pop	{r7, pc}
 801b764:	f8e0c0f4 	.word	0xf8e0c0f4

0801b768 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 801b768:	b580      	push	{r7, lr}
 801b76a:	b08a      	sub	sp, #40	@ 0x28
 801b76c:	af02      	add	r7, sp, #8
 801b76e:	60f8      	str	r0, [r7, #12]
 801b770:	60b9      	str	r1, [r7, #8]
 801b772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801b774:	f7fa fe7a 	bl	801646c <HAL_GetTick>
 801b778:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801b77a:	68bb      	ldr	r3, [r7, #8]
 801b77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b77e:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b784:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 801b786:	697b      	ldr	r3, [r7, #20]
 801b788:	2b02      	cmp	r3, #2
 801b78a:	d104      	bne.n	801b796 <HAL_OSPI_Command+0x2e>
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	68db      	ldr	r3, [r3, #12]
 801b790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b794:	d115      	bne.n	801b7c2 <HAL_OSPI_Command+0x5a>
 801b796:	697b      	ldr	r3, [r7, #20]
 801b798:	2b14      	cmp	r3, #20
 801b79a:	d107      	bne.n	801b7ac <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	2b02      	cmp	r3, #2
 801b7a2:	d00e      	beq.n	801b7c2 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	2b03      	cmp	r3, #3
 801b7aa:	d00a      	beq.n	801b7c2 <HAL_OSPI_Command+0x5a>
 801b7ac:	697b      	ldr	r3, [r7, #20]
 801b7ae:	2b24      	cmp	r3, #36	@ 0x24
 801b7b0:	d15b      	bne.n	801b86a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 801b7b2:	68bb      	ldr	r3, [r7, #8]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	2b01      	cmp	r3, #1
 801b7b8:	d003      	beq.n	801b7c2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 801b7be:	2b03      	cmp	r3, #3
 801b7c0:	d153      	bne.n	801b86a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	9300      	str	r3, [sp, #0]
 801b7c6:	69bb      	ldr	r3, [r7, #24]
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	2120      	movs	r1, #32
 801b7cc:	68f8      	ldr	r0, [r7, #12]
 801b7ce:	f000 ff31 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 801b7d6:	7ffb      	ldrb	r3, [r7, #31]
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d14c      	bne.n	801b876 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 801b7dc:	68fb      	ldr	r3, [r7, #12]
 801b7de:	2200      	movs	r2, #0
 801b7e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);   //GAV found it
 801b7e2:	68b9      	ldr	r1, [r7, #8]
 801b7e4:	68f8      	ldr	r0, [r7, #12]
 801b7e6:	f000 ff65 	bl	801c6b4 <OSPI_ConfigCmd>
 801b7ea:	4603      	mov	r3, r0
 801b7ec:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 801b7ee:	7ffb      	ldrb	r3, [r7, #31]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d140      	bne.n	801b876 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 801b7f4:	68bb      	ldr	r3, [r7, #8]
 801b7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d10e      	bne.n	801b81a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	9300      	str	r3, [sp, #0]
 801b800:	69bb      	ldr	r3, [r7, #24]
 801b802:	2201      	movs	r2, #1
 801b804:	2102      	movs	r1, #2
 801b806:	68f8      	ldr	r0, [r7, #12]
 801b808:	f000 ff14 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801b80c:	4603      	mov	r3, r0
 801b80e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	2202      	movs	r2, #2
 801b816:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 801b818:	e02d      	b.n	801b876 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801b81a:	68bb      	ldr	r3, [r7, #8]
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d103      	bne.n	801b82a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	2204      	movs	r2, #4
 801b826:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 801b828:	e025      	b.n	801b876 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 801b82a:	68bb      	ldr	r3, [r7, #8]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	2b01      	cmp	r3, #1
 801b830:	d10b      	bne.n	801b84a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b836:	2b24      	cmp	r3, #36	@ 0x24
 801b838:	d103      	bne.n	801b842 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 801b83a:	68fb      	ldr	r3, [r7, #12]
 801b83c:	2204      	movs	r2, #4
 801b83e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 801b840:	e019      	b.n	801b876 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	2214      	movs	r2, #20
 801b846:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 801b848:	e015      	b.n	801b876 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	2b02      	cmp	r3, #2
 801b850:	d111      	bne.n	801b876 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b856:	2b14      	cmp	r3, #20
 801b858:	d103      	bne.n	801b862 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 801b85a:	68fb      	ldr	r3, [r7, #12]
 801b85c:	2204      	movs	r2, #4
 801b85e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 801b860:	e009      	b.n	801b876 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 801b862:	68fb      	ldr	r3, [r7, #12]
 801b864:	2224      	movs	r2, #36	@ 0x24
 801b866:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 801b868:	e005      	b.n	801b876 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 801b86a:	2301      	movs	r3, #1
 801b86c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	2210      	movs	r2, #16
 801b872:	655a      	str	r2, [r3, #84]	@ 0x54
 801b874:	e000      	b.n	801b878 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 801b876:	bf00      	nop
  }

  /* Return function status */
  return status;
 801b878:	7ffb      	ldrb	r3, [r7, #31]
}
 801b87a:	4618      	mov	r0, r3
 801b87c:	3720      	adds	r7, #32
 801b87e:	46bd      	mov	sp, r7
 801b880:	bd80      	pop	{r7, pc}
	...

0801b884 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b08a      	sub	sp, #40	@ 0x28
 801b888:	af02      	add	r7, sp, #8
 801b88a:	60f8      	str	r0, [r7, #12]
 801b88c:	60b9      	str	r1, [r7, #8]
 801b88e:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 801b890:	2200      	movs	r2, #0
 801b892:	2110      	movs	r1, #16
 801b894:	4841      	ldr	r0, [pc, #260]	@ (801b99c <HAL_OSPI_Transmit+0x118>)
 801b896:	f7fe fc7d 	bl	801a194 <HAL_GPIO_WritePin>
	HAL_Delay(8);
 801b89a:	2008      	movs	r0, #8
 801b89c:	f7fa fdf2 	bl	8016484 <HAL_Delay>
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801b8a0:	f7fa fde4 	bl	801646c <HAL_GetTick>
 801b8a4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	681b      	ldr	r3, [r3, #0]
 801b8aa:	3350      	adds	r3, #80	@ 0x50
 801b8ac:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801b8ae:	68bb      	ldr	r3, [r7, #8]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d105      	bne.n	801b8c0 <HAL_OSPI_Transmit+0x3c>
  {
    status = HAL_ERROR;
 801b8b4:	2301      	movs	r3, #1
 801b8b6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	2208      	movs	r2, #8
 801b8bc:	655a      	str	r2, [r3, #84]	@ 0x54
 801b8be:	e05f      	b.n	801b980 <HAL_OSPI_Transmit+0xfc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8c4:	2b04      	cmp	r3, #4
 801b8c6:	d14e      	bne.n	801b966 <HAL_OSPI_Transmit+0xe2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b8ce:	1c5a      	adds	r2, r3, #1
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 801b8dc:	68fb      	ldr	r3, [r7, #12]
 801b8de:	68ba      	ldr	r2, [r7, #8]
 801b8e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801b8e2:	68fb      	ldr	r3, [r7, #12]
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	681a      	ldr	r2, [r3, #0]
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	681b      	ldr	r3, [r3, #0]
 801b8ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 801b8f0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	9300      	str	r3, [sp, #0]
 801b8f6:	69bb      	ldr	r3, [r7, #24]
 801b8f8:	2201      	movs	r2, #1
 801b8fa:	2104      	movs	r1, #4
 801b8fc:	68f8      	ldr	r0, [r7, #12]
 801b8fe:	f000 fe99 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801b902:	4603      	mov	r3, r0
 801b904:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801b906:	7ffb      	ldrb	r3, [r7, #31]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d113      	bne.n	801b934 <HAL_OSPI_Transmit+0xb0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b910:	781a      	ldrb	r2, [r3, #0]
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b91a:	1c5a      	adds	r2, r3, #1
 801b91c:	68fb      	ldr	r3, [r7, #12]
 801b91e:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b924:	1e5a      	subs	r2, r3, #1
 801b926:	68fb      	ldr	r3, [r7, #12]
 801b928:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d1df      	bne.n	801b8f2 <HAL_OSPI_Transmit+0x6e>
 801b932:	e000      	b.n	801b936 <HAL_OSPI_Transmit+0xb2>
          break;
 801b934:	bf00      	nop

      if (status == HAL_OK)
 801b936:	7ffb      	ldrb	r3, [r7, #31]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d121      	bne.n	801b980 <HAL_OSPI_Transmit+0xfc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	9300      	str	r3, [sp, #0]
 801b940:	69bb      	ldr	r3, [r7, #24]
 801b942:	2201      	movs	r2, #1
 801b944:	2102      	movs	r1, #2
 801b946:	68f8      	ldr	r0, [r7, #12]
 801b948:	f000 fe74 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801b94c:	4603      	mov	r3, r0
 801b94e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 801b950:	7ffb      	ldrb	r3, [r7, #31]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d114      	bne.n	801b980 <HAL_OSPI_Transmit+0xfc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	2202      	movs	r2, #2
 801b95c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	2202      	movs	r2, #2
 801b962:	651a      	str	r2, [r3, #80]	@ 0x50
 801b964:	e00c      	b.n	801b980 <HAL_OSPI_Transmit+0xfc>
        }
      }
    }
    else
    {
  		HAL_Delay(8);
 801b966:	2008      	movs	r0, #8
 801b968:	f7fa fd8c 	bl	8016484 <HAL_Delay>
		HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 801b96c:	2201      	movs	r2, #1
 801b96e:	2110      	movs	r1, #16
 801b970:	480a      	ldr	r0, [pc, #40]	@ (801b99c <HAL_OSPI_Transmit+0x118>)
 801b972:	f7fe fc0f 	bl	801a194 <HAL_GPIO_WritePin>

      status = HAL_ERROR;
 801b976:	2301      	movs	r3, #1
 801b978:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801b97a:	68fb      	ldr	r3, [r7, #12]
 801b97c:	2210      	movs	r2, #16
 801b97e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
	HAL_Delay(8);
 801b980:	2008      	movs	r0, #8
 801b982:	f7fa fd7f 	bl	8016484 <HAL_Delay>
	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 801b986:	2201      	movs	r2, #1
 801b988:	2110      	movs	r1, #16
 801b98a:	4804      	ldr	r0, [pc, #16]	@ (801b99c <HAL_OSPI_Transmit+0x118>)
 801b98c:	f7fe fc02 	bl	801a194 <HAL_GPIO_WritePin>
  /* Return function status */
  return status;
 801b990:	7ffb      	ldrb	r3, [r7, #31]
}
 801b992:	4618      	mov	r0, r3
 801b994:	3720      	adds	r7, #32
 801b996:	46bd      	mov	sp, r7
 801b998:	bd80      	pop	{r7, pc}
 801b99a:	bf00      	nop
 801b99c:	42020000 	.word	0x42020000

0801b9a0 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b08c      	sub	sp, #48	@ 0x30
 801b9a4:	af02      	add	r7, sp, #8
 801b9a6:	60f8      	str	r0, [r7, #12]
 801b9a8:	60b9      	str	r1, [r7, #8]
 801b9aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801b9ac:	f7fa fd5e 	bl	801646c <HAL_GetTick>
 801b9b0:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	681b      	ldr	r3, [r3, #0]
 801b9b6:	3350      	adds	r3, #80	@ 0x50
 801b9b8:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b9c0:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801b9ca:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d106      	bne.n	801b9e0 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	2208      	movs	r2, #8
 801b9dc:	655a      	str	r2, [r3, #84]	@ 0x54
 801b9de:	e0a2      	b.n	801bb26 <HAL_OSPI_Receive+0x186>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 801b9e0:	68fb      	ldr	r3, [r7, #12]
 801b9e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b9e4:	2b04      	cmp	r3, #4
 801b9e6:	f040 808b 	bne.w	801bb00 <HAL_OSPI_Receive+0x160>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b9f0:	1c5a      	adds	r2, r3, #1
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 801b9fe:	68fb      	ldr	r3, [r7, #12]
 801ba00:	68ba      	ldr	r2, [r7, #8]
 801ba02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 801ba0e:	68fb      	ldr	r3, [r7, #12]
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801ba16:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	68db      	ldr	r3, [r3, #12]
 801ba1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ba20:	d10c      	bne.n	801ba3c <HAL_OSPI_Receive+0x9c>
      {
    		HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 801ba22:	2200      	movs	r2, #0
 801ba24:	2110      	movs	r1, #16
 801ba26:	4847      	ldr	r0, [pc, #284]	@ (801bb44 <HAL_OSPI_Receive+0x1a4>)
 801ba28:	f7fe fbb4 	bl	801a194 <HAL_GPIO_WritePin>
    		HAL_Delay(8);
 801ba2c:	2008      	movs	r0, #8
 801ba2e:	f7fa fd29 	bl	8016484 <HAL_Delay>
        WRITE_REG(hospi->Instance->AR, addr_reg);
 801ba32:	68fb      	ldr	r3, [r7, #12]
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	69ba      	ldr	r2, [r7, #24]
 801ba38:	649a      	str	r2, [r3, #72]	@ 0x48
 801ba3a:	e021      	b.n	801ba80 <HAL_OSPI_Receive+0xe0>

      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801ba44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d00c      	beq.n	801ba66 <HAL_OSPI_Receive+0xc6>
        {
        	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 801ba4c:	2200      	movs	r2, #0
 801ba4e:	2110      	movs	r1, #16
 801ba50:	483c      	ldr	r0, [pc, #240]	@ (801bb44 <HAL_OSPI_Receive+0x1a4>)
 801ba52:	f7fe fb9f 	bl	801a194 <HAL_GPIO_WritePin>
        	HAL_Delay(8);
 801ba56:	2008      	movs	r0, #8
 801ba58:	f7fa fd14 	bl	8016484 <HAL_Delay>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	69ba      	ldr	r2, [r7, #24]
 801ba62:	649a      	str	r2, [r3, #72]	@ 0x48
 801ba64:	e00c      	b.n	801ba80 <HAL_OSPI_Receive+0xe0>

        }
        else
        {
        	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 801ba66:	2200      	movs	r2, #0
 801ba68:	2110      	movs	r1, #16
 801ba6a:	4836      	ldr	r0, [pc, #216]	@ (801bb44 <HAL_OSPI_Receive+0x1a4>)
 801ba6c:	f7fe fb92 	bl	801a194 <HAL_GPIO_WritePin>
        	HAL_Delay(8);
 801ba70:	2008      	movs	r0, #8
 801ba72:	f7fa fd07 	bl	8016484 <HAL_Delay>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	697a      	ldr	r2, [r7, #20]
 801ba7c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	9300      	str	r3, [sp, #0]
 801ba84:	6a3b      	ldr	r3, [r7, #32]
 801ba86:	2201      	movs	r2, #1
 801ba88:	2106      	movs	r1, #6
 801ba8a:	68f8      	ldr	r0, [r7, #12]
 801ba8c:	f000 fdd2 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801ba90:	4603      	mov	r3, r0
 801ba92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 801ba96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d114      	bne.n	801bac8 <HAL_OSPI_Receive+0x128>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801baa2:	69fa      	ldr	r2, [r7, #28]
 801baa4:	7812      	ldrb	r2, [r2, #0]
 801baa6:	b2d2      	uxtb	r2, r2
 801baa8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 801baaa:	68fb      	ldr	r3, [r7, #12]
 801baac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801baae:	1c5a      	adds	r2, r3, #1
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bab8:	1e5a      	subs	r2, r3, #1
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	649a      	str	r2, [r3, #72]	@ 0x48
      } while (hospi->XferCount > 0U);
 801babe:	68fb      	ldr	r3, [r7, #12]
 801bac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d1dc      	bne.n	801ba80 <HAL_OSPI_Receive+0xe0>
 801bac6:	e000      	b.n	801baca <HAL_OSPI_Receive+0x12a>
          break;
 801bac8:	bf00      	nop

      if (status == HAL_OK)
 801baca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d129      	bne.n	801bb26 <HAL_OSPI_Receive+0x186>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	9300      	str	r3, [sp, #0]
 801bad6:	6a3b      	ldr	r3, [r7, #32]
 801bad8:	2201      	movs	r2, #1
 801bada:	2102      	movs	r1, #2
 801badc:	68f8      	ldr	r0, [r7, #12]
 801bade:	f000 fda9 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801bae2:	4603      	mov	r3, r0
 801bae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 801bae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801baec:	2b00      	cmp	r3, #0
 801baee:	d11a      	bne.n	801bb26 <HAL_OSPI_Receive+0x186>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	2202      	movs	r2, #2
 801baf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 801baf8:	68fb      	ldr	r3, [r7, #12]
 801bafa:	2202      	movs	r2, #2
 801bafc:	651a      	str	r2, [r3, #80]	@ 0x50
 801bafe:	e012      	b.n	801bb26 <HAL_OSPI_Receive+0x186>
        }
      }
    }
    else
    {
		HAL_Delay(8);
 801bb00:	2008      	movs	r0, #8
 801bb02:	f7fa fcbf 	bl	8016484 <HAL_Delay>
		HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 801bb06:	2201      	movs	r2, #1
 801bb08:	2110      	movs	r1, #16
 801bb0a:	480e      	ldr	r0, [pc, #56]	@ (801bb44 <HAL_OSPI_Receive+0x1a4>)
 801bb0c:	f7fe fb42 	bl	801a194 <HAL_GPIO_WritePin>
      status = HAL_ERROR;
 801bb10:	2301      	movs	r3, #1
 801bb12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	2210      	movs	r2, #16
 801bb1a:	655a      	str	r2, [r3, #84]	@ 0x54
		HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 801bb1c:	2201      	movs	r2, #1
 801bb1e:	2110      	movs	r1, #16
 801bb20:	4808      	ldr	r0, [pc, #32]	@ (801bb44 <HAL_OSPI_Receive+0x1a4>)
 801bb22:	f7fe fb37 	bl	801a194 <HAL_GPIO_WritePin>
    }
  }
	HAL_Delay(8);
 801bb26:	2008      	movs	r0, #8
 801bb28:	f7fa fcac 	bl	8016484 <HAL_Delay>
	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 801bb2c:	2201      	movs	r2, #1
 801bb2e:	2110      	movs	r1, #16
 801bb30:	4804      	ldr	r0, [pc, #16]	@ (801bb44 <HAL_OSPI_Receive+0x1a4>)
 801bb32:	f7fe fb2f 	bl	801a194 <HAL_GPIO_WritePin>
  /* Return function status */
  return status;
 801bb36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801bb3a:	4618      	mov	r0, r3
 801bb3c:	3728      	adds	r7, #40	@ 0x28
 801bb3e:	46bd      	mov	sp, r7
 801bb40:	bd80      	pop	{r7, pc}
 801bb42:	bf00      	nop
 801bb44:	42020000 	.word	0x42020000

0801bb48 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b088      	sub	sp, #32
 801bb4c:	af02      	add	r7, sp, #8
 801bb4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bb50:	2300      	movs	r3, #0
 801bb52:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 801bb54:	f7fa fc8a 	bl	801646c <HAL_GetTick>
 801bb58:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bb5e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 801bb60:	68fb      	ldr	r3, [r7, #12]
 801bb62:	f003 0308 	and.w	r3, r3, #8
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d104      	bne.n	801bb74 <HAL_OSPI_Abort+0x2c>
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	f003 0304 	and.w	r3, r3, #4
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d052      	beq.n	801bc1a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	f003 0304 	and.w	r3, r3, #4
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d014      	beq.n	801bbac <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	681a      	ldr	r2, [r3, #0]
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	f022 0204 	bic.w	r2, r2, #4
 801bb90:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bb96:	4618      	mov	r0, r3
 801bb98:	f7fd f8e6 	bl	8018d68 <HAL_DMA_Abort>
 801bb9c:	4603      	mov	r3, r0
 801bb9e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 801bba0:	7dfb      	ldrb	r3, [r7, #23]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d002      	beq.n	801bbac <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	2204      	movs	r2, #4
 801bbaa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	6a1b      	ldr	r3, [r3, #32]
 801bbb2:	f003 0320 	and.w	r3, r3, #32
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d02b      	beq.n	801bc12 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	681a      	ldr	r2, [r3, #0]
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	f042 0202 	orr.w	r2, r2, #2
 801bbc8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bbce:	9300      	str	r3, [sp, #0]
 801bbd0:	693b      	ldr	r3, [r7, #16]
 801bbd2:	2201      	movs	r2, #1
 801bbd4:	2102      	movs	r1, #2
 801bbd6:	6878      	ldr	r0, [r7, #4]
 801bbd8:	f000 fd2c 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801bbdc:	4603      	mov	r3, r0
 801bbde:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 801bbe0:	7dfb      	ldrb	r3, [r7, #23]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d11f      	bne.n	801bc26 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	2202      	movs	r2, #2
 801bbec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bbf2:	9300      	str	r3, [sp, #0]
 801bbf4:	693b      	ldr	r3, [r7, #16]
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	2120      	movs	r1, #32
 801bbfa:	6878      	ldr	r0, [r7, #4]
 801bbfc:	f000 fd1a 	bl	801c634 <OSPI_WaitFlagStateUntilTimeout>
 801bc00:	4603      	mov	r3, r0
 801bc02:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801bc04:	7dfb      	ldrb	r3, [r7, #23]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	d10d      	bne.n	801bc26 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	2202      	movs	r2, #2
 801bc0e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801bc10:	e009      	b.n	801bc26 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 801bc12:	687b      	ldr	r3, [r7, #4]
 801bc14:	2202      	movs	r2, #2
 801bc16:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801bc18:	e005      	b.n	801bc26 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	2210      	movs	r2, #16
 801bc22:	655a      	str	r2, [r3, #84]	@ 0x54
 801bc24:	e000      	b.n	801bc28 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 801bc26:	bf00      	nop
  }

  /* Return function status */
  return status;
 801bc28:	7dfb      	ldrb	r3, [r7, #23]
}
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	3718      	adds	r7, #24
 801bc2e:	46bd      	mov	sp, r7
 801bc30:	bd80      	pop	{r7, pc}

0801bc32 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 801bc32:	b480      	push	{r7}
 801bc34:	b083      	sub	sp, #12
 801bc36:	af00      	add	r7, sp, #0
 801bc38:	6078      	str	r0, [r7, #4]
 801bc3a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	683a      	ldr	r2, [r7, #0]
 801bc40:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 801bc42:	2300      	movs	r3, #0
}
 801bc44:	4618      	mov	r0, r3
 801bc46:	370c      	adds	r7, #12
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc4e:	4770      	bx	lr

0801bc50 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b094      	sub	sp, #80	@ 0x50
 801bc54:	af00      	add	r7, sp, #0
 801bc56:	60f8      	str	r0, [r7, #12]
 801bc58:	60b9      	str	r1, [r7, #8]
 801bc5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 801bc62:	2300      	movs	r3, #0
 801bc64:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	4a9d      	ldr	r2, [pc, #628]	@ (801bee4 <HAL_OSPIM_Config+0x294>)
 801bc6e:	4293      	cmp	r3, r2
 801bc70:	d105      	bne.n	801bc7e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 801bc72:	2300      	movs	r3, #0
 801bc74:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 801bc76:	2301      	movs	r3, #1
 801bc78:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801bc7c:	e004      	b.n	801bc88 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 801bc7e:	2301      	movs	r3, #1
 801bc80:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 801bc82:	2300      	movs	r3, #0
 801bc84:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 801bc88:	2300      	movs	r3, #0
 801bc8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801bc8e:	e01d      	b.n	801bccc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 801bc90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801bc94:	3301      	adds	r3, #1
 801bc96:	b2d8      	uxtb	r0, r3
 801bc98:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801bc9c:	f107 0114 	add.w	r1, r7, #20
 801bca0:	4613      	mov	r3, r2
 801bca2:	005b      	lsls	r3, r3, #1
 801bca4:	4413      	add	r3, r2
 801bca6:	00db      	lsls	r3, r3, #3
 801bca8:	440b      	add	r3, r1
 801bcaa:	4619      	mov	r1, r3
 801bcac:	f000 fe8e 	bl	801c9cc <OSPIM_GetConfig>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d005      	beq.n	801bcc2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 801bcb6:	2301      	movs	r3, #1
 801bcb8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	2208      	movs	r2, #8
 801bcc0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 801bcc2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801bcc6:	3301      	adds	r3, #1
 801bcc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801bccc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801bcd0:	2b01      	cmp	r3, #1
 801bcd2:	d9dd      	bls.n	801bc90 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 801bcd4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	f040 849e 	bne.w	801c61a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 801bcde:	4b81      	ldr	r3, [pc, #516]	@ (801bee4 <HAL_OSPIM_Config+0x294>)
 801bce0:	681b      	ldr	r3, [r3, #0]
 801bce2:	f003 0301 	and.w	r3, r3, #1
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d00b      	beq.n	801bd02 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 801bcea:	4b7e      	ldr	r3, [pc, #504]	@ (801bee4 <HAL_OSPIM_Config+0x294>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	4a7d      	ldr	r2, [pc, #500]	@ (801bee4 <HAL_OSPIM_Config+0x294>)
 801bcf0:	f023 0301 	bic.w	r3, r3, #1
 801bcf4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 801bcf6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801bcfa:	f043 0301 	orr.w	r3, r3, #1
 801bcfe:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 801bd02:	4b79      	ldr	r3, [pc, #484]	@ (801bee8 <HAL_OSPIM_Config+0x298>)
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	f003 0301 	and.w	r3, r3, #1
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d00b      	beq.n	801bd26 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 801bd0e:	4b76      	ldr	r3, [pc, #472]	@ (801bee8 <HAL_OSPIM_Config+0x298>)
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	4a75      	ldr	r2, [pc, #468]	@ (801bee8 <HAL_OSPIM_Config+0x298>)
 801bd14:	f023 0301 	bic.w	r3, r3, #1
 801bd18:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 801bd1a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801bd1e:	f043 0302 	orr.w	r3, r3, #2
 801bd22:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 801bd26:	4971      	ldr	r1, [pc, #452]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bd28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bd2a:	4613      	mov	r3, r2
 801bd2c:	005b      	lsls	r3, r3, #1
 801bd2e:	4413      	add	r3, r2
 801bd30:	00db      	lsls	r3, r3, #3
 801bd32:	3350      	adds	r3, #80	@ 0x50
 801bd34:	443b      	add	r3, r7
 801bd36:	3b34      	subs	r3, #52	@ 0x34
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	3b01      	subs	r3, #1
 801bd3c:	009b      	lsls	r3, r3, #2
 801bd3e:	440b      	add	r3, r1
 801bd40:	6859      	ldr	r1, [r3, #4]
 801bd42:	486a      	ldr	r0, [pc, #424]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bd44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bd46:	4613      	mov	r3, r2
 801bd48:	005b      	lsls	r3, r3, #1
 801bd4a:	4413      	add	r3, r2
 801bd4c:	00db      	lsls	r3, r3, #3
 801bd4e:	3350      	adds	r3, #80	@ 0x50
 801bd50:	443b      	add	r3, r7
 801bd52:	3b34      	subs	r3, #52	@ 0x34
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	3b01      	subs	r3, #1
 801bd58:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 801bd5c:	009b      	lsls	r3, r3, #2
 801bd5e:	4403      	add	r3, r0
 801bd60:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 801bd62:	4b62      	ldr	r3, [pc, #392]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	f003 0301 	and.w	r3, r3, #1
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	f000 80c0 	beq.w	801bef0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 801bd70:	4b5e      	ldr	r3, [pc, #376]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	4a5d      	ldr	r2, [pc, #372]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bd76:	f023 0301 	bic.w	r3, r3, #1
 801bd7a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 801bd7c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801bd80:	2b01      	cmp	r3, #1
 801bd82:	f040 8162 	bne.w	801c04a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 801bd86:	4959      	ldr	r1, [pc, #356]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bd88:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801bd8c:	4613      	mov	r3, r2
 801bd8e:	005b      	lsls	r3, r3, #1
 801bd90:	4413      	add	r3, r2
 801bd92:	00db      	lsls	r3, r3, #3
 801bd94:	3350      	adds	r3, #80	@ 0x50
 801bd96:	443b      	add	r3, r7
 801bd98:	3b3c      	subs	r3, #60	@ 0x3c
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	3b01      	subs	r3, #1
 801bd9e:	009b      	lsls	r3, r3, #2
 801bda0:	440b      	add	r3, r1
 801bda2:	6859      	ldr	r1, [r3, #4]
 801bda4:	4851      	ldr	r0, [pc, #324]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bda6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801bdaa:	4613      	mov	r3, r2
 801bdac:	005b      	lsls	r3, r3, #1
 801bdae:	4413      	add	r3, r2
 801bdb0:	00db      	lsls	r3, r3, #3
 801bdb2:	3350      	adds	r3, #80	@ 0x50
 801bdb4:	443b      	add	r3, r7
 801bdb6:	3b3c      	subs	r3, #60	@ 0x3c
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	3b01      	subs	r3, #1
 801bdbc:	f041 0202 	orr.w	r2, r1, #2
 801bdc0:	009b      	lsls	r3, r3, #2
 801bdc2:	4403      	add	r3, r0
 801bdc4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 801bdc6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801bdca:	4613      	mov	r3, r2
 801bdcc:	005b      	lsls	r3, r3, #1
 801bdce:	4413      	add	r3, r2
 801bdd0:	00db      	lsls	r3, r3, #3
 801bdd2:	3350      	adds	r3, #80	@ 0x50
 801bdd4:	443b      	add	r3, r7
 801bdd6:	3b38      	subs	r3, #56	@ 0x38
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d01f      	beq.n	801be1e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 801bdde:	4943      	ldr	r1, [pc, #268]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bde0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801bde4:	4613      	mov	r3, r2
 801bde6:	005b      	lsls	r3, r3, #1
 801bde8:	4413      	add	r3, r2
 801bdea:	00db      	lsls	r3, r3, #3
 801bdec:	3350      	adds	r3, #80	@ 0x50
 801bdee:	443b      	add	r3, r7
 801bdf0:	3b38      	subs	r3, #56	@ 0x38
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	3b01      	subs	r3, #1
 801bdf6:	009b      	lsls	r3, r3, #2
 801bdf8:	440b      	add	r3, r1
 801bdfa:	6859      	ldr	r1, [r3, #4]
 801bdfc:	483b      	ldr	r0, [pc, #236]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bdfe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801be02:	4613      	mov	r3, r2
 801be04:	005b      	lsls	r3, r3, #1
 801be06:	4413      	add	r3, r2
 801be08:	00db      	lsls	r3, r3, #3
 801be0a:	3350      	adds	r3, #80	@ 0x50
 801be0c:	443b      	add	r3, r7
 801be0e:	3b38      	subs	r3, #56	@ 0x38
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	3b01      	subs	r3, #1
 801be14:	f041 0220 	orr.w	r2, r1, #32
 801be18:	009b      	lsls	r3, r3, #2
 801be1a:	4403      	add	r3, r0
 801be1c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801be1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801be22:	4613      	mov	r3, r2
 801be24:	005b      	lsls	r3, r3, #1
 801be26:	4413      	add	r3, r2
 801be28:	00db      	lsls	r3, r3, #3
 801be2a:	3350      	adds	r3, #80	@ 0x50
 801be2c:	443b      	add	r3, r7
 801be2e:	3b30      	subs	r3, #48	@ 0x30
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d023      	beq.n	801be7e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 801be36:	492d      	ldr	r1, [pc, #180]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801be38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801be3c:	4613      	mov	r3, r2
 801be3e:	005b      	lsls	r3, r3, #1
 801be40:	4413      	add	r3, r2
 801be42:	00db      	lsls	r3, r3, #3
 801be44:	3350      	adds	r3, #80	@ 0x50
 801be46:	443b      	add	r3, r7
 801be48:	3b30      	subs	r3, #48	@ 0x30
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	3b01      	subs	r3, #1
 801be4e:	f003 0301 	and.w	r3, r3, #1
 801be52:	009b      	lsls	r3, r3, #2
 801be54:	440b      	add	r3, r1
 801be56:	6859      	ldr	r1, [r3, #4]
 801be58:	4824      	ldr	r0, [pc, #144]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801be5a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801be5e:	4613      	mov	r3, r2
 801be60:	005b      	lsls	r3, r3, #1
 801be62:	4413      	add	r3, r2
 801be64:	00db      	lsls	r3, r3, #3
 801be66:	3350      	adds	r3, #80	@ 0x50
 801be68:	443b      	add	r3, r7
 801be6a:	3b30      	subs	r3, #48	@ 0x30
 801be6c:	681b      	ldr	r3, [r3, #0]
 801be6e:	3b01      	subs	r3, #1
 801be70:	f003 0301 	and.w	r3, r3, #1
 801be74:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 801be78:	009b      	lsls	r3, r3, #2
 801be7a:	4403      	add	r3, r0
 801be7c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801be7e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801be82:	4613      	mov	r3, r2
 801be84:	005b      	lsls	r3, r3, #1
 801be86:	4413      	add	r3, r2
 801be88:	00db      	lsls	r3, r3, #3
 801be8a:	3350      	adds	r3, #80	@ 0x50
 801be8c:	443b      	add	r3, r7
 801be8e:	3b2c      	subs	r3, #44	@ 0x2c
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	2b00      	cmp	r3, #0
 801be94:	f000 80d9 	beq.w	801c04a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 801be98:	4914      	ldr	r1, [pc, #80]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801be9a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801be9e:	4613      	mov	r3, r2
 801bea0:	005b      	lsls	r3, r3, #1
 801bea2:	4413      	add	r3, r2
 801bea4:	00db      	lsls	r3, r3, #3
 801bea6:	3350      	adds	r3, #80	@ 0x50
 801bea8:	443b      	add	r3, r7
 801beaa:	3b2c      	subs	r3, #44	@ 0x2c
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	3b01      	subs	r3, #1
 801beb0:	f003 0301 	and.w	r3, r3, #1
 801beb4:	009b      	lsls	r3, r3, #2
 801beb6:	440b      	add	r3, r1
 801beb8:	6859      	ldr	r1, [r3, #4]
 801beba:	480c      	ldr	r0, [pc, #48]	@ (801beec <HAL_OSPIM_Config+0x29c>)
 801bebc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801bec0:	4613      	mov	r3, r2
 801bec2:	005b      	lsls	r3, r3, #1
 801bec4:	4413      	add	r3, r2
 801bec6:	00db      	lsls	r3, r3, #3
 801bec8:	3350      	adds	r3, #80	@ 0x50
 801beca:	443b      	add	r3, r7
 801becc:	3b2c      	subs	r3, #44	@ 0x2c
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	3b01      	subs	r3, #1
 801bed2:	f003 0301 	and.w	r3, r3, #1
 801bed6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 801beda:	009b      	lsls	r3, r3, #2
 801bedc:	4403      	add	r3, r0
 801bede:	605a      	str	r2, [r3, #4]
 801bee0:	e0b3      	b.n	801c04a <HAL_OSPIM_Config+0x3fa>
 801bee2:	bf00      	nop
 801bee4:	420d1400 	.word	0x420d1400
 801bee8:	420d2400 	.word	0x420d2400
 801beec:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 801bef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bef2:	4613      	mov	r3, r2
 801bef4:	005b      	lsls	r3, r3, #1
 801bef6:	4413      	add	r3, r2
 801bef8:	00db      	lsls	r3, r3, #3
 801befa:	3350      	adds	r3, #80	@ 0x50
 801befc:	443b      	add	r3, r7
 801befe:	3b3c      	subs	r3, #60	@ 0x3c
 801bf00:	681b      	ldr	r3, [r3, #0]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	f000 80a1 	beq.w	801c04a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 801bf08:	4993      	ldr	r1, [pc, #588]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801bf0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf0c:	4613      	mov	r3, r2
 801bf0e:	005b      	lsls	r3, r3, #1
 801bf10:	4413      	add	r3, r2
 801bf12:	00db      	lsls	r3, r3, #3
 801bf14:	3350      	adds	r3, #80	@ 0x50
 801bf16:	443b      	add	r3, r7
 801bf18:	3b3c      	subs	r3, #60	@ 0x3c
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	3b01      	subs	r3, #1
 801bf1e:	009b      	lsls	r3, r3, #2
 801bf20:	440b      	add	r3, r1
 801bf22:	6859      	ldr	r1, [r3, #4]
 801bf24:	488c      	ldr	r0, [pc, #560]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801bf26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf28:	4613      	mov	r3, r2
 801bf2a:	005b      	lsls	r3, r3, #1
 801bf2c:	4413      	add	r3, r2
 801bf2e:	00db      	lsls	r3, r3, #3
 801bf30:	3350      	adds	r3, #80	@ 0x50
 801bf32:	443b      	add	r3, r7
 801bf34:	3b3c      	subs	r3, #60	@ 0x3c
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	3b01      	subs	r3, #1
 801bf3a:	f021 0201 	bic.w	r2, r1, #1
 801bf3e:	009b      	lsls	r3, r3, #2
 801bf40:	4403      	add	r3, r0
 801bf42:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 801bf44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf46:	4613      	mov	r3, r2
 801bf48:	005b      	lsls	r3, r3, #1
 801bf4a:	4413      	add	r3, r2
 801bf4c:	00db      	lsls	r3, r3, #3
 801bf4e:	3350      	adds	r3, #80	@ 0x50
 801bf50:	443b      	add	r3, r7
 801bf52:	3b38      	subs	r3, #56	@ 0x38
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d01d      	beq.n	801bf96 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 801bf5a:	497f      	ldr	r1, [pc, #508]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801bf5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf5e:	4613      	mov	r3, r2
 801bf60:	005b      	lsls	r3, r3, #1
 801bf62:	4413      	add	r3, r2
 801bf64:	00db      	lsls	r3, r3, #3
 801bf66:	3350      	adds	r3, #80	@ 0x50
 801bf68:	443b      	add	r3, r7
 801bf6a:	3b38      	subs	r3, #56	@ 0x38
 801bf6c:	681b      	ldr	r3, [r3, #0]
 801bf6e:	3b01      	subs	r3, #1
 801bf70:	009b      	lsls	r3, r3, #2
 801bf72:	440b      	add	r3, r1
 801bf74:	6859      	ldr	r1, [r3, #4]
 801bf76:	4878      	ldr	r0, [pc, #480]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801bf78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf7a:	4613      	mov	r3, r2
 801bf7c:	005b      	lsls	r3, r3, #1
 801bf7e:	4413      	add	r3, r2
 801bf80:	00db      	lsls	r3, r3, #3
 801bf82:	3350      	adds	r3, #80	@ 0x50
 801bf84:	443b      	add	r3, r7
 801bf86:	3b38      	subs	r3, #56	@ 0x38
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	3b01      	subs	r3, #1
 801bf8c:	f021 0210 	bic.w	r2, r1, #16
 801bf90:	009b      	lsls	r3, r3, #2
 801bf92:	4403      	add	r3, r0
 801bf94:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801bf96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bf98:	4613      	mov	r3, r2
 801bf9a:	005b      	lsls	r3, r3, #1
 801bf9c:	4413      	add	r3, r2
 801bf9e:	00db      	lsls	r3, r3, #3
 801bfa0:	3350      	adds	r3, #80	@ 0x50
 801bfa2:	443b      	add	r3, r7
 801bfa4:	3b30      	subs	r3, #48	@ 0x30
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d021      	beq.n	801bff0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 801bfac:	496a      	ldr	r1, [pc, #424]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801bfae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bfb0:	4613      	mov	r3, r2
 801bfb2:	005b      	lsls	r3, r3, #1
 801bfb4:	4413      	add	r3, r2
 801bfb6:	00db      	lsls	r3, r3, #3
 801bfb8:	3350      	adds	r3, #80	@ 0x50
 801bfba:	443b      	add	r3, r7
 801bfbc:	3b30      	subs	r3, #48	@ 0x30
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	3b01      	subs	r3, #1
 801bfc2:	f003 0301 	and.w	r3, r3, #1
 801bfc6:	009b      	lsls	r3, r3, #2
 801bfc8:	440b      	add	r3, r1
 801bfca:	6859      	ldr	r1, [r3, #4]
 801bfcc:	4862      	ldr	r0, [pc, #392]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801bfce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bfd0:	4613      	mov	r3, r2
 801bfd2:	005b      	lsls	r3, r3, #1
 801bfd4:	4413      	add	r3, r2
 801bfd6:	00db      	lsls	r3, r3, #3
 801bfd8:	3350      	adds	r3, #80	@ 0x50
 801bfda:	443b      	add	r3, r7
 801bfdc:	3b30      	subs	r3, #48	@ 0x30
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	3b01      	subs	r3, #1
 801bfe2:	f003 0301 	and.w	r3, r3, #1
 801bfe6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 801bfea:	009b      	lsls	r3, r3, #2
 801bfec:	4403      	add	r3, r0
 801bfee:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801bff0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bff2:	4613      	mov	r3, r2
 801bff4:	005b      	lsls	r3, r3, #1
 801bff6:	4413      	add	r3, r2
 801bff8:	00db      	lsls	r3, r3, #3
 801bffa:	3350      	adds	r3, #80	@ 0x50
 801bffc:	443b      	add	r3, r7
 801bffe:	3b2c      	subs	r3, #44	@ 0x2c
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	2b00      	cmp	r3, #0
 801c004:	d021      	beq.n	801c04a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 801c006:	4954      	ldr	r1, [pc, #336]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801c008:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c00a:	4613      	mov	r3, r2
 801c00c:	005b      	lsls	r3, r3, #1
 801c00e:	4413      	add	r3, r2
 801c010:	00db      	lsls	r3, r3, #3
 801c012:	3350      	adds	r3, #80	@ 0x50
 801c014:	443b      	add	r3, r7
 801c016:	3b2c      	subs	r3, #44	@ 0x2c
 801c018:	681b      	ldr	r3, [r3, #0]
 801c01a:	3b01      	subs	r3, #1
 801c01c:	f003 0301 	and.w	r3, r3, #1
 801c020:	009b      	lsls	r3, r3, #2
 801c022:	440b      	add	r3, r1
 801c024:	6859      	ldr	r1, [r3, #4]
 801c026:	484c      	ldr	r0, [pc, #304]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801c028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801c02a:	4613      	mov	r3, r2
 801c02c:	005b      	lsls	r3, r3, #1
 801c02e:	4413      	add	r3, r2
 801c030:	00db      	lsls	r3, r3, #3
 801c032:	3350      	adds	r3, #80	@ 0x50
 801c034:	443b      	add	r3, r7
 801c036:	3b2c      	subs	r3, #44	@ 0x2c
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	3b01      	subs	r3, #1
 801c03c:	f003 0301 	and.w	r3, r3, #1
 801c040:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 801c044:	009b      	lsls	r3, r3, #2
 801c046:	4403      	add	r3, r0
 801c048:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 801c04a:	68bb      	ldr	r3, [r7, #8]
 801c04c:	6819      	ldr	r1, [r3, #0]
 801c04e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c052:	4613      	mov	r3, r2
 801c054:	005b      	lsls	r3, r3, #1
 801c056:	4413      	add	r3, r2
 801c058:	00db      	lsls	r3, r3, #3
 801c05a:	3350      	adds	r3, #80	@ 0x50
 801c05c:	443b      	add	r3, r7
 801c05e:	3b3c      	subs	r3, #60	@ 0x3c
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	4299      	cmp	r1, r3
 801c064:	d038      	beq.n	801c0d8 <HAL_OSPIM_Config+0x488>
 801c066:	68bb      	ldr	r3, [r7, #8]
 801c068:	6859      	ldr	r1, [r3, #4]
 801c06a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c06e:	4613      	mov	r3, r2
 801c070:	005b      	lsls	r3, r3, #1
 801c072:	4413      	add	r3, r2
 801c074:	00db      	lsls	r3, r3, #3
 801c076:	3350      	adds	r3, #80	@ 0x50
 801c078:	443b      	add	r3, r7
 801c07a:	3b38      	subs	r3, #56	@ 0x38
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	4299      	cmp	r1, r3
 801c080:	d02a      	beq.n	801c0d8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 801c082:	68bb      	ldr	r3, [r7, #8]
 801c084:	6899      	ldr	r1, [r3, #8]
 801c086:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c08a:	4613      	mov	r3, r2
 801c08c:	005b      	lsls	r3, r3, #1
 801c08e:	4413      	add	r3, r2
 801c090:	00db      	lsls	r3, r3, #3
 801c092:	3350      	adds	r3, #80	@ 0x50
 801c094:	443b      	add	r3, r7
 801c096:	3b34      	subs	r3, #52	@ 0x34
 801c098:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 801c09a:	4299      	cmp	r1, r3
 801c09c:	d01c      	beq.n	801c0d8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 801c09e:	68bb      	ldr	r3, [r7, #8]
 801c0a0:	68d9      	ldr	r1, [r3, #12]
 801c0a2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c0a6:	4613      	mov	r3, r2
 801c0a8:	005b      	lsls	r3, r3, #1
 801c0aa:	4413      	add	r3, r2
 801c0ac:	00db      	lsls	r3, r3, #3
 801c0ae:	3350      	adds	r3, #80	@ 0x50
 801c0b0:	443b      	add	r3, r7
 801c0b2:	3b30      	subs	r3, #48	@ 0x30
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	4299      	cmp	r1, r3
 801c0b8:	d00e      	beq.n	801c0d8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 801c0ba:	68bb      	ldr	r3, [r7, #8]
 801c0bc:	6919      	ldr	r1, [r3, #16]
 801c0be:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c0c2:	4613      	mov	r3, r2
 801c0c4:	005b      	lsls	r3, r3, #1
 801c0c6:	4413      	add	r3, r2
 801c0c8:	00db      	lsls	r3, r3, #3
 801c0ca:	3350      	adds	r3, #80	@ 0x50
 801c0cc:	443b      	add	r3, r7
 801c0ce:	3b2c      	subs	r3, #44	@ 0x2c
 801c0d0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 801c0d2:	4299      	cmp	r1, r3
 801c0d4:	f040 810e 	bne.w	801c2f4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 801c0d8:	68bb      	ldr	r3, [r7, #8]
 801c0da:	6819      	ldr	r1, [r3, #0]
 801c0dc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c0e0:	4613      	mov	r3, r2
 801c0e2:	005b      	lsls	r3, r3, #1
 801c0e4:	4413      	add	r3, r2
 801c0e6:	00db      	lsls	r3, r3, #3
 801c0e8:	3350      	adds	r3, #80	@ 0x50
 801c0ea:	443b      	add	r3, r7
 801c0ec:	3b3c      	subs	r3, #60	@ 0x3c
 801c0ee:	681b      	ldr	r3, [r3, #0]
 801c0f0:	4299      	cmp	r1, r3
 801c0f2:	d133      	bne.n	801c15c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 801c0f4:	68bb      	ldr	r3, [r7, #8]
 801c0f6:	6859      	ldr	r1, [r3, #4]
 801c0f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c0fc:	4613      	mov	r3, r2
 801c0fe:	005b      	lsls	r3, r3, #1
 801c100:	4413      	add	r3, r2
 801c102:	00db      	lsls	r3, r3, #3
 801c104:	3350      	adds	r3, #80	@ 0x50
 801c106:	443b      	add	r3, r7
 801c108:	3b38      	subs	r3, #56	@ 0x38
 801c10a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 801c10c:	4299      	cmp	r1, r3
 801c10e:	d125      	bne.n	801c15c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 801c110:	68bb      	ldr	r3, [r7, #8]
 801c112:	68d9      	ldr	r1, [r3, #12]
 801c114:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c118:	4613      	mov	r3, r2
 801c11a:	005b      	lsls	r3, r3, #1
 801c11c:	4413      	add	r3, r2
 801c11e:	00db      	lsls	r3, r3, #3
 801c120:	3350      	adds	r3, #80	@ 0x50
 801c122:	443b      	add	r3, r7
 801c124:	3b30      	subs	r3, #48	@ 0x30
 801c126:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 801c128:	4299      	cmp	r1, r3
 801c12a:	d117      	bne.n	801c15c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 801c12c:	68bb      	ldr	r3, [r7, #8]
 801c12e:	6919      	ldr	r1, [r3, #16]
 801c130:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c134:	4613      	mov	r3, r2
 801c136:	005b      	lsls	r3, r3, #1
 801c138:	4413      	add	r3, r2
 801c13a:	00db      	lsls	r3, r3, #3
 801c13c:	3350      	adds	r3, #80	@ 0x50
 801c13e:	443b      	add	r3, r7
 801c140:	3b2c      	subs	r3, #44	@ 0x2c
 801c142:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 801c144:	4299      	cmp	r1, r3
 801c146:	d109      	bne.n	801c15c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 801c148:	4b03      	ldr	r3, [pc, #12]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	4a02      	ldr	r2, [pc, #8]	@ (801c158 <HAL_OSPIM_Config+0x508>)
 801c14e:	f043 0301 	orr.w	r3, r3, #1
 801c152:	6013      	str	r3, [r2, #0]
 801c154:	e0ce      	b.n	801c2f4 <HAL_OSPIM_Config+0x6a4>
 801c156:	bf00      	nop
 801c158:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 801c15c:	49a4      	ldr	r1, [pc, #656]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c15e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c162:	4613      	mov	r3, r2
 801c164:	005b      	lsls	r3, r3, #1
 801c166:	4413      	add	r3, r2
 801c168:	00db      	lsls	r3, r3, #3
 801c16a:	3350      	adds	r3, #80	@ 0x50
 801c16c:	443b      	add	r3, r7
 801c16e:	3b3c      	subs	r3, #60	@ 0x3c
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	3b01      	subs	r3, #1
 801c174:	009b      	lsls	r3, r3, #2
 801c176:	440b      	add	r3, r1
 801c178:	6859      	ldr	r1, [r3, #4]
 801c17a:	489d      	ldr	r0, [pc, #628]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c17c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c180:	4613      	mov	r3, r2
 801c182:	005b      	lsls	r3, r3, #1
 801c184:	4413      	add	r3, r2
 801c186:	00db      	lsls	r3, r3, #3
 801c188:	3350      	adds	r3, #80	@ 0x50
 801c18a:	443b      	add	r3, r7
 801c18c:	3b3c      	subs	r3, #60	@ 0x3c
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	3b01      	subs	r3, #1
 801c192:	f021 0201 	bic.w	r2, r1, #1
 801c196:	009b      	lsls	r3, r3, #2
 801c198:	4403      	add	r3, r0
 801c19a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 801c19c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c1a0:	4613      	mov	r3, r2
 801c1a2:	005b      	lsls	r3, r3, #1
 801c1a4:	4413      	add	r3, r2
 801c1a6:	00db      	lsls	r3, r3, #3
 801c1a8:	3350      	adds	r3, #80	@ 0x50
 801c1aa:	443b      	add	r3, r7
 801c1ac:	3b38      	subs	r3, #56	@ 0x38
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d01f      	beq.n	801c1f4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 801c1b4:	498e      	ldr	r1, [pc, #568]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c1b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c1ba:	4613      	mov	r3, r2
 801c1bc:	005b      	lsls	r3, r3, #1
 801c1be:	4413      	add	r3, r2
 801c1c0:	00db      	lsls	r3, r3, #3
 801c1c2:	3350      	adds	r3, #80	@ 0x50
 801c1c4:	443b      	add	r3, r7
 801c1c6:	3b38      	subs	r3, #56	@ 0x38
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	3b01      	subs	r3, #1
 801c1cc:	009b      	lsls	r3, r3, #2
 801c1ce:	440b      	add	r3, r1
 801c1d0:	6859      	ldr	r1, [r3, #4]
 801c1d2:	4887      	ldr	r0, [pc, #540]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c1d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c1d8:	4613      	mov	r3, r2
 801c1da:	005b      	lsls	r3, r3, #1
 801c1dc:	4413      	add	r3, r2
 801c1de:	00db      	lsls	r3, r3, #3
 801c1e0:	3350      	adds	r3, #80	@ 0x50
 801c1e2:	443b      	add	r3, r7
 801c1e4:	3b38      	subs	r3, #56	@ 0x38
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	3b01      	subs	r3, #1
 801c1ea:	f021 0210 	bic.w	r2, r1, #16
 801c1ee:	009b      	lsls	r3, r3, #2
 801c1f0:	4403      	add	r3, r0
 801c1f2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 801c1f4:	497e      	ldr	r1, [pc, #504]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c1f6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c1fa:	4613      	mov	r3, r2
 801c1fc:	005b      	lsls	r3, r3, #1
 801c1fe:	4413      	add	r3, r2
 801c200:	00db      	lsls	r3, r3, #3
 801c202:	3350      	adds	r3, #80	@ 0x50
 801c204:	443b      	add	r3, r7
 801c206:	3b34      	subs	r3, #52	@ 0x34
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	3b01      	subs	r3, #1
 801c20c:	009b      	lsls	r3, r3, #2
 801c20e:	440b      	add	r3, r1
 801c210:	6859      	ldr	r1, [r3, #4]
 801c212:	4877      	ldr	r0, [pc, #476]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c214:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c218:	4613      	mov	r3, r2
 801c21a:	005b      	lsls	r3, r3, #1
 801c21c:	4413      	add	r3, r2
 801c21e:	00db      	lsls	r3, r3, #3
 801c220:	3350      	adds	r3, #80	@ 0x50
 801c222:	443b      	add	r3, r7
 801c224:	3b34      	subs	r3, #52	@ 0x34
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	3b01      	subs	r3, #1
 801c22a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 801c22e:	009b      	lsls	r3, r3, #2
 801c230:	4403      	add	r3, r0
 801c232:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801c234:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c238:	4613      	mov	r3, r2
 801c23a:	005b      	lsls	r3, r3, #1
 801c23c:	4413      	add	r3, r2
 801c23e:	00db      	lsls	r3, r3, #3
 801c240:	3350      	adds	r3, #80	@ 0x50
 801c242:	443b      	add	r3, r7
 801c244:	3b30      	subs	r3, #48	@ 0x30
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d023      	beq.n	801c294 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c24c:	4968      	ldr	r1, [pc, #416]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c24e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c252:	4613      	mov	r3, r2
 801c254:	005b      	lsls	r3, r3, #1
 801c256:	4413      	add	r3, r2
 801c258:	00db      	lsls	r3, r3, #3
 801c25a:	3350      	adds	r3, #80	@ 0x50
 801c25c:	443b      	add	r3, r7
 801c25e:	3b30      	subs	r3, #48	@ 0x30
 801c260:	681b      	ldr	r3, [r3, #0]
 801c262:	3b01      	subs	r3, #1
 801c264:	f003 0301 	and.w	r3, r3, #1
 801c268:	009b      	lsls	r3, r3, #2
 801c26a:	440b      	add	r3, r1
 801c26c:	6859      	ldr	r1, [r3, #4]
 801c26e:	4860      	ldr	r0, [pc, #384]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c270:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c274:	4613      	mov	r3, r2
 801c276:	005b      	lsls	r3, r3, #1
 801c278:	4413      	add	r3, r2
 801c27a:	00db      	lsls	r3, r3, #3
 801c27c:	3350      	adds	r3, #80	@ 0x50
 801c27e:	443b      	add	r3, r7
 801c280:	3b30      	subs	r3, #48	@ 0x30
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	3b01      	subs	r3, #1
 801c286:	f003 0301 	and.w	r3, r3, #1
 801c28a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 801c28e:	009b      	lsls	r3, r3, #2
 801c290:	4403      	add	r3, r0
 801c292:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801c294:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c298:	4613      	mov	r3, r2
 801c29a:	005b      	lsls	r3, r3, #1
 801c29c:	4413      	add	r3, r2
 801c29e:	00db      	lsls	r3, r3, #3
 801c2a0:	3350      	adds	r3, #80	@ 0x50
 801c2a2:	443b      	add	r3, r7
 801c2a4:	3b2c      	subs	r3, #44	@ 0x2c
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d023      	beq.n	801c2f4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c2ac:	4950      	ldr	r1, [pc, #320]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c2ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c2b2:	4613      	mov	r3, r2
 801c2b4:	005b      	lsls	r3, r3, #1
 801c2b6:	4413      	add	r3, r2
 801c2b8:	00db      	lsls	r3, r3, #3
 801c2ba:	3350      	adds	r3, #80	@ 0x50
 801c2bc:	443b      	add	r3, r7
 801c2be:	3b2c      	subs	r3, #44	@ 0x2c
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	3b01      	subs	r3, #1
 801c2c4:	f003 0301 	and.w	r3, r3, #1
 801c2c8:	009b      	lsls	r3, r3, #2
 801c2ca:	440b      	add	r3, r1
 801c2cc:	6859      	ldr	r1, [r3, #4]
 801c2ce:	4848      	ldr	r0, [pc, #288]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c2d0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801c2d4:	4613      	mov	r3, r2
 801c2d6:	005b      	lsls	r3, r3, #1
 801c2d8:	4413      	add	r3, r2
 801c2da:	00db      	lsls	r3, r3, #3
 801c2dc:	3350      	adds	r3, #80	@ 0x50
 801c2de:	443b      	add	r3, r7
 801c2e0:	3b2c      	subs	r3, #44	@ 0x2c
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	3b01      	subs	r3, #1
 801c2e6:	f003 0301 	and.w	r3, r3, #1
 801c2ea:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 801c2ee:	009b      	lsls	r3, r3, #2
 801c2f0:	4403      	add	r3, r0
 801c2f2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 801c2f4:	4a3e      	ldr	r2, [pc, #248]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	689b      	ldr	r3, [r3, #8]
 801c2fa:	3b01      	subs	r3, #1
 801c2fc:	009b      	lsls	r3, r3, #2
 801c2fe:	4413      	add	r3, r2
 801c300:	685b      	ldr	r3, [r3, #4]
 801c302:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 801c306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c308:	025b      	lsls	r3, r3, #9
 801c30a:	431a      	orrs	r2, r3
 801c30c:	4938      	ldr	r1, [pc, #224]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c30e:	68bb      	ldr	r3, [r7, #8]
 801c310:	689b      	ldr	r3, [r3, #8]
 801c312:	3b01      	subs	r3, #1
 801c314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801c318:	009b      	lsls	r3, r3, #2
 801c31a:	440b      	add	r3, r1
 801c31c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 801c31e:	68bb      	ldr	r3, [r7, #8]
 801c320:	695b      	ldr	r3, [r3, #20]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d018      	beq.n	801c358 <HAL_OSPIM_Config+0x708>
 801c326:	68bb      	ldr	r3, [r7, #8]
 801c328:	695b      	ldr	r3, [r3, #20]
 801c32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c32e:	d813      	bhi.n	801c358 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	695b      	ldr	r3, [r3, #20]
 801c334:	1e5a      	subs	r2, r3, #1
 801c336:	4b2e      	ldr	r3, [pc, #184]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c338:	681b      	ldr	r3, [r3, #0]
 801c33a:	0c1b      	lsrs	r3, r3, #16
 801c33c:	b2db      	uxtb	r3, r3
 801c33e:	429a      	cmp	r2, r3
 801c340:	d90a      	bls.n	801c358 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 801c342:	4b2b      	ldr	r3, [pc, #172]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 801c34a:	68bb      	ldr	r3, [r7, #8]
 801c34c:	695b      	ldr	r3, [r3, #20]
 801c34e:	3b01      	subs	r3, #1
 801c350:	041b      	lsls	r3, r3, #16
 801c352:	4927      	ldr	r1, [pc, #156]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c354:	4313      	orrs	r3, r2
 801c356:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 801c358:	4b25      	ldr	r3, [pc, #148]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c35a:	681b      	ldr	r3, [r3, #0]
 801c35c:	f003 0301 	and.w	r3, r3, #1
 801c360:	2b00      	cmp	r3, #0
 801c362:	f000 809a 	beq.w	801c49a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 801c366:	4a22      	ldr	r2, [pc, #136]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c368:	68bb      	ldr	r3, [r7, #8]
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	3b01      	subs	r3, #1
 801c36e:	009b      	lsls	r3, r3, #2
 801c370:	4413      	add	r3, r2
 801c372:	685b      	ldr	r3, [r3, #4]
 801c374:	f023 0203 	bic.w	r2, r3, #3
 801c378:	491d      	ldr	r1, [pc, #116]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c37a:	68bb      	ldr	r3, [r7, #8]
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	3b01      	subs	r3, #1
 801c380:	f042 0201 	orr.w	r2, r2, #1
 801c384:	009b      	lsls	r3, r3, #2
 801c386:	440b      	add	r3, r1
 801c388:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 801c38a:	68bb      	ldr	r3, [r7, #8]
 801c38c:	685b      	ldr	r3, [r3, #4]
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d011      	beq.n	801c3b6 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 801c392:	4a17      	ldr	r2, [pc, #92]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c394:	68bb      	ldr	r3, [r7, #8]
 801c396:	685b      	ldr	r3, [r3, #4]
 801c398:	3b01      	subs	r3, #1
 801c39a:	009b      	lsls	r3, r3, #2
 801c39c:	4413      	add	r3, r2
 801c39e:	685b      	ldr	r3, [r3, #4]
 801c3a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801c3a4:	4912      	ldr	r1, [pc, #72]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	685b      	ldr	r3, [r3, #4]
 801c3aa:	3b01      	subs	r3, #1
 801c3ac:	f042 0210 	orr.w	r2, r2, #16
 801c3b0:	009b      	lsls	r3, r3, #2
 801c3b2:	440b      	add	r3, r1
 801c3b4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 801c3b6:	68bb      	ldr	r3, [r7, #8]
 801c3b8:	68db      	ldr	r3, [r3, #12]
 801c3ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d018      	beq.n	801c3f4 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c3c2:	4a0b      	ldr	r2, [pc, #44]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c3c4:	68bb      	ldr	r3, [r7, #8]
 801c3c6:	68db      	ldr	r3, [r3, #12]
 801c3c8:	3b01      	subs	r3, #1
 801c3ca:	f003 0301 	and.w	r3, r3, #1
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	4413      	add	r3, r2
 801c3d2:	685b      	ldr	r3, [r3, #4]
 801c3d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 801c3d8:	4905      	ldr	r1, [pc, #20]	@ (801c3f0 <HAL_OSPIM_Config+0x7a0>)
 801c3da:	68bb      	ldr	r3, [r7, #8]
 801c3dc:	68db      	ldr	r3, [r3, #12]
 801c3de:	3b01      	subs	r3, #1
 801c3e0:	f003 0301 	and.w	r3, r3, #1
 801c3e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801c3e8:	009b      	lsls	r3, r3, #2
 801c3ea:	440b      	add	r3, r1
 801c3ec:	605a      	str	r2, [r3, #4]
 801c3ee:	e01b      	b.n	801c428 <HAL_OSPIM_Config+0x7d8>
 801c3f0:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801c3f4:	68bb      	ldr	r3, [r7, #8]
 801c3f6:	68db      	ldr	r3, [r3, #12]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d015      	beq.n	801c428 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c3fc:	4a8a      	ldr	r2, [pc, #552]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c3fe:	68bb      	ldr	r3, [r7, #8]
 801c400:	68db      	ldr	r3, [r3, #12]
 801c402:	3b01      	subs	r3, #1
 801c404:	f003 0301 	and.w	r3, r3, #1
 801c408:	009b      	lsls	r3, r3, #2
 801c40a:	4413      	add	r3, r2
 801c40c:	685b      	ldr	r3, [r3, #4]
 801c40e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 801c412:	4985      	ldr	r1, [pc, #532]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	68db      	ldr	r3, [r3, #12]
 801c418:	3b01      	subs	r3, #1
 801c41a:	f003 0301 	and.w	r3, r3, #1
 801c41e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 801c422:	009b      	lsls	r3, r3, #2
 801c424:	440b      	add	r3, r1
 801c426:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	691b      	ldr	r3, [r3, #16]
 801c42c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c430:	2b00      	cmp	r3, #0
 801c432:	d016      	beq.n	801c462 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c434:	4a7c      	ldr	r2, [pc, #496]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c436:	68bb      	ldr	r3, [r7, #8]
 801c438:	691b      	ldr	r3, [r3, #16]
 801c43a:	3b01      	subs	r3, #1
 801c43c:	f003 0301 	and.w	r3, r3, #1
 801c440:	009b      	lsls	r3, r3, #2
 801c442:	4413      	add	r3, r2
 801c444:	685b      	ldr	r3, [r3, #4]
 801c446:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 801c44a:	4977      	ldr	r1, [pc, #476]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c44c:	68bb      	ldr	r3, [r7, #8]
 801c44e:	691b      	ldr	r3, [r3, #16]
 801c450:	3b01      	subs	r3, #1
 801c452:	f003 0301 	and.w	r3, r3, #1
 801c456:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 801c45a:	009b      	lsls	r3, r3, #2
 801c45c:	440b      	add	r3, r1
 801c45e:	605a      	str	r2, [r3, #4]
 801c460:	e0c3      	b.n	801c5ea <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801c462:	68bb      	ldr	r3, [r7, #8]
 801c464:	691b      	ldr	r3, [r3, #16]
 801c466:	2b00      	cmp	r3, #0
 801c468:	f000 80bf 	beq.w	801c5ea <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c46c:	4a6e      	ldr	r2, [pc, #440]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c46e:	68bb      	ldr	r3, [r7, #8]
 801c470:	691b      	ldr	r3, [r3, #16]
 801c472:	3b01      	subs	r3, #1
 801c474:	f003 0301 	and.w	r3, r3, #1
 801c478:	009b      	lsls	r3, r3, #2
 801c47a:	4413      	add	r3, r2
 801c47c:	685b      	ldr	r3, [r3, #4]
 801c47e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 801c482:	4969      	ldr	r1, [pc, #420]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c484:	68bb      	ldr	r3, [r7, #8]
 801c486:	691b      	ldr	r3, [r3, #16]
 801c488:	3b01      	subs	r3, #1
 801c48a:	f003 0301 	and.w	r3, r3, #1
 801c48e:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 801c492:	009b      	lsls	r3, r3, #2
 801c494:	440b      	add	r3, r1
 801c496:	605a      	str	r2, [r3, #4]
 801c498:	e0a7      	b.n	801c5ea <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 801c49a:	4a63      	ldr	r2, [pc, #396]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c49c:	68bb      	ldr	r3, [r7, #8]
 801c49e:	681b      	ldr	r3, [r3, #0]
 801c4a0:	3b01      	subs	r3, #1
 801c4a2:	009b      	lsls	r3, r3, #2
 801c4a4:	4413      	add	r3, r2
 801c4a6:	685b      	ldr	r3, [r3, #4]
 801c4a8:	f023 0203 	bic.w	r2, r3, #3
 801c4ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c4ae:	005b      	lsls	r3, r3, #1
 801c4b0:	431a      	orrs	r2, r3
 801c4b2:	495d      	ldr	r1, [pc, #372]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c4b4:	68bb      	ldr	r3, [r7, #8]
 801c4b6:	681b      	ldr	r3, [r3, #0]
 801c4b8:	3b01      	subs	r3, #1
 801c4ba:	f042 0201 	orr.w	r2, r2, #1
 801c4be:	009b      	lsls	r3, r3, #2
 801c4c0:	440b      	add	r3, r1
 801c4c2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 801c4c4:	68bb      	ldr	r3, [r7, #8]
 801c4c6:	685b      	ldr	r3, [r3, #4]
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d014      	beq.n	801c4f6 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 801c4cc:	4a56      	ldr	r2, [pc, #344]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c4ce:	68bb      	ldr	r3, [r7, #8]
 801c4d0:	685b      	ldr	r3, [r3, #4]
 801c4d2:	3b01      	subs	r3, #1
 801c4d4:	009b      	lsls	r3, r3, #2
 801c4d6:	4413      	add	r3, r2
 801c4d8:	685b      	ldr	r3, [r3, #4]
 801c4da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 801c4de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c4e0:	015b      	lsls	r3, r3, #5
 801c4e2:	431a      	orrs	r2, r3
 801c4e4:	4950      	ldr	r1, [pc, #320]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c4e6:	68bb      	ldr	r3, [r7, #8]
 801c4e8:	685b      	ldr	r3, [r3, #4]
 801c4ea:	3b01      	subs	r3, #1
 801c4ec:	f042 0210 	orr.w	r2, r2, #16
 801c4f0:	009b      	lsls	r3, r3, #2
 801c4f2:	440b      	add	r3, r1
 801c4f4:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 801c4f6:	68bb      	ldr	r3, [r7, #8]
 801c4f8:	68db      	ldr	r3, [r3, #12]
 801c4fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d019      	beq.n	801c536 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c502:	4a49      	ldr	r2, [pc, #292]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c504:	68bb      	ldr	r3, [r7, #8]
 801c506:	68db      	ldr	r3, [r3, #12]
 801c508:	3b01      	subs	r3, #1
 801c50a:	f003 0301 	and.w	r3, r3, #1
 801c50e:	009b      	lsls	r3, r3, #2
 801c510:	4413      	add	r3, r2
 801c512:	685b      	ldr	r3, [r3, #4]
 801c514:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 801c518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c51a:	049b      	lsls	r3, r3, #18
 801c51c:	431a      	orrs	r2, r3
 801c51e:	4942      	ldr	r1, [pc, #264]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c520:	68bb      	ldr	r3, [r7, #8]
 801c522:	68db      	ldr	r3, [r3, #12]
 801c524:	3b01      	subs	r3, #1
 801c526:	f003 0301 	and.w	r3, r3, #1
 801c52a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801c52e:	009b      	lsls	r3, r3, #2
 801c530:	440b      	add	r3, r1
 801c532:	605a      	str	r2, [r3, #4]
 801c534:	e01c      	b.n	801c570 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 801c536:	68bb      	ldr	r3, [r7, #8]
 801c538:	68db      	ldr	r3, [r3, #12]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d018      	beq.n	801c570 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c53e:	4a3a      	ldr	r2, [pc, #232]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c540:	68bb      	ldr	r3, [r7, #8]
 801c542:	68db      	ldr	r3, [r3, #12]
 801c544:	3b01      	subs	r3, #1
 801c546:	f003 0301 	and.w	r3, r3, #1
 801c54a:	009b      	lsls	r3, r3, #2
 801c54c:	4413      	add	r3, r2
 801c54e:	685b      	ldr	r3, [r3, #4]
 801c550:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 801c554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c556:	069b      	lsls	r3, r3, #26
 801c558:	431a      	orrs	r2, r3
 801c55a:	4933      	ldr	r1, [pc, #204]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c55c:	68bb      	ldr	r3, [r7, #8]
 801c55e:	68db      	ldr	r3, [r3, #12]
 801c560:	3b01      	subs	r3, #1
 801c562:	f003 0301 	and.w	r3, r3, #1
 801c566:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 801c56a:	009b      	lsls	r3, r3, #2
 801c56c:	440b      	add	r3, r1
 801c56e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 801c570:	68bb      	ldr	r3, [r7, #8]
 801c572:	691b      	ldr	r3, [r3, #16]
 801c574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d019      	beq.n	801c5b0 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c57c:	4a2a      	ldr	r2, [pc, #168]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c57e:	68bb      	ldr	r3, [r7, #8]
 801c580:	691b      	ldr	r3, [r3, #16]
 801c582:	3b01      	subs	r3, #1
 801c584:	f003 0301 	and.w	r3, r3, #1
 801c588:	009b      	lsls	r3, r3, #2
 801c58a:	4413      	add	r3, r2
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 801c592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c594:	049b      	lsls	r3, r3, #18
 801c596:	431a      	orrs	r2, r3
 801c598:	4923      	ldr	r1, [pc, #140]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c59a:	68bb      	ldr	r3, [r7, #8]
 801c59c:	691b      	ldr	r3, [r3, #16]
 801c59e:	3b01      	subs	r3, #1
 801c5a0:	f003 0301 	and.w	r3, r3, #1
 801c5a4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 801c5a8:	009b      	lsls	r3, r3, #2
 801c5aa:	440b      	add	r3, r1
 801c5ac:	605a      	str	r2, [r3, #4]
 801c5ae:	e01c      	b.n	801c5ea <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 801c5b0:	68bb      	ldr	r3, [r7, #8]
 801c5b2:	691b      	ldr	r3, [r3, #16]
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d018      	beq.n	801c5ea <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 801c5b8:	4a1b      	ldr	r2, [pc, #108]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c5ba:	68bb      	ldr	r3, [r7, #8]
 801c5bc:	691b      	ldr	r3, [r3, #16]
 801c5be:	3b01      	subs	r3, #1
 801c5c0:	f003 0301 	and.w	r3, r3, #1
 801c5c4:	009b      	lsls	r3, r3, #2
 801c5c6:	4413      	add	r3, r2
 801c5c8:	685b      	ldr	r3, [r3, #4]
 801c5ca:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 801c5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c5d0:	069b      	lsls	r3, r3, #26
 801c5d2:	431a      	orrs	r2, r3
 801c5d4:	4914      	ldr	r1, [pc, #80]	@ (801c628 <HAL_OSPIM_Config+0x9d8>)
 801c5d6:	68bb      	ldr	r3, [r7, #8]
 801c5d8:	691b      	ldr	r3, [r3, #16]
 801c5da:	3b01      	subs	r3, #1
 801c5dc:	f003 0301 	and.w	r3, r3, #1
 801c5e0:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 801c5e4:	009b      	lsls	r3, r3, #2
 801c5e6:	440b      	add	r3, r1
 801c5e8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 801c5ea:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801c5ee:	f003 0301 	and.w	r3, r3, #1
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d005      	beq.n	801c602 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 801c5f6:	4b0d      	ldr	r3, [pc, #52]	@ (801c62c <HAL_OSPIM_Config+0x9dc>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	4a0c      	ldr	r2, [pc, #48]	@ (801c62c <HAL_OSPIM_Config+0x9dc>)
 801c5fc:	f043 0301 	orr.w	r3, r3, #1
 801c600:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 801c602:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 801c606:	f003 0302 	and.w	r3, r3, #2
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d005      	beq.n	801c61a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 801c60e:	4b08      	ldr	r3, [pc, #32]	@ (801c630 <HAL_OSPIM_Config+0x9e0>)
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	4a07      	ldr	r2, [pc, #28]	@ (801c630 <HAL_OSPIM_Config+0x9e0>)
 801c614:	f043 0301 	orr.w	r3, r3, #1
 801c618:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 801c61a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 801c61e:	4618      	mov	r0, r3
 801c620:	3750      	adds	r7, #80	@ 0x50
 801c622:	46bd      	mov	sp, r7
 801c624:	bd80      	pop	{r7, pc}
 801c626:	bf00      	nop
 801c628:	420c4000 	.word	0x420c4000
 801c62c:	420d1400 	.word	0x420d1400
 801c630:	420d2400 	.word	0x420d2400

0801c634 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b084      	sub	sp, #16
 801c638:	af00      	add	r7, sp, #0
 801c63a:	60f8      	str	r0, [r7, #12]
 801c63c:	60b9      	str	r1, [r7, #8]
 801c63e:	603b      	str	r3, [r7, #0]
 801c640:	4613      	mov	r3, r2
 801c642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 801c644:	e022      	b.n	801c68c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c646:	69bb      	ldr	r3, [r7, #24]
 801c648:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c64c:	d01e      	beq.n	801c68c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c64e:	f7f9 ff0d 	bl	801646c <HAL_GetTick>
 801c652:	4602      	mov	r2, r0
 801c654:	683b      	ldr	r3, [r7, #0]
 801c656:	1ad3      	subs	r3, r2, r3
 801c658:	69ba      	ldr	r2, [r7, #24]
 801c65a:	429a      	cmp	r2, r3
 801c65c:	d302      	bcc.n	801c664 <OSPI_WaitFlagStateUntilTimeout+0x30>
 801c65e:	69bb      	ldr	r3, [r7, #24]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d113      	bne.n	801c68c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	6a1a      	ldr	r2, [r3, #32]
 801c66a:	68bb      	ldr	r3, [r7, #8]
 801c66c:	401a      	ands	r2, r3
 801c66e:	79fb      	ldrb	r3, [r7, #7]
 801c670:	429a      	cmp	r2, r3
 801c672:	d00b      	beq.n	801c68c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 801c674:	68fb      	ldr	r3, [r7, #12]
 801c676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c67a:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 801c67c:	68fb      	ldr	r3, [r7, #12]
 801c67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c680:	f043 0201 	orr.w	r2, r3, #1
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 801c688:	2301      	movs	r3, #1
 801c68a:	e00e      	b.n	801c6aa <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	6a1a      	ldr	r2, [r3, #32]
 801c692:	68bb      	ldr	r3, [r7, #8]
 801c694:	4013      	ands	r3, r2
 801c696:	2b00      	cmp	r3, #0
 801c698:	bf14      	ite	ne
 801c69a:	2301      	movne	r3, #1
 801c69c:	2300      	moveq	r3, #0
 801c69e:	b2db      	uxtb	r3, r3
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	79fb      	ldrb	r3, [r7, #7]
 801c6a4:	429a      	cmp	r2, r3
 801c6a6:	d1ce      	bne.n	801c646 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c6a8:	2300      	movs	r3, #0
}
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	3710      	adds	r7, #16
 801c6ae:	46bd      	mov	sp, r7
 801c6b0:	bd80      	pop	{r7, pc}
	...

0801c6b4 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	b088      	sub	sp, #32
 801c6b8:	af00      	add	r7, sp, #0
 801c6ba:	6078      	str	r0, [r7, #4]
 801c6bc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_RESET );
 801c6be:	2200      	movs	r2, #0
 801c6c0:	2110      	movs	r1, #16
 801c6c2:	488a      	ldr	r0, [pc, #552]	@ (801c8ec <OSPI_ConfigCmd+0x238>)
 801c6c4:	f7fd fd66 	bl	801a194 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 801c6c8:	2008      	movs	r0, #8
 801c6ca:	f7f9 fedb 	bl	8016484 <HAL_Delay>
  HAL_StatusTypeDef status = HAL_OK;
 801c6ce:	2300      	movs	r3, #0
 801c6d0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	681a      	ldr	r2, [r3, #0]
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 801c6e0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	689b      	ldr	r3, [r3, #8]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	d10a      	bne.n	801c700 <OSPI_ConfigCmd+0x4c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_MSEL, cmd->FlashId);
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	685a      	ldr	r2, [r3, #4]
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	430a      	orrs	r2, r1
 801c6fe:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 801c700:	683b      	ldr	r3, [r7, #0]
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	2b02      	cmp	r3, #2
 801c706:	d114      	bne.n	801c732 <OSPI_ConfigCmd+0x7e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 801c708:	687b      	ldr	r3, [r7, #4]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 801c710:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 801c71a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 801c724:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 801c72e:	60fb      	str	r3, [r7, #12]
 801c730:	e02c      	b.n	801c78c <OSPI_ConfigCmd+0xd8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 801c732:	683b      	ldr	r3, [r7, #0]
 801c734:	681b      	ldr	r3, [r3, #0]
 801c736:	2b03      	cmp	r3, #3
 801c738:	d114      	bne.n	801c764 <OSPI_ConfigCmd+0xb0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 801c742:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801c74c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801c756:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 801c760:	60fb      	str	r3, [r7, #12]
 801c762:	e013      	b.n	801c78c <OSPI_ConfigCmd+0xd8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 801c76c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 801c776:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 801c780:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801c78a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801c790:	683b      	ldr	r3, [r7, #0]
 801c792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c794:	431a      	orrs	r2, r3
 801c796:	69bb      	ldr	r3, [r7, #24]
 801c798:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 801c79a:	683b      	ldr	r3, [r7, #0]
 801c79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d012      	beq.n	801c7c8 <OSPI_ConfigCmd+0x114>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 801c7a2:	683b      	ldr	r3, [r7, #0]
 801c7a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 801c7aa:	69bb      	ldr	r3, [r7, #24]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801c7b6:	683b      	ldr	r3, [r7, #0]
 801c7b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c7ba:	4319      	orrs	r1, r3
 801c7bc:	683b      	ldr	r3, [r7, #0]
 801c7be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c7c0:	430b      	orrs	r3, r1
 801c7c2:	431a      	orrs	r2, r3
 801c7c4:	69bb      	ldr	r3, [r7, #24]
 801c7c6:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 801c7c8:	697b      	ldr	r3, [r7, #20]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	f023 021f 	bic.w	r2, r3, #31
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c7d4:	431a      	orrs	r2, r3
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801c7da:	683b      	ldr	r3, [r7, #0]
 801c7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d009      	beq.n	801c7f6 <OSPI_ConfigCmd+0x142>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 801c7e2:	683b      	ldr	r3, [r7, #0]
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d105      	bne.n	801c7f6 <OSPI_ConfigCmd+0x142>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 801c7ea:	683b      	ldr	r3, [r7, #0]
 801c7ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	3a01      	subs	r2, #1
 801c7f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 801c7f6:	683b      	ldr	r3, [r7, #0]
 801c7f8:	68db      	ldr	r3, [r3, #12]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	f000 809d 	beq.w	801c93a <OSPI_ConfigCmd+0x286>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801c800:	683b      	ldr	r3, [r7, #0]
 801c802:	69db      	ldr	r3, [r3, #28]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d055      	beq.n	801c8b4 <OSPI_ConfigCmd+0x200>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801c808:	683b      	ldr	r3, [r7, #0]
 801c80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d01e      	beq.n	801c84e <OSPI_ConfigCmd+0x19a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801c810:	69bb      	ldr	r3, [r7, #24]
 801c812:	681a      	ldr	r2, [r3, #0]
 801c814:	4b36      	ldr	r3, [pc, #216]	@ (801c8f0 <OSPI_ConfigCmd+0x23c>)
 801c816:	4013      	ands	r3, r2
 801c818:	683a      	ldr	r2, [r7, #0]
 801c81a:	68d1      	ldr	r1, [r2, #12]
 801c81c:	683a      	ldr	r2, [r7, #0]
 801c81e:	6952      	ldr	r2, [r2, #20]
 801c820:	4311      	orrs	r1, r2
 801c822:	683a      	ldr	r2, [r7, #0]
 801c824:	6912      	ldr	r2, [r2, #16]
 801c826:	4311      	orrs	r1, r2
 801c828:	683a      	ldr	r2, [r7, #0]
 801c82a:	69d2      	ldr	r2, [r2, #28]
 801c82c:	4311      	orrs	r1, r2
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c832:	4311      	orrs	r1, r2
 801c834:	683a      	ldr	r2, [r7, #0]
 801c836:	6a12      	ldr	r2, [r2, #32]
 801c838:	4311      	orrs	r1, r2
 801c83a:	683a      	ldr	r2, [r7, #0]
 801c83c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801c83e:	4311      	orrs	r1, r2
 801c840:	683a      	ldr	r2, [r7, #0]
 801c842:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801c844:	430a      	orrs	r2, r1
 801c846:	431a      	orrs	r2, r3
 801c848:	69bb      	ldr	r3, [r7, #24]
 801c84a:	601a      	str	r2, [r3, #0]
 801c84c:	e028      	b.n	801c8a0 <OSPI_ConfigCmd+0x1ec>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 801c84e:	69bb      	ldr	r3, [r7, #24]
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801c856:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801c85a:	683a      	ldr	r2, [r7, #0]
 801c85c:	68d1      	ldr	r1, [r2, #12]
 801c85e:	683a      	ldr	r2, [r7, #0]
 801c860:	6952      	ldr	r2, [r2, #20]
 801c862:	4311      	orrs	r1, r2
 801c864:	683a      	ldr	r2, [r7, #0]
 801c866:	6912      	ldr	r2, [r2, #16]
 801c868:	4311      	orrs	r1, r2
 801c86a:	683a      	ldr	r2, [r7, #0]
 801c86c:	69d2      	ldr	r2, [r2, #28]
 801c86e:	4311      	orrs	r1, r2
 801c870:	683a      	ldr	r2, [r7, #0]
 801c872:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c874:	4311      	orrs	r1, r2
 801c876:	683a      	ldr	r2, [r7, #0]
 801c878:	6a12      	ldr	r2, [r2, #32]
 801c87a:	430a      	orrs	r2, r1
 801c87c:	431a      	orrs	r2, r3
 801c87e:	69bb      	ldr	r3, [r7, #24]
 801c880:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c88a:	d109      	bne.n	801c8a0 <OSPI_ConfigCmd+0x1ec>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801c890:	2b08      	cmp	r3, #8
 801c892:	d105      	bne.n	801c8a0 <OSPI_ConfigCmd+0x1ec>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801c894:	69bb      	ldr	r3, [r7, #24]
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801c89c:	69bb      	ldr	r3, [r7, #24]
 801c89e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 801c8a0:	683b      	ldr	r3, [r7, #0]
 801c8a2:	689a      	ldr	r2, [r3, #8]
 801c8a4:	693b      	ldr	r3, [r7, #16]
 801c8a6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	681b      	ldr	r3, [r3, #0]
 801c8ac:	683a      	ldr	r2, [r7, #0]
 801c8ae:	6992      	ldr	r2, [r2, #24]
 801c8b0:	649a      	str	r2, [r3, #72]	@ 0x48
 801c8b2:	e07c      	b.n	801c9ae <OSPI_ConfigCmd+0x2fa>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801c8b4:	683b      	ldr	r3, [r7, #0]
 801c8b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d01b      	beq.n	801c8f4 <OSPI_ConfigCmd+0x240>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 801c8bc:	69bb      	ldr	r3, [r7, #24]
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 801c8c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801c8c8:	683a      	ldr	r2, [r7, #0]
 801c8ca:	68d1      	ldr	r1, [r2, #12]
 801c8cc:	683a      	ldr	r2, [r7, #0]
 801c8ce:	6952      	ldr	r2, [r2, #20]
 801c8d0:	4311      	orrs	r1, r2
 801c8d2:	683a      	ldr	r2, [r7, #0]
 801c8d4:	6912      	ldr	r2, [r2, #16]
 801c8d6:	4311      	orrs	r1, r2
 801c8d8:	683a      	ldr	r2, [r7, #0]
 801c8da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801c8dc:	4311      	orrs	r1, r2
 801c8de:	683a      	ldr	r2, [r7, #0]
 801c8e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801c8e2:	430a      	orrs	r2, r1
 801c8e4:	431a      	orrs	r2, r3
 801c8e6:	69bb      	ldr	r3, [r7, #24]
 801c8e8:	601a      	str	r2, [r3, #0]
 801c8ea:	e021      	b.n	801c930 <OSPI_ConfigCmd+0x27c>
 801c8ec:	42020000 	.word	0x42020000
 801c8f0:	f0ffc0c0 	.word	0xf0ffc0c0
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 801c8f4:	69bb      	ldr	r3, [r7, #24]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801c8fc:	683b      	ldr	r3, [r7, #0]
 801c8fe:	68d9      	ldr	r1, [r3, #12]
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	695b      	ldr	r3, [r3, #20]
 801c904:	4319      	orrs	r1, r3
 801c906:	683b      	ldr	r3, [r7, #0]
 801c908:	691b      	ldr	r3, [r3, #16]
 801c90a:	430b      	orrs	r3, r1
 801c90c:	431a      	orrs	r2, r3
 801c90e:	69bb      	ldr	r3, [r7, #24]
 801c910:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c91a:	d109      	bne.n	801c930 <OSPI_ConfigCmd+0x27c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 801c91c:	683b      	ldr	r3, [r7, #0]
 801c91e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 801c920:	2b08      	cmp	r3, #8
 801c922:	d105      	bne.n	801c930 <OSPI_ConfigCmd+0x27c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 801c924:	69bb      	ldr	r3, [r7, #24]
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801c92c:	69bb      	ldr	r3, [r7, #24]
 801c92e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	689a      	ldr	r2, [r3, #8]
 801c934:	693b      	ldr	r3, [r7, #16]
 801c936:	601a      	str	r2, [r3, #0]
 801c938:	e039      	b.n	801c9ae <OSPI_ConfigCmd+0x2fa>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 801c93a:	683b      	ldr	r3, [r7, #0]
 801c93c:	69db      	ldr	r3, [r3, #28]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d030      	beq.n	801c9a4 <OSPI_ConfigCmd+0x2f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 801c942:	683b      	ldr	r3, [r7, #0]
 801c944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c946:	2b00      	cmp	r3, #0
 801c948:	d017      	beq.n	801c97a <OSPI_ConfigCmd+0x2c6>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 801c94a:	69bb      	ldr	r3, [r7, #24]
 801c94c:	681b      	ldr	r3, [r3, #0]
 801c94e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 801c952:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801c956:	683a      	ldr	r2, [r7, #0]
 801c958:	69d1      	ldr	r1, [r2, #28]
 801c95a:	683a      	ldr	r2, [r7, #0]
 801c95c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801c95e:	4311      	orrs	r1, r2
 801c960:	683a      	ldr	r2, [r7, #0]
 801c962:	6a12      	ldr	r2, [r2, #32]
 801c964:	4311      	orrs	r1, r2
 801c966:	683a      	ldr	r2, [r7, #0]
 801c968:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 801c96a:	4311      	orrs	r1, r2
 801c96c:	683a      	ldr	r2, [r7, #0]
 801c96e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801c970:	430a      	orrs	r2, r1
 801c972:	431a      	orrs	r2, r3
 801c974:	69bb      	ldr	r3, [r7, #24]
 801c976:	601a      	str	r2, [r3, #0]
 801c978:	e00e      	b.n	801c998 <OSPI_ConfigCmd+0x2e4>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 801c97a:	69bb      	ldr	r3, [r7, #24]
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 801c982:	683b      	ldr	r3, [r7, #0]
 801c984:	69d9      	ldr	r1, [r3, #28]
 801c986:	683b      	ldr	r3, [r7, #0]
 801c988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c98a:	4319      	orrs	r1, r3
 801c98c:	683b      	ldr	r3, [r7, #0]
 801c98e:	6a1b      	ldr	r3, [r3, #32]
 801c990:	430b      	orrs	r3, r1
 801c992:	431a      	orrs	r2, r3
 801c994:	69bb      	ldr	r3, [r7, #24]
 801c996:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	683a      	ldr	r2, [r7, #0]
 801c99e:	6992      	ldr	r2, [r2, #24]
 801c9a0:	649a      	str	r2, [r3, #72]	@ 0x48
 801c9a2:	e004      	b.n	801c9ae <OSPI_ConfigCmd+0x2fa>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 801c9a4:	2301      	movs	r3, #1
 801c9a6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	2208      	movs	r2, #8
 801c9ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
	HAL_Delay(8);
 801c9ae:	2008      	movs	r0, #8
 801c9b0:	f7f9 fd68 	bl	8016484 <HAL_Delay>
	HAL_GPIO_WritePin ( GPIOA , GPIO_PIN_4 , GPIO_PIN_SET );
 801c9b4:	2201      	movs	r2, #1
 801c9b6:	2110      	movs	r1, #16
 801c9b8:	4803      	ldr	r0, [pc, #12]	@ (801c9c8 <OSPI_ConfigCmd+0x314>)
 801c9ba:	f7fd fbeb 	bl	801a194 <HAL_GPIO_WritePin>
  /* Return function status */
  return status;
 801c9be:	7ffb      	ldrb	r3, [r7, #31]
}
 801c9c0:	4618      	mov	r0, r3
 801c9c2:	3720      	adds	r7, #32
 801c9c4:	46bd      	mov	sp, r7
 801c9c6:	bd80      	pop	{r7, pc}
 801c9c8:	42020000 	.word	0x42020000

0801c9cc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 801c9cc:	b480      	push	{r7}
 801c9ce:	b087      	sub	sp, #28
 801c9d0:	af00      	add	r7, sp, #0
 801c9d2:	4603      	mov	r3, r0
 801c9d4:	6039      	str	r1, [r7, #0]
 801c9d6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 801c9d8:	2300      	movs	r3, #0
 801c9da:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 801c9dc:	2300      	movs	r3, #0
 801c9de:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 801c9e0:	79fb      	ldrb	r3, [r7, #7]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d005      	beq.n	801c9f2 <OSPIM_GetConfig+0x26>
 801c9e6:	79fb      	ldrb	r3, [r7, #7]
 801c9e8:	2b02      	cmp	r3, #2
 801c9ea:	d802      	bhi.n	801c9f2 <OSPIM_GetConfig+0x26>
 801c9ec:	683b      	ldr	r3, [r7, #0]
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d102      	bne.n	801c9f8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 801c9f2:	2301      	movs	r3, #1
 801c9f4:	75fb      	strb	r3, [r7, #23]
 801c9f6:	e098      	b.n	801cb2a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 801c9f8:	683b      	ldr	r3, [r7, #0]
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 801c9fe:	683b      	ldr	r3, [r7, #0]
 801ca00:	2200      	movs	r2, #0
 801ca02:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 801ca04:	683b      	ldr	r3, [r7, #0]
 801ca06:	2200      	movs	r2, #0
 801ca08:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 801ca0a:	683b      	ldr	r3, [r7, #0]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 801ca10:	683b      	ldr	r3, [r7, #0]
 801ca12:	2200      	movs	r2, #0
 801ca14:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 801ca16:	79fb      	ldrb	r3, [r7, #7]
 801ca18:	2b02      	cmp	r3, #2
 801ca1a:	d10b      	bne.n	801ca34 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 801ca1c:	4b46      	ldr	r3, [pc, #280]	@ (801cb38 <OSPIM_GetConfig+0x16c>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	f003 0301 	and.w	r3, r3, #1
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d102      	bne.n	801ca2e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 801ca28:	4b44      	ldr	r3, [pc, #272]	@ (801cb3c <OSPIM_GetConfig+0x170>)
 801ca2a:	613b      	str	r3, [r7, #16]
 801ca2c:	e002      	b.n	801ca34 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 801ca2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801ca32:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 801ca34:	2300      	movs	r3, #0
 801ca36:	60fb      	str	r3, [r7, #12]
 801ca38:	e074      	b.n	801cb24 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 801ca3a:	4a3f      	ldr	r2, [pc, #252]	@ (801cb38 <OSPIM_GetConfig+0x16c>)
 801ca3c:	68fb      	ldr	r3, [r7, #12]
 801ca3e:	009b      	lsls	r3, r3, #2
 801ca40:	4413      	add	r3, r2
 801ca42:	685b      	ldr	r3, [r3, #4]
 801ca44:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 801ca46:	68bb      	ldr	r3, [r7, #8]
 801ca48:	f003 0301 	and.w	r3, r3, #1
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d00a      	beq.n	801ca66 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 801ca50:	68ba      	ldr	r2, [r7, #8]
 801ca52:	693b      	ldr	r3, [r7, #16]
 801ca54:	4053      	eors	r3, r2
 801ca56:	f003 0302 	and.w	r3, r3, #2
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d103      	bne.n	801ca66 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	1c5a      	adds	r2, r3, #1
 801ca62:	683b      	ldr	r3, [r7, #0]
 801ca64:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 801ca66:	68bb      	ldr	r3, [r7, #8]
 801ca68:	f003 0310 	and.w	r3, r3, #16
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	d00a      	beq.n	801ca86 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 801ca70:	68ba      	ldr	r2, [r7, #8]
 801ca72:	693b      	ldr	r3, [r7, #16]
 801ca74:	4053      	eors	r3, r2
 801ca76:	f003 0320 	and.w	r3, r3, #32
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	d103      	bne.n	801ca86 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	1c5a      	adds	r2, r3, #1
 801ca82:	683b      	ldr	r3, [r7, #0]
 801ca84:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 801ca86:	68bb      	ldr	r3, [r7, #8]
 801ca88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d00a      	beq.n	801caa6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 801ca90:	68ba      	ldr	r2, [r7, #8]
 801ca92:	693b      	ldr	r3, [r7, #16]
 801ca94:	4053      	eors	r3, r2
 801ca96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d103      	bne.n	801caa6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 801ca9e:	68fb      	ldr	r3, [r7, #12]
 801caa0:	1c5a      	adds	r2, r3, #1
 801caa2:	683b      	ldr	r3, [r7, #0]
 801caa4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 801caa6:	68bb      	ldr	r3, [r7, #8]
 801caa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801caac:	2b00      	cmp	r3, #0
 801caae:	d018      	beq.n	801cae2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 801cab0:	68ba      	ldr	r2, [r7, #8]
 801cab2:	693b      	ldr	r3, [r7, #16]
 801cab4:	4053      	eors	r3, r2
 801cab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d111      	bne.n	801cae2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 801cabe:	68bb      	ldr	r3, [r7, #8]
 801cac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d106      	bne.n	801cad6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 801cac8:	68fb      	ldr	r3, [r7, #12]
 801caca:	3301      	adds	r3, #1
 801cacc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801cad0:	683b      	ldr	r3, [r7, #0]
 801cad2:	60da      	str	r2, [r3, #12]
 801cad4:	e005      	b.n	801cae2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	3301      	adds	r3, #1
 801cada:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801cade:	683b      	ldr	r3, [r7, #0]
 801cae0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 801cae2:	68bb      	ldr	r3, [r7, #8]
 801cae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801cae8:	2b00      	cmp	r3, #0
 801caea:	d018      	beq.n	801cb1e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 801caec:	68ba      	ldr	r2, [r7, #8]
 801caee:	693b      	ldr	r3, [r7, #16]
 801caf0:	4053      	eors	r3, r2
 801caf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d111      	bne.n	801cb1e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 801cafa:	68bb      	ldr	r3, [r7, #8]
 801cafc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d106      	bne.n	801cb12 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	3301      	adds	r3, #1
 801cb08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801cb0c:	683b      	ldr	r3, [r7, #0]
 801cb0e:	611a      	str	r2, [r3, #16]
 801cb10:	e005      	b.n	801cb1e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	3301      	adds	r3, #1
 801cb16:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 801cb1a:	683b      	ldr	r3, [r7, #0]
 801cb1c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 801cb1e:	68fb      	ldr	r3, [r7, #12]
 801cb20:	3301      	adds	r3, #1
 801cb22:	60fb      	str	r3, [r7, #12]
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	2b01      	cmp	r3, #1
 801cb28:	d987      	bls.n	801ca3a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 801cb2a:	7dfb      	ldrb	r3, [r7, #23]
}
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	371c      	adds	r7, #28
 801cb30:	46bd      	mov	sp, r7
 801cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb36:	4770      	bx	lr
 801cb38:	420c4000 	.word	0x420c4000
 801cb3c:	04040222 	.word	0x04040222

0801cb40 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 801cb40:	b580      	push	{r7, lr}
 801cb42:	b084      	sub	sp, #16
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
 801cb48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801cb4a:	2301      	movs	r3, #1
 801cb4c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	681b      	ldr	r3, [r3, #0]
 801cb52:	689a      	ldr	r2, [r3, #8]
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	f042 0202 	orr.w	r2, r2, #2
 801cb5c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	2208      	movs	r2, #8
 801cb62:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	4a15      	ldr	r2, [pc, #84]	@ (801cbc0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 801cb6a:	4293      	cmp	r3, r2
 801cb6c:	d109      	bne.n	801cb82 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 801cb6e:	4815      	ldr	r0, [pc, #84]	@ (801cbc4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 801cb70:	f7fe fd2d 	bl	801b5ce <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 801cb74:	6839      	ldr	r1, [r7, #0]
 801cb76:	4813      	ldr	r0, [pc, #76]	@ (801cbc4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 801cb78:	f008 f9a8 	bl	8024ecc <LL_DLYB_SetDelay>
    status = HAL_OK;
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	73fb      	strb	r3, [r7, #15]
 801cb80:	e00d      	b.n	801cb9e <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	4a10      	ldr	r2, [pc, #64]	@ (801cbc8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 801cb88:	4293      	cmp	r3, r2
 801cb8a:	d108      	bne.n	801cb9e <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 801cb8c:	480f      	ldr	r0, [pc, #60]	@ (801cbcc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 801cb8e:	f7fe fd1e 	bl	801b5ce <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 801cb92:	6839      	ldr	r1, [r7, #0]
 801cb94:	480d      	ldr	r0, [pc, #52]	@ (801cbcc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 801cb96:	f008 f999 	bl	8024ecc <LL_DLYB_SetDelay>
    status = HAL_OK;
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 801cb9e:	6878      	ldr	r0, [r7, #4]
 801cba0:	f7fe ffd2 	bl	801bb48 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	689a      	ldr	r2, [r3, #8]
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	f022 0202 	bic.w	r2, r2, #2
 801cbb2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 801cbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	3710      	adds	r7, #16
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	bd80      	pop	{r7, pc}
 801cbbe:	bf00      	nop
 801cbc0:	420d1400 	.word	0x420d1400
 801cbc4:	420cf000 	.word	0x420cf000
 801cbc8:	420d2400 	.word	0x420d2400
 801cbcc:	420cf400 	.word	0x420cf400

0801cbd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801cbd0:	b480      	push	{r7}
 801cbd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801cbd4:	4b05      	ldr	r3, [pc, #20]	@ (801cbec <HAL_PWR_EnableBkUpAccess+0x1c>)
 801cbd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cbd8:	4a04      	ldr	r2, [pc, #16]	@ (801cbec <HAL_PWR_EnableBkUpAccess+0x1c>)
 801cbda:	f043 0301 	orr.w	r3, r3, #1
 801cbde:	6293      	str	r3, [r2, #40]	@ 0x28
}
 801cbe0:	bf00      	nop
 801cbe2:	46bd      	mov	sp, r7
 801cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe8:	4770      	bx	lr
 801cbea:	bf00      	nop
 801cbec:	46020800 	.word	0x46020800

0801cbf0 <HAL_PWR_EnableWakeUpPin>:
  *                     the wake up line, the wake up source with
  *                     high polarity and the first wake up I/O.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
{
 801cbf0:	b480      	push	{r7}
 801cbf2:	b087      	sub	sp, #28
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));

  /* Specifies the wake up line polarity for the event detection (rising or falling edge) */
  MODIFY_REG(PWR->WUCR2, (PWR_EWUP_MASK & WakeUpPin), (WakeUpPin >> PWR_WUP_POLARITY_SHIFT));
 801cbf8:	4b1b      	ldr	r3, [pc, #108]	@ (801cc68 <HAL_PWR_EnableWakeUpPin+0x78>)
 801cbfa:	699a      	ldr	r2, [r3, #24]
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	b2db      	uxtb	r3, r3
 801cc00:	43db      	mvns	r3, r3
 801cc02:	401a      	ands	r2, r3
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	0a1b      	lsrs	r3, r3, #8
 801cc08:	4917      	ldr	r1, [pc, #92]	@ (801cc68 <HAL_PWR_EnableWakeUpPin+0x78>)
 801cc0a:	4313      	orrs	r3, r2
 801cc0c:	618b      	str	r3, [r1, #24]

  /* Specifies the wake up line I/O selection */
  MODIFY_REG(PWR->WUCR3, (3UL << (POSITION_VAL(PWR_EWUP_MASK & WakeUpPin) * 2U)),
 801cc0e:	4b16      	ldr	r3, [pc, #88]	@ (801cc68 <HAL_PWR_EnableWakeUpPin+0x78>)
 801cc10:	69da      	ldr	r2, [r3, #28]
 801cc12:	687b      	ldr	r3, [r7, #4]
 801cc14:	b2db      	uxtb	r3, r3
 801cc16:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801cc18:	693b      	ldr	r3, [r7, #16]
 801cc1a:	fa93 f3a3 	rbit	r3, r3
 801cc1e:	60fb      	str	r3, [r7, #12]
  return result;
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801cc24:	697b      	ldr	r3, [r7, #20]
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d101      	bne.n	801cc2e <HAL_PWR_EnableWakeUpPin+0x3e>
    return 32U;
 801cc2a:	2320      	movs	r3, #32
 801cc2c:	e003      	b.n	801cc36 <HAL_PWR_EnableWakeUpPin+0x46>
  return __builtin_clz(value);
 801cc2e:	697b      	ldr	r3, [r7, #20]
 801cc30:	fab3 f383 	clz	r3, r3
 801cc34:	b2db      	uxtb	r3, r3
 801cc36:	005b      	lsls	r3, r3, #1
 801cc38:	2103      	movs	r1, #3
 801cc3a:	fa01 f303 	lsl.w	r3, r1, r3
 801cc3e:	43db      	mvns	r3, r3
 801cc40:	401a      	ands	r2, r3
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	0c1b      	lsrs	r3, r3, #16
 801cc46:	4908      	ldr	r1, [pc, #32]	@ (801cc68 <HAL_PWR_EnableWakeUpPin+0x78>)
 801cc48:	4313      	orrs	r3, r2
 801cc4a:	61cb      	str	r3, [r1, #28]
             (WakeUpPin >> PWR_WUP_SELECT_SIGNAL_SHIFT));

  /* Enable wake-up line */
  SET_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 801cc4c:	4b06      	ldr	r3, [pc, #24]	@ (801cc68 <HAL_PWR_EnableWakeUpPin+0x78>)
 801cc4e:	695a      	ldr	r2, [r3, #20]
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	b2db      	uxtb	r3, r3
 801cc54:	4904      	ldr	r1, [pc, #16]	@ (801cc68 <HAL_PWR_EnableWakeUpPin+0x78>)
 801cc56:	4313      	orrs	r3, r2
 801cc58:	614b      	str	r3, [r1, #20]
}
 801cc5a:	bf00      	nop
 801cc5c:	371c      	adds	r7, #28
 801cc5e:	46bd      	mov	sp, r7
 801cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc64:	4770      	bx	lr
 801cc66:	bf00      	nop
 801cc68:	46020800 	.word	0x46020800

0801cc6c <HAL_PWR_DisableWakeUpPin>:
  *                     @arg @ref PWR_WAKEUP_PIN7
  *                     @arg @ref PWR_WAKEUP_PIN8
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
{
 801cc6c:	b480      	push	{r7}
 801cc6e:	b083      	sub	sp, #12
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));

  /* Disable wake-up pin */
  CLEAR_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 801cc74:	4b06      	ldr	r3, [pc, #24]	@ (801cc90 <HAL_PWR_DisableWakeUpPin+0x24>)
 801cc76:	695a      	ldr	r2, [r3, #20]
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	b2db      	uxtb	r3, r3
 801cc7c:	43db      	mvns	r3, r3
 801cc7e:	4904      	ldr	r1, [pc, #16]	@ (801cc90 <HAL_PWR_DisableWakeUpPin+0x24>)
 801cc80:	4013      	ands	r3, r2
 801cc82:	614b      	str	r3, [r1, #20]
}
 801cc84:	bf00      	nop
 801cc86:	370c      	adds	r7, #12
 801cc88:	46bd      	mov	sp, r7
 801cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc8e:	4770      	bx	lr
 801cc90:	46020800 	.word	0x46020800

0801cc94 <HAL_PWR_ConfigAttributes>:
  * @param  Attributes : Specifies the available attribute(s).
  *                      This parameter can be one of @ref PWR_Attributes.
  * @retval None.
  */
void HAL_PWR_ConfigAttributes(uint32_t Item, uint32_t Attributes)
{
 801cc94:	b480      	push	{r7}
 801cc96:	b083      	sub	sp, #12
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	6078      	str	r0, [r7, #4]
 801cc9c:	6039      	str	r1, [r7, #0]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Item);

  /* NSecure item management (TZEN = 0) */
  if ((Attributes & PWR_ITEM_ATTR_NSEC_PRIV_MASK) == PWR_ITEM_ATTR_NSEC_PRIV_MASK)
 801cc9e:	683b      	ldr	r3, [r7, #0]
 801cca0:	f003 0310 	and.w	r3, r3, #16
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d011      	beq.n	801cccc <HAL_PWR_ConfigAttributes+0x38>
  {
    /* Privilege item management */
    if ((Attributes & PWR_NSEC_PRIV) == PWR_NSEC_PRIV)
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	f003 0311 	and.w	r3, r3, #17
 801ccae:	2b11      	cmp	r3, #17
 801ccb0:	d106      	bne.n	801ccc0 <HAL_PWR_ConfigAttributes+0x2c>
    {
      SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_NSPRIV);
 801ccb2:	4b09      	ldr	r3, [pc, #36]	@ (801ccd8 <HAL_PWR_ConfigAttributes+0x44>)
 801ccb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ccb6:	4a08      	ldr	r2, [pc, #32]	@ (801ccd8 <HAL_PWR_ConfigAttributes+0x44>)
 801ccb8:	f043 0302 	orr.w	r3, r3, #2
 801ccbc:	6353      	str	r3, [r2, #52]	@ 0x34
    {
      CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_NSPRIV);
    }
  }
#endif /* __ARM_FEATURE_CMSE */
}
 801ccbe:	e005      	b.n	801cccc <HAL_PWR_ConfigAttributes+0x38>
      CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_NSPRIV);
 801ccc0:	4b05      	ldr	r3, [pc, #20]	@ (801ccd8 <HAL_PWR_ConfigAttributes+0x44>)
 801ccc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ccc4:	4a04      	ldr	r2, [pc, #16]	@ (801ccd8 <HAL_PWR_ConfigAttributes+0x44>)
 801ccc6:	f023 0302 	bic.w	r3, r3, #2
 801ccca:	6353      	str	r3, [r2, #52]	@ 0x34
}
 801cccc:	bf00      	nop
 801ccce:	370c      	adds	r7, #12
 801ccd0:	46bd      	mov	sp, r7
 801ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccd6:	4770      	bx	lr
 801ccd8:	46020800 	.word	0x46020800

0801ccdc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ccdc:	b480      	push	{r7}
 801ccde:	b085      	sub	sp, #20
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 801cce4:	4b39      	ldr	r3, [pc, #228]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801ccec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 801ccee:	68ba      	ldr	r2, [r7, #8]
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	429a      	cmp	r2, r3
 801ccf4:	d10b      	bne.n	801cd0e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ccfc:	d905      	bls.n	801cd0a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 801ccfe:	4b33      	ldr	r3, [pc, #204]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd00:	68db      	ldr	r3, [r3, #12]
 801cd02:	4a32      	ldr	r2, [pc, #200]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cd08:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	e057      	b.n	801cdbe <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cd14:	d90a      	bls.n	801cd2c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 801cd16:	4b2d      	ldr	r3, [pc, #180]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd18:	68db      	ldr	r3, [r3, #12]
 801cd1a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	4313      	orrs	r3, r2
 801cd22:	4a2a      	ldr	r2, [pc, #168]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801cd28:	60d3      	str	r3, [r2, #12]
 801cd2a:	e007      	b.n	801cd3c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 801cd2c:	4b27      	ldr	r3, [pc, #156]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd2e:	68db      	ldr	r3, [r3, #12]
 801cd30:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 801cd34:	4925      	ldr	r1, [pc, #148]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	4313      	orrs	r3, r2
 801cd3a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 801cd3c:	4b24      	ldr	r3, [pc, #144]	@ (801cdd0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 801cd3e:	681b      	ldr	r3, [r3, #0]
 801cd40:	4a24      	ldr	r2, [pc, #144]	@ (801cdd4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 801cd42:	fba2 2303 	umull	r2, r3, r2, r3
 801cd46:	099b      	lsrs	r3, r3, #6
 801cd48:	2232      	movs	r2, #50	@ 0x32
 801cd4a:	fb02 f303 	mul.w	r3, r2, r3
 801cd4e:	4a21      	ldr	r2, [pc, #132]	@ (801cdd4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 801cd50:	fba2 2303 	umull	r2, r3, r2, r3
 801cd54:	099b      	lsrs	r3, r3, #6
 801cd56:	3301      	adds	r3, #1
 801cd58:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 801cd5a:	e002      	b.n	801cd62 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	3b01      	subs	r3, #1
 801cd60:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 801cd62:	4b1a      	ldr	r3, [pc, #104]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cd64:	68db      	ldr	r3, [r3, #12]
 801cd66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d102      	bne.n	801cd74 <HAL_PWREx_ControlVoltageScaling+0x98>
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d1f3      	bne.n	801cd5c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 801cd74:	68fb      	ldr	r3, [r7, #12]
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d01b      	beq.n	801cdb2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 801cd7a:	4b15      	ldr	r3, [pc, #84]	@ (801cdd0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 801cd7c:	681b      	ldr	r3, [r3, #0]
 801cd7e:	4a15      	ldr	r2, [pc, #84]	@ (801cdd4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 801cd80:	fba2 2303 	umull	r2, r3, r2, r3
 801cd84:	099b      	lsrs	r3, r3, #6
 801cd86:	2232      	movs	r2, #50	@ 0x32
 801cd88:	fb02 f303 	mul.w	r3, r2, r3
 801cd8c:	4a11      	ldr	r2, [pc, #68]	@ (801cdd4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 801cd8e:	fba2 2303 	umull	r2, r3, r2, r3
 801cd92:	099b      	lsrs	r3, r3, #6
 801cd94:	3301      	adds	r3, #1
 801cd96:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 801cd98:	e002      	b.n	801cda0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 801cd9a:	68fb      	ldr	r3, [r7, #12]
 801cd9c:	3b01      	subs	r3, #1
 801cd9e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 801cda0:	4b0a      	ldr	r3, [pc, #40]	@ (801cdcc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 801cda2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cda4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d102      	bne.n	801cdb2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d1f3      	bne.n	801cd9a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 801cdb2:	68fb      	ldr	r3, [r7, #12]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d101      	bne.n	801cdbc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 801cdb8:	2303      	movs	r3, #3
 801cdba:	e000      	b.n	801cdbe <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 801cdbc:	2300      	movs	r3, #0
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3714      	adds	r7, #20
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdc8:	4770      	bx	lr
 801cdca:	bf00      	nop
 801cdcc:	46020800 	.word	0x46020800
 801cdd0:	20000360 	.word	0x20000360
 801cdd4:	10624dd3 	.word	0x10624dd3

0801cdd8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 801cdd8:	b480      	push	{r7}
 801cdda:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 801cddc:	4b04      	ldr	r3, [pc, #16]	@ (801cdf0 <HAL_PWREx_GetVoltageRange+0x18>)
 801cdde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cde0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 801cde4:	4618      	mov	r0, r3
 801cde6:	46bd      	mov	sp, r7
 801cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdec:	4770      	bx	lr
 801cdee:	bf00      	nop
 801cdf0:	46020800 	.word	0x46020800

0801cdf4 <HAL_PWREx_EnterSTOP3Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP3Mode(uint8_t STOPEntry)
{
 801cdf4:	b480      	push	{r7}
 801cdf6:	b083      	sub	sp, #12
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 3 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, (PWR_CR1_LPMS_0 | PWR_CR1_LPMS_1));
 801cdfe:	4b11      	ldr	r3, [pc, #68]	@ (801ce44 <HAL_PWREx_EnterSTOP3Mode+0x50>)
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	f023 0307 	bic.w	r3, r3, #7
 801ce06:	4a0f      	ldr	r2, [pc, #60]	@ (801ce44 <HAL_PWREx_EnterSTOP3Mode+0x50>)
 801ce08:	f043 0303 	orr.w	r3, r3, #3
 801ce0c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801ce0e:	4b0e      	ldr	r3, [pc, #56]	@ (801ce48 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 801ce10:	691b      	ldr	r3, [r3, #16]
 801ce12:	4a0d      	ldr	r2, [pc, #52]	@ (801ce48 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 801ce14:	f043 0304 	orr.w	r3, r3, #4
 801ce18:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 801ce1a:	79fb      	ldrb	r3, [r7, #7]
 801ce1c:	2b01      	cmp	r3, #1
 801ce1e:	d101      	bne.n	801ce24 <HAL_PWREx_EnterSTOP3Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801ce20:	bf30      	wfi
 801ce22:	e002      	b.n	801ce2a <HAL_PWREx_EnterSTOP3Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801ce24:	bf40      	sev
    __WFE();
 801ce26:	bf20      	wfe
    __WFE();
 801ce28:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801ce2a:	4b07      	ldr	r3, [pc, #28]	@ (801ce48 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 801ce2c:	691b      	ldr	r3, [r3, #16]
 801ce2e:	4a06      	ldr	r2, [pc, #24]	@ (801ce48 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 801ce30:	f023 0304 	bic.w	r3, r3, #4
 801ce34:	6113      	str	r3, [r2, #16]
}
 801ce36:	bf00      	nop
 801ce38:	370c      	adds	r7, #12
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce40:	4770      	bx	lr
 801ce42:	bf00      	nop
 801ce44:	46020800 	.word	0x46020800
 801ce48:	e000ed00 	.word	0xe000ed00

0801ce4c <HAL_PWREx_EnableUltraLowPowerMode>:
  *         Stop 1, Stop 2, Stop 3 and Standby modes and when the regulator is
  *         in Range 4 (Run, Sleep or Stop 0 mode).
  * @retval None.
  */
void HAL_PWREx_EnableUltraLowPowerMode(void)
{
 801ce4c:	b480      	push	{r7}
 801ce4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_ULPMEN);
 801ce50:	4b05      	ldr	r3, [pc, #20]	@ (801ce68 <HAL_PWREx_EnableUltraLowPowerMode+0x1c>)
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	4a04      	ldr	r2, [pc, #16]	@ (801ce68 <HAL_PWREx_EnableUltraLowPowerMode+0x1c>)
 801ce56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ce5a:	6013      	str	r3, [r2, #0]
}
 801ce5c:	bf00      	nop
 801ce5e:	46bd      	mov	sp, r7
 801ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce64:	4770      	bx	lr
 801ce66:	bf00      	nop
 801ce68:	46020800 	.word	0x46020800

0801ce6c <HAL_PWREx_S3WU_IRQHandler>:
  * @param  WakeUpPin : Specifies the wakeup pin interrupt to be handled.
  *                     This parameter can be a combination of @ref PWR_WakeUp_Pins.
  * @retval None.
  */
void HAL_PWREx_S3WU_IRQHandler(uint32_t WakeUpPin)
{
 801ce6c:	b580      	push	{r7, lr}
 801ce6e:	b082      	sub	sp, #8
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	6078      	str	r0, [r7, #4]

  /* Check PWR wake up line 1 */
  if ((WakeUpPin & PWR_WAKEUP_PIN1) != 0U)
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	f003 0301 	and.w	r3, r3, #1
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d00e      	beq.n	801ce9c <HAL_PWREx_S3WU_IRQHandler+0x30>
  {

    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF1) != 0U)
 801ce7e:	4b52      	ldr	r3, [pc, #328]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801ce80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ce82:	f003 0301 	and.w	r3, r3, #1
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d008      	beq.n	801ce9c <HAL_PWREx_S3WU_IRQHandler+0x30>
    {
      /* Clear PWR wake up flag line 1 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF1);
 801ce8a:	4b4f      	ldr	r3, [pc, #316]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801ce8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ce8e:	4a4e      	ldr	r2, [pc, #312]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801ce90:	f043 0301 	orr.w	r3, r3, #1
 801ce94:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(GPIO_PIN_0);
 801ce96:	2001      	movs	r0, #1
 801ce98:	f7ee f86c 	bl	800af74 <HAL_PWREx_S3WUCallback>
//    	SET_BIT(PWR->WUSR, PWR_WUSR_WUF1);
//    }
  }

  /* Check PWR wake up line 2 */
  if ((WakeUpPin & PWR_WAKEUP_PIN2) != 0U)
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f003 0302 	and.w	r3, r3, #2
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d00e      	beq.n	801cec4 <HAL_PWREx_S3WU_IRQHandler+0x58>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF2) != 0U)
 801cea6:	4b48      	ldr	r3, [pc, #288]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ceaa:	f003 0302 	and.w	r3, r3, #2
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d008      	beq.n	801cec4 <HAL_PWREx_S3WU_IRQHandler+0x58>
    {
      /* Clear PWR wake up flag line 2 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF2);
 801ceb2:	4b45      	ldr	r3, [pc, #276]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801ceb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ceb6:	4a44      	ldr	r2, [pc, #272]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801ceb8:	f043 0302 	orr.w	r3, r3, #2
 801cebc:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801cebe:	6878      	ldr	r0, [r7, #4]
 801cec0:	f7ee f858 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 3 */
  if ((WakeUpPin & PWR_WAKEUP_PIN3) != 0U)
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	f003 0304 	and.w	r3, r3, #4
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	d00e      	beq.n	801ceec <HAL_PWREx_S3WU_IRQHandler+0x80>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF3) != 0U)
 801cece:	4b3e      	ldr	r3, [pc, #248]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801ced0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ced2:	f003 0304 	and.w	r3, r3, #4
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d008      	beq.n	801ceec <HAL_PWREx_S3WU_IRQHandler+0x80>
    {
      /* Clear PWR wake up flag line 3 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF3);
 801ceda:	4b3b      	ldr	r3, [pc, #236]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cedc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cede:	4a3a      	ldr	r2, [pc, #232]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cee0:	f043 0304 	orr.w	r3, r3, #4
 801cee4:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801cee6:	6878      	ldr	r0, [r7, #4]
 801cee8:	f7ee f844 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 4 */
  if ((WakeUpPin & PWR_WAKEUP_PIN4) != 0U)
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	f003 0308 	and.w	r3, r3, #8
 801cef2:	2b00      	cmp	r3, #0
 801cef4:	d00e      	beq.n	801cf14 <HAL_PWREx_S3WU_IRQHandler+0xa8>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF4) != 0U)
 801cef6:	4b34      	ldr	r3, [pc, #208]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cefa:	f003 0308 	and.w	r3, r3, #8
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d008      	beq.n	801cf14 <HAL_PWREx_S3WU_IRQHandler+0xa8>
    {
      /* Clear PWR wake up flag line 4 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF4);
 801cf02:	4b31      	ldr	r3, [pc, #196]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cf06:	4a30      	ldr	r2, [pc, #192]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf08:	f043 0308 	orr.w	r3, r3, #8
 801cf0c:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801cf0e:	6878      	ldr	r0, [r7, #4]
 801cf10:	f7ee f830 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 5 */
  if ((WakeUpPin & PWR_WAKEUP_PIN5) != 0U)
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	f003 0310 	and.w	r3, r3, #16
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d00e      	beq.n	801cf3c <HAL_PWREx_S3WU_IRQHandler+0xd0>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF5) != 0U)
 801cf1e:	4b2a      	ldr	r3, [pc, #168]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cf22:	f003 0310 	and.w	r3, r3, #16
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	d008      	beq.n	801cf3c <HAL_PWREx_S3WU_IRQHandler+0xd0>
    {
      /* Clear PWR wake up flag line 5 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF5);
 801cf2a:	4b27      	ldr	r3, [pc, #156]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cf2e:	4a26      	ldr	r2, [pc, #152]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf30:	f043 0310 	orr.w	r3, r3, #16
 801cf34:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801cf36:	6878      	ldr	r0, [r7, #4]
 801cf38:	f7ee f81c 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 6 */
  if ((WakeUpPin & PWR_WAKEUP_PIN6) != 0U)
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	f003 0320 	and.w	r3, r3, #32
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d00e      	beq.n	801cf64 <HAL_PWREx_S3WU_IRQHandler+0xf8>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF6) != 0U)
 801cf46:	4b20      	ldr	r3, [pc, #128]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cf4a:	f003 0320 	and.w	r3, r3, #32
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d008      	beq.n	801cf64 <HAL_PWREx_S3WU_IRQHandler+0xf8>
    {
      /* Clear PWR wake up flag line 6 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF6);
 801cf52:	4b1d      	ldr	r3, [pc, #116]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cf56:	4a1c      	ldr	r2, [pc, #112]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf58:	f043 0320 	orr.w	r3, r3, #32
 801cf5c:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(GPIO_PIN_6);
 801cf5e:	2040      	movs	r0, #64	@ 0x40
 801cf60:	f7ee f808 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 7 */
  if ((WakeUpPin & PWR_WAKEUP_PIN7) != 0U)
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d00e      	beq.n	801cf8c <HAL_PWREx_S3WU_IRQHandler+0x120>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF7) != 0U)
 801cf6e:	4b16      	ldr	r3, [pc, #88]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cf72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d008      	beq.n	801cf8c <HAL_PWREx_S3WU_IRQHandler+0x120>
    {
      /* Clear PWR wake up flag line 7 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF7);
 801cf7a:	4b13      	ldr	r3, [pc, #76]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cf7e:	4a12      	ldr	r2, [pc, #72]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf84:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801cf86:	6878      	ldr	r0, [r7, #4]
 801cf88:	f7ed fff4 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }

  /* Check PWR wake up line 8 */
  if ((WakeUpPin & PWR_WAKEUP_PIN8) != 0U)
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d00e      	beq.n	801cfb4 <HAL_PWREx_S3WU_IRQHandler+0x148>
  {
    if (READ_BIT(PWR->WUSR, PWR_WUSR_WUF8) != 0U)
 801cf96:	4b0c      	ldr	r3, [pc, #48]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cf98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cf9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d008      	beq.n	801cfb4 <HAL_PWREx_S3WU_IRQHandler+0x148>
    {
      /* Clear PWR wake up flag line 8 */
      SET_BIT(PWR->WUSCR, PWR_WUSCR_CWUF8);
 801cfa2:	4b09      	ldr	r3, [pc, #36]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cfa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cfa6:	4a08      	ldr	r2, [pc, #32]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cfa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cfac:	6493      	str	r3, [r2, #72]	@ 0x48

      /* PWR S3WU interrupt user callback */
      HAL_PWREx_S3WUCallback(WakeUpPin);
 801cfae:	6878      	ldr	r0, [r7, #4]
 801cfb0:	f7ed ffe0 	bl	800af74 <HAL_PWREx_S3WUCallback>
    }
  }
	SET_BIT(PWR -> WUSCR, PWR_WUSCR_CWUF);
 801cfb4:	4b04      	ldr	r3, [pc, #16]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cfb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cfb8:	4a03      	ldr	r2, [pc, #12]	@ (801cfc8 <HAL_PWREx_S3WU_IRQHandler+0x15c>)
 801cfba:	f043 03ff 	orr.w	r3, r3, #255	@ 0xff
 801cfbe:	6493      	str	r3, [r2, #72]	@ 0x48

}
 801cfc0:	bf00      	nop
 801cfc2:	3708      	adds	r7, #8
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	bd80      	pop	{r7, pc}
 801cfc8:	46020800 	.word	0x46020800

0801cfcc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 801cfcc:	b480      	push	{r7}
 801cfce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 801cfd0:	4b05      	ldr	r3, [pc, #20]	@ (801cfe8 <HAL_PWREx_EnableVddUSB+0x1c>)
 801cfd2:	691b      	ldr	r3, [r3, #16]
 801cfd4:	4a04      	ldr	r2, [pc, #16]	@ (801cfe8 <HAL_PWREx_EnableVddUSB+0x1c>)
 801cfd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801cfda:	6113      	str	r3, [r2, #16]
}
 801cfdc:	bf00      	nop
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe4:	4770      	bx	lr
 801cfe6:	bf00      	nop
 801cfe8:	46020800 	.word	0x46020800

0801cfec <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 801cfec:	b480      	push	{r7}
 801cfee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 801cff0:	4b05      	ldr	r3, [pc, #20]	@ (801d008 <HAL_PWREx_EnableVddA+0x1c>)
 801cff2:	691b      	ldr	r3, [r3, #16]
 801cff4:	4a04      	ldr	r2, [pc, #16]	@ (801d008 <HAL_PWREx_EnableVddA+0x1c>)
 801cff6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cffa:	6113      	str	r3, [r2, #16]
}
 801cffc:	bf00      	nop
 801cffe:	46bd      	mov	sp, r7
 801d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d004:	4770      	bx	lr
 801d006:	bf00      	nop
 801d008:	46020800 	.word	0x46020800

0801d00c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801d00c:	b480      	push	{r7}
 801d00e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 801d010:	4b05      	ldr	r3, [pc, #20]	@ (801d028 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801d012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d014:	4a04      	ldr	r2, [pc, #16]	@ (801d028 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801d016:	f043 0301 	orr.w	r3, r3, #1
 801d01a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 801d01c:	bf00      	nop
 801d01e:	46bd      	mov	sp, r7
 801d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d024:	4770      	bx	lr
 801d026:	bf00      	nop
 801d028:	46020800 	.word	0x46020800

0801d02c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b08e      	sub	sp, #56	@ 0x38
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 801d034:	2300      	movs	r3, #0
 801d036:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d102      	bne.n	801d046 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 801d040:	2301      	movs	r3, #1
 801d042:	f000 bec8 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d046:	4b99      	ldr	r3, [pc, #612]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d048:	69db      	ldr	r3, [r3, #28]
 801d04a:	f003 030c 	and.w	r3, r3, #12
 801d04e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801d050:	4b96      	ldr	r3, [pc, #600]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d054:	f003 0303 	and.w	r3, r3, #3
 801d058:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	f003 0310 	and.w	r3, r3, #16
 801d062:	2b00      	cmp	r3, #0
 801d064:	f000 816c 	beq.w	801d340 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801d068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d007      	beq.n	801d07e <HAL_RCC_OscConfig+0x52>
 801d06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d070:	2b0c      	cmp	r3, #12
 801d072:	f040 80de 	bne.w	801d232 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 801d076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d078:	2b01      	cmp	r3, #1
 801d07a:	f040 80da 	bne.w	801d232 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	69db      	ldr	r3, [r3, #28]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d102      	bne.n	801d08c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 801d086:	2301      	movs	r3, #1
 801d088:	f000 bea5 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801d090:	4b86      	ldr	r3, [pc, #536]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d092:	689b      	ldr	r3, [r3, #8]
 801d094:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d004      	beq.n	801d0a6 <HAL_RCC_OscConfig+0x7a>
 801d09c:	4b83      	ldr	r3, [pc, #524]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d09e:	689b      	ldr	r3, [r3, #8]
 801d0a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801d0a4:	e005      	b.n	801d0b2 <HAL_RCC_OscConfig+0x86>
 801d0a6:	4b81      	ldr	r3, [pc, #516]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d0a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801d0ac:	041b      	lsls	r3, r3, #16
 801d0ae:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801d0b2:	4293      	cmp	r3, r2
 801d0b4:	d255      	bcs.n	801d162 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801d0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d10a      	bne.n	801d0d2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0c0:	4618      	mov	r0, r3
 801d0c2:	f001 f9d9 	bl	801e478 <RCC_SetFlashLatencyFromMSIRange>
 801d0c6:	4603      	mov	r3, r0
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d002      	beq.n	801d0d2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 801d0cc:	2301      	movs	r3, #1
 801d0ce:	f000 be82 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 801d0d2:	4b76      	ldr	r3, [pc, #472]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d0d4:	689b      	ldr	r3, [r3, #8]
 801d0d6:	4a75      	ldr	r2, [pc, #468]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d0d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801d0dc:	6093      	str	r3, [r2, #8]
 801d0de:	4b73      	ldr	r3, [pc, #460]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d0e0:	689b      	ldr	r3, [r3, #8]
 801d0e2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0ea:	4970      	ldr	r1, [pc, #448]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d0ec:	4313      	orrs	r3, r2
 801d0ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d0f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 801d0f8:	d309      	bcc.n	801d10e <HAL_RCC_OscConfig+0xe2>
 801d0fa:	4b6c      	ldr	r3, [pc, #432]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d0fc:	68db      	ldr	r3, [r3, #12]
 801d0fe:	f023 021f 	bic.w	r2, r3, #31
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	6a1b      	ldr	r3, [r3, #32]
 801d106:	4969      	ldr	r1, [pc, #420]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d108:	4313      	orrs	r3, r2
 801d10a:	60cb      	str	r3, [r1, #12]
 801d10c:	e07e      	b.n	801d20c <HAL_RCC_OscConfig+0x1e0>
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d112:	2b00      	cmp	r3, #0
 801d114:	da0a      	bge.n	801d12c <HAL_RCC_OscConfig+0x100>
 801d116:	4b65      	ldr	r3, [pc, #404]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d118:	68db      	ldr	r3, [r3, #12]
 801d11a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	6a1b      	ldr	r3, [r3, #32]
 801d122:	015b      	lsls	r3, r3, #5
 801d124:	4961      	ldr	r1, [pc, #388]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d126:	4313      	orrs	r3, r2
 801d128:	60cb      	str	r3, [r1, #12]
 801d12a:	e06f      	b.n	801d20c <HAL_RCC_OscConfig+0x1e0>
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d134:	d30a      	bcc.n	801d14c <HAL_RCC_OscConfig+0x120>
 801d136:	4b5d      	ldr	r3, [pc, #372]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d138:	68db      	ldr	r3, [r3, #12]
 801d13a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	6a1b      	ldr	r3, [r3, #32]
 801d142:	029b      	lsls	r3, r3, #10
 801d144:	4959      	ldr	r1, [pc, #356]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d146:	4313      	orrs	r3, r2
 801d148:	60cb      	str	r3, [r1, #12]
 801d14a:	e05f      	b.n	801d20c <HAL_RCC_OscConfig+0x1e0>
 801d14c:	4b57      	ldr	r3, [pc, #348]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d14e:	68db      	ldr	r3, [r3, #12]
 801d150:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	6a1b      	ldr	r3, [r3, #32]
 801d158:	03db      	lsls	r3, r3, #15
 801d15a:	4954      	ldr	r1, [pc, #336]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d15c:	4313      	orrs	r3, r2
 801d15e:	60cb      	str	r3, [r1, #12]
 801d160:	e054      	b.n	801d20c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 801d162:	4b52      	ldr	r3, [pc, #328]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d164:	689b      	ldr	r3, [r3, #8]
 801d166:	4a51      	ldr	r2, [pc, #324]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d168:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801d16c:	6093      	str	r3, [r2, #8]
 801d16e:	4b4f      	ldr	r3, [pc, #316]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d170:	689b      	ldr	r3, [r3, #8]
 801d172:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d17a:	494c      	ldr	r1, [pc, #304]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d17c:	4313      	orrs	r3, r2
 801d17e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d184:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 801d188:	d309      	bcc.n	801d19e <HAL_RCC_OscConfig+0x172>
 801d18a:	4b48      	ldr	r3, [pc, #288]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d18c:	68db      	ldr	r3, [r3, #12]
 801d18e:	f023 021f 	bic.w	r2, r3, #31
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	6a1b      	ldr	r3, [r3, #32]
 801d196:	4945      	ldr	r1, [pc, #276]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d198:	4313      	orrs	r3, r2
 801d19a:	60cb      	str	r3, [r1, #12]
 801d19c:	e028      	b.n	801d1f0 <HAL_RCC_OscConfig+0x1c4>
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	da0a      	bge.n	801d1bc <HAL_RCC_OscConfig+0x190>
 801d1a6:	4b41      	ldr	r3, [pc, #260]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d1a8:	68db      	ldr	r3, [r3, #12]
 801d1aa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	6a1b      	ldr	r3, [r3, #32]
 801d1b2:	015b      	lsls	r3, r3, #5
 801d1b4:	493d      	ldr	r1, [pc, #244]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d1b6:	4313      	orrs	r3, r2
 801d1b8:	60cb      	str	r3, [r1, #12]
 801d1ba:	e019      	b.n	801d1f0 <HAL_RCC_OscConfig+0x1c4>
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d1c4:	d30a      	bcc.n	801d1dc <HAL_RCC_OscConfig+0x1b0>
 801d1c6:	4b39      	ldr	r3, [pc, #228]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d1c8:	68db      	ldr	r3, [r3, #12]
 801d1ca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	6a1b      	ldr	r3, [r3, #32]
 801d1d2:	029b      	lsls	r3, r3, #10
 801d1d4:	4935      	ldr	r1, [pc, #212]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d1d6:	4313      	orrs	r3, r2
 801d1d8:	60cb      	str	r3, [r1, #12]
 801d1da:	e009      	b.n	801d1f0 <HAL_RCC_OscConfig+0x1c4>
 801d1dc:	4b33      	ldr	r3, [pc, #204]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d1de:	68db      	ldr	r3, [r3, #12]
 801d1e0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	6a1b      	ldr	r3, [r3, #32]
 801d1e8:	03db      	lsls	r3, r3, #15
 801d1ea:	4930      	ldr	r1, [pc, #192]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d1ec:	4313      	orrs	r3, r2
 801d1ee:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801d1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d10a      	bne.n	801d20c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	f001 f93c 	bl	801e478 <RCC_SetFlashLatencyFromMSIRange>
 801d200:	4603      	mov	r3, r0
 801d202:	2b00      	cmp	r3, #0
 801d204:	d002      	beq.n	801d20c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 801d206:	2301      	movs	r3, #1
 801d208:	f000 bde5 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 801d20c:	f001 f8de 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 801d210:	4b27      	ldr	r3, [pc, #156]	@ (801d2b0 <HAL_RCC_OscConfig+0x284>)
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	4618      	mov	r0, r3
 801d216:	f7f9 f8df 	bl	80163d8 <HAL_InitTick>
 801d21a:	4603      	mov	r3, r0
 801d21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 801d220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d224:	2b00      	cmp	r3, #0
 801d226:	f000 808a 	beq.w	801d33e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 801d22a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d22e:	f000 bdd2 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	69db      	ldr	r3, [r3, #28]
 801d236:	2b00      	cmp	r3, #0
 801d238:	d066      	beq.n	801d308 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 801d23a:	4b1c      	ldr	r3, [pc, #112]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	4a1b      	ldr	r2, [pc, #108]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d240:	f043 0301 	orr.w	r3, r3, #1
 801d244:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801d246:	f7f9 f911 	bl	801646c <HAL_GetTick>
 801d24a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 801d24c:	e009      	b.n	801d262 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801d24e:	f7f9 f90d 	bl	801646c <HAL_GetTick>
 801d252:	4602      	mov	r2, r0
 801d254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d256:	1ad3      	subs	r3, r2, r3
 801d258:	2b02      	cmp	r3, #2
 801d25a:	d902      	bls.n	801d262 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 801d25c:	2303      	movs	r3, #3
 801d25e:	f000 bdba 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 801d262:	4b12      	ldr	r3, [pc, #72]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	f003 0304 	and.w	r3, r3, #4
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d0ef      	beq.n	801d24e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 801d26e:	4b0f      	ldr	r3, [pc, #60]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d270:	689b      	ldr	r3, [r3, #8]
 801d272:	4a0e      	ldr	r2, [pc, #56]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d274:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801d278:	6093      	str	r3, [r2, #8]
 801d27a:	4b0c      	ldr	r3, [pc, #48]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d27c:	689b      	ldr	r3, [r3, #8]
 801d27e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d286:	4909      	ldr	r1, [pc, #36]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d288:	4313      	orrs	r3, r2
 801d28a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 801d28c:	687b      	ldr	r3, [r7, #4]
 801d28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d290:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 801d294:	d30e      	bcc.n	801d2b4 <HAL_RCC_OscConfig+0x288>
 801d296:	4b05      	ldr	r3, [pc, #20]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d298:	68db      	ldr	r3, [r3, #12]
 801d29a:	f023 021f 	bic.w	r2, r3, #31
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	6a1b      	ldr	r3, [r3, #32]
 801d2a2:	4902      	ldr	r1, [pc, #8]	@ (801d2ac <HAL_RCC_OscConfig+0x280>)
 801d2a4:	4313      	orrs	r3, r2
 801d2a6:	60cb      	str	r3, [r1, #12]
 801d2a8:	e04a      	b.n	801d340 <HAL_RCC_OscConfig+0x314>
 801d2aa:	bf00      	nop
 801d2ac:	46020c00 	.word	0x46020c00
 801d2b0:	20000364 	.word	0x20000364
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	da0a      	bge.n	801d2d2 <HAL_RCC_OscConfig+0x2a6>
 801d2bc:	4b98      	ldr	r3, [pc, #608]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d2be:	68db      	ldr	r3, [r3, #12]
 801d2c0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	6a1b      	ldr	r3, [r3, #32]
 801d2c8:	015b      	lsls	r3, r3, #5
 801d2ca:	4995      	ldr	r1, [pc, #596]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d2cc:	4313      	orrs	r3, r2
 801d2ce:	60cb      	str	r3, [r1, #12]
 801d2d0:	e036      	b.n	801d340 <HAL_RCC_OscConfig+0x314>
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d2da:	d30a      	bcc.n	801d2f2 <HAL_RCC_OscConfig+0x2c6>
 801d2dc:	4b90      	ldr	r3, [pc, #576]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d2de:	68db      	ldr	r3, [r3, #12]
 801d2e0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	6a1b      	ldr	r3, [r3, #32]
 801d2e8:	029b      	lsls	r3, r3, #10
 801d2ea:	498d      	ldr	r1, [pc, #564]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d2ec:	4313      	orrs	r3, r2
 801d2ee:	60cb      	str	r3, [r1, #12]
 801d2f0:	e026      	b.n	801d340 <HAL_RCC_OscConfig+0x314>
 801d2f2:	4b8b      	ldr	r3, [pc, #556]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d2f4:	68db      	ldr	r3, [r3, #12]
 801d2f6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	6a1b      	ldr	r3, [r3, #32]
 801d2fe:	03db      	lsls	r3, r3, #15
 801d300:	4987      	ldr	r1, [pc, #540]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d302:	4313      	orrs	r3, r2
 801d304:	60cb      	str	r3, [r1, #12]
 801d306:	e01b      	b.n	801d340 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 801d308:	4b85      	ldr	r3, [pc, #532]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	4a84      	ldr	r2, [pc, #528]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d30e:	f023 0301 	bic.w	r3, r3, #1
 801d312:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801d314:	f7f9 f8aa 	bl	801646c <HAL_GetTick>
 801d318:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 801d31a:	e009      	b.n	801d330 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801d31c:	f7f9 f8a6 	bl	801646c <HAL_GetTick>
 801d320:	4602      	mov	r2, r0
 801d322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d324:	1ad3      	subs	r3, r2, r3
 801d326:	2b02      	cmp	r3, #2
 801d328:	d902      	bls.n	801d330 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 801d32a:	2303      	movs	r3, #3
 801d32c:	f000 bd53 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 801d330:	4b7b      	ldr	r3, [pc, #492]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	f003 0304 	and.w	r3, r3, #4
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d1ef      	bne.n	801d31c <HAL_RCC_OscConfig+0x2f0>
 801d33c:	e000      	b.n	801d340 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 801d33e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	f003 0301 	and.w	r3, r3, #1
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f000 808b 	beq.w	801d464 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 801d34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d350:	2b08      	cmp	r3, #8
 801d352:	d005      	beq.n	801d360 <HAL_RCC_OscConfig+0x334>
 801d354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d356:	2b0c      	cmp	r3, #12
 801d358:	d109      	bne.n	801d36e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801d35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d35c:	2b03      	cmp	r3, #3
 801d35e:	d106      	bne.n	801d36e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	685b      	ldr	r3, [r3, #4]
 801d364:	2b00      	cmp	r3, #0
 801d366:	d17d      	bne.n	801d464 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 801d368:	2301      	movs	r3, #1
 801d36a:	f000 bd34 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	685b      	ldr	r3, [r3, #4]
 801d372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d376:	d106      	bne.n	801d386 <HAL_RCC_OscConfig+0x35a>
 801d378:	4b69      	ldr	r3, [pc, #420]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	4a68      	ldr	r2, [pc, #416]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d37e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d382:	6013      	str	r3, [r2, #0]
 801d384:	e041      	b.n	801d40a <HAL_RCC_OscConfig+0x3de>
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	685b      	ldr	r3, [r3, #4]
 801d38a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d38e:	d112      	bne.n	801d3b6 <HAL_RCC_OscConfig+0x38a>
 801d390:	4b63      	ldr	r3, [pc, #396]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	4a62      	ldr	r2, [pc, #392]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d396:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d39a:	6013      	str	r3, [r2, #0]
 801d39c:	4b60      	ldr	r3, [pc, #384]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	4a5f      	ldr	r2, [pc, #380]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3a2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d3a6:	6013      	str	r3, [r2, #0]
 801d3a8:	4b5d      	ldr	r3, [pc, #372]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	4a5c      	ldr	r2, [pc, #368]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d3b2:	6013      	str	r3, [r2, #0]
 801d3b4:	e029      	b.n	801d40a <HAL_RCC_OscConfig+0x3de>
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	685b      	ldr	r3, [r3, #4]
 801d3ba:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 801d3be:	d112      	bne.n	801d3e6 <HAL_RCC_OscConfig+0x3ba>
 801d3c0:	4b57      	ldr	r3, [pc, #348]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	4a56      	ldr	r2, [pc, #344]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d3ca:	6013      	str	r3, [r2, #0]
 801d3cc:	4b54      	ldr	r3, [pc, #336]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	4a53      	ldr	r2, [pc, #332]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d3d6:	6013      	str	r3, [r2, #0]
 801d3d8:	4b51      	ldr	r3, [pc, #324]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	4a50      	ldr	r2, [pc, #320]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d3e2:	6013      	str	r3, [r2, #0]
 801d3e4:	e011      	b.n	801d40a <HAL_RCC_OscConfig+0x3de>
 801d3e6:	4b4e      	ldr	r3, [pc, #312]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	4a4d      	ldr	r2, [pc, #308]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d3f0:	6013      	str	r3, [r2, #0]
 801d3f2:	4b4b      	ldr	r3, [pc, #300]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	4a4a      	ldr	r2, [pc, #296]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d3f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d3fc:	6013      	str	r3, [r2, #0]
 801d3fe:	4b48      	ldr	r3, [pc, #288]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	4a47      	ldr	r2, [pc, #284]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d404:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d408:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	685b      	ldr	r3, [r3, #4]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d014      	beq.n	801d43c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 801d412:	f7f9 f82b 	bl	801646c <HAL_GetTick>
 801d416:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801d418:	e009      	b.n	801d42e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d41a:	f7f9 f827 	bl	801646c <HAL_GetTick>
 801d41e:	4602      	mov	r2, r0
 801d420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d422:	1ad3      	subs	r3, r2, r3
 801d424:	2b64      	cmp	r3, #100	@ 0x64
 801d426:	d902      	bls.n	801d42e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 801d428:	2303      	movs	r3, #3
 801d42a:	f000 bcd4 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801d42e:	4b3c      	ldr	r3, [pc, #240]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d436:	2b00      	cmp	r3, #0
 801d438:	d0ef      	beq.n	801d41a <HAL_RCC_OscConfig+0x3ee>
 801d43a:	e013      	b.n	801d464 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 801d43c:	f7f9 f816 	bl	801646c <HAL_GetTick>
 801d440:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801d442:	e009      	b.n	801d458 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d444:	f7f9 f812 	bl	801646c <HAL_GetTick>
 801d448:	4602      	mov	r2, r0
 801d44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d44c:	1ad3      	subs	r3, r2, r3
 801d44e:	2b64      	cmp	r3, #100	@ 0x64
 801d450:	d902      	bls.n	801d458 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 801d452:	2303      	movs	r3, #3
 801d454:	f000 bcbf 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801d458:	4b31      	ldr	r3, [pc, #196]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d460:	2b00      	cmp	r3, #0
 801d462:	d1ef      	bne.n	801d444 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	f003 0302 	and.w	r3, r3, #2
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	d05f      	beq.n	801d530 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801d470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d472:	2b04      	cmp	r3, #4
 801d474:	d005      	beq.n	801d482 <HAL_RCC_OscConfig+0x456>
 801d476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d478:	2b0c      	cmp	r3, #12
 801d47a:	d114      	bne.n	801d4a6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801d47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d47e:	2b02      	cmp	r3, #2
 801d480:	d111      	bne.n	801d4a6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801d482:	687b      	ldr	r3, [r7, #4]
 801d484:	68db      	ldr	r3, [r3, #12]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d102      	bne.n	801d490 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 801d48a:	2301      	movs	r3, #1
 801d48c:	f000 bca3 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 801d490:	4b23      	ldr	r3, [pc, #140]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d492:	691b      	ldr	r3, [r3, #16]
 801d494:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	691b      	ldr	r3, [r3, #16]
 801d49c:	041b      	lsls	r3, r3, #16
 801d49e:	4920      	ldr	r1, [pc, #128]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4a0:	4313      	orrs	r3, r2
 801d4a2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 801d4a4:	e044      	b.n	801d530 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	68db      	ldr	r3, [r3, #12]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	d024      	beq.n	801d4f8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 801d4ae:	4b1c      	ldr	r3, [pc, #112]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	4a1b      	ldr	r2, [pc, #108]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d4b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801d4ba:	f7f8 ffd7 	bl	801646c <HAL_GetTick>
 801d4be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d4c0:	e009      	b.n	801d4d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d4c2:	f7f8 ffd3 	bl	801646c <HAL_GetTick>
 801d4c6:	4602      	mov	r2, r0
 801d4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4ca:	1ad3      	subs	r3, r2, r3
 801d4cc:	2b02      	cmp	r3, #2
 801d4ce:	d902      	bls.n	801d4d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 801d4d0:	2303      	movs	r3, #3
 801d4d2:	f000 bc80 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d4d6:	4b12      	ldr	r3, [pc, #72]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d0ef      	beq.n	801d4c2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 801d4e2:	4b0f      	ldr	r3, [pc, #60]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4e4:	691b      	ldr	r3, [r3, #16]
 801d4e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	691b      	ldr	r3, [r3, #16]
 801d4ee:	041b      	lsls	r3, r3, #16
 801d4f0:	490b      	ldr	r1, [pc, #44]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4f2:	4313      	orrs	r3, r2
 801d4f4:	610b      	str	r3, [r1, #16]
 801d4f6:	e01b      	b.n	801d530 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 801d4f8:	4b09      	ldr	r3, [pc, #36]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	4a08      	ldr	r2, [pc, #32]	@ (801d520 <HAL_RCC_OscConfig+0x4f4>)
 801d4fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d502:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801d504:	f7f8 ffb2 	bl	801646c <HAL_GetTick>
 801d508:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801d50a:	e00b      	b.n	801d524 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d50c:	f7f8 ffae 	bl	801646c <HAL_GetTick>
 801d510:	4602      	mov	r2, r0
 801d512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d514:	1ad3      	subs	r3, r2, r3
 801d516:	2b02      	cmp	r3, #2
 801d518:	d904      	bls.n	801d524 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 801d51a:	2303      	movs	r3, #3
 801d51c:	f000 bc5b 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
 801d520:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801d524:	4baf      	ldr	r3, [pc, #700]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d526:	681b      	ldr	r3, [r3, #0]
 801d528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d1ed      	bne.n	801d50c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	681b      	ldr	r3, [r3, #0]
 801d534:	f003 0308 	and.w	r3, r3, #8
 801d538:	2b00      	cmp	r3, #0
 801d53a:	f000 80c8 	beq.w	801d6ce <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 801d53e:	2300      	movs	r3, #0
 801d540:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d544:	4ba7      	ldr	r3, [pc, #668]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d54a:	f003 0304 	and.w	r3, r3, #4
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d111      	bne.n	801d576 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d552:	4ba4      	ldr	r3, [pc, #656]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d558:	4aa2      	ldr	r2, [pc, #648]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d55a:	f043 0304 	orr.w	r3, r3, #4
 801d55e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801d562:	4ba0      	ldr	r3, [pc, #640]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d568:	f003 0304 	and.w	r3, r3, #4
 801d56c:	617b      	str	r3, [r7, #20]
 801d56e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 801d570:	2301      	movs	r3, #1
 801d572:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801d576:	4b9c      	ldr	r3, [pc, #624]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d57a:	f003 0301 	and.w	r3, r3, #1
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d119      	bne.n	801d5b6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801d582:	4b99      	ldr	r3, [pc, #612]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d586:	4a98      	ldr	r2, [pc, #608]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d588:	f043 0301 	orr.w	r3, r3, #1
 801d58c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801d58e:	f7f8 ff6d 	bl	801646c <HAL_GetTick>
 801d592:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801d594:	e009      	b.n	801d5aa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d596:	f7f8 ff69 	bl	801646c <HAL_GetTick>
 801d59a:	4602      	mov	r2, r0
 801d59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d59e:	1ad3      	subs	r3, r2, r3
 801d5a0:	2b02      	cmp	r3, #2
 801d5a2:	d902      	bls.n	801d5aa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 801d5a4:	2303      	movs	r3, #3
 801d5a6:	f000 bc16 	b.w	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801d5aa:	4b8f      	ldr	r3, [pc, #572]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d5ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d5ae:	f003 0301 	and.w	r3, r3, #1
 801d5b2:	2b00      	cmp	r3, #0
 801d5b4:	d0ef      	beq.n	801d596 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801d5b6:	687b      	ldr	r3, [r7, #4]
 801d5b8:	695b      	ldr	r3, [r3, #20]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d05f      	beq.n	801d67e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 801d5be:	4b89      	ldr	r3, [pc, #548]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d5c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d5c4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	699a      	ldr	r2, [r3, #24]
 801d5ca:	6a3b      	ldr	r3, [r7, #32]
 801d5cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	d037      	beq.n	801d644 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 801d5d4:	6a3b      	ldr	r3, [r7, #32]
 801d5d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d006      	beq.n	801d5ec <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 801d5de:	6a3b      	ldr	r3, [r7, #32]
 801d5e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d101      	bne.n	801d5ec <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	e3f4      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 801d5ec:	6a3b      	ldr	r3, [r7, #32]
 801d5ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d01b      	beq.n	801d62e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 801d5f6:	4b7b      	ldr	r3, [pc, #492]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d5f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d5fc:	4a79      	ldr	r2, [pc, #484]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d5fe:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 801d602:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 801d606:	f7f8 ff31 	bl	801646c <HAL_GetTick>
 801d60a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 801d60c:	e008      	b.n	801d620 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d60e:	f7f8 ff2d 	bl	801646c <HAL_GetTick>
 801d612:	4602      	mov	r2, r0
 801d614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d616:	1ad3      	subs	r3, r2, r3
 801d618:	2b05      	cmp	r3, #5
 801d61a:	d901      	bls.n	801d620 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 801d61c:	2303      	movs	r3, #3
 801d61e:	e3da      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 801d620:	4b70      	ldr	r3, [pc, #448]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d1ef      	bne.n	801d60e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 801d62e:	4b6d      	ldr	r3, [pc, #436]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d634:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	699b      	ldr	r3, [r3, #24]
 801d63c:	4969      	ldr	r1, [pc, #420]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d63e:	4313      	orrs	r3, r2
 801d640:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 801d644:	4b67      	ldr	r3, [pc, #412]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d64a:	4a66      	ldr	r2, [pc, #408]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d64c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801d650:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 801d654:	f7f8 ff0a 	bl	801646c <HAL_GetTick>
 801d658:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 801d65a:	e008      	b.n	801d66e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d65c:	f7f8 ff06 	bl	801646c <HAL_GetTick>
 801d660:	4602      	mov	r2, r0
 801d662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d664:	1ad3      	subs	r3, r2, r3
 801d666:	2b05      	cmp	r3, #5
 801d668:	d901      	bls.n	801d66e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 801d66a:	2303      	movs	r3, #3
 801d66c:	e3b3      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 801d66e:	4b5d      	ldr	r3, [pc, #372]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d678:	2b00      	cmp	r3, #0
 801d67a:	d0ef      	beq.n	801d65c <HAL_RCC_OscConfig+0x630>
 801d67c:	e01b      	b.n	801d6b6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 801d67e:	4b59      	ldr	r3, [pc, #356]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d684:	4a57      	ldr	r2, [pc, #348]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d686:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 801d68a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 801d68e:	f7f8 feed 	bl	801646c <HAL_GetTick>
 801d692:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 801d694:	e008      	b.n	801d6a8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d696:	f7f8 fee9 	bl	801646c <HAL_GetTick>
 801d69a:	4602      	mov	r2, r0
 801d69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d69e:	1ad3      	subs	r3, r2, r3
 801d6a0:	2b05      	cmp	r3, #5
 801d6a2:	d901      	bls.n	801d6a8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 801d6a4:	2303      	movs	r3, #3
 801d6a6:	e396      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 801d6a8:	4b4e      	ldr	r3, [pc, #312]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d6aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d6ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d1ef      	bne.n	801d696 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801d6b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 801d6ba:	2b01      	cmp	r3, #1
 801d6bc:	d107      	bne.n	801d6ce <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d6be:	4b49      	ldr	r3, [pc, #292]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d6c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d6c4:	4a47      	ldr	r2, [pc, #284]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d6c6:	f023 0304 	bic.w	r3, r3, #4
 801d6ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	f003 0304 	and.w	r3, r3, #4
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	f000 8111 	beq.w	801d8fe <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 801d6dc:	2300      	movs	r3, #0
 801d6de:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d6e2:	4b40      	ldr	r3, [pc, #256]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d6e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d6e8:	f003 0304 	and.w	r3, r3, #4
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d111      	bne.n	801d714 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d6f0:	4b3c      	ldr	r3, [pc, #240]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d6f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d6f6:	4a3b      	ldr	r2, [pc, #236]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d6f8:	f043 0304 	orr.w	r3, r3, #4
 801d6fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801d700:	4b38      	ldr	r3, [pc, #224]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d706:	f003 0304 	and.w	r3, r3, #4
 801d70a:	613b      	str	r3, [r7, #16]
 801d70c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 801d70e:	2301      	movs	r3, #1
 801d710:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801d714:	4b34      	ldr	r3, [pc, #208]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d718:	f003 0301 	and.w	r3, r3, #1
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d118      	bne.n	801d752 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801d720:	4b31      	ldr	r3, [pc, #196]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d724:	4a30      	ldr	r2, [pc, #192]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d726:	f043 0301 	orr.w	r3, r3, #1
 801d72a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801d72c:	f7f8 fe9e 	bl	801646c <HAL_GetTick>
 801d730:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801d732:	e008      	b.n	801d746 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d734:	f7f8 fe9a 	bl	801646c <HAL_GetTick>
 801d738:	4602      	mov	r2, r0
 801d73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d73c:	1ad3      	subs	r3, r2, r3
 801d73e:	2b02      	cmp	r3, #2
 801d740:	d901      	bls.n	801d746 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 801d742:	2303      	movs	r3, #3
 801d744:	e347      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801d746:	4b28      	ldr	r3, [pc, #160]	@ (801d7e8 <HAL_RCC_OscConfig+0x7bc>)
 801d748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d74a:	f003 0301 	and.w	r3, r3, #1
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d0f0      	beq.n	801d734 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 801d752:	687b      	ldr	r3, [r7, #4]
 801d754:	689b      	ldr	r3, [r3, #8]
 801d756:	f003 0301 	and.w	r3, r3, #1
 801d75a:	2b00      	cmp	r3, #0
 801d75c:	d01f      	beq.n	801d79e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	689b      	ldr	r3, [r3, #8]
 801d762:	f003 0304 	and.w	r3, r3, #4
 801d766:	2b00      	cmp	r3, #0
 801d768:	d010      	beq.n	801d78c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801d76a:	4b1e      	ldr	r3, [pc, #120]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d76c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d770:	4a1c      	ldr	r2, [pc, #112]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d772:	f043 0304 	orr.w	r3, r3, #4
 801d776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801d77a:	4b1a      	ldr	r3, [pc, #104]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d77c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d780:	4a18      	ldr	r2, [pc, #96]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d782:	f043 0301 	orr.w	r3, r3, #1
 801d786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801d78a:	e018      	b.n	801d7be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801d78c:	4b15      	ldr	r3, [pc, #84]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d78e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d792:	4a14      	ldr	r2, [pc, #80]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d794:	f043 0301 	orr.w	r3, r3, #1
 801d798:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801d79c:	e00f      	b.n	801d7be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 801d79e:	4b11      	ldr	r3, [pc, #68]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d7a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d7a4:	4a0f      	ldr	r2, [pc, #60]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d7a6:	f023 0301 	bic.w	r3, r3, #1
 801d7aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 801d7ae:	4b0d      	ldr	r3, [pc, #52]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d7b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d7b4:	4a0b      	ldr	r2, [pc, #44]	@ (801d7e4 <HAL_RCC_OscConfig+0x7b8>)
 801d7b6:	f023 0304 	bic.w	r3, r3, #4
 801d7ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	689b      	ldr	r3, [r3, #8]
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d057      	beq.n	801d876 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 801d7c6:	f7f8 fe51 	bl	801646c <HAL_GetTick>
 801d7ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d7cc:	e00e      	b.n	801d7ec <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d7ce:	f7f8 fe4d 	bl	801646c <HAL_GetTick>
 801d7d2:	4602      	mov	r2, r0
 801d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7d6:	1ad3      	subs	r3, r2, r3
 801d7d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d7dc:	4293      	cmp	r3, r2
 801d7de:	d905      	bls.n	801d7ec <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 801d7e0:	2303      	movs	r3, #3
 801d7e2:	e2f8      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
 801d7e4:	46020c00 	.word	0x46020c00
 801d7e8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d7ec:	4b9c      	ldr	r3, [pc, #624]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d7ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d7f2:	f003 0302 	and.w	r3, r3, #2
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d0e9      	beq.n	801d7ce <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	689b      	ldr	r3, [r3, #8]
 801d7fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d802:	2b00      	cmp	r3, #0
 801d804:	d01b      	beq.n	801d83e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801d806:	4b96      	ldr	r3, [pc, #600]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d80c:	4a94      	ldr	r2, [pc, #592]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d812:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801d816:	e00a      	b.n	801d82e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d818:	f7f8 fe28 	bl	801646c <HAL_GetTick>
 801d81c:	4602      	mov	r2, r0
 801d81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d820:	1ad3      	subs	r3, r2, r3
 801d822:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d826:	4293      	cmp	r3, r2
 801d828:	d901      	bls.n	801d82e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 801d82a:	2303      	movs	r3, #3
 801d82c:	e2d3      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 801d82e:	4b8c      	ldr	r3, [pc, #560]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d0ed      	beq.n	801d818 <HAL_RCC_OscConfig+0x7ec>
 801d83c:	e053      	b.n	801d8e6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801d83e:	4b88      	ldr	r3, [pc, #544]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d844:	4a86      	ldr	r2, [pc, #536]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d84a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801d84e:	e00a      	b.n	801d866 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d850:	f7f8 fe0c 	bl	801646c <HAL_GetTick>
 801d854:	4602      	mov	r2, r0
 801d856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d858:	1ad3      	subs	r3, r2, r3
 801d85a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d85e:	4293      	cmp	r3, r2
 801d860:	d901      	bls.n	801d866 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 801d862:	2303      	movs	r3, #3
 801d864:	e2b7      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801d866:	4b7e      	ldr	r3, [pc, #504]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d86c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d870:	2b00      	cmp	r3, #0
 801d872:	d1ed      	bne.n	801d850 <HAL_RCC_OscConfig+0x824>
 801d874:	e037      	b.n	801d8e6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 801d876:	f7f8 fdf9 	bl	801646c <HAL_GetTick>
 801d87a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801d87c:	e00a      	b.n	801d894 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d87e:	f7f8 fdf5 	bl	801646c <HAL_GetTick>
 801d882:	4602      	mov	r2, r0
 801d884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d886:	1ad3      	subs	r3, r2, r3
 801d888:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d88c:	4293      	cmp	r3, r2
 801d88e:	d901      	bls.n	801d894 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 801d890:	2303      	movs	r3, #3
 801d892:	e2a0      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801d894:	4b72      	ldr	r3, [pc, #456]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d89a:	f003 0302 	and.w	r3, r3, #2
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d1ed      	bne.n	801d87e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 801d8a2:	4b6f      	ldr	r3, [pc, #444]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d8a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d8ac:	2b00      	cmp	r3, #0
 801d8ae:	d01a      	beq.n	801d8e6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 801d8b0:	4b6b      	ldr	r3, [pc, #428]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d8b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d8b6:	4a6a      	ldr	r2, [pc, #424]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d8b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d8bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801d8c0:	e00a      	b.n	801d8d8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d8c2:	f7f8 fdd3 	bl	801646c <HAL_GetTick>
 801d8c6:	4602      	mov	r2, r0
 801d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d8ca:	1ad3      	subs	r3, r2, r3
 801d8cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d8d0:	4293      	cmp	r3, r2
 801d8d2:	d901      	bls.n	801d8d8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 801d8d4:	2303      	movs	r3, #3
 801d8d6:	e27e      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 801d8d8:	4b61      	ldr	r3, [pc, #388]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d8da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801d8de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801d8e2:	2b00      	cmp	r3, #0
 801d8e4:	d1ed      	bne.n	801d8c2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801d8e6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 801d8ea:	2b01      	cmp	r3, #1
 801d8ec:	d107      	bne.n	801d8fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d8ee:	4b5c      	ldr	r3, [pc, #368]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d8f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d8f4:	4a5a      	ldr	r2, [pc, #360]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d8f6:	f023 0304 	bic.w	r3, r3, #4
 801d8fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d8fe:	687b      	ldr	r3, [r7, #4]
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	f003 0320 	and.w	r3, r3, #32
 801d906:	2b00      	cmp	r3, #0
 801d908:	d036      	beq.n	801d978 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d019      	beq.n	801d946 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 801d912:	4b53      	ldr	r3, [pc, #332]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	4a52      	ldr	r2, [pc, #328]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d918:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d91c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801d91e:	f7f8 fda5 	bl	801646c <HAL_GetTick>
 801d922:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 801d924:	e008      	b.n	801d938 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d926:	f7f8 fda1 	bl	801646c <HAL_GetTick>
 801d92a:	4602      	mov	r2, r0
 801d92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d92e:	1ad3      	subs	r3, r2, r3
 801d930:	2b02      	cmp	r3, #2
 801d932:	d901      	bls.n	801d938 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 801d934:	2303      	movs	r3, #3
 801d936:	e24e      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 801d938:	4b49      	ldr	r3, [pc, #292]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d940:	2b00      	cmp	r3, #0
 801d942:	d0f0      	beq.n	801d926 <HAL_RCC_OscConfig+0x8fa>
 801d944:	e018      	b.n	801d978 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 801d946:	4b46      	ldr	r3, [pc, #280]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d948:	681b      	ldr	r3, [r3, #0]
 801d94a:	4a45      	ldr	r2, [pc, #276]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d94c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d950:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801d952:	f7f8 fd8b 	bl	801646c <HAL_GetTick>
 801d956:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 801d958:	e008      	b.n	801d96c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d95a:	f7f8 fd87 	bl	801646c <HAL_GetTick>
 801d95e:	4602      	mov	r2, r0
 801d960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d962:	1ad3      	subs	r3, r2, r3
 801d964:	2b02      	cmp	r3, #2
 801d966:	d901      	bls.n	801d96c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 801d968:	2303      	movs	r3, #3
 801d96a:	e234      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 801d96c:	4b3c      	ldr	r3, [pc, #240]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d974:	2b00      	cmp	r3, #0
 801d976:	d1f0      	bne.n	801d95a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d980:	2b00      	cmp	r3, #0
 801d982:	d036      	beq.n	801d9f2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d019      	beq.n	801d9c0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 801d98c:	4b34      	ldr	r3, [pc, #208]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	4a33      	ldr	r2, [pc, #204]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801d996:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801d998:	f7f8 fd68 	bl	801646c <HAL_GetTick>
 801d99c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 801d99e:	e008      	b.n	801d9b2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 801d9a0:	f7f8 fd64 	bl	801646c <HAL_GetTick>
 801d9a4:	4602      	mov	r2, r0
 801d9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9a8:	1ad3      	subs	r3, r2, r3
 801d9aa:	2b02      	cmp	r3, #2
 801d9ac:	d901      	bls.n	801d9b2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 801d9ae:	2303      	movs	r3, #3
 801d9b0:	e211      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 801d9b2:	4b2b      	ldr	r3, [pc, #172]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d0f0      	beq.n	801d9a0 <HAL_RCC_OscConfig+0x974>
 801d9be:	e018      	b.n	801d9f2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 801d9c0:	4b27      	ldr	r3, [pc, #156]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d9c2:	681b      	ldr	r3, [r3, #0]
 801d9c4:	4a26      	ldr	r2, [pc, #152]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d9c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801d9ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801d9cc:	f7f8 fd4e 	bl	801646c <HAL_GetTick>
 801d9d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 801d9d2:	e008      	b.n	801d9e6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 801d9d4:	f7f8 fd4a 	bl	801646c <HAL_GetTick>
 801d9d8:	4602      	mov	r2, r0
 801d9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d9dc:	1ad3      	subs	r3, r2, r3
 801d9de:	2b02      	cmp	r3, #2
 801d9e0:	d901      	bls.n	801d9e6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 801d9e2:	2303      	movs	r3, #3
 801d9e4:	e1f7      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 801d9e6:	4b1e      	ldr	r3, [pc, #120]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d1f0      	bne.n	801d9d4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	681b      	ldr	r3, [r3, #0]
 801d9f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d07f      	beq.n	801dafe <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801da02:	2b00      	cmp	r3, #0
 801da04:	d062      	beq.n	801dacc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 801da06:	4b16      	ldr	r3, [pc, #88]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da08:	689b      	ldr	r3, [r3, #8]
 801da0a:	4a15      	ldr	r2, [pc, #84]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801da10:	6093      	str	r3, [r2, #8]
 801da12:	4b13      	ldr	r3, [pc, #76]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da14:	689b      	ldr	r3, [r3, #8]
 801da16:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da1e:	4910      	ldr	r1, [pc, #64]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da20:	4313      	orrs	r3, r2
 801da22:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da28:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 801da2c:	d309      	bcc.n	801da42 <HAL_RCC_OscConfig+0xa16>
 801da2e:	4b0c      	ldr	r3, [pc, #48]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da30:	68db      	ldr	r3, [r3, #12]
 801da32:	f023 021f 	bic.w	r2, r3, #31
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	6a1b      	ldr	r3, [r3, #32]
 801da3a:	4909      	ldr	r1, [pc, #36]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da3c:	4313      	orrs	r3, r2
 801da3e:	60cb      	str	r3, [r1, #12]
 801da40:	e02a      	b.n	801da98 <HAL_RCC_OscConfig+0xa6c>
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da46:	2b00      	cmp	r3, #0
 801da48:	da0c      	bge.n	801da64 <HAL_RCC_OscConfig+0xa38>
 801da4a:	4b05      	ldr	r3, [pc, #20]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da4c:	68db      	ldr	r3, [r3, #12]
 801da4e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 801da52:	687b      	ldr	r3, [r7, #4]
 801da54:	6a1b      	ldr	r3, [r3, #32]
 801da56:	015b      	lsls	r3, r3, #5
 801da58:	4901      	ldr	r1, [pc, #4]	@ (801da60 <HAL_RCC_OscConfig+0xa34>)
 801da5a:	4313      	orrs	r3, r2
 801da5c:	60cb      	str	r3, [r1, #12]
 801da5e:	e01b      	b.n	801da98 <HAL_RCC_OscConfig+0xa6c>
 801da60:	46020c00 	.word	0x46020c00
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801da68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801da6c:	d30a      	bcc.n	801da84 <HAL_RCC_OscConfig+0xa58>
 801da6e:	4ba1      	ldr	r3, [pc, #644]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801da70:	68db      	ldr	r3, [r3, #12]
 801da72:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	6a1b      	ldr	r3, [r3, #32]
 801da7a:	029b      	lsls	r3, r3, #10
 801da7c:	499d      	ldr	r1, [pc, #628]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801da7e:	4313      	orrs	r3, r2
 801da80:	60cb      	str	r3, [r1, #12]
 801da82:	e009      	b.n	801da98 <HAL_RCC_OscConfig+0xa6c>
 801da84:	4b9b      	ldr	r3, [pc, #620]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801da86:	68db      	ldr	r3, [r3, #12]
 801da88:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	6a1b      	ldr	r3, [r3, #32]
 801da90:	03db      	lsls	r3, r3, #15
 801da92:	4998      	ldr	r1, [pc, #608]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801da94:	4313      	orrs	r3, r2
 801da96:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 801da98:	4b96      	ldr	r3, [pc, #600]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	4a95      	ldr	r2, [pc, #596]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801da9e:	f043 0310 	orr.w	r3, r3, #16
 801daa2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801daa4:	f7f8 fce2 	bl	801646c <HAL_GetTick>
 801daa8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 801daaa:	e008      	b.n	801dabe <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 801daac:	f7f8 fcde 	bl	801646c <HAL_GetTick>
 801dab0:	4602      	mov	r2, r0
 801dab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dab4:	1ad3      	subs	r3, r2, r3
 801dab6:	2b02      	cmp	r3, #2
 801dab8:	d901      	bls.n	801dabe <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 801daba:	2303      	movs	r3, #3
 801dabc:	e18b      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 801dabe:	4b8d      	ldr	r3, [pc, #564]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	f003 0320 	and.w	r3, r3, #32
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d0f0      	beq.n	801daac <HAL_RCC_OscConfig+0xa80>
 801daca:	e018      	b.n	801dafe <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 801dacc:	4b89      	ldr	r3, [pc, #548]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	4a88      	ldr	r2, [pc, #544]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dad2:	f023 0310 	bic.w	r3, r3, #16
 801dad6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 801dad8:	f7f8 fcc8 	bl	801646c <HAL_GetTick>
 801dadc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 801dade:	e008      	b.n	801daf2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 801dae0:	f7f8 fcc4 	bl	801646c <HAL_GetTick>
 801dae4:	4602      	mov	r2, r0
 801dae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dae8:	1ad3      	subs	r3, r2, r3
 801daea:	2b02      	cmp	r3, #2
 801daec:	d901      	bls.n	801daf2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 801daee:	2303      	movs	r3, #3
 801daf0:	e171      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 801daf2:	4b80      	ldr	r3, [pc, #512]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801daf4:	681b      	ldr	r3, [r3, #0]
 801daf6:	f003 0320 	and.w	r3, r3, #32
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d1f0      	bne.n	801dae0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db02:	2b00      	cmp	r3, #0
 801db04:	f000 8166 	beq.w	801ddd4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 801db08:	2300      	movs	r3, #0
 801db0a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801db0e:	4b79      	ldr	r3, [pc, #484]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db10:	69db      	ldr	r3, [r3, #28]
 801db12:	f003 030c 	and.w	r3, r3, #12
 801db16:	2b0c      	cmp	r3, #12
 801db18:	f000 80f2 	beq.w	801dd00 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db20:	2b02      	cmp	r3, #2
 801db22:	f040 80c5 	bne.w	801dcb0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 801db26:	4b73      	ldr	r3, [pc, #460]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	4a72      	ldr	r2, [pc, #456]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801db30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801db32:	f7f8 fc9b 	bl	801646c <HAL_GetTick>
 801db36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 801db38:	e008      	b.n	801db4c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801db3a:	f7f8 fc97 	bl	801646c <HAL_GetTick>
 801db3e:	4602      	mov	r2, r0
 801db40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801db42:	1ad3      	subs	r3, r2, r3
 801db44:	2b02      	cmp	r3, #2
 801db46:	d901      	bls.n	801db4c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 801db48:	2303      	movs	r3, #3
 801db4a:	e144      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 801db4c:	4b69      	ldr	r3, [pc, #420]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801db54:	2b00      	cmp	r3, #0
 801db56:	d1f0      	bne.n	801db3a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801db58:	4b66      	ldr	r3, [pc, #408]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801db5e:	f003 0304 	and.w	r3, r3, #4
 801db62:	2b00      	cmp	r3, #0
 801db64:	d111      	bne.n	801db8a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 801db66:	4b63      	ldr	r3, [pc, #396]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801db6c:	4a61      	ldr	r2, [pc, #388]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db6e:	f043 0304 	orr.w	r3, r3, #4
 801db72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801db76:	4b5f      	ldr	r3, [pc, #380]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801db78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801db7c:	f003 0304 	and.w	r3, r3, #4
 801db80:	60fb      	str	r3, [r7, #12]
 801db82:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 801db84:	2301      	movs	r3, #1
 801db86:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 801db8a:	4b5b      	ldr	r3, [pc, #364]	@ (801dcf8 <HAL_RCC_OscConfig+0xccc>)
 801db8c:	68db      	ldr	r3, [r3, #12]
 801db8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801db92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801db96:	d102      	bne.n	801db9e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 801db98:	2301      	movs	r3, #1
 801db9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 801db9e:	4b56      	ldr	r3, [pc, #344]	@ (801dcf8 <HAL_RCC_OscConfig+0xccc>)
 801dba0:	68db      	ldr	r3, [r3, #12]
 801dba2:	4a55      	ldr	r2, [pc, #340]	@ (801dcf8 <HAL_RCC_OscConfig+0xccc>)
 801dba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801dba8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 801dbaa:	4b52      	ldr	r3, [pc, #328]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dbae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801dbb2:	f023 0303 	bic.w	r3, r3, #3
 801dbb6:	687a      	ldr	r2, [r7, #4]
 801dbb8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 801dbba:	687a      	ldr	r2, [r7, #4]
 801dbbc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 801dbbe:	3a01      	subs	r2, #1
 801dbc0:	0212      	lsls	r2, r2, #8
 801dbc2:	4311      	orrs	r1, r2
 801dbc4:	687a      	ldr	r2, [r7, #4]
 801dbc6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 801dbc8:	430a      	orrs	r2, r1
 801dbca:	494a      	ldr	r1, [pc, #296]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dbcc:	4313      	orrs	r3, r2
 801dbce:	628b      	str	r3, [r1, #40]	@ 0x28
 801dbd0:	4b48      	ldr	r3, [pc, #288]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dbd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801dbd4:	4b49      	ldr	r3, [pc, #292]	@ (801dcfc <HAL_RCC_OscConfig+0xcd0>)
 801dbd6:	4013      	ands	r3, r2
 801dbd8:	687a      	ldr	r2, [r7, #4]
 801dbda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801dbdc:	3a01      	subs	r2, #1
 801dbde:	f3c2 0108 	ubfx	r1, r2, #0, #9
 801dbe2:	687a      	ldr	r2, [r7, #4]
 801dbe4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 801dbe6:	3a01      	subs	r2, #1
 801dbe8:	0252      	lsls	r2, r2, #9
 801dbea:	b292      	uxth	r2, r2
 801dbec:	4311      	orrs	r1, r2
 801dbee:	687a      	ldr	r2, [r7, #4]
 801dbf0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801dbf2:	3a01      	subs	r2, #1
 801dbf4:	0412      	lsls	r2, r2, #16
 801dbf6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 801dbfa:	4311      	orrs	r1, r2
 801dbfc:	687a      	ldr	r2, [r7, #4]
 801dbfe:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 801dc00:	3a01      	subs	r2, #1
 801dc02:	0612      	lsls	r2, r2, #24
 801dc04:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 801dc08:	430a      	orrs	r2, r1
 801dc0a:	493a      	ldr	r1, [pc, #232]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc0c:	4313      	orrs	r3, r2
 801dc0e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 801dc10:	4b38      	ldr	r3, [pc, #224]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc14:	4a37      	ldr	r2, [pc, #220]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc16:	f023 0310 	bic.w	r3, r3, #16
 801dc1a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801dc20:	4a34      	ldr	r2, [pc, #208]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc22:	00db      	lsls	r3, r3, #3
 801dc24:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 801dc26:	4b33      	ldr	r3, [pc, #204]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc2a:	4a32      	ldr	r2, [pc, #200]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc2c:	f043 0310 	orr.w	r3, r3, #16
 801dc30:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 801dc32:	4b30      	ldr	r3, [pc, #192]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc36:	f023 020c 	bic.w	r2, r3, #12
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dc3e:	492d      	ldr	r1, [pc, #180]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc40:	4313      	orrs	r3, r2
 801dc42:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 801dc44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801dc48:	2b01      	cmp	r3, #1
 801dc4a:	d105      	bne.n	801dc58 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 801dc4c:	4b2a      	ldr	r3, [pc, #168]	@ (801dcf8 <HAL_RCC_OscConfig+0xccc>)
 801dc4e:	68db      	ldr	r3, [r3, #12]
 801dc50:	4a29      	ldr	r2, [pc, #164]	@ (801dcf8 <HAL_RCC_OscConfig+0xccc>)
 801dc52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801dc56:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 801dc58:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801dc5c:	2b01      	cmp	r3, #1
 801dc5e:	d107      	bne.n	801dc70 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 801dc60:	4b24      	ldr	r3, [pc, #144]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801dc66:	4a23      	ldr	r2, [pc, #140]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc68:	f023 0304 	bic.w	r3, r3, #4
 801dc6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801dc70:	4b20      	ldr	r3, [pc, #128]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc74:	4a1f      	ldr	r2, [pc, #124]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801dc7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 801dc7c:	4b1d      	ldr	r3, [pc, #116]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	4a1c      	ldr	r2, [pc, #112]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dc82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801dc86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801dc88:	f7f8 fbf0 	bl	801646c <HAL_GetTick>
 801dc8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801dc8e:	e008      	b.n	801dca2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801dc90:	f7f8 fbec 	bl	801646c <HAL_GetTick>
 801dc94:	4602      	mov	r2, r0
 801dc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dc98:	1ad3      	subs	r3, r2, r3
 801dc9a:	2b02      	cmp	r3, #2
 801dc9c:	d901      	bls.n	801dca2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 801dc9e:	2303      	movs	r3, #3
 801dca0:	e099      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801dca2:	4b14      	ldr	r3, [pc, #80]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d0f0      	beq.n	801dc90 <HAL_RCC_OscConfig+0xc64>
 801dcae:	e091      	b.n	801ddd4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 801dcb0:	4b10      	ldr	r3, [pc, #64]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	4a0f      	ldr	r2, [pc, #60]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dcb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801dcba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 801dcbc:	f7f8 fbd6 	bl	801646c <HAL_GetTick>
 801dcc0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 801dcc2:	e008      	b.n	801dcd6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801dcc4:	f7f8 fbd2 	bl	801646c <HAL_GetTick>
 801dcc8:	4602      	mov	r2, r0
 801dcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dccc:	1ad3      	subs	r3, r2, r3
 801dcce:	2b02      	cmp	r3, #2
 801dcd0:	d901      	bls.n	801dcd6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 801dcd2:	2303      	movs	r3, #3
 801dcd4:	e07f      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 801dcd6:	4b07      	ldr	r3, [pc, #28]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801dcde:	2b00      	cmp	r3, #0
 801dce0:	d1f0      	bne.n	801dcc4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 801dce2:	4b04      	ldr	r3, [pc, #16]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dce6:	4a03      	ldr	r2, [pc, #12]	@ (801dcf4 <HAL_RCC_OscConfig+0xcc8>)
 801dce8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 801dcec:	f023 0303 	bic.w	r3, r3, #3
 801dcf0:	6293      	str	r3, [r2, #40]	@ 0x28
 801dcf2:	e06f      	b.n	801ddd4 <HAL_RCC_OscConfig+0xda8>
 801dcf4:	46020c00 	.word	0x46020c00
 801dcf8:	46020800 	.word	0x46020800
 801dcfc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 801dd00:	4b37      	ldr	r3, [pc, #220]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801dd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd04:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801dd06:	4b36      	ldr	r3, [pc, #216]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801dd08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dd0a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dd10:	2b01      	cmp	r3, #1
 801dd12:	d039      	beq.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 801dd14:	69fb      	ldr	r3, [r7, #28]
 801dd16:	f003 0203 	and.w	r2, r3, #3
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801dd1e:	429a      	cmp	r2, r3
 801dd20:	d132      	bne.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 801dd22:	69fb      	ldr	r3, [r7, #28]
 801dd24:	0a1b      	lsrs	r3, r3, #8
 801dd26:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 801dd2a:	687b      	ldr	r3, [r7, #4]
 801dd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dd2e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 801dd30:	429a      	cmp	r2, r3
 801dd32:	d129      	bne.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 801dd34:	69fb      	ldr	r3, [r7, #28]
 801dd36:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 801dd3e:	429a      	cmp	r2, r3
 801dd40:	d122      	bne.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801dd42:	69bb      	ldr	r3, [r7, #24]
 801dd44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801dd48:	687b      	ldr	r3, [r7, #4]
 801dd4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801dd4c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 801dd4e:	429a      	cmp	r2, r3
 801dd50:	d11a      	bne.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 801dd52:	69bb      	ldr	r3, [r7, #24]
 801dd54:	0a5b      	lsrs	r3, r3, #9
 801dd56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801dd5a:	687b      	ldr	r3, [r7, #4]
 801dd5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801dd60:	429a      	cmp	r2, r3
 801dd62:	d111      	bne.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 801dd64:	69bb      	ldr	r3, [r7, #24]
 801dd66:	0c1b      	lsrs	r3, r3, #16
 801dd68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd70:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801dd72:	429a      	cmp	r2, r3
 801dd74:	d108      	bne.n	801dd88 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 801dd76:	69bb      	ldr	r3, [r7, #24]
 801dd78:	0e1b      	lsrs	r3, r3, #24
 801dd7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dd82:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801dd84:	429a      	cmp	r2, r3
 801dd86:	d001      	beq.n	801dd8c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 801dd88:	2301      	movs	r3, #1
 801dd8a:	e024      	b.n	801ddd6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 801dd8c:	4b14      	ldr	r3, [pc, #80]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801dd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dd90:	08db      	lsrs	r3, r3, #3
 801dd92:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	d01a      	beq.n	801ddd4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 801dd9e:	4b10      	ldr	r3, [pc, #64]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801dda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dda2:	4a0f      	ldr	r2, [pc, #60]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801dda4:	f023 0310 	bic.w	r3, r3, #16
 801dda8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ddaa:	f7f8 fb5f 	bl	801646c <HAL_GetTick>
 801ddae:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 801ddb0:	bf00      	nop
 801ddb2:	f7f8 fb5b 	bl	801646c <HAL_GetTick>
 801ddb6:	4602      	mov	r2, r0
 801ddb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddba:	4293      	cmp	r3, r2
 801ddbc:	d0f9      	beq.n	801ddb2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ddc2:	4a07      	ldr	r2, [pc, #28]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801ddc4:	00db      	lsls	r3, r3, #3
 801ddc6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 801ddc8:	4b05      	ldr	r3, [pc, #20]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801ddca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ddcc:	4a04      	ldr	r2, [pc, #16]	@ (801dde0 <HAL_RCC_OscConfig+0xdb4>)
 801ddce:	f043 0310 	orr.w	r3, r3, #16
 801ddd2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 801ddd4:	2300      	movs	r3, #0
}
 801ddd6:	4618      	mov	r0, r3
 801ddd8:	3738      	adds	r7, #56	@ 0x38
 801ddda:	46bd      	mov	sp, r7
 801dddc:	bd80      	pop	{r7, pc}
 801ddde:	bf00      	nop
 801dde0:	46020c00 	.word	0x46020c00

0801dde4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b086      	sub	sp, #24
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	6078      	str	r0, [r7, #4]
 801ddec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d101      	bne.n	801ddf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ddf4:	2301      	movs	r3, #1
 801ddf6:	e1d9      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ddf8:	4b9b      	ldr	r3, [pc, #620]	@ (801e068 <HAL_RCC_ClockConfig+0x284>)
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	f003 030f 	and.w	r3, r3, #15
 801de00:	683a      	ldr	r2, [r7, #0]
 801de02:	429a      	cmp	r2, r3
 801de04:	d910      	bls.n	801de28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801de06:	4b98      	ldr	r3, [pc, #608]	@ (801e068 <HAL_RCC_ClockConfig+0x284>)
 801de08:	681b      	ldr	r3, [r3, #0]
 801de0a:	f023 020f 	bic.w	r2, r3, #15
 801de0e:	4996      	ldr	r1, [pc, #600]	@ (801e068 <HAL_RCC_ClockConfig+0x284>)
 801de10:	683b      	ldr	r3, [r7, #0]
 801de12:	4313      	orrs	r3, r2
 801de14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801de16:	4b94      	ldr	r3, [pc, #592]	@ (801e068 <HAL_RCC_ClockConfig+0x284>)
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	f003 030f 	and.w	r3, r3, #15
 801de1e:	683a      	ldr	r2, [r7, #0]
 801de20:	429a      	cmp	r2, r3
 801de22:	d001      	beq.n	801de28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801de24:	2301      	movs	r3, #1
 801de26:	e1c1      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	f003 0310 	and.w	r3, r3, #16
 801de30:	2b00      	cmp	r3, #0
 801de32:	d010      	beq.n	801de56 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	695a      	ldr	r2, [r3, #20]
 801de38:	4b8c      	ldr	r3, [pc, #560]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801de3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801de40:	429a      	cmp	r2, r3
 801de42:	d908      	bls.n	801de56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 801de44:	4b89      	ldr	r3, [pc, #548]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801de48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	695b      	ldr	r3, [r3, #20]
 801de50:	4986      	ldr	r1, [pc, #536]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de52:	4313      	orrs	r3, r2
 801de54:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	f003 0308 	and.w	r3, r3, #8
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d012      	beq.n	801de88 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	691a      	ldr	r2, [r3, #16]
 801de66:	4b81      	ldr	r3, [pc, #516]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de68:	6a1b      	ldr	r3, [r3, #32]
 801de6a:	091b      	lsrs	r3, r3, #4
 801de6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801de70:	429a      	cmp	r2, r3
 801de72:	d909      	bls.n	801de88 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 801de74:	4b7d      	ldr	r3, [pc, #500]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de76:	6a1b      	ldr	r3, [r3, #32]
 801de78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	691b      	ldr	r3, [r3, #16]
 801de80:	011b      	lsls	r3, r3, #4
 801de82:	497a      	ldr	r1, [pc, #488]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de84:	4313      	orrs	r3, r2
 801de86:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	f003 0304 	and.w	r3, r3, #4
 801de90:	2b00      	cmp	r3, #0
 801de92:	d010      	beq.n	801deb6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	68da      	ldr	r2, [r3, #12]
 801de98:	4b74      	ldr	r3, [pc, #464]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801de9a:	6a1b      	ldr	r3, [r3, #32]
 801de9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801dea0:	429a      	cmp	r2, r3
 801dea2:	d908      	bls.n	801deb6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 801dea4:	4b71      	ldr	r3, [pc, #452]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dea6:	6a1b      	ldr	r3, [r3, #32]
 801dea8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	68db      	ldr	r3, [r3, #12]
 801deb0:	496e      	ldr	r1, [pc, #440]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801deb2:	4313      	orrs	r3, r2
 801deb4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	f003 0302 	and.w	r3, r3, #2
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d010      	beq.n	801dee4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	689a      	ldr	r2, [r3, #8]
 801dec6:	4b69      	ldr	r3, [pc, #420]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dec8:	6a1b      	ldr	r3, [r3, #32]
 801deca:	f003 030f 	and.w	r3, r3, #15
 801dece:	429a      	cmp	r2, r3
 801ded0:	d908      	bls.n	801dee4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 801ded2:	4b66      	ldr	r3, [pc, #408]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801ded4:	6a1b      	ldr	r3, [r3, #32]
 801ded6:	f023 020f 	bic.w	r2, r3, #15
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	689b      	ldr	r3, [r3, #8]
 801dede:	4963      	ldr	r1, [pc, #396]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dee0:	4313      	orrs	r3, r2
 801dee2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	f003 0301 	and.w	r3, r3, #1
 801deec:	2b00      	cmp	r3, #0
 801deee:	f000 80d2 	beq.w	801e096 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 801def2:	2300      	movs	r3, #0
 801def4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	685b      	ldr	r3, [r3, #4]
 801defa:	2b03      	cmp	r3, #3
 801defc:	d143      	bne.n	801df86 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801defe:	4b5b      	ldr	r3, [pc, #364]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801df04:	f003 0304 	and.w	r3, r3, #4
 801df08:	2b00      	cmp	r3, #0
 801df0a:	d110      	bne.n	801df2e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 801df0c:	4b57      	ldr	r3, [pc, #348]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801df12:	4a56      	ldr	r2, [pc, #344]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df14:	f043 0304 	orr.w	r3, r3, #4
 801df18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801df1c:	4b53      	ldr	r3, [pc, #332]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801df22:	f003 0304 	and.w	r3, r3, #4
 801df26:	60bb      	str	r3, [r7, #8]
 801df28:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 801df2a:	2301      	movs	r3, #1
 801df2c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 801df2e:	f7f8 fa9d 	bl	801646c <HAL_GetTick>
 801df32:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 801df34:	4b4e      	ldr	r3, [pc, #312]	@ (801e070 <HAL_RCC_ClockConfig+0x28c>)
 801df36:	68db      	ldr	r3, [r3, #12]
 801df38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d00f      	beq.n	801df60 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 801df40:	e008      	b.n	801df54 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 801df42:	f7f8 fa93 	bl	801646c <HAL_GetTick>
 801df46:	4602      	mov	r2, r0
 801df48:	693b      	ldr	r3, [r7, #16]
 801df4a:	1ad3      	subs	r3, r2, r3
 801df4c:	2b02      	cmp	r3, #2
 801df4e:	d901      	bls.n	801df54 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 801df50:	2303      	movs	r3, #3
 801df52:	e12b      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 801df54:	4b46      	ldr	r3, [pc, #280]	@ (801e070 <HAL_RCC_ClockConfig+0x28c>)
 801df56:	68db      	ldr	r3, [r3, #12]
 801df58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801df5c:	2b00      	cmp	r3, #0
 801df5e:	d0f0      	beq.n	801df42 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 801df60:	7dfb      	ldrb	r3, [r7, #23]
 801df62:	2b01      	cmp	r3, #1
 801df64:	d107      	bne.n	801df76 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 801df66:	4b41      	ldr	r3, [pc, #260]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801df6c:	4a3f      	ldr	r2, [pc, #252]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df6e:	f023 0304 	bic.w	r3, r3, #4
 801df72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 801df76:	4b3d      	ldr	r3, [pc, #244]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d121      	bne.n	801dfc6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 801df82:	2301      	movs	r3, #1
 801df84:	e112      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	685b      	ldr	r3, [r3, #4]
 801df8a:	2b02      	cmp	r3, #2
 801df8c:	d107      	bne.n	801df9e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801df8e:	4b37      	ldr	r3, [pc, #220]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801df96:	2b00      	cmp	r3, #0
 801df98:	d115      	bne.n	801dfc6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 801df9a:	2301      	movs	r3, #1
 801df9c:	e106      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	685b      	ldr	r3, [r3, #4]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d107      	bne.n	801dfb6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 801dfa6:	4b31      	ldr	r3, [pc, #196]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	f003 0304 	and.w	r3, r3, #4
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	d109      	bne.n	801dfc6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 801dfb2:	2301      	movs	r3, #1
 801dfb4:	e0fa      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801dfb6:	4b2d      	ldr	r3, [pc, #180]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d101      	bne.n	801dfc6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 801dfc2:	2301      	movs	r3, #1
 801dfc4:	e0f2      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 801dfc6:	4b29      	ldr	r3, [pc, #164]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dfc8:	69db      	ldr	r3, [r3, #28]
 801dfca:	f023 0203 	bic.w	r2, r3, #3
 801dfce:	687b      	ldr	r3, [r7, #4]
 801dfd0:	685b      	ldr	r3, [r3, #4]
 801dfd2:	4926      	ldr	r1, [pc, #152]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801dfd4:	4313      	orrs	r3, r2
 801dfd6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 801dfd8:	f7f8 fa48 	bl	801646c <HAL_GetTick>
 801dfdc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	685b      	ldr	r3, [r3, #4]
 801dfe2:	2b03      	cmp	r3, #3
 801dfe4:	d112      	bne.n	801e00c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801dfe6:	e00a      	b.n	801dffe <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801dfe8:	f7f8 fa40 	bl	801646c <HAL_GetTick>
 801dfec:	4602      	mov	r2, r0
 801dfee:	693b      	ldr	r3, [r7, #16]
 801dff0:	1ad3      	subs	r3, r2, r3
 801dff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 801dff6:	4293      	cmp	r3, r2
 801dff8:	d901      	bls.n	801dffe <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 801dffa:	2303      	movs	r3, #3
 801dffc:	e0d6      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801dffe:	4b1b      	ldr	r3, [pc, #108]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801e000:	69db      	ldr	r3, [r3, #28]
 801e002:	f003 030c 	and.w	r3, r3, #12
 801e006:	2b0c      	cmp	r3, #12
 801e008:	d1ee      	bne.n	801dfe8 <HAL_RCC_ClockConfig+0x204>
 801e00a:	e044      	b.n	801e096 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	685b      	ldr	r3, [r3, #4]
 801e010:	2b02      	cmp	r3, #2
 801e012:	d112      	bne.n	801e03a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801e014:	e00a      	b.n	801e02c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801e016:	f7f8 fa29 	bl	801646c <HAL_GetTick>
 801e01a:	4602      	mov	r2, r0
 801e01c:	693b      	ldr	r3, [r7, #16]
 801e01e:	1ad3      	subs	r3, r2, r3
 801e020:	f241 3288 	movw	r2, #5000	@ 0x1388
 801e024:	4293      	cmp	r3, r2
 801e026:	d901      	bls.n	801e02c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 801e028:	2303      	movs	r3, #3
 801e02a:	e0bf      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801e02c:	4b0f      	ldr	r3, [pc, #60]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801e02e:	69db      	ldr	r3, [r3, #28]
 801e030:	f003 030c 	and.w	r3, r3, #12
 801e034:	2b08      	cmp	r3, #8
 801e036:	d1ee      	bne.n	801e016 <HAL_RCC_ClockConfig+0x232>
 801e038:	e02d      	b.n	801e096 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801e03a:	687b      	ldr	r3, [r7, #4]
 801e03c:	685b      	ldr	r3, [r3, #4]
 801e03e:	2b00      	cmp	r3, #0
 801e040:	d123      	bne.n	801e08a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801e042:	e00a      	b.n	801e05a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801e044:	f7f8 fa12 	bl	801646c <HAL_GetTick>
 801e048:	4602      	mov	r2, r0
 801e04a:	693b      	ldr	r3, [r7, #16]
 801e04c:	1ad3      	subs	r3, r2, r3
 801e04e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801e052:	4293      	cmp	r3, r2
 801e054:	d901      	bls.n	801e05a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 801e056:	2303      	movs	r3, #3
 801e058:	e0a8      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801e05a:	4b04      	ldr	r3, [pc, #16]	@ (801e06c <HAL_RCC_ClockConfig+0x288>)
 801e05c:	69db      	ldr	r3, [r3, #28]
 801e05e:	f003 030c 	and.w	r3, r3, #12
 801e062:	2b00      	cmp	r3, #0
 801e064:	d1ee      	bne.n	801e044 <HAL_RCC_ClockConfig+0x260>
 801e066:	e016      	b.n	801e096 <HAL_RCC_ClockConfig+0x2b2>
 801e068:	40022000 	.word	0x40022000
 801e06c:	46020c00 	.word	0x46020c00
 801e070:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801e074:	f7f8 f9fa 	bl	801646c <HAL_GetTick>
 801e078:	4602      	mov	r2, r0
 801e07a:	693b      	ldr	r3, [r7, #16]
 801e07c:	1ad3      	subs	r3, r2, r3
 801e07e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801e082:	4293      	cmp	r3, r2
 801e084:	d901      	bls.n	801e08a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 801e086:	2303      	movs	r3, #3
 801e088:	e090      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801e08a:	4b4a      	ldr	r3, [pc, #296]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e08c:	69db      	ldr	r3, [r3, #28]
 801e08e:	f003 030c 	and.w	r3, r3, #12
 801e092:	2b04      	cmp	r3, #4
 801e094:	d1ee      	bne.n	801e074 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	f003 0302 	and.w	r3, r3, #2
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d010      	beq.n	801e0c4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	689a      	ldr	r2, [r3, #8]
 801e0a6:	4b43      	ldr	r3, [pc, #268]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e0a8:	6a1b      	ldr	r3, [r3, #32]
 801e0aa:	f003 030f 	and.w	r3, r3, #15
 801e0ae:	429a      	cmp	r2, r3
 801e0b0:	d208      	bcs.n	801e0c4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 801e0b2:	4b40      	ldr	r3, [pc, #256]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e0b4:	6a1b      	ldr	r3, [r3, #32]
 801e0b6:	f023 020f 	bic.w	r2, r3, #15
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	689b      	ldr	r3, [r3, #8]
 801e0be:	493d      	ldr	r1, [pc, #244]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e0c0:	4313      	orrs	r3, r2
 801e0c2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801e0c4:	4b3c      	ldr	r3, [pc, #240]	@ (801e1b8 <HAL_RCC_ClockConfig+0x3d4>)
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	f003 030f 	and.w	r3, r3, #15
 801e0cc:	683a      	ldr	r2, [r7, #0]
 801e0ce:	429a      	cmp	r2, r3
 801e0d0:	d210      	bcs.n	801e0f4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801e0d2:	4b39      	ldr	r3, [pc, #228]	@ (801e1b8 <HAL_RCC_ClockConfig+0x3d4>)
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	f023 020f 	bic.w	r2, r3, #15
 801e0da:	4937      	ldr	r1, [pc, #220]	@ (801e1b8 <HAL_RCC_ClockConfig+0x3d4>)
 801e0dc:	683b      	ldr	r3, [r7, #0]
 801e0de:	4313      	orrs	r3, r2
 801e0e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801e0e2:	4b35      	ldr	r3, [pc, #212]	@ (801e1b8 <HAL_RCC_ClockConfig+0x3d4>)
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	f003 030f 	and.w	r3, r3, #15
 801e0ea:	683a      	ldr	r2, [r7, #0]
 801e0ec:	429a      	cmp	r2, r3
 801e0ee:	d001      	beq.n	801e0f4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	e05b      	b.n	801e1ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	f003 0304 	and.w	r3, r3, #4
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d010      	beq.n	801e122 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	68da      	ldr	r2, [r3, #12]
 801e104:	4b2b      	ldr	r3, [pc, #172]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e106:	6a1b      	ldr	r3, [r3, #32]
 801e108:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801e10c:	429a      	cmp	r2, r3
 801e10e:	d208      	bcs.n	801e122 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 801e110:	4b28      	ldr	r3, [pc, #160]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e112:	6a1b      	ldr	r3, [r3, #32]
 801e114:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	68db      	ldr	r3, [r3, #12]
 801e11c:	4925      	ldr	r1, [pc, #148]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e11e:	4313      	orrs	r3, r2
 801e120:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	f003 0308 	and.w	r3, r3, #8
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d012      	beq.n	801e154 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	691a      	ldr	r2, [r3, #16]
 801e132:	4b20      	ldr	r3, [pc, #128]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e134:	6a1b      	ldr	r3, [r3, #32]
 801e136:	091b      	lsrs	r3, r3, #4
 801e138:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801e13c:	429a      	cmp	r2, r3
 801e13e:	d209      	bcs.n	801e154 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 801e140:	4b1c      	ldr	r3, [pc, #112]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e142:	6a1b      	ldr	r3, [r3, #32]
 801e144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	691b      	ldr	r3, [r3, #16]
 801e14c:	011b      	lsls	r3, r3, #4
 801e14e:	4919      	ldr	r1, [pc, #100]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e150:	4313      	orrs	r3, r2
 801e152:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	f003 0310 	and.w	r3, r3, #16
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d010      	beq.n	801e182 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	695a      	ldr	r2, [r3, #20]
 801e164:	4b13      	ldr	r3, [pc, #76]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e168:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801e16c:	429a      	cmp	r2, r3
 801e16e:	d208      	bcs.n	801e182 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 801e170:	4b10      	ldr	r3, [pc, #64]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e174:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	695b      	ldr	r3, [r3, #20]
 801e17c:	490d      	ldr	r1, [pc, #52]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e17e:	4313      	orrs	r3, r2
 801e180:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 801e182:	f000 f821 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801e186:	4602      	mov	r2, r0
 801e188:	4b0a      	ldr	r3, [pc, #40]	@ (801e1b4 <HAL_RCC_ClockConfig+0x3d0>)
 801e18a:	6a1b      	ldr	r3, [r3, #32]
 801e18c:	f003 030f 	and.w	r3, r3, #15
 801e190:	490a      	ldr	r1, [pc, #40]	@ (801e1bc <HAL_RCC_ClockConfig+0x3d8>)
 801e192:	5ccb      	ldrb	r3, [r1, r3]
 801e194:	fa22 f303 	lsr.w	r3, r2, r3
 801e198:	4a09      	ldr	r2, [pc, #36]	@ (801e1c0 <HAL_RCC_ClockConfig+0x3dc>)
 801e19a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801e19c:	4b09      	ldr	r3, [pc, #36]	@ (801e1c4 <HAL_RCC_ClockConfig+0x3e0>)
 801e19e:	681b      	ldr	r3, [r3, #0]
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	f7f8 f919 	bl	80163d8 <HAL_InitTick>
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	73fb      	strb	r3, [r7, #15]

  return status;
 801e1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	3718      	adds	r7, #24
 801e1b0:	46bd      	mov	sp, r7
 801e1b2:	bd80      	pop	{r7, pc}
 801e1b4:	46020c00 	.word	0x46020c00
 801e1b8:	40022000 	.word	0x40022000
 801e1bc:	080301a0 	.word	0x080301a0
 801e1c0:	20000360 	.word	0x20000360
 801e1c4:	20000364 	.word	0x20000364

0801e1c8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801e1c8:	b480      	push	{r7}
 801e1ca:	b08b      	sub	sp, #44	@ 0x2c
 801e1cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 801e1ce:	2300      	movs	r3, #0
 801e1d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801e1d6:	4b78      	ldr	r3, [pc, #480]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e1d8:	69db      	ldr	r3, [r3, #28]
 801e1da:	f003 030c 	and.w	r3, r3, #12
 801e1de:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801e1e0:	4b75      	ldr	r3, [pc, #468]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e1e4:	f003 0303 	and.w	r3, r3, #3
 801e1e8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 801e1ea:	69bb      	ldr	r3, [r7, #24]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d005      	beq.n	801e1fc <HAL_RCC_GetSysClockFreq+0x34>
 801e1f0:	69bb      	ldr	r3, [r7, #24]
 801e1f2:	2b0c      	cmp	r3, #12
 801e1f4:	d121      	bne.n	801e23a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	2b01      	cmp	r3, #1
 801e1fa:	d11e      	bne.n	801e23a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 801e1fc:	4b6e      	ldr	r3, [pc, #440]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e1fe:	689b      	ldr	r3, [r3, #8]
 801e200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801e204:	2b00      	cmp	r3, #0
 801e206:	d107      	bne.n	801e218 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 801e208:	4b6b      	ldr	r3, [pc, #428]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e20a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801e20e:	0b1b      	lsrs	r3, r3, #12
 801e210:	f003 030f 	and.w	r3, r3, #15
 801e214:	627b      	str	r3, [r7, #36]	@ 0x24
 801e216:	e005      	b.n	801e224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 801e218:	4b67      	ldr	r3, [pc, #412]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e21a:	689b      	ldr	r3, [r3, #8]
 801e21c:	0f1b      	lsrs	r3, r3, #28
 801e21e:	f003 030f 	and.w	r3, r3, #15
 801e222:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 801e224:	4a65      	ldr	r2, [pc, #404]	@ (801e3bc <HAL_RCC_GetSysClockFreq+0x1f4>)
 801e226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e22c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801e22e:	69bb      	ldr	r3, [r7, #24]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d110      	bne.n	801e256 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 801e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e236:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 801e238:	e00d      	b.n	801e256 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801e23a:	4b5f      	ldr	r3, [pc, #380]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e23c:	69db      	ldr	r3, [r3, #28]
 801e23e:	f003 030c 	and.w	r3, r3, #12
 801e242:	2b04      	cmp	r3, #4
 801e244:	d102      	bne.n	801e24c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801e246:	4b5e      	ldr	r3, [pc, #376]	@ (801e3c0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 801e248:	623b      	str	r3, [r7, #32]
 801e24a:	e004      	b.n	801e256 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801e24c:	69bb      	ldr	r3, [r7, #24]
 801e24e:	2b08      	cmp	r3, #8
 801e250:	d101      	bne.n	801e256 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801e252:	4b5b      	ldr	r3, [pc, #364]	@ (801e3c0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 801e254:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801e256:	69bb      	ldr	r3, [r7, #24]
 801e258:	2b0c      	cmp	r3, #12
 801e25a:	f040 80a5 	bne.w	801e3a8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 801e25e:	4b56      	ldr	r3, [pc, #344]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e262:	f003 0303 	and.w	r3, r3, #3
 801e266:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 801e268:	4b53      	ldr	r3, [pc, #332]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e26c:	0a1b      	lsrs	r3, r3, #8
 801e26e:	f003 030f 	and.w	r3, r3, #15
 801e272:	3301      	adds	r3, #1
 801e274:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 801e276:	4b50      	ldr	r3, [pc, #320]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e27a:	091b      	lsrs	r3, r3, #4
 801e27c:	f003 0301 	and.w	r3, r3, #1
 801e280:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 801e282:	4b4d      	ldr	r3, [pc, #308]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e286:	08db      	lsrs	r3, r3, #3
 801e288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e28c:	68ba      	ldr	r2, [r7, #8]
 801e28e:	fb02 f303 	mul.w	r3, r2, r3
 801e292:	ee07 3a90 	vmov	s15, r3
 801e296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e29a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 801e29e:	693b      	ldr	r3, [r7, #16]
 801e2a0:	2b02      	cmp	r3, #2
 801e2a2:	d003      	beq.n	801e2ac <HAL_RCC_GetSysClockFreq+0xe4>
 801e2a4:	693b      	ldr	r3, [r7, #16]
 801e2a6:	2b03      	cmp	r3, #3
 801e2a8:	d022      	beq.n	801e2f0 <HAL_RCC_GetSysClockFreq+0x128>
 801e2aa:	e043      	b.n	801e334 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	ee07 3a90 	vmov	s15, r3
 801e2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2b6:	eddf 6a43 	vldr	s13, [pc, #268]	@ 801e3c4 <HAL_RCC_GetSysClockFreq+0x1fc>
 801e2ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e2be:	4b3e      	ldr	r3, [pc, #248]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e2c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e2c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e2c6:	ee07 3a90 	vmov	s15, r3
 801e2ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 801e2ce:	ed97 6a01 	vldr	s12, [r7, #4]
 801e2d2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801e3c8 <HAL_RCC_GetSysClockFreq+0x200>
 801e2d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e2da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 801e2de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e2e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e2e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e2ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e2ee:	e046      	b.n	801e37e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	ee07 3a90 	vmov	s15, r3
 801e2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2fa:	eddf 6a32 	vldr	s13, [pc, #200]	@ 801e3c4 <HAL_RCC_GetSysClockFreq+0x1fc>
 801e2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e302:	4b2d      	ldr	r3, [pc, #180]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e30a:	ee07 3a90 	vmov	s15, r3
 801e30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 801e312:	ed97 6a01 	vldr	s12, [r7, #4]
 801e316:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801e3c8 <HAL_RCC_GetSysClockFreq+0x200>
 801e31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 801e322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e326:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e32e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e332:	e024      	b.n	801e37e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e336:	ee07 3a90 	vmov	s15, r3
 801e33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e33e:	68fb      	ldr	r3, [r7, #12]
 801e340:	ee07 3a90 	vmov	s15, r3
 801e344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e34c:	4b1a      	ldr	r3, [pc, #104]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e34e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e354:	ee07 3a90 	vmov	s15, r3
 801e358:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 801e35c:	ed97 6a01 	vldr	s12, [r7, #4]
 801e360:	eddf 5a19 	vldr	s11, [pc, #100]	@ 801e3c8 <HAL_RCC_GetSysClockFreq+0x200>
 801e364:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e368:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 801e36c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e370:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801e374:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e378:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e37c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 801e37e:	4b0e      	ldr	r3, [pc, #56]	@ (801e3b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 801e380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e382:	0e1b      	lsrs	r3, r3, #24
 801e384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e388:	3301      	adds	r3, #1
 801e38a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 801e38c:	683b      	ldr	r3, [r7, #0]
 801e38e:	ee07 3a90 	vmov	s15, r3
 801e392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e396:	edd7 6a07 	vldr	s13, [r7, #28]
 801e39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e3a2:	ee17 3a90 	vmov	r3, s15
 801e3a6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 801e3a8:	6a3b      	ldr	r3, [r7, #32]
}
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	372c      	adds	r7, #44	@ 0x2c
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3b4:	4770      	bx	lr
 801e3b6:	bf00      	nop
 801e3b8:	46020c00 	.word	0x46020c00
 801e3bc:	080301b8 	.word	0x080301b8
 801e3c0:	00f42400 	.word	0x00f42400
 801e3c4:	4b742400 	.word	0x4b742400
 801e3c8:	46000000 	.word	0x46000000

0801e3cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801e3cc:	b580      	push	{r7, lr}
 801e3ce:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 801e3d0:	f7ff fefa 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801e3d4:	4602      	mov	r2, r0
 801e3d6:	4b07      	ldr	r3, [pc, #28]	@ (801e3f4 <HAL_RCC_GetHCLKFreq+0x28>)
 801e3d8:	6a1b      	ldr	r3, [r3, #32]
 801e3da:	f003 030f 	and.w	r3, r3, #15
 801e3de:	4906      	ldr	r1, [pc, #24]	@ (801e3f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 801e3e0:	5ccb      	ldrb	r3, [r1, r3]
 801e3e2:	fa22 f303 	lsr.w	r3, r2, r3
 801e3e6:	4a05      	ldr	r2, [pc, #20]	@ (801e3fc <HAL_RCC_GetHCLKFreq+0x30>)
 801e3e8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 801e3ea:	4b04      	ldr	r3, [pc, #16]	@ (801e3fc <HAL_RCC_GetHCLKFreq+0x30>)
 801e3ec:	681b      	ldr	r3, [r3, #0]
}
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	bd80      	pop	{r7, pc}
 801e3f2:	bf00      	nop
 801e3f4:	46020c00 	.word	0x46020c00
 801e3f8:	080301a0 	.word	0x080301a0
 801e3fc:	20000360 	.word	0x20000360

0801e400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801e400:	b580      	push	{r7, lr}
 801e402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 801e404:	f7ff ffe2 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
 801e408:	4602      	mov	r2, r0
 801e40a:	4b05      	ldr	r3, [pc, #20]	@ (801e420 <HAL_RCC_GetPCLK1Freq+0x20>)
 801e40c:	6a1b      	ldr	r3, [r3, #32]
 801e40e:	091b      	lsrs	r3, r3, #4
 801e410:	f003 0307 	and.w	r3, r3, #7
 801e414:	4903      	ldr	r1, [pc, #12]	@ (801e424 <HAL_RCC_GetPCLK1Freq+0x24>)
 801e416:	5ccb      	ldrb	r3, [r1, r3]
 801e418:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e41c:	4618      	mov	r0, r3
 801e41e:	bd80      	pop	{r7, pc}
 801e420:	46020c00 	.word	0x46020c00
 801e424:	080301b0 	.word	0x080301b0

0801e428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801e428:	b580      	push	{r7, lr}
 801e42a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 801e42c:	f7ff ffce 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
 801e430:	4602      	mov	r2, r0
 801e432:	4b05      	ldr	r3, [pc, #20]	@ (801e448 <HAL_RCC_GetPCLK2Freq+0x20>)
 801e434:	6a1b      	ldr	r3, [r3, #32]
 801e436:	0a1b      	lsrs	r3, r3, #8
 801e438:	f003 0307 	and.w	r3, r3, #7
 801e43c:	4903      	ldr	r1, [pc, #12]	@ (801e44c <HAL_RCC_GetPCLK2Freq+0x24>)
 801e43e:	5ccb      	ldrb	r3, [r1, r3]
 801e440:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e444:	4618      	mov	r0, r3
 801e446:	bd80      	pop	{r7, pc}
 801e448:	46020c00 	.word	0x46020c00
 801e44c:	080301b0 	.word	0x080301b0

0801e450 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 801e450:	b580      	push	{r7, lr}
 801e452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 801e454:	f7ff ffba 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
 801e458:	4602      	mov	r2, r0
 801e45a:	4b05      	ldr	r3, [pc, #20]	@ (801e470 <HAL_RCC_GetPCLK3Freq+0x20>)
 801e45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e45e:	091b      	lsrs	r3, r3, #4
 801e460:	f003 0307 	and.w	r3, r3, #7
 801e464:	4903      	ldr	r1, [pc, #12]	@ (801e474 <HAL_RCC_GetPCLK3Freq+0x24>)
 801e466:	5ccb      	ldrb	r3, [r1, r3]
 801e468:	fa22 f303 	lsr.w	r3, r2, r3
}
 801e46c:	4618      	mov	r0, r3
 801e46e:	bd80      	pop	{r7, pc}
 801e470:	46020c00 	.word	0x46020c00
 801e474:	080301b0 	.word	0x080301b0

0801e478 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801e478:	b580      	push	{r7, lr}
 801e47a:	b086      	sub	sp, #24
 801e47c:	af00      	add	r7, sp, #0
 801e47e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 801e480:	4b3e      	ldr	r3, [pc, #248]	@ (801e57c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801e482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e486:	f003 0304 	and.w	r3, r3, #4
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d003      	beq.n	801e496 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801e48e:	f7fe fca3 	bl	801cdd8 <HAL_PWREx_GetVoltageRange>
 801e492:	6178      	str	r0, [r7, #20]
 801e494:	e019      	b.n	801e4ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801e496:	4b39      	ldr	r3, [pc, #228]	@ (801e57c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801e498:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e49c:	4a37      	ldr	r2, [pc, #220]	@ (801e57c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801e49e:	f043 0304 	orr.w	r3, r3, #4
 801e4a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801e4a6:	4b35      	ldr	r3, [pc, #212]	@ (801e57c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801e4a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e4ac:	f003 0304 	and.w	r3, r3, #4
 801e4b0:	60fb      	str	r3, [r7, #12]
 801e4b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801e4b4:	f7fe fc90 	bl	801cdd8 <HAL_PWREx_GetVoltageRange>
 801e4b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801e4ba:	4b30      	ldr	r3, [pc, #192]	@ (801e57c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801e4bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e4c0:	4a2e      	ldr	r2, [pc, #184]	@ (801e57c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 801e4c2:	f023 0304 	bic.w	r3, r3, #4
 801e4c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 801e4ca:	697b      	ldr	r3, [r7, #20]
 801e4cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e4d0:	d003      	beq.n	801e4da <RCC_SetFlashLatencyFromMSIRange+0x62>
 801e4d2:	697b      	ldr	r3, [r7, #20]
 801e4d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e4d8:	d109      	bne.n	801e4ee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e4e0:	d202      	bcs.n	801e4e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 801e4e2:	2301      	movs	r3, #1
 801e4e4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 801e4e6:	e033      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 801e4e8:	2300      	movs	r3, #0
 801e4ea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 801e4ec:	e030      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e4f4:	d208      	bcs.n	801e508 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 801e4f6:	697b      	ldr	r3, [r7, #20]
 801e4f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e4fc:	d102      	bne.n	801e504 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 801e4fe:	2303      	movs	r3, #3
 801e500:	613b      	str	r3, [r7, #16]
 801e502:	e025      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 801e504:	2301      	movs	r3, #1
 801e506:	e035      	b.n	801e574 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e50e:	d90f      	bls.n	801e530 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 801e510:	697b      	ldr	r3, [r7, #20]
 801e512:	2b00      	cmp	r3, #0
 801e514:	d109      	bne.n	801e52a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e51c:	d902      	bls.n	801e524 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 801e51e:	2300      	movs	r3, #0
 801e520:	613b      	str	r3, [r7, #16]
 801e522:	e015      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 801e524:	2301      	movs	r3, #1
 801e526:	613b      	str	r3, [r7, #16]
 801e528:	e012      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 801e52a:	2300      	movs	r3, #0
 801e52c:	613b      	str	r3, [r7, #16]
 801e52e:	e00f      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e536:	d109      	bne.n	801e54c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 801e538:	697b      	ldr	r3, [r7, #20]
 801e53a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e53e:	d102      	bne.n	801e546 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 801e540:	2301      	movs	r3, #1
 801e542:	613b      	str	r3, [r7, #16]
 801e544:	e004      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 801e546:	2302      	movs	r3, #2
 801e548:	613b      	str	r3, [r7, #16]
 801e54a:	e001      	b.n	801e550 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 801e54c:	2301      	movs	r3, #1
 801e54e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 801e550:	4b0b      	ldr	r3, [pc, #44]	@ (801e580 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	f023 020f 	bic.w	r2, r3, #15
 801e558:	4909      	ldr	r1, [pc, #36]	@ (801e580 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 801e55a:	693b      	ldr	r3, [r7, #16]
 801e55c:	4313      	orrs	r3, r2
 801e55e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 801e560:	4b07      	ldr	r3, [pc, #28]	@ (801e580 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 801e562:	681b      	ldr	r3, [r3, #0]
 801e564:	f003 030f 	and.w	r3, r3, #15
 801e568:	693a      	ldr	r2, [r7, #16]
 801e56a:	429a      	cmp	r2, r3
 801e56c:	d001      	beq.n	801e572 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 801e56e:	2301      	movs	r3, #1
 801e570:	e000      	b.n	801e574 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 801e572:	2300      	movs	r3, #0
}
 801e574:	4618      	mov	r0, r3
 801e576:	3718      	adds	r7, #24
 801e578:	46bd      	mov	sp, r7
 801e57a:	bd80      	pop	{r7, pc}
 801e57c:	46020c00 	.word	0x46020c00
 801e580:	40022000 	.word	0x40022000

0801e584 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 801e584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e588:	b0b8      	sub	sp, #224	@ 0xe0
 801e58a:	af00      	add	r7, sp, #0
 801e58c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801e590:	2300      	movs	r3, #0
 801e592:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801e596:	2300      	movs	r3, #0
 801e598:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801e59c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5a4:	f002 0401 	and.w	r4, r2, #1
 801e5a8:	2500      	movs	r5, #0
 801e5aa:	ea54 0305 	orrs.w	r3, r4, r5
 801e5ae:	d00b      	beq.n	801e5c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 801e5b0:	4bca      	ldr	r3, [pc, #808]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e5b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e5b6:	f023 0103 	bic.w	r1, r3, #3
 801e5ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e5be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e5c0:	4ac6      	ldr	r2, [pc, #792]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e5c2:	430b      	orrs	r3, r1
 801e5c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801e5c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d0:	f002 0802 	and.w	r8, r2, #2
 801e5d4:	f04f 0900 	mov.w	r9, #0
 801e5d8:	ea58 0309 	orrs.w	r3, r8, r9
 801e5dc:	d00b      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 801e5de:	4bbf      	ldr	r3, [pc, #764]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e5e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e5e4:	f023 010c 	bic.w	r1, r3, #12
 801e5e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e5ee:	4abb      	ldr	r2, [pc, #748]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e5f0:	430b      	orrs	r3, r1
 801e5f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801e5f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5fe:	f002 0a04 	and.w	sl, r2, #4
 801e602:	f04f 0b00 	mov.w	fp, #0
 801e606:	ea5a 030b 	orrs.w	r3, sl, fp
 801e60a:	d00b      	beq.n	801e624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 801e60c:	4bb3      	ldr	r3, [pc, #716]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e60e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e612:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801e616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e61a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e61c:	4aaf      	ldr	r2, [pc, #700]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e61e:	430b      	orrs	r3, r1
 801e620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801e624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e62c:	f002 0308 	and.w	r3, r2, #8
 801e630:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e634:	2300      	movs	r3, #0
 801e636:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e63a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e63e:	460b      	mov	r3, r1
 801e640:	4313      	orrs	r3, r2
 801e642:	d00b      	beq.n	801e65c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 801e644:	4ba5      	ldr	r3, [pc, #660]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e64a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 801e64e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e654:	4aa1      	ldr	r2, [pc, #644]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e656:	430b      	orrs	r3, r1
 801e658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801e65c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e664:	f002 0310 	and.w	r3, r2, #16
 801e668:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e66c:	2300      	movs	r3, #0
 801e66e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e672:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e676:	460b      	mov	r3, r1
 801e678:	4313      	orrs	r3, r2
 801e67a:	d00b      	beq.n	801e694 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 801e67c:	4b97      	ldr	r3, [pc, #604]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e682:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e686:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e68a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e68c:	4a93      	ldr	r2, [pc, #588]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e68e:	430b      	orrs	r3, r1
 801e690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801e694:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e69c:	f002 0320 	and.w	r3, r2, #32
 801e6a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e6a4:	2300      	movs	r3, #0
 801e6a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e6aa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801e6ae:	460b      	mov	r3, r1
 801e6b0:	4313      	orrs	r3, r2
 801e6b2:	d00b      	beq.n	801e6cc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 801e6b4:	4b89      	ldr	r3, [pc, #548]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e6b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e6ba:	f023 0107 	bic.w	r1, r3, #7
 801e6be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e6c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e6c4:	4a85      	ldr	r2, [pc, #532]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e6c6:	430b      	orrs	r3, r1
 801e6c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801e6cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e6d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801e6dc:	2300      	movs	r3, #0
 801e6de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e6e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801e6e6:	460b      	mov	r3, r1
 801e6e8:	4313      	orrs	r3, r2
 801e6ea:	d00b      	beq.n	801e704 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 801e6ec:	4b7b      	ldr	r3, [pc, #492]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e6ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e6f2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 801e6f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e6fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801e6fc:	4a77      	ldr	r2, [pc, #476]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e6fe:	430b      	orrs	r3, r1
 801e700:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801e704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e70c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e710:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e714:	2300      	movs	r3, #0
 801e716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e71a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e71e:	460b      	mov	r3, r1
 801e720:	4313      	orrs	r3, r2
 801e722:	d00b      	beq.n	801e73c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 801e724:	4b6d      	ldr	r3, [pc, #436]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e72a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e72e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e734:	4a69      	ldr	r2, [pc, #420]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e736:	430b      	orrs	r3, r1
 801e738:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801e73c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e744:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 801e748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e74c:	2300      	movs	r3, #0
 801e74e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e752:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e756:	460b      	mov	r3, r1
 801e758:	4313      	orrs	r3, r2
 801e75a:	d00b      	beq.n	801e774 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 801e75c:	4b5f      	ldr	r3, [pc, #380]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e75e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e762:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 801e766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e76a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e76c:	4a5b      	ldr	r2, [pc, #364]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e76e:	430b      	orrs	r3, r1
 801e770:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e784:	2300      	movs	r3, #0
 801e786:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e78a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e78e:	460b      	mov	r3, r1
 801e790:	4313      	orrs	r3, r2
 801e792:	d00b      	beq.n	801e7ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 801e794:	4b51      	ldr	r3, [pc, #324]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e79a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 801e79e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e7a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e7a4:	4a4d      	ldr	r2, [pc, #308]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e7a6:	430b      	orrs	r3, r1
 801e7a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801e7ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 801e7b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e7bc:	2300      	movs	r3, #0
 801e7be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e7c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e7c6:	460b      	mov	r3, r1
 801e7c8:	4313      	orrs	r3, r2
 801e7ca:	d00b      	beq.n	801e7e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 801e7cc:	4b43      	ldr	r3, [pc, #268]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e7ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e7d2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 801e7d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e7da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e7dc:	4a3f      	ldr	r2, [pc, #252]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e7de:	430b      	orrs	r3, r1
 801e7e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801e7e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7ec:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801e7f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e7f4:	2300      	movs	r3, #0
 801e7f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e7fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e7fe:	460b      	mov	r3, r1
 801e800:	4313      	orrs	r3, r2
 801e802:	d00b      	beq.n	801e81c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 801e804:	4b35      	ldr	r3, [pc, #212]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801e80a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 801e80e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e814:	4a31      	ldr	r2, [pc, #196]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e816:	430b      	orrs	r3, r1
 801e818:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 801e81c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e824:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801e828:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e82a:	2300      	movs	r3, #0
 801e82c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e82e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e832:	460b      	mov	r3, r1
 801e834:	4313      	orrs	r3, r2
 801e836:	d00c      	beq.n	801e852 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 801e838:	4b28      	ldr	r3, [pc, #160]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e83a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801e83e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e84a:	4a24      	ldr	r2, [pc, #144]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e84c:	430b      	orrs	r3, r1
 801e84e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801e852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e85e:	673b      	str	r3, [r7, #112]	@ 0x70
 801e860:	2300      	movs	r3, #0
 801e862:	677b      	str	r3, [r7, #116]	@ 0x74
 801e864:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e868:	460b      	mov	r3, r1
 801e86a:	4313      	orrs	r3, r2
 801e86c:	d04f      	beq.n	801e90e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 801e86e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e876:	2b80      	cmp	r3, #128	@ 0x80
 801e878:	d02d      	beq.n	801e8d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 801e87a:	2b80      	cmp	r3, #128	@ 0x80
 801e87c:	d827      	bhi.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e87e:	2b60      	cmp	r3, #96	@ 0x60
 801e880:	d02e      	beq.n	801e8e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801e882:	2b60      	cmp	r3, #96	@ 0x60
 801e884:	d823      	bhi.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e886:	2b40      	cmp	r3, #64	@ 0x40
 801e888:	d006      	beq.n	801e898 <HAL_RCCEx_PeriphCLKConfig+0x314>
 801e88a:	2b40      	cmp	r3, #64	@ 0x40
 801e88c:	d81f      	bhi.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e88e:	2b00      	cmp	r3, #0
 801e890:	d009      	beq.n	801e8a6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 801e892:	2b20      	cmp	r3, #32
 801e894:	d011      	beq.n	801e8ba <HAL_RCCEx_PeriphCLKConfig+0x336>
 801e896:	e01a      	b.n	801e8ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801e898:	4b10      	ldr	r3, [pc, #64]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e89a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e89c:	4a0f      	ldr	r2, [pc, #60]	@ (801e8dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 801e89e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e8a2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 801e8a4:	e01d      	b.n	801e8e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801e8a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e8aa:	3308      	adds	r3, #8
 801e8ac:	4618      	mov	r0, r3
 801e8ae:	f002 f9d1 	bl	8020c54 <RCCEx_PLL2_Config>
 801e8b2:	4603      	mov	r3, r0
 801e8b4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 801e8b8:	e013      	b.n	801e8e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801e8ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e8be:	332c      	adds	r3, #44	@ 0x2c
 801e8c0:	4618      	mov	r0, r3
 801e8c2:	f002 fa5f 	bl	8020d84 <RCCEx_PLL3_Config>
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 801e8cc:	e009      	b.n	801e8e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e8ce:	2301      	movs	r3, #1
 801e8d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801e8d4:	e005      	b.n	801e8e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 801e8d6:	bf00      	nop
 801e8d8:	e003      	b.n	801e8e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 801e8da:	bf00      	nop
 801e8dc:	46020c00 	.word	0x46020c00
        break;
 801e8e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e8e2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d10d      	bne.n	801e906 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 801e8ea:	4bb6      	ldr	r3, [pc, #728]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801e8ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801e8f0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 801e8f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e8fc:	4ab1      	ldr	r2, [pc, #708]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801e8fe:	430b      	orrs	r3, r1
 801e900:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801e904:	e003      	b.n	801e90e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e906:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801e90a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 801e90e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e916:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e91a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e91c:	2300      	movs	r3, #0
 801e91e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e920:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e924:	460b      	mov	r3, r1
 801e926:	4313      	orrs	r3, r2
 801e928:	d053      	beq.n	801e9d2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 801e92a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e92e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e936:	d033      	beq.n	801e9a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 801e938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e93c:	d82c      	bhi.n	801e998 <HAL_RCCEx_PeriphCLKConfig+0x414>
 801e93e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e942:	d02f      	beq.n	801e9a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801e944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e948:	d826      	bhi.n	801e998 <HAL_RCCEx_PeriphCLKConfig+0x414>
 801e94a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e94e:	d008      	beq.n	801e962 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801e950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e954:	d820      	bhi.n	801e998 <HAL_RCCEx_PeriphCLKConfig+0x414>
 801e956:	2b00      	cmp	r3, #0
 801e958:	d00a      	beq.n	801e970 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 801e95a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e95e:	d011      	beq.n	801e984 <HAL_RCCEx_PeriphCLKConfig+0x400>
 801e960:	e01a      	b.n	801e998 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801e962:	4b98      	ldr	r3, [pc, #608]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801e964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e966:	4a97      	ldr	r2, [pc, #604]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801e968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e96c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 801e96e:	e01a      	b.n	801e9a6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801e970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e974:	3308      	adds	r3, #8
 801e976:	4618      	mov	r0, r3
 801e978:	f002 f96c 	bl	8020c54 <RCCEx_PLL2_Config>
 801e97c:	4603      	mov	r3, r0
 801e97e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 801e982:	e010      	b.n	801e9a6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801e984:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e988:	332c      	adds	r3, #44	@ 0x2c
 801e98a:	4618      	mov	r0, r3
 801e98c:	f002 f9fa 	bl	8020d84 <RCCEx_PLL3_Config>
 801e990:	4603      	mov	r3, r0
 801e992:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 801e996:	e006      	b.n	801e9a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e998:	2301      	movs	r3, #1
 801e99a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801e99e:	e002      	b.n	801e9a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 801e9a0:	bf00      	nop
 801e9a2:	e000      	b.n	801e9a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 801e9a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e9a6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d10d      	bne.n	801e9ca <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 801e9ae:	4b85      	ldr	r3, [pc, #532]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801e9b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801e9b4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 801e9b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e9bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e9c0:	4a80      	ldr	r2, [pc, #512]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801e9c2:	430b      	orrs	r3, r1
 801e9c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801e9c8:	e003      	b.n	801e9d2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e9ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801e9ce:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 801e9d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9da:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e9de:	663b      	str	r3, [r7, #96]	@ 0x60
 801e9e0:	2300      	movs	r3, #0
 801e9e2:	667b      	str	r3, [r7, #100]	@ 0x64
 801e9e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e9e8:	460b      	mov	r3, r1
 801e9ea:	4313      	orrs	r3, r2
 801e9ec:	d046      	beq.n	801ea7c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 801e9ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801e9f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e9f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801e9fa:	d028      	beq.n	801ea4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801e9fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 801ea00:	d821      	bhi.n	801ea46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801ea02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ea06:	d022      	beq.n	801ea4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801ea08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ea0c:	d81b      	bhi.n	801ea46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801ea0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ea12:	d01c      	beq.n	801ea4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801ea14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ea18:	d815      	bhi.n	801ea46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801ea1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ea1e:	d008      	beq.n	801ea32 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 801ea20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ea24:	d80f      	bhi.n	801ea46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 801ea26:	2b00      	cmp	r3, #0
 801ea28:	d011      	beq.n	801ea4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801ea2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ea2e:	d00e      	beq.n	801ea4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 801ea30:	e009      	b.n	801ea46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801ea32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ea36:	3308      	adds	r3, #8
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f002 f90b 	bl	8020c54 <RCCEx_PLL2_Config>
 801ea3e:	4603      	mov	r3, r0
 801ea40:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801ea44:	e004      	b.n	801ea50 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 801ea46:	2301      	movs	r3, #1
 801ea48:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801ea4c:	e000      	b.n	801ea50 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 801ea4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d10d      	bne.n	801ea74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 801ea58:	4b5a      	ldr	r3, [pc, #360]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801ea5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ea5e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801ea62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ea66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ea6a:	4a56      	ldr	r2, [pc, #344]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801ea6c:	430b      	orrs	r3, r1
 801ea6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801ea72:	e003      	b.n	801ea7c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea74:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ea78:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 801ea7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea84:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801ea88:	65bb      	str	r3, [r7, #88]	@ 0x58
 801ea8a:	2300      	movs	r3, #0
 801ea8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801ea8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801ea92:	460b      	mov	r3, r1
 801ea94:	4313      	orrs	r3, r2
 801ea96:	d03f      	beq.n	801eb18 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 801ea98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ea9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801eaa0:	2b04      	cmp	r3, #4
 801eaa2:	d81e      	bhi.n	801eae2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 801eaa4:	a201      	add	r2, pc, #4	@ (adr r2, 801eaac <HAL_RCCEx_PeriphCLKConfig+0x528>)
 801eaa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eaaa:	bf00      	nop
 801eaac:	0801eaeb 	.word	0x0801eaeb
 801eab0:	0801eac1 	.word	0x0801eac1
 801eab4:	0801eacf 	.word	0x0801eacf
 801eab8:	0801eaeb 	.word	0x0801eaeb
 801eabc:	0801eaeb 	.word	0x0801eaeb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801eac0:	4b40      	ldr	r3, [pc, #256]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eac4:	4a3f      	ldr	r2, [pc, #252]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eac6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801eaca:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 801eacc:	e00e      	b.n	801eaec <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801eace:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ead2:	332c      	adds	r3, #44	@ 0x2c
 801ead4:	4618      	mov	r0, r3
 801ead6:	f002 f955 	bl	8020d84 <RCCEx_PLL3_Config>
 801eada:	4603      	mov	r3, r0
 801eadc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801eae0:	e004      	b.n	801eaec <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 801eae2:	2301      	movs	r3, #1
 801eae4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801eae8:	e000      	b.n	801eaec <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 801eaea:	bf00      	nop
    }
    if (ret == HAL_OK)
 801eaec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801eaf0:	2b00      	cmp	r3, #0
 801eaf2:	d10d      	bne.n	801eb10 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 801eaf4:	4b33      	ldr	r3, [pc, #204]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eaf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801eafa:	f023 0107 	bic.w	r1, r3, #7
 801eafe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eb02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801eb06:	4a2f      	ldr	r2, [pc, #188]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eb08:	430b      	orrs	r3, r1
 801eb0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801eb0e:	e003      	b.n	801eb18 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb10:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801eb14:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 801eb18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb20:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801eb24:	653b      	str	r3, [r7, #80]	@ 0x50
 801eb26:	2300      	movs	r3, #0
 801eb28:	657b      	str	r3, [r7, #84]	@ 0x54
 801eb2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801eb2e:	460b      	mov	r3, r1
 801eb30:	4313      	orrs	r3, r2
 801eb32:	d04d      	beq.n	801ebd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 801eb34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eb38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801eb3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801eb40:	d028      	beq.n	801eb94 <HAL_RCCEx_PeriphCLKConfig+0x610>
 801eb42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801eb46:	d821      	bhi.n	801eb8c <HAL_RCCEx_PeriphCLKConfig+0x608>
 801eb48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801eb4c:	d024      	beq.n	801eb98 <HAL_RCCEx_PeriphCLKConfig+0x614>
 801eb4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801eb52:	d81b      	bhi.n	801eb8c <HAL_RCCEx_PeriphCLKConfig+0x608>
 801eb54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801eb58:	d00e      	beq.n	801eb78 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 801eb5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801eb5e:	d815      	bhi.n	801eb8c <HAL_RCCEx_PeriphCLKConfig+0x608>
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	d01b      	beq.n	801eb9c <HAL_RCCEx_PeriphCLKConfig+0x618>
 801eb64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb68:	d110      	bne.n	801eb8c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801eb6a:	4b16      	ldr	r3, [pc, #88]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eb6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb6e:	4a15      	ldr	r2, [pc, #84]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eb70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801eb74:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 801eb76:	e012      	b.n	801eb9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 801eb78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eb7c:	332c      	adds	r3, #44	@ 0x2c
 801eb7e:	4618      	mov	r0, r3
 801eb80:	f002 f900 	bl	8020d84 <RCCEx_PLL3_Config>
 801eb84:	4603      	mov	r3, r0
 801eb86:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801eb8a:	e008      	b.n	801eb9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 801eb8c:	2301      	movs	r3, #1
 801eb8e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801eb92:	e004      	b.n	801eb9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 801eb94:	bf00      	nop
 801eb96:	e002      	b.n	801eb9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 801eb98:	bf00      	nop
 801eb9a:	e000      	b.n	801eb9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 801eb9c:	bf00      	nop
    }
    if (ret == HAL_OK)
 801eb9e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d110      	bne.n	801ebc8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 801eba6:	4b07      	ldr	r3, [pc, #28]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801eba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ebac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801ebb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ebb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801ebb8:	4a02      	ldr	r2, [pc, #8]	@ (801ebc4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 801ebba:	430b      	orrs	r3, r1
 801ebbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 801ebc0:	e006      	b.n	801ebd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801ebc2:	bf00      	nop
 801ebc4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ebc8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ebcc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801ebd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801ebdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ebde:	2300      	movs	r3, #0
 801ebe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ebe2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801ebe6:	460b      	mov	r3, r1
 801ebe8:	4313      	orrs	r3, r2
 801ebea:	f000 80b5 	beq.w	801ed58 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ebee:	2300      	movs	r3, #0
 801ebf0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ebf4:	4b9d      	ldr	r3, [pc, #628]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ebf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ebfa:	f003 0304 	and.w	r3, r3, #4
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d113      	bne.n	801ec2a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ec02:	4b9a      	ldr	r3, [pc, #616]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ec04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ec08:	4a98      	ldr	r2, [pc, #608]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ec0a:	f043 0304 	orr.w	r3, r3, #4
 801ec0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 801ec12:	4b96      	ldr	r3, [pc, #600]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ec14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ec18:	f003 0304 	and.w	r3, r3, #4
 801ec1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801ec20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 801ec24:	2301      	movs	r3, #1
 801ec26:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 801ec2a:	4b91      	ldr	r3, [pc, #580]	@ (801ee70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801ec2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec2e:	4a90      	ldr	r2, [pc, #576]	@ (801ee70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801ec30:	f043 0301 	orr.w	r3, r3, #1
 801ec34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801ec36:	f7f7 fc19 	bl	801646c <HAL_GetTick>
 801ec3a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801ec3e:	e00b      	b.n	801ec58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ec40:	f7f7 fc14 	bl	801646c <HAL_GetTick>
 801ec44:	4602      	mov	r2, r0
 801ec46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ec4a:	1ad3      	subs	r3, r2, r3
 801ec4c:	2b02      	cmp	r3, #2
 801ec4e:	d903      	bls.n	801ec58 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 801ec50:	2303      	movs	r3, #3
 801ec52:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801ec56:	e005      	b.n	801ec64 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 801ec58:	4b85      	ldr	r3, [pc, #532]	@ (801ee70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 801ec5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ec5c:	f003 0301 	and.w	r3, r3, #1
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d0ed      	beq.n	801ec40 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 801ec64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d165      	bne.n	801ed38 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801ec6c:	4b7f      	ldr	r3, [pc, #508]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ec6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ec72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ec76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 801ec7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d023      	beq.n	801ecca <HAL_RCCEx_PeriphCLKConfig+0x746>
 801ec82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ec86:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 801ec8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ec8e:	4293      	cmp	r3, r2
 801ec90:	d01b      	beq.n	801ecca <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801ec92:	4b76      	ldr	r3, [pc, #472]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ec94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ec98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ec9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801eca0:	4b72      	ldr	r3, [pc, #456]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801eca2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801eca6:	4a71      	ldr	r2, [pc, #452]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801eca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ecac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ecb0:	4b6e      	ldr	r3, [pc, #440]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ecb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ecb6:	4a6d      	ldr	r2, [pc, #436]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ecb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ecbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801ecc0:	4a6a      	ldr	r2, [pc, #424]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ecc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ecc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801ecca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801ecce:	f003 0301 	and.w	r3, r3, #1
 801ecd2:	2b00      	cmp	r3, #0
 801ecd4:	d019      	beq.n	801ed0a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ecd6:	f7f7 fbc9 	bl	801646c <HAL_GetTick>
 801ecda:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ecde:	e00d      	b.n	801ecfc <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ece0:	f7f7 fbc4 	bl	801646c <HAL_GetTick>
 801ece4:	4602      	mov	r2, r0
 801ece6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ecea:	1ad2      	subs	r2, r2, r3
 801ecec:	f241 3388 	movw	r3, #5000	@ 0x1388
 801ecf0:	429a      	cmp	r2, r3
 801ecf2:	d903      	bls.n	801ecfc <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 801ecf4:	2303      	movs	r3, #3
 801ecf6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 801ecfa:	e006      	b.n	801ed0a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ecfc:	4b5b      	ldr	r3, [pc, #364]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ecfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ed02:	f003 0302 	and.w	r3, r3, #2
 801ed06:	2b00      	cmp	r3, #0
 801ed08:	d0ea      	beq.n	801ece0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 801ed0a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d10d      	bne.n	801ed2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 801ed12:	4b56      	ldr	r3, [pc, #344]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ed14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ed18:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801ed1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ed20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801ed24:	4a51      	ldr	r2, [pc, #324]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ed26:	430b      	orrs	r3, r1
 801ed28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 801ed2c:	e008      	b.n	801ed40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801ed2e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ed32:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 801ed36:	e003      	b.n	801ed40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ed38:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ed3c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801ed40:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 801ed44:	2b01      	cmp	r3, #1
 801ed46:	d107      	bne.n	801ed58 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ed48:	4b48      	ldr	r3, [pc, #288]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ed4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ed4e:	4a47      	ldr	r2, [pc, #284]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ed50:	f023 0304 	bic.w	r3, r3, #4
 801ed54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 801ed58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801ed64:	643b      	str	r3, [r7, #64]	@ 0x40
 801ed66:	2300      	movs	r3, #0
 801ed68:	647b      	str	r3, [r7, #68]	@ 0x44
 801ed6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801ed6e:	460b      	mov	r3, r1
 801ed70:	4313      	orrs	r3, r2
 801ed72:	d042      	beq.n	801edfa <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 801ed74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ed78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ed7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801ed80:	d022      	beq.n	801edc8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 801ed82:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801ed86:	d81b      	bhi.n	801edc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 801ed88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ed8c:	d011      	beq.n	801edb2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 801ed8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ed92:	d815      	bhi.n	801edc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d019      	beq.n	801edcc <HAL_RCCEx_PeriphCLKConfig+0x848>
 801ed98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ed9c:	d110      	bne.n	801edc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801ed9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eda2:	3308      	adds	r3, #8
 801eda4:	4618      	mov	r0, r3
 801eda6:	f001 ff55 	bl	8020c54 <RCCEx_PLL2_Config>
 801edaa:	4603      	mov	r3, r0
 801edac:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801edb0:	e00d      	b.n	801edce <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801edb2:	4b2e      	ldr	r3, [pc, #184]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801edb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edb6:	4a2d      	ldr	r2, [pc, #180]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801edb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801edbc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 801edbe:	e006      	b.n	801edce <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 801edc0:	2301      	movs	r3, #1
 801edc2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801edc6:	e002      	b.n	801edce <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 801edc8:	bf00      	nop
 801edca:	e000      	b.n	801edce <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 801edcc:	bf00      	nop
    }
    if (ret == HAL_OK)
 801edce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d10d      	bne.n	801edf2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 801edd6:	4b25      	ldr	r3, [pc, #148]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801edd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801eddc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 801ede0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ede4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ede8:	4a20      	ldr	r2, [pc, #128]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801edea:	430b      	orrs	r3, r1
 801edec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801edf0:	e003      	b.n	801edfa <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801edf2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801edf6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801edfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801edfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee02:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801ee06:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ee08:	2300      	movs	r3, #0
 801ee0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ee0c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801ee10:	460b      	mov	r3, r1
 801ee12:	4313      	orrs	r3, r2
 801ee14:	d032      	beq.n	801ee7c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 801ee16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ee1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ee1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ee22:	d00b      	beq.n	801ee3c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 801ee24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ee28:	d804      	bhi.n	801ee34 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d008      	beq.n	801ee40 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 801ee2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ee32:	d007      	beq.n	801ee44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 801ee34:	2301      	movs	r3, #1
 801ee36:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801ee3a:	e004      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 801ee3c:	bf00      	nop
 801ee3e:	e002      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 801ee40:	bf00      	nop
 801ee42:	e000      	b.n	801ee46 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 801ee44:	bf00      	nop
    }
    if (ret == HAL_OK)
 801ee46:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ee4a:	2b00      	cmp	r3, #0
 801ee4c:	d112      	bne.n	801ee74 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 801ee4e:	4b07      	ldr	r3, [pc, #28]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ee50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801ee54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ee58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ee5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801ee60:	4a02      	ldr	r2, [pc, #8]	@ (801ee6c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 801ee62:	430b      	orrs	r3, r1
 801ee64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 801ee68:	e008      	b.n	801ee7c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 801ee6a:	bf00      	nop
 801ee6c:	46020c00 	.word	0x46020c00
 801ee70:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee74:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801ee78:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 801ee7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ee80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801ee88:	633b      	str	r3, [r7, #48]	@ 0x30
 801ee8a:	2300      	movs	r3, #0
 801ee8c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ee8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801ee92:	460b      	mov	r3, r1
 801ee94:	4313      	orrs	r3, r2
 801ee96:	d019      	beq.n	801eecc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 801ee98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ee9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801eea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801eea4:	d105      	bne.n	801eeb2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801eea6:	4b88      	ldr	r3, [pc, #544]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801eea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eeaa:	4a87      	ldr	r2, [pc, #540]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801eeac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801eeb0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 801eeb2:	4b85      	ldr	r3, [pc, #532]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801eeb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801eeb8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801eebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801eec4:	4a80      	ldr	r2, [pc, #512]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801eec6:	430b      	orrs	r3, r1
 801eec8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 801eecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eed4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801eed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 801eeda:	2300      	movs	r3, #0
 801eedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801eede:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801eee2:	460b      	mov	r3, r1
 801eee4:	4313      	orrs	r3, r2
 801eee6:	d00c      	beq.n	801ef02 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 801eee8:	4b77      	ldr	r3, [pc, #476]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801eeea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801eeee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801eef2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801eefa:	4973      	ldr	r1, [pc, #460]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801eefc:	4313      	orrs	r3, r2
 801eefe:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 801ef02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef0a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801ef0e:	623b      	str	r3, [r7, #32]
 801ef10:	2300      	movs	r3, #0
 801ef12:	627b      	str	r3, [r7, #36]	@ 0x24
 801ef14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801ef18:	460b      	mov	r3, r1
 801ef1a:	4313      	orrs	r3, r2
 801ef1c:	d00c      	beq.n	801ef38 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 801ef1e:	4b6a      	ldr	r3, [pc, #424]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801ef20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801ef24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801ef28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ef2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ef30:	4965      	ldr	r1, [pc, #404]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801ef32:	4313      	orrs	r3, r2
 801ef34:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 801ef38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ef3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801ef44:	61bb      	str	r3, [r7, #24]
 801ef46:	2300      	movs	r3, #0
 801ef48:	61fb      	str	r3, [r7, #28]
 801ef4a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801ef4e:	460b      	mov	r3, r1
 801ef50:	4313      	orrs	r3, r2
 801ef52:	d00c      	beq.n	801ef6e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 801ef54:	4b5c      	ldr	r3, [pc, #368]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801ef56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ef5a:	f023 0218 	bic.w	r2, r3, #24
 801ef5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ef62:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ef66:	4958      	ldr	r1, [pc, #352]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801ef68:	4313      	orrs	r3, r2
 801ef6a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801ef6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ef72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef76:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 801ef7a:	613b      	str	r3, [r7, #16]
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	617b      	str	r3, [r7, #20]
 801ef80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801ef84:	460b      	mov	r3, r1
 801ef86:	4313      	orrs	r3, r2
 801ef88:	d032      	beq.n	801eff0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 801ef8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801ef8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801ef92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801ef96:	d105      	bne.n	801efa4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ef98:	4b4b      	ldr	r3, [pc, #300]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801ef9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef9c:	4a4a      	ldr	r2, [pc, #296]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801ef9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801efa2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 801efa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801efa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801efac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801efb0:	d108      	bne.n	801efc4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801efb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801efb6:	3308      	adds	r3, #8
 801efb8:	4618      	mov	r0, r3
 801efba:	f001 fe4b 	bl	8020c54 <RCCEx_PLL2_Config>
 801efbe:	4603      	mov	r3, r0
 801efc0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 801efc4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801efc8:	2b00      	cmp	r3, #0
 801efca:	d10d      	bne.n	801efe8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 801efcc:	4b3e      	ldr	r3, [pc, #248]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801efce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801efd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801efd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801efda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801efde:	493a      	ldr	r1, [pc, #232]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801efe0:	4313      	orrs	r3, r2
 801efe2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 801efe6:	e003      	b.n	801eff0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801efe8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801efec:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 801eff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801eff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eff8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 801effc:	60bb      	str	r3, [r7, #8]
 801effe:	2300      	movs	r3, #0
 801f000:	60fb      	str	r3, [r7, #12]
 801f002:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f006:	460b      	mov	r3, r1
 801f008:	4313      	orrs	r3, r2
 801f00a:	d03a      	beq.n	801f082 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 801f00c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801f018:	d00e      	beq.n	801f038 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 801f01a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801f01e:	d815      	bhi.n	801f04c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 801f020:	2b00      	cmp	r3, #0
 801f022:	d017      	beq.n	801f054 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 801f024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f028:	d110      	bne.n	801f04c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f02a:	4b27      	ldr	r3, [pc, #156]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801f02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f02e:	4a26      	ldr	r2, [pc, #152]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801f030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f034:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 801f036:	e00e      	b.n	801f056 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 801f038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f03c:	3308      	adds	r3, #8
 801f03e:	4618      	mov	r0, r3
 801f040:	f001 fe08 	bl	8020c54 <RCCEx_PLL2_Config>
 801f044:	4603      	mov	r3, r0
 801f046:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 801f04a:	e004      	b.n	801f056 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 801f04c:	2301      	movs	r3, #1
 801f04e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 801f052:	e000      	b.n	801f056 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 801f054:	bf00      	nop
    }
    if (ret == HAL_OK)
 801f056:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d10d      	bne.n	801f07a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 801f05e:	4b1a      	ldr	r3, [pc, #104]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801f060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801f064:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 801f068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f070:	4915      	ldr	r1, [pc, #84]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801f072:	4313      	orrs	r3, r2
 801f074:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 801f078:	e003      	b.n	801f082 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f07a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 801f07e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 801f082:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f08a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801f08e:	603b      	str	r3, [r7, #0]
 801f090:	2300      	movs	r3, #0
 801f092:	607b      	str	r3, [r7, #4]
 801f094:	e9d7 1200 	ldrd	r1, r2, [r7]
 801f098:	460b      	mov	r3, r1
 801f09a:	4313      	orrs	r3, r2
 801f09c:	d00c      	beq.n	801f0b8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 801f09e:	4b0a      	ldr	r3, [pc, #40]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801f0a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801f0a4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801f0a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f0ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801f0b0:	4905      	ldr	r1, [pc, #20]	@ (801f0c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 801f0b2:	4313      	orrs	r3, r2
 801f0b4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 801f0b8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 801f0bc:	4618      	mov	r0, r3
 801f0be:	37e0      	adds	r7, #224	@ 0xe0
 801f0c0:	46bd      	mov	sp, r7
 801f0c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f0c6:	bf00      	nop
 801f0c8:	46020c00 	.word	0x46020c00

0801f0cc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801f0cc:	b480      	push	{r7}
 801f0ce:	b089      	sub	sp, #36	@ 0x24
 801f0d0:	af00      	add	r7, sp, #0
 801f0d2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 801f0d4:	4ba6      	ldr	r3, [pc, #664]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f0d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f0dc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 801f0de:	4ba4      	ldr	r3, [pc, #656]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0e2:	f003 0303 	and.w	r3, r3, #3
 801f0e6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 801f0e8:	4ba1      	ldr	r3, [pc, #644]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f0ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0ec:	0a1b      	lsrs	r3, r3, #8
 801f0ee:	f003 030f 	and.w	r3, r3, #15
 801f0f2:	3301      	adds	r3, #1
 801f0f4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 801f0f6:	4b9e      	ldr	r3, [pc, #632]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0fa:	091b      	lsrs	r3, r3, #4
 801f0fc:	f003 0301 	and.w	r3, r3, #1
 801f100:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 801f102:	4b9b      	ldr	r3, [pc, #620]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f106:	08db      	lsrs	r3, r3, #3
 801f108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f10c:	68fa      	ldr	r2, [r7, #12]
 801f10e:	fb02 f303 	mul.w	r3, r2, r3
 801f112:	ee07 3a90 	vmov	s15, r3
 801f116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f11a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 801f11e:	697b      	ldr	r3, [r7, #20]
 801f120:	2b03      	cmp	r3, #3
 801f122:	d062      	beq.n	801f1ea <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 801f124:	697b      	ldr	r3, [r7, #20]
 801f126:	2b03      	cmp	r3, #3
 801f128:	f200 8081 	bhi.w	801f22e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 801f12c:	697b      	ldr	r3, [r7, #20]
 801f12e:	2b01      	cmp	r3, #1
 801f130:	d024      	beq.n	801f17c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 801f132:	697b      	ldr	r3, [r7, #20]
 801f134:	2b02      	cmp	r3, #2
 801f136:	d17a      	bne.n	801f22e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801f138:	693b      	ldr	r3, [r7, #16]
 801f13a:	ee07 3a90 	vmov	s15, r3
 801f13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f142:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 801f374 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 801f146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f14a:	4b89      	ldr	r3, [pc, #548]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f14e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f152:	ee07 3a90 	vmov	s15, r3
 801f156:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 801f15a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f15e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 801f378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 801f162:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801f166:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 801f16a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f16e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801f172:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f17a:	e08f      	b.n	801f29c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 801f17c:	4b7c      	ldr	r3, [pc, #496]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f17e:	689b      	ldr	r3, [r3, #8]
 801f180:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f184:	2b00      	cmp	r3, #0
 801f186:	d005      	beq.n	801f194 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 801f188:	4b79      	ldr	r3, [pc, #484]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f18a:	689b      	ldr	r3, [r3, #8]
 801f18c:	0f1b      	lsrs	r3, r3, #28
 801f18e:	f003 030f 	and.w	r3, r3, #15
 801f192:	e006      	b.n	801f1a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 801f194:	4b76      	ldr	r3, [pc, #472]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f19a:	041b      	lsls	r3, r3, #16
 801f19c:	0f1b      	lsrs	r3, r3, #28
 801f19e:	f003 030f 	and.w	r3, r3, #15
 801f1a2:	4a76      	ldr	r2, [pc, #472]	@ (801f37c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 801f1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f1a8:	ee07 3a90 	vmov	s15, r3
 801f1ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f1b0:	693b      	ldr	r3, [r7, #16]
 801f1b2:	ee07 3a90 	vmov	s15, r3
 801f1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f1be:	69bb      	ldr	r3, [r7, #24]
 801f1c0:	ee07 3a90 	vmov	s15, r3
 801f1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f1c8:	ed97 6a02 	vldr	s12, [r7, #8]
 801f1cc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 801f378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 801f1d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f1d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f1d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f1dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 801f1e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f1e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f1e8:	e058      	b.n	801f29c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801f1ea:	693b      	ldr	r3, [r7, #16]
 801f1ec:	ee07 3a90 	vmov	s15, r3
 801f1f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f1f4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f374 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 801f1f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f1fc:	4b5c      	ldr	r3, [pc, #368]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f204:	ee07 3a90 	vmov	s15, r3
 801f208:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 801f20c:	ed97 6a02 	vldr	s12, [r7, #8]
 801f210:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801f378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 801f214:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801f218:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 801f21c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f220:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 801f224:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f228:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f22c:	e036      	b.n	801f29c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 801f22e:	4b50      	ldr	r3, [pc, #320]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f230:	689b      	ldr	r3, [r3, #8]
 801f232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f236:	2b00      	cmp	r3, #0
 801f238:	d005      	beq.n	801f246 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 801f23a:	4b4d      	ldr	r3, [pc, #308]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f23c:	689b      	ldr	r3, [r3, #8]
 801f23e:	0f1b      	lsrs	r3, r3, #28
 801f240:	f003 030f 	and.w	r3, r3, #15
 801f244:	e006      	b.n	801f254 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 801f246:	4b4a      	ldr	r3, [pc, #296]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f24c:	041b      	lsls	r3, r3, #16
 801f24e:	0f1b      	lsrs	r3, r3, #28
 801f250:	f003 030f 	and.w	r3, r3, #15
 801f254:	4a49      	ldr	r2, [pc, #292]	@ (801f37c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 801f256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f25a:	ee07 3a90 	vmov	s15, r3
 801f25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f262:	693b      	ldr	r3, [r7, #16]
 801f264:	ee07 3a90 	vmov	s15, r3
 801f268:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f26c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 801f270:	69bb      	ldr	r3, [r7, #24]
 801f272:	ee07 3a90 	vmov	s15, r3
 801f276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f27a:	ed97 6a02 	vldr	s12, [r7, #8]
 801f27e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 801f378 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 801f282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f28a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f28e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 801f292:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f296:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f29a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 801f29c:	4b34      	ldr	r3, [pc, #208]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d017      	beq.n	801f2d8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801f2a8:	4b31      	ldr	r3, [pc, #196]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f2ac:	0a5b      	lsrs	r3, r3, #9
 801f2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f2b2:	ee07 3a90 	vmov	s15, r3
 801f2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 801f2ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f2be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801f2c2:	edd7 6a07 	vldr	s13, [r7, #28]
 801f2c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f2ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f2ce:	ee17 2a90 	vmov	r2, s15
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	601a      	str	r2, [r3, #0]
 801f2d6:	e002      	b.n	801f2de <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	2200      	movs	r2, #0
 801f2dc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 801f2de:	4b24      	ldr	r3, [pc, #144]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f2e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	d017      	beq.n	801f31a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801f2ea:	4b21      	ldr	r3, [pc, #132]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f2ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f2ee:	0c1b      	lsrs	r3, r3, #16
 801f2f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f2f4:	ee07 3a90 	vmov	s15, r3
 801f2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 801f2fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f300:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801f304:	edd7 6a07 	vldr	s13, [r7, #28]
 801f308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f30c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f310:	ee17 2a90 	vmov	r2, s15
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	605a      	str	r2, [r3, #4]
 801f318:	e002      	b.n	801f320 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	2200      	movs	r2, #0
 801f31e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 801f320:	4b13      	ldr	r3, [pc, #76]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d017      	beq.n	801f35c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801f32c:	4b10      	ldr	r3, [pc, #64]	@ (801f370 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 801f32e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f330:	0e1b      	lsrs	r3, r3, #24
 801f332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f336:	ee07 3a90 	vmov	s15, r3
 801f33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 801f33e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f342:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 801f346:	edd7 6a07 	vldr	s13, [r7, #28]
 801f34a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f352:	ee17 2a90 	vmov	r2, s15
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801f35a:	e002      	b.n	801f362 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801f35c:	687b      	ldr	r3, [r7, #4]
 801f35e:	2200      	movs	r2, #0
 801f360:	609a      	str	r2, [r3, #8]
}
 801f362:	bf00      	nop
 801f364:	3724      	adds	r7, #36	@ 0x24
 801f366:	46bd      	mov	sp, r7
 801f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f36c:	4770      	bx	lr
 801f36e:	bf00      	nop
 801f370:	46020c00 	.word	0x46020c00
 801f374:	4b742400 	.word	0x4b742400
 801f378:	46000000 	.word	0x46000000
 801f37c:	080301b8 	.word	0x080301b8

0801f380 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f380:	b480      	push	{r7}
 801f382:	b089      	sub	sp, #36	@ 0x24
 801f384:	af00      	add	r7, sp, #0
 801f386:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 801f388:	4ba6      	ldr	r3, [pc, #664]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f390:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 801f392:	4ba4      	ldr	r3, [pc, #656]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f396:	f003 0303 	and.w	r3, r3, #3
 801f39a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 801f39c:	4ba1      	ldr	r3, [pc, #644]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f39e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3a0:	0a1b      	lsrs	r3, r3, #8
 801f3a2:	f003 030f 	and.w	r3, r3, #15
 801f3a6:	3301      	adds	r3, #1
 801f3a8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 801f3aa:	4b9e      	ldr	r3, [pc, #632]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3ae:	091b      	lsrs	r3, r3, #4
 801f3b0:	f003 0301 	and.w	r3, r3, #1
 801f3b4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 801f3b6:	4b9b      	ldr	r3, [pc, #620]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f3ba:	08db      	lsrs	r3, r3, #3
 801f3bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f3c0:	68fa      	ldr	r2, [r7, #12]
 801f3c2:	fb02 f303 	mul.w	r3, r2, r3
 801f3c6:	ee07 3a90 	vmov	s15, r3
 801f3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 801f3d2:	697b      	ldr	r3, [r7, #20]
 801f3d4:	2b03      	cmp	r3, #3
 801f3d6:	d062      	beq.n	801f49e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 801f3d8:	697b      	ldr	r3, [r7, #20]
 801f3da:	2b03      	cmp	r3, #3
 801f3dc:	f200 8081 	bhi.w	801f4e2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 801f3e0:	697b      	ldr	r3, [r7, #20]
 801f3e2:	2b01      	cmp	r3, #1
 801f3e4:	d024      	beq.n	801f430 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 801f3e6:	697b      	ldr	r3, [r7, #20]
 801f3e8:	2b02      	cmp	r3, #2
 801f3ea:	d17a      	bne.n	801f4e2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801f3ec:	693b      	ldr	r3, [r7, #16]
 801f3ee:	ee07 3a90 	vmov	s15, r3
 801f3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 801f628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 801f3fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f3fe:	4b89      	ldr	r3, [pc, #548]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f406:	ee07 3a90 	vmov	s15, r3
 801f40a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 801f40e:	ed97 6a02 	vldr	s12, [r7, #8]
 801f412:	eddf 5a86 	vldr	s11, [pc, #536]	@ 801f62c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 801f416:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801f41a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 801f41e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f422:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801f426:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f42a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f42e:	e08f      	b.n	801f550 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 801f430:	4b7c      	ldr	r3, [pc, #496]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f432:	689b      	ldr	r3, [r3, #8]
 801f434:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d005      	beq.n	801f448 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 801f43c:	4b79      	ldr	r3, [pc, #484]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f43e:	689b      	ldr	r3, [r3, #8]
 801f440:	0f1b      	lsrs	r3, r3, #28
 801f442:	f003 030f 	and.w	r3, r3, #15
 801f446:	e006      	b.n	801f456 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 801f448:	4b76      	ldr	r3, [pc, #472]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f44a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f44e:	041b      	lsls	r3, r3, #16
 801f450:	0f1b      	lsrs	r3, r3, #28
 801f452:	f003 030f 	and.w	r3, r3, #15
 801f456:	4a76      	ldr	r2, [pc, #472]	@ (801f630 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 801f458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f45c:	ee07 3a90 	vmov	s15, r3
 801f460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f464:	693b      	ldr	r3, [r7, #16]
 801f466:	ee07 3a90 	vmov	s15, r3
 801f46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f472:	69bb      	ldr	r3, [r7, #24]
 801f474:	ee07 3a90 	vmov	s15, r3
 801f478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f47c:	ed97 6a02 	vldr	s12, [r7, #8]
 801f480:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 801f62c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 801f484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f48c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f490:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 801f494:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f498:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f49c:	e058      	b.n	801f550 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801f49e:	693b      	ldr	r3, [r7, #16]
 801f4a0:	ee07 3a90 	vmov	s15, r3
 801f4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4a8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 801f4ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f4b0:	4b5c      	ldr	r3, [pc, #368]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f4b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f4b8:	ee07 3a90 	vmov	s15, r3
 801f4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 801f4c0:	ed97 6a02 	vldr	s12, [r7, #8]
 801f4c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801f62c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 801f4c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801f4cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 801f4d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 801f4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f4dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f4e0:	e036      	b.n	801f550 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 801f4e2:	4b50      	ldr	r3, [pc, #320]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f4e4:	689b      	ldr	r3, [r3, #8]
 801f4e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d005      	beq.n	801f4fa <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 801f4ee:	4b4d      	ldr	r3, [pc, #308]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f4f0:	689b      	ldr	r3, [r3, #8]
 801f4f2:	0f1b      	lsrs	r3, r3, #28
 801f4f4:	f003 030f 	and.w	r3, r3, #15
 801f4f8:	e006      	b.n	801f508 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 801f4fa:	4b4a      	ldr	r3, [pc, #296]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f4fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f500:	041b      	lsls	r3, r3, #16
 801f502:	0f1b      	lsrs	r3, r3, #28
 801f504:	f003 030f 	and.w	r3, r3, #15
 801f508:	4a49      	ldr	r2, [pc, #292]	@ (801f630 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 801f50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f50e:	ee07 3a90 	vmov	s15, r3
 801f512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f516:	693b      	ldr	r3, [r7, #16]
 801f518:	ee07 3a90 	vmov	s15, r3
 801f51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f524:	69bb      	ldr	r3, [r7, #24]
 801f526:	ee07 3a90 	vmov	s15, r3
 801f52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f52e:	ed97 6a02 	vldr	s12, [r7, #8]
 801f532:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 801f62c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 801f536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f542:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 801f546:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f54a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f54e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 801f550:	4b34      	ldr	r3, [pc, #208]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801f558:	2b00      	cmp	r3, #0
 801f55a:	d017      	beq.n	801f58c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801f55c:	4b31      	ldr	r3, [pc, #196]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f560:	0a5b      	lsrs	r3, r3, #9
 801f562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f566:	ee07 3a90 	vmov	s15, r3
 801f56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 801f56e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f572:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801f576:	edd7 6a07 	vldr	s13, [r7, #28]
 801f57a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f57e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f582:	ee17 2a90 	vmov	r2, s15
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	601a      	str	r2, [r3, #0]
 801f58a:	e002      	b.n	801f592 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f58c:	687b      	ldr	r3, [r7, #4]
 801f58e:	2200      	movs	r2, #0
 801f590:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 801f592:	4b24      	ldr	r3, [pc, #144]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f59a:	2b00      	cmp	r3, #0
 801f59c:	d017      	beq.n	801f5ce <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801f59e:	4b21      	ldr	r3, [pc, #132]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f5a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f5a2:	0c1b      	lsrs	r3, r3, #16
 801f5a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5a8:	ee07 3a90 	vmov	s15, r3
 801f5ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 801f5b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801f5b8:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f5c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f5c4:	ee17 2a90 	vmov	r2, s15
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	605a      	str	r2, [r3, #4]
 801f5cc:	e002      	b.n	801f5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	2200      	movs	r2, #0
 801f5d2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 801f5d4:	4b13      	ldr	r3, [pc, #76]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f5d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d017      	beq.n	801f610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801f5e0:	4b10      	ldr	r3, [pc, #64]	@ (801f624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 801f5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f5e4:	0e1b      	lsrs	r3, r3, #24
 801f5e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5ea:	ee07 3a90 	vmov	s15, r3
 801f5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 801f5f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 801f5fa:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f602:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f606:	ee17 2a90 	vmov	r2, s15
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f60e:	e002      	b.n	801f616 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	2200      	movs	r2, #0
 801f614:	609a      	str	r2, [r3, #8]
}
 801f616:	bf00      	nop
 801f618:	3724      	adds	r7, #36	@ 0x24
 801f61a:	46bd      	mov	sp, r7
 801f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f620:	4770      	bx	lr
 801f622:	bf00      	nop
 801f624:	46020c00 	.word	0x46020c00
 801f628:	4b742400 	.word	0x4b742400
 801f62c:	46000000 	.word	0x46000000
 801f630:	080301b8 	.word	0x080301b8

0801f634 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f634:	b480      	push	{r7}
 801f636:	b089      	sub	sp, #36	@ 0x24
 801f638:	af00      	add	r7, sp, #0
 801f63a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 801f63c:	4ba6      	ldr	r3, [pc, #664]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f63e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f644:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 801f646:	4ba4      	ldr	r3, [pc, #656]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f64a:	f003 0303 	and.w	r3, r3, #3
 801f64e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 801f650:	4ba1      	ldr	r3, [pc, #644]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f654:	0a1b      	lsrs	r3, r3, #8
 801f656:	f003 030f 	and.w	r3, r3, #15
 801f65a:	3301      	adds	r3, #1
 801f65c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 801f65e:	4b9e      	ldr	r3, [pc, #632]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f662:	091b      	lsrs	r3, r3, #4
 801f664:	f003 0301 	and.w	r3, r3, #1
 801f668:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 801f66a:	4b9b      	ldr	r3, [pc, #620]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f66c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f66e:	08db      	lsrs	r3, r3, #3
 801f670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f674:	68fa      	ldr	r2, [r7, #12]
 801f676:	fb02 f303 	mul.w	r3, r2, r3
 801f67a:	ee07 3a90 	vmov	s15, r3
 801f67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f682:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 801f686:	697b      	ldr	r3, [r7, #20]
 801f688:	2b03      	cmp	r3, #3
 801f68a:	d062      	beq.n	801f752 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 801f68c:	697b      	ldr	r3, [r7, #20]
 801f68e:	2b03      	cmp	r3, #3
 801f690:	f200 8081 	bhi.w	801f796 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 801f694:	697b      	ldr	r3, [r7, #20]
 801f696:	2b01      	cmp	r3, #1
 801f698:	d024      	beq.n	801f6e4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 801f69a:	697b      	ldr	r3, [r7, #20]
 801f69c:	2b02      	cmp	r3, #2
 801f69e:	d17a      	bne.n	801f796 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801f6a0:	693b      	ldr	r3, [r7, #16]
 801f6a2:	ee07 3a90 	vmov	s15, r3
 801f6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6aa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 801f8dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 801f6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f6b2:	4b89      	ldr	r3, [pc, #548]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f6ba:	ee07 3a90 	vmov	s15, r3
 801f6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 801f6c2:	ed97 6a02 	vldr	s12, [r7, #8]
 801f6c6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 801f8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 801f6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801f6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 801f6d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801f6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6de:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 801f6e2:	e08f      	b.n	801f804 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 801f6e4:	4b7c      	ldr	r3, [pc, #496]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f6e6:	689b      	ldr	r3, [r3, #8]
 801f6e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d005      	beq.n	801f6fc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 801f6f0:	4b79      	ldr	r3, [pc, #484]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f6f2:	689b      	ldr	r3, [r3, #8]
 801f6f4:	0f1b      	lsrs	r3, r3, #28
 801f6f6:	f003 030f 	and.w	r3, r3, #15
 801f6fa:	e006      	b.n	801f70a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 801f6fc:	4b76      	ldr	r3, [pc, #472]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f6fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f702:	041b      	lsls	r3, r3, #16
 801f704:	0f1b      	lsrs	r3, r3, #28
 801f706:	f003 030f 	and.w	r3, r3, #15
 801f70a:	4a76      	ldr	r2, [pc, #472]	@ (801f8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 801f70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f710:	ee07 3a90 	vmov	s15, r3
 801f714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f718:	693b      	ldr	r3, [r7, #16]
 801f71a:	ee07 3a90 	vmov	s15, r3
 801f71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f726:	69bb      	ldr	r3, [r7, #24]
 801f728:	ee07 3a90 	vmov	s15, r3
 801f72c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f730:	ed97 6a02 	vldr	s12, [r7, #8]
 801f734:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 801f8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 801f738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f73c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f740:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f744:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 801f748:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f74c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f750:	e058      	b.n	801f804 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801f752:	693b      	ldr	r3, [r7, #16]
 801f754:	ee07 3a90 	vmov	s15, r3
 801f758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f75c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f8dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 801f760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f764:	4b5c      	ldr	r3, [pc, #368]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f76c:	ee07 3a90 	vmov	s15, r3
 801f770:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 801f774:	ed97 6a02 	vldr	s12, [r7, #8]
 801f778:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801f8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 801f77c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801f780:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 801f784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f788:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 801f78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f790:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f794:	e036      	b.n	801f804 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 801f796:	4b50      	ldr	r3, [pc, #320]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f798:	689b      	ldr	r3, [r3, #8]
 801f79a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d005      	beq.n	801f7ae <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 801f7a2:	4b4d      	ldr	r3, [pc, #308]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f7a4:	689b      	ldr	r3, [r3, #8]
 801f7a6:	0f1b      	lsrs	r3, r3, #28
 801f7a8:	f003 030f 	and.w	r3, r3, #15
 801f7ac:	e006      	b.n	801f7bc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 801f7ae:	4b4a      	ldr	r3, [pc, #296]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f7b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801f7b4:	041b      	lsls	r3, r3, #16
 801f7b6:	0f1b      	lsrs	r3, r3, #28
 801f7b8:	f003 030f 	and.w	r3, r3, #15
 801f7bc:	4a49      	ldr	r2, [pc, #292]	@ (801f8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 801f7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f7c2:	ee07 3a90 	vmov	s15, r3
 801f7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7ca:	693b      	ldr	r3, [r7, #16]
 801f7cc:	ee07 3a90 	vmov	s15, r3
 801f7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f7d8:	69bb      	ldr	r3, [r7, #24]
 801f7da:	ee07 3a90 	vmov	s15, r3
 801f7de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7e2:	ed97 6a02 	vldr	s12, [r7, #8]
 801f7e6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 801f8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 801f7ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 801f7fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801f802:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 801f804:	4b34      	ldr	r3, [pc, #208]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d017      	beq.n	801f840 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801f810:	4b31      	ldr	r3, [pc, #196]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f814:	0a5b      	lsrs	r3, r3, #9
 801f816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f81a:	ee07 3a90 	vmov	s15, r3
 801f81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 801f822:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f826:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801f82a:	edd7 6a07 	vldr	s13, [r7, #28]
 801f82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f836:	ee17 2a90 	vmov	r2, s15
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	601a      	str	r2, [r3, #0]
 801f83e:	e002      	b.n	801f846 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	2200      	movs	r2, #0
 801f844:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 801f846:	4b24      	ldr	r3, [pc, #144]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f84a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f84e:	2b00      	cmp	r3, #0
 801f850:	d017      	beq.n	801f882 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801f852:	4b21      	ldr	r3, [pc, #132]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f856:	0c1b      	lsrs	r3, r3, #16
 801f858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f85c:	ee07 3a90 	vmov	s15, r3
 801f860:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 801f864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f868:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801f86c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f878:	ee17 2a90 	vmov	r2, s15
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	605a      	str	r2, [r3, #4]
 801f880:	e002      	b.n	801f888 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	2200      	movs	r2, #0
 801f886:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 801f888:	4b13      	ldr	r3, [pc, #76]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f88a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f88c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801f890:	2b00      	cmp	r3, #0
 801f892:	d017      	beq.n	801f8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801f894:	4b10      	ldr	r3, [pc, #64]	@ (801f8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 801f896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f898:	0e1b      	lsrs	r3, r3, #24
 801f89a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f89e:	ee07 3a90 	vmov	s15, r3
 801f8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 801f8a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f8aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 801f8ae:	edd7 6a07 	vldr	s13, [r7, #28]
 801f8b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f8b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f8ba:	ee17 2a90 	vmov	r2, s15
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f8c2:	e002      	b.n	801f8ca <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	2200      	movs	r2, #0
 801f8c8:	609a      	str	r2, [r3, #8]
}
 801f8ca:	bf00      	nop
 801f8cc:	3724      	adds	r7, #36	@ 0x24
 801f8ce:	46bd      	mov	sp, r7
 801f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8d4:	4770      	bx	lr
 801f8d6:	bf00      	nop
 801f8d8:	46020c00 	.word	0x46020c00
 801f8dc:	4b742400 	.word	0x4b742400
 801f8e0:	46000000 	.word	0x46000000
 801f8e4:	080301b8 	.word	0x080301b8

0801f8e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801f8e8:	b580      	push	{r7, lr}
 801f8ea:	b08e      	sub	sp, #56	@ 0x38
 801f8ec:	af00      	add	r7, sp, #0
 801f8ee:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 801f8f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f8f6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 801f8fa:	430b      	orrs	r3, r1
 801f8fc:	d145      	bne.n	801f98a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801f8fe:	4baa      	ldr	r3, [pc, #680]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801f900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801f904:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801f908:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 801f90a:	4ba7      	ldr	r3, [pc, #668]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801f90c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801f910:	f003 0302 	and.w	r3, r3, #2
 801f914:	2b02      	cmp	r3, #2
 801f916:	d108      	bne.n	801f92a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 801f918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f91a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801f91e:	d104      	bne.n	801f92a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 801f920:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801f924:	637b      	str	r3, [r7, #52]	@ 0x34
 801f926:	f001 b987 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 801f92a:	4b9f      	ldr	r3, [pc, #636]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801f92c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801f930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f934:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801f938:	d114      	bne.n	801f964 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 801f93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f93c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f940:	d110      	bne.n	801f964 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801f942:	4b99      	ldr	r3, [pc, #612]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801f944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801f948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801f94c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f950:	d103      	bne.n	801f95a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 801f952:	23fa      	movs	r3, #250	@ 0xfa
 801f954:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801f956:	f001 b96f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 801f95a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 801f95e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 801f960:	f001 b96a 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 801f964:	4b90      	ldr	r3, [pc, #576]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801f96c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801f970:	d107      	bne.n	801f982 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 801f972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f978:	d103      	bne.n	801f982 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 801f97a:	4b8c      	ldr	r3, [pc, #560]	@ (801fbac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 801f97c:	637b      	str	r3, [r7, #52]	@ 0x34
 801f97e:	f001 b95b 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 801f982:	2300      	movs	r3, #0
 801f984:	637b      	str	r3, [r7, #52]	@ 0x34
 801f986:	f001 b957 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801f98a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f98e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801f992:	430b      	orrs	r3, r1
 801f994:	d151      	bne.n	801fa3a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 801f996:	4b84      	ldr	r3, [pc, #528]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801f998:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801f99c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 801f9a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 801f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9a4:	2b80      	cmp	r3, #128	@ 0x80
 801f9a6:	d035      	beq.n	801fa14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 801f9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9aa:	2b80      	cmp	r3, #128	@ 0x80
 801f9ac:	d841      	bhi.n	801fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 801f9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9b0:	2b60      	cmp	r3, #96	@ 0x60
 801f9b2:	d02a      	beq.n	801fa0a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 801f9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9b6:	2b60      	cmp	r3, #96	@ 0x60
 801f9b8:	d83b      	bhi.n	801fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 801f9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9bc:	2b40      	cmp	r3, #64	@ 0x40
 801f9be:	d009      	beq.n	801f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801f9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9c2:	2b40      	cmp	r3, #64	@ 0x40
 801f9c4:	d835      	bhi.n	801fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 801f9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9c8:	2b00      	cmp	r3, #0
 801f9ca:	d00c      	beq.n	801f9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 801f9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f9ce:	2b20      	cmp	r3, #32
 801f9d0:	d012      	beq.n	801f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 801f9d2:	e02e      	b.n	801fa32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801f9d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f9d8:	4618      	mov	r0, r3
 801f9da:	f7ff fb77 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 801f9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f9e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801f9e2:	f001 b929 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801f9e6:	f107 0318 	add.w	r3, r7, #24
 801f9ea:	4618      	mov	r0, r3
 801f9ec:	f7ff fcc8 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 801f9f0:	69bb      	ldr	r3, [r7, #24]
 801f9f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801f9f4:	f001 b920 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801f9f8:	f107 030c 	add.w	r3, r7, #12
 801f9fc:	4618      	mov	r0, r3
 801f9fe:	f7ff fe19 	bl	801f634 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 801fa02:	68fb      	ldr	r3, [r7, #12]
 801fa04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fa06:	f001 b917 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 801fa0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801fa0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fa10:	f001 b912 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801fa14:	4b64      	ldr	r3, [pc, #400]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801fa1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fa20:	d103      	bne.n	801fa2a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 801fa22:	4b63      	ldr	r3, [pc, #396]	@ (801fbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 801fa24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801fa26:	f001 b907 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801fa2a:	2300      	movs	r3, #0
 801fa2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fa2e:	f001 b903 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 801fa32:	2300      	movs	r3, #0
 801fa34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fa36:	f001 b8ff 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 801fa3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fa3e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801fa42:	430b      	orrs	r3, r1
 801fa44:	d158      	bne.n	801faf8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 801fa46:	4b58      	ldr	r3, [pc, #352]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fa48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801fa4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801fa50:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 801fa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fa58:	d03b      	beq.n	801fad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 801fa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fa60:	d846      	bhi.n	801faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 801fa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801fa68:	d02e      	beq.n	801fac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 801fa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801fa70:	d83e      	bhi.n	801faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 801fa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fa78:	d00b      	beq.n	801fa92 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 801fa7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fa80:	d836      	bhi.n	801faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 801fa82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d00d      	beq.n	801faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 801fa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fa8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801fa8e:	d012      	beq.n	801fab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 801fa90:	e02e      	b.n	801faf0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801fa92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fa96:	4618      	mov	r0, r3
 801fa98:	f7ff fb18 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 801fa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801faa0:	f001 b8ca 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801faa4:	f107 0318 	add.w	r3, r7, #24
 801faa8:	4618      	mov	r0, r3
 801faaa:	f7ff fc69 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 801faae:	69bb      	ldr	r3, [r7, #24]
 801fab0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fab2:	f001 b8c1 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fab6:	f107 030c 	add.w	r3, r7, #12
 801faba:	4618      	mov	r0, r3
 801fabc:	f7ff fdba 	bl	801f634 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fac4:	f001 b8b8 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 801fac8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801facc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801face:	f001 b8b3 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801fad2:	4b35      	ldr	r3, [pc, #212]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801fada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fade:	d103      	bne.n	801fae8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 801fae0:	4b33      	ldr	r3, [pc, #204]	@ (801fbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 801fae2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801fae4:	f001 b8a8 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801fae8:	2300      	movs	r3, #0
 801faea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801faec:	f001 b8a4 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 801faf0:	2300      	movs	r3, #0
 801faf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801faf4:	f001 b8a0 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 801faf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fafc:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 801fb00:	430b      	orrs	r3, r1
 801fb02:	d16e      	bne.n	801fbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 801fb04:	4b28      	ldr	r3, [pc, #160]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fb06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fb0a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801fb0e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 801fb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb12:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801fb16:	d034      	beq.n	801fb82 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 801fb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb1a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801fb1e:	d85c      	bhi.n	801fbda <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 801fb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801fb26:	d00b      	beq.n	801fb40 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 801fb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801fb2e:	d854      	bhi.n	801fbda <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 801fb30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d016      	beq.n	801fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 801fb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fb3c:	d009      	beq.n	801fb52 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 801fb3e:	e04c      	b.n	801fbda <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801fb40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fb44:	4618      	mov	r0, r3
 801fb46:	f7ff fac1 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 801fb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fb4e:	f001 b873 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fb52:	f107 0318 	add.w	r3, r7, #24
 801fb56:	4618      	mov	r0, r3
 801fb58:	f7ff fc12 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 801fb5c:	69fb      	ldr	r3, [r7, #28]
 801fb5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fb60:	f001 b86a 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 801fb64:	4b10      	ldr	r3, [pc, #64]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801fb6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fb70:	d103      	bne.n	801fb7a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 801fb72:	4b10      	ldr	r3, [pc, #64]	@ (801fbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 801fb74:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801fb76:	f001 b85f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fb7e:	f001 b85b 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801fb82:	4b09      	ldr	r3, [pc, #36]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	f003 0320 	and.w	r3, r3, #32
 801fb8a:	2b20      	cmp	r3, #32
 801fb8c:	d121      	bne.n	801fbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801fb8e:	4b06      	ldr	r3, [pc, #24]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fb90:	689b      	ldr	r3, [r3, #8]
 801fb92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	d00e      	beq.n	801fbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 801fb9a:	4b03      	ldr	r3, [pc, #12]	@ (801fba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 801fb9c:	689b      	ldr	r3, [r3, #8]
 801fb9e:	0e1b      	lsrs	r3, r3, #24
 801fba0:	f003 030f 	and.w	r3, r3, #15
 801fba4:	e00f      	b.n	801fbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 801fba6:	bf00      	nop
 801fba8:	46020c00 	.word	0x46020c00
 801fbac:	0007a120 	.word	0x0007a120
 801fbb0:	00f42400 	.word	0x00f42400
 801fbb4:	02dc6c00 	.word	0x02dc6c00
 801fbb8:	4ba7      	ldr	r3, [pc, #668]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fbba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801fbbe:	041b      	lsls	r3, r3, #16
 801fbc0:	0e1b      	lsrs	r3, r3, #24
 801fbc2:	f003 030f 	and.w	r3, r3, #15
 801fbc6:	4aa5      	ldr	r2, [pc, #660]	@ (801fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 801fbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fbcc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 801fbce:	f001 b833 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 801fbd2:	2300      	movs	r3, #0
 801fbd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fbd6:	f001 b82f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 801fbda:	2300      	movs	r3, #0
 801fbdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 801fbde:	f001 b82b 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801fbe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fbe6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 801fbea:	430b      	orrs	r3, r1
 801fbec:	d17f      	bne.n	801fcee <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801fbee:	4b9a      	ldr	r3, [pc, #616]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fbf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801fbf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801fbf8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 801fbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d165      	bne.n	801fccc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 801fc00:	4b95      	ldr	r3, [pc, #596]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fc02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fc06:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 801fc0a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 801fc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc0e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801fc12:	d034      	beq.n	801fc7e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801fc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc16:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801fc1a:	d853      	bhi.n	801fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801fc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801fc22:	d00b      	beq.n	801fc3c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 801fc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801fc2a:	d84b      	bhi.n	801fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801fc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d016      	beq.n	801fc60 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 801fc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fc38:	d009      	beq.n	801fc4e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801fc3a:	e043      	b.n	801fcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801fc3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fc40:	4618      	mov	r0, r3
 801fc42:	f7ff fa43 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801fc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc48:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801fc4a:	f000 bff5 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fc4e:	f107 0318 	add.w	r3, r7, #24
 801fc52:	4618      	mov	r0, r3
 801fc54:	f7ff fb94 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801fc58:	69fb      	ldr	r3, [r7, #28]
 801fc5a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801fc5c:	f000 bfec 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 801fc60:	4b7d      	ldr	r3, [pc, #500]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801fc68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fc6c:	d103      	bne.n	801fc76 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 801fc6e:	4b7c      	ldr	r3, [pc, #496]	@ (801fe60 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 801fc70:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 801fc72:	f000 bfe1 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 801fc76:	2300      	movs	r3, #0
 801fc78:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801fc7a:	f000 bfdd 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 801fc7e:	4b76      	ldr	r3, [pc, #472]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	f003 0320 	and.w	r3, r3, #32
 801fc86:	2b20      	cmp	r3, #32
 801fc88:	d118      	bne.n	801fcbc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801fc8a:	4b73      	ldr	r3, [pc, #460]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fc8c:	689b      	ldr	r3, [r3, #8]
 801fc8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d005      	beq.n	801fca2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 801fc96:	4b70      	ldr	r3, [pc, #448]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fc98:	689b      	ldr	r3, [r3, #8]
 801fc9a:	0e1b      	lsrs	r3, r3, #24
 801fc9c:	f003 030f 	and.w	r3, r3, #15
 801fca0:	e006      	b.n	801fcb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 801fca2:	4b6d      	ldr	r3, [pc, #436]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801fca8:	041b      	lsls	r3, r3, #16
 801fcaa:	0e1b      	lsrs	r3, r3, #24
 801fcac:	f003 030f 	and.w	r3, r3, #15
 801fcb0:	4a6a      	ldr	r2, [pc, #424]	@ (801fe5c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 801fcb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801fcb6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 801fcb8:	f000 bfbe 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 801fcbc:	2300      	movs	r3, #0
 801fcbe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801fcc0:	f000 bfba 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 801fcc8:	f000 bfb6 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 801fccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fcce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801fcd2:	d108      	bne.n	801fce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801fcd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fcd8:	4618      	mov	r0, r3
 801fcda:	f7ff f9f7 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 801fcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fce0:	637b      	str	r3, [r7, #52]	@ 0x34
 801fce2:	f000 bfa9 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 801fce6:	2300      	movs	r3, #0
 801fce8:	637b      	str	r3, [r7, #52]	@ 0x34
 801fcea:	f000 bfa5 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 801fcee:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fcf2:	1e51      	subs	r1, r2, #1
 801fcf4:	430b      	orrs	r3, r1
 801fcf6:	d136      	bne.n	801fd66 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 801fcf8:	4b57      	ldr	r3, [pc, #348]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fcfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fcfe:	f003 0303 	and.w	r3, r3, #3
 801fd02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 801fd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d104      	bne.n	801fd14 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 801fd0a:	f7fe fb8d 	bl	801e428 <HAL_RCC_GetPCLK2Freq>
 801fd0e:	6378      	str	r0, [r7, #52]	@ 0x34
 801fd10:	f000 bf92 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 801fd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd16:	2b01      	cmp	r3, #1
 801fd18:	d104      	bne.n	801fd24 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801fd1a:	f7fe fa55 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801fd1e:	6378      	str	r0, [r7, #52]	@ 0x34
 801fd20:	f000 bf8a 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 801fd24:	4b4c      	ldr	r3, [pc, #304]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801fd2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fd30:	d106      	bne.n	801fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 801fd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd34:	2b02      	cmp	r3, #2
 801fd36:	d103      	bne.n	801fd40 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 801fd38:	4b4a      	ldr	r3, [pc, #296]	@ (801fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 801fd3a:	637b      	str	r3, [r7, #52]	@ 0x34
 801fd3c:	f000 bf7c 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 801fd40:	4b45      	ldr	r3, [pc, #276]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fd42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801fd46:	f003 0302 	and.w	r3, r3, #2
 801fd4a:	2b02      	cmp	r3, #2
 801fd4c:	d107      	bne.n	801fd5e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 801fd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd50:	2b03      	cmp	r3, #3
 801fd52:	d104      	bne.n	801fd5e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 801fd54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fd58:	637b      	str	r3, [r7, #52]	@ 0x34
 801fd5a:	f000 bf6d 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 801fd5e:	2300      	movs	r3, #0
 801fd60:	637b      	str	r3, [r7, #52]	@ 0x34
 801fd62:	f000 bf69 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 801fd66:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fd6a:	1e91      	subs	r1, r2, #2
 801fd6c:	430b      	orrs	r3, r1
 801fd6e:	d136      	bne.n	801fdde <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 801fd70:	4b39      	ldr	r3, [pc, #228]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fd72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fd76:	f003 030c 	and.w	r3, r3, #12
 801fd7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 801fd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	d104      	bne.n	801fd8c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 801fd82:	f7fe fb3d 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 801fd86:	6378      	str	r0, [r7, #52]	@ 0x34
 801fd88:	f000 bf56 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 801fd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd8e:	2b04      	cmp	r3, #4
 801fd90:	d104      	bne.n	801fd9c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801fd92:	f7fe fa19 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801fd96:	6378      	str	r0, [r7, #52]	@ 0x34
 801fd98:	f000 bf4e 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 801fd9c:	4b2e      	ldr	r3, [pc, #184]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801fda4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fda8:	d106      	bne.n	801fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 801fdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fdac:	2b08      	cmp	r3, #8
 801fdae:	d103      	bne.n	801fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 801fdb0:	4b2c      	ldr	r3, [pc, #176]	@ (801fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 801fdb2:	637b      	str	r3, [r7, #52]	@ 0x34
 801fdb4:	f000 bf40 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 801fdb8:	4b27      	ldr	r3, [pc, #156]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fdba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801fdbe:	f003 0302 	and.w	r3, r3, #2
 801fdc2:	2b02      	cmp	r3, #2
 801fdc4:	d107      	bne.n	801fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 801fdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fdc8:	2b0c      	cmp	r3, #12
 801fdca:	d104      	bne.n	801fdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 801fdcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fdd0:	637b      	str	r3, [r7, #52]	@ 0x34
 801fdd2:	f000 bf31 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 801fdd6:	2300      	movs	r3, #0
 801fdd8:	637b      	str	r3, [r7, #52]	@ 0x34
 801fdda:	f000 bf2d 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 801fdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fde2:	1f11      	subs	r1, r2, #4
 801fde4:	430b      	orrs	r3, r1
 801fde6:	d13f      	bne.n	801fe68 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 801fde8:	4b1b      	ldr	r3, [pc, #108]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fdea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fdee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801fdf2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 801fdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d104      	bne.n	801fe04 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 801fdfa:	f7fe fb01 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 801fdfe:	6378      	str	r0, [r7, #52]	@ 0x34
 801fe00:	f000 bf1a 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 801fe04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe06:	2b10      	cmp	r3, #16
 801fe08:	d104      	bne.n	801fe14 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801fe0a:	f7fe f9dd 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801fe0e:	6378      	str	r0, [r7, #52]	@ 0x34
 801fe10:	f000 bf12 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 801fe14:	4b10      	ldr	r3, [pc, #64]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801fe1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801fe20:	d106      	bne.n	801fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 801fe22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe24:	2b20      	cmp	r3, #32
 801fe26:	d103      	bne.n	801fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 801fe28:	4b0e      	ldr	r3, [pc, #56]	@ (801fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 801fe2a:	637b      	str	r3, [r7, #52]	@ 0x34
 801fe2c:	f000 bf04 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 801fe30:	4b09      	ldr	r3, [pc, #36]	@ (801fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 801fe32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801fe36:	f003 0302 	and.w	r3, r3, #2
 801fe3a:	2b02      	cmp	r3, #2
 801fe3c:	d107      	bne.n	801fe4e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 801fe3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe40:	2b30      	cmp	r3, #48	@ 0x30
 801fe42:	d104      	bne.n	801fe4e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 801fe44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fe48:	637b      	str	r3, [r7, #52]	@ 0x34
 801fe4a:	f000 bef5 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 801fe4e:	2300      	movs	r3, #0
 801fe50:	637b      	str	r3, [r7, #52]	@ 0x34
 801fe52:	f000 bef1 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 801fe56:	bf00      	nop
 801fe58:	46020c00 	.word	0x46020c00
 801fe5c:	080301b8 	.word	0x080301b8
 801fe60:	02dc6c00 	.word	0x02dc6c00
 801fe64:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 801fe68:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fe6c:	f1a2 0108 	sub.w	r1, r2, #8
 801fe70:	430b      	orrs	r3, r1
 801fe72:	d136      	bne.n	801fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 801fe74:	4ba4      	ldr	r3, [pc, #656]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801fe76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fe7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801fe7e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 801fe80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d104      	bne.n	801fe90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 801fe86:	f7fe fabb 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 801fe8a:	6378      	str	r0, [r7, #52]	@ 0x34
 801fe8c:	f000 bed4 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 801fe90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe92:	2b40      	cmp	r3, #64	@ 0x40
 801fe94:	d104      	bne.n	801fea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801fe96:	f7fe f997 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801fe9a:	6378      	str	r0, [r7, #52]	@ 0x34
 801fe9c:	f000 becc 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 801fea0:	4b99      	ldr	r3, [pc, #612]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801fea2:	681b      	ldr	r3, [r3, #0]
 801fea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801fea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801feac:	d106      	bne.n	801febc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 801feae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801feb0:	2b80      	cmp	r3, #128	@ 0x80
 801feb2:	d103      	bne.n	801febc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 801feb4:	4b95      	ldr	r3, [pc, #596]	@ (802010c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 801feb6:	637b      	str	r3, [r7, #52]	@ 0x34
 801feb8:	f000 bebe 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 801febc:	4b92      	ldr	r3, [pc, #584]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801febe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801fec2:	f003 0302 	and.w	r3, r3, #2
 801fec6:	2b02      	cmp	r3, #2
 801fec8:	d107      	bne.n	801feda <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 801feca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fecc:	2bc0      	cmp	r3, #192	@ 0xc0
 801fece:	d104      	bne.n	801feda <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 801fed0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fed4:	637b      	str	r3, [r7, #52]	@ 0x34
 801fed6:	f000 beaf 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 801feda:	2300      	movs	r3, #0
 801fedc:	637b      	str	r3, [r7, #52]	@ 0x34
 801fede:	f000 beab 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 801fee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fee6:	f1a2 0110 	sub.w	r1, r2, #16
 801feea:	430b      	orrs	r3, r1
 801feec:	d139      	bne.n	801ff62 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 801feee:	4b86      	ldr	r3, [pc, #536]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801fef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801fef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801fef8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 801fefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fefc:	2b00      	cmp	r3, #0
 801fefe:	d104      	bne.n	801ff0a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 801ff00:	f7fe fa7e 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 801ff04:	6378      	str	r0, [r7, #52]	@ 0x34
 801ff06:	f000 be97 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 801ff0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ff10:	d104      	bne.n	801ff1c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801ff12:	f7fe f959 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801ff16:	6378      	str	r0, [r7, #52]	@ 0x34
 801ff18:	f000 be8e 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 801ff1c:	4b7a      	ldr	r3, [pc, #488]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ff1e:	681b      	ldr	r3, [r3, #0]
 801ff20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801ff24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ff28:	d107      	bne.n	801ff3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 801ff2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ff30:	d103      	bne.n	801ff3a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 801ff32:	4b76      	ldr	r3, [pc, #472]	@ (802010c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 801ff34:	637b      	str	r3, [r7, #52]	@ 0x34
 801ff36:	f000 be7f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 801ff3a:	4b73      	ldr	r3, [pc, #460]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ff3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ff40:	f003 0302 	and.w	r3, r3, #2
 801ff44:	2b02      	cmp	r3, #2
 801ff46:	d108      	bne.n	801ff5a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 801ff48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ff4e:	d104      	bne.n	801ff5a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 801ff50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ff54:	637b      	str	r3, [r7, #52]	@ 0x34
 801ff56:	f000 be6f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 801ff5a:	2300      	movs	r3, #0
 801ff5c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ff5e:	f000 be6b 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 801ff62:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ff66:	f1a2 0120 	sub.w	r1, r2, #32
 801ff6a:	430b      	orrs	r3, r1
 801ff6c:	d158      	bne.n	8020020 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 801ff6e:	4b66      	ldr	r3, [pc, #408]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ff70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801ff74:	f003 0307 	and.w	r3, r3, #7
 801ff78:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 801ff7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d104      	bne.n	801ff8a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 801ff80:	f7fe fa66 	bl	801e450 <HAL_RCC_GetPCLK3Freq>
 801ff84:	6378      	str	r0, [r7, #52]	@ 0x34
 801ff86:	f000 be57 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 801ff8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff8c:	2b01      	cmp	r3, #1
 801ff8e:	d104      	bne.n	801ff9a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 801ff90:	f7fe f91a 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 801ff94:	6378      	str	r0, [r7, #52]	@ 0x34
 801ff96:	f000 be4f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 801ff9a:	4b5b      	ldr	r3, [pc, #364]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ff9c:	681b      	ldr	r3, [r3, #0]
 801ff9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801ffa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ffa6:	d106      	bne.n	801ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 801ffa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffaa:	2b02      	cmp	r3, #2
 801ffac:	d103      	bne.n	801ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 801ffae:	4b57      	ldr	r3, [pc, #348]	@ (802010c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 801ffb0:	637b      	str	r3, [r7, #52]	@ 0x34
 801ffb2:	f000 be41 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 801ffb6:	4b54      	ldr	r3, [pc, #336]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ffb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801ffbc:	f003 0302 	and.w	r3, r3, #2
 801ffc0:	2b02      	cmp	r3, #2
 801ffc2:	d107      	bne.n	801ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 801ffc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffc6:	2b03      	cmp	r3, #3
 801ffc8:	d104      	bne.n	801ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 801ffca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ffce:	637b      	str	r3, [r7, #52]	@ 0x34
 801ffd0:	f000 be32 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 801ffd4:	4b4c      	ldr	r3, [pc, #304]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	f003 0320 	and.w	r3, r3, #32
 801ffdc:	2b20      	cmp	r3, #32
 801ffde:	d11b      	bne.n	8020018 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 801ffe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ffe2:	2b04      	cmp	r3, #4
 801ffe4:	d118      	bne.n	8020018 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 801ffe6:	4b48      	ldr	r3, [pc, #288]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801ffe8:	689b      	ldr	r3, [r3, #8]
 801ffea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d005      	beq.n	801fffe <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 801fff2:	4b45      	ldr	r3, [pc, #276]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 801fff4:	689b      	ldr	r3, [r3, #8]
 801fff6:	0e1b      	lsrs	r3, r3, #24
 801fff8:	f003 030f 	and.w	r3, r3, #15
 801fffc:	e006      	b.n	802000c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801fffe:	4b42      	ldr	r3, [pc, #264]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8020000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020004:	041b      	lsls	r3, r3, #16
 8020006:	0e1b      	lsrs	r3, r3, #24
 8020008:	f003 030f 	and.w	r3, r3, #15
 802000c:	4a40      	ldr	r2, [pc, #256]	@ (8020110 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 802000e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020012:	637b      	str	r3, [r7, #52]	@ 0x34
 8020014:	f000 be10 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8020018:	2300      	movs	r3, #0
 802001a:	637b      	str	r3, [r7, #52]	@ 0x34
 802001c:	f000 be0c 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8020020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020024:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8020028:	430b      	orrs	r3, r1
 802002a:	d173      	bne.n	8020114 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 802002c:	4b36      	ldr	r3, [pc, #216]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 802002e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020032:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8020036:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8020038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802003a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802003e:	d104      	bne.n	802004a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8020040:	f7fe f8c2 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 8020044:	6378      	str	r0, [r7, #52]	@ 0x34
 8020046:	f000 bdf7 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 802004a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802004c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020050:	d108      	bne.n	8020064 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020052:	f107 0318 	add.w	r3, r7, #24
 8020056:	4618      	mov	r0, r3
 8020058:	f7ff f992 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 802005c:	6a3b      	ldr	r3, [r7, #32]
 802005e:	637b      	str	r3, [r7, #52]	@ 0x34
 8020060:	f000 bdea 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8020064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020066:	2b00      	cmp	r3, #0
 8020068:	d104      	bne.n	8020074 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 802006a:	f7fe f9af 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
 802006e:	6378      	str	r0, [r7, #52]	@ 0x34
 8020070:	f000 bde2 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8020074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020076:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 802007a:	d122      	bne.n	80200c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 802007c:	4b22      	ldr	r3, [pc, #136]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 802007e:	681b      	ldr	r3, [r3, #0]
 8020080:	f003 0320 	and.w	r3, r3, #32
 8020084:	2b20      	cmp	r3, #32
 8020086:	d118      	bne.n	80200ba <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8020088:	4b1f      	ldr	r3, [pc, #124]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 802008a:	689b      	ldr	r3, [r3, #8]
 802008c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020090:	2b00      	cmp	r3, #0
 8020092:	d005      	beq.n	80200a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8020094:	4b1c      	ldr	r3, [pc, #112]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8020096:	689b      	ldr	r3, [r3, #8]
 8020098:	0e1b      	lsrs	r3, r3, #24
 802009a:	f003 030f 	and.w	r3, r3, #15
 802009e:	e006      	b.n	80200ae <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80200a0:	4b19      	ldr	r3, [pc, #100]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80200a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80200a6:	041b      	lsls	r3, r3, #16
 80200a8:	0e1b      	lsrs	r3, r3, #24
 80200aa:	f003 030f 	and.w	r3, r3, #15
 80200ae:	4a18      	ldr	r2, [pc, #96]	@ (8020110 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 80200b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80200b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80200b6:	f000 bdbf 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80200ba:	2300      	movs	r3, #0
 80200bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80200be:	f000 bdbb 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80200c2:	4b11      	ldr	r3, [pc, #68]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80200ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80200ce:	d107      	bne.n	80200e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 80200d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80200d6:	d103      	bne.n	80200e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 80200d8:	4b0c      	ldr	r3, [pc, #48]	@ (802010c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80200da:	637b      	str	r3, [r7, #52]	@ 0x34
 80200dc:	f000 bdac 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80200e0:	4b09      	ldr	r3, [pc, #36]	@ (8020108 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80200e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80200ec:	d107      	bne.n	80200fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80200ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80200f4:	d103      	bne.n	80200fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 80200f6:	4b05      	ldr	r3, [pc, #20]	@ (802010c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 80200f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80200fa:	f000 bd9d 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80200fe:	2300      	movs	r3, #0
 8020100:	637b      	str	r3, [r7, #52]	@ 0x34
 8020102:	f000 bd99 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8020106:	bf00      	nop
 8020108:	46020c00 	.word	0x46020c00
 802010c:	00f42400 	.word	0x00f42400
 8020110:	080301b8 	.word	0x080301b8
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8020114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020118:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 802011c:	430b      	orrs	r3, r1
 802011e:	d158      	bne.n	80201d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8020120:	4bad      	ldr	r3, [pc, #692]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020122:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8020126:	f003 0307 	and.w	r3, r3, #7
 802012a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 802012c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802012e:	2b04      	cmp	r3, #4
 8020130:	d84b      	bhi.n	80201ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8020132:	a201      	add	r2, pc, #4	@ (adr r2, 8020138 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8020134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020138:	08020171 	.word	0x08020171
 802013c:	0802014d 	.word	0x0802014d
 8020140:	0802015f 	.word	0x0802015f
 8020144:	0802017b 	.word	0x0802017b
 8020148:	08020185 	.word	0x08020185
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 802014c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020150:	4618      	mov	r0, r3
 8020152:	f7fe ffbb 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8020156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020158:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 802015a:	f000 bd6d 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802015e:	f107 030c 	add.w	r3, r7, #12
 8020162:	4618      	mov	r0, r3
 8020164:	f7ff fa66 	bl	801f634 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8020168:	693b      	ldr	r3, [r7, #16]
 802016a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 802016c:	f000 bd64 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8020170:	f7fe f92c 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
 8020174:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020176:	f000 bd5f 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 802017a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 802017e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020180:	f000 bd5a 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020184:	4b94      	ldr	r3, [pc, #592]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020186:	681b      	ldr	r3, [r3, #0]
 8020188:	f003 0320 	and.w	r3, r3, #32
 802018c:	2b20      	cmp	r3, #32
 802018e:	d118      	bne.n	80201c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8020190:	4b91      	ldr	r3, [pc, #580]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020192:	689b      	ldr	r3, [r3, #8]
 8020194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020198:	2b00      	cmp	r3, #0
 802019a:	d005      	beq.n	80201a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 802019c:	4b8e      	ldr	r3, [pc, #568]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 802019e:	689b      	ldr	r3, [r3, #8]
 80201a0:	0e1b      	lsrs	r3, r3, #24
 80201a2:	f003 030f 	and.w	r3, r3, #15
 80201a6:	e006      	b.n	80201b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80201a8:	4b8b      	ldr	r3, [pc, #556]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80201aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80201ae:	041b      	lsls	r3, r3, #16
 80201b0:	0e1b      	lsrs	r3, r3, #24
 80201b2:	f003 030f 	and.w	r3, r3, #15
 80201b6:	4a89      	ldr	r2, [pc, #548]	@ (80203dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80201b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80201bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80201be:	f000 bd3b 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80201c2:	2300      	movs	r3, #0
 80201c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80201c6:	f000 bd37 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80201ca:	2300      	movs	r3, #0
 80201cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80201ce:	f000 bd33 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80201d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80201d6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80201da:	430b      	orrs	r3, r1
 80201dc:	d167      	bne.n	80202ae <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80201de:	4b7e      	ldr	r3, [pc, #504]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80201e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80201e4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80201e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80201ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80201f0:	d036      	beq.n	8020260 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80201f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80201f8:	d855      	bhi.n	80202a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80201fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8020200:	d029      	beq.n	8020256 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8020202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020204:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8020208:	d84d      	bhi.n	80202a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 802020a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802020c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020210:	d013      	beq.n	802023a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8020212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020218:	d845      	bhi.n	80202a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 802021a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802021c:	2b00      	cmp	r3, #0
 802021e:	d015      	beq.n	802024c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8020220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020226:	d13e      	bne.n	80202a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802022c:	4618      	mov	r0, r3
 802022e:	f7fe ff4d 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8020232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020234:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020236:	f000 bcff 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802023a:	f107 030c 	add.w	r3, r7, #12
 802023e:	4618      	mov	r0, r3
 8020240:	f7ff f9f8 	bl	801f634 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8020244:	693b      	ldr	r3, [r7, #16]
 8020246:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020248:	f000 bcf6 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 802024c:	f7fe f8be 	bl	801e3cc <HAL_RCC_GetHCLKFreq>
 8020250:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020252:	f000 bcf1 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8020256:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 802025a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 802025c:	f000 bcec 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020260:	4b5d      	ldr	r3, [pc, #372]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020262:	681b      	ldr	r3, [r3, #0]
 8020264:	f003 0320 	and.w	r3, r3, #32
 8020268:	2b20      	cmp	r3, #32
 802026a:	d118      	bne.n	802029e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 802026c:	4b5a      	ldr	r3, [pc, #360]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 802026e:	689b      	ldr	r3, [r3, #8]
 8020270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020274:	2b00      	cmp	r3, #0
 8020276:	d005      	beq.n	8020284 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8020278:	4b57      	ldr	r3, [pc, #348]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 802027a:	689b      	ldr	r3, [r3, #8]
 802027c:	0e1b      	lsrs	r3, r3, #24
 802027e:	f003 030f 	and.w	r3, r3, #15
 8020282:	e006      	b.n	8020292 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8020284:	4b54      	ldr	r3, [pc, #336]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 802028a:	041b      	lsls	r3, r3, #16
 802028c:	0e1b      	lsrs	r3, r3, #24
 802028e:	f003 030f 	and.w	r3, r3, #15
 8020292:	4a52      	ldr	r2, [pc, #328]	@ (80203dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8020294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020298:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 802029a:	f000 bccd 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 802029e:	2300      	movs	r3, #0
 80202a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80202a2:	f000 bcc9 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80202a6:	2300      	movs	r3, #0
 80202a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80202aa:	f000 bcc5 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80202ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80202b2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80202b6:	430b      	orrs	r3, r1
 80202b8:	d14c      	bne.n	8020354 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80202ba:	4b47      	ldr	r3, [pc, #284]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80202bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80202c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80202c4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80202c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202c8:	2b00      	cmp	r3, #0
 80202ca:	d104      	bne.n	80202d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80202cc:	f7fe f898 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 80202d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80202d2:	f000 bcb1 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80202d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80202dc:	d104      	bne.n	80202e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80202de:	f7fd ff73 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 80202e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80202e4:	f000 bca8 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80202e8:	4b3b      	ldr	r3, [pc, #236]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80202f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80202f4:	d107      	bne.n	8020306 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 80202f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80202f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80202fc:	d103      	bne.n	8020306 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 80202fe:	4b38      	ldr	r3, [pc, #224]	@ (80203e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8020300:	637b      	str	r3, [r7, #52]	@ 0x34
 8020302:	f000 bc99 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8020306:	4b34      	ldr	r3, [pc, #208]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	f003 0320 	and.w	r3, r3, #32
 802030e:	2b20      	cmp	r3, #32
 8020310:	d11c      	bne.n	802034c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8020312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8020318:	d118      	bne.n	802034c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 802031a:	4b2f      	ldr	r3, [pc, #188]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 802031c:	689b      	ldr	r3, [r3, #8]
 802031e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020322:	2b00      	cmp	r3, #0
 8020324:	d005      	beq.n	8020332 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8020326:	4b2c      	ldr	r3, [pc, #176]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020328:	689b      	ldr	r3, [r3, #8]
 802032a:	0e1b      	lsrs	r3, r3, #24
 802032c:	f003 030f 	and.w	r3, r3, #15
 8020330:	e006      	b.n	8020340 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8020332:	4b29      	ldr	r3, [pc, #164]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020338:	041b      	lsls	r3, r3, #16
 802033a:	0e1b      	lsrs	r3, r3, #24
 802033c:	f003 030f 	and.w	r3, r3, #15
 8020340:	4a26      	ldr	r2, [pc, #152]	@ (80203dc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8020342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020346:	637b      	str	r3, [r7, #52]	@ 0x34
 8020348:	f000 bc76 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 802034c:	2300      	movs	r3, #0
 802034e:	637b      	str	r3, [r7, #52]	@ 0x34
 8020350:	f000 bc72 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8020354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020358:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 802035c:	430b      	orrs	r3, r1
 802035e:	d152      	bne.n	8020406 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8020360:	4b1d      	ldr	r3, [pc, #116]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020366:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 802036a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 802036c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802036e:	2b00      	cmp	r3, #0
 8020370:	d104      	bne.n	802037c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8020372:	f7fe f845 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 8020376:	6378      	str	r0, [r7, #52]	@ 0x34
 8020378:	f000 bc5e 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 802037c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802037e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020382:	d104      	bne.n	802038e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8020384:	f7fd ff20 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 8020388:	6378      	str	r0, [r7, #52]	@ 0x34
 802038a:	f000 bc55 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 802038e:	4b12      	ldr	r3, [pc, #72]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8020390:	681b      	ldr	r3, [r3, #0]
 8020392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802039a:	d107      	bne.n	80203ac <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 802039c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802039e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80203a2:	d103      	bne.n	80203ac <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80203a4:	4b0e      	ldr	r3, [pc, #56]	@ (80203e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80203a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80203a8:	f000 bc46 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80203ac:	4b0a      	ldr	r3, [pc, #40]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	f003 0320 	and.w	r3, r3, #32
 80203b4:	2b20      	cmp	r3, #32
 80203b6:	d122      	bne.n	80203fe <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80203b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80203ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80203be:	d11e      	bne.n	80203fe <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80203c0:	4b05      	ldr	r3, [pc, #20]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80203c2:	689b      	ldr	r3, [r3, #8]
 80203c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80203c8:	2b00      	cmp	r3, #0
 80203ca:	d00b      	beq.n	80203e4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80203cc:	4b02      	ldr	r3, [pc, #8]	@ (80203d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80203ce:	689b      	ldr	r3, [r3, #8]
 80203d0:	0e1b      	lsrs	r3, r3, #24
 80203d2:	f003 030f 	and.w	r3, r3, #15
 80203d6:	e00c      	b.n	80203f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 80203d8:	46020c00 	.word	0x46020c00
 80203dc:	080301b8 	.word	0x080301b8
 80203e0:	00f42400 	.word	0x00f42400
 80203e4:	4ba1      	ldr	r3, [pc, #644]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80203e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80203ea:	041b      	lsls	r3, r3, #16
 80203ec:	0e1b      	lsrs	r3, r3, #24
 80203ee:	f003 030f 	and.w	r3, r3, #15
 80203f2:	4a9f      	ldr	r2, [pc, #636]	@ (8020670 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80203f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80203f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80203fa:	f000 bc1d 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80203fe:	2300      	movs	r3, #0
 8020400:	637b      	str	r3, [r7, #52]	@ 0x34
 8020402:	f000 bc19 	b.w	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8020406:	e9d7 2300 	ldrd	r2, r3, [r7]
 802040a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 802040e:	430b      	orrs	r3, r1
 8020410:	d151      	bne.n	80204b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8020412:	4b96      	ldr	r3, [pc, #600]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020418:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 802041c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 802041e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020420:	2bc0      	cmp	r3, #192	@ 0xc0
 8020422:	d024      	beq.n	802046e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8020424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020426:	2bc0      	cmp	r3, #192	@ 0xc0
 8020428:	d842      	bhi.n	80204b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 802042a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802042c:	2b80      	cmp	r3, #128	@ 0x80
 802042e:	d00d      	beq.n	802044c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8020430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020432:	2b80      	cmp	r3, #128	@ 0x80
 8020434:	d83c      	bhi.n	80204b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8020436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020438:	2b00      	cmp	r3, #0
 802043a:	d003      	beq.n	8020444 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 802043c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802043e:	2b40      	cmp	r3, #64	@ 0x40
 8020440:	d011      	beq.n	8020466 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8020442:	e035      	b.n	80204b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8020444:	f7fe f804 	bl	801e450 <HAL_RCC_GetPCLK3Freq>
 8020448:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 802044a:	e3f5      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 802044c:	4b87      	ldr	r3, [pc, #540]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020458:	d102      	bne.n	8020460 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 802045a:	4b86      	ldr	r3, [pc, #536]	@ (8020674 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 802045c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 802045e:	e3eb      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8020460:	2300      	movs	r3, #0
 8020462:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020464:	e3e8      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8020466:	f7fd feaf 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 802046a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 802046c:	e3e4      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 802046e:	4b7f      	ldr	r3, [pc, #508]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020470:	681b      	ldr	r3, [r3, #0]
 8020472:	f003 0320 	and.w	r3, r3, #32
 8020476:	2b20      	cmp	r3, #32
 8020478:	d117      	bne.n	80204aa <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 802047a:	4b7c      	ldr	r3, [pc, #496]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802047c:	689b      	ldr	r3, [r3, #8]
 802047e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020482:	2b00      	cmp	r3, #0
 8020484:	d005      	beq.n	8020492 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8020486:	4b79      	ldr	r3, [pc, #484]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020488:	689b      	ldr	r3, [r3, #8]
 802048a:	0e1b      	lsrs	r3, r3, #24
 802048c:	f003 030f 	and.w	r3, r3, #15
 8020490:	e006      	b.n	80204a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8020492:	4b76      	ldr	r3, [pc, #472]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020494:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020498:	041b      	lsls	r3, r3, #16
 802049a:	0e1b      	lsrs	r3, r3, #24
 802049c:	f003 030f 	and.w	r3, r3, #15
 80204a0:	4a73      	ldr	r2, [pc, #460]	@ (8020670 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80204a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80204a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80204a8:	e3c6      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80204aa:	2300      	movs	r3, #0
 80204ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80204ae:	e3c3      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80204b0:	2300      	movs	r3, #0
 80204b2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80204b4:	e3c0      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80204b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80204ba:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80204be:	430b      	orrs	r3, r1
 80204c0:	d147      	bne.n	8020552 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80204c2:	4b6a      	ldr	r3, [pc, #424]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80204c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80204c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80204cc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80204ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d103      	bne.n	80204dc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80204d4:	f7fd ff94 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 80204d8:	6378      	str	r0, [r7, #52]	@ 0x34
 80204da:	e3ad      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80204dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80204e2:	d103      	bne.n	80204ec <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80204e4:	f7fd fe70 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 80204e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80204ea:	e3a5      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80204ec:	4b5f      	ldr	r3, [pc, #380]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80204f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80204f8:	d106      	bne.n	8020508 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80204fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80204fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020500:	d102      	bne.n	8020508 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8020502:	4b5c      	ldr	r3, [pc, #368]	@ (8020674 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8020504:	637b      	str	r3, [r7, #52]	@ 0x34
 8020506:	e397      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8020508:	4b58      	ldr	r3, [pc, #352]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	f003 0320 	and.w	r3, r3, #32
 8020510:	2b20      	cmp	r3, #32
 8020512:	d11b      	bne.n	802054c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8020514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020516:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 802051a:	d117      	bne.n	802054c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 802051c:	4b53      	ldr	r3, [pc, #332]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802051e:	689b      	ldr	r3, [r3, #8]
 8020520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020524:	2b00      	cmp	r3, #0
 8020526:	d005      	beq.n	8020534 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8020528:	4b50      	ldr	r3, [pc, #320]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802052a:	689b      	ldr	r3, [r3, #8]
 802052c:	0e1b      	lsrs	r3, r3, #24
 802052e:	f003 030f 	and.w	r3, r3, #15
 8020532:	e006      	b.n	8020542 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8020534:	4b4d      	ldr	r3, [pc, #308]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020536:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 802053a:	041b      	lsls	r3, r3, #16
 802053c:	0e1b      	lsrs	r3, r3, #24
 802053e:	f003 030f 	and.w	r3, r3, #15
 8020542:	4a4b      	ldr	r2, [pc, #300]	@ (8020670 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8020544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020548:	637b      	str	r3, [r7, #52]	@ 0x34
 802054a:	e375      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 802054c:	2300      	movs	r3, #0
 802054e:	637b      	str	r3, [r7, #52]	@ 0x34
 8020550:	e372      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8020552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020556:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 802055a:	430b      	orrs	r3, r1
 802055c:	d164      	bne.n	8020628 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 802055e:	4b43      	ldr	r3, [pc, #268]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8020568:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 802056a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802056c:	2b00      	cmp	r3, #0
 802056e:	d120      	bne.n	80205b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020570:	4b3e      	ldr	r3, [pc, #248]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020572:	681b      	ldr	r3, [r3, #0]
 8020574:	f003 0320 	and.w	r3, r3, #32
 8020578:	2b20      	cmp	r3, #32
 802057a:	d117      	bne.n	80205ac <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 802057c:	4b3b      	ldr	r3, [pc, #236]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802057e:	689b      	ldr	r3, [r3, #8]
 8020580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020584:	2b00      	cmp	r3, #0
 8020586:	d005      	beq.n	8020594 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8020588:	4b38      	ldr	r3, [pc, #224]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 802058a:	689b      	ldr	r3, [r3, #8]
 802058c:	0e1b      	lsrs	r3, r3, #24
 802058e:	f003 030f 	and.w	r3, r3, #15
 8020592:	e006      	b.n	80205a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8020594:	4b35      	ldr	r3, [pc, #212]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 802059a:	041b      	lsls	r3, r3, #16
 802059c:	0e1b      	lsrs	r3, r3, #24
 802059e:	f003 030f 	and.w	r3, r3, #15
 80205a2:	4a33      	ldr	r2, [pc, #204]	@ (8020670 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80205a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80205a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80205aa:	e345      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80205ac:	2300      	movs	r3, #0
 80205ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80205b0:	e342      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80205b2:	4b2e      	ldr	r3, [pc, #184]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80205b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80205b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80205bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80205c0:	d112      	bne.n	80205e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80205c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80205c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80205c8:	d10e      	bne.n	80205e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80205ca:	4b28      	ldr	r3, [pc, #160]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80205cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80205d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80205d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80205d8:	d102      	bne.n	80205e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80205da:	23fa      	movs	r3, #250	@ 0xfa
 80205dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80205de:	e32b      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80205e0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80205e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80205e6:	e327      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80205e8:	4b20      	ldr	r3, [pc, #128]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80205ea:	681b      	ldr	r3, [r3, #0]
 80205ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80205f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80205f4:	d106      	bne.n	8020604 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80205f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80205f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80205fc:	d102      	bne.n	8020604 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80205fe:	4b1d      	ldr	r3, [pc, #116]	@ (8020674 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8020600:	637b      	str	r3, [r7, #52]	@ 0x34
 8020602:	e319      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8020604:	4b19      	ldr	r3, [pc, #100]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 802060a:	f003 0302 	and.w	r3, r3, #2
 802060e:	2b02      	cmp	r3, #2
 8020610:	d107      	bne.n	8020622 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8020612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020618:	d103      	bne.n	8020622 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 802061a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802061e:	637b      	str	r3, [r7, #52]	@ 0x34
 8020620:	e30a      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8020622:	2300      	movs	r3, #0
 8020624:	637b      	str	r3, [r7, #52]	@ 0x34
 8020626:	e307      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8020628:	e9d7 2300 	ldrd	r2, r3, [r7]
 802062c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8020630:	430b      	orrs	r3, r1
 8020632:	d16b      	bne.n	802070c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8020634:	4b0d      	ldr	r3, [pc, #52]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 802063a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 802063e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8020640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020642:	2b00      	cmp	r3, #0
 8020644:	d127      	bne.n	8020696 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020646:	4b09      	ldr	r3, [pc, #36]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020648:	681b      	ldr	r3, [r3, #0]
 802064a:	f003 0320 	and.w	r3, r3, #32
 802064e:	2b20      	cmp	r3, #32
 8020650:	d11e      	bne.n	8020690 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8020652:	4b06      	ldr	r3, [pc, #24]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020654:	689b      	ldr	r3, [r3, #8]
 8020656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802065a:	2b00      	cmp	r3, #0
 802065c:	d00c      	beq.n	8020678 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 802065e:	4b03      	ldr	r3, [pc, #12]	@ (802066c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8020660:	689b      	ldr	r3, [r3, #8]
 8020662:	0e1b      	lsrs	r3, r3, #24
 8020664:	f003 030f 	and.w	r3, r3, #15
 8020668:	e00d      	b.n	8020686 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 802066a:	bf00      	nop
 802066c:	46020c00 	.word	0x46020c00
 8020670:	080301b8 	.word	0x080301b8
 8020674:	00f42400 	.word	0x00f42400
 8020678:	4b94      	ldr	r3, [pc, #592]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802067a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 802067e:	041b      	lsls	r3, r3, #16
 8020680:	0e1b      	lsrs	r3, r3, #24
 8020682:	f003 030f 	and.w	r3, r3, #15
 8020686:	4a92      	ldr	r2, [pc, #584]	@ (80208d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8020688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802068c:	637b      	str	r3, [r7, #52]	@ 0x34
 802068e:	e2d3      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8020690:	2300      	movs	r3, #0
 8020692:	637b      	str	r3, [r7, #52]	@ 0x34
 8020694:	e2d0      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8020696:	4b8d      	ldr	r3, [pc, #564]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8020698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 802069c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80206a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80206a4:	d112      	bne.n	80206cc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80206a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80206a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80206ac:	d10e      	bne.n	80206cc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80206ae:	4b87      	ldr	r3, [pc, #540]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80206b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80206b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80206b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80206bc:	d102      	bne.n	80206c4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80206be:	23fa      	movs	r3, #250	@ 0xfa
 80206c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80206c2:	e2b9      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80206c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80206c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80206ca:	e2b5      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80206cc:	4b7f      	ldr	r3, [pc, #508]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80206d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80206d8:	d106      	bne.n	80206e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80206da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80206dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80206e0:	d102      	bne.n	80206e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80206e2:	4b7c      	ldr	r3, [pc, #496]	@ (80208d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80206e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80206e6:	e2a7      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80206e8:	4b78      	ldr	r3, [pc, #480]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80206ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80206ee:	f003 0302 	and.w	r3, r3, #2
 80206f2:	2b02      	cmp	r3, #2
 80206f4:	d107      	bne.n	8020706 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80206f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80206f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80206fc:	d103      	bne.n	8020706 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80206fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020702:	637b      	str	r3, [r7, #52]	@ 0x34
 8020704:	e298      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8020706:	2300      	movs	r3, #0
 8020708:	637b      	str	r3, [r7, #52]	@ 0x34
 802070a:	e295      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 802070c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020710:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8020714:	430b      	orrs	r3, r1
 8020716:	d147      	bne.n	80207a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8020718:	4b6c      	ldr	r3, [pc, #432]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802071e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8020722:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8020724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020726:	2b00      	cmp	r3, #0
 8020728:	d103      	bne.n	8020732 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 802072a:	f7fd fe69 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 802072e:	6378      	str	r0, [r7, #52]	@ 0x34
 8020730:	e282      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8020732:	4b66      	ldr	r3, [pc, #408]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8020734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 802073c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020740:	d112      	bne.n	8020768 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8020742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8020748:	d10e      	bne.n	8020768 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 802074a:	4b60      	ldr	r3, [pc, #384]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802074c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020758:	d102      	bne.n	8020760 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 802075a:	23fa      	movs	r3, #250	@ 0xfa
 802075c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 802075e:	e26b      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8020760:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8020764:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8020766:	e267      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8020768:	4b58      	ldr	r3, [pc, #352]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020774:	d106      	bne.n	8020784 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8020776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020778:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 802077c:	d102      	bne.n	8020784 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 802077e:	4b55      	ldr	r3, [pc, #340]	@ (80208d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8020780:	637b      	str	r3, [r7, #52]	@ 0x34
 8020782:	e259      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8020784:	4b51      	ldr	r3, [pc, #324]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8020786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 802078a:	f003 0302 	and.w	r3, r3, #2
 802078e:	2b02      	cmp	r3, #2
 8020790:	d107      	bne.n	80207a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8020792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020794:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8020798:	d103      	bne.n	80207a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 802079a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802079e:	637b      	str	r3, [r7, #52]	@ 0x34
 80207a0:	e24a      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80207a2:	2300      	movs	r3, #0
 80207a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80207a6:	e247      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80207a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80207ac:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80207b0:	430b      	orrs	r3, r1
 80207b2:	d12d      	bne.n	8020810 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80207b4:	4b45      	ldr	r3, [pc, #276]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80207b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80207ba:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80207be:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80207c0:	4b42      	ldr	r3, [pc, #264]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80207c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80207cc:	d105      	bne.n	80207da <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80207ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80207d0:	2b00      	cmp	r3, #0
 80207d2:	d102      	bne.n	80207da <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80207d4:	4b3f      	ldr	r3, [pc, #252]	@ (80208d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80207d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80207d8:	e22e      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80207da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80207dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80207e0:	d107      	bne.n	80207f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80207e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80207e6:	4618      	mov	r0, r3
 80207e8:	f7fe fc70 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80207ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80207ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80207f0:	e222      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80207f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80207f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80207f8:	d107      	bne.n	802080a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80207fa:	f107 0318 	add.w	r3, r7, #24
 80207fe:	4618      	mov	r0, r3
 8020800:	f7fe fdbe 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8020804:	69bb      	ldr	r3, [r7, #24]
 8020806:	637b      	str	r3, [r7, #52]	@ 0x34
 8020808:	e216      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 802080a:	2300      	movs	r3, #0
 802080c:	637b      	str	r3, [r7, #52]	@ 0x34
 802080e:	e213      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8020810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020814:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8020818:	430b      	orrs	r3, r1
 802081a:	d15d      	bne.n	80208d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 802081c:	4b2b      	ldr	r3, [pc, #172]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802081e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020822:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8020826:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8020828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802082a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 802082e:	d028      	beq.n	8020882 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8020830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020832:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8020836:	d845      	bhi.n	80208c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8020838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802083a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 802083e:	d013      	beq.n	8020868 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8020840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020846:	d83d      	bhi.n	80208c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8020848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802084a:	2b00      	cmp	r3, #0
 802084c:	d004      	beq.n	8020858 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 802084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020854:	d004      	beq.n	8020860 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8020856:	e035      	b.n	80208c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8020858:	f7fd fde6 	bl	801e428 <HAL_RCC_GetPCLK2Freq>
 802085c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 802085e:	e1eb      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8020860:	f7fd fcb2 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 8020864:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020866:	e1e7      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8020868:	4b18      	ldr	r3, [pc, #96]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020874:	d102      	bne.n	802087c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8020876:	4b17      	ldr	r3, [pc, #92]	@ (80208d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8020878:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 802087a:	e1dd      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 802087c:	2300      	movs	r3, #0
 802087e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020880:	e1da      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020882:	4b12      	ldr	r3, [pc, #72]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8020884:	681b      	ldr	r3, [r3, #0]
 8020886:	f003 0320 	and.w	r3, r3, #32
 802088a:	2b20      	cmp	r3, #32
 802088c:	d117      	bne.n	80208be <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 802088e:	4b0f      	ldr	r3, [pc, #60]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8020890:	689b      	ldr	r3, [r3, #8]
 8020892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020896:	2b00      	cmp	r3, #0
 8020898:	d005      	beq.n	80208a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 802089a:	4b0c      	ldr	r3, [pc, #48]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 802089c:	689b      	ldr	r3, [r3, #8]
 802089e:	0e1b      	lsrs	r3, r3, #24
 80208a0:	f003 030f 	and.w	r3, r3, #15
 80208a4:	e006      	b.n	80208b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80208a6:	4b09      	ldr	r3, [pc, #36]	@ (80208cc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80208a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80208ac:	041b      	lsls	r3, r3, #16
 80208ae:	0e1b      	lsrs	r3, r3, #24
 80208b0:	f003 030f 	and.w	r3, r3, #15
 80208b4:	4a06      	ldr	r2, [pc, #24]	@ (80208d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80208b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80208ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80208bc:	e1bc      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80208be:	2300      	movs	r3, #0
 80208c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80208c2:	e1b9      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80208c4:	2300      	movs	r3, #0
 80208c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80208c8:	e1b6      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80208ca:	bf00      	nop
 80208cc:	46020c00 	.word	0x46020c00
 80208d0:	080301b8 	.word	0x080301b8
 80208d4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80208d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80208dc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80208e0:	430b      	orrs	r3, r1
 80208e2:	d156      	bne.n	8020992 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80208e4:	4ba5      	ldr	r3, [pc, #660]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80208e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80208ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80208ee:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80208f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80208f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80208f6:	d028      	beq.n	802094a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80208f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80208fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80208fe:	d845      	bhi.n	802098c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8020900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8020906:	d013      	beq.n	8020930 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8020908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802090a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802090e:	d83d      	bhi.n	802098c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8020910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020912:	2b00      	cmp	r3, #0
 8020914:	d004      	beq.n	8020920 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8020916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802091c:	d004      	beq.n	8020928 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 802091e:	e035      	b.n	802098c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8020920:	f7fd fd6e 	bl	801e400 <HAL_RCC_GetPCLK1Freq>
 8020924:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020926:	e187      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8020928:	f7fd fc4e 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 802092c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 802092e:	e183      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8020930:	4b92      	ldr	r3, [pc, #584]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020932:	681b      	ldr	r3, [r3, #0]
 8020934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802093c:	d102      	bne.n	8020944 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 802093e:	4b90      	ldr	r3, [pc, #576]	@ (8020b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8020940:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8020942:	e179      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8020944:	2300      	movs	r3, #0
 8020946:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020948:	e176      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 802094a:	4b8c      	ldr	r3, [pc, #560]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 802094c:	681b      	ldr	r3, [r3, #0]
 802094e:	f003 0320 	and.w	r3, r3, #32
 8020952:	2b20      	cmp	r3, #32
 8020954:	d117      	bne.n	8020986 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8020956:	4b89      	ldr	r3, [pc, #548]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020958:	689b      	ldr	r3, [r3, #8]
 802095a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802095e:	2b00      	cmp	r3, #0
 8020960:	d005      	beq.n	802096e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8020962:	4b86      	ldr	r3, [pc, #536]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020964:	689b      	ldr	r3, [r3, #8]
 8020966:	0e1b      	lsrs	r3, r3, #24
 8020968:	f003 030f 	and.w	r3, r3, #15
 802096c:	e006      	b.n	802097c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 802096e:	4b83      	ldr	r3, [pc, #524]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020974:	041b      	lsls	r3, r3, #16
 8020976:	0e1b      	lsrs	r3, r3, #24
 8020978:	f003 030f 	and.w	r3, r3, #15
 802097c:	4a81      	ldr	r2, [pc, #516]	@ (8020b84 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 802097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020982:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8020984:	e158      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8020986:	2300      	movs	r3, #0
 8020988:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 802098a:	e155      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 802098c:	2300      	movs	r3, #0
 802098e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020990:	e152      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8020992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020996:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 802099a:	430b      	orrs	r3, r1
 802099c:	d177      	bne.n	8020a8e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 802099e:	4b77      	ldr	r3, [pc, #476]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80209a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80209a4:	f003 0318 	and.w	r3, r3, #24
 80209a8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80209aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80209ac:	2b18      	cmp	r3, #24
 80209ae:	d86b      	bhi.n	8020a88 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80209b0:	a201      	add	r2, pc, #4	@ (adr r2, 80209b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80209b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80209b6:	bf00      	nop
 80209b8:	08020a1d 	.word	0x08020a1d
 80209bc:	08020a89 	.word	0x08020a89
 80209c0:	08020a89 	.word	0x08020a89
 80209c4:	08020a89 	.word	0x08020a89
 80209c8:	08020a89 	.word	0x08020a89
 80209cc:	08020a89 	.word	0x08020a89
 80209d0:	08020a89 	.word	0x08020a89
 80209d4:	08020a89 	.word	0x08020a89
 80209d8:	08020a25 	.word	0x08020a25
 80209dc:	08020a89 	.word	0x08020a89
 80209e0:	08020a89 	.word	0x08020a89
 80209e4:	08020a89 	.word	0x08020a89
 80209e8:	08020a89 	.word	0x08020a89
 80209ec:	08020a89 	.word	0x08020a89
 80209f0:	08020a89 	.word	0x08020a89
 80209f4:	08020a89 	.word	0x08020a89
 80209f8:	08020a2d 	.word	0x08020a2d
 80209fc:	08020a89 	.word	0x08020a89
 8020a00:	08020a89 	.word	0x08020a89
 8020a04:	08020a89 	.word	0x08020a89
 8020a08:	08020a89 	.word	0x08020a89
 8020a0c:	08020a89 	.word	0x08020a89
 8020a10:	08020a89 	.word	0x08020a89
 8020a14:	08020a89 	.word	0x08020a89
 8020a18:	08020a47 	.word	0x08020a47
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8020a1c:	f7fd fd18 	bl	801e450 <HAL_RCC_GetPCLK3Freq>
 8020a20:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020a22:	e109      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8020a24:	f7fd fbd0 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 8020a28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020a2a:	e105      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8020a2c:	4b53      	ldr	r3, [pc, #332]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020a2e:	681b      	ldr	r3, [r3, #0]
 8020a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020a38:	d102      	bne.n	8020a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8020a3a:	4b51      	ldr	r3, [pc, #324]	@ (8020b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8020a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8020a3e:	e0fb      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8020a40:	2300      	movs	r3, #0
 8020a42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020a44:	e0f8      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020a46:	4b4d      	ldr	r3, [pc, #308]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020a48:	681b      	ldr	r3, [r3, #0]
 8020a4a:	f003 0320 	and.w	r3, r3, #32
 8020a4e:	2b20      	cmp	r3, #32
 8020a50:	d117      	bne.n	8020a82 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8020a52:	4b4a      	ldr	r3, [pc, #296]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020a54:	689b      	ldr	r3, [r3, #8]
 8020a56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	d005      	beq.n	8020a6a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8020a5e:	4b47      	ldr	r3, [pc, #284]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020a60:	689b      	ldr	r3, [r3, #8]
 8020a62:	0e1b      	lsrs	r3, r3, #24
 8020a64:	f003 030f 	and.w	r3, r3, #15
 8020a68:	e006      	b.n	8020a78 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8020a6a:	4b44      	ldr	r3, [pc, #272]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020a70:	041b      	lsls	r3, r3, #16
 8020a72:	0e1b      	lsrs	r3, r3, #24
 8020a74:	f003 030f 	and.w	r3, r3, #15
 8020a78:	4a42      	ldr	r2, [pc, #264]	@ (8020b84 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8020a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020a7e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8020a80:	e0da      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8020a82:	2300      	movs	r3, #0
 8020a84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020a86:	e0d7      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8020a88:	2300      	movs	r3, #0
 8020a8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020a8c:	e0d4      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8020a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020a92:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8020a96:	430b      	orrs	r3, r1
 8020a98:	d155      	bne.n	8020b46 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8020a9a:	4b38      	ldr	r3, [pc, #224]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020a9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8020aa0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8020aa4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8020aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020aa8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8020aac:	d013      	beq.n	8020ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8020aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ab0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8020ab4:	d844      	bhi.n	8020b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8020ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ab8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020abc:	d013      	beq.n	8020ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8020abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ac0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8020ac4:	d83c      	bhi.n	8020b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8020ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	d014      	beq.n	8020af6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8020acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020ad2:	d014      	beq.n	8020afe <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8020ad4:	e034      	b.n	8020b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8020ad6:	f107 0318 	add.w	r3, r7, #24
 8020ada:	4618      	mov	r0, r3
 8020adc:	f7fe fc50 	bl	801f380 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8020ae0:	69fb      	ldr	r3, [r7, #28]
 8020ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020ae4:	e0a8      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8020ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020aea:	4618      	mov	r0, r3
 8020aec:	f7fe faee 	bl	801f0cc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8020af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020af2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020af4:	e0a0      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8020af6:	f7fd fb67 	bl	801e1c8 <HAL_RCC_GetSysClockFreq>
 8020afa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8020afc:	e09c      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8020afe:	4b1f      	ldr	r3, [pc, #124]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020b00:	681b      	ldr	r3, [r3, #0]
 8020b02:	f003 0320 	and.w	r3, r3, #32
 8020b06:	2b20      	cmp	r3, #32
 8020b08:	d117      	bne.n	8020b3a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8020b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020b0c:	689b      	ldr	r3, [r3, #8]
 8020b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	d005      	beq.n	8020b22 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8020b16:	4b19      	ldr	r3, [pc, #100]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020b18:	689b      	ldr	r3, [r3, #8]
 8020b1a:	0e1b      	lsrs	r3, r3, #24
 8020b1c:	f003 030f 	and.w	r3, r3, #15
 8020b20:	e006      	b.n	8020b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8020b22:	4b16      	ldr	r3, [pc, #88]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8020b28:	041b      	lsls	r3, r3, #16
 8020b2a:	0e1b      	lsrs	r3, r3, #24
 8020b2c:	f003 030f 	and.w	r3, r3, #15
 8020b30:	4a14      	ldr	r2, [pc, #80]	@ (8020b84 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8020b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020b36:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8020b38:	e07e      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8020b3a:	2300      	movs	r3, #0
 8020b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020b3e:	e07b      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8020b40:	2300      	movs	r3, #0
 8020b42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8020b44:	e078      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8020b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020b4a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8020b4e:	430b      	orrs	r3, r1
 8020b50:	d138      	bne.n	8020bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8020b52:	4b0a      	ldr	r3, [pc, #40]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8020b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8020b5e:	4b07      	ldr	r3, [pc, #28]	@ (8020b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8020b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020b64:	f003 0302 	and.w	r3, r3, #2
 8020b68:	2b02      	cmp	r3, #2
 8020b6a:	d10d      	bne.n	8020b88 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8020b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d10a      	bne.n	8020b88 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8020b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8020b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8020b78:	e05e      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8020b7a:	bf00      	nop
 8020b7c:	46020c00 	.word	0x46020c00
 8020b80:	00f42400 	.word	0x00f42400
 8020b84:	080301b8 	.word	0x080301b8
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8020b88:	4b2e      	ldr	r3, [pc, #184]	@ (8020c44 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8020b8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020b8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020b92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8020b96:	d112      	bne.n	8020bbe <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8020b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020b9e:	d10e      	bne.n	8020bbe <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8020ba0:	4b28      	ldr	r3, [pc, #160]	@ (8020c44 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8020ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8020ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8020baa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8020bae:	d102      	bne.n	8020bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8020bb0:	23fa      	movs	r3, #250	@ 0xfa
 8020bb2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8020bb4:	e040      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8020bb6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8020bba:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8020bbc:	e03c      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8020bbe:	2300      	movs	r3, #0
 8020bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8020bc2:	e039      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8020bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020bc8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8020bcc:	430b      	orrs	r3, r1
 8020bce:	d131      	bne.n	8020c34 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8020bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8020c44 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8020bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8020bd6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8020bda:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8020bdc:	4b19      	ldr	r3, [pc, #100]	@ (8020c44 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020be8:	d105      	bne.n	8020bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8020bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020bec:	2b00      	cmp	r3, #0
 8020bee:	d102      	bne.n	8020bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8020bf0:	4b15      	ldr	r3, [pc, #84]	@ (8020c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8020bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8020bf4:	e020      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8020bf6:	4b13      	ldr	r3, [pc, #76]	@ (8020c44 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8020bf8:	681b      	ldr	r3, [r3, #0]
 8020bfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020c02:	d106      	bne.n	8020c12 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8020c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020c0a:	d102      	bne.n	8020c12 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8020c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8020c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8020c0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8020c10:	e012      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8020c12:	4b0c      	ldr	r3, [pc, #48]	@ (8020c44 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8020c14:	681b      	ldr	r3, [r3, #0]
 8020c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8020c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8020c1e:	d106      	bne.n	8020c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8020c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020c26:	d102      	bne.n	8020c2e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8020c28:	4b09      	ldr	r3, [pc, #36]	@ (8020c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8020c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8020c2c:	e004      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8020c2e:	2300      	movs	r3, #0
 8020c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8020c32:	e001      	b.n	8020c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8020c34:	2300      	movs	r3, #0
 8020c36:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8020c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	3738      	adds	r7, #56	@ 0x38
 8020c3e:	46bd      	mov	sp, r7
 8020c40:	bd80      	pop	{r7, pc}
 8020c42:	bf00      	nop
 8020c44:	46020c00 	.word	0x46020c00
 8020c48:	02dc6c00 	.word	0x02dc6c00
 8020c4c:	016e3600 	.word	0x016e3600
 8020c50:	00f42400 	.word	0x00f42400

08020c54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8020c54:	b580      	push	{r7, lr}
 8020c56:	b084      	sub	sp, #16
 8020c58:	af00      	add	r7, sp, #0
 8020c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8020c5c:	4b47      	ldr	r3, [pc, #284]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	4a46      	ldr	r2, [pc, #280]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020c62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8020c66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8020c68:	f7f5 fc00 	bl	801646c <HAL_GetTick>
 8020c6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8020c6e:	e008      	b.n	8020c82 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8020c70:	f7f5 fbfc 	bl	801646c <HAL_GetTick>
 8020c74:	4602      	mov	r2, r0
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	1ad3      	subs	r3, r2, r3
 8020c7a:	2b02      	cmp	r3, #2
 8020c7c:	d901      	bls.n	8020c82 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8020c7e:	2303      	movs	r3, #3
 8020c80:	e077      	b.n	8020d72 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8020c82:	4b3e      	ldr	r3, [pc, #248]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020c84:	681b      	ldr	r3, [r3, #0]
 8020c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d1f0      	bne.n	8020c70 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8020c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8020c96:	f023 0303 	bic.w	r3, r3, #3
 8020c9a:	687a      	ldr	r2, [r7, #4]
 8020c9c:	6811      	ldr	r1, [r2, #0]
 8020c9e:	687a      	ldr	r2, [r7, #4]
 8020ca0:	6852      	ldr	r2, [r2, #4]
 8020ca2:	3a01      	subs	r2, #1
 8020ca4:	0212      	lsls	r2, r2, #8
 8020ca6:	430a      	orrs	r2, r1
 8020ca8:	4934      	ldr	r1, [pc, #208]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020caa:	4313      	orrs	r3, r2
 8020cac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8020cae:	4b33      	ldr	r3, [pc, #204]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8020cb2:	4b33      	ldr	r3, [pc, #204]	@ (8020d80 <RCCEx_PLL2_Config+0x12c>)
 8020cb4:	4013      	ands	r3, r2
 8020cb6:	687a      	ldr	r2, [r7, #4]
 8020cb8:	6892      	ldr	r2, [r2, #8]
 8020cba:	3a01      	subs	r2, #1
 8020cbc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8020cc0:	687a      	ldr	r2, [r7, #4]
 8020cc2:	68d2      	ldr	r2, [r2, #12]
 8020cc4:	3a01      	subs	r2, #1
 8020cc6:	0252      	lsls	r2, r2, #9
 8020cc8:	b292      	uxth	r2, r2
 8020cca:	4311      	orrs	r1, r2
 8020ccc:	687a      	ldr	r2, [r7, #4]
 8020cce:	6912      	ldr	r2, [r2, #16]
 8020cd0:	3a01      	subs	r2, #1
 8020cd2:	0412      	lsls	r2, r2, #16
 8020cd4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8020cd8:	4311      	orrs	r1, r2
 8020cda:	687a      	ldr	r2, [r7, #4]
 8020cdc:	6952      	ldr	r2, [r2, #20]
 8020cde:	3a01      	subs	r2, #1
 8020ce0:	0612      	lsls	r2, r2, #24
 8020ce2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8020ce6:	430a      	orrs	r2, r1
 8020ce8:	4924      	ldr	r1, [pc, #144]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020cea:	4313      	orrs	r3, r2
 8020cec:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8020cee:	4b23      	ldr	r3, [pc, #140]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020cf2:	f023 020c 	bic.w	r2, r3, #12
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	699b      	ldr	r3, [r3, #24]
 8020cfa:	4920      	ldr	r1, [pc, #128]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020cfc:	4313      	orrs	r3, r2
 8020cfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8020d00:	4b1e      	ldr	r3, [pc, #120]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	6a1b      	ldr	r3, [r3, #32]
 8020d08:	491c      	ldr	r1, [pc, #112]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d0a:	4313      	orrs	r3, r2
 8020d0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8020d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d12:	4a1a      	ldr	r2, [pc, #104]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d14:	f023 0310 	bic.w	r3, r3, #16
 8020d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8020d1a:	4b18      	ldr	r3, [pc, #96]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020d22:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8020d26:	687a      	ldr	r2, [r7, #4]
 8020d28:	69d2      	ldr	r2, [r2, #28]
 8020d2a:	00d2      	lsls	r2, r2, #3
 8020d2c:	4913      	ldr	r1, [pc, #76]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d2e:	4313      	orrs	r3, r2
 8020d30:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8020d32:	4b12      	ldr	r3, [pc, #72]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020d36:	4a11      	ldr	r2, [pc, #68]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d38:	f043 0310 	orr.w	r3, r3, #16
 8020d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8020d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d40:	681b      	ldr	r3, [r3, #0]
 8020d42:	4a0e      	ldr	r2, [pc, #56]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8020d48:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8020d4a:	f7f5 fb8f 	bl	801646c <HAL_GetTick>
 8020d4e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8020d50:	e008      	b.n	8020d64 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8020d52:	f7f5 fb8b 	bl	801646c <HAL_GetTick>
 8020d56:	4602      	mov	r2, r0
 8020d58:	68fb      	ldr	r3, [r7, #12]
 8020d5a:	1ad3      	subs	r3, r2, r3
 8020d5c:	2b02      	cmp	r3, #2
 8020d5e:	d901      	bls.n	8020d64 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8020d60:	2303      	movs	r3, #3
 8020d62:	e006      	b.n	8020d72 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8020d64:	4b05      	ldr	r3, [pc, #20]	@ (8020d7c <RCCEx_PLL2_Config+0x128>)
 8020d66:	681b      	ldr	r3, [r3, #0]
 8020d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8020d6c:	2b00      	cmp	r3, #0
 8020d6e:	d0f0      	beq.n	8020d52 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8020d70:	2300      	movs	r3, #0

}
 8020d72:	4618      	mov	r0, r3
 8020d74:	3710      	adds	r7, #16
 8020d76:	46bd      	mov	sp, r7
 8020d78:	bd80      	pop	{r7, pc}
 8020d7a:	bf00      	nop
 8020d7c:	46020c00 	.word	0x46020c00
 8020d80:	80800000 	.word	0x80800000

08020d84 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8020d84:	b580      	push	{r7, lr}
 8020d86:	b084      	sub	sp, #16
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8020d8c:	4b47      	ldr	r3, [pc, #284]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	4a46      	ldr	r2, [pc, #280]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8020d96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8020d98:	f7f5 fb68 	bl	801646c <HAL_GetTick>
 8020d9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8020d9e:	e008      	b.n	8020db2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8020da0:	f7f5 fb64 	bl	801646c <HAL_GetTick>
 8020da4:	4602      	mov	r2, r0
 8020da6:	68fb      	ldr	r3, [r7, #12]
 8020da8:	1ad3      	subs	r3, r2, r3
 8020daa:	2b02      	cmp	r3, #2
 8020dac:	d901      	bls.n	8020db2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8020dae:	2303      	movs	r3, #3
 8020db0:	e077      	b.n	8020ea2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8020db2:	4b3e      	ldr	r3, [pc, #248]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020db4:	681b      	ldr	r3, [r3, #0]
 8020db6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	d1f0      	bne.n	8020da0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8020dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020dc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8020dc6:	f023 0303 	bic.w	r3, r3, #3
 8020dca:	687a      	ldr	r2, [r7, #4]
 8020dcc:	6811      	ldr	r1, [r2, #0]
 8020dce:	687a      	ldr	r2, [r7, #4]
 8020dd0:	6852      	ldr	r2, [r2, #4]
 8020dd2:	3a01      	subs	r2, #1
 8020dd4:	0212      	lsls	r2, r2, #8
 8020dd6:	430a      	orrs	r2, r1
 8020dd8:	4934      	ldr	r1, [pc, #208]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020dda:	4313      	orrs	r3, r2
 8020ddc:	630b      	str	r3, [r1, #48]	@ 0x30
 8020dde:	4b33      	ldr	r3, [pc, #204]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8020de2:	4b33      	ldr	r3, [pc, #204]	@ (8020eb0 <RCCEx_PLL3_Config+0x12c>)
 8020de4:	4013      	ands	r3, r2
 8020de6:	687a      	ldr	r2, [r7, #4]
 8020de8:	6892      	ldr	r2, [r2, #8]
 8020dea:	3a01      	subs	r2, #1
 8020dec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8020df0:	687a      	ldr	r2, [r7, #4]
 8020df2:	68d2      	ldr	r2, [r2, #12]
 8020df4:	3a01      	subs	r2, #1
 8020df6:	0252      	lsls	r2, r2, #9
 8020df8:	b292      	uxth	r2, r2
 8020dfa:	4311      	orrs	r1, r2
 8020dfc:	687a      	ldr	r2, [r7, #4]
 8020dfe:	6912      	ldr	r2, [r2, #16]
 8020e00:	3a01      	subs	r2, #1
 8020e02:	0412      	lsls	r2, r2, #16
 8020e04:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8020e08:	4311      	orrs	r1, r2
 8020e0a:	687a      	ldr	r2, [r7, #4]
 8020e0c:	6952      	ldr	r2, [r2, #20]
 8020e0e:	3a01      	subs	r2, #1
 8020e10:	0612      	lsls	r2, r2, #24
 8020e12:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8020e16:	430a      	orrs	r2, r1
 8020e18:	4924      	ldr	r1, [pc, #144]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e1a:	4313      	orrs	r3, r2
 8020e1c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8020e1e:	4b23      	ldr	r3, [pc, #140]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020e22:	f023 020c 	bic.w	r2, r3, #12
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	699b      	ldr	r3, [r3, #24]
 8020e2a:	4920      	ldr	r1, [pc, #128]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e2c:	4313      	orrs	r3, r2
 8020e2e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8020e30:	4b1e      	ldr	r3, [pc, #120]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020e34:	687b      	ldr	r3, [r7, #4]
 8020e36:	6a1b      	ldr	r3, [r3, #32]
 8020e38:	491c      	ldr	r1, [pc, #112]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e3a:	4313      	orrs	r3, r2
 8020e3c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8020e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020e42:	4a1a      	ldr	r2, [pc, #104]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e44:	f023 0310 	bic.w	r3, r3, #16
 8020e48:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8020e4a:	4b18      	ldr	r3, [pc, #96]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020e52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8020e56:	687a      	ldr	r2, [r7, #4]
 8020e58:	69d2      	ldr	r2, [r2, #28]
 8020e5a:	00d2      	lsls	r2, r2, #3
 8020e5c:	4913      	ldr	r1, [pc, #76]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e5e:	4313      	orrs	r3, r2
 8020e60:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8020e62:	4b12      	ldr	r3, [pc, #72]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020e66:	4a11      	ldr	r2, [pc, #68]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e68:	f043 0310 	orr.w	r3, r3, #16
 8020e6c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8020e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	4a0e      	ldr	r2, [pc, #56]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8020e78:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8020e7a:	f7f5 faf7 	bl	801646c <HAL_GetTick>
 8020e7e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8020e80:	e008      	b.n	8020e94 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8020e82:	f7f5 faf3 	bl	801646c <HAL_GetTick>
 8020e86:	4602      	mov	r2, r0
 8020e88:	68fb      	ldr	r3, [r7, #12]
 8020e8a:	1ad3      	subs	r3, r2, r3
 8020e8c:	2b02      	cmp	r3, #2
 8020e8e:	d901      	bls.n	8020e94 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8020e90:	2303      	movs	r3, #3
 8020e92:	e006      	b.n	8020ea2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8020e94:	4b05      	ldr	r3, [pc, #20]	@ (8020eac <RCCEx_PLL3_Config+0x128>)
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d0f0      	beq.n	8020e82 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8020ea0:	2300      	movs	r3, #0
}
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	3710      	adds	r7, #16
 8020ea6:	46bd      	mov	sp, r7
 8020ea8:	bd80      	pop	{r7, pc}
 8020eaa:	bf00      	nop
 8020eac:	46020c00 	.word	0x46020c00
 8020eb0:	80800000 	.word	0x80800000

08020eb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8020eb4:	b580      	push	{r7, lr}
 8020eb6:	b084      	sub	sp, #16
 8020eb8:	af00      	add	r7, sp, #0
 8020eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8020ebc:	2301      	movs	r3, #1
 8020ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	f000 80d2 	beq.w	802106c <HAL_RTC_Init+0x1b8>
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));
    assert_param(IS_RTC_BINARY_MODE(hrtc->Init.BinMode));
    assert_param(IS_RTC_BINARY_MIX_BCDU(hrtc->Init.BinMixBcdU));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8020ece:	b2db      	uxtb	r3, r3
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d166      	bne.n	8020fa2 <HAL_RTC_Init+0xee>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	2200      	movs	r2, #0
 8020ed8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
      /* Legacy weak AlarmAEventCallback      */
      hrtc->AlarmAEventCallback          = HAL_RTC_AlarmAEventCallback;
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	4a66      	ldr	r2, [pc, #408]	@ (8021078 <HAL_RTC_Init+0x1c4>)
 8020ee0:	631a      	str	r2, [r3, #48]	@ 0x30
      /* Legacy weak AlarmBEventCallback      */
      hrtc->AlarmBEventCallback          = HAL_RTCEx_AlarmBEventCallback;
 8020ee2:	687b      	ldr	r3, [r7, #4]
 8020ee4:	4a65      	ldr	r2, [pc, #404]	@ (802107c <HAL_RTC_Init+0x1c8>)
 8020ee6:	635a      	str	r2, [r3, #52]	@ 0x34
      /* Legacy weak TimeStampEventCallback   */
      hrtc->TimeStampEventCallback       = HAL_RTCEx_TimeStampEventCallback;
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	4a65      	ldr	r2, [pc, #404]	@ (8021080 <HAL_RTC_Init+0x1cc>)
 8020eec:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Legacy weak WakeUpTimerEventCallback */
      hrtc->WakeUpTimerEventCallback     = HAL_RTCEx_WakeUpTimerEventCallback;
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	4a64      	ldr	r2, [pc, #400]	@ (8021084 <HAL_RTC_Init+0x1d0>)
 8020ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
      /* Legacy weak SSRUEventCallback */
      hrtc->SSRUEventCallback            = HAL_RTCEx_SSRUEventCallback;
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	4a64      	ldr	r2, [pc, #400]	@ (8021088 <HAL_RTC_Init+0x1d4>)
 8020ef8:	641a      	str	r2, [r3, #64]	@ 0x40
      /* Legacy weak Tamper1EventCallback     */
      hrtc->Tamper1EventCallback         = HAL_RTCEx_Tamper1EventCallback;
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	4a63      	ldr	r2, [pc, #396]	@ (802108c <HAL_RTC_Init+0x1d8>)
 8020efe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Legacy weak Tamper2EventCallback     */
      hrtc->Tamper2EventCallback         = HAL_RTCEx_Tamper2EventCallback;
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	4a63      	ldr	r2, [pc, #396]	@ (8021090 <HAL_RTC_Init+0x1dc>)
 8020f04:	649a      	str	r2, [r3, #72]	@ 0x48
      /* Legacy weak Tamper3EventCallback     */
      hrtc->Tamper3EventCallback         = HAL_RTCEx_Tamper3EventCallback;
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	4a62      	ldr	r2, [pc, #392]	@ (8021094 <HAL_RTC_Init+0x1e0>)
 8020f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Legacy weak Tamper4EventCallback     */
      hrtc->Tamper4EventCallback         = HAL_RTCEx_Tamper4EventCallback;
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	4a62      	ldr	r2, [pc, #392]	@ (8021098 <HAL_RTC_Init+0x1e4>)
 8020f10:	651a      	str	r2, [r3, #80]	@ 0x50
      /* Legacy weak Tamper5EventCallback     */
      hrtc->Tamper5EventCallback         = HAL_RTCEx_Tamper5EventCallback;
 8020f12:	687b      	ldr	r3, [r7, #4]
 8020f14:	4a61      	ldr	r2, [pc, #388]	@ (802109c <HAL_RTC_Init+0x1e8>)
 8020f16:	655a      	str	r2, [r3, #84]	@ 0x54
      /* Legacy weak Tamper6EventCallback     */
      hrtc->Tamper6EventCallback         = HAL_RTCEx_Tamper6EventCallback;
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	4a61      	ldr	r2, [pc, #388]	@ (80210a0 <HAL_RTC_Init+0x1ec>)
 8020f1c:	659a      	str	r2, [r3, #88]	@ 0x58
      /* Legacy weak Tamper7EventCallback     */
      hrtc->Tamper7EventCallback         = HAL_RTCEx_Tamper7EventCallback;
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	4a60      	ldr	r2, [pc, #384]	@ (80210a4 <HAL_RTC_Init+0x1f0>)
 8020f22:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Legacy weak Tamper8EventCallback     */
      hrtc->Tamper8EventCallback         = HAL_RTCEx_Tamper8EventCallback;
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	4a60      	ldr	r2, [pc, #384]	@ (80210a8 <HAL_RTC_Init+0x1f4>)
 8020f28:	661a      	str	r2, [r3, #96]	@ 0x60
      /* Legacy weak InternalTamper1EventCallback */
      hrtc->InternalTamper1EventCallback = HAL_RTCEx_InternalTamper1EventCallback;
 8020f2a:	687b      	ldr	r3, [r7, #4]
 8020f2c:	4a5f      	ldr	r2, [pc, #380]	@ (80210ac <HAL_RTC_Init+0x1f8>)
 8020f2e:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Legacy weak InternalTamper2EventCallback */
      hrtc->InternalTamper2EventCallback = HAL_RTCEx_InternalTamper2EventCallback;
 8020f30:	687b      	ldr	r3, [r7, #4]
 8020f32:	4a5f      	ldr	r2, [pc, #380]	@ (80210b0 <HAL_RTC_Init+0x1fc>)
 8020f34:	669a      	str	r2, [r3, #104]	@ 0x68
      /* Legacy weak InternalTamper3EventCallback */
      hrtc->InternalTamper3EventCallback = HAL_RTCEx_InternalTamper3EventCallback;
 8020f36:	687b      	ldr	r3, [r7, #4]
 8020f38:	4a5e      	ldr	r2, [pc, #376]	@ (80210b4 <HAL_RTC_Init+0x200>)
 8020f3a:	66da      	str	r2, [r3, #108]	@ 0x6c
      /* Legacy weak InternalTamper5EventCallback */
      hrtc->InternalTamper5EventCallback = HAL_RTCEx_InternalTamper5EventCallback;
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80210b8 <HAL_RTC_Init+0x204>)
 8020f40:	671a      	str	r2, [r3, #112]	@ 0x70
      /* Legacy weak InternalTamper6EventCallback */
      hrtc->InternalTamper6EventCallback = HAL_RTCEx_InternalTamper6EventCallback;
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	4a5d      	ldr	r2, [pc, #372]	@ (80210bc <HAL_RTC_Init+0x208>)
 8020f46:	675a      	str	r2, [r3, #116]	@ 0x74
      /* Legacy weak InternalTamper7EventCallback */
      hrtc->InternalTamper7EventCallback = HAL_RTCEx_InternalTamper7EventCallback;
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	4a5d      	ldr	r2, [pc, #372]	@ (80210c0 <HAL_RTC_Init+0x20c>)
 8020f4c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Legacy weak InternalTamper8EventCallback */
      hrtc->InternalTamper8EventCallback = HAL_RTCEx_InternalTamper8EventCallback;
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	4a5c      	ldr	r2, [pc, #368]	@ (80210c4 <HAL_RTC_Init+0x210>)
 8020f52:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Legacy weak InternalTamper9EventCallback */
      hrtc->InternalTamper9EventCallback = HAL_RTCEx_InternalTamper9EventCallback;
 8020f54:	687b      	ldr	r3, [r7, #4]
 8020f56:	4a5c      	ldr	r2, [pc, #368]	@ (80210c8 <HAL_RTC_Init+0x214>)
 8020f58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* Legacy weak InternalTamper11EventCallback */
      hrtc->InternalTamper11EventCallback = HAL_RTCEx_InternalTamper11EventCallback;
 8020f5c:	687b      	ldr	r3, [r7, #4]
 8020f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80210cc <HAL_RTC_Init+0x218>)
 8020f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Legacy weak InternalTamper12EventCallback */
      hrtc->InternalTamper12EventCallback = HAL_RTCEx_InternalTamper12EventCallback;
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	4a5a      	ldr	r2, [pc, #360]	@ (80210d0 <HAL_RTC_Init+0x21c>)
 8020f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Legacy weak InternalTamper13EventCallback */
      hrtc->InternalTamper13EventCallback = HAL_RTCEx_InternalTamper13EventCallback;
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	4a59      	ldr	r2, [pc, #356]	@ (80210d4 <HAL_RTC_Init+0x220>)
 8020f70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      if (hrtc->MspInitCallback == NULL)
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	d103      	bne.n	8020f86 <HAL_RTC_Init+0xd2>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8020f7e:	687b      	ldr	r3, [r7, #4]
 8020f80:	4a55      	ldr	r2, [pc, #340]	@ (80210d8 <HAL_RTC_Init+0x224>)
 8020f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 8020f86:	687b      	ldr	r3, [r7, #4]
 8020f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8020f8c:	6878      	ldr	r0, [r7, #4]
 8020f8e:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020f96:	2b00      	cmp	r3, #0
 8020f98:	d103      	bne.n	8020fa2 <HAL_RTC_Init+0xee>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80210dc <HAL_RTC_Init+0x228>)
 8020f9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8020fa2:	687b      	ldr	r3, [r7, #4]
 8020fa4:	2202      	movs	r2, #2
 8020fa6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8020faa:	4b4d      	ldr	r3, [pc, #308]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020fac:	68db      	ldr	r3, [r3, #12]
 8020fae:	f003 0310 	and.w	r3, r3, #16
 8020fb2:	2b10      	cmp	r3, #16
 8020fb4:	d051      	beq.n	802105a <HAL_RTC_Init+0x1a6>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8020fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020fb8:	22ca      	movs	r2, #202	@ 0xca
 8020fba:	625a      	str	r2, [r3, #36]	@ 0x24
 8020fbc:	4b48      	ldr	r3, [pc, #288]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020fbe:	2253      	movs	r2, #83	@ 0x53
 8020fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8020fc2:	6878      	ldr	r0, [r7, #4]
 8020fc4:	f000 fca6 	bl	8021914 <RTC_EnterInitMode>
 8020fc8:	4603      	mov	r3, r0
 8020fca:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8020fcc:	7bfb      	ldrb	r3, [r7, #15]
 8020fce:	2b00      	cmp	r3, #0
 8020fd0:	d13f      	bne.n	8021052 <HAL_RTC_Init+0x19e>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8020fd2:	4b43      	ldr	r3, [pc, #268]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020fd4:	699b      	ldr	r3, [r3, #24]
 8020fd6:	4a42      	ldr	r2, [pc, #264]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020fd8:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8020fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020fe0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8020fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020fe4:	699a      	ldr	r2, [r3, #24]
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	6859      	ldr	r1, [r3, #4]
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	691b      	ldr	r3, [r3, #16]
 8020fee:	4319      	orrs	r1, r3
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	699b      	ldr	r3, [r3, #24]
 8020ff4:	430b      	orrs	r3, r1
 8020ff6:	493a      	ldr	r1, [pc, #232]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8020ff8:	4313      	orrs	r3, r2
 8020ffa:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	68da      	ldr	r2, [r3, #12]
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	689b      	ldr	r3, [r3, #8]
 8021004:	041b      	lsls	r3, r3, #16
 8021006:	4936      	ldr	r1, [pc, #216]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8021008:	4313      	orrs	r3, r2
 802100a:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 802100c:	4b34      	ldr	r3, [pc, #208]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 802100e:	68db      	ldr	r3, [r3, #12]
 8021010:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802101c:	430b      	orrs	r3, r1
 802101e:	4930      	ldr	r1, [pc, #192]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8021020:	4313      	orrs	r3, r2
 8021022:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8021024:	6878      	ldr	r0, [r7, #4]
 8021026:	f000 fcb1 	bl	802198c <RTC_ExitInitMode>
 802102a:	4603      	mov	r3, r0
 802102c:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 802102e:	7bfb      	ldrb	r3, [r7, #15]
 8021030:	2b00      	cmp	r3, #0
 8021032:	d10e      	bne.n	8021052 <HAL_RTC_Init+0x19e>
        {
          MODIFY_REG(RTC->CR, \
 8021034:	4b2a      	ldr	r3, [pc, #168]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8021036:	699b      	ldr	r3, [r3, #24]
 8021038:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	6a19      	ldr	r1, [r3, #32]
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	69db      	ldr	r3, [r3, #28]
 8021044:	4319      	orrs	r1, r3
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	695b      	ldr	r3, [r3, #20]
 802104a:	430b      	orrs	r3, r1
 802104c:	4924      	ldr	r1, [pc, #144]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 802104e:	4313      	orrs	r3, r2
 8021050:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8021052:	4b23      	ldr	r3, [pc, #140]	@ (80210e0 <HAL_RTC_Init+0x22c>)
 8021054:	22ff      	movs	r2, #255	@ 0xff
 8021056:	625a      	str	r2, [r3, #36]	@ 0x24
 8021058:	e001      	b.n	802105e <HAL_RTC_Init+0x1aa>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 802105a:	2300      	movs	r3, #0
 802105c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 802105e:	7bfb      	ldrb	r3, [r7, #15]
 8021060:	2b00      	cmp	r3, #0
 8021062:	d103      	bne.n	802106c <HAL_RTC_Init+0x1b8>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	2201      	movs	r2, #1
 8021068:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 802106c:	7bfb      	ldrb	r3, [r7, #15]
}
 802106e:	4618      	mov	r0, r3
 8021070:	3710      	adds	r7, #16
 8021072:	46bd      	mov	sp, r7
 8021074:	bd80      	pop	{r7, pc}
 8021076:	bf00      	nop
 8021078:	0800ae9d 	.word	0x0800ae9d
 802107c:	08021c59 	.word	0x08021c59
 8021080:	08021a81 	.word	0x08021a81
 8021084:	0800b0e1 	.word	0x0800b0e1
 8021088:	08021c45 	.word	0x08021c45
 802108c:	08021c6d 	.word	0x08021c6d
 8021090:	08021c81 	.word	0x08021c81
 8021094:	08021c95 	.word	0x08021c95
 8021098:	08021ca9 	.word	0x08021ca9
 802109c:	08021cbd 	.word	0x08021cbd
 80210a0:	08021cd1 	.word	0x08021cd1
 80210a4:	08021ce5 	.word	0x08021ce5
 80210a8:	08021cf9 	.word	0x08021cf9
 80210ac:	08021d0d 	.word	0x08021d0d
 80210b0:	08021d21 	.word	0x08021d21
 80210b4:	08021d35 	.word	0x08021d35
 80210b8:	08021d49 	.word	0x08021d49
 80210bc:	08021d5d 	.word	0x08021d5d
 80210c0:	08021d71 	.word	0x08021d71
 80210c4:	08021d85 	.word	0x08021d85
 80210c8:	08021d99 	.word	0x08021d99
 80210cc:	08021dad 	.word	0x08021dad
 80210d0:	08021dc1 	.word	0x08021dc1
 80210d4:	08021dd5 	.word	0x08021dd5
 80210d8:	08015cd5 	.word	0x08015cd5
 80210dc:	08015d75 	.word	0x08015d75
 80210e0:	46007800 	.word	0x46007800

080210e4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80210e4:	b590      	push	{r4, r7, lr}
 80210e6:	b087      	sub	sp, #28
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	60f8      	str	r0, [r7, #12]
 80210ec:	60b9      	str	r1, [r7, #8]
 80210ee:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80210f0:	68fb      	ldr	r3, [r7, #12]
 80210f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80210f6:	2b01      	cmp	r3, #1
 80210f8:	d101      	bne.n	80210fe <HAL_RTC_SetTime+0x1a>
 80210fa:	2302      	movs	r3, #2
 80210fc:	e089      	b.n	8021212 <HAL_RTC_SetTime+0x12e>
 80210fe:	68fb      	ldr	r3, [r7, #12]
 8021100:	2201      	movs	r2, #1
 8021102:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	2202      	movs	r2, #2
 802110a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 802110e:	4b43      	ldr	r3, [pc, #268]	@ (802121c <HAL_RTC_SetTime+0x138>)
 8021110:	22ca      	movs	r2, #202	@ 0xca
 8021112:	625a      	str	r2, [r3, #36]	@ 0x24
 8021114:	4b41      	ldr	r3, [pc, #260]	@ (802121c <HAL_RTC_SetTime+0x138>)
 8021116:	2253      	movs	r2, #83	@ 0x53
 8021118:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 802111a:	68f8      	ldr	r0, [r7, #12]
 802111c:	f000 fbfa 	bl	8021914 <RTC_EnterInitMode>
 8021120:	4603      	mov	r3, r0
 8021122:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8021124:	7cfb      	ldrb	r3, [r7, #19]
 8021126:	2b00      	cmp	r3, #0
 8021128:	d164      	bne.n	80211f4 <HAL_RTC_SetTime+0x110>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 802112a:	4b3c      	ldr	r3, [pc, #240]	@ (802121c <HAL_RTC_SetTime+0x138>)
 802112c:	68db      	ldr	r3, [r3, #12]
 802112e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8021132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021136:	d058      	beq.n	80211ea <HAL_RTC_SetTime+0x106>
    {
      if (Format == RTC_FORMAT_BIN)
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	2b00      	cmp	r3, #0
 802113c:	d126      	bne.n	802118c <HAL_RTC_SetTime+0xa8>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 802113e:	4b37      	ldr	r3, [pc, #220]	@ (802121c <HAL_RTC_SetTime+0x138>)
 8021140:	699b      	ldr	r3, [r3, #24]
 8021142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021146:	2b00      	cmp	r3, #0
 8021148:	d102      	bne.n	8021150 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 802114a:	68bb      	ldr	r3, [r7, #8]
 802114c:	2200      	movs	r2, #0
 802114e:	721a      	strb	r2, [r3, #8]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8021150:	68bb      	ldr	r3, [r7, #8]
 8021152:	781b      	ldrb	r3, [r3, #0]
 8021154:	4618      	mov	r0, r3
 8021156:	f000 fc57 	bl	8021a08 <RTC_ByteToBcd2>
 802115a:	4603      	mov	r3, r0
 802115c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802115e:	68bb      	ldr	r3, [r7, #8]
 8021160:	785b      	ldrb	r3, [r3, #1]
 8021162:	4618      	mov	r0, r3
 8021164:	f000 fc50 	bl	8021a08 <RTC_ByteToBcd2>
 8021168:	4603      	mov	r3, r0
 802116a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 802116c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 802116e:	68bb      	ldr	r3, [r7, #8]
 8021170:	685b      	ldr	r3, [r3, #4]
 8021172:	b2db      	uxtb	r3, r3
 8021174:	4618      	mov	r0, r3
 8021176:	f000 fc47 	bl	8021a08 <RTC_ByteToBcd2>
 802117a:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 802117c:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8021180:	68bb      	ldr	r3, [r7, #8]
 8021182:	7a1b      	ldrb	r3, [r3, #8]
 8021184:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8021186:	4313      	orrs	r3, r2
 8021188:	617b      	str	r3, [r7, #20]
 802118a:	e017      	b.n	80211bc <HAL_RTC_SetTime+0xd8>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 802118c:	4b23      	ldr	r3, [pc, #140]	@ (802121c <HAL_RTC_SetTime+0x138>)
 802118e:	699b      	ldr	r3, [r3, #24]
 8021190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021194:	2b00      	cmp	r3, #0
 8021196:	d102      	bne.n	802119e <HAL_RTC_SetTime+0xba>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8021198:	68bb      	ldr	r3, [r7, #8]
 802119a:	2200      	movs	r2, #0
 802119c:	721a      	strb	r2, [r3, #8]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 802119e:	68bb      	ldr	r3, [r7, #8]
 80211a0:	781b      	ldrb	r3, [r3, #0]
 80211a2:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80211a4:	68bb      	ldr	r3, [r7, #8]
 80211a6:	785b      	ldrb	r3, [r3, #1]
 80211a8:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80211aa:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80211ac:	68bb      	ldr	r3, [r7, #8]
 80211ae:	685b      	ldr	r3, [r3, #4]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80211b0:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80211b2:	68bb      	ldr	r3, [r7, #8]
 80211b4:	7a1b      	ldrb	r3, [r3, #8]
 80211b6:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80211b8:	4313      	orrs	r3, r2
 80211ba:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80211bc:	4a17      	ldr	r2, [pc, #92]	@ (802121c <HAL_RTC_SetTime+0x138>)
 80211be:	697b      	ldr	r3, [r7, #20]
 80211c0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80211c4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80211c8:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80211ca:	4b14      	ldr	r3, [pc, #80]	@ (802121c <HAL_RTC_SetTime+0x138>)
 80211cc:	699b      	ldr	r3, [r3, #24]
 80211ce:	4a13      	ldr	r2, [pc, #76]	@ (802121c <HAL_RTC_SetTime+0x138>)
 80211d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80211d4:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80211d6:	4b11      	ldr	r3, [pc, #68]	@ (802121c <HAL_RTC_SetTime+0x138>)
 80211d8:	699a      	ldr	r2, [r3, #24]
 80211da:	68bb      	ldr	r3, [r7, #8]
 80211dc:	6959      	ldr	r1, [r3, #20]
 80211de:	68bb      	ldr	r3, [r7, #8]
 80211e0:	699b      	ldr	r3, [r3, #24]
 80211e2:	430b      	orrs	r3, r1
 80211e4:	490d      	ldr	r1, [pc, #52]	@ (802121c <HAL_RTC_SetTime+0x138>)
 80211e6:	4313      	orrs	r3, r2
 80211e8:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80211ea:	68f8      	ldr	r0, [r7, #12]
 80211ec:	f000 fbce 	bl	802198c <RTC_ExitInitMode>
 80211f0:	4603      	mov	r3, r0
 80211f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80211f4:	4b09      	ldr	r3, [pc, #36]	@ (802121c <HAL_RTC_SetTime+0x138>)
 80211f6:	22ff      	movs	r2, #255	@ 0xff
 80211f8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80211fa:	7cfb      	ldrb	r3, [r7, #19]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d103      	bne.n	8021208 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	2201      	movs	r2, #1
 8021204:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8021208:	68fb      	ldr	r3, [r7, #12]
 802120a:	2200      	movs	r2, #0
 802120c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8021210:	7cfb      	ldrb	r3, [r7, #19]
}
 8021212:	4618      	mov	r0, r3
 8021214:	371c      	adds	r7, #28
 8021216:	46bd      	mov	sp, r7
 8021218:	bd90      	pop	{r4, r7, pc}
 802121a:	bf00      	nop
 802121c:	46007800 	.word	0x46007800

08021220 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8021220:	b580      	push	{r7, lr}
 8021222:	b086      	sub	sp, #24
 8021224:	af00      	add	r7, sp, #0
 8021226:	60f8      	str	r0, [r7, #12]
 8021228:	60b9      	str	r1, [r7, #8]
 802122a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 802122c:	4b34      	ldr	r3, [pc, #208]	@ (8021300 <HAL_RTC_GetTime+0xe0>)
 802122e:	689a      	ldr	r2, [r3, #8]
 8021230:	68bb      	ldr	r3, [r7, #8]
 8021232:	60da      	str	r2, [r3, #12]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8021234:	4b32      	ldr	r3, [pc, #200]	@ (8021300 <HAL_RTC_GetTime+0xe0>)
 8021236:	68db      	ldr	r3, [r3, #12]
 8021238:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 802123c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021240:	d04a      	beq.n	80212d8 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8021242:	4b2f      	ldr	r3, [pc, #188]	@ (8021300 <HAL_RTC_GetTime+0xe0>)
 8021244:	691b      	ldr	r3, [r3, #16]
 8021246:	f3c3 020e 	ubfx	r2, r3, #0, #15
 802124a:	68bb      	ldr	r3, [r7, #8]
 802124c:	611a      	str	r2, [r3, #16]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 802124e:	4b2c      	ldr	r3, [pc, #176]	@ (8021300 <HAL_RTC_GetTime+0xe0>)
 8021250:	681b      	ldr	r3, [r3, #0]
 8021252:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8021256:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 802125a:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 802125c:	697b      	ldr	r3, [r7, #20]
 802125e:	0c1b      	lsrs	r3, r3, #16
 8021260:	b2db      	uxtb	r3, r3
 8021262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021266:	b2da      	uxtb	r2, r3
 8021268:	68bb      	ldr	r3, [r7, #8]
 802126a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 802126c:	697b      	ldr	r3, [r7, #20]
 802126e:	0a1b      	lsrs	r3, r3, #8
 8021270:	b2db      	uxtb	r3, r3
 8021272:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021276:	b2da      	uxtb	r2, r3
 8021278:	68bb      	ldr	r3, [r7, #8]
 802127a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 802127c:	697b      	ldr	r3, [r7, #20]
 802127e:	b2db      	uxtb	r3, r3
 8021280:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8021284:	68bb      	ldr	r3, [r7, #8]
 8021286:	605a      	str	r2, [r3, #4]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8021288:	697b      	ldr	r3, [r7, #20]
 802128a:	0d9b      	lsrs	r3, r3, #22
 802128c:	b2db      	uxtb	r3, r3
 802128e:	f003 0301 	and.w	r3, r3, #1
 8021292:	b2da      	uxtb	r2, r3
 8021294:	68bb      	ldr	r3, [r7, #8]
 8021296:	721a      	strb	r2, [r3, #8]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	2b00      	cmp	r3, #0
 802129c:	d12b      	bne.n	80212f6 <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 802129e:	68bb      	ldr	r3, [r7, #8]
 80212a0:	781b      	ldrb	r3, [r3, #0]
 80212a2:	4618      	mov	r0, r3
 80212a4:	f000 fbd0 	bl	8021a48 <RTC_Bcd2ToByte>
 80212a8:	4603      	mov	r3, r0
 80212aa:	461a      	mov	r2, r3
 80212ac:	68bb      	ldr	r3, [r7, #8]
 80212ae:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80212b0:	68bb      	ldr	r3, [r7, #8]
 80212b2:	785b      	ldrb	r3, [r3, #1]
 80212b4:	4618      	mov	r0, r3
 80212b6:	f000 fbc7 	bl	8021a48 <RTC_Bcd2ToByte>
 80212ba:	4603      	mov	r3, r0
 80212bc:	461a      	mov	r2, r3
 80212be:	68bb      	ldr	r3, [r7, #8]
 80212c0:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80212c2:	68bb      	ldr	r3, [r7, #8]
 80212c4:	685b      	ldr	r3, [r3, #4]
 80212c6:	b2db      	uxtb	r3, r3
 80212c8:	4618      	mov	r0, r3
 80212ca:	f000 fbbd 	bl	8021a48 <RTC_Bcd2ToByte>
 80212ce:	4603      	mov	r3, r0
 80212d0:	461a      	mov	r2, r3
 80212d2:	68bb      	ldr	r3, [r7, #8]
 80212d4:	605a      	str	r2, [r3, #4]
 80212d6:	e00e      	b.n	80212f6 <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 80212d8:	68bb      	ldr	r3, [r7, #8]
 80212da:	2200      	movs	r2, #0
 80212dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 80212de:	68bb      	ldr	r3, [r7, #8]
 80212e0:	2200      	movs	r2, #0
 80212e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 80212e4:	68bb      	ldr	r3, [r7, #8]
 80212e6:	2200      	movs	r2, #0
 80212e8:	605a      	str	r2, [r3, #4]
    sTime->TimeFormat = 0U;
 80212ea:	68bb      	ldr	r3, [r7, #8]
 80212ec:	2200      	movs	r2, #0
 80212ee:	721a      	strb	r2, [r3, #8]
    sTime->SecondFraction = 0U;
 80212f0:	68bb      	ldr	r3, [r7, #8]
 80212f2:	2200      	movs	r2, #0
 80212f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80212f6:	2300      	movs	r3, #0
}
 80212f8:	4618      	mov	r0, r3
 80212fa:	3718      	adds	r7, #24
 80212fc:	46bd      	mov	sp, r7
 80212fe:	bd80      	pop	{r7, pc}
 8021300:	46007800 	.word	0x46007800

08021304 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8021304:	b590      	push	{r4, r7, lr}
 8021306:	b087      	sub	sp, #28
 8021308:	af00      	add	r7, sp, #0
 802130a:	60f8      	str	r0, [r7, #12]
 802130c:	60b9      	str	r1, [r7, #8]
 802130e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021316:	2b01      	cmp	r3, #1
 8021318:	d101      	bne.n	802131e <HAL_RTC_SetDate+0x1a>
 802131a:	2302      	movs	r3, #2
 802131c:	e071      	b.n	8021402 <HAL_RTC_SetDate+0xfe>
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	2201      	movs	r2, #1
 8021322:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8021326:	68fb      	ldr	r3, [r7, #12]
 8021328:	2202      	movs	r2, #2
 802132a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	2b00      	cmp	r3, #0
 8021332:	d10e      	bne.n	8021352 <HAL_RTC_SetDate+0x4e>
 8021334:	68bb      	ldr	r3, [r7, #8]
 8021336:	785b      	ldrb	r3, [r3, #1]
 8021338:	f003 0310 	and.w	r3, r3, #16
 802133c:	2b00      	cmp	r3, #0
 802133e:	d008      	beq.n	8021352 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8021340:	68bb      	ldr	r3, [r7, #8]
 8021342:	785b      	ldrb	r3, [r3, #1]
 8021344:	f023 0310 	bic.w	r3, r3, #16
 8021348:	b2db      	uxtb	r3, r3
 802134a:	330a      	adds	r3, #10
 802134c:	b2da      	uxtb	r2, r3
 802134e:	68bb      	ldr	r3, [r7, #8]
 8021350:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	2b00      	cmp	r3, #0
 8021356:	d11c      	bne.n	8021392 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8021358:	68bb      	ldr	r3, [r7, #8]
 802135a:	78db      	ldrb	r3, [r3, #3]
 802135c:	4618      	mov	r0, r3
 802135e:	f000 fb53 	bl	8021a08 <RTC_ByteToBcd2>
 8021362:	4603      	mov	r3, r0
 8021364:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8021366:	68bb      	ldr	r3, [r7, #8]
 8021368:	785b      	ldrb	r3, [r3, #1]
 802136a:	4618      	mov	r0, r3
 802136c:	f000 fb4c 	bl	8021a08 <RTC_ByteToBcd2>
 8021370:	4603      	mov	r3, r0
 8021372:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8021374:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8021376:	68bb      	ldr	r3, [r7, #8]
 8021378:	789b      	ldrb	r3, [r3, #2]
 802137a:	4618      	mov	r0, r3
 802137c:	f000 fb44 	bl	8021a08 <RTC_ByteToBcd2>
 8021380:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8021382:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8021386:	68bb      	ldr	r3, [r7, #8]
 8021388:	781b      	ldrb	r3, [r3, #0]
 802138a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 802138c:	4313      	orrs	r3, r2
 802138e:	617b      	str	r3, [r7, #20]
 8021390:	e00e      	b.n	80213b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8021392:	68bb      	ldr	r3, [r7, #8]
 8021394:	78db      	ldrb	r3, [r3, #3]
 8021396:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8021398:	68bb      	ldr	r3, [r7, #8]
 802139a:	785b      	ldrb	r3, [r3, #1]
 802139c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 802139e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80213a0:	68ba      	ldr	r2, [r7, #8]
 80213a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80213a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80213a6:	68bb      	ldr	r3, [r7, #8]
 80213a8:	781b      	ldrb	r3, [r3, #0]
 80213aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80213ac:	4313      	orrs	r3, r2
 80213ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80213b0:	4b16      	ldr	r3, [pc, #88]	@ (802140c <HAL_RTC_SetDate+0x108>)
 80213b2:	22ca      	movs	r2, #202	@ 0xca
 80213b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80213b6:	4b15      	ldr	r3, [pc, #84]	@ (802140c <HAL_RTC_SetDate+0x108>)
 80213b8:	2253      	movs	r2, #83	@ 0x53
 80213ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80213bc:	68f8      	ldr	r0, [r7, #12]
 80213be:	f000 faa9 	bl	8021914 <RTC_EnterInitMode>
 80213c2:	4603      	mov	r3, r0
 80213c4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80213c6:	7cfb      	ldrb	r3, [r7, #19]
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d10b      	bne.n	80213e4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80213cc:	4a0f      	ldr	r2, [pc, #60]	@ (802140c <HAL_RTC_SetDate+0x108>)
 80213ce:	697b      	ldr	r3, [r7, #20]
 80213d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80213d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80213d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80213da:	68f8      	ldr	r0, [r7, #12]
 80213dc:	f000 fad6 	bl	802198c <RTC_ExitInitMode>
 80213e0:	4603      	mov	r3, r0
 80213e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80213e4:	4b09      	ldr	r3, [pc, #36]	@ (802140c <HAL_RTC_SetDate+0x108>)
 80213e6:	22ff      	movs	r2, #255	@ 0xff
 80213e8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80213ea:	7cfb      	ldrb	r3, [r7, #19]
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d103      	bne.n	80213f8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80213f0:	68fb      	ldr	r3, [r7, #12]
 80213f2:	2201      	movs	r2, #1
 80213f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	2200      	movs	r2, #0
 80213fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8021400:	7cfb      	ldrb	r3, [r7, #19]
}
 8021402:	4618      	mov	r0, r3
 8021404:	371c      	adds	r7, #28
 8021406:	46bd      	mov	sp, r7
 8021408:	bd90      	pop	{r4, r7, pc}
 802140a:	bf00      	nop
 802140c:	46007800 	.word	0x46007800

08021410 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8021410:	b580      	push	{r7, lr}
 8021412:	b086      	sub	sp, #24
 8021414:	af00      	add	r7, sp, #0
 8021416:	60f8      	str	r0, [r7, #12]
 8021418:	60b9      	str	r1, [r7, #8]
 802141a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 802141c:	4b22      	ldr	r3, [pc, #136]	@ (80214a8 <HAL_RTC_GetDate+0x98>)
 802141e:	685b      	ldr	r3, [r3, #4]
 8021420:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8021424:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8021428:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 802142a:	697b      	ldr	r3, [r7, #20]
 802142c:	0c1b      	lsrs	r3, r3, #16
 802142e:	b2da      	uxtb	r2, r3
 8021430:	68bb      	ldr	r3, [r7, #8]
 8021432:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8021434:	697b      	ldr	r3, [r7, #20]
 8021436:	0a1b      	lsrs	r3, r3, #8
 8021438:	b2db      	uxtb	r3, r3
 802143a:	f003 031f 	and.w	r3, r3, #31
 802143e:	b2da      	uxtb	r2, r3
 8021440:	68bb      	ldr	r3, [r7, #8]
 8021442:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8021444:	697b      	ldr	r3, [r7, #20]
 8021446:	b2db      	uxtb	r3, r3
 8021448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802144c:	b2da      	uxtb	r2, r3
 802144e:	68bb      	ldr	r3, [r7, #8]
 8021450:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8021452:	697b      	ldr	r3, [r7, #20]
 8021454:	0b5b      	lsrs	r3, r3, #13
 8021456:	b2db      	uxtb	r3, r3
 8021458:	f003 0307 	and.w	r3, r3, #7
 802145c:	b2da      	uxtb	r2, r3
 802145e:	68bb      	ldr	r3, [r7, #8]
 8021460:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8021462:	687b      	ldr	r3, [r7, #4]
 8021464:	2b00      	cmp	r3, #0
 8021466:	d11a      	bne.n	802149e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8021468:	68bb      	ldr	r3, [r7, #8]
 802146a:	78db      	ldrb	r3, [r3, #3]
 802146c:	4618      	mov	r0, r3
 802146e:	f000 faeb 	bl	8021a48 <RTC_Bcd2ToByte>
 8021472:	4603      	mov	r3, r0
 8021474:	461a      	mov	r2, r3
 8021476:	68bb      	ldr	r3, [r7, #8]
 8021478:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 802147a:	68bb      	ldr	r3, [r7, #8]
 802147c:	785b      	ldrb	r3, [r3, #1]
 802147e:	4618      	mov	r0, r3
 8021480:	f000 fae2 	bl	8021a48 <RTC_Bcd2ToByte>
 8021484:	4603      	mov	r3, r0
 8021486:	461a      	mov	r2, r3
 8021488:	68bb      	ldr	r3, [r7, #8]
 802148a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 802148c:	68bb      	ldr	r3, [r7, #8]
 802148e:	789b      	ldrb	r3, [r3, #2]
 8021490:	4618      	mov	r0, r3
 8021492:	f000 fad9 	bl	8021a48 <RTC_Bcd2ToByte>
 8021496:	4603      	mov	r3, r0
 8021498:	461a      	mov	r2, r3
 802149a:	68bb      	ldr	r3, [r7, #8]
 802149c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 802149e:	2300      	movs	r3, #0
}
 80214a0:	4618      	mov	r0, r3
 80214a2:	3718      	adds	r7, #24
 80214a4:	46bd      	mov	sp, r7
 80214a6:	bd80      	pop	{r7, pc}
 80214a8:	46007800 	.word	0x46007800

080214ac <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80214ac:	b590      	push	{r4, r7, lr}
 80214ae:	b087      	sub	sp, #28
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	60f8      	str	r0, [r7, #12]
 80214b4:	60b9      	str	r1, [r7, #8]
 80214b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80214b8:	2300      	movs	r3, #0
 80214ba:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80214c2:	2b01      	cmp	r3, #1
 80214c4:	d101      	bne.n	80214ca <HAL_RTC_SetAlarm_IT+0x1e>
 80214c6:	2302      	movs	r3, #2
 80214c8:	e0eb      	b.n	80216a2 <HAL_RTC_SetAlarm_IT+0x1f6>
 80214ca:	68fb      	ldr	r3, [r7, #12]
 80214cc:	2201      	movs	r2, #1
 80214ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80214d2:	68fb      	ldr	r3, [r7, #12]
 80214d4:	2202      	movs	r2, #2
 80214d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
                 (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif /* USE_FULL_ASSERT */

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80214da:	4b74      	ldr	r3, [pc, #464]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80214dc:	68db      	ldr	r3, [r3, #12]
 80214de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80214e2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80214e4:	693b      	ldr	r3, [r7, #16]
 80214e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80214ea:	d05d      	beq.n	80215a8 <HAL_RTC_SetAlarm_IT+0xfc>
  {
    if (Format == RTC_FORMAT_BIN)
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d137      	bne.n	8021562 <HAL_RTC_SetAlarm_IT+0xb6>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80214f2:	4b6e      	ldr	r3, [pc, #440]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80214f4:	699b      	ldr	r3, [r3, #24]
 80214f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d102      	bne.n	8021504 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80214fe:	68bb      	ldr	r3, [r7, #8]
 8021500:	2200      	movs	r2, #0
 8021502:	721a      	strb	r2, [r3, #8]
      }
      else
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
      }
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8021504:	68bb      	ldr	r3, [r7, #8]
 8021506:	781b      	ldrb	r3, [r3, #0]
 8021508:	4618      	mov	r0, r3
 802150a:	f000 fa7d 	bl	8021a08 <RTC_ByteToBcd2>
 802150e:	4603      	mov	r3, r0
 8021510:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8021512:	68bb      	ldr	r3, [r7, #8]
 8021514:	785b      	ldrb	r3, [r3, #1]
 8021516:	4618      	mov	r0, r3
 8021518:	f000 fa76 	bl	8021a08 <RTC_ByteToBcd2>
 802151c:	4603      	mov	r3, r0
 802151e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8021520:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8021522:	68bb      	ldr	r3, [r7, #8]
 8021524:	685b      	ldr	r3, [r3, #4]
 8021526:	b2db      	uxtb	r3, r3
 8021528:	4618      	mov	r0, r3
 802152a:	f000 fa6d 	bl	8021a08 <RTC_ByteToBcd2>
 802152e:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8021530:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8021534:	68bb      	ldr	r3, [r7, #8]
 8021536:	7a1b      	ldrb	r3, [r3, #8]
 8021538:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 802153a:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 802153e:	68bb      	ldr	r3, [r7, #8]
 8021540:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021544:	4618      	mov	r0, r3
 8021546:	f000 fa5f 	bl	8021a08 <RTC_ByteToBcd2>
 802154a:	4603      	mov	r3, r0
 802154c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 802154e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8021552:	68bb      	ldr	r3, [r7, #8]
 8021554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8021556:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8021558:	68bb      	ldr	r3, [r7, #8]
 802155a:	69db      	ldr	r3, [r3, #28]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 802155c:	4313      	orrs	r3, r2
 802155e:	617b      	str	r3, [r7, #20]
 8021560:	e022      	b.n	80215a8 <HAL_RTC_SetAlarm_IT+0xfc>
    }
    else /* Format BCD */
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8021562:	4b52      	ldr	r3, [pc, #328]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021564:	699b      	ldr	r3, [r3, #24]
 8021566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802156a:	2b00      	cmp	r3, #0
 802156c:	d102      	bne.n	8021574 <HAL_RTC_SetAlarm_IT+0xc8>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 802156e:	68bb      	ldr	r3, [r7, #8]
 8021570:	2200      	movs	r2, #0
 8021572:	721a      	strb	r2, [r3, #8]
      {
        assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
      }

#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8021574:	68bb      	ldr	r3, [r7, #8]
 8021576:	781b      	ldrb	r3, [r3, #0]
 8021578:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 802157a:	68bb      	ldr	r3, [r7, #8]
 802157c:	785b      	ldrb	r3, [r3, #1]
 802157e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8021580:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8021582:	68bb      	ldr	r3, [r7, #8]
 8021584:	685b      	ldr	r3, [r3, #4]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8021586:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8021588:	68bb      	ldr	r3, [r7, #8]
 802158a:	7a1b      	ldrb	r3, [r3, #8]
 802158c:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 802158e:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8021590:	68bb      	ldr	r3, [r7, #8]
 8021592:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021596:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8021598:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 802159a:	68bb      	ldr	r3, [r7, #8]
 802159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 802159e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80215a0:	68bb      	ldr	r3, [r7, #8]
 80215a2:	69db      	ldr	r3, [r3, #28]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80215a4:	4313      	orrs	r3, r2
 80215a6:	617b      	str	r3, [r7, #20]
    }
  }


  /* Configure the Alarm registers */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80215a8:	68bb      	ldr	r3, [r7, #8]
 80215aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80215ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80215b0:	d137      	bne.n	8021622 <HAL_RTC_SetAlarm_IT+0x176>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80215b2:	4b3e      	ldr	r3, [pc, #248]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215b4:	699b      	ldr	r3, [r3, #24]
 80215b6:	4a3d      	ldr	r2, [pc, #244]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80215bc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80215be:	4b3b      	ldr	r3, [pc, #236]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215c0:	2201      	movs	r2, #1
 80215c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80215c4:	693b      	ldr	r3, [r7, #16]
 80215c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80215ca:	d107      	bne.n	80215dc <HAL_RTC_SetAlarm_IT+0x130>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80215cc:	68bb      	ldr	r3, [r7, #8]
 80215ce:	6a1a      	ldr	r2, [r3, #32]
 80215d0:	68bb      	ldr	r3, [r7, #8]
 80215d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215d4:	4935      	ldr	r1, [pc, #212]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215d6:	4313      	orrs	r3, r2
 80215d8:	644b      	str	r3, [r1, #68]	@ 0x44
 80215da:	e006      	b.n	80215ea <HAL_RTC_SetAlarm_IT+0x13e>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80215dc:	4a33      	ldr	r2, [pc, #204]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215de:	697b      	ldr	r3, [r7, #20]
 80215e0:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80215e2:	4a32      	ldr	r2, [pc, #200]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215e4:	68bb      	ldr	r3, [r7, #8]
 80215e6:	6a1b      	ldr	r3, [r3, #32]
 80215e8:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80215ea:	4a30      	ldr	r2, [pc, #192]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215ec:	68bb      	ldr	r3, [r7, #8]
 80215ee:	68db      	ldr	r3, [r3, #12]
 80215f0:	6713      	str	r3, [r2, #112]	@ 0x70

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 80215f2:	68bb      	ldr	r3, [r7, #8]
 80215f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80215f6:	2b01      	cmp	r3, #1
 80215f8:	d106      	bne.n	8021608 <HAL_RTC_SetAlarm_IT+0x15c>
    {
      /* Configure the  Alarm A output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRAOCLR);
 80215fa:	4b2c      	ldr	r3, [pc, #176]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 80215fc:	699b      	ldr	r3, [r3, #24]
 80215fe:	4a2b      	ldr	r2, [pc, #172]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021600:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8021604:	6193      	str	r3, [r2, #24]
 8021606:	e005      	b.n	8021614 <HAL_RTC_SetAlarm_IT+0x168>
    }
    else
    {
      /* Disable the  Alarm A output clear*/
      CLEAR_BIT(RTC->CR, RTC_CR_ALRAOCLR);
 8021608:	4b28      	ldr	r3, [pc, #160]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802160a:	699b      	ldr	r3, [r3, #24]
 802160c:	4a27      	ldr	r2, [pc, #156]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802160e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8021612:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8021614:	4b25      	ldr	r3, [pc, #148]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021616:	699b      	ldr	r3, [r3, #24]
 8021618:	4a24      	ldr	r2, [pc, #144]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802161a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 802161e:	6193      	str	r3, [r2, #24]
 8021620:	e036      	b.n	8021690 <HAL_RTC_SetAlarm_IT+0x1e4>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8021622:	4b22      	ldr	r3, [pc, #136]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021624:	699b      	ldr	r3, [r3, #24]
 8021626:	4a21      	ldr	r2, [pc, #132]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021628:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 802162c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 802162e:	4b1f      	ldr	r3, [pc, #124]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021630:	2202      	movs	r2, #2
 8021632:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8021634:	693b      	ldr	r3, [r7, #16]
 8021636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802163a:	d107      	bne.n	802164c <HAL_RTC_SetAlarm_IT+0x1a0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 802163c:	68bb      	ldr	r3, [r7, #8]
 802163e:	6a1a      	ldr	r2, [r3, #32]
 8021640:	68bb      	ldr	r3, [r7, #8]
 8021642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021644:	4919      	ldr	r1, [pc, #100]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021646:	4313      	orrs	r3, r2
 8021648:	64cb      	str	r3, [r1, #76]	@ 0x4c
 802164a:	e006      	b.n	802165a <HAL_RTC_SetAlarm_IT+0x1ae>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 802164c:	4a17      	ldr	r2, [pc, #92]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802164e:	697b      	ldr	r3, [r7, #20]
 8021650:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8021652:	4a16      	ldr	r2, [pc, #88]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021654:	68bb      	ldr	r3, [r7, #8]
 8021656:	6a1b      	ldr	r3, [r3, #32]
 8021658:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 802165a:	4a14      	ldr	r2, [pc, #80]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802165c:	68bb      	ldr	r3, [r7, #8]
 802165e:	68db      	ldr	r3, [r3, #12]
 8021660:	6753      	str	r3, [r2, #116]	@ 0x74

    if (sAlarm->FlagAutoClr == ALARM_FLAG_AUTOCLR_ENABLE)
 8021662:	68bb      	ldr	r3, [r7, #8]
 8021664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021666:	2b01      	cmp	r3, #1
 8021668:	d106      	bne.n	8021678 <HAL_RTC_SetAlarm_IT+0x1cc>
    {
      /* Configure the  Alarm B Output clear */
      SET_BIT(RTC->CR, RTC_CR_ALRBOCLR);
 802166a:	4b10      	ldr	r3, [pc, #64]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802166c:	699b      	ldr	r3, [r3, #24]
 802166e:	4a0f      	ldr	r2, [pc, #60]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8021674:	6193      	str	r3, [r2, #24]
 8021676:	e005      	b.n	8021684 <HAL_RTC_SetAlarm_IT+0x1d8>
    }
    else
    {
      /* Disable the  Alarm B Output clear */
      CLEAR_BIT(RTC->CR, RTC_CR_ALRBOCLR);
 8021678:	4b0c      	ldr	r3, [pc, #48]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802167a:	699b      	ldr	r3, [r3, #24]
 802167c:	4a0b      	ldr	r2, [pc, #44]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802167e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8021682:	6193      	str	r3, [r2, #24]
    }

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8021684:	4b09      	ldr	r3, [pc, #36]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 8021686:	699b      	ldr	r3, [r3, #24]
 8021688:	4a08      	ldr	r2, [pc, #32]	@ (80216ac <HAL_RTC_SetAlarm_IT+0x200>)
 802168a:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 802168e:	6193      	str	r3, [r2, #24]
  }



  hrtc->State = HAL_RTC_STATE_READY;
 8021690:	68fb      	ldr	r3, [r7, #12]
 8021692:	2201      	movs	r2, #1
 8021694:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8021698:	68fb      	ldr	r3, [r7, #12]
 802169a:	2200      	movs	r2, #0
 802169c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80216a0:	2300      	movs	r3, #0
}
 80216a2:	4618      	mov	r0, r3
 80216a4:	371c      	adds	r7, #28
 80216a6:	46bd      	mov	sp, r7
 80216a8:	bd90      	pop	{r4, r7, pc}
 80216aa:	bf00      	nop
 80216ac:	46007800 	.word	0x46007800

080216b0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80216b0:	b480      	push	{r7}
 80216b2:	b083      	sub	sp, #12
 80216b4:	af00      	add	r7, sp, #0
 80216b6:	6078      	str	r0, [r7, #4]
 80216b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80216c0:	2b01      	cmp	r3, #1
 80216c2:	d101      	bne.n	80216c8 <HAL_RTC_DeactivateAlarm+0x18>
 80216c4:	2302      	movs	r3, #2
 80216c6:	e02d      	b.n	8021724 <HAL_RTC_DeactivateAlarm+0x74>
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	2201      	movs	r2, #1
 80216cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	2202      	movs	r2, #2
 80216d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 80216d8:	683b      	ldr	r3, [r7, #0]
 80216da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80216de:	d10c      	bne.n	80216fa <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80216e0:	4b13      	ldr	r3, [pc, #76]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 80216e2:	699b      	ldr	r3, [r3, #24]
 80216e4:	4a12      	ldr	r2, [pc, #72]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 80216e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80216ea:	6193      	str	r3, [r2, #24]
    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80216ec:	4b10      	ldr	r3, [pc, #64]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 80216ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80216f0:	4a0f      	ldr	r2, [pc, #60]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 80216f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80216f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80216f8:	e00b      	b.n	8021712 <HAL_RTC_DeactivateAlarm+0x62>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80216fa:	4b0d      	ldr	r3, [pc, #52]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 80216fc:	699b      	ldr	r3, [r3, #24]
 80216fe:	4a0c      	ldr	r2, [pc, #48]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 8021700:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8021704:	6193      	str	r3, [r2, #24]
    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8021706:	4b0a      	ldr	r3, [pc, #40]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 8021708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802170a:	4a09      	ldr	r2, [pc, #36]	@ (8021730 <HAL_RTC_DeactivateAlarm+0x80>)
 802170c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021710:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }


  hrtc->State = HAL_RTC_STATE_READY;
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	2201      	movs	r2, #1
 8021716:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	2200      	movs	r2, #0
 802171e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8021722:	2300      	movs	r3, #0
}
 8021724:	4618      	mov	r0, r3
 8021726:	370c      	adds	r7, #12
 8021728:	46bd      	mov	sp, r7
 802172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802172e:	4770      	bx	lr
 8021730:	46007800 	.word	0x46007800

08021734 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(const RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm,
                                   uint32_t Format)
{
 8021734:	b580      	push	{r7, lr}
 8021736:	b086      	sub	sp, #24
 8021738:	af00      	add	r7, sp, #0
 802173a:	60f8      	str	r0, [r7, #12]
 802173c:	60b9      	str	r1, [r7, #8]
 802173e:	607a      	str	r2, [r7, #4]
 8021740:	603b      	str	r3, [r7, #0]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8021748:	d140      	bne.n	80217cc <HAL_RTC_GetAlarm+0x98>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 802174a:	68bb      	ldr	r3, [r7, #8]
 802174c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8021750:	635a      	str	r2, [r3, #52]	@ 0x34

    tmpreg = READ_REG(RTC->ALRMAR);
 8021752:	4b56      	ldr	r3, [pc, #344]	@ (80218ac <HAL_RTC_GetAlarm+0x178>)
 8021754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021756:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8021758:	4b54      	ldr	r3, [pc, #336]	@ (80218ac <HAL_RTC_GetAlarm+0x178>)
 802175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802175c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8021760:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8021762:	697b      	ldr	r3, [r7, #20]
 8021764:	0c1b      	lsrs	r3, r3, #16
 8021766:	b2db      	uxtb	r3, r3
 8021768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802176c:	b2da      	uxtb	r2, r3
 802176e:	68bb      	ldr	r3, [r7, #8]
 8021770:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8021772:	697b      	ldr	r3, [r7, #20]
 8021774:	0a1b      	lsrs	r3, r3, #8
 8021776:	b2db      	uxtb	r3, r3
 8021778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802177c:	b2da      	uxtb	r2, r3
 802177e:	68bb      	ldr	r3, [r7, #8]
 8021780:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8021782:	697b      	ldr	r3, [r7, #20]
 8021784:	b2db      	uxtb	r3, r3
 8021786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 802178a:	68bb      	ldr	r3, [r7, #8]
 802178c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 802178e:	697b      	ldr	r3, [r7, #20]
 8021790:	0d9b      	lsrs	r3, r3, #22
 8021792:	b2db      	uxtb	r3, r3
 8021794:	f003 0301 	and.w	r3, r3, #1
 8021798:	b2da      	uxtb	r2, r3
 802179a:	68bb      	ldr	r3, [r7, #8]
 802179c:	721a      	strb	r2, [r3, #8]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 802179e:	68bb      	ldr	r3, [r7, #8]
 80217a0:	693a      	ldr	r2, [r7, #16]
 80217a2:	60da      	str	r2, [r3, #12]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80217a4:	697b      	ldr	r3, [r7, #20]
 80217a6:	0e1b      	lsrs	r3, r3, #24
 80217a8:	b2db      	uxtb	r3, r3
 80217aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80217ae:	b2da      	uxtb	r2, r3
 80217b0:	68bb      	ldr	r3, [r7, #8]
 80217b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80217b6:	697b      	ldr	r3, [r7, #20]
 80217b8:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80217bc:	68bb      	ldr	r3, [r7, #8]
 80217be:	629a      	str	r2, [r3, #40]	@ 0x28
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80217c0:	697b      	ldr	r3, [r7, #20]
 80217c2:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 80217c6:	68bb      	ldr	r3, [r7, #8]
 80217c8:	61da      	str	r2, [r3, #28]
 80217ca:	e03f      	b.n	802184c <HAL_RTC_GetAlarm+0x118>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80217cc:	68bb      	ldr	r3, [r7, #8]
 80217ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80217d2:	635a      	str	r2, [r3, #52]	@ 0x34

    tmpreg = READ_REG(RTC->ALRMBR);
 80217d4:	4b35      	ldr	r3, [pc, #212]	@ (80218ac <HAL_RTC_GetAlarm+0x178>)
 80217d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80217d8:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80217da:	4b34      	ldr	r3, [pc, #208]	@ (80218ac <HAL_RTC_GetAlarm+0x178>)
 80217dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80217de:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80217e2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80217e4:	697b      	ldr	r3, [r7, #20]
 80217e6:	0c1b      	lsrs	r3, r3, #16
 80217e8:	b2db      	uxtb	r3, r3
 80217ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80217ee:	b2da      	uxtb	r2, r3
 80217f0:	68bb      	ldr	r3, [r7, #8]
 80217f2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80217f4:	697b      	ldr	r3, [r7, #20]
 80217f6:	0a1b      	lsrs	r3, r3, #8
 80217f8:	b2db      	uxtb	r3, r3
 80217fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80217fe:	b2da      	uxtb	r2, r3
 8021800:	68bb      	ldr	r3, [r7, #8]
 8021802:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8021804:	697b      	ldr	r3, [r7, #20]
 8021806:	b2db      	uxtb	r3, r3
 8021808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 802180c:	68bb      	ldr	r3, [r7, #8]
 802180e:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8021810:	697b      	ldr	r3, [r7, #20]
 8021812:	0d9b      	lsrs	r3, r3, #22
 8021814:	b2db      	uxtb	r3, r3
 8021816:	f003 0301 	and.w	r3, r3, #1
 802181a:	b2da      	uxtb	r2, r3
 802181c:	68bb      	ldr	r3, [r7, #8]
 802181e:	721a      	strb	r2, [r3, #8]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8021820:	68bb      	ldr	r3, [r7, #8]
 8021822:	693a      	ldr	r2, [r7, #16]
 8021824:	60da      	str	r2, [r3, #12]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8021826:	697b      	ldr	r3, [r7, #20]
 8021828:	0e1b      	lsrs	r3, r3, #24
 802182a:	b2db      	uxtb	r3, r3
 802182c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021830:	b2da      	uxtb	r2, r3
 8021832:	68bb      	ldr	r3, [r7, #8]
 8021834:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8021838:	697b      	ldr	r3, [r7, #20]
 802183a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 802183e:	68bb      	ldr	r3, [r7, #8]
 8021840:	629a      	str	r2, [r3, #40]	@ 0x28
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8021842:	697b      	ldr	r3, [r7, #20]
 8021844:	f003 3280 	and.w	r2, r3, #2155905152	@ 0x80808080
 8021848:	68bb      	ldr	r3, [r7, #8]
 802184a:	61da      	str	r2, [r3, #28]
  }

  if (Format == RTC_FORMAT_BIN)
 802184c:	683b      	ldr	r3, [r7, #0]
 802184e:	2b00      	cmp	r3, #0
 8021850:	d126      	bne.n	80218a0 <HAL_RTC_GetAlarm+0x16c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8021852:	68bb      	ldr	r3, [r7, #8]
 8021854:	781b      	ldrb	r3, [r3, #0]
 8021856:	4618      	mov	r0, r3
 8021858:	f000 f8f6 	bl	8021a48 <RTC_Bcd2ToByte>
 802185c:	4603      	mov	r3, r0
 802185e:	461a      	mov	r2, r3
 8021860:	68bb      	ldr	r3, [r7, #8]
 8021862:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8021864:	68bb      	ldr	r3, [r7, #8]
 8021866:	785b      	ldrb	r3, [r3, #1]
 8021868:	4618      	mov	r0, r3
 802186a:	f000 f8ed 	bl	8021a48 <RTC_Bcd2ToByte>
 802186e:	4603      	mov	r3, r0
 8021870:	461a      	mov	r2, r3
 8021872:	68bb      	ldr	r3, [r7, #8]
 8021874:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8021876:	68bb      	ldr	r3, [r7, #8]
 8021878:	685b      	ldr	r3, [r3, #4]
 802187a:	b2db      	uxtb	r3, r3
 802187c:	4618      	mov	r0, r3
 802187e:	f000 f8e3 	bl	8021a48 <RTC_Bcd2ToByte>
 8021882:	4603      	mov	r3, r0
 8021884:	461a      	mov	r2, r3
 8021886:	68bb      	ldr	r3, [r7, #8]
 8021888:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 802188a:	68bb      	ldr	r3, [r7, #8]
 802188c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021890:	4618      	mov	r0, r3
 8021892:	f000 f8d9 	bl	8021a48 <RTC_Bcd2ToByte>
 8021896:	4603      	mov	r3, r0
 8021898:	461a      	mov	r2, r3
 802189a:	68bb      	ldr	r3, [r7, #8]
 802189c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  }

  return HAL_OK;
 80218a0:	2300      	movs	r3, #0
}
 80218a2:	4618      	mov	r0, r3
 80218a4:	3718      	adds	r7, #24
 80218a6:	46bd      	mov	sp, r7
 80218a8:	bd80      	pop	{r7, pc}
 80218aa:	bf00      	nop
 80218ac:	46007800 	.word	0x46007800

080218b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b084      	sub	sp, #16
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80218b8:	4b15      	ldr	r3, [pc, #84]	@ (8021910 <HAL_RTC_WaitForSynchro+0x60>)
 80218ba:	68db      	ldr	r3, [r3, #12]
 80218bc:	4a14      	ldr	r2, [pc, #80]	@ (8021910 <HAL_RTC_WaitForSynchro+0x60>)
 80218be:	f023 0320 	bic.w	r3, r3, #32
 80218c2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80218c4:	f7f4 fdd2 	bl	801646c <HAL_GetTick>
 80218c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80218ca:	e013      	b.n	80218f4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80218cc:	f7f4 fdce 	bl	801646c <HAL_GetTick>
 80218d0:	4602      	mov	r2, r0
 80218d2:	68fb      	ldr	r3, [r7, #12]
 80218d4:	1ad3      	subs	r3, r2, r3
 80218d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80218da:	d90b      	bls.n	80218f4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80218dc:	4b0c      	ldr	r3, [pc, #48]	@ (8021910 <HAL_RTC_WaitForSynchro+0x60>)
 80218de:	68db      	ldr	r3, [r3, #12]
 80218e0:	f003 0320 	and.w	r3, r3, #32
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	d10c      	bne.n	8021902 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	2203      	movs	r2, #3
 80218ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 80218f0:	2303      	movs	r3, #3
 80218f2:	e008      	b.n	8021906 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80218f4:	4b06      	ldr	r3, [pc, #24]	@ (8021910 <HAL_RTC_WaitForSynchro+0x60>)
 80218f6:	68db      	ldr	r3, [r3, #12]
 80218f8:	f003 0320 	and.w	r3, r3, #32
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d0e5      	beq.n	80218cc <HAL_RTC_WaitForSynchro+0x1c>
 8021900:	e000      	b.n	8021904 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8021902:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8021904:	2300      	movs	r3, #0
}
 8021906:	4618      	mov	r0, r3
 8021908:	3710      	adds	r7, #16
 802190a:	46bd      	mov	sp, r7
 802190c:	bd80      	pop	{r7, pc}
 802190e:	bf00      	nop
 8021910:	46007800 	.word	0x46007800

08021914 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8021914:	b580      	push	{r7, lr}
 8021916:	b084      	sub	sp, #16
 8021918:	af00      	add	r7, sp, #0
 802191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802191c:	2300      	movs	r3, #0
 802191e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8021920:	4b19      	ldr	r3, [pc, #100]	@ (8021988 <RTC_EnterInitMode+0x74>)
 8021922:	68db      	ldr	r3, [r3, #12]
 8021924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021928:	2b00      	cmp	r3, #0
 802192a:	d128      	bne.n	802197e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 802192c:	4b16      	ldr	r3, [pc, #88]	@ (8021988 <RTC_EnterInitMode+0x74>)
 802192e:	68db      	ldr	r3, [r3, #12]
 8021930:	4a15      	ldr	r2, [pc, #84]	@ (8021988 <RTC_EnterInitMode+0x74>)
 8021932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021936:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8021938:	f7f4 fd98 	bl	801646c <HAL_GetTick>
 802193c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 802193e:	e013      	b.n	8021968 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8021940:	f7f4 fd94 	bl	801646c <HAL_GetTick>
 8021944:	4602      	mov	r2, r0
 8021946:	68bb      	ldr	r3, [r7, #8]
 8021948:	1ad3      	subs	r3, r2, r3
 802194a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 802194e:	d90b      	bls.n	8021968 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8021950:	4b0d      	ldr	r3, [pc, #52]	@ (8021988 <RTC_EnterInitMode+0x74>)
 8021952:	68db      	ldr	r3, [r3, #12]
 8021954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021958:	2b00      	cmp	r3, #0
 802195a:	d10f      	bne.n	802197c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 802195c:	2303      	movs	r3, #3
 802195e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	2203      	movs	r2, #3
 8021964:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8021968:	4b07      	ldr	r3, [pc, #28]	@ (8021988 <RTC_EnterInitMode+0x74>)
 802196a:	68db      	ldr	r3, [r3, #12]
 802196c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021970:	2b00      	cmp	r3, #0
 8021972:	d104      	bne.n	802197e <RTC_EnterInitMode+0x6a>
 8021974:	7bfb      	ldrb	r3, [r7, #15]
 8021976:	2b03      	cmp	r3, #3
 8021978:	d1e2      	bne.n	8021940 <RTC_EnterInitMode+0x2c>
 802197a:	e000      	b.n	802197e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 802197c:	bf00      	nop
        }
      }
    }
  }

  return status;
 802197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8021980:	4618      	mov	r0, r3
 8021982:	3710      	adds	r7, #16
 8021984:	46bd      	mov	sp, r7
 8021986:	bd80      	pop	{r7, pc}
 8021988:	46007800 	.word	0x46007800

0802198c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 802198c:	b580      	push	{r7, lr}
 802198e:	b084      	sub	sp, #16
 8021990:	af00      	add	r7, sp, #0
 8021992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021994:	2300      	movs	r3, #0
 8021996:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8021998:	4b1a      	ldr	r3, [pc, #104]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 802199a:	68db      	ldr	r3, [r3, #12]
 802199c:	4a19      	ldr	r2, [pc, #100]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 802199e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80219a2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80219a4:	4b17      	ldr	r3, [pc, #92]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 80219a6:	699b      	ldr	r3, [r3, #24]
 80219a8:	f003 0320 	and.w	r3, r3, #32
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	d10c      	bne.n	80219ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80219b0:	6878      	ldr	r0, [r7, #4]
 80219b2:	f7ff ff7d 	bl	80218b0 <HAL_RTC_WaitForSynchro>
 80219b6:	4603      	mov	r3, r0
 80219b8:	2b00      	cmp	r3, #0
 80219ba:	d01e      	beq.n	80219fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80219bc:	687b      	ldr	r3, [r7, #4]
 80219be:	2203      	movs	r2, #3
 80219c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80219c4:	2303      	movs	r3, #3
 80219c6:	73fb      	strb	r3, [r7, #15]
 80219c8:	e017      	b.n	80219fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80219ca:	4b0e      	ldr	r3, [pc, #56]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 80219cc:	699b      	ldr	r3, [r3, #24]
 80219ce:	4a0d      	ldr	r2, [pc, #52]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 80219d0:	f023 0320 	bic.w	r3, r3, #32
 80219d4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80219d6:	6878      	ldr	r0, [r7, #4]
 80219d8:	f7ff ff6a 	bl	80218b0 <HAL_RTC_WaitForSynchro>
 80219dc:	4603      	mov	r3, r0
 80219de:	2b00      	cmp	r3, #0
 80219e0:	d005      	beq.n	80219ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80219e2:	687b      	ldr	r3, [r7, #4]
 80219e4:	2203      	movs	r2, #3
 80219e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80219ea:	2303      	movs	r3, #3
 80219ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80219ee:	4b05      	ldr	r3, [pc, #20]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 80219f0:	699b      	ldr	r3, [r3, #24]
 80219f2:	4a04      	ldr	r2, [pc, #16]	@ (8021a04 <RTC_ExitInitMode+0x78>)
 80219f4:	f043 0320 	orr.w	r3, r3, #32
 80219f8:	6193      	str	r3, [r2, #24]
  }
  return status;
 80219fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	3710      	adds	r7, #16
 8021a00:	46bd      	mov	sp, r7
 8021a02:	bd80      	pop	{r7, pc}
 8021a04:	46007800 	.word	0x46007800

08021a08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8021a08:	b480      	push	{r7}
 8021a0a:	b085      	sub	sp, #20
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	4603      	mov	r3, r0
 8021a10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8021a12:	2300      	movs	r3, #0
 8021a14:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8021a16:	79fb      	ldrb	r3, [r7, #7]
 8021a18:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8021a1a:	e005      	b.n	8021a28 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8021a1c:	68fb      	ldr	r3, [r7, #12]
 8021a1e:	3301      	adds	r3, #1
 8021a20:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8021a22:	7afb      	ldrb	r3, [r7, #11]
 8021a24:	3b0a      	subs	r3, #10
 8021a26:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8021a28:	7afb      	ldrb	r3, [r7, #11]
 8021a2a:	2b09      	cmp	r3, #9
 8021a2c:	d8f6      	bhi.n	8021a1c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8021a2e:	68fb      	ldr	r3, [r7, #12]
 8021a30:	b2db      	uxtb	r3, r3
 8021a32:	011b      	lsls	r3, r3, #4
 8021a34:	b2da      	uxtb	r2, r3
 8021a36:	7afb      	ldrb	r3, [r7, #11]
 8021a38:	4313      	orrs	r3, r2
 8021a3a:	b2db      	uxtb	r3, r3
}
 8021a3c:	4618      	mov	r0, r3
 8021a3e:	3714      	adds	r7, #20
 8021a40:	46bd      	mov	sp, r7
 8021a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a46:	4770      	bx	lr

08021a48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8021a48:	b480      	push	{r7}
 8021a4a:	b085      	sub	sp, #20
 8021a4c:	af00      	add	r7, sp, #0
 8021a4e:	4603      	mov	r3, r0
 8021a50:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8021a52:	79fb      	ldrb	r3, [r7, #7]
 8021a54:	091b      	lsrs	r3, r3, #4
 8021a56:	b2db      	uxtb	r3, r3
 8021a58:	461a      	mov	r2, r3
 8021a5a:	4613      	mov	r3, r2
 8021a5c:	009b      	lsls	r3, r3, #2
 8021a5e:	4413      	add	r3, r2
 8021a60:	005b      	lsls	r3, r3, #1
 8021a62:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8021a64:	68fb      	ldr	r3, [r7, #12]
 8021a66:	b2da      	uxtb	r2, r3
 8021a68:	79fb      	ldrb	r3, [r7, #7]
 8021a6a:	f003 030f 	and.w	r3, r3, #15
 8021a6e:	b2db      	uxtb	r3, r3
 8021a70:	4413      	add	r3, r2
 8021a72:	b2db      	uxtb	r3, r3
}
 8021a74:	4618      	mov	r0, r3
 8021a76:	3714      	adds	r7, #20
 8021a78:	46bd      	mov	sp, r7
 8021a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a7e:	4770      	bx	lr

08021a80 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8021a80:	b480      	push	{r7}
 8021a82:	b083      	sub	sp, #12
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8021a88:	bf00      	nop
 8021a8a:	370c      	adds	r7, #12
 8021a8c:	46bd      	mov	sp, r7
 8021a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a92:	4770      	bx	lr

08021a94 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8021a94:	b580      	push	{r7, lr}
 8021a96:	b086      	sub	sp, #24
 8021a98:	af00      	add	r7, sp, #0
 8021a9a:	60f8      	str	r0, [r7, #12]
 8021a9c:	60b9      	str	r1, [r7, #8]
 8021a9e:	607a      	str	r2, [r7, #4]
 8021aa0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8021aa2:	68fb      	ldr	r3, [r7, #12]
 8021aa4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021aa8:	2b01      	cmp	r3, #1
 8021aaa:	d101      	bne.n	8021ab0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8021aac:	2302      	movs	r3, #2
 8021aae:	e057      	b.n	8021b60 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	2201      	movs	r2, #1
 8021ab4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8021ab8:	68fb      	ldr	r3, [r7, #12]
 8021aba:	2202      	movs	r2, #2
 8021abc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8021ac0:	4b29      	ldr	r3, [pc, #164]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021ac2:	699b      	ldr	r3, [r3, #24]
 8021ac4:	4a28      	ldr	r2, [pc, #160]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8021aca:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8021acc:	4b26      	ldr	r3, [pc, #152]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021ace:	2204      	movs	r2, #4
 8021ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8021ad2:	4b25      	ldr	r3, [pc, #148]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021ad4:	68db      	ldr	r3, [r3, #12]
 8021ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021ada:	2b00      	cmp	r3, #0
 8021adc:	d123      	bne.n	8021b26 <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 8021ade:	f7f4 fcc5 	bl	801646c <HAL_GetTick>
 8021ae2:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8021ae4:	e017      	b.n	8021b16 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8021ae6:	f7f4 fcc1 	bl	801646c <HAL_GetTick>
 8021aea:	4602      	mov	r2, r0
 8021aec:	697b      	ldr	r3, [r7, #20]
 8021aee:	1ad3      	subs	r3, r2, r3
 8021af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021af4:	d90f      	bls.n	8021b16 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8021af6:	4b1c      	ldr	r3, [pc, #112]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021af8:	68db      	ldr	r3, [r3, #12]
 8021afa:	f003 0304 	and.w	r3, r3, #4
 8021afe:	2b00      	cmp	r3, #0
 8021b00:	d110      	bne.n	8021b24 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8021b02:	68fb      	ldr	r3, [r7, #12]
 8021b04:	2203      	movs	r2, #3
 8021b06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8021b0a:	68fb      	ldr	r3, [r7, #12]
 8021b0c:	2200      	movs	r2, #0
 8021b0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 8021b12:	2303      	movs	r3, #3
 8021b14:	e024      	b.n	8021b60 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8021b16:	4b14      	ldr	r3, [pc, #80]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021b18:	68db      	ldr	r3, [r3, #12]
 8021b1a:	f003 0304 	and.w	r3, r3, #4
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d0e1      	beq.n	8021ae6 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 8021b22:	e000      	b.n	8021b26 <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 8021b24:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8021b26:	683b      	ldr	r3, [r7, #0]
 8021b28:	041a      	lsls	r2, r3, #16
 8021b2a:	490f      	ldr	r1, [pc, #60]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021b2c:	68bb      	ldr	r3, [r7, #8]
 8021b2e:	4313      	orrs	r3, r2
 8021b30:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8021b32:	4b0d      	ldr	r3, [pc, #52]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021b34:	699b      	ldr	r3, [r3, #24]
 8021b36:	f023 0207 	bic.w	r2, r3, #7
 8021b3a:	490b      	ldr	r1, [pc, #44]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	4313      	orrs	r3, r2
 8021b40:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8021b42:	4b09      	ldr	r3, [pc, #36]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021b44:	699b      	ldr	r3, [r3, #24]
 8021b46:	4a08      	ldr	r2, [pc, #32]	@ (8021b68 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8021b48:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8021b4c:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8021b4e:	68fb      	ldr	r3, [r7, #12]
 8021b50:	2201      	movs	r2, #1
 8021b52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8021b56:	68fb      	ldr	r3, [r7, #12]
 8021b58:	2200      	movs	r2, #0
 8021b5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8021b5e:	2300      	movs	r3, #0
}
 8021b60:	4618      	mov	r0, r3
 8021b62:	3718      	adds	r7, #24
 8021b64:	46bd      	mov	sp, r7
 8021b66:	bd80      	pop	{r7, pc}
 8021b68:	46007800 	.word	0x46007800

08021b6c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8021b6c:	b580      	push	{r7, lr}
 8021b6e:	b084      	sub	sp, #16
 8021b70:	af00      	add	r7, sp, #0
 8021b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8021b74:	687b      	ldr	r3, [r7, #4]
 8021b76:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021b7a:	2b01      	cmp	r3, #1
 8021b7c:	d101      	bne.n	8021b82 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8021b7e:	2302      	movs	r3, #2
 8021b80:	e03d      	b.n	8021bfe <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	2201      	movs	r2, #1
 8021b86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	2202      	movs	r2, #2
 8021b8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8021b92:	4b1d      	ldr	r3, [pc, #116]	@ (8021c08 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8021b94:	699b      	ldr	r3, [r3, #24]
 8021b96:	4a1c      	ldr	r2, [pc, #112]	@ (8021c08 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8021b98:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8021b9c:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 8021b9e:	f7f4 fc65 	bl	801646c <HAL_GetTick>
 8021ba2:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8021ba4:	e017      	b.n	8021bd6 <HAL_RTCEx_DeactivateWakeUpTimer+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8021ba6:	f7f4 fc61 	bl	801646c <HAL_GetTick>
 8021baa:	4602      	mov	r2, r0
 8021bac:	68fb      	ldr	r3, [r7, #12]
 8021bae:	1ad3      	subs	r3, r2, r3
 8021bb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021bb4:	d90f      	bls.n	8021bd6 <HAL_RTCEx_DeactivateWakeUpTimer+0x6a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8021bb6:	4b14      	ldr	r3, [pc, #80]	@ (8021c08 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8021bb8:	68db      	ldr	r3, [r3, #12]
 8021bba:	f003 0304 	and.w	r3, r3, #4
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	d110      	bne.n	8021be4 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>
      {

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	2203      	movs	r2, #3
 8021bc6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	2200      	movs	r2, #0
 8021bce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

        return HAL_TIMEOUT;
 8021bd2:	2303      	movs	r3, #3
 8021bd4:	e013      	b.n	8021bfe <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8021bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8021c08 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8021bd8:	68db      	ldr	r3, [r3, #12]
 8021bda:	f003 0304 	and.w	r3, r3, #4
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d0e1      	beq.n	8021ba6 <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
 8021be2:	e000      	b.n	8021be6 <HAL_RTCEx_DeactivateWakeUpTimer+0x7a>
      }
      else
      {
        break;
 8021be4:	bf00      	nop
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8021be6:	4b08      	ldr	r3, [pc, #32]	@ (8021c08 <HAL_RTCEx_DeactivateWakeUpTimer+0x9c>)
 8021be8:	22ff      	movs	r2, #255	@ 0xff
 8021bea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	2201      	movs	r2, #1
 8021bf0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	2200      	movs	r2, #0
 8021bf8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8021bfc:	2300      	movs	r3, #0
}
 8021bfe:	4618      	mov	r0, r3
 8021c00:	3710      	adds	r7, #16
 8021c02:	46bd      	mov	sp, r7
 8021c04:	bd80      	pop	{r7, pc}
 8021c06:	bf00      	nop
 8021c08:	46007800 	.word	0x46007800

08021c0c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8021c0c:	b580      	push	{r7, lr}
 8021c0e:	b082      	sub	sp, #8
 8021c10:	af00      	add	r7, sp, #0
 8021c12:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8021c14:	4b0a      	ldr	r3, [pc, #40]	@ (8021c40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 8021c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021c18:	f003 0304 	and.w	r3, r3, #4
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d006      	beq.n	8021c2e <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8021c20:	4b07      	ldr	r3, [pc, #28]	@ (8021c40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 8021c22:	2204      	movs	r2, #4
 8021c24:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021c2a:	6878      	ldr	r0, [r7, #4]
 8021c2c:	4798      	blx	r3
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	2201      	movs	r2, #1
 8021c32:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8021c36:	bf00      	nop
 8021c38:	3708      	adds	r7, #8
 8021c3a:	46bd      	mov	sp, r7
 8021c3c:	bd80      	pop	{r7, pc}
 8021c3e:	bf00      	nop
 8021c40:	46007800 	.word	0x46007800

08021c44 <HAL_RTCEx_SSRUEventCallback>:
  * @brief  SSR underflow callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8021c44:	b480      	push	{r7}
 8021c46:	b083      	sub	sp, #12
 8021c48:	af00      	add	r7, sp, #0
 8021c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_SSRUEventCallback could be implemented in the user file
   */
}
 8021c4c:	bf00      	nop
 8021c4e:	370c      	adds	r7, #12
 8021c50:	46bd      	mov	sp, r7
 8021c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c56:	4770      	bx	lr

08021c58 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8021c58:	b480      	push	{r7}
 8021c5a:	b083      	sub	sp, #12
 8021c5c:	af00      	add	r7, sp, #0
 8021c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8021c60:	bf00      	nop
 8021c62:	370c      	adds	r7, #12
 8021c64:	46bd      	mov	sp, r7
 8021c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c6a:	4770      	bx	lr

08021c6c <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021c6c:	b480      	push	{r7}
 8021c6e:	b083      	sub	sp, #12
 8021c70:	af00      	add	r7, sp, #0
 8021c72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8021c74:	bf00      	nop
 8021c76:	370c      	adds	r7, #12
 8021c78:	46bd      	mov	sp, r7
 8021c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c7e:	4770      	bx	lr

08021c80 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021c80:	b480      	push	{r7}
 8021c82:	b083      	sub	sp, #12
 8021c84:	af00      	add	r7, sp, #0
 8021c86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8021c88:	bf00      	nop
 8021c8a:	370c      	adds	r7, #12
 8021c8c:	46bd      	mov	sp, r7
 8021c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c92:	4770      	bx	lr

08021c94 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021c94:	b480      	push	{r7}
 8021c96:	b083      	sub	sp, #12
 8021c98:	af00      	add	r7, sp, #0
 8021c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8021c9c:	bf00      	nop
 8021c9e:	370c      	adds	r7, #12
 8021ca0:	46bd      	mov	sp, r7
 8021ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ca6:	4770      	bx	lr

08021ca8 <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021ca8:	b480      	push	{r7}
 8021caa:	b083      	sub	sp, #12
 8021cac:	af00      	add	r7, sp, #0
 8021cae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 8021cb0:	bf00      	nop
 8021cb2:	370c      	adds	r7, #12
 8021cb4:	46bd      	mov	sp, r7
 8021cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cba:	4770      	bx	lr

08021cbc <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021cbc:	b480      	push	{r7}
 8021cbe:	b083      	sub	sp, #12
 8021cc0:	af00      	add	r7, sp, #0
 8021cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 8021cc4:	bf00      	nop
 8021cc6:	370c      	adds	r7, #12
 8021cc8:	46bd      	mov	sp, r7
 8021cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cce:	4770      	bx	lr

08021cd0 <HAL_RTCEx_Tamper6EventCallback>:
  * @brief  Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021cd0:	b480      	push	{r7}
 8021cd2:	b083      	sub	sp, #12
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper6EventCallback could be implemented in the user file
   */
}
 8021cd8:	bf00      	nop
 8021cda:	370c      	adds	r7, #12
 8021cdc:	46bd      	mov	sp, r7
 8021cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ce2:	4770      	bx	lr

08021ce4 <HAL_RTCEx_Tamper7EventCallback>:
  * @brief  Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021ce4:	b480      	push	{r7}
 8021ce6:	b083      	sub	sp, #12
 8021ce8:	af00      	add	r7, sp, #0
 8021cea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper7EventCallback could be implemented in the user file
   */
}
 8021cec:	bf00      	nop
 8021cee:	370c      	adds	r7, #12
 8021cf0:	46bd      	mov	sp, r7
 8021cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cf6:	4770      	bx	lr

08021cf8 <HAL_RTCEx_Tamper8EventCallback>:
  * @brief  Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021cf8:	b480      	push	{r7}
 8021cfa:	b083      	sub	sp, #12
 8021cfc:	af00      	add	r7, sp, #0
 8021cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper8EventCallback could be implemented in the user file
   */
}
 8021d00:	bf00      	nop
 8021d02:	370c      	adds	r7, #12
 8021d04:	46bd      	mov	sp, r7
 8021d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d0a:	4770      	bx	lr

08021d0c <HAL_RTCEx_InternalTamper1EventCallback>:
  * @brief  Internal Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d0c:	b480      	push	{r7}
 8021d0e:	b083      	sub	sp, #12
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper1EventCallback could be implemented in the user file
   */
}
 8021d14:	bf00      	nop
 8021d16:	370c      	adds	r7, #12
 8021d18:	46bd      	mov	sp, r7
 8021d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d1e:	4770      	bx	lr

08021d20 <HAL_RTCEx_InternalTamper2EventCallback>:
  * @brief  Internal Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d20:	b480      	push	{r7}
 8021d22:	b083      	sub	sp, #12
 8021d24:	af00      	add	r7, sp, #0
 8021d26:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper2EventCallback could be implemented in the user file
   */
}
 8021d28:	bf00      	nop
 8021d2a:	370c      	adds	r7, #12
 8021d2c:	46bd      	mov	sp, r7
 8021d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d32:	4770      	bx	lr

08021d34 <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d34:	b480      	push	{r7}
 8021d36:	b083      	sub	sp, #12
 8021d38:	af00      	add	r7, sp, #0
 8021d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 8021d3c:	bf00      	nop
 8021d3e:	370c      	adds	r7, #12
 8021d40:	46bd      	mov	sp, r7
 8021d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d46:	4770      	bx	lr

08021d48 <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d48:	b480      	push	{r7}
 8021d4a:	b083      	sub	sp, #12
 8021d4c:	af00      	add	r7, sp, #0
 8021d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 8021d50:	bf00      	nop
 8021d52:	370c      	adds	r7, #12
 8021d54:	46bd      	mov	sp, r7
 8021d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d5a:	4770      	bx	lr

08021d5c <HAL_RTCEx_InternalTamper6EventCallback>:
  * @brief  Internal Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d5c:	b480      	push	{r7}
 8021d5e:	b083      	sub	sp, #12
 8021d60:	af00      	add	r7, sp, #0
 8021d62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper6EventCallback could be implemented in the user file
   */
}
 8021d64:	bf00      	nop
 8021d66:	370c      	adds	r7, #12
 8021d68:	46bd      	mov	sp, r7
 8021d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d6e:	4770      	bx	lr

08021d70 <HAL_RTCEx_InternalTamper7EventCallback>:
  * @brief  Internal Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d70:	b480      	push	{r7}
 8021d72:	b083      	sub	sp, #12
 8021d74:	af00      	add	r7, sp, #0
 8021d76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper7EventCallback could be implemented in the user file
   */
}
 8021d78:	bf00      	nop
 8021d7a:	370c      	adds	r7, #12
 8021d7c:	46bd      	mov	sp, r7
 8021d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d82:	4770      	bx	lr

08021d84 <HAL_RTCEx_InternalTamper8EventCallback>:
  * @brief  Internal Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d84:	b480      	push	{r7}
 8021d86:	b083      	sub	sp, #12
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 8021d8c:	bf00      	nop
 8021d8e:	370c      	adds	r7, #12
 8021d90:	46bd      	mov	sp, r7
 8021d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d96:	4770      	bx	lr

08021d98 <HAL_RTCEx_InternalTamper9EventCallback>:
  * @brief  Internal Tamper 9 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper9EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021d98:	b480      	push	{r7}
 8021d9a:	b083      	sub	sp, #12
 8021d9c:	af00      	add	r7, sp, #0
 8021d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper9EventCallback could be implemented in the user file
   */
}
 8021da0:	bf00      	nop
 8021da2:	370c      	adds	r7, #12
 8021da4:	46bd      	mov	sp, r7
 8021da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021daa:	4770      	bx	lr

08021dac <HAL_RTCEx_InternalTamper11EventCallback>:
  * @brief  Internal Tamper 11 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper11EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021dac:	b480      	push	{r7}
 8021dae:	b083      	sub	sp, #12
 8021db0:	af00      	add	r7, sp, #0
 8021db2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper11EventCallback could be implemented in the user file
   */
}
 8021db4:	bf00      	nop
 8021db6:	370c      	adds	r7, #12
 8021db8:	46bd      	mov	sp, r7
 8021dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dbe:	4770      	bx	lr

08021dc0 <HAL_RTCEx_InternalTamper12EventCallback>:
  * @brief  Internal Tamper 12 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper12EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021dc0:	b480      	push	{r7}
 8021dc2:	b083      	sub	sp, #12
 8021dc4:	af00      	add	r7, sp, #0
 8021dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper12EventCallback could be implemented in the user file
   */
}
 8021dc8:	bf00      	nop
 8021dca:	370c      	adds	r7, #12
 8021dcc:	46bd      	mov	sp, r7
 8021dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd2:	4770      	bx	lr

08021dd4 <HAL_RTCEx_InternalTamper13EventCallback>:
  * @brief  Internal Tamper 13 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper13EventCallback(RTC_HandleTypeDef *hrtc)
{
 8021dd4:	b480      	push	{r7}
 8021dd6:	b083      	sub	sp, #12
 8021dd8:	af00      	add	r7, sp, #0
 8021dda:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper13EventCallback could be implemented in the user file
   */
}
 8021ddc:	bf00      	nop
 8021dde:	370c      	adds	r7, #12
 8021de0:	46bd      	mov	sp, r7
 8021de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021de6:	4770      	bx	lr

08021de8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8021de8:	b480      	push	{r7}
 8021dea:	b083      	sub	sp, #12
 8021dec:	af00      	add	r7, sp, #0
 8021dee:	6078      	str	r0, [r7, #4]
 8021df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8021df2:	683b      	ldr	r3, [r7, #0]
 8021df4:	681a      	ldr	r2, [r3, #0]
 8021df6:	683b      	ldr	r3, [r7, #0]
 8021df8:	685b      	ldr	r3, [r3, #4]
 8021dfa:	4910      	ldr	r1, [pc, #64]	@ (8021e3c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8021dfc:	4313      	orrs	r3, r2
 8021dfe:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8021e00:	683b      	ldr	r3, [r7, #0]
 8021e02:	689a      	ldr	r2, [r3, #8]
 8021e04:	683b      	ldr	r3, [r7, #0]
 8021e06:	68db      	ldr	r3, [r3, #12]
 8021e08:	431a      	orrs	r2, r3
 8021e0a:	683b      	ldr	r3, [r7, #0]
 8021e0c:	699b      	ldr	r3, [r3, #24]
 8021e0e:	490c      	ldr	r1, [pc, #48]	@ (8021e40 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8021e10:	4313      	orrs	r3, r2
 8021e12:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8021e14:	4b0a      	ldr	r3, [pc, #40]	@ (8021e40 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8021e16:	6a1b      	ldr	r3, [r3, #32]
 8021e18:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8021e1c:	683b      	ldr	r3, [r7, #0]
 8021e1e:	6919      	ldr	r1, [r3, #16]
 8021e20:	683b      	ldr	r3, [r7, #0]
 8021e22:	695b      	ldr	r3, [r3, #20]
 8021e24:	041b      	lsls	r3, r3, #16
 8021e26:	430b      	orrs	r3, r1
 8021e28:	4905      	ldr	r1, [pc, #20]	@ (8021e40 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8021e2a:	4313      	orrs	r3, r2
 8021e2c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8021e2e:	2300      	movs	r3, #0
}
 8021e30:	4618      	mov	r0, r3
 8021e32:	370c      	adds	r7, #12
 8021e34:	46bd      	mov	sp, r7
 8021e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e3a:	4770      	bx	lr
 8021e3c:	46007800 	.word	0x46007800
 8021e40:	46007c00 	.word	0x46007c00

08021e44 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8021e44:	b580      	push	{r7, lr}
 8021e46:	b084      	sub	sp, #16
 8021e48:	af00      	add	r7, sp, #0
 8021e4a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d101      	bne.n	8021e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8021e52:	2301      	movs	r3, #1
 8021e54:	e0fb      	b.n	802204e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	681b      	ldr	r3, [r3, #0]
 8021e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8022058 <HAL_SPI_Init+0x214>)
 8021e5c:	4293      	cmp	r3, r2
 8021e5e:	d004      	beq.n	8021e6a <HAL_SPI_Init+0x26>
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	4a7d      	ldr	r2, [pc, #500]	@ (802205c <HAL_SPI_Init+0x218>)
 8021e66:	4293      	cmp	r3, r2
 8021e68:	e000      	b.n	8021e6c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8021e6a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	2200      	movs	r2, #0
 8021e70:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8021e72:	687b      	ldr	r3, [r7, #4]
 8021e74:	681b      	ldr	r3, [r3, #0]
 8021e76:	4a78      	ldr	r2, [pc, #480]	@ (8022058 <HAL_SPI_Init+0x214>)
 8021e78:	4293      	cmp	r3, r2
 8021e7a:	d004      	beq.n	8021e86 <HAL_SPI_Init+0x42>
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	681b      	ldr	r3, [r3, #0]
 8021e80:	4a76      	ldr	r2, [pc, #472]	@ (802205c <HAL_SPI_Init+0x218>)
 8021e82:	4293      	cmp	r3, r2
 8021e84:	d105      	bne.n	8021e92 <HAL_SPI_Init+0x4e>
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	68db      	ldr	r3, [r3, #12]
 8021e8a:	2b0f      	cmp	r3, #15
 8021e8c:	d901      	bls.n	8021e92 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8021e8e:	2301      	movs	r3, #1
 8021e90:	e0dd      	b.n	802204e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8021e92:	6878      	ldr	r0, [r7, #4]
 8021e94:	f000 fbf8 	bl	8022688 <SPI_GetPacketSize>
 8021e98:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8022058 <HAL_SPI_Init+0x214>)
 8021ea0:	4293      	cmp	r3, r2
 8021ea2:	d004      	beq.n	8021eae <HAL_SPI_Init+0x6a>
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	4a6c      	ldr	r2, [pc, #432]	@ (802205c <HAL_SPI_Init+0x218>)
 8021eaa:	4293      	cmp	r3, r2
 8021eac:	d102      	bne.n	8021eb4 <HAL_SPI_Init+0x70>
 8021eae:	68fb      	ldr	r3, [r7, #12]
 8021eb0:	2b08      	cmp	r3, #8
 8021eb2:	d816      	bhi.n	8021ee2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8021eb4:	687b      	ldr	r3, [r7, #4]
 8021eb6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8021eb8:	4a69      	ldr	r2, [pc, #420]	@ (8022060 <HAL_SPI_Init+0x21c>)
 8021eba:	4293      	cmp	r3, r2
 8021ebc:	d00e      	beq.n	8021edc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	681b      	ldr	r3, [r3, #0]
 8021ec2:	4a68      	ldr	r2, [pc, #416]	@ (8022064 <HAL_SPI_Init+0x220>)
 8021ec4:	4293      	cmp	r3, r2
 8021ec6:	d009      	beq.n	8021edc <HAL_SPI_Init+0x98>
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	681b      	ldr	r3, [r3, #0]
 8021ecc:	4a66      	ldr	r2, [pc, #408]	@ (8022068 <HAL_SPI_Init+0x224>)
 8021ece:	4293      	cmp	r3, r2
 8021ed0:	d004      	beq.n	8021edc <HAL_SPI_Init+0x98>
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	681b      	ldr	r3, [r3, #0]
 8021ed6:	4a65      	ldr	r2, [pc, #404]	@ (802206c <HAL_SPI_Init+0x228>)
 8021ed8:	4293      	cmp	r3, r2
 8021eda:	d104      	bne.n	8021ee6 <HAL_SPI_Init+0xa2>
 8021edc:	68fb      	ldr	r3, [r7, #12]
 8021ede:	2b10      	cmp	r3, #16
 8021ee0:	d901      	bls.n	8021ee6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8021ee2:	2301      	movs	r3, #1
 8021ee4:	e0b3      	b.n	802204e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8021eec:	b2db      	uxtb	r3, r3
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d106      	bne.n	8021f00 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8021efa:	6878      	ldr	r0, [r7, #4]
 8021efc:	f7f3 ff66 	bl	8015dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	2202      	movs	r2, #2
 8021f04:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8021f08:	687b      	ldr	r3, [r7, #4]
 8021f0a:	681b      	ldr	r3, [r3, #0]
 8021f0c:	681a      	ldr	r2, [r3, #0]
 8021f0e:	687b      	ldr	r3, [r7, #4]
 8021f10:	681b      	ldr	r3, [r3, #0]
 8021f12:	f022 0201 	bic.w	r2, r2, #1
 8021f16:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	689b      	ldr	r3, [r3, #8]
 8021f1e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8021f22:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	699b      	ldr	r3, [r3, #24]
 8021f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8021f2c:	d119      	bne.n	8021f62 <HAL_SPI_Init+0x11e>
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	685b      	ldr	r3, [r3, #4]
 8021f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8021f36:	d103      	bne.n	8021f40 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	d008      	beq.n	8021f52 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	d10c      	bne.n	8021f62 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8021f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8021f50:	d107      	bne.n	8021f62 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8021f52:	687b      	ldr	r3, [r7, #4]
 8021f54:	681b      	ldr	r3, [r3, #0]
 8021f56:	681a      	ldr	r2, [r3, #0]
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	681b      	ldr	r3, [r3, #0]
 8021f5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8021f60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	685b      	ldr	r3, [r3, #4]
 8021f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	d00f      	beq.n	8021f8e <HAL_SPI_Init+0x14a>
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	68db      	ldr	r3, [r3, #12]
 8021f72:	2b06      	cmp	r3, #6
 8021f74:	d90b      	bls.n	8021f8e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8021f76:	687b      	ldr	r3, [r7, #4]
 8021f78:	681b      	ldr	r3, [r3, #0]
 8021f7a:	681b      	ldr	r3, [r3, #0]
 8021f7c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8021f84:	687b      	ldr	r3, [r7, #4]
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	430a      	orrs	r2, r1
 8021f8a:	601a      	str	r2, [r3, #0]
 8021f8c:	e007      	b.n	8021f9e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	681b      	ldr	r3, [r3, #0]
 8021f92:	681a      	ldr	r2, [r3, #0]
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8021f9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	69da      	ldr	r2, [r3, #28]
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fa6:	431a      	orrs	r2, r3
 8021fa8:	68bb      	ldr	r3, [r7, #8]
 8021faa:	431a      	orrs	r2, r3
 8021fac:	687b      	ldr	r3, [r7, #4]
 8021fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8021fb0:	ea42 0103 	orr.w	r1, r2, r3
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	68da      	ldr	r2, [r3, #12]
 8021fb8:	687b      	ldr	r3, [r7, #4]
 8021fba:	681b      	ldr	r3, [r3, #0]
 8021fbc:	430a      	orrs	r2, r1
 8021fbe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021fc8:	431a      	orrs	r2, r3
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021fce:	431a      	orrs	r2, r3
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	699b      	ldr	r3, [r3, #24]
 8021fd4:	431a      	orrs	r2, r3
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	691b      	ldr	r3, [r3, #16]
 8021fda:	431a      	orrs	r2, r3
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	695b      	ldr	r3, [r3, #20]
 8021fe0:	431a      	orrs	r2, r3
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	6a1b      	ldr	r3, [r3, #32]
 8021fe6:	431a      	orrs	r2, r3
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	685b      	ldr	r3, [r3, #4]
 8021fec:	431a      	orrs	r2, r3
 8021fee:	687b      	ldr	r3, [r7, #4]
 8021ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021ff2:	431a      	orrs	r2, r3
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	689b      	ldr	r3, [r3, #8]
 8021ff8:	431a      	orrs	r2, r3
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021ffe:	431a      	orrs	r2, r3
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022004:	431a      	orrs	r2, r3
 8022006:	687b      	ldr	r3, [r7, #4]
 8022008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802200a:	ea42 0103 	orr.w	r1, r2, r3
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8022012:	687b      	ldr	r3, [r7, #4]
 8022014:	681b      	ldr	r3, [r3, #0]
 8022016:	430a      	orrs	r2, r1
 8022018:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802201a:	687b      	ldr	r3, [r7, #4]
 802201c:	685b      	ldr	r3, [r3, #4]
 802201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8022022:	2b00      	cmp	r3, #0
 8022024:	d00a      	beq.n	802203c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8022026:	687b      	ldr	r3, [r7, #4]
 8022028:	681b      	ldr	r3, [r3, #0]
 802202a:	68db      	ldr	r3, [r3, #12]
 802202c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8022030:	687b      	ldr	r3, [r7, #4]
 8022032:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	681b      	ldr	r3, [r3, #0]
 8022038:	430a      	orrs	r2, r1
 802203a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	2200      	movs	r2, #0
 8022040:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8022044:	687b      	ldr	r3, [r7, #4]
 8022046:	2201      	movs	r2, #1
 8022048:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 802204c:	2300      	movs	r3, #0
}
 802204e:	4618      	mov	r0, r3
 8022050:	3710      	adds	r7, #16
 8022052:	46bd      	mov	sp, r7
 8022054:	bd80      	pop	{r7, pc}
 8022056:	bf00      	nop
 8022058:	46002000 	.word	0x46002000
 802205c:	56002000 	.word	0x56002000
 8022060:	40013000 	.word	0x40013000
 8022064:	50013000 	.word	0x50013000
 8022068:	40003800 	.word	0x40003800
 802206c:	50003800 	.word	0x50003800

08022070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8022070:	b580      	push	{r7, lr}
 8022072:	b08c      	sub	sp, #48	@ 0x30
 8022074:	af02      	add	r7, sp, #8
 8022076:	60f8      	str	r0, [r7, #12]
 8022078:	60b9      	str	r1, [r7, #8]
 802207a:	607a      	str	r2, [r7, #4]
 802207c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 802207e:	2300      	movs	r3, #0
 8022080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	681b      	ldr	r3, [r3, #0]
 8022088:	3320      	adds	r3, #32
 802208a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 802208c:	68fb      	ldr	r3, [r7, #12]
 802208e:	681b      	ldr	r3, [r3, #0]
 8022090:	3330      	adds	r3, #48	@ 0x30
 8022092:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8022094:	68fb      	ldr	r3, [r7, #12]
 8022096:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 802209a:	2b01      	cmp	r3, #1
 802209c:	d101      	bne.n	80220a2 <HAL_SPI_TransmitReceive+0x32>
 802209e:	2302      	movs	r3, #2
 80220a0:	e21f      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
 80220a2:	68fb      	ldr	r3, [r7, #12]
 80220a4:	2201      	movs	r2, #1
 80220a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80220aa:	f7f4 f9df 	bl	801646c <HAL_GetTick>
 80220ae:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80220b0:	887b      	ldrh	r3, [r7, #2]
 80220b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  initial_RxXferCount = Size;
 80220b4:	887b      	ldrh	r3, [r7, #2]
 80220b6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80220be:	b2db      	uxtb	r3, r3
 80220c0:	2b01      	cmp	r3, #1
 80220c2:	d009      	beq.n	80220d8 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80220c4:	2302      	movs	r3, #2
 80220c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 80220ca:	68fb      	ldr	r3, [r7, #12]
 80220cc:	2200      	movs	r2, #0
 80220ce:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80220d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80220d6:	e204      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80220d8:	68bb      	ldr	r3, [r7, #8]
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d005      	beq.n	80220ea <HAL_SPI_TransmitReceive+0x7a>
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	2b00      	cmp	r3, #0
 80220e2:	d002      	beq.n	80220ea <HAL_SPI_TransmitReceive+0x7a>
 80220e4:	887b      	ldrh	r3, [r7, #2]
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	d109      	bne.n	80220fe <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80220ea:	2301      	movs	r3, #1
 80220ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    __HAL_UNLOCK(hspi);
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	2200      	movs	r2, #0
 80220f4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return errorcode;
 80220f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80220fc:	e1f1      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	2205      	movs	r2, #5
 8022102:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8022106:	68fb      	ldr	r3, [r7, #12]
 8022108:	2200      	movs	r2, #0
 802210a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802210e:	68fb      	ldr	r3, [r7, #12]
 8022110:	687a      	ldr	r2, [r7, #4]
 8022112:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8022114:	68fb      	ldr	r3, [r7, #12]
 8022116:	887a      	ldrh	r2, [r7, #2]
 8022118:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 802211c:	68fb      	ldr	r3, [r7, #12]
 802211e:	887a      	ldrh	r2, [r7, #2]
 8022120:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8022124:	68fb      	ldr	r3, [r7, #12]
 8022126:	68ba      	ldr	r2, [r7, #8]
 8022128:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 802212a:	68fb      	ldr	r3, [r7, #12]
 802212c:	887a      	ldrh	r2, [r7, #2]
 802212e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8022132:	68fb      	ldr	r3, [r7, #12]
 8022134:	887a      	ldrh	r2, [r7, #2]
 8022136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	2200      	movs	r2, #0
 802213e:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8022140:	68fb      	ldr	r3, [r7, #12]
 8022142:	2200      	movs	r2, #0
 8022144:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8022146:	68fb      	ldr	r3, [r7, #12]
 8022148:	681b      	ldr	r3, [r3, #0]
 802214a:	68da      	ldr	r2, [r3, #12]
 802214c:	68fb      	ldr	r3, [r7, #12]
 802214e:	681b      	ldr	r3, [r3, #0]
 8022150:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8022154:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8022156:	68fb      	ldr	r3, [r7, #12]
 8022158:	681b      	ldr	r3, [r3, #0]
 802215a:	685b      	ldr	r3, [r3, #4]
 802215c:	0c1b      	lsrs	r3, r3, #16
 802215e:	041b      	lsls	r3, r3, #16
 8022160:	8879      	ldrh	r1, [r7, #2]
 8022162:	68fa      	ldr	r2, [r7, #12]
 8022164:	6812      	ldr	r2, [r2, #0]
 8022166:	430b      	orrs	r3, r1
 8022168:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 802216a:	68fb      	ldr	r3, [r7, #12]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	681a      	ldr	r2, [r3, #0]
 8022170:	68fb      	ldr	r3, [r7, #12]
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	f042 0201 	orr.w	r2, r2, #1
 8022178:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 802217a:	68fb      	ldr	r3, [r7, #12]
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	69db      	ldr	r3, [r3, #28]
 8022180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8022184:	2b00      	cmp	r3, #0
 8022186:	d10c      	bne.n	80221a2 <HAL_SPI_TransmitReceive+0x132>
 8022188:	68fb      	ldr	r3, [r7, #12]
 802218a:	685b      	ldr	r3, [r3, #4]
 802218c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8022190:	d107      	bne.n	80221a2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8022192:	68fb      	ldr	r3, [r7, #12]
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	681a      	ldr	r2, [r3, #0]
 8022198:	68fb      	ldr	r3, [r7, #12]
 802219a:	681b      	ldr	r3, [r3, #0]
 802219c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80221a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80221a2:	68fb      	ldr	r3, [r7, #12]
 80221a4:	68db      	ldr	r3, [r3, #12]
 80221a6:	2b0f      	cmp	r3, #15
 80221a8:	f240 8085 	bls.w	80222b6 <HAL_SPI_TransmitReceive+0x246>
 80221ac:	68fb      	ldr	r3, [r7, #12]
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	4a7b      	ldr	r2, [pc, #492]	@ (80223a0 <HAL_SPI_TransmitReceive+0x330>)
 80221b2:	4293      	cmp	r3, r2
 80221b4:	d078      	beq.n	80222a8 <HAL_SPI_TransmitReceive+0x238>
 80221b6:	68fb      	ldr	r3, [r7, #12]
 80221b8:	681b      	ldr	r3, [r3, #0]
 80221ba:	4a7a      	ldr	r2, [pc, #488]	@ (80223a4 <HAL_SPI_TransmitReceive+0x334>)
 80221bc:	4293      	cmp	r3, r2
 80221be:	d073      	beq.n	80222a8 <HAL_SPI_TransmitReceive+0x238>
 80221c0:	68fb      	ldr	r3, [r7, #12]
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	4a78      	ldr	r2, [pc, #480]	@ (80223a8 <HAL_SPI_TransmitReceive+0x338>)
 80221c6:	4293      	cmp	r3, r2
 80221c8:	d06e      	beq.n	80222a8 <HAL_SPI_TransmitReceive+0x238>
 80221ca:	68fb      	ldr	r3, [r7, #12]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	4a77      	ldr	r2, [pc, #476]	@ (80223ac <HAL_SPI_TransmitReceive+0x33c>)
 80221d0:	4293      	cmp	r3, r2
 80221d2:	d170      	bne.n	80222b6 <HAL_SPI_TransmitReceive+0x246>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80221d4:	e068      	b.n	80222a8 <HAL_SPI_TransmitReceive+0x238>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80221d6:	68fb      	ldr	r3, [r7, #12]
 80221d8:	681b      	ldr	r3, [r3, #0]
 80221da:	695b      	ldr	r3, [r3, #20]
 80221dc:	f003 0302 	and.w	r3, r3, #2
 80221e0:	2b02      	cmp	r3, #2
 80221e2:	d11a      	bne.n	802221a <HAL_SPI_TransmitReceive+0x1aa>
 80221e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d017      	beq.n	802221a <HAL_SPI_TransmitReceive+0x1aa>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80221ea:	68fb      	ldr	r3, [r7, #12]
 80221ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80221ee:	68fb      	ldr	r3, [r7, #12]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	6812      	ldr	r2, [r2, #0]
 80221f4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80221fa:	1d1a      	adds	r2, r3, #4
 80221fc:	68fb      	ldr	r3, [r7, #12]
 80221fe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8022200:	68fb      	ldr	r3, [r7, #12]
 8022202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8022206:	b29b      	uxth	r3, r3
 8022208:	3b01      	subs	r3, #1
 802220a:	b29a      	uxth	r2, r3
 802220c:	68fb      	ldr	r3, [r7, #12]
 802220e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8022212:	68fb      	ldr	r3, [r7, #12]
 8022214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8022218:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 802221a:	68fb      	ldr	r3, [r7, #12]
 802221c:	681b      	ldr	r3, [r3, #0]
 802221e:	695a      	ldr	r2, [r3, #20]
 8022220:	f248 0308 	movw	r3, #32776	@ 0x8008
 8022224:	4013      	ands	r3, r2
 8022226:	2b00      	cmp	r3, #0
 8022228:	d01a      	beq.n	8022260 <HAL_SPI_TransmitReceive+0x1f0>
 802222a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 802222c:	2b00      	cmp	r3, #0
 802222e:	d017      	beq.n	8022260 <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8022230:	68fb      	ldr	r3, [r7, #12]
 8022232:	681a      	ldr	r2, [r3, #0]
 8022234:	68fb      	ldr	r3, [r7, #12]
 8022236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022238:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 802223a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 802223c:	68fb      	ldr	r3, [r7, #12]
 802223e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022240:	1d1a      	adds	r2, r3, #4
 8022242:	68fb      	ldr	r3, [r7, #12]
 8022244:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8022246:	68fb      	ldr	r3, [r7, #12]
 8022248:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 802224c:	b29b      	uxth	r3, r3
 802224e:	3b01      	subs	r3, #1
 8022250:	b29a      	uxth	r2, r3
 8022252:	68fb      	ldr	r3, [r7, #12]
 8022254:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8022258:	68fb      	ldr	r3, [r7, #12]
 802225a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 802225e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022260:	f7f4 f904 	bl	801646c <HAL_GetTick>
 8022264:	4602      	mov	r2, r0
 8022266:	697b      	ldr	r3, [r7, #20]
 8022268:	1ad3      	subs	r3, r2, r3
 802226a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802226c:	429a      	cmp	r2, r3
 802226e:	d803      	bhi.n	8022278 <HAL_SPI_TransmitReceive+0x208>
 8022270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022276:	d102      	bne.n	802227e <HAL_SPI_TransmitReceive+0x20e>
 8022278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802227a:	2b00      	cmp	r3, #0
 802227c:	d114      	bne.n	80222a8 <HAL_SPI_TransmitReceive+0x238>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802227e:	68f8      	ldr	r0, [r7, #12]
 8022280:	f000 f934 	bl	80224ec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8022284:	68fb      	ldr	r3, [r7, #12]
 8022286:	2200      	movs	r2, #0
 8022288:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8022292:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 802229c:	68fb      	ldr	r3, [r7, #12]
 802229e:	2201      	movs	r2, #1
 80222a0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        return HAL_TIMEOUT;
 80222a4:	2303      	movs	r3, #3
 80222a6:	e11c      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80222a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	d193      	bne.n	80221d6 <HAL_SPI_TransmitReceive+0x166>
 80222ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d190      	bne.n	80221d6 <HAL_SPI_TransmitReceive+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80222b4:	e0ee      	b.n	8022494 <HAL_SPI_TransmitReceive+0x424>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80222b6:	68fb      	ldr	r3, [r7, #12]
 80222b8:	68db      	ldr	r3, [r3, #12]
 80222ba:	2b07      	cmp	r3, #7
 80222bc:	f240 80e4 	bls.w	8022488 <HAL_SPI_TransmitReceive+0x418>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80222c0:	e066      	b.n	8022390 <HAL_SPI_TransmitReceive+0x320>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80222c2:	68fb      	ldr	r3, [r7, #12]
 80222c4:	681b      	ldr	r3, [r3, #0]
 80222c6:	695b      	ldr	r3, [r3, #20]
 80222c8:	f003 0302 	and.w	r3, r3, #2
 80222cc:	2b02      	cmp	r3, #2
 80222ce:	d119      	bne.n	8022304 <HAL_SPI_TransmitReceive+0x294>
 80222d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	d016      	beq.n	8022304 <HAL_SPI_TransmitReceive+0x294>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80222d6:	68fb      	ldr	r3, [r7, #12]
 80222d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80222da:	881a      	ldrh	r2, [r3, #0]
 80222dc:	69fb      	ldr	r3, [r7, #28]
 80222de:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80222e4:	1c9a      	adds	r2, r3, #2
 80222e6:	68fb      	ldr	r3, [r7, #12]
 80222e8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80222ea:	68fb      	ldr	r3, [r7, #12]
 80222ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80222f0:	b29b      	uxth	r3, r3
 80222f2:	3b01      	subs	r3, #1
 80222f4:	b29a      	uxth	r2, r3
 80222f6:	68fb      	ldr	r3, [r7, #12]
 80222f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80222fc:	68fb      	ldr	r3, [r7, #12]
 80222fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8022302:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8022304:	68fb      	ldr	r3, [r7, #12]
 8022306:	681b      	ldr	r3, [r3, #0]
 8022308:	695b      	ldr	r3, [r3, #20]
 802230a:	f003 0301 	and.w	r3, r3, #1
 802230e:	2b01      	cmp	r3, #1
 8022310:	d11a      	bne.n	8022348 <HAL_SPI_TransmitReceive+0x2d8>
 8022312:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8022314:	2b00      	cmp	r3, #0
 8022316:	d017      	beq.n	8022348 <HAL_SPI_TransmitReceive+0x2d8>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8022318:	68fb      	ldr	r3, [r7, #12]
 802231a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802231c:	69ba      	ldr	r2, [r7, #24]
 802231e:	8812      	ldrh	r2, [r2, #0]
 8022320:	b292      	uxth	r2, r2
 8022322:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8022324:	68fb      	ldr	r3, [r7, #12]
 8022326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022328:	1c9a      	adds	r2, r3, #2
 802232a:	68fb      	ldr	r3, [r7, #12]
 802232c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8022334:	b29b      	uxth	r3, r3
 8022336:	3b01      	subs	r3, #1
 8022338:	b29a      	uxth	r2, r3
 802233a:	68fb      	ldr	r3, [r7, #12]
 802233c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8022340:	68fb      	ldr	r3, [r7, #12]
 8022342:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8022346:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022348:	f7f4 f890 	bl	801646c <HAL_GetTick>
 802234c:	4602      	mov	r2, r0
 802234e:	697b      	ldr	r3, [r7, #20]
 8022350:	1ad3      	subs	r3, r2, r3
 8022352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8022354:	429a      	cmp	r2, r3
 8022356:	d803      	bhi.n	8022360 <HAL_SPI_TransmitReceive+0x2f0>
 8022358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802235e:	d102      	bne.n	8022366 <HAL_SPI_TransmitReceive+0x2f6>
 8022360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022362:	2b00      	cmp	r3, #0
 8022364:	d114      	bne.n	8022390 <HAL_SPI_TransmitReceive+0x320>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8022366:	68f8      	ldr	r0, [r7, #12]
 8022368:	f000 f8c0 	bl	80224ec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 802236c:	68fb      	ldr	r3, [r7, #12]
 802236e:	2200      	movs	r2, #0
 8022370:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8022374:	68fb      	ldr	r3, [r7, #12]
 8022376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802237a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 802237e:	68fb      	ldr	r3, [r7, #12]
 8022380:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8022384:	68fb      	ldr	r3, [r7, #12]
 8022386:	2201      	movs	r2, #1
 8022388:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        return HAL_TIMEOUT;
 802238c:	2303      	movs	r3, #3
 802238e:	e0a8      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8022390:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022392:	2b00      	cmp	r3, #0
 8022394:	d195      	bne.n	80222c2 <HAL_SPI_TransmitReceive+0x252>
 8022396:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8022398:	2b00      	cmp	r3, #0
 802239a:	d192      	bne.n	80222c2 <HAL_SPI_TransmitReceive+0x252>
 802239c:	e07a      	b.n	8022494 <HAL_SPI_TransmitReceive+0x424>
 802239e:	bf00      	nop
 80223a0:	40013000 	.word	0x40013000
 80223a4:	50013000 	.word	0x50013000
 80223a8:	40003800 	.word	0x40003800
 80223ac:	50003800 	.word	0x50003800
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80223b0:	68fb      	ldr	r3, [r7, #12]
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	695b      	ldr	r3, [r3, #20]
 80223b6:	f003 0302 	and.w	r3, r3, #2
 80223ba:	2b02      	cmp	r3, #2
 80223bc:	d11b      	bne.n	80223f6 <HAL_SPI_TransmitReceive+0x386>
 80223be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d018      	beq.n	80223f6 <HAL_SPI_TransmitReceive+0x386>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80223c4:	68fb      	ldr	r3, [r7, #12]
 80223c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80223c8:	68fb      	ldr	r3, [r7, #12]
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	3320      	adds	r3, #32
 80223ce:	7812      	ldrb	r2, [r2, #0]
 80223d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80223d2:	68fb      	ldr	r3, [r7, #12]
 80223d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80223d6:	1c5a      	adds	r2, r3, #1
 80223d8:	68fb      	ldr	r3, [r7, #12]
 80223da:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80223dc:	68fb      	ldr	r3, [r7, #12]
 80223de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80223e2:	b29b      	uxth	r3, r3
 80223e4:	3b01      	subs	r3, #1
 80223e6:	b29a      	uxth	r2, r3
 80223e8:	68fb      	ldr	r3, [r7, #12]
 80223ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80223ee:	68fb      	ldr	r3, [r7, #12]
 80223f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80223f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80223f6:	68fb      	ldr	r3, [r7, #12]
 80223f8:	681b      	ldr	r3, [r3, #0]
 80223fa:	695b      	ldr	r3, [r3, #20]
 80223fc:	f003 0301 	and.w	r3, r3, #1
 8022400:	2b01      	cmp	r3, #1
 8022402:	d11d      	bne.n	8022440 <HAL_SPI_TransmitReceive+0x3d0>
 8022404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8022406:	2b00      	cmp	r3, #0
 8022408:	d01a      	beq.n	8022440 <HAL_SPI_TransmitReceive+0x3d0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 802240a:	68fb      	ldr	r3, [r7, #12]
 802240c:	681b      	ldr	r3, [r3, #0]
 802240e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8022412:	68fb      	ldr	r3, [r7, #12]
 8022414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022416:	7812      	ldrb	r2, [r2, #0]
 8022418:	b2d2      	uxtb	r2, r2
 802241a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 802241c:	68fb      	ldr	r3, [r7, #12]
 802241e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022420:	1c5a      	adds	r2, r3, #1
 8022422:	68fb      	ldr	r3, [r7, #12]
 8022424:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8022426:	68fb      	ldr	r3, [r7, #12]
 8022428:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 802242c:	b29b      	uxth	r3, r3
 802242e:	3b01      	subs	r3, #1
 8022430:	b29a      	uxth	r2, r3
 8022432:	68fb      	ldr	r3, [r7, #12]
 8022434:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8022438:	68fb      	ldr	r3, [r7, #12]
 802243a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 802243e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8022440:	f7f4 f814 	bl	801646c <HAL_GetTick>
 8022444:	4602      	mov	r2, r0
 8022446:	697b      	ldr	r3, [r7, #20]
 8022448:	1ad3      	subs	r3, r2, r3
 802244a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802244c:	429a      	cmp	r2, r3
 802244e:	d803      	bhi.n	8022458 <HAL_SPI_TransmitReceive+0x3e8>
 8022450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022456:	d102      	bne.n	802245e <HAL_SPI_TransmitReceive+0x3ee>
 8022458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802245a:	2b00      	cmp	r3, #0
 802245c:	d114      	bne.n	8022488 <HAL_SPI_TransmitReceive+0x418>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 802245e:	68f8      	ldr	r0, [r7, #12]
 8022460:	f000 f844 	bl	80224ec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	2200      	movs	r2, #0
 8022468:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802246c:	68fb      	ldr	r3, [r7, #12]
 802246e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8022472:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8022476:	68fb      	ldr	r3, [r7, #12]
 8022478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 802247c:	68fb      	ldr	r3, [r7, #12]
 802247e:	2201      	movs	r2, #1
 8022480:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        return HAL_TIMEOUT;
 8022484:	2303      	movs	r3, #3
 8022486:	e02c      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8022488:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802248a:	2b00      	cmp	r3, #0
 802248c:	d190      	bne.n	80223b0 <HAL_SPI_TransmitReceive+0x340>
 802248e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8022490:	2b00      	cmp	r3, #0
 8022492:	d18d      	bne.n	80223b0 <HAL_SPI_TransmitReceive+0x340>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8022494:	697b      	ldr	r3, [r7, #20]
 8022496:	9300      	str	r3, [sp, #0]
 8022498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802249a:	2200      	movs	r2, #0
 802249c:	2108      	movs	r1, #8
 802249e:	68f8      	ldr	r0, [r7, #12]
 80224a0:	f000 f8c4 	bl	802262c <SPI_WaitOnFlagUntilTimeout>
 80224a4:	4603      	mov	r3, r0
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d007      	beq.n	80224ba <HAL_SPI_TransmitReceive+0x44a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80224aa:	68fb      	ldr	r3, [r7, #12]
 80224ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80224b0:	f043 0220 	orr.w	r2, r3, #32
 80224b4:	68fb      	ldr	r3, [r7, #12]
 80224b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80224ba:	68f8      	ldr	r0, [r7, #12]
 80224bc:	f000 f816 	bl	80224ec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80224c0:	68fb      	ldr	r3, [r7, #12]
 80224c2:	2200      	movs	r2, #0
 80224c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	2201      	movs	r2, #1
 80224cc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80224d0:	68fb      	ldr	r3, [r7, #12]
 80224d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80224d6:	2b00      	cmp	r3, #0
 80224d8:	d001      	beq.n	80224de <HAL_SPI_TransmitReceive+0x46e>
  {
    return HAL_ERROR;
 80224da:	2301      	movs	r3, #1
 80224dc:	e001      	b.n	80224e2 <HAL_SPI_TransmitReceive+0x472>
  }
  return errorcode;
 80224de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80224e2:	4618      	mov	r0, r3
 80224e4:	3728      	adds	r7, #40	@ 0x28
 80224e6:	46bd      	mov	sp, r7
 80224e8:	bd80      	pop	{r7, pc}
 80224ea:	bf00      	nop

080224ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80224ec:	b480      	push	{r7}
 80224ee:	b085      	sub	sp, #20
 80224f0:	af00      	add	r7, sp, #0
 80224f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	695b      	ldr	r3, [r3, #20]
 80224fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	699a      	ldr	r2, [r3, #24]
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	f042 0208 	orr.w	r2, r2, #8
 802250a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	681b      	ldr	r3, [r3, #0]
 8022510:	699a      	ldr	r2, [r3, #24]
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	f042 0210 	orr.w	r2, r2, #16
 802251a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	681b      	ldr	r3, [r3, #0]
 8022520:	681a      	ldr	r2, [r3, #0]
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	681b      	ldr	r3, [r3, #0]
 8022526:	f022 0201 	bic.w	r2, r2, #1
 802252a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 802252c:	687b      	ldr	r3, [r7, #4]
 802252e:	681b      	ldr	r3, [r3, #0]
 8022530:	691b      	ldr	r3, [r3, #16]
 8022532:	687a      	ldr	r2, [r7, #4]
 8022534:	6812      	ldr	r2, [r2, #0]
 8022536:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 802253a:	f023 0303 	bic.w	r3, r3, #3
 802253e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8022540:	687b      	ldr	r3, [r7, #4]
 8022542:	681b      	ldr	r3, [r3, #0]
 8022544:	689a      	ldr	r2, [r3, #8]
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 802254e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8022556:	b2db      	uxtb	r3, r3
 8022558:	2b04      	cmp	r3, #4
 802255a:	d014      	beq.n	8022586 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 802255c:	68fb      	ldr	r3, [r7, #12]
 802255e:	f003 0320 	and.w	r3, r3, #32
 8022562:	2b00      	cmp	r3, #0
 8022564:	d00f      	beq.n	8022586 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8022566:	687b      	ldr	r3, [r7, #4]
 8022568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802256c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	681b      	ldr	r3, [r3, #0]
 802257a:	699a      	ldr	r2, [r3, #24]
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	681b      	ldr	r3, [r3, #0]
 8022580:	f042 0220 	orr.w	r2, r2, #32
 8022584:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 802258c:	b2db      	uxtb	r3, r3
 802258e:	2b03      	cmp	r3, #3
 8022590:	d014      	beq.n	80225bc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8022592:	68fb      	ldr	r3, [r7, #12]
 8022594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022598:	2b00      	cmp	r3, #0
 802259a:	d00f      	beq.n	80225bc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 802259c:	687b      	ldr	r3, [r7, #4]
 802259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80225a2:	f043 0204 	orr.w	r2, r3, #4
 80225a6:	687b      	ldr	r3, [r7, #4]
 80225a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80225ac:	687b      	ldr	r3, [r7, #4]
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	699a      	ldr	r2, [r3, #24]
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	681b      	ldr	r3, [r3, #0]
 80225b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80225ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80225bc:	68fb      	ldr	r3, [r7, #12]
 80225be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d00f      	beq.n	80225e6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80225cc:	f043 0201 	orr.w	r2, r3, #1
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80225d6:	687b      	ldr	r3, [r7, #4]
 80225d8:	681b      	ldr	r3, [r3, #0]
 80225da:	699a      	ldr	r2, [r3, #24]
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	681b      	ldr	r3, [r3, #0]
 80225e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80225e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80225e6:	68fb      	ldr	r3, [r7, #12]
 80225e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80225ec:	2b00      	cmp	r3, #0
 80225ee:	d00f      	beq.n	8022610 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80225f6:	f043 0208 	orr.w	r2, r3, #8
 80225fa:	687b      	ldr	r3, [r7, #4]
 80225fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	699a      	ldr	r2, [r3, #24]
 8022606:	687b      	ldr	r3, [r7, #4]
 8022608:	681b      	ldr	r3, [r3, #0]
 802260a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802260e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	2200      	movs	r2, #0
 8022614:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	2200      	movs	r2, #0
 802261c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8022620:	bf00      	nop
 8022622:	3714      	adds	r7, #20
 8022624:	46bd      	mov	sp, r7
 8022626:	f85d 7b04 	ldr.w	r7, [sp], #4
 802262a:	4770      	bx	lr

0802262c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 802262c:	b580      	push	{r7, lr}
 802262e:	b084      	sub	sp, #16
 8022630:	af00      	add	r7, sp, #0
 8022632:	60f8      	str	r0, [r7, #12]
 8022634:	60b9      	str	r1, [r7, #8]
 8022636:	603b      	str	r3, [r7, #0]
 8022638:	4613      	mov	r3, r2
 802263a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 802263c:	e010      	b.n	8022660 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802263e:	f7f3 ff15 	bl	801646c <HAL_GetTick>
 8022642:	4602      	mov	r2, r0
 8022644:	69bb      	ldr	r3, [r7, #24]
 8022646:	1ad3      	subs	r3, r2, r3
 8022648:	683a      	ldr	r2, [r7, #0]
 802264a:	429a      	cmp	r2, r3
 802264c:	d803      	bhi.n	8022656 <SPI_WaitOnFlagUntilTimeout+0x2a>
 802264e:	683b      	ldr	r3, [r7, #0]
 8022650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022654:	d102      	bne.n	802265c <SPI_WaitOnFlagUntilTimeout+0x30>
 8022656:	683b      	ldr	r3, [r7, #0]
 8022658:	2b00      	cmp	r3, #0
 802265a:	d101      	bne.n	8022660 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 802265c:	2303      	movs	r3, #3
 802265e:	e00f      	b.n	8022680 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8022660:	68fb      	ldr	r3, [r7, #12]
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	695a      	ldr	r2, [r3, #20]
 8022666:	68bb      	ldr	r3, [r7, #8]
 8022668:	4013      	ands	r3, r2
 802266a:	68ba      	ldr	r2, [r7, #8]
 802266c:	429a      	cmp	r2, r3
 802266e:	bf0c      	ite	eq
 8022670:	2301      	moveq	r3, #1
 8022672:	2300      	movne	r3, #0
 8022674:	b2db      	uxtb	r3, r3
 8022676:	461a      	mov	r2, r3
 8022678:	79fb      	ldrb	r3, [r7, #7]
 802267a:	429a      	cmp	r2, r3
 802267c:	d0df      	beq.n	802263e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 802267e:	2300      	movs	r3, #0
}
 8022680:	4618      	mov	r0, r3
 8022682:	3710      	adds	r7, #16
 8022684:	46bd      	mov	sp, r7
 8022686:	bd80      	pop	{r7, pc}

08022688 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8022688:	b480      	push	{r7}
 802268a:	b085      	sub	sp, #20
 802268c:	af00      	add	r7, sp, #0
 802268e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8022690:	687b      	ldr	r3, [r7, #4]
 8022692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022694:	095b      	lsrs	r3, r3, #5
 8022696:	3301      	adds	r3, #1
 8022698:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	68db      	ldr	r3, [r3, #12]
 802269e:	3301      	adds	r3, #1
 80226a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80226a2:	68bb      	ldr	r3, [r7, #8]
 80226a4:	3307      	adds	r3, #7
 80226a6:	08db      	lsrs	r3, r3, #3
 80226a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80226aa:	68bb      	ldr	r3, [r7, #8]
 80226ac:	68fa      	ldr	r2, [r7, #12]
 80226ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80226b2:	4618      	mov	r0, r3
 80226b4:	3714      	adds	r7, #20
 80226b6:	46bd      	mov	sp, r7
 80226b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226bc:	4770      	bx	lr

080226be <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80226be:	b480      	push	{r7}
 80226c0:	b083      	sub	sp, #12
 80226c2:	af00      	add	r7, sp, #0
 80226c4:	6078      	str	r0, [r7, #4]
 80226c6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80226ce:	b2db      	uxtb	r3, r3
 80226d0:	2b01      	cmp	r3, #1
 80226d2:	d12e      	bne.n	8022732 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80226da:	2b01      	cmp	r3, #1
 80226dc:	d101      	bne.n	80226e2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80226de:	2302      	movs	r3, #2
 80226e0:	e028      	b.n	8022734 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	2201      	movs	r2, #1
 80226e6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	2202      	movs	r2, #2
 80226ee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	681b      	ldr	r3, [r3, #0]
 80226f6:	681a      	ldr	r2, [r3, #0]
 80226f8:	687b      	ldr	r3, [r7, #4]
 80226fa:	681b      	ldr	r3, [r3, #0]
 80226fc:	f022 0201 	bic.w	r2, r2, #1
 8022700:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8022702:	683b      	ldr	r3, [r7, #0]
 8022704:	681a      	ldr	r2, [r3, #0]
 8022706:	683b      	ldr	r3, [r7, #0]
 8022708:	685b      	ldr	r3, [r3, #4]
 802270a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 802270e:	ea42 0103 	orr.w	r1, r2, r3
 8022712:	683b      	ldr	r3, [r7, #0]
 8022714:	689a      	ldr	r2, [r3, #8]
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	430a      	orrs	r2, r1
 802271c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	2201      	movs	r2, #1
 8022722:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	2200      	movs	r2, #0
 802272a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 802272e:	2300      	movs	r3, #0
 8022730:	e000      	b.n	8022734 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8022732:	2301      	movs	r3, #1
  }
}
 8022734:	4618      	mov	r0, r3
 8022736:	370c      	adds	r7, #12
 8022738:	46bd      	mov	sp, r7
 802273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802273e:	4770      	bx	lr

08022740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022740:	b580      	push	{r7, lr}
 8022742:	b082      	sub	sp, #8
 8022744:	af00      	add	r7, sp, #0
 8022746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	2b00      	cmp	r3, #0
 802274c:	d101      	bne.n	8022752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802274e:	2301      	movs	r3, #1
 8022750:	e042      	b.n	80227d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022758:	2b00      	cmp	r3, #0
 802275a:	d106      	bne.n	802276a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	2200      	movs	r2, #0
 8022760:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022764:	6878      	ldr	r0, [r7, #4]
 8022766:	f7f3 f909 	bl	801597c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	2224      	movs	r2, #36	@ 0x24
 802276e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	681b      	ldr	r3, [r3, #0]
 8022776:	681a      	ldr	r2, [r3, #0]
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	681b      	ldr	r3, [r3, #0]
 802277c:	f022 0201 	bic.w	r2, r2, #1
 8022780:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8022782:	687b      	ldr	r3, [r7, #4]
 8022784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022786:	2b00      	cmp	r3, #0
 8022788:	d002      	beq.n	8022790 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 802278a:	6878      	ldr	r0, [r7, #4]
 802278c:	f001 f8ec 	bl	8023968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8022790:	6878      	ldr	r0, [r7, #4]
 8022792:	f000 ff47 	bl	8023624 <UART_SetConfig>
 8022796:	4603      	mov	r3, r0
 8022798:	2b01      	cmp	r3, #1
 802279a:	d101      	bne.n	80227a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 802279c:	2301      	movs	r3, #1
 802279e:	e01b      	b.n	80227d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80227a0:	687b      	ldr	r3, [r7, #4]
 80227a2:	681b      	ldr	r3, [r3, #0]
 80227a4:	685a      	ldr	r2, [r3, #4]
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80227ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	681b      	ldr	r3, [r3, #0]
 80227b4:	689a      	ldr	r2, [r3, #8]
 80227b6:	687b      	ldr	r3, [r7, #4]
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80227be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	681b      	ldr	r3, [r3, #0]
 80227c4:	681a      	ldr	r2, [r3, #0]
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	f042 0201 	orr.w	r2, r2, #1
 80227ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80227d0:	6878      	ldr	r0, [r7, #4]
 80227d2:	f001 f96b 	bl	8023aac <UART_CheckIdleState>
 80227d6:	4603      	mov	r3, r0
}
 80227d8:	4618      	mov	r0, r3
 80227da:	3708      	adds	r7, #8
 80227dc:	46bd      	mov	sp, r7
 80227de:	bd80      	pop	{r7, pc}

080227e0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80227e0:	b580      	push	{r7, lr}
 80227e2:	b082      	sub	sp, #8
 80227e4:	af00      	add	r7, sp, #0
 80227e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d101      	bne.n	80227f2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80227ee:	2301      	movs	r3, #1
 80227f0:	e031      	b.n	8022856 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	2224      	movs	r2, #36	@ 0x24
 80227f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	681a      	ldr	r2, [r3, #0]
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	681b      	ldr	r3, [r3, #0]
 8022804:	f022 0201 	bic.w	r2, r2, #1
 8022808:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 802280a:	687b      	ldr	r3, [r7, #4]
 802280c:	681b      	ldr	r3, [r3, #0]
 802280e:	2200      	movs	r2, #0
 8022810:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	681b      	ldr	r3, [r3, #0]
 8022816:	2200      	movs	r2, #0
 8022818:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 802281a:	687b      	ldr	r3, [r7, #4]
 802281c:	681b      	ldr	r3, [r3, #0]
 802281e:	2200      	movs	r2, #0
 8022820:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8022822:	6878      	ldr	r0, [r7, #4]
 8022824:	f7f3 f97e 	bl	8015b24 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	2200      	movs	r2, #0
 802282c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	2200      	movs	r2, #0
 8022834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	2200      	movs	r2, #0
 802283c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	2200      	movs	r2, #0
 8022844:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	2200      	movs	r2, #0
 802284a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	2200      	movs	r2, #0
 8022850:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022854:	2300      	movs	r3, #0
}
 8022856:	4618      	mov	r0, r3
 8022858:	3708      	adds	r7, #8
 802285a:	46bd      	mov	sp, r7
 802285c:	bd80      	pop	{r7, pc}

0802285e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802285e:	b580      	push	{r7, lr}
 8022860:	b08a      	sub	sp, #40	@ 0x28
 8022862:	af02      	add	r7, sp, #8
 8022864:	60f8      	str	r0, [r7, #12]
 8022866:	60b9      	str	r1, [r7, #8]
 8022868:	603b      	str	r3, [r7, #0]
 802286a:	4613      	mov	r3, r2
 802286c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802286e:	68fb      	ldr	r3, [r7, #12]
 8022870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022874:	2b20      	cmp	r3, #32
 8022876:	f040 808b 	bne.w	8022990 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 802287a:	68bb      	ldr	r3, [r7, #8]
 802287c:	2b00      	cmp	r3, #0
 802287e:	d002      	beq.n	8022886 <HAL_UART_Transmit+0x28>
 8022880:	88fb      	ldrh	r3, [r7, #6]
 8022882:	2b00      	cmp	r3, #0
 8022884:	d101      	bne.n	802288a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8022886:	2301      	movs	r3, #1
 8022888:	e083      	b.n	8022992 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 802288a:	68fb      	ldr	r3, [r7, #12]
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	689b      	ldr	r3, [r3, #8]
 8022890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022894:	2b80      	cmp	r3, #128	@ 0x80
 8022896:	d107      	bne.n	80228a8 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	689a      	ldr	r2, [r3, #8]
 802289e:	68fb      	ldr	r3, [r7, #12]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80228a6:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80228a8:	68fb      	ldr	r3, [r7, #12]
 80228aa:	2200      	movs	r2, #0
 80228ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	2221      	movs	r2, #33	@ 0x21
 80228b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80228b8:	f7f3 fdd8 	bl	801646c <HAL_GetTick>
 80228bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80228be:	68fb      	ldr	r3, [r7, #12]
 80228c0:	88fa      	ldrh	r2, [r7, #6]
 80228c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80228c6:	68fb      	ldr	r3, [r7, #12]
 80228c8:	88fa      	ldrh	r2, [r7, #6]
 80228ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80228ce:	68fb      	ldr	r3, [r7, #12]
 80228d0:	689b      	ldr	r3, [r3, #8]
 80228d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80228d6:	d108      	bne.n	80228ea <HAL_UART_Transmit+0x8c>
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	691b      	ldr	r3, [r3, #16]
 80228dc:	2b00      	cmp	r3, #0
 80228de:	d104      	bne.n	80228ea <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80228e0:	2300      	movs	r3, #0
 80228e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80228e4:	68bb      	ldr	r3, [r7, #8]
 80228e6:	61bb      	str	r3, [r7, #24]
 80228e8:	e003      	b.n	80228f2 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80228ea:	68bb      	ldr	r3, [r7, #8]
 80228ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80228ee:	2300      	movs	r3, #0
 80228f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80228f2:	e030      	b.n	8022956 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80228f4:	683b      	ldr	r3, [r7, #0]
 80228f6:	9300      	str	r3, [sp, #0]
 80228f8:	697b      	ldr	r3, [r7, #20]
 80228fa:	2200      	movs	r2, #0
 80228fc:	2180      	movs	r1, #128	@ 0x80
 80228fe:	68f8      	ldr	r0, [r7, #12]
 8022900:	f001 f97e 	bl	8023c00 <UART_WaitOnFlagUntilTimeout>
 8022904:	4603      	mov	r3, r0
 8022906:	2b00      	cmp	r3, #0
 8022908:	d005      	beq.n	8022916 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 802290a:	68fb      	ldr	r3, [r7, #12]
 802290c:	2220      	movs	r2, #32
 802290e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8022912:	2303      	movs	r3, #3
 8022914:	e03d      	b.n	8022992 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8022916:	69fb      	ldr	r3, [r7, #28]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d10b      	bne.n	8022934 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 802291c:	69bb      	ldr	r3, [r7, #24]
 802291e:	881b      	ldrh	r3, [r3, #0]
 8022920:	461a      	mov	r2, r3
 8022922:	68fb      	ldr	r3, [r7, #12]
 8022924:	681b      	ldr	r3, [r3, #0]
 8022926:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802292a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 802292c:	69bb      	ldr	r3, [r7, #24]
 802292e:	3302      	adds	r3, #2
 8022930:	61bb      	str	r3, [r7, #24]
 8022932:	e007      	b.n	8022944 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8022934:	69fb      	ldr	r3, [r7, #28]
 8022936:	781a      	ldrb	r2, [r3, #0]
 8022938:	68fb      	ldr	r3, [r7, #12]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 802293e:	69fb      	ldr	r3, [r7, #28]
 8022940:	3301      	adds	r3, #1
 8022942:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8022944:	68fb      	ldr	r3, [r7, #12]
 8022946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 802294a:	b29b      	uxth	r3, r3
 802294c:	3b01      	subs	r3, #1
 802294e:	b29a      	uxth	r2, r3
 8022950:	68fb      	ldr	r3, [r7, #12]
 8022952:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 802295c:	b29b      	uxth	r3, r3
 802295e:	2b00      	cmp	r3, #0
 8022960:	d1c8      	bne.n	80228f4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8022962:	683b      	ldr	r3, [r7, #0]
 8022964:	9300      	str	r3, [sp, #0]
 8022966:	697b      	ldr	r3, [r7, #20]
 8022968:	2200      	movs	r2, #0
 802296a:	2140      	movs	r1, #64	@ 0x40
 802296c:	68f8      	ldr	r0, [r7, #12]
 802296e:	f001 f947 	bl	8023c00 <UART_WaitOnFlagUntilTimeout>
 8022972:	4603      	mov	r3, r0
 8022974:	2b00      	cmp	r3, #0
 8022976:	d005      	beq.n	8022984 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8022978:	68fb      	ldr	r3, [r7, #12]
 802297a:	2220      	movs	r2, #32
 802297c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8022980:	2303      	movs	r3, #3
 8022982:	e006      	b.n	8022992 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8022984:	68fb      	ldr	r3, [r7, #12]
 8022986:	2220      	movs	r2, #32
 8022988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 802298c:	2300      	movs	r3, #0
 802298e:	e000      	b.n	8022992 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8022990:	2302      	movs	r3, #2
  }
}
 8022992:	4618      	mov	r0, r3
 8022994:	3720      	adds	r7, #32
 8022996:	46bd      	mov	sp, r7
 8022998:	bd80      	pop	{r7, pc}

0802299a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802299a:	b580      	push	{r7, lr}
 802299c:	b08a      	sub	sp, #40	@ 0x28
 802299e:	af02      	add	r7, sp, #8
 80229a0:	60f8      	str	r0, [r7, #12]
 80229a2:	60b9      	str	r1, [r7, #8]
 80229a4:	603b      	str	r3, [r7, #0]
 80229a6:	4613      	mov	r3, r2
 80229a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80229aa:	68fb      	ldr	r3, [r7, #12]
 80229ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80229b0:	2b20      	cmp	r3, #32
 80229b2:	f040 80c4 	bne.w	8022b3e <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 80229b6:	68bb      	ldr	r3, [r7, #8]
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d002      	beq.n	80229c2 <HAL_UART_Receive+0x28>
 80229bc:	88fb      	ldrh	r3, [r7, #6]
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d101      	bne.n	80229c6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80229c2:	2301      	movs	r3, #1
 80229c4:	e0bc      	b.n	8022b40 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80229c6:	68fb      	ldr	r3, [r7, #12]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	689b      	ldr	r3, [r3, #8]
 80229cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80229d0:	2b40      	cmp	r3, #64	@ 0x40
 80229d2:	d107      	bne.n	80229e4 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80229d4:	68fb      	ldr	r3, [r7, #12]
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	689a      	ldr	r2, [r3, #8]
 80229da:	68fb      	ldr	r3, [r7, #12]
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80229e2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80229e4:	68fb      	ldr	r3, [r7, #12]
 80229e6:	2200      	movs	r2, #0
 80229e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80229ec:	68fb      	ldr	r3, [r7, #12]
 80229ee:	2222      	movs	r2, #34	@ 0x22
 80229f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80229f4:	68fb      	ldr	r3, [r7, #12]
 80229f6:	2200      	movs	r2, #0
 80229f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80229fa:	f7f3 fd37 	bl	801646c <HAL_GetTick>
 80229fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8022a00:	68fb      	ldr	r3, [r7, #12]
 8022a02:	88fa      	ldrh	r2, [r7, #6]
 8022a04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8022a08:	68fb      	ldr	r3, [r7, #12]
 8022a0a:	88fa      	ldrh	r2, [r7, #6]
 8022a0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8022a10:	68fb      	ldr	r3, [r7, #12]
 8022a12:	689b      	ldr	r3, [r3, #8]
 8022a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8022a18:	d10e      	bne.n	8022a38 <HAL_UART_Receive+0x9e>
 8022a1a:	68fb      	ldr	r3, [r7, #12]
 8022a1c:	691b      	ldr	r3, [r3, #16]
 8022a1e:	2b00      	cmp	r3, #0
 8022a20:	d105      	bne.n	8022a2e <HAL_UART_Receive+0x94>
 8022a22:	68fb      	ldr	r3, [r7, #12]
 8022a24:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8022a28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8022a2c:	e02d      	b.n	8022a8a <HAL_UART_Receive+0xf0>
 8022a2e:	68fb      	ldr	r3, [r7, #12]
 8022a30:	22ff      	movs	r2, #255	@ 0xff
 8022a32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8022a36:	e028      	b.n	8022a8a <HAL_UART_Receive+0xf0>
 8022a38:	68fb      	ldr	r3, [r7, #12]
 8022a3a:	689b      	ldr	r3, [r3, #8]
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	d10d      	bne.n	8022a5c <HAL_UART_Receive+0xc2>
 8022a40:	68fb      	ldr	r3, [r7, #12]
 8022a42:	691b      	ldr	r3, [r3, #16]
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	d104      	bne.n	8022a52 <HAL_UART_Receive+0xb8>
 8022a48:	68fb      	ldr	r3, [r7, #12]
 8022a4a:	22ff      	movs	r2, #255	@ 0xff
 8022a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8022a50:	e01b      	b.n	8022a8a <HAL_UART_Receive+0xf0>
 8022a52:	68fb      	ldr	r3, [r7, #12]
 8022a54:	227f      	movs	r2, #127	@ 0x7f
 8022a56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8022a5a:	e016      	b.n	8022a8a <HAL_UART_Receive+0xf0>
 8022a5c:	68fb      	ldr	r3, [r7, #12]
 8022a5e:	689b      	ldr	r3, [r3, #8]
 8022a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8022a64:	d10d      	bne.n	8022a82 <HAL_UART_Receive+0xe8>
 8022a66:	68fb      	ldr	r3, [r7, #12]
 8022a68:	691b      	ldr	r3, [r3, #16]
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	d104      	bne.n	8022a78 <HAL_UART_Receive+0xde>
 8022a6e:	68fb      	ldr	r3, [r7, #12]
 8022a70:	227f      	movs	r2, #127	@ 0x7f
 8022a72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8022a76:	e008      	b.n	8022a8a <HAL_UART_Receive+0xf0>
 8022a78:	68fb      	ldr	r3, [r7, #12]
 8022a7a:	223f      	movs	r2, #63	@ 0x3f
 8022a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8022a80:	e003      	b.n	8022a8a <HAL_UART_Receive+0xf0>
 8022a82:	68fb      	ldr	r3, [r7, #12]
 8022a84:	2200      	movs	r2, #0
 8022a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8022a8a:	68fb      	ldr	r3, [r7, #12]
 8022a8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8022a90:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022a92:	68fb      	ldr	r3, [r7, #12]
 8022a94:	689b      	ldr	r3, [r3, #8]
 8022a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8022a9a:	d108      	bne.n	8022aae <HAL_UART_Receive+0x114>
 8022a9c:	68fb      	ldr	r3, [r7, #12]
 8022a9e:	691b      	ldr	r3, [r3, #16]
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d104      	bne.n	8022aae <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8022aa8:	68bb      	ldr	r3, [r7, #8]
 8022aaa:	61bb      	str	r3, [r7, #24]
 8022aac:	e003      	b.n	8022ab6 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8022aae:	68bb      	ldr	r3, [r7, #8]
 8022ab0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8022ab6:	e036      	b.n	8022b26 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8022ab8:	683b      	ldr	r3, [r7, #0]
 8022aba:	9300      	str	r3, [sp, #0]
 8022abc:	697b      	ldr	r3, [r7, #20]
 8022abe:	2200      	movs	r2, #0
 8022ac0:	2120      	movs	r1, #32
 8022ac2:	68f8      	ldr	r0, [r7, #12]
 8022ac4:	f001 f89c 	bl	8023c00 <UART_WaitOnFlagUntilTimeout>
 8022ac8:	4603      	mov	r3, r0
 8022aca:	2b00      	cmp	r3, #0
 8022acc:	d005      	beq.n	8022ada <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8022ace:	68fb      	ldr	r3, [r7, #12]
 8022ad0:	2220      	movs	r2, #32
 8022ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8022ad6:	2303      	movs	r3, #3
 8022ad8:	e032      	b.n	8022b40 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 8022ada:	69fb      	ldr	r3, [r7, #28]
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d10c      	bne.n	8022afa <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8022ae0:	68fb      	ldr	r3, [r7, #12]
 8022ae2:	681b      	ldr	r3, [r3, #0]
 8022ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022ae6:	b29a      	uxth	r2, r3
 8022ae8:	8a7b      	ldrh	r3, [r7, #18]
 8022aea:	4013      	ands	r3, r2
 8022aec:	b29a      	uxth	r2, r3
 8022aee:	69bb      	ldr	r3, [r7, #24]
 8022af0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8022af2:	69bb      	ldr	r3, [r7, #24]
 8022af4:	3302      	adds	r3, #2
 8022af6:	61bb      	str	r3, [r7, #24]
 8022af8:	e00c      	b.n	8022b14 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8022afa:	68fb      	ldr	r3, [r7, #12]
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022b00:	b2da      	uxtb	r2, r3
 8022b02:	8a7b      	ldrh	r3, [r7, #18]
 8022b04:	b2db      	uxtb	r3, r3
 8022b06:	4013      	ands	r3, r2
 8022b08:	b2da      	uxtb	r2, r3
 8022b0a:	69fb      	ldr	r3, [r7, #28]
 8022b0c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8022b0e:	69fb      	ldr	r3, [r7, #28]
 8022b10:	3301      	adds	r3, #1
 8022b12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8022b1a:	b29b      	uxth	r3, r3
 8022b1c:	3b01      	subs	r3, #1
 8022b1e:	b29a      	uxth	r2, r3
 8022b20:	68fb      	ldr	r3, [r7, #12]
 8022b22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8022b26:	68fb      	ldr	r3, [r7, #12]
 8022b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8022b2c:	b29b      	uxth	r3, r3
 8022b2e:	2b00      	cmp	r3, #0
 8022b30:	d1c2      	bne.n	8022ab8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8022b32:	68fb      	ldr	r3, [r7, #12]
 8022b34:	2220      	movs	r2, #32
 8022b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8022b3a:	2300      	movs	r3, #0
 8022b3c:	e000      	b.n	8022b40 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8022b3e:	2302      	movs	r3, #2
  }
}
 8022b40:	4618      	mov	r0, r3
 8022b42:	3720      	adds	r7, #32
 8022b44:	46bd      	mov	sp, r7
 8022b46:	bd80      	pop	{r7, pc}

08022b48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8022b48:	b580      	push	{r7, lr}
 8022b4a:	b08a      	sub	sp, #40	@ 0x28
 8022b4c:	af00      	add	r7, sp, #0
 8022b4e:	60f8      	str	r0, [r7, #12]
 8022b50:	60b9      	str	r1, [r7, #8]
 8022b52:	4613      	mov	r3, r2
 8022b54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8022b56:	68fb      	ldr	r3, [r7, #12]
 8022b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8022b5c:	2b20      	cmp	r3, #32
 8022b5e:	d14b      	bne.n	8022bf8 <HAL_UART_Receive_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8022b60:	68bb      	ldr	r3, [r7, #8]
 8022b62:	2b00      	cmp	r3, #0
 8022b64:	d002      	beq.n	8022b6c <HAL_UART_Receive_IT+0x24>
 8022b66:	88fb      	ldrh	r3, [r7, #6]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d101      	bne.n	8022b70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8022b6c:	2301      	movs	r3, #1
 8022b6e:	e044      	b.n	8022bfa <HAL_UART_Receive_IT+0xb2>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022b70:	68fb      	ldr	r3, [r7, #12]
 8022b72:	2200      	movs	r2, #0
 8022b74:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022b76:	68fb      	ldr	r3, [r7, #12]
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	689b      	ldr	r3, [r3, #8]
 8022b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022b80:	2b40      	cmp	r3, #64	@ 0x40
 8022b82:	d107      	bne.n	8022b94 <HAL_UART_Receive_IT+0x4c>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	681b      	ldr	r3, [r3, #0]
 8022b88:	689a      	ldr	r2, [r3, #8]
 8022b8a:	68fb      	ldr	r3, [r7, #12]
 8022b8c:	681b      	ldr	r3, [r3, #0]
 8022b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8022b92:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8022b94:	68fb      	ldr	r3, [r7, #12]
 8022b96:	681b      	ldr	r3, [r3, #0]
 8022b98:	4a1a      	ldr	r2, [pc, #104]	@ (8022c04 <HAL_UART_Receive_IT+0xbc>)
 8022b9a:	4293      	cmp	r3, r2
 8022b9c:	d024      	beq.n	8022be8 <HAL_UART_Receive_IT+0xa0>
 8022b9e:	68fb      	ldr	r3, [r7, #12]
 8022ba0:	681b      	ldr	r3, [r3, #0]
 8022ba2:	4a19      	ldr	r2, [pc, #100]	@ (8022c08 <HAL_UART_Receive_IT+0xc0>)
 8022ba4:	4293      	cmp	r3, r2
 8022ba6:	d01f      	beq.n	8022be8 <HAL_UART_Receive_IT+0xa0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8022ba8:	68fb      	ldr	r3, [r7, #12]
 8022baa:	681b      	ldr	r3, [r3, #0]
 8022bac:	685b      	ldr	r3, [r3, #4]
 8022bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8022bb2:	2b00      	cmp	r3, #0
 8022bb4:	d018      	beq.n	8022be8 <HAL_UART_Receive_IT+0xa0>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8022bb6:	68fb      	ldr	r3, [r7, #12]
 8022bb8:	681b      	ldr	r3, [r3, #0]
 8022bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022bbc:	697b      	ldr	r3, [r7, #20]
 8022bbe:	e853 3f00 	ldrex	r3, [r3]
 8022bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8022bc4:	693b      	ldr	r3, [r7, #16]
 8022bc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8022bca:	627b      	str	r3, [r7, #36]	@ 0x24
 8022bcc:	68fb      	ldr	r3, [r7, #12]
 8022bce:	681b      	ldr	r3, [r3, #0]
 8022bd0:	461a      	mov	r2, r3
 8022bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022bd4:	623b      	str	r3, [r7, #32]
 8022bd6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022bd8:	69f9      	ldr	r1, [r7, #28]
 8022bda:	6a3a      	ldr	r2, [r7, #32]
 8022bdc:	e841 2300 	strex	r3, r2, [r1]
 8022be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8022be2:	69bb      	ldr	r3, [r7, #24]
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d1e6      	bne.n	8022bb6 <HAL_UART_Receive_IT+0x6e>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8022be8:	88fb      	ldrh	r3, [r7, #6]
 8022bea:	461a      	mov	r2, r3
 8022bec:	68b9      	ldr	r1, [r7, #8]
 8022bee:	68f8      	ldr	r0, [r7, #12]
 8022bf0:	f001 f86e 	bl	8023cd0 <UART_Start_Receive_IT>
 8022bf4:	4603      	mov	r3, r0
 8022bf6:	e000      	b.n	8022bfa <HAL_UART_Receive_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8022bf8:	2302      	movs	r3, #2
  }
}
 8022bfa:	4618      	mov	r0, r3
 8022bfc:	3728      	adds	r7, #40	@ 0x28
 8022bfe:	46bd      	mov	sp, r7
 8022c00:	bd80      	pop	{r7, pc}
 8022c02:	bf00      	nop
 8022c04:	46002400 	.word	0x46002400
 8022c08:	56002400 	.word	0x56002400

08022c0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8022c0c:	b580      	push	{r7, lr}
 8022c0e:	b08c      	sub	sp, #48	@ 0x30
 8022c10:	af00      	add	r7, sp, #0
 8022c12:	60f8      	str	r0, [r7, #12]
 8022c14:	60b9      	str	r1, [r7, #8]
 8022c16:	4613      	mov	r3, r2
 8022c18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8022c1a:	88fb      	ldrh	r3, [r7, #6]
 8022c1c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8022c1e:	68fb      	ldr	r3, [r7, #12]
 8022c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022c24:	2b20      	cmp	r3, #32
 8022c26:	f040 80ad 	bne.w	8022d84 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 8022c2a:	68bb      	ldr	r3, [r7, #8]
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d002      	beq.n	8022c36 <HAL_UART_Transmit_DMA+0x2a>
 8022c30:	88fb      	ldrh	r3, [r7, #6]
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	d101      	bne.n	8022c3a <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 8022c36:	2301      	movs	r3, #1
 8022c38:	e0a5      	b.n	8022d86 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 8022c3a:	68fb      	ldr	r3, [r7, #12]
 8022c3c:	68ba      	ldr	r2, [r7, #8]
 8022c3e:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8022c40:	68fb      	ldr	r3, [r7, #12]
 8022c42:	88fa      	ldrh	r2, [r7, #6]
 8022c44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8022c48:	68fb      	ldr	r3, [r7, #12]
 8022c4a:	88fa      	ldrh	r2, [r7, #6]
 8022c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	2200      	movs	r2, #0
 8022c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8022c58:	68fb      	ldr	r3, [r7, #12]
 8022c5a:	2221      	movs	r2, #33	@ 0x21
 8022c5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8022c60:	68fb      	ldr	r3, [r7, #12]
 8022c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022c64:	2b00      	cmp	r3, #0
 8022c66:	d06d      	beq.n	8022d44 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022c6c:	4a48      	ldr	r2, [pc, #288]	@ (8022d90 <HAL_UART_Transmit_DMA+0x184>)
 8022c6e:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8022c70:	68fb      	ldr	r3, [r7, #12]
 8022c72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022c74:	4a47      	ldr	r2, [pc, #284]	@ (8022d94 <HAL_UART_Transmit_DMA+0x188>)
 8022c76:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8022c78:	68fb      	ldr	r3, [r7, #12]
 8022c7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022c7c:	4a46      	ldr	r2, [pc, #280]	@ (8022d98 <HAL_UART_Transmit_DMA+0x18c>)
 8022c7e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8022c80:	68fb      	ldr	r3, [r7, #12]
 8022c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022c84:	2200      	movs	r2, #0
 8022c86:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8022c88:	68fb      	ldr	r3, [r7, #12]
 8022c8a:	689b      	ldr	r3, [r3, #8]
 8022c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8022c90:	d106      	bne.n	8022ca0 <HAL_UART_Transmit_DMA+0x94>
 8022c92:	68fb      	ldr	r3, [r7, #12]
 8022c94:	691b      	ldr	r3, [r3, #16]
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	d102      	bne.n	8022ca0 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 8022c9a:	88fb      	ldrh	r3, [r7, #6]
 8022c9c:	005b      	lsls	r3, r3, #1
 8022c9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8022ca0:	68fb      	ldr	r3, [r7, #12]
 8022ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d02d      	beq.n	8022d0a <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 8022cae:	68fb      	ldr	r3, [r7, #12]
 8022cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022cb4:	2b00      	cmp	r3, #0
 8022cb6:	d024      	beq.n	8022d02 <HAL_UART_Transmit_DMA+0xf6>
 8022cb8:	68fb      	ldr	r3, [r7, #12]
 8022cba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022cbe:	681b      	ldr	r3, [r3, #0]
 8022cc0:	2b00      	cmp	r3, #0
 8022cc2:	d01e      	beq.n	8022d02 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8022cc4:	68fb      	ldr	r3, [r7, #12]
 8022cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8022cce:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 8022cd0:	68fb      	ldr	r3, [r7, #12]
 8022cd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8022cd4:	68fb      	ldr	r3, [r7, #12]
 8022cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022cda:	681b      	ldr	r3, [r3, #0]
 8022cdc:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 8022cde:	68fb      	ldr	r3, [r7, #12]
 8022ce0:	681b      	ldr	r3, [r3, #0]
 8022ce2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 8022ce6:	68fb      	ldr	r3, [r7, #12]
 8022ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022cec:	681b      	ldr	r3, [r3, #0]
 8022cee:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8022cf0:	68fb      	ldr	r3, [r7, #12]
 8022cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8022cf4:	4618      	mov	r0, r3
 8022cf6:	f7f6 f90d 	bl	8018f14 <HAL_DMAEx_List_Start_IT>
 8022cfa:	4603      	mov	r3, r0
 8022cfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8022d00:	e012      	b.n	8022d28 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 8022d02:	2301      	movs	r3, #1
 8022d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8022d08:	e00e      	b.n	8022d28 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 8022d0a:	68fb      	ldr	r3, [r7, #12]
 8022d0c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8022d0e:	68fb      	ldr	r3, [r7, #12]
 8022d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022d12:	4619      	mov	r1, r3
 8022d14:	68fb      	ldr	r3, [r7, #12]
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	3328      	adds	r3, #40	@ 0x28
 8022d1a:	461a      	mov	r2, r3
 8022d1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8022d1e:	f7f5 ffc3 	bl	8018ca8 <HAL_DMA_Start_IT>
 8022d22:	4603      	mov	r3, r0
 8022d24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 8022d28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d009      	beq.n	8022d44 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8022d30:	68fb      	ldr	r3, [r7, #12]
 8022d32:	2210      	movs	r2, #16
 8022d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8022d38:	68fb      	ldr	r3, [r7, #12]
 8022d3a:	2220      	movs	r2, #32
 8022d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8022d40:	2301      	movs	r3, #1
 8022d42:	e020      	b.n	8022d86 <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8022d44:	68fb      	ldr	r3, [r7, #12]
 8022d46:	681b      	ldr	r3, [r3, #0]
 8022d48:	2240      	movs	r2, #64	@ 0x40
 8022d4a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8022d4c:	68fb      	ldr	r3, [r7, #12]
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	3308      	adds	r3, #8
 8022d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022d54:	69bb      	ldr	r3, [r7, #24]
 8022d56:	e853 3f00 	ldrex	r3, [r3]
 8022d5a:	617b      	str	r3, [r7, #20]
   return(result);
 8022d5c:	697b      	ldr	r3, [r7, #20]
 8022d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022d64:	68fb      	ldr	r3, [r7, #12]
 8022d66:	681b      	ldr	r3, [r3, #0]
 8022d68:	3308      	adds	r3, #8
 8022d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8022d6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8022d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022d70:	6a39      	ldr	r1, [r7, #32]
 8022d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022d74:	e841 2300 	strex	r3, r2, [r1]
 8022d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8022d7a:	69fb      	ldr	r3, [r7, #28]
 8022d7c:	2b00      	cmp	r3, #0
 8022d7e:	d1e5      	bne.n	8022d4c <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 8022d80:	2300      	movs	r3, #0
 8022d82:	e000      	b.n	8022d86 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8022d84:	2302      	movs	r3, #2
  }
}
 8022d86:	4618      	mov	r0, r3
 8022d88:	3730      	adds	r7, #48	@ 0x30
 8022d8a:	46bd      	mov	sp, r7
 8022d8c:	bd80      	pop	{r7, pc}
 8022d8e:	bf00      	nop
 8022d90:	08024063 	.word	0x08024063
 8022d94:	080240c3 	.word	0x080240c3
 8022d98:	080240df 	.word	0x080240df

08022d9c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8022d9c:	b580      	push	{r7, lr}
 8022d9e:	b094      	sub	sp, #80	@ 0x50
 8022da0:	af00      	add	r7, sp, #0
 8022da2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	681b      	ldr	r3, [r3, #0]
 8022da8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022dac:	e853 3f00 	ldrex	r3, [r3]
 8022db0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8022db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022dba:	687b      	ldr	r3, [r7, #4]
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	461a      	mov	r2, r3
 8022dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022dc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8022dc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022dc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022dc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022dca:	e841 2300 	strex	r3, r2, [r1]
 8022dce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8022dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022dd2:	2b00      	cmp	r3, #0
 8022dd4:	d1e6      	bne.n	8022da4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	681b      	ldr	r3, [r3, #0]
 8022dda:	3308      	adds	r3, #8
 8022ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022dde:	6a3b      	ldr	r3, [r7, #32]
 8022de0:	e853 3f00 	ldrex	r3, [r3]
 8022de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8022de6:	69fb      	ldr	r3, [r7, #28]
 8022de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022dec:	f023 0301 	bic.w	r3, r3, #1
 8022df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022df2:	687b      	ldr	r3, [r7, #4]
 8022df4:	681b      	ldr	r3, [r3, #0]
 8022df6:	3308      	adds	r3, #8
 8022df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8022dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022e02:	e841 2300 	strex	r3, r2, [r1]
 8022e06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	d1e3      	bne.n	8022dd6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022e12:	2b01      	cmp	r3, #1
 8022e14:	d118      	bne.n	8022e48 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8022e16:	687b      	ldr	r3, [r7, #4]
 8022e18:	681b      	ldr	r3, [r3, #0]
 8022e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022e1c:	68fb      	ldr	r3, [r7, #12]
 8022e1e:	e853 3f00 	ldrex	r3, [r3]
 8022e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8022e24:	68bb      	ldr	r3, [r7, #8]
 8022e26:	f023 0310 	bic.w	r3, r3, #16
 8022e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	681b      	ldr	r3, [r3, #0]
 8022e30:	461a      	mov	r2, r3
 8022e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022e34:	61bb      	str	r3, [r7, #24]
 8022e36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022e38:	6979      	ldr	r1, [r7, #20]
 8022e3a:	69ba      	ldr	r2, [r7, #24]
 8022e3c:	e841 2300 	strex	r3, r2, [r1]
 8022e40:	613b      	str	r3, [r7, #16]
   return(result);
 8022e42:	693b      	ldr	r3, [r7, #16]
 8022e44:	2b00      	cmp	r3, #0
 8022e46:	d1e6      	bne.n	8022e16 <HAL_UART_AbortReceive+0x7a>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	681b      	ldr	r3, [r3, #0]
 8022e4c:	689b      	ldr	r3, [r3, #8]
 8022e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022e52:	2b40      	cmp	r3, #64	@ 0x40
 8022e54:	d121      	bne.n	8022e9a <HAL_UART_AbortReceive+0xfe>
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022e5c:	2b00      	cmp	r3, #0
 8022e5e:	d01c      	beq.n	8022e9a <HAL_UART_AbortReceive+0xfe>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8022e60:	687b      	ldr	r3, [r7, #4]
 8022e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022e66:	2200      	movs	r2, #0
 8022e68:	66da      	str	r2, [r3, #108]	@ 0x6c

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022e70:	4618      	mov	r0, r3
 8022e72:	f7f5 ff79 	bl	8018d68 <HAL_DMA_Abort>
 8022e76:	4603      	mov	r3, r0
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	d00e      	beq.n	8022e9a <HAL_UART_AbortReceive+0xfe>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022e82:	4618      	mov	r0, r3
 8022e84:	f7f6 f815 	bl	8018eb2 <HAL_DMA_GetError>
 8022e88:	4603      	mov	r3, r0
 8022e8a:	2b10      	cmp	r3, #16
 8022e8c:	d105      	bne.n	8022e9a <HAL_UART_AbortReceive+0xfe>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	2210      	movs	r2, #16
 8022e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8022e96:	2303      	movs	r3, #3
 8022e98:	e017      	b.n	8022eca <HAL_UART_AbortReceive+0x12e>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	2200      	movs	r2, #0
 8022e9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	681b      	ldr	r3, [r3, #0]
 8022ea6:	220f      	movs	r2, #15
 8022ea8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	681b      	ldr	r3, [r3, #0]
 8022eae:	699a      	ldr	r2, [r3, #24]
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	f042 0208 	orr.w	r2, r2, #8
 8022eb8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022eba:	687b      	ldr	r3, [r7, #4]
 8022ebc:	2220      	movs	r2, #32
 8022ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022ec2:	687b      	ldr	r3, [r7, #4]
 8022ec4:	2200      	movs	r2, #0
 8022ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8022ec8:	2300      	movs	r3, #0
}
 8022eca:	4618      	mov	r0, r3
 8022ecc:	3750      	adds	r7, #80	@ 0x50
 8022ece:	46bd      	mov	sp, r7
 8022ed0:	bd80      	pop	{r7, pc}
	...

08022ed4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8022ed4:	b580      	push	{r7, lr}
 8022ed6:	b094      	sub	sp, #80	@ 0x50
 8022ed8:	af00      	add	r7, sp, #0
 8022eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	681b      	ldr	r3, [r3, #0]
 8022ee0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022ee4:	e853 3f00 	ldrex	r3, [r3]
 8022ee8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8022eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022eec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022ef2:	687b      	ldr	r3, [r7, #4]
 8022ef4:	681b      	ldr	r3, [r3, #0]
 8022ef6:	461a      	mov	r2, r3
 8022ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8022efc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022efe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022f00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022f02:	e841 2300 	strex	r3, r2, [r1]
 8022f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8022f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	d1e6      	bne.n	8022edc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8022f0e:	687b      	ldr	r3, [r7, #4]
 8022f10:	681b      	ldr	r3, [r3, #0]
 8022f12:	3308      	adds	r3, #8
 8022f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022f16:	6a3b      	ldr	r3, [r7, #32]
 8022f18:	e853 3f00 	ldrex	r3, [r3]
 8022f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8022f1e:	69fb      	ldr	r3, [r7, #28]
 8022f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022f24:	f023 0301 	bic.w	r3, r3, #1
 8022f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8022f2a:	687b      	ldr	r3, [r7, #4]
 8022f2c:	681b      	ldr	r3, [r3, #0]
 8022f2e:	3308      	adds	r3, #8
 8022f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8022f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022f36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022f3a:	e841 2300 	strex	r3, r2, [r1]
 8022f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022f42:	2b00      	cmp	r3, #0
 8022f44:	d1e3      	bne.n	8022f0e <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022f46:	687b      	ldr	r3, [r7, #4]
 8022f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022f4a:	2b01      	cmp	r3, #1
 8022f4c:	d118      	bne.n	8022f80 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8022f4e:	687b      	ldr	r3, [r7, #4]
 8022f50:	681b      	ldr	r3, [r3, #0]
 8022f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022f54:	68fb      	ldr	r3, [r7, #12]
 8022f56:	e853 3f00 	ldrex	r3, [r3]
 8022f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8022f5c:	68bb      	ldr	r3, [r7, #8]
 8022f5e:	f023 0310 	bic.w	r3, r3, #16
 8022f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8022f64:	687b      	ldr	r3, [r7, #4]
 8022f66:	681b      	ldr	r3, [r3, #0]
 8022f68:	461a      	mov	r2, r3
 8022f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022f6c:	61bb      	str	r3, [r7, #24]
 8022f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022f70:	6979      	ldr	r1, [r7, #20]
 8022f72:	69ba      	ldr	r2, [r7, #24]
 8022f74:	e841 2300 	strex	r3, r2, [r1]
 8022f78:	613b      	str	r3, [r7, #16]
   return(result);
 8022f7a:	693b      	ldr	r3, [r7, #16]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	d1e6      	bne.n	8022f4e <HAL_UART_AbortReceive_IT+0x7a>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	681b      	ldr	r3, [r3, #0]
 8022f84:	689b      	ldr	r3, [r3, #8]
 8022f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022f8a:	2b40      	cmp	r3, #64	@ 0x40
 8022f8c:	d13a      	bne.n	8023004 <HAL_UART_AbortReceive_IT+0x130>
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022f94:	2b00      	cmp	r3, #0
 8022f96:	d017      	beq.n	8022fc8 <HAL_UART_AbortReceive_IT+0xf4>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022f9e:	4a26      	ldr	r2, [pc, #152]	@ (8023038 <HAL_UART_AbortReceive_IT+0x164>)
 8022fa0:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022fa8:	4618      	mov	r0, r3
 8022faa:	f7f5 ff59 	bl	8018e60 <HAL_DMA_Abort_IT>
 8022fae:	4603      	mov	r3, r0
 8022fb0:	2b00      	cmp	r3, #0
 8022fb2:	d03c      	beq.n	802302e <HAL_UART_AbortReceive_IT+0x15a>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8022fb4:	687b      	ldr	r3, [r7, #4]
 8022fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8022fbc:	687a      	ldr	r2, [r7, #4]
 8022fbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8022fc2:	4610      	mov	r0, r2
 8022fc4:	4798      	blx	r3
 8022fc6:	e032      	b.n	802302e <HAL_UART_AbortReceive_IT+0x15a>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	2200      	movs	r2, #0
 8022fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	2200      	movs	r2, #0
 8022fd4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	681b      	ldr	r3, [r3, #0]
 8022fda:	220f      	movs	r2, #15
 8022fdc:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	681b      	ldr	r3, [r3, #0]
 8022fe2:	699a      	ldr	r2, [r3, #24]
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	681b      	ldr	r3, [r3, #0]
 8022fe8:	f042 0208 	orr.w	r2, r2, #8
 8022fec:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	2220      	movs	r2, #32
 8022ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022ff6:	687b      	ldr	r3, [r7, #4]
 8022ff8:	2200      	movs	r2, #0
 8022ffa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8022ffc:	6878      	ldr	r0, [r7, #4]
 8022ffe:	f000 fafb 	bl	80235f8 <HAL_UART_AbortReceiveCpltCallback>
 8023002:	e014      	b.n	802302e <HAL_UART_AbortReceive_IT+0x15a>
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	2200      	movs	r2, #0
 8023008:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 802300c:	687b      	ldr	r3, [r7, #4]
 802300e:	2200      	movs	r2, #0
 8023010:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	681b      	ldr	r3, [r3, #0]
 8023016:	220f      	movs	r2, #15
 8023018:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 802301a:	687b      	ldr	r3, [r7, #4]
 802301c:	2220      	movs	r2, #32
 802301e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	2200      	movs	r2, #0
 8023026:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8023028:	6878      	ldr	r0, [r7, #4]
 802302a:	f000 fae5 	bl	80235f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 802302e:	2300      	movs	r3, #0
}
 8023030:	4618      	mov	r0, r3
 8023032:	3750      	adds	r7, #80	@ 0x50
 8023034:	46bd      	mov	sp, r7
 8023036:	bd80      	pop	{r7, pc}
 8023038:	0802418b 	.word	0x0802418b

0802303c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802303c:	b580      	push	{r7, lr}
 802303e:	b0ae      	sub	sp, #184	@ 0xb8
 8023040:	af00      	add	r7, sp, #0
 8023042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	69db      	ldr	r3, [r3, #28]
 802304a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802304e:	687b      	ldr	r3, [r7, #4]
 8023050:	681b      	ldr	r3, [r3, #0]
 8023052:	681b      	ldr	r3, [r3, #0]
 8023054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	689b      	ldr	r3, [r3, #8]
 802305e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8023062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8023066:	f640 030f 	movw	r3, #2063	@ 0x80f
 802306a:	4013      	ands	r3, r2
 802306c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 8023070:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8023074:	2b00      	cmp	r3, #0
 8023076:	d11b      	bne.n	80230b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8023078:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802307c:	f003 0320 	and.w	r3, r3, #32
 8023080:	2b00      	cmp	r3, #0
 8023082:	d015      	beq.n	80230b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8023084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8023088:	f003 0320 	and.w	r3, r3, #32
 802308c:	2b00      	cmp	r3, #0
 802308e:	d105      	bne.n	802309c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8023090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8023098:	2b00      	cmp	r3, #0
 802309a:	d009      	beq.n	80230b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80230a0:	2b00      	cmp	r3, #0
 80230a2:	f000 827e 	beq.w	80235a2 <HAL_UART_IRQHandler+0x566>
      {
        huart->RxISR(huart);
 80230a6:	687b      	ldr	r3, [r7, #4]
 80230a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80230aa:	6878      	ldr	r0, [r7, #4]
 80230ac:	4798      	blx	r3
      }
      return;
 80230ae:	e278      	b.n	80235a2 <HAL_UART_IRQHandler+0x566>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80230b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	f000 80fd 	beq.w	80232b4 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80230ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80230be:	4b7a      	ldr	r3, [pc, #488]	@ (80232a8 <HAL_UART_IRQHandler+0x26c>)
 80230c0:	4013      	ands	r3, r2
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	d106      	bne.n	80230d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80230c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80230ca:	4b78      	ldr	r3, [pc, #480]	@ (80232ac <HAL_UART_IRQHandler+0x270>)
 80230cc:	4013      	ands	r3, r2
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	f000 80f0 	beq.w	80232b4 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80230d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80230d8:	f003 0301 	and.w	r3, r3, #1
 80230dc:	2b00      	cmp	r3, #0
 80230de:	d011      	beq.n	8023104 <HAL_UART_IRQHandler+0xc8>
 80230e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80230e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	d00b      	beq.n	8023104 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	2201      	movs	r2, #1
 80230f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80230fa:	f043 0201 	orr.w	r2, r3, #1
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8023104:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023108:	f003 0302 	and.w	r3, r3, #2
 802310c:	2b00      	cmp	r3, #0
 802310e:	d011      	beq.n	8023134 <HAL_UART_IRQHandler+0xf8>
 8023110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023114:	f003 0301 	and.w	r3, r3, #1
 8023118:	2b00      	cmp	r3, #0
 802311a:	d00b      	beq.n	8023134 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 802311c:	687b      	ldr	r3, [r7, #4]
 802311e:	681b      	ldr	r3, [r3, #0]
 8023120:	2202      	movs	r2, #2
 8023122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8023124:	687b      	ldr	r3, [r7, #4]
 8023126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802312a:	f043 0204 	orr.w	r2, r3, #4
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8023134:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023138:	f003 0304 	and.w	r3, r3, #4
 802313c:	2b00      	cmp	r3, #0
 802313e:	d011      	beq.n	8023164 <HAL_UART_IRQHandler+0x128>
 8023140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023144:	f003 0301 	and.w	r3, r3, #1
 8023148:	2b00      	cmp	r3, #0
 802314a:	d00b      	beq.n	8023164 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 802314c:	687b      	ldr	r3, [r7, #4]
 802314e:	681b      	ldr	r3, [r3, #0]
 8023150:	2204      	movs	r2, #4
 8023152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8023154:	687b      	ldr	r3, [r7, #4]
 8023156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802315a:	f043 0202 	orr.w	r2, r3, #2
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8023164:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023168:	f003 0308 	and.w	r3, r3, #8
 802316c:	2b00      	cmp	r3, #0
 802316e:	d017      	beq.n	80231a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8023170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8023174:	f003 0320 	and.w	r3, r3, #32
 8023178:	2b00      	cmp	r3, #0
 802317a:	d105      	bne.n	8023188 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 802317c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8023180:	4b49      	ldr	r3, [pc, #292]	@ (80232a8 <HAL_UART_IRQHandler+0x26c>)
 8023182:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8023184:	2b00      	cmp	r3, #0
 8023186:	d00b      	beq.n	80231a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	681b      	ldr	r3, [r3, #0]
 802318c:	2208      	movs	r2, #8
 802318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8023196:	f043 0208 	orr.w	r2, r3, #8
 802319a:	687b      	ldr	r3, [r7, #4]
 802319c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80231a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80231a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80231a8:	2b00      	cmp	r3, #0
 80231aa:	d012      	beq.n	80231d2 <HAL_UART_IRQHandler+0x196>
 80231ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80231b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	d00c      	beq.n	80231d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	681b      	ldr	r3, [r3, #0]
 80231bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80231c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80231c8:	f043 0220 	orr.w	r2, r3, #32
 80231cc:	687b      	ldr	r3, [r7, #4]
 80231ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80231d2:	687b      	ldr	r3, [r7, #4]
 80231d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80231d8:	2b00      	cmp	r3, #0
 80231da:	f000 81e4 	beq.w	80235a6 <HAL_UART_IRQHandler+0x56a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80231de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80231e2:	f003 0320 	and.w	r3, r3, #32
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	d013      	beq.n	8023212 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80231ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80231ee:	f003 0320 	and.w	r3, r3, #32
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d105      	bne.n	8023202 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80231f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80231fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80231fe:	2b00      	cmp	r3, #0
 8023200:	d007      	beq.n	8023212 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023206:	2b00      	cmp	r3, #0
 8023208:	d003      	beq.n	8023212 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802320e:	6878      	ldr	r0, [r7, #4]
 8023210:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8023218:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 802321c:	687b      	ldr	r3, [r7, #4]
 802321e:	681b      	ldr	r3, [r3, #0]
 8023220:	689b      	ldr	r3, [r3, #8]
 8023222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023226:	2b40      	cmp	r3, #64	@ 0x40
 8023228:	d005      	beq.n	8023236 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 802322a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802322e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8023232:	2b00      	cmp	r3, #0
 8023234:	d02e      	beq.n	8023294 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8023236:	6878      	ldr	r0, [r7, #4]
 8023238:	f000 fead 	bl	8023f96 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	689b      	ldr	r3, [r3, #8]
 8023242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023246:	2b40      	cmp	r3, #64	@ 0x40
 8023248:	d120      	bne.n	802328c <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023250:	2b00      	cmp	r3, #0
 8023252:	d017      	beq.n	8023284 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023254:	687b      	ldr	r3, [r7, #4]
 8023256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802325a:	4a15      	ldr	r2, [pc, #84]	@ (80232b0 <HAL_UART_IRQHandler+0x274>)
 802325c:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023264:	4618      	mov	r0, r3
 8023266:	f7f5 fdfb 	bl	8018e60 <HAL_DMA_Abort_IT>
 802326a:	4603      	mov	r3, r0
 802326c:	2b00      	cmp	r3, #0
 802326e:	d019      	beq.n	80232a4 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8023270:	687b      	ldr	r3, [r7, #4]
 8023272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8023278:	687a      	ldr	r2, [r7, #4]
 802327a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 802327e:	4610      	mov	r0, r2
 8023280:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023282:	e00f      	b.n	80232a4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8023284:	6878      	ldr	r0, [r7, #4]
 8023286:	f000 f9ad 	bl	80235e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802328a:	e00b      	b.n	80232a4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802328c:	6878      	ldr	r0, [r7, #4]
 802328e:	f000 f9a9 	bl	80235e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023292:	e007      	b.n	80232a4 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8023294:	6878      	ldr	r0, [r7, #4]
 8023296:	f000 f9a5 	bl	80235e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	2200      	movs	r2, #0
 802329e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80232a2:	e180      	b.n	80235a6 <HAL_UART_IRQHandler+0x56a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80232a4:	bf00      	nop
    return;
 80232a6:	e17e      	b.n	80235a6 <HAL_UART_IRQHandler+0x56a>
 80232a8:	10000001 	.word	0x10000001
 80232ac:	04000120 	.word	0x04000120
 80232b0:	0802415f 	.word	0x0802415f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80232b8:	2b01      	cmp	r3, #1
 80232ba:	f040 8129 	bne.w	8023510 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80232be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80232c2:	f003 0310 	and.w	r3, r3, #16
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	f000 8122 	beq.w	8023510 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80232cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80232d0:	f003 0310 	and.w	r3, r3, #16
 80232d4:	2b00      	cmp	r3, #0
 80232d6:	f000 811b 	beq.w	8023510 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80232da:	687b      	ldr	r3, [r7, #4]
 80232dc:	681b      	ldr	r3, [r3, #0]
 80232de:	2210      	movs	r2, #16
 80232e0:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	689b      	ldr	r3, [r3, #8]
 80232e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80232ec:	2b40      	cmp	r3, #64	@ 0x40
 80232ee:	f040 8091 	bne.w	8023414 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80232f8:	681b      	ldr	r3, [r3, #0]
 80232fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80232fc:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 8023300:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8023304:	2b00      	cmp	r3, #0
 8023306:	f000 8150 	beq.w	80235aa <HAL_UART_IRQHandler+0x56e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8023310:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8023314:	429a      	cmp	r2, r3
 8023316:	f080 8148 	bcs.w	80235aa <HAL_UART_IRQHandler+0x56e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 802331a:	687b      	ldr	r3, [r7, #4]
 802331c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8023320:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802332a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802332c:	2b81      	cmp	r3, #129	@ 0x81
 802332e:	d060      	beq.n	80233f2 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	681b      	ldr	r3, [r3, #0]
 8023334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023338:	e853 3f00 	ldrex	r3, [r3]
 802333c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 802333e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	681b      	ldr	r3, [r3, #0]
 802334c:	461a      	mov	r2, r3
 802334e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023352:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8023356:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023358:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 802335a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 802335e:	e841 2300 	strex	r3, r2, [r1]
 8023362:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8023364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023366:	2b00      	cmp	r3, #0
 8023368:	d1e2      	bne.n	8023330 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802336a:	687b      	ldr	r3, [r7, #4]
 802336c:	681b      	ldr	r3, [r3, #0]
 802336e:	3308      	adds	r3, #8
 8023370:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8023374:	e853 3f00 	ldrex	r3, [r3]
 8023378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802337a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802337c:	f023 0301 	bic.w	r3, r3, #1
 8023380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8023384:	687b      	ldr	r3, [r7, #4]
 8023386:	681b      	ldr	r3, [r3, #0]
 8023388:	3308      	adds	r3, #8
 802338a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 802338e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8023390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8023394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8023396:	e841 2300 	strex	r3, r2, [r1]
 802339a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 802339c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802339e:	2b00      	cmp	r3, #0
 80233a0:	d1e3      	bne.n	802336a <HAL_UART_IRQHandler+0x32e>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	2220      	movs	r2, #32
 80233a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	2200      	movs	r2, #0
 80233ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	681b      	ldr	r3, [r3, #0]
 80233b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80233b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80233b8:	e853 3f00 	ldrex	r3, [r3]
 80233bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80233be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80233c0:	f023 0310 	bic.w	r3, r3, #16
 80233c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	681b      	ldr	r3, [r3, #0]
 80233cc:	461a      	mov	r2, r3
 80233ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80233d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80233d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80233d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80233d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80233da:	e841 2300 	strex	r3, r2, [r1]
 80233de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80233e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80233e2:	2b00      	cmp	r3, #0
 80233e4:	d1e4      	bne.n	80233b0 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80233ec:	4618      	mov	r0, r3
 80233ee:	f7f5 fcbb 	bl	8018d68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80233f2:	687b      	ldr	r3, [r7, #4]
 80233f4:	2202      	movs	r2, #2
 80233f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80233fe:	687b      	ldr	r3, [r7, #4]
 8023400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8023404:	b29b      	uxth	r3, r3
 8023406:	1ad3      	subs	r3, r2, r3
 8023408:	b29b      	uxth	r3, r3
 802340a:	4619      	mov	r1, r3
 802340c:	6878      	ldr	r0, [r7, #4]
 802340e:	f000 f8fd 	bl	802360c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8023412:	e0ca      	b.n	80235aa <HAL_UART_IRQHandler+0x56e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 802341a:	687b      	ldr	r3, [r7, #4]
 802341c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8023420:	b29b      	uxth	r3, r3
 8023422:	1ad3      	subs	r3, r2, r3
 8023424:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802342e:	b29b      	uxth	r3, r3
 8023430:	2b00      	cmp	r3, #0
 8023432:	f000 80bc 	beq.w	80235ae <HAL_UART_IRQHandler+0x572>
          && (nb_rx_data > 0U))
 8023436:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 802343a:	2b00      	cmp	r3, #0
 802343c:	f000 80b7 	beq.w	80235ae <HAL_UART_IRQHandler+0x572>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023448:	e853 3f00 	ldrex	r3, [r3]
 802344c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 802344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8023454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	461a      	mov	r2, r3
 802345e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8023462:	647b      	str	r3, [r7, #68]	@ 0x44
 8023464:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023466:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8023468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802346a:	e841 2300 	strex	r3, r2, [r1]
 802346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8023470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023472:	2b00      	cmp	r3, #0
 8023474:	d1e4      	bne.n	8023440 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8023476:	687b      	ldr	r3, [r7, #4]
 8023478:	681b      	ldr	r3, [r3, #0]
 802347a:	3308      	adds	r3, #8
 802347c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023480:	e853 3f00 	ldrex	r3, [r3]
 8023484:	623b      	str	r3, [r7, #32]
   return(result);
 8023486:	6a3b      	ldr	r3, [r7, #32]
 8023488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802348c:	f023 0301 	bic.w	r3, r3, #1
 8023490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	3308      	adds	r3, #8
 802349a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 802349e:	633a      	str	r2, [r7, #48]	@ 0x30
 80234a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80234a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80234a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80234a6:	e841 2300 	strex	r3, r2, [r1]
 80234aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80234ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	d1e1      	bne.n	8023476 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80234b2:	687b      	ldr	r3, [r7, #4]
 80234b4:	2220      	movs	r2, #32
 80234b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	2200      	movs	r2, #0
 80234be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80234c0:	687b      	ldr	r3, [r7, #4]
 80234c2:	2200      	movs	r2, #0
 80234c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80234c6:	687b      	ldr	r3, [r7, #4]
 80234c8:	681b      	ldr	r3, [r3, #0]
 80234ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80234cc:	693b      	ldr	r3, [r7, #16]
 80234ce:	e853 3f00 	ldrex	r3, [r3]
 80234d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80234d4:	68fb      	ldr	r3, [r7, #12]
 80234d6:	f023 0310 	bic.w	r3, r3, #16
 80234da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80234de:	687b      	ldr	r3, [r7, #4]
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	461a      	mov	r2, r3
 80234e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80234e8:	61fb      	str	r3, [r7, #28]
 80234ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80234ec:	69b9      	ldr	r1, [r7, #24]
 80234ee:	69fa      	ldr	r2, [r7, #28]
 80234f0:	e841 2300 	strex	r3, r2, [r1]
 80234f4:	617b      	str	r3, [r7, #20]
   return(result);
 80234f6:	697b      	ldr	r3, [r7, #20]
 80234f8:	2b00      	cmp	r3, #0
 80234fa:	d1e4      	bne.n	80234c6 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	2202      	movs	r2, #2
 8023500:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8023502:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8023506:	4619      	mov	r1, r3
 8023508:	6878      	ldr	r0, [r7, #4]
 802350a:	f000 f87f 	bl	802360c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 802350e:	e04e      	b.n	80235ae <HAL_UART_IRQHandler+0x572>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8023510:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8023518:	2b00      	cmp	r3, #0
 802351a:	d014      	beq.n	8023546 <HAL_UART_IRQHandler+0x50a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 802351c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8023520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8023524:	2b00      	cmp	r3, #0
 8023526:	d105      	bne.n	8023534 <HAL_UART_IRQHandler+0x4f8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8023528:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802352c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8023530:	2b00      	cmp	r3, #0
 8023532:	d008      	beq.n	8023546 <HAL_UART_IRQHandler+0x50a>
  {
    if (huart->TxISR != NULL)
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023538:	2b00      	cmp	r3, #0
 802353a:	d03a      	beq.n	80235b2 <HAL_UART_IRQHandler+0x576>
    {
      huart->TxISR(huart);
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023540:	6878      	ldr	r0, [r7, #4]
 8023542:	4798      	blx	r3
    }
    return;
 8023544:	e035      	b.n	80235b2 <HAL_UART_IRQHandler+0x576>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8023546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802354a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802354e:	2b00      	cmp	r3, #0
 8023550:	d009      	beq.n	8023566 <HAL_UART_IRQHandler+0x52a>
 8023552:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8023556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802355a:	2b00      	cmp	r3, #0
 802355c:	d003      	beq.n	8023566 <HAL_UART_IRQHandler+0x52a>
  {
    UART_EndTransmit_IT(huart);
 802355e:	6878      	ldr	r0, [r7, #4]
 8023560:	f000 fe38 	bl	80241d4 <UART_EndTransmit_IT>
    return;
 8023564:	e026      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8023566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802356a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802356e:	2b00      	cmp	r3, #0
 8023570:	d009      	beq.n	8023586 <HAL_UART_IRQHandler+0x54a>
 8023572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8023576:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 802357a:	2b00      	cmp	r3, #0
 802357c:	d003      	beq.n	8023586 <HAL_UART_IRQHandler+0x54a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 802357e:	6878      	ldr	r0, [r7, #4]
 8023580:	f001 fb96 	bl	8024cb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8023584:	e016      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8023586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802358a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802358e:	2b00      	cmp	r3, #0
 8023590:	d010      	beq.n	80235b4 <HAL_UART_IRQHandler+0x578>
 8023592:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8023596:	2b00      	cmp	r3, #0
 8023598:	da0c      	bge.n	80235b4 <HAL_UART_IRQHandler+0x578>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 802359a:	6878      	ldr	r0, [r7, #4]
 802359c:	f001 fb7e 	bl	8024c9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80235a0:	e008      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
      return;
 80235a2:	bf00      	nop
 80235a4:	e006      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
    return;
 80235a6:	bf00      	nop
 80235a8:	e004      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
      return;
 80235aa:	bf00      	nop
 80235ac:	e002      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
      return;
 80235ae:	bf00      	nop
 80235b0:	e000      	b.n	80235b4 <HAL_UART_IRQHandler+0x578>
    return;
 80235b2:	bf00      	nop
  }
}
 80235b4:	37b8      	adds	r7, #184	@ 0xb8
 80235b6:	46bd      	mov	sp, r7
 80235b8:	bd80      	pop	{r7, pc}
 80235ba:	bf00      	nop

080235bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80235bc:	b480      	push	{r7}
 80235be:	b083      	sub	sp, #12
 80235c0:	af00      	add	r7, sp, #0
 80235c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80235c4:	bf00      	nop
 80235c6:	370c      	adds	r7, #12
 80235c8:	46bd      	mov	sp, r7
 80235ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ce:	4770      	bx	lr

080235d0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80235d0:	b480      	push	{r7}
 80235d2:	b083      	sub	sp, #12
 80235d4:	af00      	add	r7, sp, #0
 80235d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80235d8:	bf00      	nop
 80235da:	370c      	adds	r7, #12
 80235dc:	46bd      	mov	sp, r7
 80235de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235e2:	4770      	bx	lr

080235e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80235e4:	b480      	push	{r7}
 80235e6:	b083      	sub	sp, #12
 80235e8:	af00      	add	r7, sp, #0
 80235ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80235ec:	bf00      	nop
 80235ee:	370c      	adds	r7, #12
 80235f0:	46bd      	mov	sp, r7
 80235f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235f6:	4770      	bx	lr

080235f8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80235f8:	b480      	push	{r7}
 80235fa:	b083      	sub	sp, #12
 80235fc:	af00      	add	r7, sp, #0
 80235fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8023600:	bf00      	nop
 8023602:	370c      	adds	r7, #12
 8023604:	46bd      	mov	sp, r7
 8023606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802360a:	4770      	bx	lr

0802360c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 802360c:	b480      	push	{r7}
 802360e:	b083      	sub	sp, #12
 8023610:	af00      	add	r7, sp, #0
 8023612:	6078      	str	r0, [r7, #4]
 8023614:	460b      	mov	r3, r1
 8023616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8023618:	bf00      	nop
 802361a:	370c      	adds	r7, #12
 802361c:	46bd      	mov	sp, r7
 802361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023622:	4770      	bx	lr

08023624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8023624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8023628:	b094      	sub	sp, #80	@ 0x50
 802362a:	af00      	add	r7, sp, #0
 802362c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802362e:	2300      	movs	r3, #0
 8023630:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8023634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023636:	681a      	ldr	r2, [r3, #0]
 8023638:	4b7e      	ldr	r3, [pc, #504]	@ (8023834 <UART_SetConfig+0x210>)
 802363a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 802363c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802363e:	689a      	ldr	r2, [r3, #8]
 8023640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023642:	691b      	ldr	r3, [r3, #16]
 8023644:	431a      	orrs	r2, r3
 8023646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023648:	695b      	ldr	r3, [r3, #20]
 802364a:	431a      	orrs	r2, r3
 802364c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802364e:	69db      	ldr	r3, [r3, #28]
 8023650:	4313      	orrs	r3, r2
 8023652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8023654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023656:	681b      	ldr	r3, [r3, #0]
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	4977      	ldr	r1, [pc, #476]	@ (8023838 <UART_SetConfig+0x214>)
 802365c:	4019      	ands	r1, r3
 802365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023660:	681a      	ldr	r2, [r3, #0]
 8023662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023664:	430b      	orrs	r3, r1
 8023666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802366a:	681b      	ldr	r3, [r3, #0]
 802366c:	685b      	ldr	r3, [r3, #4]
 802366e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8023672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023674:	68d9      	ldr	r1, [r3, #12]
 8023676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023678:	681a      	ldr	r2, [r3, #0]
 802367a:	ea40 0301 	orr.w	r3, r0, r1
 802367e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8023680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023682:	699b      	ldr	r3, [r3, #24]
 8023684:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8023686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023688:	681a      	ldr	r2, [r3, #0]
 802368a:	4b6a      	ldr	r3, [pc, #424]	@ (8023834 <UART_SetConfig+0x210>)
 802368c:	429a      	cmp	r2, r3
 802368e:	d009      	beq.n	80236a4 <UART_SetConfig+0x80>
 8023690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023692:	681a      	ldr	r2, [r3, #0]
 8023694:	4b69      	ldr	r3, [pc, #420]	@ (802383c <UART_SetConfig+0x218>)
 8023696:	429a      	cmp	r2, r3
 8023698:	d004      	beq.n	80236a4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 802369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802369c:	6a1a      	ldr	r2, [r3, #32]
 802369e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80236a0:	4313      	orrs	r3, r2
 80236a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80236a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	689b      	ldr	r3, [r3, #8]
 80236aa:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80236ae:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80236b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236b4:	681a      	ldr	r2, [r3, #0]
 80236b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80236b8:	430b      	orrs	r3, r1
 80236ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80236bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236be:	681b      	ldr	r3, [r3, #0]
 80236c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80236c2:	f023 000f 	bic.w	r0, r3, #15
 80236c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80236ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236cc:	681a      	ldr	r2, [r3, #0]
 80236ce:	ea40 0301 	orr.w	r3, r0, r1
 80236d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80236d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236d6:	681a      	ldr	r2, [r3, #0]
 80236d8:	4b59      	ldr	r3, [pc, #356]	@ (8023840 <UART_SetConfig+0x21c>)
 80236da:	429a      	cmp	r2, r3
 80236dc:	d102      	bne.n	80236e4 <UART_SetConfig+0xc0>
 80236de:	2301      	movs	r3, #1
 80236e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80236e2:	e029      	b.n	8023738 <UART_SetConfig+0x114>
 80236e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236e6:	681a      	ldr	r2, [r3, #0]
 80236e8:	4b56      	ldr	r3, [pc, #344]	@ (8023844 <UART_SetConfig+0x220>)
 80236ea:	429a      	cmp	r2, r3
 80236ec:	d102      	bne.n	80236f4 <UART_SetConfig+0xd0>
 80236ee:	2302      	movs	r3, #2
 80236f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80236f2:	e021      	b.n	8023738 <UART_SetConfig+0x114>
 80236f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80236f6:	681a      	ldr	r2, [r3, #0]
 80236f8:	4b53      	ldr	r3, [pc, #332]	@ (8023848 <UART_SetConfig+0x224>)
 80236fa:	429a      	cmp	r2, r3
 80236fc:	d102      	bne.n	8023704 <UART_SetConfig+0xe0>
 80236fe:	2304      	movs	r3, #4
 8023700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023702:	e019      	b.n	8023738 <UART_SetConfig+0x114>
 8023704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023706:	681a      	ldr	r2, [r3, #0]
 8023708:	4b50      	ldr	r3, [pc, #320]	@ (802384c <UART_SetConfig+0x228>)
 802370a:	429a      	cmp	r2, r3
 802370c:	d102      	bne.n	8023714 <UART_SetConfig+0xf0>
 802370e:	2308      	movs	r3, #8
 8023710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023712:	e011      	b.n	8023738 <UART_SetConfig+0x114>
 8023714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023716:	681a      	ldr	r2, [r3, #0]
 8023718:	4b4d      	ldr	r3, [pc, #308]	@ (8023850 <UART_SetConfig+0x22c>)
 802371a:	429a      	cmp	r2, r3
 802371c:	d102      	bne.n	8023724 <UART_SetConfig+0x100>
 802371e:	2310      	movs	r3, #16
 8023720:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023722:	e009      	b.n	8023738 <UART_SetConfig+0x114>
 8023724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023726:	681a      	ldr	r2, [r3, #0]
 8023728:	4b42      	ldr	r3, [pc, #264]	@ (8023834 <UART_SetConfig+0x210>)
 802372a:	429a      	cmp	r2, r3
 802372c:	d102      	bne.n	8023734 <UART_SetConfig+0x110>
 802372e:	2320      	movs	r3, #32
 8023730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023732:	e001      	b.n	8023738 <UART_SetConfig+0x114>
 8023734:	2300      	movs	r3, #0
 8023736:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8023738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802373a:	681a      	ldr	r2, [r3, #0]
 802373c:	4b3d      	ldr	r3, [pc, #244]	@ (8023834 <UART_SetConfig+0x210>)
 802373e:	429a      	cmp	r2, r3
 8023740:	d005      	beq.n	802374e <UART_SetConfig+0x12a>
 8023742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023744:	681a      	ldr	r2, [r3, #0]
 8023746:	4b3d      	ldr	r3, [pc, #244]	@ (802383c <UART_SetConfig+0x218>)
 8023748:	429a      	cmp	r2, r3
 802374a:	f040 8085 	bne.w	8023858 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 802374e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023750:	2200      	movs	r2, #0
 8023752:	623b      	str	r3, [r7, #32]
 8023754:	627a      	str	r2, [r7, #36]	@ 0x24
 8023756:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802375a:	f7fc f8c5 	bl	801f8e8 <HAL_RCCEx_GetPeriphCLKFreq>
 802375e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8023760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023762:	2b00      	cmp	r3, #0
 8023764:	f000 80e8 	beq.w	8023938 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8023768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802376c:	4a39      	ldr	r2, [pc, #228]	@ (8023854 <UART_SetConfig+0x230>)
 802376e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023772:	461a      	mov	r2, r3
 8023774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023776:	fbb3 f3f2 	udiv	r3, r3, r2
 802377a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802377c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802377e:	685a      	ldr	r2, [r3, #4]
 8023780:	4613      	mov	r3, r2
 8023782:	005b      	lsls	r3, r3, #1
 8023784:	4413      	add	r3, r2
 8023786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023788:	429a      	cmp	r2, r3
 802378a:	d305      	bcc.n	8023798 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802378e:	685b      	ldr	r3, [r3, #4]
 8023790:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8023792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023794:	429a      	cmp	r2, r3
 8023796:	d903      	bls.n	80237a0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8023798:	2301      	movs	r3, #1
 802379a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 802379e:	e048      	b.n	8023832 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80237a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80237a2:	2200      	movs	r2, #0
 80237a4:	61bb      	str	r3, [r7, #24]
 80237a6:	61fa      	str	r2, [r7, #28]
 80237a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80237ac:	4a29      	ldr	r2, [pc, #164]	@ (8023854 <UART_SetConfig+0x230>)
 80237ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80237b2:	b29b      	uxth	r3, r3
 80237b4:	2200      	movs	r2, #0
 80237b6:	613b      	str	r3, [r7, #16]
 80237b8:	617a      	str	r2, [r7, #20]
 80237ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80237be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80237c2:	f7dd fa6f 	bl	8000ca4 <__aeabi_uldivmod>
 80237c6:	4602      	mov	r2, r0
 80237c8:	460b      	mov	r3, r1
 80237ca:	4610      	mov	r0, r2
 80237cc:	4619      	mov	r1, r3
 80237ce:	f04f 0200 	mov.w	r2, #0
 80237d2:	f04f 0300 	mov.w	r3, #0
 80237d6:	020b      	lsls	r3, r1, #8
 80237d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80237dc:	0202      	lsls	r2, r0, #8
 80237de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80237e0:	6849      	ldr	r1, [r1, #4]
 80237e2:	0849      	lsrs	r1, r1, #1
 80237e4:	2000      	movs	r0, #0
 80237e6:	460c      	mov	r4, r1
 80237e8:	4605      	mov	r5, r0
 80237ea:	eb12 0804 	adds.w	r8, r2, r4
 80237ee:	eb43 0905 	adc.w	r9, r3, r5
 80237f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80237f4:	685b      	ldr	r3, [r3, #4]
 80237f6:	2200      	movs	r2, #0
 80237f8:	60bb      	str	r3, [r7, #8]
 80237fa:	60fa      	str	r2, [r7, #12]
 80237fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8023800:	4640      	mov	r0, r8
 8023802:	4649      	mov	r1, r9
 8023804:	f7dd fa4e 	bl	8000ca4 <__aeabi_uldivmod>
 8023808:	4602      	mov	r2, r0
 802380a:	460b      	mov	r3, r1
 802380c:	4613      	mov	r3, r2
 802380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8023810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023812:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8023816:	d308      	bcc.n	802382a <UART_SetConfig+0x206>
 8023818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802381a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802381e:	d204      	bcs.n	802382a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8023820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023822:	681b      	ldr	r3, [r3, #0]
 8023824:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023826:	60da      	str	r2, [r3, #12]
 8023828:	e003      	b.n	8023832 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 802382a:	2301      	movs	r3, #1
 802382c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8023830:	e082      	b.n	8023938 <UART_SetConfig+0x314>
 8023832:	e081      	b.n	8023938 <UART_SetConfig+0x314>
 8023834:	46002400 	.word	0x46002400
 8023838:	cfff69f3 	.word	0xcfff69f3
 802383c:	56002400 	.word	0x56002400
 8023840:	40013800 	.word	0x40013800
 8023844:	40004400 	.word	0x40004400
 8023848:	40004800 	.word	0x40004800
 802384c:	40004c00 	.word	0x40004c00
 8023850:	40005000 	.word	0x40005000
 8023854:	08030278 	.word	0x08030278
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802385a:	69db      	ldr	r3, [r3, #28]
 802385c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023860:	d13c      	bne.n	80238dc <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8023862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8023864:	2200      	movs	r2, #0
 8023866:	603b      	str	r3, [r7, #0]
 8023868:	607a      	str	r2, [r7, #4]
 802386a:	e9d7 0100 	ldrd	r0, r1, [r7]
 802386e:	f7fc f83b 	bl	801f8e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8023872:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8023874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023876:	2b00      	cmp	r3, #0
 8023878:	d05e      	beq.n	8023938 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802387e:	4a39      	ldr	r2, [pc, #228]	@ (8023964 <UART_SetConfig+0x340>)
 8023880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023884:	461a      	mov	r2, r3
 8023886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023888:	fbb3 f3f2 	udiv	r3, r3, r2
 802388c:	005a      	lsls	r2, r3, #1
 802388e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023890:	685b      	ldr	r3, [r3, #4]
 8023892:	085b      	lsrs	r3, r3, #1
 8023894:	441a      	add	r2, r3
 8023896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023898:	685b      	ldr	r3, [r3, #4]
 802389a:	fbb2 f3f3 	udiv	r3, r2, r3
 802389e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80238a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80238a2:	2b0f      	cmp	r3, #15
 80238a4:	d916      	bls.n	80238d4 <UART_SetConfig+0x2b0>
 80238a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80238a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80238ac:	d212      	bcs.n	80238d4 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80238ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80238b0:	b29b      	uxth	r3, r3
 80238b2:	f023 030f 	bic.w	r3, r3, #15
 80238b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80238b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80238ba:	085b      	lsrs	r3, r3, #1
 80238bc:	b29b      	uxth	r3, r3
 80238be:	f003 0307 	and.w	r3, r3, #7
 80238c2:	b29a      	uxth	r2, r3
 80238c4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80238c6:	4313      	orrs	r3, r2
 80238c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80238ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80238d0:	60da      	str	r2, [r3, #12]
 80238d2:	e031      	b.n	8023938 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80238d4:	2301      	movs	r3, #1
 80238d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80238da:	e02d      	b.n	8023938 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80238dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80238de:	2200      	movs	r2, #0
 80238e0:	469a      	mov	sl, r3
 80238e2:	4693      	mov	fp, r2
 80238e4:	4650      	mov	r0, sl
 80238e6:	4659      	mov	r1, fp
 80238e8:	f7fb fffe 	bl	801f8e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80238ec:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80238ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d021      	beq.n	8023938 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80238f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80238f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80238f8:	4a1a      	ldr	r2, [pc, #104]	@ (8023964 <UART_SetConfig+0x340>)
 80238fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80238fe:	461a      	mov	r2, r3
 8023900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023902:	fbb3 f2f2 	udiv	r2, r3, r2
 8023906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023908:	685b      	ldr	r3, [r3, #4]
 802390a:	085b      	lsrs	r3, r3, #1
 802390c:	441a      	add	r2, r3
 802390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023910:	685b      	ldr	r3, [r3, #4]
 8023912:	fbb2 f3f3 	udiv	r3, r2, r3
 8023916:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802391a:	2b0f      	cmp	r3, #15
 802391c:	d909      	bls.n	8023932 <UART_SetConfig+0x30e>
 802391e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023924:	d205      	bcs.n	8023932 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8023926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023928:	b29a      	uxth	r2, r3
 802392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	60da      	str	r2, [r3, #12]
 8023930:	e002      	b.n	8023938 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8023932:	2301      	movs	r3, #1
 8023934:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8023938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802393a:	2201      	movs	r2, #1
 802393c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8023940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023942:	2201      	movs	r2, #1
 8023944:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8023948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802394a:	2200      	movs	r2, #0
 802394c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 802394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023950:	2200      	movs	r2, #0
 8023952:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8023954:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8023958:	4618      	mov	r0, r3
 802395a:	3750      	adds	r7, #80	@ 0x50
 802395c:	46bd      	mov	sp, r7
 802395e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023962:	bf00      	nop
 8023964:	08030278 	.word	0x08030278

08023968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8023968:	b480      	push	{r7}
 802396a:	b083      	sub	sp, #12
 802396c:	af00      	add	r7, sp, #0
 802396e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023974:	f003 0308 	and.w	r3, r3, #8
 8023978:	2b00      	cmp	r3, #0
 802397a:	d00a      	beq.n	8023992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	685b      	ldr	r3, [r3, #4]
 8023982:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	681b      	ldr	r3, [r3, #0]
 802398e:	430a      	orrs	r2, r1
 8023990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023992:	687b      	ldr	r3, [r7, #4]
 8023994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023996:	f003 0301 	and.w	r3, r3, #1
 802399a:	2b00      	cmp	r3, #0
 802399c:	d00a      	beq.n	80239b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802399e:	687b      	ldr	r3, [r7, #4]
 80239a0:	681b      	ldr	r3, [r3, #0]
 80239a2:	685b      	ldr	r3, [r3, #4]
 80239a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80239a8:	687b      	ldr	r3, [r7, #4]
 80239aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	681b      	ldr	r3, [r3, #0]
 80239b0:	430a      	orrs	r2, r1
 80239b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80239b8:	f003 0302 	and.w	r3, r3, #2
 80239bc:	2b00      	cmp	r3, #0
 80239be:	d00a      	beq.n	80239d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	685b      	ldr	r3, [r3, #4]
 80239c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80239ca:	687b      	ldr	r3, [r7, #4]
 80239cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	430a      	orrs	r2, r1
 80239d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80239d6:	687b      	ldr	r3, [r7, #4]
 80239d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80239da:	f003 0304 	and.w	r3, r3, #4
 80239de:	2b00      	cmp	r3, #0
 80239e0:	d00a      	beq.n	80239f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	681b      	ldr	r3, [r3, #0]
 80239e6:	685b      	ldr	r3, [r3, #4]
 80239e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	681b      	ldr	r3, [r3, #0]
 80239f4:	430a      	orrs	r2, r1
 80239f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80239fc:	f003 0310 	and.w	r3, r3, #16
 8023a00:	2b00      	cmp	r3, #0
 8023a02:	d00a      	beq.n	8023a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	681b      	ldr	r3, [r3, #0]
 8023a08:	689b      	ldr	r3, [r3, #8]
 8023a0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	681b      	ldr	r3, [r3, #0]
 8023a16:	430a      	orrs	r2, r1
 8023a18:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a1e:	f003 0320 	and.w	r3, r3, #32
 8023a22:	2b00      	cmp	r3, #0
 8023a24:	d00a      	beq.n	8023a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	681b      	ldr	r3, [r3, #0]
 8023a2a:	689b      	ldr	r3, [r3, #8]
 8023a2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	681b      	ldr	r3, [r3, #0]
 8023a38:	430a      	orrs	r2, r1
 8023a3a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023a44:	2b00      	cmp	r3, #0
 8023a46:	d01a      	beq.n	8023a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	681b      	ldr	r3, [r3, #0]
 8023a4c:	685b      	ldr	r3, [r3, #4]
 8023a4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	681b      	ldr	r3, [r3, #0]
 8023a5a:	430a      	orrs	r2, r1
 8023a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8023a66:	d10a      	bne.n	8023a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	685b      	ldr	r3, [r3, #4]
 8023a6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	430a      	orrs	r2, r1
 8023a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8023a7e:	687b      	ldr	r3, [r7, #4]
 8023a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8023a86:	2b00      	cmp	r3, #0
 8023a88:	d00a      	beq.n	8023aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8023a8a:	687b      	ldr	r3, [r7, #4]
 8023a8c:	681b      	ldr	r3, [r3, #0]
 8023a8e:	685b      	ldr	r3, [r3, #4]
 8023a90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8023a98:	687b      	ldr	r3, [r7, #4]
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	430a      	orrs	r2, r1
 8023a9e:	605a      	str	r2, [r3, #4]
  }
}
 8023aa0:	bf00      	nop
 8023aa2:	370c      	adds	r7, #12
 8023aa4:	46bd      	mov	sp, r7
 8023aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aaa:	4770      	bx	lr

08023aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8023aac:	b580      	push	{r7, lr}
 8023aae:	b098      	sub	sp, #96	@ 0x60
 8023ab0:	af02      	add	r7, sp, #8
 8023ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	2200      	movs	r2, #0
 8023ab8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8023abc:	f7f2 fcd6 	bl	801646c <HAL_GetTick>
 8023ac0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	681b      	ldr	r3, [r3, #0]
 8023ac6:	681b      	ldr	r3, [r3, #0]
 8023ac8:	f003 0308 	and.w	r3, r3, #8
 8023acc:	2b08      	cmp	r3, #8
 8023ace:	d12f      	bne.n	8023b30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023ad0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8023ad4:	9300      	str	r3, [sp, #0]
 8023ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023ad8:	2200      	movs	r2, #0
 8023ada:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8023ade:	6878      	ldr	r0, [r7, #4]
 8023ae0:	f000 f88e 	bl	8023c00 <UART_WaitOnFlagUntilTimeout>
 8023ae4:	4603      	mov	r3, r0
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d022      	beq.n	8023b30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	681b      	ldr	r3, [r3, #0]
 8023aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023af2:	e853 3f00 	ldrex	r3, [r3]
 8023af6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8023af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8023afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	681b      	ldr	r3, [r3, #0]
 8023b04:	461a      	mov	r2, r3
 8023b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8023b0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023b0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8023b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8023b10:	e841 2300 	strex	r3, r2, [r1]
 8023b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8023b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d1e6      	bne.n	8023aea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	2220      	movs	r2, #32
 8023b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	2200      	movs	r2, #0
 8023b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023b2c:	2303      	movs	r3, #3
 8023b2e:	e063      	b.n	8023bf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	681b      	ldr	r3, [r3, #0]
 8023b34:	681b      	ldr	r3, [r3, #0]
 8023b36:	f003 0304 	and.w	r3, r3, #4
 8023b3a:	2b04      	cmp	r3, #4
 8023b3c:	d149      	bne.n	8023bd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023b3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8023b42:	9300      	str	r3, [sp, #0]
 8023b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023b46:	2200      	movs	r2, #0
 8023b48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8023b4c:	6878      	ldr	r0, [r7, #4]
 8023b4e:	f000 f857 	bl	8023c00 <UART_WaitOnFlagUntilTimeout>
 8023b52:	4603      	mov	r3, r0
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d03c      	beq.n	8023bd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	681b      	ldr	r3, [r3, #0]
 8023b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b60:	e853 3f00 	ldrex	r3, [r3]
 8023b64:	623b      	str	r3, [r7, #32]
   return(result);
 8023b66:	6a3b      	ldr	r3, [r7, #32]
 8023b68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8023b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	681b      	ldr	r3, [r3, #0]
 8023b72:	461a      	mov	r2, r3
 8023b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023b76:	633b      	str	r3, [r7, #48]	@ 0x30
 8023b78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023b7e:	e841 2300 	strex	r3, r2, [r1]
 8023b82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8023b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d1e6      	bne.n	8023b58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	3308      	adds	r3, #8
 8023b90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023b92:	693b      	ldr	r3, [r7, #16]
 8023b94:	e853 3f00 	ldrex	r3, [r3]
 8023b98:	60fb      	str	r3, [r7, #12]
   return(result);
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	f023 0301 	bic.w	r3, r3, #1
 8023ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	681b      	ldr	r3, [r3, #0]
 8023ba6:	3308      	adds	r3, #8
 8023ba8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023baa:	61fa      	str	r2, [r7, #28]
 8023bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023bae:	69b9      	ldr	r1, [r7, #24]
 8023bb0:	69fa      	ldr	r2, [r7, #28]
 8023bb2:	e841 2300 	strex	r3, r2, [r1]
 8023bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8023bb8:	697b      	ldr	r3, [r7, #20]
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	d1e5      	bne.n	8023b8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8023bbe:	687b      	ldr	r3, [r7, #4]
 8023bc0:	2220      	movs	r2, #32
 8023bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	2200      	movs	r2, #0
 8023bca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023bce:	2303      	movs	r3, #3
 8023bd0:	e012      	b.n	8023bf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	2220      	movs	r2, #32
 8023bd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	2220      	movs	r2, #32
 8023bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023be2:	687b      	ldr	r3, [r7, #4]
 8023be4:	2200      	movs	r2, #0
 8023be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	2200      	movs	r2, #0
 8023bec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	2200      	movs	r2, #0
 8023bf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8023bf6:	2300      	movs	r3, #0
}
 8023bf8:	4618      	mov	r0, r3
 8023bfa:	3758      	adds	r7, #88	@ 0x58
 8023bfc:	46bd      	mov	sp, r7
 8023bfe:	bd80      	pop	{r7, pc}

08023c00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8023c00:	b580      	push	{r7, lr}
 8023c02:	b084      	sub	sp, #16
 8023c04:	af00      	add	r7, sp, #0
 8023c06:	60f8      	str	r0, [r7, #12]
 8023c08:	60b9      	str	r1, [r7, #8]
 8023c0a:	603b      	str	r3, [r7, #0]
 8023c0c:	4613      	mov	r3, r2
 8023c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023c10:	e049      	b.n	8023ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023c12:	69bb      	ldr	r3, [r7, #24]
 8023c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c18:	d045      	beq.n	8023ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023c1a:	f7f2 fc27 	bl	801646c <HAL_GetTick>
 8023c1e:	4602      	mov	r2, r0
 8023c20:	683b      	ldr	r3, [r7, #0]
 8023c22:	1ad3      	subs	r3, r2, r3
 8023c24:	69ba      	ldr	r2, [r7, #24]
 8023c26:	429a      	cmp	r2, r3
 8023c28:	d302      	bcc.n	8023c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8023c2a:	69bb      	ldr	r3, [r7, #24]
 8023c2c:	2b00      	cmp	r3, #0
 8023c2e:	d101      	bne.n	8023c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8023c30:	2303      	movs	r3, #3
 8023c32:	e048      	b.n	8023cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8023c34:	68fb      	ldr	r3, [r7, #12]
 8023c36:	681b      	ldr	r3, [r3, #0]
 8023c38:	681b      	ldr	r3, [r3, #0]
 8023c3a:	f003 0304 	and.w	r3, r3, #4
 8023c3e:	2b00      	cmp	r3, #0
 8023c40:	d031      	beq.n	8023ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8023c42:	68fb      	ldr	r3, [r7, #12]
 8023c44:	681b      	ldr	r3, [r3, #0]
 8023c46:	69db      	ldr	r3, [r3, #28]
 8023c48:	f003 0308 	and.w	r3, r3, #8
 8023c4c:	2b08      	cmp	r3, #8
 8023c4e:	d110      	bne.n	8023c72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8023c50:	68fb      	ldr	r3, [r7, #12]
 8023c52:	681b      	ldr	r3, [r3, #0]
 8023c54:	2208      	movs	r2, #8
 8023c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8023c58:	68f8      	ldr	r0, [r7, #12]
 8023c5a:	f000 f99c 	bl	8023f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8023c5e:	68fb      	ldr	r3, [r7, #12]
 8023c60:	2208      	movs	r2, #8
 8023c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8023c66:	68fb      	ldr	r3, [r7, #12]
 8023c68:	2200      	movs	r2, #0
 8023c6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8023c6e:	2301      	movs	r3, #1
 8023c70:	e029      	b.n	8023cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8023c72:	68fb      	ldr	r3, [r7, #12]
 8023c74:	681b      	ldr	r3, [r3, #0]
 8023c76:	69db      	ldr	r3, [r3, #28]
 8023c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8023c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023c80:	d111      	bne.n	8023ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023c82:	68fb      	ldr	r3, [r7, #12]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8023c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8023c8c:	68f8      	ldr	r0, [r7, #12]
 8023c8e:	f000 f982 	bl	8023f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8023c92:	68fb      	ldr	r3, [r7, #12]
 8023c94:	2220      	movs	r2, #32
 8023c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8023c9a:	68fb      	ldr	r3, [r7, #12]
 8023c9c:	2200      	movs	r2, #0
 8023c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8023ca2:	2303      	movs	r3, #3
 8023ca4:	e00f      	b.n	8023cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023ca6:	68fb      	ldr	r3, [r7, #12]
 8023ca8:	681b      	ldr	r3, [r3, #0]
 8023caa:	69da      	ldr	r2, [r3, #28]
 8023cac:	68bb      	ldr	r3, [r7, #8]
 8023cae:	4013      	ands	r3, r2
 8023cb0:	68ba      	ldr	r2, [r7, #8]
 8023cb2:	429a      	cmp	r2, r3
 8023cb4:	bf0c      	ite	eq
 8023cb6:	2301      	moveq	r3, #1
 8023cb8:	2300      	movne	r3, #0
 8023cba:	b2db      	uxtb	r3, r3
 8023cbc:	461a      	mov	r2, r3
 8023cbe:	79fb      	ldrb	r3, [r7, #7]
 8023cc0:	429a      	cmp	r2, r3
 8023cc2:	d0a6      	beq.n	8023c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8023cc4:	2300      	movs	r3, #0
}
 8023cc6:	4618      	mov	r0, r3
 8023cc8:	3710      	adds	r7, #16
 8023cca:	46bd      	mov	sp, r7
 8023ccc:	bd80      	pop	{r7, pc}
	...

08023cd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8023cd0:	b480      	push	{r7}
 8023cd2:	b0a3      	sub	sp, #140	@ 0x8c
 8023cd4:	af00      	add	r7, sp, #0
 8023cd6:	60f8      	str	r0, [r7, #12]
 8023cd8:	60b9      	str	r1, [r7, #8]
 8023cda:	4613      	mov	r3, r2
 8023cdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8023cde:	68fb      	ldr	r3, [r7, #12]
 8023ce0:	68ba      	ldr	r2, [r7, #8]
 8023ce2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	88fa      	ldrh	r2, [r7, #6]
 8023ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8023cec:	68fb      	ldr	r3, [r7, #12]
 8023cee:	88fa      	ldrh	r2, [r7, #6]
 8023cf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8023cf4:	68fb      	ldr	r3, [r7, #12]
 8023cf6:	2200      	movs	r2, #0
 8023cf8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8023cfa:	68fb      	ldr	r3, [r7, #12]
 8023cfc:	689b      	ldr	r3, [r3, #8]
 8023cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023d02:	d10e      	bne.n	8023d22 <UART_Start_Receive_IT+0x52>
 8023d04:	68fb      	ldr	r3, [r7, #12]
 8023d06:	691b      	ldr	r3, [r3, #16]
 8023d08:	2b00      	cmp	r3, #0
 8023d0a:	d105      	bne.n	8023d18 <UART_Start_Receive_IT+0x48>
 8023d0c:	68fb      	ldr	r3, [r7, #12]
 8023d0e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8023d12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8023d16:	e02d      	b.n	8023d74 <UART_Start_Receive_IT+0xa4>
 8023d18:	68fb      	ldr	r3, [r7, #12]
 8023d1a:	22ff      	movs	r2, #255	@ 0xff
 8023d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8023d20:	e028      	b.n	8023d74 <UART_Start_Receive_IT+0xa4>
 8023d22:	68fb      	ldr	r3, [r7, #12]
 8023d24:	689b      	ldr	r3, [r3, #8]
 8023d26:	2b00      	cmp	r3, #0
 8023d28:	d10d      	bne.n	8023d46 <UART_Start_Receive_IT+0x76>
 8023d2a:	68fb      	ldr	r3, [r7, #12]
 8023d2c:	691b      	ldr	r3, [r3, #16]
 8023d2e:	2b00      	cmp	r3, #0
 8023d30:	d104      	bne.n	8023d3c <UART_Start_Receive_IT+0x6c>
 8023d32:	68fb      	ldr	r3, [r7, #12]
 8023d34:	22ff      	movs	r2, #255	@ 0xff
 8023d36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8023d3a:	e01b      	b.n	8023d74 <UART_Start_Receive_IT+0xa4>
 8023d3c:	68fb      	ldr	r3, [r7, #12]
 8023d3e:	227f      	movs	r2, #127	@ 0x7f
 8023d40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8023d44:	e016      	b.n	8023d74 <UART_Start_Receive_IT+0xa4>
 8023d46:	68fb      	ldr	r3, [r7, #12]
 8023d48:	689b      	ldr	r3, [r3, #8]
 8023d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023d4e:	d10d      	bne.n	8023d6c <UART_Start_Receive_IT+0x9c>
 8023d50:	68fb      	ldr	r3, [r7, #12]
 8023d52:	691b      	ldr	r3, [r3, #16]
 8023d54:	2b00      	cmp	r3, #0
 8023d56:	d104      	bne.n	8023d62 <UART_Start_Receive_IT+0x92>
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	227f      	movs	r2, #127	@ 0x7f
 8023d5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8023d60:	e008      	b.n	8023d74 <UART_Start_Receive_IT+0xa4>
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	223f      	movs	r2, #63	@ 0x3f
 8023d66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8023d6a:	e003      	b.n	8023d74 <UART_Start_Receive_IT+0xa4>
 8023d6c:	68fb      	ldr	r3, [r7, #12]
 8023d6e:	2200      	movs	r2, #0
 8023d70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023d74:	68fb      	ldr	r3, [r7, #12]
 8023d76:	2200      	movs	r2, #0
 8023d78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8023d7c:	68fb      	ldr	r3, [r7, #12]
 8023d7e:	2222      	movs	r2, #34	@ 0x22
 8023d80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023d84:	68fb      	ldr	r3, [r7, #12]
 8023d86:	681b      	ldr	r3, [r3, #0]
 8023d88:	3308      	adds	r3, #8
 8023d8a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8023d8e:	e853 3f00 	ldrex	r3, [r3]
 8023d92:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8023d94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8023d96:	f043 0301 	orr.w	r3, r3, #1
 8023d9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8023d9e:	68fb      	ldr	r3, [r7, #12]
 8023da0:	681b      	ldr	r3, [r3, #0]
 8023da2:	3308      	adds	r3, #8
 8023da4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023da8:	673a      	str	r2, [r7, #112]	@ 0x70
 8023daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023dac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8023dae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8023db0:	e841 2300 	strex	r3, r2, [r1]
 8023db4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8023db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8023db8:	2b00      	cmp	r3, #0
 8023dba:	d1e3      	bne.n	8023d84 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8023dbc:	68fb      	ldr	r3, [r7, #12]
 8023dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8023dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023dc4:	d14f      	bne.n	8023e66 <UART_Start_Receive_IT+0x196>
 8023dc6:	68fb      	ldr	r3, [r7, #12]
 8023dc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8023dcc:	88fa      	ldrh	r2, [r7, #6]
 8023dce:	429a      	cmp	r2, r3
 8023dd0:	d349      	bcc.n	8023e66 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023dd2:	68fb      	ldr	r3, [r7, #12]
 8023dd4:	689b      	ldr	r3, [r3, #8]
 8023dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023dda:	d107      	bne.n	8023dec <UART_Start_Receive_IT+0x11c>
 8023ddc:	68fb      	ldr	r3, [r7, #12]
 8023dde:	691b      	ldr	r3, [r3, #16]
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d103      	bne.n	8023dec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8023de4:	68fb      	ldr	r3, [r7, #12]
 8023de6:	4a47      	ldr	r2, [pc, #284]	@ (8023f04 <UART_Start_Receive_IT+0x234>)
 8023de8:	675a      	str	r2, [r3, #116]	@ 0x74
 8023dea:	e002      	b.n	8023df2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8023dec:	68fb      	ldr	r3, [r7, #12]
 8023dee:	4a46      	ldr	r2, [pc, #280]	@ (8023f08 <UART_Start_Receive_IT+0x238>)
 8023df0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8023df2:	68fb      	ldr	r3, [r7, #12]
 8023df4:	691b      	ldr	r3, [r3, #16]
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	d01a      	beq.n	8023e30 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8023dfa:	68fb      	ldr	r3, [r7, #12]
 8023dfc:	681b      	ldr	r3, [r3, #0]
 8023dfe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023e02:	e853 3f00 	ldrex	r3, [r3]
 8023e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8023e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023e0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8023e12:	68fb      	ldr	r3, [r7, #12]
 8023e14:	681b      	ldr	r3, [r3, #0]
 8023e16:	461a      	mov	r2, r3
 8023e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023e1e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023e20:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8023e22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8023e24:	e841 2300 	strex	r3, r2, [r1]
 8023e28:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8023e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d1e4      	bne.n	8023dfa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8023e30:	68fb      	ldr	r3, [r7, #12]
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	3308      	adds	r3, #8
 8023e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023e3a:	e853 3f00 	ldrex	r3, [r3]
 8023e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8023e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8023e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8023e48:	68fb      	ldr	r3, [r7, #12]
 8023e4a:	681b      	ldr	r3, [r3, #0]
 8023e4c:	3308      	adds	r3, #8
 8023e4e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8023e50:	64ba      	str	r2, [r7, #72]	@ 0x48
 8023e52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023e54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8023e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023e58:	e841 2300 	strex	r3, r2, [r1]
 8023e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8023e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	d1e5      	bne.n	8023e30 <UART_Start_Receive_IT+0x160>
 8023e64:	e046      	b.n	8023ef4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8023e66:	68fb      	ldr	r3, [r7, #12]
 8023e68:	689b      	ldr	r3, [r3, #8]
 8023e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023e6e:	d107      	bne.n	8023e80 <UART_Start_Receive_IT+0x1b0>
 8023e70:	68fb      	ldr	r3, [r7, #12]
 8023e72:	691b      	ldr	r3, [r3, #16]
 8023e74:	2b00      	cmp	r3, #0
 8023e76:	d103      	bne.n	8023e80 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8023e78:	68fb      	ldr	r3, [r7, #12]
 8023e7a:	4a24      	ldr	r2, [pc, #144]	@ (8023f0c <UART_Start_Receive_IT+0x23c>)
 8023e7c:	675a      	str	r2, [r3, #116]	@ 0x74
 8023e7e:	e002      	b.n	8023e86 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8023e80:	68fb      	ldr	r3, [r7, #12]
 8023e82:	4a23      	ldr	r2, [pc, #140]	@ (8023f10 <UART_Start_Receive_IT+0x240>)
 8023e84:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8023e86:	68fb      	ldr	r3, [r7, #12]
 8023e88:	691b      	ldr	r3, [r3, #16]
 8023e8a:	2b00      	cmp	r3, #0
 8023e8c:	d019      	beq.n	8023ec2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8023e8e:	68fb      	ldr	r3, [r7, #12]
 8023e90:	681b      	ldr	r3, [r3, #0]
 8023e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023e96:	e853 3f00 	ldrex	r3, [r3]
 8023e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8023e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023e9e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8023ea2:	677b      	str	r3, [r7, #116]	@ 0x74
 8023ea4:	68fb      	ldr	r3, [r7, #12]
 8023ea6:	681b      	ldr	r3, [r3, #0]
 8023ea8:	461a      	mov	r2, r3
 8023eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8023eae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023eb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8023eb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8023eb4:	e841 2300 	strex	r3, r2, [r1]
 8023eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8023eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ebc:	2b00      	cmp	r3, #0
 8023ebe:	d1e6      	bne.n	8023e8e <UART_Start_Receive_IT+0x1be>
 8023ec0:	e018      	b.n	8023ef4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	681b      	ldr	r3, [r3, #0]
 8023ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023ec8:	697b      	ldr	r3, [r7, #20]
 8023eca:	e853 3f00 	ldrex	r3, [r3]
 8023ece:	613b      	str	r3, [r7, #16]
   return(result);
 8023ed0:	693b      	ldr	r3, [r7, #16]
 8023ed2:	f043 0320 	orr.w	r3, r3, #32
 8023ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8023ed8:	68fb      	ldr	r3, [r7, #12]
 8023eda:	681b      	ldr	r3, [r3, #0]
 8023edc:	461a      	mov	r2, r3
 8023ede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8023ee0:	623b      	str	r3, [r7, #32]
 8023ee2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023ee4:	69f9      	ldr	r1, [r7, #28]
 8023ee6:	6a3a      	ldr	r2, [r7, #32]
 8023ee8:	e841 2300 	strex	r3, r2, [r1]
 8023eec:	61bb      	str	r3, [r7, #24]
   return(result);
 8023eee:	69bb      	ldr	r3, [r7, #24]
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d1e6      	bne.n	8023ec2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8023ef4:	2300      	movs	r3, #0
}
 8023ef6:	4618      	mov	r0, r3
 8023ef8:	378c      	adds	r7, #140	@ 0x8c
 8023efa:	46bd      	mov	sp, r7
 8023efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f00:	4770      	bx	lr
 8023f02:	bf00      	nop
 8023f04:	08024925 	.word	0x08024925
 8023f08:	080245b5 	.word	0x080245b5
 8023f0c:	080243f1 	.word	0x080243f1
 8023f10:	0802422d 	.word	0x0802422d

08023f14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8023f14:	b480      	push	{r7}
 8023f16:	b08f      	sub	sp, #60	@ 0x3c
 8023f18:	af00      	add	r7, sp, #0
 8023f1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8023f1c:	687b      	ldr	r3, [r7, #4]
 8023f1e:	681b      	ldr	r3, [r3, #0]
 8023f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023f22:	6a3b      	ldr	r3, [r7, #32]
 8023f24:	e853 3f00 	ldrex	r3, [r3]
 8023f28:	61fb      	str	r3, [r7, #28]
   return(result);
 8023f2a:	69fb      	ldr	r3, [r7, #28]
 8023f2c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8023f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	681b      	ldr	r3, [r3, #0]
 8023f36:	461a      	mov	r2, r3
 8023f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023f3c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023f3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023f42:	e841 2300 	strex	r3, r2, [r1]
 8023f46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8023f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023f4a:	2b00      	cmp	r3, #0
 8023f4c:	d1e6      	bne.n	8023f1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	681b      	ldr	r3, [r3, #0]
 8023f52:	3308      	adds	r3, #8
 8023f54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	e853 3f00 	ldrex	r3, [r3]
 8023f5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8023f5e:	68bb      	ldr	r3, [r7, #8]
 8023f60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8023f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	3308      	adds	r3, #8
 8023f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023f6e:	61ba      	str	r2, [r7, #24]
 8023f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023f72:	6979      	ldr	r1, [r7, #20]
 8023f74:	69ba      	ldr	r2, [r7, #24]
 8023f76:	e841 2300 	strex	r3, r2, [r1]
 8023f7a:	613b      	str	r3, [r7, #16]
   return(result);
 8023f7c:	693b      	ldr	r3, [r7, #16]
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d1e5      	bne.n	8023f4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	2220      	movs	r2, #32
 8023f86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8023f8a:	bf00      	nop
 8023f8c:	373c      	adds	r7, #60	@ 0x3c
 8023f8e:	46bd      	mov	sp, r7
 8023f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f94:	4770      	bx	lr

08023f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8023f96:	b480      	push	{r7}
 8023f98:	b095      	sub	sp, #84	@ 0x54
 8023f9a:	af00      	add	r7, sp, #0
 8023f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	681b      	ldr	r3, [r3, #0]
 8023fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023fa6:	e853 3f00 	ldrex	r3, [r3]
 8023faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8023fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8023fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023fb4:	687b      	ldr	r3, [r7, #4]
 8023fb6:	681b      	ldr	r3, [r3, #0]
 8023fb8:	461a      	mov	r2, r3
 8023fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8023fbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023fc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023fc4:	e841 2300 	strex	r3, r2, [r1]
 8023fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8023fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d1e6      	bne.n	8023f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8023fd0:	687b      	ldr	r3, [r7, #4]
 8023fd2:	681b      	ldr	r3, [r3, #0]
 8023fd4:	3308      	adds	r3, #8
 8023fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023fd8:	6a3b      	ldr	r3, [r7, #32]
 8023fda:	e853 3f00 	ldrex	r3, [r3]
 8023fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8023fe0:	69fb      	ldr	r3, [r7, #28]
 8023fe2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8023fe6:	f023 0301 	bic.w	r3, r3, #1
 8023fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023fec:	687b      	ldr	r3, [r7, #4]
 8023fee:	681b      	ldr	r3, [r3, #0]
 8023ff0:	3308      	adds	r3, #8
 8023ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8023ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023ff8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023ffa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023ffc:	e841 2300 	strex	r3, r2, [r1]
 8024000:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8024002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024004:	2b00      	cmp	r3, #0
 8024006:	d1e3      	bne.n	8023fd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802400c:	2b01      	cmp	r3, #1
 802400e:	d118      	bne.n	8024042 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	681b      	ldr	r3, [r3, #0]
 8024014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024016:	68fb      	ldr	r3, [r7, #12]
 8024018:	e853 3f00 	ldrex	r3, [r3]
 802401c:	60bb      	str	r3, [r7, #8]
   return(result);
 802401e:	68bb      	ldr	r3, [r7, #8]
 8024020:	f023 0310 	bic.w	r3, r3, #16
 8024024:	647b      	str	r3, [r7, #68]	@ 0x44
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	461a      	mov	r2, r3
 802402c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802402e:	61bb      	str	r3, [r7, #24]
 8024030:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024032:	6979      	ldr	r1, [r7, #20]
 8024034:	69ba      	ldr	r2, [r7, #24]
 8024036:	e841 2300 	strex	r3, r2, [r1]
 802403a:	613b      	str	r3, [r7, #16]
   return(result);
 802403c:	693b      	ldr	r3, [r7, #16]
 802403e:	2b00      	cmp	r3, #0
 8024040:	d1e6      	bne.n	8024010 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	2220      	movs	r2, #32
 8024046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	2200      	movs	r2, #0
 802404e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8024050:	687b      	ldr	r3, [r7, #4]
 8024052:	2200      	movs	r2, #0
 8024054:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8024056:	bf00      	nop
 8024058:	3754      	adds	r7, #84	@ 0x54
 802405a:	46bd      	mov	sp, r7
 802405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024060:	4770      	bx	lr

08024062 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8024062:	b580      	push	{r7, lr}
 8024064:	b08a      	sub	sp, #40	@ 0x28
 8024066:	af00      	add	r7, sp, #0
 8024068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802406e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8024070:	687b      	ldr	r3, [r7, #4]
 8024072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024074:	2b81      	cmp	r3, #129	@ 0x81
 8024076:	d01d      	beq.n	80240b4 <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 8024078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802407a:	2200      	movs	r2, #0
 802407c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8024080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024082:	681b      	ldr	r3, [r3, #0]
 8024084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024086:	693b      	ldr	r3, [r7, #16]
 8024088:	e853 3f00 	ldrex	r3, [r3]
 802408c:	60fb      	str	r3, [r7, #12]
   return(result);
 802408e:	68fb      	ldr	r3, [r7, #12]
 8024090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024094:	623b      	str	r3, [r7, #32]
 8024096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024098:	681b      	ldr	r3, [r3, #0]
 802409a:	461a      	mov	r2, r3
 802409c:	6a3b      	ldr	r3, [r7, #32]
 802409e:	61fb      	str	r3, [r7, #28]
 80240a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80240a2:	69b9      	ldr	r1, [r7, #24]
 80240a4:	69fa      	ldr	r2, [r7, #28]
 80240a6:	e841 2300 	strex	r3, r2, [r1]
 80240aa:	617b      	str	r3, [r7, #20]
   return(result);
 80240ac:	697b      	ldr	r3, [r7, #20]
 80240ae:	2b00      	cmp	r3, #0
 80240b0:	d1e6      	bne.n	8024080 <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80240b2:	e002      	b.n	80240ba <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 80240b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80240b6:	f7ff fa81 	bl	80235bc <HAL_UART_TxCpltCallback>
}
 80240ba:	bf00      	nop
 80240bc:	3728      	adds	r7, #40	@ 0x28
 80240be:	46bd      	mov	sp, r7
 80240c0:	bd80      	pop	{r7, pc}

080240c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80240c2:	b580      	push	{r7, lr}
 80240c4:	b084      	sub	sp, #16
 80240c6:	af00      	add	r7, sp, #0
 80240c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80240ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80240d0:	68f8      	ldr	r0, [r7, #12]
 80240d2:	f7ff fa7d 	bl	80235d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80240d6:	bf00      	nop
 80240d8:	3710      	adds	r7, #16
 80240da:	46bd      	mov	sp, r7
 80240dc:	bd80      	pop	{r7, pc}

080240de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80240de:	b580      	push	{r7, lr}
 80240e0:	b086      	sub	sp, #24
 80240e2:	af00      	add	r7, sp, #0
 80240e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80240ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80240ec:	697b      	ldr	r3, [r7, #20]
 80240ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80240f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80240f4:	697b      	ldr	r3, [r7, #20]
 80240f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80240fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80240fc:	697b      	ldr	r3, [r7, #20]
 80240fe:	681b      	ldr	r3, [r3, #0]
 8024100:	689b      	ldr	r3, [r3, #8]
 8024102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8024106:	2b80      	cmp	r3, #128	@ 0x80
 8024108:	d109      	bne.n	802411e <UART_DMAError+0x40>
 802410a:	693b      	ldr	r3, [r7, #16]
 802410c:	2b21      	cmp	r3, #33	@ 0x21
 802410e:	d106      	bne.n	802411e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8024110:	697b      	ldr	r3, [r7, #20]
 8024112:	2200      	movs	r2, #0
 8024114:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8024118:	6978      	ldr	r0, [r7, #20]
 802411a:	f7ff fefb 	bl	8023f14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 802411e:	697b      	ldr	r3, [r7, #20]
 8024120:	681b      	ldr	r3, [r3, #0]
 8024122:	689b      	ldr	r3, [r3, #8]
 8024124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024128:	2b40      	cmp	r3, #64	@ 0x40
 802412a:	d109      	bne.n	8024140 <UART_DMAError+0x62>
 802412c:	68fb      	ldr	r3, [r7, #12]
 802412e:	2b22      	cmp	r3, #34	@ 0x22
 8024130:	d106      	bne.n	8024140 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8024132:	697b      	ldr	r3, [r7, #20]
 8024134:	2200      	movs	r2, #0
 8024136:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 802413a:	6978      	ldr	r0, [r7, #20]
 802413c:	f7ff ff2b 	bl	8023f96 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8024140:	697b      	ldr	r3, [r7, #20]
 8024142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024146:	f043 0210 	orr.w	r2, r3, #16
 802414a:	697b      	ldr	r3, [r7, #20]
 802414c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8024150:	6978      	ldr	r0, [r7, #20]
 8024152:	f7ff fa47 	bl	80235e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8024156:	bf00      	nop
 8024158:	3718      	adds	r7, #24
 802415a:	46bd      	mov	sp, r7
 802415c:	bd80      	pop	{r7, pc}

0802415e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802415e:	b580      	push	{r7, lr}
 8024160:	b084      	sub	sp, #16
 8024162:	af00      	add	r7, sp, #0
 8024164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802416a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 802416c:	68fb      	ldr	r3, [r7, #12]
 802416e:	2200      	movs	r2, #0
 8024170:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8024174:	68fb      	ldr	r3, [r7, #12]
 8024176:	2200      	movs	r2, #0
 8024178:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802417c:	68f8      	ldr	r0, [r7, #12]
 802417e:	f7ff fa31 	bl	80235e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8024182:	bf00      	nop
 8024184:	3710      	adds	r7, #16
 8024186:	46bd      	mov	sp, r7
 8024188:	bd80      	pop	{r7, pc}

0802418a <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 802418a:	b580      	push	{r7, lr}
 802418c:	b084      	sub	sp, #16
 802418e:	af00      	add	r7, sp, #0
 8024190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024196:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8024198:	68fb      	ldr	r3, [r7, #12]
 802419a:	2200      	movs	r2, #0
 802419c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80241a0:	68fb      	ldr	r3, [r7, #12]
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	220f      	movs	r2, #15
 80241a6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80241a8:	68fb      	ldr	r3, [r7, #12]
 80241aa:	681b      	ldr	r3, [r3, #0]
 80241ac:	699a      	ldr	r2, [r3, #24]
 80241ae:	68fb      	ldr	r3, [r7, #12]
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	f042 0208 	orr.w	r2, r2, #8
 80241b6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80241b8:	68fb      	ldr	r3, [r7, #12]
 80241ba:	2220      	movs	r2, #32
 80241bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80241c0:	68fb      	ldr	r3, [r7, #12]
 80241c2:	2200      	movs	r2, #0
 80241c4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80241c6:	68f8      	ldr	r0, [r7, #12]
 80241c8:	f7ff fa16 	bl	80235f8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80241cc:	bf00      	nop
 80241ce:	3710      	adds	r7, #16
 80241d0:	46bd      	mov	sp, r7
 80241d2:	bd80      	pop	{r7, pc}

080241d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80241d4:	b580      	push	{r7, lr}
 80241d6:	b088      	sub	sp, #32
 80241d8:	af00      	add	r7, sp, #0
 80241da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	681b      	ldr	r3, [r3, #0]
 80241e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80241e2:	68fb      	ldr	r3, [r7, #12]
 80241e4:	e853 3f00 	ldrex	r3, [r3]
 80241e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80241ea:	68bb      	ldr	r3, [r7, #8]
 80241ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80241f0:	61fb      	str	r3, [r7, #28]
 80241f2:	687b      	ldr	r3, [r7, #4]
 80241f4:	681b      	ldr	r3, [r3, #0]
 80241f6:	461a      	mov	r2, r3
 80241f8:	69fb      	ldr	r3, [r7, #28]
 80241fa:	61bb      	str	r3, [r7, #24]
 80241fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80241fe:	6979      	ldr	r1, [r7, #20]
 8024200:	69ba      	ldr	r2, [r7, #24]
 8024202:	e841 2300 	strex	r3, r2, [r1]
 8024206:	613b      	str	r3, [r7, #16]
   return(result);
 8024208:	693b      	ldr	r3, [r7, #16]
 802420a:	2b00      	cmp	r3, #0
 802420c:	d1e6      	bne.n	80241dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802420e:	687b      	ldr	r3, [r7, #4]
 8024210:	2220      	movs	r2, #32
 8024212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	2200      	movs	r2, #0
 802421a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802421c:	6878      	ldr	r0, [r7, #4]
 802421e:	f7ff f9cd 	bl	80235bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8024222:	bf00      	nop
 8024224:	3720      	adds	r7, #32
 8024226:	46bd      	mov	sp, r7
 8024228:	bd80      	pop	{r7, pc}
	...

0802422c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 802422c:	b580      	push	{r7, lr}
 802422e:	b09c      	sub	sp, #112	@ 0x70
 8024230:	af00      	add	r7, sp, #0
 8024232:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 802423a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802423e:	687b      	ldr	r3, [r7, #4]
 8024240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8024244:	2b22      	cmp	r3, #34	@ 0x22
 8024246:	f040 80c3 	bne.w	80243d0 <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802424a:	687b      	ldr	r3, [r7, #4]
 802424c:	681b      	ldr	r3, [r3, #0]
 802424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024250:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8024254:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8024258:	b2d9      	uxtb	r1, r3
 802425a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 802425e:	b2da      	uxtb	r2, r3
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024264:	400a      	ands	r2, r1
 8024266:	b2d2      	uxtb	r2, r2
 8024268:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802426e:	1c5a      	adds	r2, r3, #1
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8024274:	687b      	ldr	r3, [r7, #4]
 8024276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802427a:	b29b      	uxth	r3, r3
 802427c:	3b01      	subs	r3, #1
 802427e:	b29a      	uxth	r2, r3
 8024280:	687b      	ldr	r3, [r7, #4]
 8024282:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8024286:	687b      	ldr	r3, [r7, #4]
 8024288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802428c:	b29b      	uxth	r3, r3
 802428e:	2b00      	cmp	r3, #0
 8024290:	f040 80a6 	bne.w	80243e0 <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024294:	687b      	ldr	r3, [r7, #4]
 8024296:	681b      	ldr	r3, [r3, #0]
 8024298:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802429a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802429c:	e853 3f00 	ldrex	r3, [r3]
 80242a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80242a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80242a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80242a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80242aa:	687b      	ldr	r3, [r7, #4]
 80242ac:	681b      	ldr	r3, [r3, #0]
 80242ae:	461a      	mov	r2, r3
 80242b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80242b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80242b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80242b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80242b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80242ba:	e841 2300 	strex	r3, r2, [r1]
 80242be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80242c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80242c2:	2b00      	cmp	r3, #0
 80242c4:	d1e6      	bne.n	8024294 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	681b      	ldr	r3, [r3, #0]
 80242ca:	3308      	adds	r3, #8
 80242cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80242ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80242d0:	e853 3f00 	ldrex	r3, [r3]
 80242d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80242d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80242d8:	f023 0301 	bic.w	r3, r3, #1
 80242dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	681b      	ldr	r3, [r3, #0]
 80242e2:	3308      	adds	r3, #8
 80242e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80242e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80242e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80242ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80242ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80242ee:	e841 2300 	strex	r3, r2, [r1]
 80242f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80242f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d1e5      	bne.n	80242c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80242fa:	687b      	ldr	r3, [r7, #4]
 80242fc:	2220      	movs	r2, #32
 80242fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8024302:	687b      	ldr	r3, [r7, #4]
 8024304:	2200      	movs	r2, #0
 8024306:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024308:	687b      	ldr	r3, [r7, #4]
 802430a:	2200      	movs	r2, #0
 802430c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	681b      	ldr	r3, [r3, #0]
 8024312:	4a35      	ldr	r2, [pc, #212]	@ (80243e8 <UART_RxISR_8BIT+0x1bc>)
 8024314:	4293      	cmp	r3, r2
 8024316:	d024      	beq.n	8024362 <UART_RxISR_8BIT+0x136>
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	681b      	ldr	r3, [r3, #0]
 802431c:	4a33      	ldr	r2, [pc, #204]	@ (80243ec <UART_RxISR_8BIT+0x1c0>)
 802431e:	4293      	cmp	r3, r2
 8024320:	d01f      	beq.n	8024362 <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8024322:	687b      	ldr	r3, [r7, #4]
 8024324:	681b      	ldr	r3, [r3, #0]
 8024326:	685b      	ldr	r3, [r3, #4]
 8024328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 802432c:	2b00      	cmp	r3, #0
 802432e:	d018      	beq.n	8024362 <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	681b      	ldr	r3, [r3, #0]
 8024334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024338:	e853 3f00 	ldrex	r3, [r3]
 802433c:	623b      	str	r3, [r7, #32]
   return(result);
 802433e:	6a3b      	ldr	r3, [r7, #32]
 8024340:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8024344:	663b      	str	r3, [r7, #96]	@ 0x60
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	681b      	ldr	r3, [r3, #0]
 802434a:	461a      	mov	r2, r3
 802434c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802434e:	633b      	str	r3, [r7, #48]	@ 0x30
 8024350:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024356:	e841 2300 	strex	r3, r2, [r1]
 802435a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 802435c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802435e:	2b00      	cmp	r3, #0
 8024360:	d1e6      	bne.n	8024330 <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024362:	687b      	ldr	r3, [r7, #4]
 8024364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024366:	2b01      	cmp	r3, #1
 8024368:	d12e      	bne.n	80243c8 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	2200      	movs	r2, #0
 802436e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024376:	693b      	ldr	r3, [r7, #16]
 8024378:	e853 3f00 	ldrex	r3, [r3]
 802437c:	60fb      	str	r3, [r7, #12]
   return(result);
 802437e:	68fb      	ldr	r3, [r7, #12]
 8024380:	f023 0310 	bic.w	r3, r3, #16
 8024384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8024386:	687b      	ldr	r3, [r7, #4]
 8024388:	681b      	ldr	r3, [r3, #0]
 802438a:	461a      	mov	r2, r3
 802438c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 802438e:	61fb      	str	r3, [r7, #28]
 8024390:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024392:	69b9      	ldr	r1, [r7, #24]
 8024394:	69fa      	ldr	r2, [r7, #28]
 8024396:	e841 2300 	strex	r3, r2, [r1]
 802439a:	617b      	str	r3, [r7, #20]
   return(result);
 802439c:	697b      	ldr	r3, [r7, #20]
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d1e6      	bne.n	8024370 <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80243a2:	687b      	ldr	r3, [r7, #4]
 80243a4:	681b      	ldr	r3, [r3, #0]
 80243a6:	69db      	ldr	r3, [r3, #28]
 80243a8:	f003 0310 	and.w	r3, r3, #16
 80243ac:	2b10      	cmp	r3, #16
 80243ae:	d103      	bne.n	80243b8 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	681b      	ldr	r3, [r3, #0]
 80243b4:	2210      	movs	r2, #16
 80243b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80243be:	4619      	mov	r1, r3
 80243c0:	6878      	ldr	r0, [r7, #4]
 80243c2:	f7ff f923 	bl	802360c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80243c6:	e00b      	b.n	80243e0 <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 80243c8:	6878      	ldr	r0, [r7, #4]
 80243ca:	f7e7 f913 	bl	800b5f4 <HAL_UART_RxCpltCallback>
}
 80243ce:	e007      	b.n	80243e0 <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	681b      	ldr	r3, [r3, #0]
 80243d4:	699a      	ldr	r2, [r3, #24]
 80243d6:	687b      	ldr	r3, [r7, #4]
 80243d8:	681b      	ldr	r3, [r3, #0]
 80243da:	f042 0208 	orr.w	r2, r2, #8
 80243de:	619a      	str	r2, [r3, #24]
}
 80243e0:	bf00      	nop
 80243e2:	3770      	adds	r7, #112	@ 0x70
 80243e4:	46bd      	mov	sp, r7
 80243e6:	bd80      	pop	{r7, pc}
 80243e8:	46002400 	.word	0x46002400
 80243ec:	56002400 	.word	0x56002400

080243f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80243f0:	b580      	push	{r7, lr}
 80243f2:	b09c      	sub	sp, #112	@ 0x70
 80243f4:	af00      	add	r7, sp, #0
 80243f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80243f8:	687b      	ldr	r3, [r7, #4]
 80243fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80243fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8024408:	2b22      	cmp	r3, #34	@ 0x22
 802440a:	f040 80c3 	bne.w	8024594 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802440e:	687b      	ldr	r3, [r7, #4]
 8024410:	681b      	ldr	r3, [r3, #0]
 8024412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802441c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 802441e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8024422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8024426:	4013      	ands	r3, r2
 8024428:	b29a      	uxth	r2, r3
 802442a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802442c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024432:	1c9a      	adds	r2, r3, #2
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802443e:	b29b      	uxth	r3, r3
 8024440:	3b01      	subs	r3, #1
 8024442:	b29a      	uxth	r2, r3
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8024450:	b29b      	uxth	r3, r3
 8024452:	2b00      	cmp	r3, #0
 8024454:	f040 80a6 	bne.w	80245a4 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	681b      	ldr	r3, [r3, #0]
 802445c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802445e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8024460:	e853 3f00 	ldrex	r3, [r3]
 8024464:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8024466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8024468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802446c:	667b      	str	r3, [r7, #100]	@ 0x64
 802446e:	687b      	ldr	r3, [r7, #4]
 8024470:	681b      	ldr	r3, [r3, #0]
 8024472:	461a      	mov	r2, r3
 8024474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024476:	657b      	str	r3, [r7, #84]	@ 0x54
 8024478:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802447a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802447c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 802447e:	e841 2300 	strex	r3, r2, [r1]
 8024482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8024484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024486:	2b00      	cmp	r3, #0
 8024488:	d1e6      	bne.n	8024458 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802448a:	687b      	ldr	r3, [r7, #4]
 802448c:	681b      	ldr	r3, [r3, #0]
 802448e:	3308      	adds	r3, #8
 8024490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024494:	e853 3f00 	ldrex	r3, [r3]
 8024498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802449c:	f023 0301 	bic.w	r3, r3, #1
 80244a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	681b      	ldr	r3, [r3, #0]
 80244a6:	3308      	adds	r3, #8
 80244a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80244aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80244ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80244ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80244b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80244b2:	e841 2300 	strex	r3, r2, [r1]
 80244b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80244b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80244ba:	2b00      	cmp	r3, #0
 80244bc:	d1e5      	bne.n	802448a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	2220      	movs	r2, #32
 80244c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	2200      	movs	r2, #0
 80244ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	2200      	movs	r2, #0
 80244d0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	681b      	ldr	r3, [r3, #0]
 80244d6:	4a35      	ldr	r2, [pc, #212]	@ (80245ac <UART_RxISR_16BIT+0x1bc>)
 80244d8:	4293      	cmp	r3, r2
 80244da:	d024      	beq.n	8024526 <UART_RxISR_16BIT+0x136>
 80244dc:	687b      	ldr	r3, [r7, #4]
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	4a33      	ldr	r2, [pc, #204]	@ (80245b0 <UART_RxISR_16BIT+0x1c0>)
 80244e2:	4293      	cmp	r3, r2
 80244e4:	d01f      	beq.n	8024526 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	685b      	ldr	r3, [r3, #4]
 80244ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80244f0:	2b00      	cmp	r3, #0
 80244f2:	d018      	beq.n	8024526 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80244f4:	687b      	ldr	r3, [r7, #4]
 80244f6:	681b      	ldr	r3, [r3, #0]
 80244f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80244fa:	6a3b      	ldr	r3, [r7, #32]
 80244fc:	e853 3f00 	ldrex	r3, [r3]
 8024500:	61fb      	str	r3, [r7, #28]
   return(result);
 8024502:	69fb      	ldr	r3, [r7, #28]
 8024504:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8024508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 802450a:	687b      	ldr	r3, [r7, #4]
 802450c:	681b      	ldr	r3, [r3, #0]
 802450e:	461a      	mov	r2, r3
 8024510:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024514:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8024518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802451a:	e841 2300 	strex	r3, r2, [r1]
 802451e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8024520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024522:	2b00      	cmp	r3, #0
 8024524:	d1e6      	bne.n	80244f4 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024526:	687b      	ldr	r3, [r7, #4]
 8024528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802452a:	2b01      	cmp	r3, #1
 802452c:	d12e      	bne.n	802458c <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	2200      	movs	r2, #0
 8024532:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802453a:	68fb      	ldr	r3, [r7, #12]
 802453c:	e853 3f00 	ldrex	r3, [r3]
 8024540:	60bb      	str	r3, [r7, #8]
   return(result);
 8024542:	68bb      	ldr	r3, [r7, #8]
 8024544:	f023 0310 	bic.w	r3, r3, #16
 8024548:	65bb      	str	r3, [r7, #88]	@ 0x58
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	461a      	mov	r2, r3
 8024550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8024552:	61bb      	str	r3, [r7, #24]
 8024554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024556:	6979      	ldr	r1, [r7, #20]
 8024558:	69ba      	ldr	r2, [r7, #24]
 802455a:	e841 2300 	strex	r3, r2, [r1]
 802455e:	613b      	str	r3, [r7, #16]
   return(result);
 8024560:	693b      	ldr	r3, [r7, #16]
 8024562:	2b00      	cmp	r3, #0
 8024564:	d1e6      	bne.n	8024534 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8024566:	687b      	ldr	r3, [r7, #4]
 8024568:	681b      	ldr	r3, [r3, #0]
 802456a:	69db      	ldr	r3, [r3, #28]
 802456c:	f003 0310 	and.w	r3, r3, #16
 8024570:	2b10      	cmp	r3, #16
 8024572:	d103      	bne.n	802457c <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	681b      	ldr	r3, [r3, #0]
 8024578:	2210      	movs	r2, #16
 802457a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8024582:	4619      	mov	r1, r3
 8024584:	6878      	ldr	r0, [r7, #4]
 8024586:	f7ff f841 	bl	802360c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 802458a:	e00b      	b.n	80245a4 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 802458c:	6878      	ldr	r0, [r7, #4]
 802458e:	f7e7 f831 	bl	800b5f4 <HAL_UART_RxCpltCallback>
}
 8024592:	e007      	b.n	80245a4 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	681b      	ldr	r3, [r3, #0]
 8024598:	699a      	ldr	r2, [r3, #24]
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	681b      	ldr	r3, [r3, #0]
 802459e:	f042 0208 	orr.w	r2, r2, #8
 80245a2:	619a      	str	r2, [r3, #24]
}
 80245a4:	bf00      	nop
 80245a6:	3770      	adds	r7, #112	@ 0x70
 80245a8:	46bd      	mov	sp, r7
 80245aa:	bd80      	pop	{r7, pc}
 80245ac:	46002400 	.word	0x46002400
 80245b0:	56002400 	.word	0x56002400

080245b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80245b4:	b580      	push	{r7, lr}
 80245b6:	b0ac      	sub	sp, #176	@ 0xb0
 80245b8:	af00      	add	r7, sp, #0
 80245ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80245c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80245c6:	687b      	ldr	r3, [r7, #4]
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	69db      	ldr	r3, [r3, #28]
 80245cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80245d0:	687b      	ldr	r3, [r7, #4]
 80245d2:	681b      	ldr	r3, [r3, #0]
 80245d4:	681b      	ldr	r3, [r3, #0]
 80245d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	681b      	ldr	r3, [r3, #0]
 80245de:	689b      	ldr	r3, [r3, #8]
 80245e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80245ea:	2b22      	cmp	r3, #34	@ 0x22
 80245ec:	f040 8187 	bne.w	80248fe <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80245f0:	687b      	ldr	r3, [r7, #4]
 80245f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80245f6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80245fa:	e12a      	b.n	8024852 <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80245fc:	687b      	ldr	r3, [r7, #4]
 80245fe:	681b      	ldr	r3, [r3, #0]
 8024600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024602:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8024606:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 802460a:	b2d9      	uxtb	r1, r3
 802460c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8024610:	b2da      	uxtb	r2, r3
 8024612:	687b      	ldr	r3, [r7, #4]
 8024614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024616:	400a      	ands	r2, r1
 8024618:	b2d2      	uxtb	r2, r2
 802461a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 802461c:	687b      	ldr	r3, [r7, #4]
 802461e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024620:	1c5a      	adds	r2, r3, #1
 8024622:	687b      	ldr	r3, [r7, #4]
 8024624:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8024626:	687b      	ldr	r3, [r7, #4]
 8024628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802462c:	b29b      	uxth	r3, r3
 802462e:	3b01      	subs	r3, #1
 8024630:	b29a      	uxth	r2, r3
 8024632:	687b      	ldr	r3, [r7, #4]
 8024634:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8024638:	687b      	ldr	r3, [r7, #4]
 802463a:	681b      	ldr	r3, [r3, #0]
 802463c:	69db      	ldr	r3, [r3, #28]
 802463e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8024642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024646:	f003 0307 	and.w	r3, r3, #7
 802464a:	2b00      	cmp	r3, #0
 802464c:	d053      	beq.n	80246f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 802464e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024652:	f003 0301 	and.w	r3, r3, #1
 8024656:	2b00      	cmp	r3, #0
 8024658:	d011      	beq.n	802467e <UART_RxISR_8BIT_FIFOEN+0xca>
 802465a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 802465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024662:	2b00      	cmp	r3, #0
 8024664:	d00b      	beq.n	802467e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8024666:	687b      	ldr	r3, [r7, #4]
 8024668:	681b      	ldr	r3, [r3, #0]
 802466a:	2201      	movs	r2, #1
 802466c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 802466e:	687b      	ldr	r3, [r7, #4]
 8024670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024674:	f043 0201 	orr.w	r2, r3, #1
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802467e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024682:	f003 0302 	and.w	r3, r3, #2
 8024686:	2b00      	cmp	r3, #0
 8024688:	d011      	beq.n	80246ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 802468a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802468e:	f003 0301 	and.w	r3, r3, #1
 8024692:	2b00      	cmp	r3, #0
 8024694:	d00b      	beq.n	80246ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	2202      	movs	r2, #2
 802469c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80246a4:	f043 0204 	orr.w	r2, r3, #4
 80246a8:	687b      	ldr	r3, [r7, #4]
 80246aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80246ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80246b2:	f003 0304 	and.w	r3, r3, #4
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d011      	beq.n	80246de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80246ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80246be:	f003 0301 	and.w	r3, r3, #1
 80246c2:	2b00      	cmp	r3, #0
 80246c4:	d00b      	beq.n	80246de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	681b      	ldr	r3, [r3, #0]
 80246ca:	2204      	movs	r2, #4
 80246cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80246d4:	f043 0202 	orr.w	r2, r3, #2
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80246de:	687b      	ldr	r3, [r7, #4]
 80246e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80246e4:	2b00      	cmp	r3, #0
 80246e6:	d006      	beq.n	80246f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80246e8:	6878      	ldr	r0, [r7, #4]
 80246ea:	f7fe ff7b 	bl	80235e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80246ee:	687b      	ldr	r3, [r7, #4]
 80246f0:	2200      	movs	r2, #0
 80246f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80246f6:	687b      	ldr	r3, [r7, #4]
 80246f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80246fc:	b29b      	uxth	r3, r3
 80246fe:	2b00      	cmp	r3, #0
 8024700:	f040 80a7 	bne.w	8024852 <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8024704:	687b      	ldr	r3, [r7, #4]
 8024706:	681b      	ldr	r3, [r3, #0]
 8024708:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802470a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802470c:	e853 3f00 	ldrex	r3, [r3]
 8024710:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8024712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8024714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 802471c:	687b      	ldr	r3, [r7, #4]
 802471e:	681b      	ldr	r3, [r3, #0]
 8024720:	461a      	mov	r2, r3
 8024722:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8024726:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8024728:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802472a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 802472c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 802472e:	e841 2300 	strex	r3, r2, [r1]
 8024732:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8024734:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024736:	2b00      	cmp	r3, #0
 8024738:	d1e4      	bne.n	8024704 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802473a:	687b      	ldr	r3, [r7, #4]
 802473c:	681b      	ldr	r3, [r3, #0]
 802473e:	3308      	adds	r3, #8
 8024740:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024744:	e853 3f00 	ldrex	r3, [r3]
 8024748:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 802474a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 802474c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024750:	f023 0301 	bic.w	r3, r3, #1
 8024754:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	3308      	adds	r3, #8
 802475e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8024762:	66ba      	str	r2, [r7, #104]	@ 0x68
 8024764:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024766:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8024768:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 802476a:	e841 2300 	strex	r3, r2, [r1]
 802476e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8024770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8024772:	2b00      	cmp	r3, #0
 8024774:	d1e1      	bne.n	802473a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	2220      	movs	r2, #32
 802477a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	2200      	movs	r2, #0
 8024782:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	2200      	movs	r2, #0
 8024788:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 802478a:	687b      	ldr	r3, [r7, #4]
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	4a62      	ldr	r2, [pc, #392]	@ (8024918 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8024790:	4293      	cmp	r3, r2
 8024792:	d026      	beq.n	80247e2 <UART_RxISR_8BIT_FIFOEN+0x22e>
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	681b      	ldr	r3, [r3, #0]
 8024798:	4a60      	ldr	r2, [pc, #384]	@ (802491c <UART_RxISR_8BIT_FIFOEN+0x368>)
 802479a:	4293      	cmp	r3, r2
 802479c:	d021      	beq.n	80247e2 <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 802479e:	687b      	ldr	r3, [r7, #4]
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	685b      	ldr	r3, [r3, #4]
 80247a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	d01a      	beq.n	80247e2 <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80247ac:	687b      	ldr	r3, [r7, #4]
 80247ae:	681b      	ldr	r3, [r3, #0]
 80247b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80247b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80247b4:	e853 3f00 	ldrex	r3, [r3]
 80247b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80247ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80247bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80247c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	681b      	ldr	r3, [r3, #0]
 80247c8:	461a      	mov	r2, r3
 80247ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80247ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80247d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80247d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80247d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80247d6:	e841 2300 	strex	r3, r2, [r1]
 80247da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80247dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80247de:	2b00      	cmp	r3, #0
 80247e0:	d1e4      	bne.n	80247ac <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80247e2:	687b      	ldr	r3, [r7, #4]
 80247e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80247e6:	2b01      	cmp	r3, #1
 80247e8:	d130      	bne.n	802484c <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80247ea:	687b      	ldr	r3, [r7, #4]
 80247ec:	2200      	movs	r2, #0
 80247ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80247f0:	687b      	ldr	r3, [r7, #4]
 80247f2:	681b      	ldr	r3, [r3, #0]
 80247f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80247f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80247f8:	e853 3f00 	ldrex	r3, [r3]
 80247fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80247fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024800:	f023 0310 	bic.w	r3, r3, #16
 8024804:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	681b      	ldr	r3, [r3, #0]
 802480c:	461a      	mov	r2, r3
 802480e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8024812:	643b      	str	r3, [r7, #64]	@ 0x40
 8024814:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024816:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8024818:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802481a:	e841 2300 	strex	r3, r2, [r1]
 802481e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8024820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024822:	2b00      	cmp	r3, #0
 8024824:	d1e4      	bne.n	80247f0 <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8024826:	687b      	ldr	r3, [r7, #4]
 8024828:	681b      	ldr	r3, [r3, #0]
 802482a:	69db      	ldr	r3, [r3, #28]
 802482c:	f003 0310 	and.w	r3, r3, #16
 8024830:	2b10      	cmp	r3, #16
 8024832:	d103      	bne.n	802483c <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	681b      	ldr	r3, [r3, #0]
 8024838:	2210      	movs	r2, #16
 802483a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8024842:	4619      	mov	r1, r3
 8024844:	6878      	ldr	r0, [r7, #4]
 8024846:	f7fe fee1 	bl	802360c <HAL_UARTEx_RxEventCallback>
 802484a:	e002      	b.n	8024852 <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 802484c:	6878      	ldr	r0, [r7, #4]
 802484e:	f7e6 fed1 	bl	800b5f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8024852:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8024856:	2b00      	cmp	r3, #0
 8024858:	d006      	beq.n	8024868 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 802485a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802485e:	f003 0320 	and.w	r3, r3, #32
 8024862:	2b00      	cmp	r3, #0
 8024864:	f47f aeca 	bne.w	80245fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802486e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8024872:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8024876:	2b00      	cmp	r3, #0
 8024878:	d049      	beq.n	802490e <UART_RxISR_8BIT_FIFOEN+0x35a>
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8024880:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8024884:	429a      	cmp	r2, r3
 8024886:	d242      	bcs.n	802490e <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8024888:	687b      	ldr	r3, [r7, #4]
 802488a:	681b      	ldr	r3, [r3, #0]
 802488c:	3308      	adds	r3, #8
 802488e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024890:	6a3b      	ldr	r3, [r7, #32]
 8024892:	e853 3f00 	ldrex	r3, [r3]
 8024896:	61fb      	str	r3, [r7, #28]
   return(result);
 8024898:	69fb      	ldr	r3, [r7, #28]
 802489a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802489e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80248a2:	687b      	ldr	r3, [r7, #4]
 80248a4:	681b      	ldr	r3, [r3, #0]
 80248a6:	3308      	adds	r3, #8
 80248a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80248ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80248ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80248b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80248b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80248b4:	e841 2300 	strex	r3, r2, [r1]
 80248b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80248ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80248bc:	2b00      	cmp	r3, #0
 80248be:	d1e3      	bne.n	8024888 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80248c0:	687b      	ldr	r3, [r7, #4]
 80248c2:	4a17      	ldr	r2, [pc, #92]	@ (8024920 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 80248c4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	e853 3f00 	ldrex	r3, [r3]
 80248d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80248d4:	68bb      	ldr	r3, [r7, #8]
 80248d6:	f043 0320 	orr.w	r3, r3, #32
 80248da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	681b      	ldr	r3, [r3, #0]
 80248e2:	461a      	mov	r2, r3
 80248e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80248e8:	61bb      	str	r3, [r7, #24]
 80248ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80248ec:	6979      	ldr	r1, [r7, #20]
 80248ee:	69ba      	ldr	r2, [r7, #24]
 80248f0:	e841 2300 	strex	r3, r2, [r1]
 80248f4:	613b      	str	r3, [r7, #16]
   return(result);
 80248f6:	693b      	ldr	r3, [r7, #16]
 80248f8:	2b00      	cmp	r3, #0
 80248fa:	d1e4      	bne.n	80248c6 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80248fc:	e007      	b.n	802490e <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	681b      	ldr	r3, [r3, #0]
 8024902:	699a      	ldr	r2, [r3, #24]
 8024904:	687b      	ldr	r3, [r7, #4]
 8024906:	681b      	ldr	r3, [r3, #0]
 8024908:	f042 0208 	orr.w	r2, r2, #8
 802490c:	619a      	str	r2, [r3, #24]
}
 802490e:	bf00      	nop
 8024910:	37b0      	adds	r7, #176	@ 0xb0
 8024912:	46bd      	mov	sp, r7
 8024914:	bd80      	pop	{r7, pc}
 8024916:	bf00      	nop
 8024918:	46002400 	.word	0x46002400
 802491c:	56002400 	.word	0x56002400
 8024920:	0802422d 	.word	0x0802422d

08024924 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8024924:	b580      	push	{r7, lr}
 8024926:	b0ae      	sub	sp, #184	@ 0xb8
 8024928:	af00      	add	r7, sp, #0
 802492a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8024932:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8024936:	687b      	ldr	r3, [r7, #4]
 8024938:	681b      	ldr	r3, [r3, #0]
 802493a:	69db      	ldr	r3, [r3, #28]
 802493c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8024940:	687b      	ldr	r3, [r7, #4]
 8024942:	681b      	ldr	r3, [r3, #0]
 8024944:	681b      	ldr	r3, [r3, #0]
 8024946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 802494a:	687b      	ldr	r3, [r7, #4]
 802494c:	681b      	ldr	r3, [r3, #0]
 802494e:	689b      	ldr	r3, [r3, #8]
 8024950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8024954:	687b      	ldr	r3, [r7, #4]
 8024956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802495a:	2b22      	cmp	r3, #34	@ 0x22
 802495c:	f040 818b 	bne.w	8024c76 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8024966:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 802496a:	e12e      	b.n	8024bca <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 802496c:	687b      	ldr	r3, [r7, #4]
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024972:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802497a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 802497e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8024982:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8024986:	4013      	ands	r3, r2
 8024988:	b29a      	uxth	r2, r3
 802498a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802498e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8024990:	687b      	ldr	r3, [r7, #4]
 8024992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8024994:	1c9a      	adds	r2, r3, #2
 8024996:	687b      	ldr	r3, [r7, #4]
 8024998:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80249a0:	b29b      	uxth	r3, r3
 80249a2:	3b01      	subs	r3, #1
 80249a4:	b29a      	uxth	r2, r3
 80249a6:	687b      	ldr	r3, [r7, #4]
 80249a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	681b      	ldr	r3, [r3, #0]
 80249b0:	69db      	ldr	r3, [r3, #28]
 80249b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80249b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80249ba:	f003 0307 	and.w	r3, r3, #7
 80249be:	2b00      	cmp	r3, #0
 80249c0:	d053      	beq.n	8024a6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80249c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80249c6:	f003 0301 	and.w	r3, r3, #1
 80249ca:	2b00      	cmp	r3, #0
 80249cc:	d011      	beq.n	80249f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80249ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80249d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d00b      	beq.n	80249f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	2201      	movs	r2, #1
 80249e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80249e2:	687b      	ldr	r3, [r7, #4]
 80249e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80249e8:	f043 0201 	orr.w	r2, r3, #1
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80249f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80249f6:	f003 0302 	and.w	r3, r3, #2
 80249fa:	2b00      	cmp	r3, #0
 80249fc:	d011      	beq.n	8024a22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80249fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8024a02:	f003 0301 	and.w	r3, r3, #1
 8024a06:	2b00      	cmp	r3, #0
 8024a08:	d00b      	beq.n	8024a22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8024a0a:	687b      	ldr	r3, [r7, #4]
 8024a0c:	681b      	ldr	r3, [r3, #0]
 8024a0e:	2202      	movs	r2, #2
 8024a10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8024a12:	687b      	ldr	r3, [r7, #4]
 8024a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024a18:	f043 0204 	orr.w	r2, r3, #4
 8024a1c:	687b      	ldr	r3, [r7, #4]
 8024a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8024a22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024a26:	f003 0304 	and.w	r3, r3, #4
 8024a2a:	2b00      	cmp	r3, #0
 8024a2c:	d011      	beq.n	8024a52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8024a2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8024a32:	f003 0301 	and.w	r3, r3, #1
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d00b      	beq.n	8024a52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	2204      	movs	r2, #4
 8024a40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8024a42:	687b      	ldr	r3, [r7, #4]
 8024a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024a48:	f043 0202 	orr.w	r2, r3, #2
 8024a4c:	687b      	ldr	r3, [r7, #4]
 8024a4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	d006      	beq.n	8024a6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8024a5c:	6878      	ldr	r0, [r7, #4]
 8024a5e:	f7fe fdc1 	bl	80235e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024a62:	687b      	ldr	r3, [r7, #4]
 8024a64:	2200      	movs	r2, #0
 8024a66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8024a6a:	687b      	ldr	r3, [r7, #4]
 8024a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8024a70:	b29b      	uxth	r3, r3
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	f040 80a9 	bne.w	8024bca <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8024a78:	687b      	ldr	r3, [r7, #4]
 8024a7a:	681b      	ldr	r3, [r3, #0]
 8024a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8024a80:	e853 3f00 	ldrex	r3, [r3]
 8024a84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8024a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8024a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8024a90:	687b      	ldr	r3, [r7, #4]
 8024a92:	681b      	ldr	r3, [r3, #0]
 8024a94:	461a      	mov	r2, r3
 8024a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8024a9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8024a9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024aa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8024aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8024aa6:	e841 2300 	strex	r3, r2, [r1]
 8024aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8024aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8024aae:	2b00      	cmp	r3, #0
 8024ab0:	d1e2      	bne.n	8024a78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8024ab2:	687b      	ldr	r3, [r7, #4]
 8024ab4:	681b      	ldr	r3, [r3, #0]
 8024ab6:	3308      	adds	r3, #8
 8024ab8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8024abc:	e853 3f00 	ldrex	r3, [r3]
 8024ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8024ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8024ac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024ac8:	f023 0301 	bic.w	r3, r3, #1
 8024acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8024ad0:	687b      	ldr	r3, [r7, #4]
 8024ad2:	681b      	ldr	r3, [r3, #0]
 8024ad4:	3308      	adds	r3, #8
 8024ad6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8024ada:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8024adc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024ade:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8024ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8024ae2:	e841 2300 	strex	r3, r2, [r1]
 8024ae6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8024ae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d1e1      	bne.n	8024ab2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	2220      	movs	r2, #32
 8024af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8024af6:	687b      	ldr	r3, [r7, #4]
 8024af8:	2200      	movs	r2, #0
 8024afa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	2200      	movs	r2, #0
 8024b00:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8024b02:	687b      	ldr	r3, [r7, #4]
 8024b04:	681b      	ldr	r3, [r3, #0]
 8024b06:	4a62      	ldr	r2, [pc, #392]	@ (8024c90 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8024b08:	4293      	cmp	r3, r2
 8024b0a:	d026      	beq.n	8024b5a <UART_RxISR_16BIT_FIFOEN+0x236>
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	681b      	ldr	r3, [r3, #0]
 8024b10:	4a60      	ldr	r2, [pc, #384]	@ (8024c94 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8024b12:	4293      	cmp	r3, r2
 8024b14:	d021      	beq.n	8024b5a <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	681b      	ldr	r3, [r3, #0]
 8024b1a:	685b      	ldr	r3, [r3, #4]
 8024b1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8024b20:	2b00      	cmp	r3, #0
 8024b22:	d01a      	beq.n	8024b5a <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8024b24:	687b      	ldr	r3, [r7, #4]
 8024b26:	681b      	ldr	r3, [r3, #0]
 8024b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024b2c:	e853 3f00 	ldrex	r3, [r3]
 8024b30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8024b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8024b34:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8024b38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	681b      	ldr	r3, [r3, #0]
 8024b40:	461a      	mov	r2, r3
 8024b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8024b46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8024b48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024b4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8024b4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8024b4e:	e841 2300 	strex	r3, r2, [r1]
 8024b52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8024b54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8024b56:	2b00      	cmp	r3, #0
 8024b58:	d1e4      	bne.n	8024b24 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024b5e:	2b01      	cmp	r3, #1
 8024b60:	d130      	bne.n	8024bc4 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024b62:	687b      	ldr	r3, [r7, #4]
 8024b64:	2200      	movs	r2, #0
 8024b66:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	681b      	ldr	r3, [r3, #0]
 8024b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024b70:	e853 3f00 	ldrex	r3, [r3]
 8024b74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8024b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8024b78:	f023 0310 	bic.w	r3, r3, #16
 8024b7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	681b      	ldr	r3, [r3, #0]
 8024b84:	461a      	mov	r2, r3
 8024b86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8024b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8024b8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024b8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8024b90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8024b92:	e841 2300 	strex	r3, r2, [r1]
 8024b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8024b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	d1e4      	bne.n	8024b68 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8024b9e:	687b      	ldr	r3, [r7, #4]
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	69db      	ldr	r3, [r3, #28]
 8024ba4:	f003 0310 	and.w	r3, r3, #16
 8024ba8:	2b10      	cmp	r3, #16
 8024baa:	d103      	bne.n	8024bb4 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	681b      	ldr	r3, [r3, #0]
 8024bb0:	2210      	movs	r2, #16
 8024bb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8024bb4:	687b      	ldr	r3, [r7, #4]
 8024bb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8024bba:	4619      	mov	r1, r3
 8024bbc:	6878      	ldr	r0, [r7, #4]
 8024bbe:	f7fe fd25 	bl	802360c <HAL_UARTEx_RxEventCallback>
 8024bc2:	e002      	b.n	8024bca <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8024bc4:	6878      	ldr	r0, [r7, #4]
 8024bc6:	f7e6 fd15 	bl	800b5f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8024bca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8024bce:	2b00      	cmp	r3, #0
 8024bd0:	d006      	beq.n	8024be0 <UART_RxISR_16BIT_FIFOEN+0x2bc>
 8024bd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8024bd6:	f003 0320 	and.w	r3, r3, #32
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	f47f aec6 	bne.w	802496c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8024be0:	687b      	ldr	r3, [r7, #4]
 8024be2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8024be6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8024bea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8024bee:	2b00      	cmp	r3, #0
 8024bf0:	d049      	beq.n	8024c86 <UART_RxISR_16BIT_FIFOEN+0x362>
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8024bf8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8024bfc:	429a      	cmp	r2, r3
 8024bfe:	d242      	bcs.n	8024c86 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	681b      	ldr	r3, [r3, #0]
 8024c04:	3308      	adds	r3, #8
 8024c06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024c0a:	e853 3f00 	ldrex	r3, [r3]
 8024c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8024c10:	6a3b      	ldr	r3, [r7, #32]
 8024c12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024c16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	681b      	ldr	r3, [r3, #0]
 8024c1e:	3308      	adds	r3, #8
 8024c20:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8024c24:	633a      	str	r2, [r7, #48]	@ 0x30
 8024c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8024c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8024c2c:	e841 2300 	strex	r3, r2, [r1]
 8024c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8024c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	d1e3      	bne.n	8024c00 <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	4a17      	ldr	r2, [pc, #92]	@ (8024c98 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8024c3c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8024c3e:	687b      	ldr	r3, [r7, #4]
 8024c40:	681b      	ldr	r3, [r3, #0]
 8024c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024c44:	693b      	ldr	r3, [r7, #16]
 8024c46:	e853 3f00 	ldrex	r3, [r3]
 8024c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8024c4c:	68fb      	ldr	r3, [r7, #12]
 8024c4e:	f043 0320 	orr.w	r3, r3, #32
 8024c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	681b      	ldr	r3, [r3, #0]
 8024c5a:	461a      	mov	r2, r3
 8024c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8024c60:	61fb      	str	r3, [r7, #28]
 8024c62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024c64:	69b9      	ldr	r1, [r7, #24]
 8024c66:	69fa      	ldr	r2, [r7, #28]
 8024c68:	e841 2300 	strex	r3, r2, [r1]
 8024c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8024c6e:	697b      	ldr	r3, [r7, #20]
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	d1e4      	bne.n	8024c3e <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8024c74:	e007      	b.n	8024c86 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	699a      	ldr	r2, [r3, #24]
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	681b      	ldr	r3, [r3, #0]
 8024c80:	f042 0208 	orr.w	r2, r2, #8
 8024c84:	619a      	str	r2, [r3, #24]
}
 8024c86:	bf00      	nop
 8024c88:	37b8      	adds	r7, #184	@ 0xb8
 8024c8a:	46bd      	mov	sp, r7
 8024c8c:	bd80      	pop	{r7, pc}
 8024c8e:	bf00      	nop
 8024c90:	46002400 	.word	0x46002400
 8024c94:	56002400 	.word	0x56002400
 8024c98:	080243f1 	.word	0x080243f1

08024c9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8024c9c:	b480      	push	{r7}
 8024c9e:	b083      	sub	sp, #12
 8024ca0:	af00      	add	r7, sp, #0
 8024ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8024ca4:	bf00      	nop
 8024ca6:	370c      	adds	r7, #12
 8024ca8:	46bd      	mov	sp, r7
 8024caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cae:	4770      	bx	lr

08024cb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8024cb0:	b480      	push	{r7}
 8024cb2:	b083      	sub	sp, #12
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8024cb8:	bf00      	nop
 8024cba:	370c      	adds	r7, #12
 8024cbc:	46bd      	mov	sp, r7
 8024cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cc2:	4770      	bx	lr

08024cc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8024cc4:	b480      	push	{r7}
 8024cc6:	b085      	sub	sp, #20
 8024cc8:	af00      	add	r7, sp, #0
 8024cca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8024cd2:	2b01      	cmp	r3, #1
 8024cd4:	d101      	bne.n	8024cda <HAL_UARTEx_DisableFifoMode+0x16>
 8024cd6:	2302      	movs	r3, #2
 8024cd8:	e027      	b.n	8024d2a <HAL_UARTEx_DisableFifoMode+0x66>
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	2201      	movs	r2, #1
 8024cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	2224      	movs	r2, #36	@ 0x24
 8024ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	681b      	ldr	r3, [r3, #0]
 8024cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	681a      	ldr	r2, [r3, #0]
 8024cf8:	687b      	ldr	r3, [r7, #4]
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	f022 0201 	bic.w	r2, r2, #1
 8024d00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8024d02:	68fb      	ldr	r3, [r7, #12]
 8024d04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8024d08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8024d0a:	687b      	ldr	r3, [r7, #4]
 8024d0c:	2200      	movs	r2, #0
 8024d0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	681b      	ldr	r3, [r3, #0]
 8024d14:	68fa      	ldr	r2, [r7, #12]
 8024d16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	2220      	movs	r2, #32
 8024d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	2200      	movs	r2, #0
 8024d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024d28:	2300      	movs	r3, #0
}
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	3714      	adds	r7, #20
 8024d2e:	46bd      	mov	sp, r7
 8024d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d34:	4770      	bx	lr

08024d36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8024d36:	b580      	push	{r7, lr}
 8024d38:	b084      	sub	sp, #16
 8024d3a:	af00      	add	r7, sp, #0
 8024d3c:	6078      	str	r0, [r7, #4]
 8024d3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8024d46:	2b01      	cmp	r3, #1
 8024d48:	d101      	bne.n	8024d4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8024d4a:	2302      	movs	r3, #2
 8024d4c:	e02d      	b.n	8024daa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8024d4e:	687b      	ldr	r3, [r7, #4]
 8024d50:	2201      	movs	r2, #1
 8024d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	2224      	movs	r2, #36	@ 0x24
 8024d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	681b      	ldr	r3, [r3, #0]
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	681b      	ldr	r3, [r3, #0]
 8024d6a:	681a      	ldr	r2, [r3, #0]
 8024d6c:	687b      	ldr	r3, [r7, #4]
 8024d6e:	681b      	ldr	r3, [r3, #0]
 8024d70:	f022 0201 	bic.w	r2, r2, #1
 8024d74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8024d76:	687b      	ldr	r3, [r7, #4]
 8024d78:	681b      	ldr	r3, [r3, #0]
 8024d7a:	689b      	ldr	r3, [r3, #8]
 8024d7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	683a      	ldr	r2, [r7, #0]
 8024d86:	430a      	orrs	r2, r1
 8024d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8024d8a:	6878      	ldr	r0, [r7, #4]
 8024d8c:	f000 f850 	bl	8024e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024d90:	687b      	ldr	r3, [r7, #4]
 8024d92:	681b      	ldr	r3, [r3, #0]
 8024d94:	68fa      	ldr	r2, [r7, #12]
 8024d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8024d98:	687b      	ldr	r3, [r7, #4]
 8024d9a:	2220      	movs	r2, #32
 8024d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024da0:	687b      	ldr	r3, [r7, #4]
 8024da2:	2200      	movs	r2, #0
 8024da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024da8:	2300      	movs	r3, #0
}
 8024daa:	4618      	mov	r0, r3
 8024dac:	3710      	adds	r7, #16
 8024dae:	46bd      	mov	sp, r7
 8024db0:	bd80      	pop	{r7, pc}

08024db2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8024db2:	b580      	push	{r7, lr}
 8024db4:	b084      	sub	sp, #16
 8024db6:	af00      	add	r7, sp, #0
 8024db8:	6078      	str	r0, [r7, #4]
 8024dba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8024dc2:	2b01      	cmp	r3, #1
 8024dc4:	d101      	bne.n	8024dca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8024dc6:	2302      	movs	r3, #2
 8024dc8:	e02d      	b.n	8024e26 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	2201      	movs	r2, #1
 8024dce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8024dd2:	687b      	ldr	r3, [r7, #4]
 8024dd4:	2224      	movs	r2, #36	@ 0x24
 8024dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	681b      	ldr	r3, [r3, #0]
 8024dde:	681b      	ldr	r3, [r3, #0]
 8024de0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8024de2:	687b      	ldr	r3, [r7, #4]
 8024de4:	681b      	ldr	r3, [r3, #0]
 8024de6:	681a      	ldr	r2, [r3, #0]
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	681b      	ldr	r3, [r3, #0]
 8024dec:	f022 0201 	bic.w	r2, r2, #1
 8024df0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8024df2:	687b      	ldr	r3, [r7, #4]
 8024df4:	681b      	ldr	r3, [r3, #0]
 8024df6:	689b      	ldr	r3, [r3, #8]
 8024df8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8024dfc:	687b      	ldr	r3, [r7, #4]
 8024dfe:	681b      	ldr	r3, [r3, #0]
 8024e00:	683a      	ldr	r2, [r7, #0]
 8024e02:	430a      	orrs	r2, r1
 8024e04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8024e06:	6878      	ldr	r0, [r7, #4]
 8024e08:	f000 f812 	bl	8024e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024e0c:	687b      	ldr	r3, [r7, #4]
 8024e0e:	681b      	ldr	r3, [r3, #0]
 8024e10:	68fa      	ldr	r2, [r7, #12]
 8024e12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8024e14:	687b      	ldr	r3, [r7, #4]
 8024e16:	2220      	movs	r2, #32
 8024e18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024e1c:	687b      	ldr	r3, [r7, #4]
 8024e1e:	2200      	movs	r2, #0
 8024e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024e24:	2300      	movs	r3, #0
}
 8024e26:	4618      	mov	r0, r3
 8024e28:	3710      	adds	r7, #16
 8024e2a:	46bd      	mov	sp, r7
 8024e2c:	bd80      	pop	{r7, pc}
	...

08024e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8024e30:	b480      	push	{r7}
 8024e32:	b085      	sub	sp, #20
 8024e34:	af00      	add	r7, sp, #0
 8024e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8024e38:	687b      	ldr	r3, [r7, #4]
 8024e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024e3c:	2b00      	cmp	r3, #0
 8024e3e:	d108      	bne.n	8024e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	2201      	movs	r2, #1
 8024e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8024e48:	687b      	ldr	r3, [r7, #4]
 8024e4a:	2201      	movs	r2, #1
 8024e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8024e50:	e031      	b.n	8024eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8024e52:	2308      	movs	r3, #8
 8024e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8024e56:	2308      	movs	r3, #8
 8024e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8024e5a:	687b      	ldr	r3, [r7, #4]
 8024e5c:	681b      	ldr	r3, [r3, #0]
 8024e5e:	689b      	ldr	r3, [r3, #8]
 8024e60:	0e5b      	lsrs	r3, r3, #25
 8024e62:	b2db      	uxtb	r3, r3
 8024e64:	f003 0307 	and.w	r3, r3, #7
 8024e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	681b      	ldr	r3, [r3, #0]
 8024e6e:	689b      	ldr	r3, [r3, #8]
 8024e70:	0f5b      	lsrs	r3, r3, #29
 8024e72:	b2db      	uxtb	r3, r3
 8024e74:	f003 0307 	and.w	r3, r3, #7
 8024e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8024e7a:	7bbb      	ldrb	r3, [r7, #14]
 8024e7c:	7b3a      	ldrb	r2, [r7, #12]
 8024e7e:	4911      	ldr	r1, [pc, #68]	@ (8024ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8024e80:	5c8a      	ldrb	r2, [r1, r2]
 8024e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8024e86:	7b3a      	ldrb	r2, [r7, #12]
 8024e88:	490f      	ldr	r1, [pc, #60]	@ (8024ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8024e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8024e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8024e90:	b29a      	uxth	r2, r3
 8024e92:	687b      	ldr	r3, [r7, #4]
 8024e94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8024e98:	7bfb      	ldrb	r3, [r7, #15]
 8024e9a:	7b7a      	ldrb	r2, [r7, #13]
 8024e9c:	4909      	ldr	r1, [pc, #36]	@ (8024ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8024e9e:	5c8a      	ldrb	r2, [r1, r2]
 8024ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8024ea4:	7b7a      	ldrb	r2, [r7, #13]
 8024ea6:	4908      	ldr	r1, [pc, #32]	@ (8024ec8 <UARTEx_SetNbDataToProcess+0x98>)
 8024ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8024eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8024eae:	b29a      	uxth	r2, r3
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8024eb6:	bf00      	nop
 8024eb8:	3714      	adds	r7, #20
 8024eba:	46bd      	mov	sp, r7
 8024ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ec0:	4770      	bx	lr
 8024ec2:	bf00      	nop
 8024ec4:	08030290 	.word	0x08030290
 8024ec8:	08030298 	.word	0x08030298

08024ecc <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8024ecc:	b480      	push	{r7}
 8024ece:	b083      	sub	sp, #12
 8024ed0:	af00      	add	r7, sp, #0
 8024ed2:	6078      	str	r0, [r7, #4]
 8024ed4:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	681b      	ldr	r3, [r3, #0]
 8024eda:	f043 0202 	orr.w	r2, r3, #2
 8024ede:	687b      	ldr	r3, [r7, #4]
 8024ee0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8024ee2:	683b      	ldr	r3, [r7, #0]
 8024ee4:	685a      	ldr	r2, [r3, #4]
 8024ee6:	683b      	ldr	r3, [r7, #0]
 8024ee8:	681b      	ldr	r3, [r3, #0]
 8024eea:	021b      	lsls	r3, r3, #8
 8024eec:	431a      	orrs	r2, r3
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8024ef2:	687b      	ldr	r3, [r7, #4]
 8024ef4:	681b      	ldr	r3, [r3, #0]
 8024ef6:	f023 0202 	bic.w	r2, r3, #2
 8024efa:	687b      	ldr	r3, [r7, #4]
 8024efc:	601a      	str	r2, [r3, #0]
}
 8024efe:	bf00      	nop
 8024f00:	370c      	adds	r7, #12
 8024f02:	46bd      	mov	sp, r7
 8024f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f08:	4770      	bx	lr

08024f0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8024f0a:	b084      	sub	sp, #16
 8024f0c:	b580      	push	{r7, lr}
 8024f0e:	b084      	sub	sp, #16
 8024f10:	af00      	add	r7, sp, #0
 8024f12:	6078      	str	r0, [r7, #4]
 8024f14:	f107 001c 	add.w	r0, r7, #28
 8024f18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	68db      	ldr	r3, [r3, #12]
 8024f20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8024f24:	687b      	ldr	r3, [r7, #4]
 8024f26:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8024f28:	6878      	ldr	r0, [r7, #4]
 8024f2a:	f000 f8e9 	bl	8025100 <USB_CoreReset>
 8024f2e:	4603      	mov	r3, r0
 8024f30:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8024f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8024f34:	2b00      	cmp	r3, #0
 8024f36:	d106      	bne.n	8024f46 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8024f38:	687b      	ldr	r3, [r7, #4]
 8024f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024f3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	639a      	str	r2, [r3, #56]	@ 0x38
 8024f44:	e005      	b.n	8024f52 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8024f46:	687b      	ldr	r3, [r7, #4]
 8024f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024f4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8024f4e:	687b      	ldr	r3, [r7, #4]
 8024f50:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8024f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8024f54:	4618      	mov	r0, r3
 8024f56:	3710      	adds	r7, #16
 8024f58:	46bd      	mov	sp, r7
 8024f5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8024f5e:	b004      	add	sp, #16
 8024f60:	4770      	bx	lr

08024f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8024f62:	b480      	push	{r7}
 8024f64:	b083      	sub	sp, #12
 8024f66:	af00      	add	r7, sp, #0
 8024f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	689b      	ldr	r3, [r3, #8]
 8024f6e:	f023 0201 	bic.w	r2, r3, #1
 8024f72:	687b      	ldr	r3, [r7, #4]
 8024f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8024f76:	2300      	movs	r3, #0
}
 8024f78:	4618      	mov	r0, r3
 8024f7a:	370c      	adds	r7, #12
 8024f7c:	46bd      	mov	sp, r7
 8024f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f82:	4770      	bx	lr

08024f84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8024f84:	b580      	push	{r7, lr}
 8024f86:	b084      	sub	sp, #16
 8024f88:	af00      	add	r7, sp, #0
 8024f8a:	6078      	str	r0, [r7, #4]
 8024f8c:	460b      	mov	r3, r1
 8024f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8024f90:	2300      	movs	r3, #0
 8024f92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8024f94:	687b      	ldr	r3, [r7, #4]
 8024f96:	68db      	ldr	r3, [r3, #12]
 8024f98:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8024fa0:	78fb      	ldrb	r3, [r7, #3]
 8024fa2:	2b01      	cmp	r3, #1
 8024fa4:	d115      	bne.n	8024fd2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8024fa6:	687b      	ldr	r3, [r7, #4]
 8024fa8:	68db      	ldr	r3, [r3, #12]
 8024faa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8024fae:	687b      	ldr	r3, [r7, #4]
 8024fb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8024fb2:	2001      	movs	r0, #1
 8024fb4:	f7f1 fa66 	bl	8016484 <HAL_Delay>
      ms++;
 8024fb8:	68fb      	ldr	r3, [r7, #12]
 8024fba:	3301      	adds	r3, #1
 8024fbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8024fbe:	6878      	ldr	r0, [r7, #4]
 8024fc0:	f000 f890 	bl	80250e4 <USB_GetMode>
 8024fc4:	4603      	mov	r3, r0
 8024fc6:	2b01      	cmp	r3, #1
 8024fc8:	d01e      	beq.n	8025008 <USB_SetCurrentMode+0x84>
 8024fca:	68fb      	ldr	r3, [r7, #12]
 8024fcc:	2b31      	cmp	r3, #49	@ 0x31
 8024fce:	d9f0      	bls.n	8024fb2 <USB_SetCurrentMode+0x2e>
 8024fd0:	e01a      	b.n	8025008 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8024fd2:	78fb      	ldrb	r3, [r7, #3]
 8024fd4:	2b00      	cmp	r3, #0
 8024fd6:	d115      	bne.n	8025004 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	68db      	ldr	r3, [r3, #12]
 8024fdc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8024fe4:	2001      	movs	r0, #1
 8024fe6:	f7f1 fa4d 	bl	8016484 <HAL_Delay>
      ms++;
 8024fea:	68fb      	ldr	r3, [r7, #12]
 8024fec:	3301      	adds	r3, #1
 8024fee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8024ff0:	6878      	ldr	r0, [r7, #4]
 8024ff2:	f000 f877 	bl	80250e4 <USB_GetMode>
 8024ff6:	4603      	mov	r3, r0
 8024ff8:	2b00      	cmp	r3, #0
 8024ffa:	d005      	beq.n	8025008 <USB_SetCurrentMode+0x84>
 8024ffc:	68fb      	ldr	r3, [r7, #12]
 8024ffe:	2b31      	cmp	r3, #49	@ 0x31
 8025000:	d9f0      	bls.n	8024fe4 <USB_SetCurrentMode+0x60>
 8025002:	e001      	b.n	8025008 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8025004:	2301      	movs	r3, #1
 8025006:	e005      	b.n	8025014 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8025008:	68fb      	ldr	r3, [r7, #12]
 802500a:	2b32      	cmp	r3, #50	@ 0x32
 802500c:	d101      	bne.n	8025012 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802500e:	2301      	movs	r3, #1
 8025010:	e000      	b.n	8025014 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8025012:	2300      	movs	r3, #0
}
 8025014:	4618      	mov	r0, r3
 8025016:	3710      	adds	r7, #16
 8025018:	46bd      	mov	sp, r7
 802501a:	bd80      	pop	{r7, pc}

0802501c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802501c:	b480      	push	{r7}
 802501e:	b085      	sub	sp, #20
 8025020:	af00      	add	r7, sp, #0
 8025022:	6078      	str	r0, [r7, #4]
 8025024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8025026:	2300      	movs	r3, #0
 8025028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802502a:	68fb      	ldr	r3, [r7, #12]
 802502c:	3301      	adds	r3, #1
 802502e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8025030:	68fb      	ldr	r3, [r7, #12]
 8025032:	4a13      	ldr	r2, [pc, #76]	@ (8025080 <USB_FlushTxFifo+0x64>)
 8025034:	4293      	cmp	r3, r2
 8025036:	d901      	bls.n	802503c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8025038:	2303      	movs	r3, #3
 802503a:	e01b      	b.n	8025074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	691b      	ldr	r3, [r3, #16]
 8025040:	2b00      	cmp	r3, #0
 8025042:	daf2      	bge.n	802502a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8025044:	2300      	movs	r3, #0
 8025046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8025048:	683b      	ldr	r3, [r7, #0]
 802504a:	019b      	lsls	r3, r3, #6
 802504c:	f043 0220 	orr.w	r2, r3, #32
 8025050:	687b      	ldr	r3, [r7, #4]
 8025052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8025054:	68fb      	ldr	r3, [r7, #12]
 8025056:	3301      	adds	r3, #1
 8025058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802505a:	68fb      	ldr	r3, [r7, #12]
 802505c:	4a08      	ldr	r2, [pc, #32]	@ (8025080 <USB_FlushTxFifo+0x64>)
 802505e:	4293      	cmp	r3, r2
 8025060:	d901      	bls.n	8025066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8025062:	2303      	movs	r3, #3
 8025064:	e006      	b.n	8025074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8025066:	687b      	ldr	r3, [r7, #4]
 8025068:	691b      	ldr	r3, [r3, #16]
 802506a:	f003 0320 	and.w	r3, r3, #32
 802506e:	2b20      	cmp	r3, #32
 8025070:	d0f0      	beq.n	8025054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8025072:	2300      	movs	r3, #0
}
 8025074:	4618      	mov	r0, r3
 8025076:	3714      	adds	r7, #20
 8025078:	46bd      	mov	sp, r7
 802507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802507e:	4770      	bx	lr
 8025080:	00030d40 	.word	0x00030d40

08025084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8025084:	b480      	push	{r7}
 8025086:	b085      	sub	sp, #20
 8025088:	af00      	add	r7, sp, #0
 802508a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802508c:	2300      	movs	r3, #0
 802508e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8025090:	68fb      	ldr	r3, [r7, #12]
 8025092:	3301      	adds	r3, #1
 8025094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8025096:	68fb      	ldr	r3, [r7, #12]
 8025098:	4a11      	ldr	r2, [pc, #68]	@ (80250e0 <USB_FlushRxFifo+0x5c>)
 802509a:	4293      	cmp	r3, r2
 802509c:	d901      	bls.n	80250a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802509e:	2303      	movs	r3, #3
 80250a0:	e018      	b.n	80250d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	691b      	ldr	r3, [r3, #16]
 80250a6:	2b00      	cmp	r3, #0
 80250a8:	daf2      	bge.n	8025090 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80250aa:	2300      	movs	r3, #0
 80250ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	2210      	movs	r2, #16
 80250b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80250b4:	68fb      	ldr	r3, [r7, #12]
 80250b6:	3301      	adds	r3, #1
 80250b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80250ba:	68fb      	ldr	r3, [r7, #12]
 80250bc:	4a08      	ldr	r2, [pc, #32]	@ (80250e0 <USB_FlushRxFifo+0x5c>)
 80250be:	4293      	cmp	r3, r2
 80250c0:	d901      	bls.n	80250c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80250c2:	2303      	movs	r3, #3
 80250c4:	e006      	b.n	80250d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	691b      	ldr	r3, [r3, #16]
 80250ca:	f003 0310 	and.w	r3, r3, #16
 80250ce:	2b10      	cmp	r3, #16
 80250d0:	d0f0      	beq.n	80250b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80250d2:	2300      	movs	r3, #0
}
 80250d4:	4618      	mov	r0, r3
 80250d6:	3714      	adds	r7, #20
 80250d8:	46bd      	mov	sp, r7
 80250da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250de:	4770      	bx	lr
 80250e0:	00030d40 	.word	0x00030d40

080250e4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80250e4:	b480      	push	{r7}
 80250e6:	b083      	sub	sp, #12
 80250e8:	af00      	add	r7, sp, #0
 80250ea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80250ec:	687b      	ldr	r3, [r7, #4]
 80250ee:	695b      	ldr	r3, [r3, #20]
 80250f0:	f003 0301 	and.w	r3, r3, #1
}
 80250f4:	4618      	mov	r0, r3
 80250f6:	370c      	adds	r7, #12
 80250f8:	46bd      	mov	sp, r7
 80250fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250fe:	4770      	bx	lr

08025100 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8025100:	b480      	push	{r7}
 8025102:	b085      	sub	sp, #20
 8025104:	af00      	add	r7, sp, #0
 8025106:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8025108:	2300      	movs	r3, #0
 802510a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802510c:	68fb      	ldr	r3, [r7, #12]
 802510e:	3301      	adds	r3, #1
 8025110:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8025112:	68fb      	ldr	r3, [r7, #12]
 8025114:	4a13      	ldr	r2, [pc, #76]	@ (8025164 <USB_CoreReset+0x64>)
 8025116:	4293      	cmp	r3, r2
 8025118:	d901      	bls.n	802511e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802511a:	2303      	movs	r3, #3
 802511c:	e01b      	b.n	8025156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	691b      	ldr	r3, [r3, #16]
 8025122:	2b00      	cmp	r3, #0
 8025124:	daf2      	bge.n	802510c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8025126:	2300      	movs	r3, #0
 8025128:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	691b      	ldr	r3, [r3, #16]
 802512e:	f043 0201 	orr.w	r2, r3, #1
 8025132:	687b      	ldr	r3, [r7, #4]
 8025134:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8025136:	68fb      	ldr	r3, [r7, #12]
 8025138:	3301      	adds	r3, #1
 802513a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802513c:	68fb      	ldr	r3, [r7, #12]
 802513e:	4a09      	ldr	r2, [pc, #36]	@ (8025164 <USB_CoreReset+0x64>)
 8025140:	4293      	cmp	r3, r2
 8025142:	d901      	bls.n	8025148 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8025144:	2303      	movs	r3, #3
 8025146:	e006      	b.n	8025156 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	691b      	ldr	r3, [r3, #16]
 802514c:	f003 0301 	and.w	r3, r3, #1
 8025150:	2b01      	cmp	r3, #1
 8025152:	d0f0      	beq.n	8025136 <USB_CoreReset+0x36>

  return HAL_OK;
 8025154:	2300      	movs	r3, #0
}
 8025156:	4618      	mov	r0, r3
 8025158:	3714      	adds	r7, #20
 802515a:	46bd      	mov	sp, r7
 802515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025160:	4770      	bx	lr
 8025162:	bf00      	nop
 8025164:	00030d40 	.word	0x00030d40

08025168 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8025168:	b084      	sub	sp, #16
 802516a:	b580      	push	{r7, lr}
 802516c:	b086      	sub	sp, #24
 802516e:	af00      	add	r7, sp, #0
 8025170:	6078      	str	r0, [r7, #4]
 8025172:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8025176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802517a:	2300      	movs	r3, #0
 802517c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802517e:	687b      	ldr	r3, [r7, #4]
 8025180:	60fb      	str	r3, [r7, #12]
  USBx->GCCFG |= USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8025182:	68fb      	ldr	r3, [r7, #12]
 8025184:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8025188:	461a      	mov	r2, r3
 802518a:	2300      	movs	r3, #0
 802518c:	6013      	str	r3, [r2, #0]
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBVALOVAL | USB_OTG_GCCFG_VBVALEXTOEN);
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 802518e:	687b      	ldr	r3, [r7, #4]
 8025190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8025192:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8025196:	687b      	ldr	r3, [r7, #4]
 8025198:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 802519a:	687b      	ldr	r3, [r7, #4]
 802519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802519e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80251a2:	687b      	ldr	r3, [r7, #4]
 80251a4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
  USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if ((USBx->CID & (0x1U << 14)) != 0U)
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80251aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d018      	beq.n	80251e4 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80251b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80251b4:	2b01      	cmp	r3, #1
 80251b6:	d10a      	bne.n	80251ce <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80251b8:	68fb      	ldr	r3, [r7, #12]
 80251ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80251be:	681b      	ldr	r3, [r3, #0]
 80251c0:	68fa      	ldr	r2, [r7, #12]
 80251c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80251c6:	f043 0304 	orr.w	r3, r3, #4
 80251ca:	6013      	str	r3, [r2, #0]
 80251cc:	e014      	b.n	80251f8 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80251ce:	68fb      	ldr	r3, [r7, #12]
 80251d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80251d4:	681b      	ldr	r3, [r3, #0]
 80251d6:	68fa      	ldr	r2, [r7, #12]
 80251d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80251dc:	f023 0304 	bic.w	r3, r3, #4
 80251e0:	6013      	str	r3, [r2, #0]
 80251e2:	e009      	b.n	80251f8 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80251e4:	68fb      	ldr	r3, [r7, #12]
 80251e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80251ea:	681b      	ldr	r3, [r3, #0]
 80251ec:	68fa      	ldr	r2, [r7, #12]
 80251ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80251f2:	f023 0304 	bic.w	r3, r3, #4
 80251f6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80251f8:	2110      	movs	r1, #16
 80251fa:	6878      	ldr	r0, [r7, #4]
 80251fc:	f7ff ff0e 	bl	802501c <USB_FlushTxFifo>
 8025200:	4603      	mov	r3, r0
 8025202:	2b00      	cmp	r3, #0
 8025204:	d001      	beq.n	802520a <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8025206:	2301      	movs	r3, #1
 8025208:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802520a:	6878      	ldr	r0, [r7, #4]
 802520c:	f7ff ff3a 	bl	8025084 <USB_FlushRxFifo>
 8025210:	4603      	mov	r3, r0
 8025212:	2b00      	cmp	r3, #0
 8025214:	d001      	beq.n	802521a <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8025216:	2301      	movs	r3, #1
 8025218:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802521a:	2300      	movs	r3, #0
 802521c:	613b      	str	r3, [r7, #16]
 802521e:	e015      	b.n	802524c <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8025220:	693b      	ldr	r3, [r7, #16]
 8025222:	015a      	lsls	r2, r3, #5
 8025224:	68fb      	ldr	r3, [r7, #12]
 8025226:	4413      	add	r3, r2
 8025228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 802522c:	461a      	mov	r2, r3
 802522e:	f04f 33ff 	mov.w	r3, #4294967295
 8025232:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8025234:	693b      	ldr	r3, [r7, #16]
 8025236:	015a      	lsls	r2, r3, #5
 8025238:	68fb      	ldr	r3, [r7, #12]
 802523a:	4413      	add	r3, r2
 802523c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8025240:	461a      	mov	r2, r3
 8025242:	2300      	movs	r3, #0
 8025244:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8025246:	693b      	ldr	r3, [r7, #16]
 8025248:	3301      	adds	r3, #1
 802524a:	613b      	str	r3, [r7, #16]
 802524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802524e:	693a      	ldr	r2, [r7, #16]
 8025250:	429a      	cmp	r2, r3
 8025252:	d3e5      	bcc.n	8025220 <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8025254:	687b      	ldr	r3, [r7, #4]
 8025256:	2200      	movs	r2, #0
 8025258:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	f04f 32ff 	mov.w	r2, #4294967295
 8025260:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 14)) != 0U)
 8025262:	687b      	ldr	r3, [r7, #4]
 8025264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8025266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 802526a:	2b00      	cmp	r3, #0
 802526c:	d00b      	beq.n	8025286 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802526e:	687b      	ldr	r3, [r7, #4]
 8025270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8025274:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	4a13      	ldr	r2, [pc, #76]	@ (80252c8 <USB_HostInit+0x160>)
 802527a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	4a13      	ldr	r2, [pc, #76]	@ (80252cc <USB_HostInit+0x164>)
 8025280:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8025284:	e009      	b.n	802529a <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	2280      	movs	r2, #128	@ 0x80
 802528a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	4a10      	ldr	r2, [pc, #64]	@ (80252d0 <USB_HostInit+0x168>)
 8025290:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8025292:	687b      	ldr	r3, [r7, #4]
 8025294:	4a0f      	ldr	r2, [pc, #60]	@ (80252d4 <USB_HostInit+0x16c>)
 8025296:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802529c:	2b00      	cmp	r3, #0
 802529e:	d105      	bne.n	80252ac <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	699b      	ldr	r3, [r3, #24]
 80252a4:	f043 0210 	orr.w	r2, r3, #16
 80252a8:	687b      	ldr	r3, [r7, #4]
 80252aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80252ac:	687b      	ldr	r3, [r7, #4]
 80252ae:	699a      	ldr	r2, [r3, #24]
 80252b0:	4b09      	ldr	r3, [pc, #36]	@ (80252d8 <USB_HostInit+0x170>)
 80252b2:	4313      	orrs	r3, r2
 80252b4:	687a      	ldr	r2, [r7, #4]
 80252b6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80252b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80252ba:	4618      	mov	r0, r3
 80252bc:	3718      	adds	r7, #24
 80252be:	46bd      	mov	sp, r7
 80252c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80252c4:	b004      	add	sp, #16
 80252c6:	4770      	bx	lr
 80252c8:	01000200 	.word	0x01000200
 80252cc:	00e00300 	.word	0x00e00300
 80252d0:	00600080 	.word	0x00600080
 80252d4:	004000e0 	.word	0x004000e0
 80252d8:	a3200008 	.word	0xa3200008

080252dc <atoi>:
 80252dc:	220a      	movs	r2, #10
 80252de:	2100      	movs	r1, #0
 80252e0:	f000 bee8 	b.w	80260b4 <strtol>

080252e4 <sulp>:
 80252e4:	b570      	push	{r4, r5, r6, lr}
 80252e6:	4604      	mov	r4, r0
 80252e8:	460d      	mov	r5, r1
 80252ea:	4616      	mov	r6, r2
 80252ec:	ec45 4b10 	vmov	d0, r4, r5
 80252f0:	f004 fc58 	bl	8029ba4 <__ulp>
 80252f4:	ec51 0b10 	vmov	r0, r1, d0
 80252f8:	b17e      	cbz	r6, 802531a <sulp+0x36>
 80252fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80252fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8025302:	2b00      	cmp	r3, #0
 8025304:	dd09      	ble.n	802531a <sulp+0x36>
 8025306:	051b      	lsls	r3, r3, #20
 8025308:	2400      	movs	r4, #0
 802530a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 802530e:	4622      	mov	r2, r4
 8025310:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8025314:	462b      	mov	r3, r5
 8025316:	f7db f97d 	bl	8000614 <__aeabi_dmul>
 802531a:	ec41 0b10 	vmov	d0, r0, r1
 802531e:	bd70      	pop	{r4, r5, r6, pc}

08025320 <_strtod_l>:
 8025320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025324:	b09f      	sub	sp, #124	@ 0x7c
 8025326:	460c      	mov	r4, r1
 8025328:	f04f 0a00 	mov.w	sl, #0
 802532c:	f04f 0b00 	mov.w	fp, #0
 8025330:	9217      	str	r2, [sp, #92]	@ 0x5c
 8025332:	2200      	movs	r2, #0
 8025334:	9005      	str	r0, [sp, #20]
 8025336:	921a      	str	r2, [sp, #104]	@ 0x68
 8025338:	460a      	mov	r2, r1
 802533a:	9219      	str	r2, [sp, #100]	@ 0x64
 802533c:	7811      	ldrb	r1, [r2, #0]
 802533e:	292b      	cmp	r1, #43	@ 0x2b
 8025340:	d04a      	beq.n	80253d8 <_strtod_l+0xb8>
 8025342:	d838      	bhi.n	80253b6 <_strtod_l+0x96>
 8025344:	290d      	cmp	r1, #13
 8025346:	d832      	bhi.n	80253ae <_strtod_l+0x8e>
 8025348:	2908      	cmp	r1, #8
 802534a:	d832      	bhi.n	80253b2 <_strtod_l+0x92>
 802534c:	2900      	cmp	r1, #0
 802534e:	d03b      	beq.n	80253c8 <_strtod_l+0xa8>
 8025350:	2200      	movs	r2, #0
 8025352:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025354:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8025356:	782a      	ldrb	r2, [r5, #0]
 8025358:	2a30      	cmp	r2, #48	@ 0x30
 802535a:	f040 80b3 	bne.w	80254c4 <_strtod_l+0x1a4>
 802535e:	786a      	ldrb	r2, [r5, #1]
 8025360:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8025364:	2a58      	cmp	r2, #88	@ 0x58
 8025366:	d16e      	bne.n	8025446 <_strtod_l+0x126>
 8025368:	9302      	str	r3, [sp, #8]
 802536a:	a919      	add	r1, sp, #100	@ 0x64
 802536c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802536e:	4a90      	ldr	r2, [pc, #576]	@ (80255b0 <_strtod_l+0x290>)
 8025370:	9301      	str	r3, [sp, #4]
 8025372:	ab1a      	add	r3, sp, #104	@ 0x68
 8025374:	9805      	ldr	r0, [sp, #20]
 8025376:	9300      	str	r3, [sp, #0]
 8025378:	ab1b      	add	r3, sp, #108	@ 0x6c
 802537a:	f003 fcb5 	bl	8028ce8 <__gethex>
 802537e:	f010 060f 	ands.w	r6, r0, #15
 8025382:	4604      	mov	r4, r0
 8025384:	d005      	beq.n	8025392 <_strtod_l+0x72>
 8025386:	2e06      	cmp	r6, #6
 8025388:	d128      	bne.n	80253dc <_strtod_l+0xbc>
 802538a:	3501      	adds	r5, #1
 802538c:	2300      	movs	r3, #0
 802538e:	9519      	str	r5, [sp, #100]	@ 0x64
 8025390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025394:	2b00      	cmp	r3, #0
 8025396:	f040 858e 	bne.w	8025eb6 <_strtod_l+0xb96>
 802539a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802539c:	b1cb      	cbz	r3, 80253d2 <_strtod_l+0xb2>
 802539e:	4652      	mov	r2, sl
 80253a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80253a4:	ec43 2b10 	vmov	d0, r2, r3
 80253a8:	b01f      	add	sp, #124	@ 0x7c
 80253aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80253ae:	2920      	cmp	r1, #32
 80253b0:	d1ce      	bne.n	8025350 <_strtod_l+0x30>
 80253b2:	3201      	adds	r2, #1
 80253b4:	e7c1      	b.n	802533a <_strtod_l+0x1a>
 80253b6:	292d      	cmp	r1, #45	@ 0x2d
 80253b8:	d1ca      	bne.n	8025350 <_strtod_l+0x30>
 80253ba:	2101      	movs	r1, #1
 80253bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80253be:	1c51      	adds	r1, r2, #1
 80253c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80253c2:	7852      	ldrb	r2, [r2, #1]
 80253c4:	2a00      	cmp	r2, #0
 80253c6:	d1c5      	bne.n	8025354 <_strtod_l+0x34>
 80253c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80253ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80253cc:	2b00      	cmp	r3, #0
 80253ce:	f040 8570 	bne.w	8025eb2 <_strtod_l+0xb92>
 80253d2:	4652      	mov	r2, sl
 80253d4:	465b      	mov	r3, fp
 80253d6:	e7e5      	b.n	80253a4 <_strtod_l+0x84>
 80253d8:	2100      	movs	r1, #0
 80253da:	e7ef      	b.n	80253bc <_strtod_l+0x9c>
 80253dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80253de:	b13a      	cbz	r2, 80253f0 <_strtod_l+0xd0>
 80253e0:	2135      	movs	r1, #53	@ 0x35
 80253e2:	a81c      	add	r0, sp, #112	@ 0x70
 80253e4:	f004 fcdc 	bl	8029da0 <__copybits>
 80253e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80253ea:	9805      	ldr	r0, [sp, #20]
 80253ec:	f004 f8a0 	bl	8029530 <_Bfree>
 80253f0:	3e01      	subs	r6, #1
 80253f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80253f4:	2e04      	cmp	r6, #4
 80253f6:	d806      	bhi.n	8025406 <_strtod_l+0xe6>
 80253f8:	e8df f006 	tbb	[pc, r6]
 80253fc:	201d0314 	.word	0x201d0314
 8025400:	14          	.byte	0x14
 8025401:	00          	.byte	0x00
 8025402:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8025406:	05e1      	lsls	r1, r4, #23
 8025408:	bf48      	it	mi
 802540a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 802540e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025412:	0d1b      	lsrs	r3, r3, #20
 8025414:	051b      	lsls	r3, r3, #20
 8025416:	2b00      	cmp	r3, #0
 8025418:	d1bb      	bne.n	8025392 <_strtod_l+0x72>
 802541a:	f002 fcfb 	bl	8027e14 <__errno>
 802541e:	2322      	movs	r3, #34	@ 0x22
 8025420:	6003      	str	r3, [r0, #0]
 8025422:	e7b6      	b.n	8025392 <_strtod_l+0x72>
 8025424:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8025428:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 802542c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8025430:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8025434:	e7e7      	b.n	8025406 <_strtod_l+0xe6>
 8025436:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80255b8 <_strtod_l+0x298>
 802543a:	e7e4      	b.n	8025406 <_strtod_l+0xe6>
 802543c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8025440:	f04f 3aff 	mov.w	sl, #4294967295
 8025444:	e7df      	b.n	8025406 <_strtod_l+0xe6>
 8025446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025448:	1c5a      	adds	r2, r3, #1
 802544a:	9219      	str	r2, [sp, #100]	@ 0x64
 802544c:	785b      	ldrb	r3, [r3, #1]
 802544e:	2b30      	cmp	r3, #48	@ 0x30
 8025450:	d0f9      	beq.n	8025446 <_strtod_l+0x126>
 8025452:	2b00      	cmp	r3, #0
 8025454:	d09d      	beq.n	8025392 <_strtod_l+0x72>
 8025456:	2301      	movs	r3, #1
 8025458:	9309      	str	r3, [sp, #36]	@ 0x24
 802545a:	220a      	movs	r2, #10
 802545c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802545e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025460:	2300      	movs	r3, #0
 8025462:	461f      	mov	r7, r3
 8025464:	9308      	str	r3, [sp, #32]
 8025466:	930a      	str	r3, [sp, #40]	@ 0x28
 8025468:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802546a:	7805      	ldrb	r5, [r0, #0]
 802546c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8025470:	b2d9      	uxtb	r1, r3
 8025472:	2909      	cmp	r1, #9
 8025474:	d928      	bls.n	80254c8 <_strtod_l+0x1a8>
 8025476:	2201      	movs	r2, #1
 8025478:	494e      	ldr	r1, [pc, #312]	@ (80255b4 <_strtod_l+0x294>)
 802547a:	f001 feae 	bl	80271da <strncmp>
 802547e:	2800      	cmp	r0, #0
 8025480:	d033      	beq.n	80254ea <_strtod_l+0x1ca>
 8025482:	2000      	movs	r0, #0
 8025484:	462a      	mov	r2, r5
 8025486:	463d      	mov	r5, r7
 8025488:	4681      	mov	r9, r0
 802548a:	4603      	mov	r3, r0
 802548c:	2a65      	cmp	r2, #101	@ 0x65
 802548e:	d001      	beq.n	8025494 <_strtod_l+0x174>
 8025490:	2a45      	cmp	r2, #69	@ 0x45
 8025492:	d114      	bne.n	80254be <_strtod_l+0x19e>
 8025494:	b91d      	cbnz	r5, 802549e <_strtod_l+0x17e>
 8025496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025498:	4302      	orrs	r2, r0
 802549a:	d095      	beq.n	80253c8 <_strtod_l+0xa8>
 802549c:	2500      	movs	r5, #0
 802549e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80254a0:	1c62      	adds	r2, r4, #1
 80254a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80254a4:	7862      	ldrb	r2, [r4, #1]
 80254a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80254a8:	d078      	beq.n	802559c <_strtod_l+0x27c>
 80254aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80254ac:	d07c      	beq.n	80255a8 <_strtod_l+0x288>
 80254ae:	f04f 0c00 	mov.w	ip, #0
 80254b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80254b6:	2909      	cmp	r1, #9
 80254b8:	f240 8084 	bls.w	80255c4 <_strtod_l+0x2a4>
 80254bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80254be:	f04f 0800 	mov.w	r8, #0
 80254c2:	e0a4      	b.n	802560e <_strtod_l+0x2ee>
 80254c4:	2300      	movs	r3, #0
 80254c6:	e7c7      	b.n	8025458 <_strtod_l+0x138>
 80254c8:	2f08      	cmp	r7, #8
 80254ca:	f100 0001 	add.w	r0, r0, #1
 80254ce:	f107 0701 	add.w	r7, r7, #1
 80254d2:	bfd5      	itete	le
 80254d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80254d6:	9908      	ldrgt	r1, [sp, #32]
 80254d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80254dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80254e0:	bfd4      	ite	le
 80254e2:	930a      	strle	r3, [sp, #40]	@ 0x28
 80254e4:	9308      	strgt	r3, [sp, #32]
 80254e6:	9019      	str	r0, [sp, #100]	@ 0x64
 80254e8:	e7be      	b.n	8025468 <_strtod_l+0x148>
 80254ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254ec:	1c5a      	adds	r2, r3, #1
 80254ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80254f0:	785a      	ldrb	r2, [r3, #1]
 80254f2:	b37f      	cbz	r7, 8025554 <_strtod_l+0x234>
 80254f4:	4681      	mov	r9, r0
 80254f6:	463d      	mov	r5, r7
 80254f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80254fc:	2b09      	cmp	r3, #9
 80254fe:	d912      	bls.n	8025526 <_strtod_l+0x206>
 8025500:	2301      	movs	r3, #1
 8025502:	e7c3      	b.n	802548c <_strtod_l+0x16c>
 8025504:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025506:	3001      	adds	r0, #1
 8025508:	1c5a      	adds	r2, r3, #1
 802550a:	9219      	str	r2, [sp, #100]	@ 0x64
 802550c:	785a      	ldrb	r2, [r3, #1]
 802550e:	2a30      	cmp	r2, #48	@ 0x30
 8025510:	d0f8      	beq.n	8025504 <_strtod_l+0x1e4>
 8025512:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8025516:	2b08      	cmp	r3, #8
 8025518:	f200 84d2 	bhi.w	8025ec0 <_strtod_l+0xba0>
 802551c:	4681      	mov	r9, r0
 802551e:	2000      	movs	r0, #0
 8025520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025522:	4605      	mov	r5, r0
 8025524:	930c      	str	r3, [sp, #48]	@ 0x30
 8025526:	3a30      	subs	r2, #48	@ 0x30
 8025528:	f100 0301 	add.w	r3, r0, #1
 802552c:	d02a      	beq.n	8025584 <_strtod_l+0x264>
 802552e:	4499      	add	r9, r3
 8025530:	eb00 0c05 	add.w	ip, r0, r5
 8025534:	462b      	mov	r3, r5
 8025536:	210a      	movs	r1, #10
 8025538:	4563      	cmp	r3, ip
 802553a:	d10d      	bne.n	8025558 <_strtod_l+0x238>
 802553c:	1c69      	adds	r1, r5, #1
 802553e:	4401      	add	r1, r0
 8025540:	4428      	add	r0, r5
 8025542:	2808      	cmp	r0, #8
 8025544:	dc16      	bgt.n	8025574 <_strtod_l+0x254>
 8025546:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025548:	230a      	movs	r3, #10
 802554a:	fb03 2300 	mla	r3, r3, r0, r2
 802554e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025550:	2300      	movs	r3, #0
 8025552:	e018      	b.n	8025586 <_strtod_l+0x266>
 8025554:	4638      	mov	r0, r7
 8025556:	e7da      	b.n	802550e <_strtod_l+0x1ee>
 8025558:	2b08      	cmp	r3, #8
 802555a:	f103 0301 	add.w	r3, r3, #1
 802555e:	dc03      	bgt.n	8025568 <_strtod_l+0x248>
 8025560:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025562:	434e      	muls	r6, r1
 8025564:	960a      	str	r6, [sp, #40]	@ 0x28
 8025566:	e7e7      	b.n	8025538 <_strtod_l+0x218>
 8025568:	2b10      	cmp	r3, #16
 802556a:	bfde      	ittt	le
 802556c:	9e08      	ldrle	r6, [sp, #32]
 802556e:	434e      	mulle	r6, r1
 8025570:	9608      	strle	r6, [sp, #32]
 8025572:	e7e1      	b.n	8025538 <_strtod_l+0x218>
 8025574:	280f      	cmp	r0, #15
 8025576:	dceb      	bgt.n	8025550 <_strtod_l+0x230>
 8025578:	9808      	ldr	r0, [sp, #32]
 802557a:	230a      	movs	r3, #10
 802557c:	fb03 2300 	mla	r3, r3, r0, r2
 8025580:	9308      	str	r3, [sp, #32]
 8025582:	e7e5      	b.n	8025550 <_strtod_l+0x230>
 8025584:	4629      	mov	r1, r5
 8025586:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8025588:	460d      	mov	r5, r1
 802558a:	1c50      	adds	r0, r2, #1
 802558c:	9019      	str	r0, [sp, #100]	@ 0x64
 802558e:	4618      	mov	r0, r3
 8025590:	7852      	ldrb	r2, [r2, #1]
 8025592:	e7b1      	b.n	80254f8 <_strtod_l+0x1d8>
 8025594:	f04f 0900 	mov.w	r9, #0
 8025598:	2301      	movs	r3, #1
 802559a:	e77c      	b.n	8025496 <_strtod_l+0x176>
 802559c:	f04f 0c00 	mov.w	ip, #0
 80255a0:	1ca2      	adds	r2, r4, #2
 80255a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80255a4:	78a2      	ldrb	r2, [r4, #2]
 80255a6:	e784      	b.n	80254b2 <_strtod_l+0x192>
 80255a8:	f04f 0c01 	mov.w	ip, #1
 80255ac:	e7f8      	b.n	80255a0 <_strtod_l+0x280>
 80255ae:	bf00      	nop
 80255b0:	080302b8 	.word	0x080302b8
 80255b4:	080302a0 	.word	0x080302a0
 80255b8:	7ff00000 	.word	0x7ff00000
 80255bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80255be:	1c51      	adds	r1, r2, #1
 80255c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80255c2:	7852      	ldrb	r2, [r2, #1]
 80255c4:	2a30      	cmp	r2, #48	@ 0x30
 80255c6:	d0f9      	beq.n	80255bc <_strtod_l+0x29c>
 80255c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80255cc:	2908      	cmp	r1, #8
 80255ce:	f63f af76 	bhi.w	80254be <_strtod_l+0x19e>
 80255d2:	3a30      	subs	r2, #48	@ 0x30
 80255d4:	f04f 080a 	mov.w	r8, #10
 80255d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80255da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80255dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80255de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80255e0:	1c56      	adds	r6, r2, #1
 80255e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80255e4:	7852      	ldrb	r2, [r2, #1]
 80255e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80255ea:	f1be 0f09 	cmp.w	lr, #9
 80255ee:	d939      	bls.n	8025664 <_strtod_l+0x344>
 80255f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80255f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80255f6:	1a76      	subs	r6, r6, r1
 80255f8:	2e08      	cmp	r6, #8
 80255fa:	dc03      	bgt.n	8025604 <_strtod_l+0x2e4>
 80255fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80255fe:	4588      	cmp	r8, r1
 8025600:	bfa8      	it	ge
 8025602:	4688      	movge	r8, r1
 8025604:	f1bc 0f00 	cmp.w	ip, #0
 8025608:	d001      	beq.n	802560e <_strtod_l+0x2ee>
 802560a:	f1c8 0800 	rsb	r8, r8, #0
 802560e:	2d00      	cmp	r5, #0
 8025610:	d14e      	bne.n	80256b0 <_strtod_l+0x390>
 8025612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025614:	4308      	orrs	r0, r1
 8025616:	f47f aebc 	bne.w	8025392 <_strtod_l+0x72>
 802561a:	2b00      	cmp	r3, #0
 802561c:	f47f aed4 	bne.w	80253c8 <_strtod_l+0xa8>
 8025620:	2a69      	cmp	r2, #105	@ 0x69
 8025622:	d028      	beq.n	8025676 <_strtod_l+0x356>
 8025624:	dc25      	bgt.n	8025672 <_strtod_l+0x352>
 8025626:	2a49      	cmp	r2, #73	@ 0x49
 8025628:	d025      	beq.n	8025676 <_strtod_l+0x356>
 802562a:	2a4e      	cmp	r2, #78	@ 0x4e
 802562c:	f47f aecc 	bne.w	80253c8 <_strtod_l+0xa8>
 8025630:	499b      	ldr	r1, [pc, #620]	@ (80258a0 <_strtod_l+0x580>)
 8025632:	a819      	add	r0, sp, #100	@ 0x64
 8025634:	f003 fd78 	bl	8029128 <__match>
 8025638:	2800      	cmp	r0, #0
 802563a:	f43f aec5 	beq.w	80253c8 <_strtod_l+0xa8>
 802563e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025640:	781b      	ldrb	r3, [r3, #0]
 8025642:	2b28      	cmp	r3, #40	@ 0x28
 8025644:	d12e      	bne.n	80256a4 <_strtod_l+0x384>
 8025646:	aa1c      	add	r2, sp, #112	@ 0x70
 8025648:	4996      	ldr	r1, [pc, #600]	@ (80258a4 <_strtod_l+0x584>)
 802564a:	a819      	add	r0, sp, #100	@ 0x64
 802564c:	f003 fd80 	bl	8029150 <__hexnan>
 8025650:	2805      	cmp	r0, #5
 8025652:	d127      	bne.n	80256a4 <_strtod_l+0x384>
 8025654:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8025656:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802565a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 802565e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8025662:	e696      	b.n	8025392 <_strtod_l+0x72>
 8025664:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025666:	fb08 2101 	mla	r1, r8, r1, r2
 802566a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802566e:	920e      	str	r2, [sp, #56]	@ 0x38
 8025670:	e7b5      	b.n	80255de <_strtod_l+0x2be>
 8025672:	2a6e      	cmp	r2, #110	@ 0x6e
 8025674:	e7da      	b.n	802562c <_strtod_l+0x30c>
 8025676:	498c      	ldr	r1, [pc, #560]	@ (80258a8 <_strtod_l+0x588>)
 8025678:	a819      	add	r0, sp, #100	@ 0x64
 802567a:	f003 fd55 	bl	8029128 <__match>
 802567e:	2800      	cmp	r0, #0
 8025680:	f43f aea2 	beq.w	80253c8 <_strtod_l+0xa8>
 8025684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025686:	a819      	add	r0, sp, #100	@ 0x64
 8025688:	4988      	ldr	r1, [pc, #544]	@ (80258ac <_strtod_l+0x58c>)
 802568a:	3b01      	subs	r3, #1
 802568c:	9319      	str	r3, [sp, #100]	@ 0x64
 802568e:	f003 fd4b 	bl	8029128 <__match>
 8025692:	b910      	cbnz	r0, 802569a <_strtod_l+0x37a>
 8025694:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025696:	3301      	adds	r3, #1
 8025698:	9319      	str	r3, [sp, #100]	@ 0x64
 802569a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80258bc <_strtod_l+0x59c>
 802569e:	f04f 0a00 	mov.w	sl, #0
 80256a2:	e676      	b.n	8025392 <_strtod_l+0x72>
 80256a4:	4882      	ldr	r0, [pc, #520]	@ (80258b0 <_strtod_l+0x590>)
 80256a6:	f002 fc07 	bl	8027eb8 <nan>
 80256aa:	ec5b ab10 	vmov	sl, fp, d0
 80256ae:	e670      	b.n	8025392 <_strtod_l+0x72>
 80256b0:	eba8 0309 	sub.w	r3, r8, r9
 80256b4:	2f00      	cmp	r7, #0
 80256b6:	bf08      	it	eq
 80256b8:	462f      	moveq	r7, r5
 80256ba:	2d10      	cmp	r5, #16
 80256bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80256be:	462c      	mov	r4, r5
 80256c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80256c2:	bfa8      	it	ge
 80256c4:	2410      	movge	r4, #16
 80256c6:	f7da ff2b 	bl	8000520 <__aeabi_ui2d>
 80256ca:	2d09      	cmp	r5, #9
 80256cc:	4682      	mov	sl, r0
 80256ce:	468b      	mov	fp, r1
 80256d0:	dc13      	bgt.n	80256fa <_strtod_l+0x3da>
 80256d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	f43f ae5c 	beq.w	8025392 <_strtod_l+0x72>
 80256da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256dc:	dd78      	ble.n	80257d0 <_strtod_l+0x4b0>
 80256de:	2b16      	cmp	r3, #22
 80256e0:	dc5f      	bgt.n	80257a2 <_strtod_l+0x482>
 80256e2:	4974      	ldr	r1, [pc, #464]	@ (80258b4 <_strtod_l+0x594>)
 80256e4:	4652      	mov	r2, sl
 80256e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80256ea:	465b      	mov	r3, fp
 80256ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80256f0:	f7da ff90 	bl	8000614 <__aeabi_dmul>
 80256f4:	4682      	mov	sl, r0
 80256f6:	468b      	mov	fp, r1
 80256f8:	e64b      	b.n	8025392 <_strtod_l+0x72>
 80256fa:	4b6e      	ldr	r3, [pc, #440]	@ (80258b4 <_strtod_l+0x594>)
 80256fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025700:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8025704:	f7da ff86 	bl	8000614 <__aeabi_dmul>
 8025708:	4682      	mov	sl, r0
 802570a:	468b      	mov	fp, r1
 802570c:	9808      	ldr	r0, [sp, #32]
 802570e:	f7da ff07 	bl	8000520 <__aeabi_ui2d>
 8025712:	4602      	mov	r2, r0
 8025714:	460b      	mov	r3, r1
 8025716:	4650      	mov	r0, sl
 8025718:	4659      	mov	r1, fp
 802571a:	f7da fdc5 	bl	80002a8 <__adddf3>
 802571e:	2d0f      	cmp	r5, #15
 8025720:	4682      	mov	sl, r0
 8025722:	468b      	mov	fp, r1
 8025724:	ddd5      	ble.n	80256d2 <_strtod_l+0x3b2>
 8025726:	1b2c      	subs	r4, r5, r4
 8025728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802572a:	441c      	add	r4, r3
 802572c:	2c00      	cmp	r4, #0
 802572e:	f340 8096 	ble.w	802585e <_strtod_l+0x53e>
 8025732:	f014 030f 	ands.w	r3, r4, #15
 8025736:	d00a      	beq.n	802574e <_strtod_l+0x42e>
 8025738:	495e      	ldr	r1, [pc, #376]	@ (80258b4 <_strtod_l+0x594>)
 802573a:	4652      	mov	r2, sl
 802573c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8025740:	465b      	mov	r3, fp
 8025742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025746:	f7da ff65 	bl	8000614 <__aeabi_dmul>
 802574a:	4682      	mov	sl, r0
 802574c:	468b      	mov	fp, r1
 802574e:	f034 040f 	bics.w	r4, r4, #15
 8025752:	d073      	beq.n	802583c <_strtod_l+0x51c>
 8025754:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8025758:	dd48      	ble.n	80257ec <_strtod_l+0x4cc>
 802575a:	2400      	movs	r4, #0
 802575c:	46a0      	mov	r8, r4
 802575e:	46a1      	mov	r9, r4
 8025760:	940a      	str	r4, [sp, #40]	@ 0x28
 8025762:	2322      	movs	r3, #34	@ 0x22
 8025764:	9a05      	ldr	r2, [sp, #20]
 8025766:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80258bc <_strtod_l+0x59c>
 802576a:	f04f 0a00 	mov.w	sl, #0
 802576e:	6013      	str	r3, [r2, #0]
 8025770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025772:	2b00      	cmp	r3, #0
 8025774:	f43f ae0d 	beq.w	8025392 <_strtod_l+0x72>
 8025778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802577a:	9805      	ldr	r0, [sp, #20]
 802577c:	f003 fed8 	bl	8029530 <_Bfree>
 8025780:	4649      	mov	r1, r9
 8025782:	9805      	ldr	r0, [sp, #20]
 8025784:	f003 fed4 	bl	8029530 <_Bfree>
 8025788:	4641      	mov	r1, r8
 802578a:	9805      	ldr	r0, [sp, #20]
 802578c:	f003 fed0 	bl	8029530 <_Bfree>
 8025790:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025792:	9805      	ldr	r0, [sp, #20]
 8025794:	f003 fecc 	bl	8029530 <_Bfree>
 8025798:	4621      	mov	r1, r4
 802579a:	9805      	ldr	r0, [sp, #20]
 802579c:	f003 fec8 	bl	8029530 <_Bfree>
 80257a0:	e5f7      	b.n	8025392 <_strtod_l+0x72>
 80257a2:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80257a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80257a8:	4293      	cmp	r3, r2
 80257aa:	dbbc      	blt.n	8025726 <_strtod_l+0x406>
 80257ac:	f1c5 050f 	rsb	r5, r5, #15
 80257b0:	4c40      	ldr	r4, [pc, #256]	@ (80258b4 <_strtod_l+0x594>)
 80257b2:	4652      	mov	r2, sl
 80257b4:	465b      	mov	r3, fp
 80257b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80257ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80257be:	f7da ff29 	bl	8000614 <__aeabi_dmul>
 80257c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257c4:	1b5d      	subs	r5, r3, r5
 80257c6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80257ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80257ce:	e78f      	b.n	80256f0 <_strtod_l+0x3d0>
 80257d0:	3316      	adds	r3, #22
 80257d2:	dba8      	blt.n	8025726 <_strtod_l+0x406>
 80257d4:	eba9 0808 	sub.w	r8, r9, r8
 80257d8:	4b36      	ldr	r3, [pc, #216]	@ (80258b4 <_strtod_l+0x594>)
 80257da:	4650      	mov	r0, sl
 80257dc:	4659      	mov	r1, fp
 80257de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80257e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80257e6:	f7db f83f 	bl	8000868 <__aeabi_ddiv>
 80257ea:	e783      	b.n	80256f4 <_strtod_l+0x3d4>
 80257ec:	4b32      	ldr	r3, [pc, #200]	@ (80258b8 <_strtod_l+0x598>)
 80257ee:	1124      	asrs	r4, r4, #4
 80257f0:	4650      	mov	r0, sl
 80257f2:	4659      	mov	r1, fp
 80257f4:	9308      	str	r3, [sp, #32]
 80257f6:	2300      	movs	r3, #0
 80257f8:	461e      	mov	r6, r3
 80257fa:	2c01      	cmp	r4, #1
 80257fc:	dc21      	bgt.n	8025842 <_strtod_l+0x522>
 80257fe:	b10b      	cbz	r3, 8025804 <_strtod_l+0x4e4>
 8025800:	4682      	mov	sl, r0
 8025802:	468b      	mov	fp, r1
 8025804:	492c      	ldr	r1, [pc, #176]	@ (80258b8 <_strtod_l+0x598>)
 8025806:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802580a:	4652      	mov	r2, sl
 802580c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8025810:	465b      	mov	r3, fp
 8025812:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025816:	f7da fefd 	bl	8000614 <__aeabi_dmul>
 802581a:	4b28      	ldr	r3, [pc, #160]	@ (80258bc <_strtod_l+0x59c>)
 802581c:	460a      	mov	r2, r1
 802581e:	4682      	mov	sl, r0
 8025820:	400b      	ands	r3, r1
 8025822:	4927      	ldr	r1, [pc, #156]	@ (80258c0 <_strtod_l+0x5a0>)
 8025824:	428b      	cmp	r3, r1
 8025826:	d898      	bhi.n	802575a <_strtod_l+0x43a>
 8025828:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 802582c:	428b      	cmp	r3, r1
 802582e:	bf86      	itte	hi
 8025830:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80258c4 <_strtod_l+0x5a4>
 8025834:	f04f 3aff 	movhi.w	sl, #4294967295
 8025838:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 802583c:	2300      	movs	r3, #0
 802583e:	9308      	str	r3, [sp, #32]
 8025840:	e07a      	b.n	8025938 <_strtod_l+0x618>
 8025842:	07e2      	lsls	r2, r4, #31
 8025844:	d505      	bpl.n	8025852 <_strtod_l+0x532>
 8025846:	9b08      	ldr	r3, [sp, #32]
 8025848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802584c:	f7da fee2 	bl	8000614 <__aeabi_dmul>
 8025850:	2301      	movs	r3, #1
 8025852:	9a08      	ldr	r2, [sp, #32]
 8025854:	3601      	adds	r6, #1
 8025856:	1064      	asrs	r4, r4, #1
 8025858:	3208      	adds	r2, #8
 802585a:	9208      	str	r2, [sp, #32]
 802585c:	e7cd      	b.n	80257fa <_strtod_l+0x4da>
 802585e:	d0ed      	beq.n	802583c <_strtod_l+0x51c>
 8025860:	4264      	negs	r4, r4
 8025862:	f014 020f 	ands.w	r2, r4, #15
 8025866:	d00a      	beq.n	802587e <_strtod_l+0x55e>
 8025868:	4b12      	ldr	r3, [pc, #72]	@ (80258b4 <_strtod_l+0x594>)
 802586a:	4650      	mov	r0, sl
 802586c:	4659      	mov	r1, fp
 802586e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025876:	f7da fff7 	bl	8000868 <__aeabi_ddiv>
 802587a:	4682      	mov	sl, r0
 802587c:	468b      	mov	fp, r1
 802587e:	1124      	asrs	r4, r4, #4
 8025880:	d0dc      	beq.n	802583c <_strtod_l+0x51c>
 8025882:	2c1f      	cmp	r4, #31
 8025884:	dd20      	ble.n	80258c8 <_strtod_l+0x5a8>
 8025886:	2400      	movs	r4, #0
 8025888:	46a0      	mov	r8, r4
 802588a:	46a1      	mov	r9, r4
 802588c:	940a      	str	r4, [sp, #40]	@ 0x28
 802588e:	2322      	movs	r3, #34	@ 0x22
 8025890:	9a05      	ldr	r2, [sp, #20]
 8025892:	f04f 0a00 	mov.w	sl, #0
 8025896:	f04f 0b00 	mov.w	fp, #0
 802589a:	6013      	str	r3, [r2, #0]
 802589c:	e768      	b.n	8025770 <_strtod_l+0x450>
 802589e:	bf00      	nop
 80258a0:	0803042b 	.word	0x0803042b
 80258a4:	080302a4 	.word	0x080302a4
 80258a8:	08030423 	.word	0x08030423
 80258ac:	08030511 	.word	0x08030511
 80258b0:	080307ff 	.word	0x080307ff
 80258b4:	08030688 	.word	0x08030688
 80258b8:	08030660 	.word	0x08030660
 80258bc:	7ff00000 	.word	0x7ff00000
 80258c0:	7ca00000 	.word	0x7ca00000
 80258c4:	7fefffff 	.word	0x7fefffff
 80258c8:	f014 0310 	ands.w	r3, r4, #16
 80258cc:	4650      	mov	r0, sl
 80258ce:	4659      	mov	r1, fp
 80258d0:	4ea9      	ldr	r6, [pc, #676]	@ (8025b78 <_strtod_l+0x858>)
 80258d2:	bf18      	it	ne
 80258d4:	236a      	movne	r3, #106	@ 0x6a
 80258d6:	9308      	str	r3, [sp, #32]
 80258d8:	2300      	movs	r3, #0
 80258da:	07e2      	lsls	r2, r4, #31
 80258dc:	d504      	bpl.n	80258e8 <_strtod_l+0x5c8>
 80258de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80258e2:	f7da fe97 	bl	8000614 <__aeabi_dmul>
 80258e6:	2301      	movs	r3, #1
 80258e8:	1064      	asrs	r4, r4, #1
 80258ea:	f106 0608 	add.w	r6, r6, #8
 80258ee:	d1f4      	bne.n	80258da <_strtod_l+0x5ba>
 80258f0:	b10b      	cbz	r3, 80258f6 <_strtod_l+0x5d6>
 80258f2:	4682      	mov	sl, r0
 80258f4:	468b      	mov	fp, r1
 80258f6:	9b08      	ldr	r3, [sp, #32]
 80258f8:	b1b3      	cbz	r3, 8025928 <_strtod_l+0x608>
 80258fa:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80258fe:	4659      	mov	r1, fp
 8025900:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8025904:	2b00      	cmp	r3, #0
 8025906:	dd0f      	ble.n	8025928 <_strtod_l+0x608>
 8025908:	2b1f      	cmp	r3, #31
 802590a:	dd55      	ble.n	80259b8 <_strtod_l+0x698>
 802590c:	2b34      	cmp	r3, #52	@ 0x34
 802590e:	f04f 0a00 	mov.w	sl, #0
 8025912:	bfdb      	ittet	le
 8025914:	f04f 33ff 	movle.w	r3, #4294967295
 8025918:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802591c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8025920:	4093      	lslle	r3, r2
 8025922:	bfd8      	it	le
 8025924:	ea03 0b01 	andle.w	fp, r3, r1
 8025928:	2200      	movs	r2, #0
 802592a:	2300      	movs	r3, #0
 802592c:	4650      	mov	r0, sl
 802592e:	4659      	mov	r1, fp
 8025930:	f7db f8d8 	bl	8000ae4 <__aeabi_dcmpeq>
 8025934:	2800      	cmp	r0, #0
 8025936:	d1a6      	bne.n	8025886 <_strtod_l+0x566>
 8025938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802593a:	463a      	mov	r2, r7
 802593c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802593e:	9300      	str	r3, [sp, #0]
 8025940:	462b      	mov	r3, r5
 8025942:	9805      	ldr	r0, [sp, #20]
 8025944:	f003 fe5e 	bl	8029604 <__s2b>
 8025948:	900a      	str	r0, [sp, #40]	@ 0x28
 802594a:	2800      	cmp	r0, #0
 802594c:	f43f af05 	beq.w	802575a <_strtod_l+0x43a>
 8025950:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025952:	eba9 0308 	sub.w	r3, r9, r8
 8025956:	2400      	movs	r4, #0
 8025958:	2a00      	cmp	r2, #0
 802595a:	46a0      	mov	r8, r4
 802595c:	bfa8      	it	ge
 802595e:	2300      	movge	r3, #0
 8025960:	9312      	str	r3, [sp, #72]	@ 0x48
 8025962:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8025966:	9316      	str	r3, [sp, #88]	@ 0x58
 8025968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802596a:	9805      	ldr	r0, [sp, #20]
 802596c:	6859      	ldr	r1, [r3, #4]
 802596e:	f003 fd9f 	bl	80294b0 <_Balloc>
 8025972:	4681      	mov	r9, r0
 8025974:	2800      	cmp	r0, #0
 8025976:	f43f aef4 	beq.w	8025762 <_strtod_l+0x442>
 802597a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802597c:	300c      	adds	r0, #12
 802597e:	691a      	ldr	r2, [r3, #16]
 8025980:	f103 010c 	add.w	r1, r3, #12
 8025984:	3202      	adds	r2, #2
 8025986:	0092      	lsls	r2, r2, #2
 8025988:	f002 fa89 	bl	8027e9e <memcpy>
 802598c:	aa1c      	add	r2, sp, #112	@ 0x70
 802598e:	a91b      	add	r1, sp, #108	@ 0x6c
 8025990:	9805      	ldr	r0, [sp, #20]
 8025992:	ec4b ab10 	vmov	d0, sl, fp
 8025996:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 802599a:	f004 f977 	bl	8029c8c <__d2b>
 802599e:	901a      	str	r0, [sp, #104]	@ 0x68
 80259a0:	2800      	cmp	r0, #0
 80259a2:	f43f aede 	beq.w	8025762 <_strtod_l+0x442>
 80259a6:	2101      	movs	r1, #1
 80259a8:	9805      	ldr	r0, [sp, #20]
 80259aa:	f003 fec1 	bl	8029730 <__i2b>
 80259ae:	4680      	mov	r8, r0
 80259b0:	b948      	cbnz	r0, 80259c6 <_strtod_l+0x6a6>
 80259b2:	f04f 0800 	mov.w	r8, #0
 80259b6:	e6d4      	b.n	8025762 <_strtod_l+0x442>
 80259b8:	f04f 32ff 	mov.w	r2, #4294967295
 80259bc:	fa02 f303 	lsl.w	r3, r2, r3
 80259c0:	ea03 0a0a 	and.w	sl, r3, sl
 80259c4:	e7b0      	b.n	8025928 <_strtod_l+0x608>
 80259c6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80259c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80259ca:	2d00      	cmp	r5, #0
 80259cc:	bfa9      	itett	ge
 80259ce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80259d0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80259d2:	18ef      	addge	r7, r5, r3
 80259d4:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80259d6:	bfb8      	it	lt
 80259d8:	1b5e      	sublt	r6, r3, r5
 80259da:	9b08      	ldr	r3, [sp, #32]
 80259dc:	bfb8      	it	lt
 80259de:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80259e0:	1aed      	subs	r5, r5, r3
 80259e2:	4b66      	ldr	r3, [pc, #408]	@ (8025b7c <_strtod_l+0x85c>)
 80259e4:	4415      	add	r5, r2
 80259e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80259ea:	3d01      	subs	r5, #1
 80259ec:	429d      	cmp	r5, r3
 80259ee:	da4f      	bge.n	8025a90 <_strtod_l+0x770>
 80259f0:	1b5b      	subs	r3, r3, r5
 80259f2:	2101      	movs	r1, #1
 80259f4:	2b1f      	cmp	r3, #31
 80259f6:	eba2 0203 	sub.w	r2, r2, r3
 80259fa:	dc3d      	bgt.n	8025a78 <_strtod_l+0x758>
 80259fc:	fa01 f303 	lsl.w	r3, r1, r3
 8025a00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025a02:	2300      	movs	r3, #0
 8025a04:	9310      	str	r3, [sp, #64]	@ 0x40
 8025a06:	18bd      	adds	r5, r7, r2
 8025a08:	9b08      	ldr	r3, [sp, #32]
 8025a0a:	4416      	add	r6, r2
 8025a0c:	42af      	cmp	r7, r5
 8025a0e:	441e      	add	r6, r3
 8025a10:	463b      	mov	r3, r7
 8025a12:	bfa8      	it	ge
 8025a14:	462b      	movge	r3, r5
 8025a16:	42b3      	cmp	r3, r6
 8025a18:	bfa8      	it	ge
 8025a1a:	4633      	movge	r3, r6
 8025a1c:	2b00      	cmp	r3, #0
 8025a1e:	bfc2      	ittt	gt
 8025a20:	1aed      	subgt	r5, r5, r3
 8025a22:	1af6      	subgt	r6, r6, r3
 8025a24:	1aff      	subgt	r7, r7, r3
 8025a26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025a28:	2b00      	cmp	r3, #0
 8025a2a:	dd16      	ble.n	8025a5a <_strtod_l+0x73a>
 8025a2c:	4641      	mov	r1, r8
 8025a2e:	461a      	mov	r2, r3
 8025a30:	9805      	ldr	r0, [sp, #20]
 8025a32:	f003 ff3d 	bl	80298b0 <__pow5mult>
 8025a36:	4680      	mov	r8, r0
 8025a38:	2800      	cmp	r0, #0
 8025a3a:	d0ba      	beq.n	80259b2 <_strtod_l+0x692>
 8025a3c:	4601      	mov	r1, r0
 8025a3e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025a40:	9805      	ldr	r0, [sp, #20]
 8025a42:	f003 fe8b 	bl	802975c <__multiply>
 8025a46:	900e      	str	r0, [sp, #56]	@ 0x38
 8025a48:	2800      	cmp	r0, #0
 8025a4a:	f43f ae8a 	beq.w	8025762 <_strtod_l+0x442>
 8025a4e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8025a50:	9805      	ldr	r0, [sp, #20]
 8025a52:	f003 fd6d 	bl	8029530 <_Bfree>
 8025a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025a58:	931a      	str	r3, [sp, #104]	@ 0x68
 8025a5a:	2d00      	cmp	r5, #0
 8025a5c:	dc1d      	bgt.n	8025a9a <_strtod_l+0x77a>
 8025a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a60:	2b00      	cmp	r3, #0
 8025a62:	dd23      	ble.n	8025aac <_strtod_l+0x78c>
 8025a64:	4649      	mov	r1, r9
 8025a66:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025a68:	9805      	ldr	r0, [sp, #20]
 8025a6a:	f003 ff21 	bl	80298b0 <__pow5mult>
 8025a6e:	4681      	mov	r9, r0
 8025a70:	b9e0      	cbnz	r0, 8025aac <_strtod_l+0x78c>
 8025a72:	f04f 0900 	mov.w	r9, #0
 8025a76:	e674      	b.n	8025762 <_strtod_l+0x442>
 8025a78:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8025a7c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025a7e:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8025a82:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8025a86:	35e2      	adds	r5, #226	@ 0xe2
 8025a88:	fa01 f305 	lsl.w	r3, r1, r5
 8025a8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8025a8e:	e7ba      	b.n	8025a06 <_strtod_l+0x6e6>
 8025a90:	2300      	movs	r3, #0
 8025a92:	9310      	str	r3, [sp, #64]	@ 0x40
 8025a94:	2301      	movs	r3, #1
 8025a96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025a98:	e7b5      	b.n	8025a06 <_strtod_l+0x6e6>
 8025a9a:	462a      	mov	r2, r5
 8025a9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8025a9e:	9805      	ldr	r0, [sp, #20]
 8025aa0:	f003 ff60 	bl	8029964 <__lshift>
 8025aa4:	901a      	str	r0, [sp, #104]	@ 0x68
 8025aa6:	2800      	cmp	r0, #0
 8025aa8:	d1d9      	bne.n	8025a5e <_strtod_l+0x73e>
 8025aaa:	e65a      	b.n	8025762 <_strtod_l+0x442>
 8025aac:	2e00      	cmp	r6, #0
 8025aae:	dd07      	ble.n	8025ac0 <_strtod_l+0x7a0>
 8025ab0:	4649      	mov	r1, r9
 8025ab2:	4632      	mov	r2, r6
 8025ab4:	9805      	ldr	r0, [sp, #20]
 8025ab6:	f003 ff55 	bl	8029964 <__lshift>
 8025aba:	4681      	mov	r9, r0
 8025abc:	2800      	cmp	r0, #0
 8025abe:	d0d8      	beq.n	8025a72 <_strtod_l+0x752>
 8025ac0:	2f00      	cmp	r7, #0
 8025ac2:	dd08      	ble.n	8025ad6 <_strtod_l+0x7b6>
 8025ac4:	4641      	mov	r1, r8
 8025ac6:	463a      	mov	r2, r7
 8025ac8:	9805      	ldr	r0, [sp, #20]
 8025aca:	f003 ff4b 	bl	8029964 <__lshift>
 8025ace:	4680      	mov	r8, r0
 8025ad0:	2800      	cmp	r0, #0
 8025ad2:	f43f ae46 	beq.w	8025762 <_strtod_l+0x442>
 8025ad6:	464a      	mov	r2, r9
 8025ad8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8025ada:	9805      	ldr	r0, [sp, #20]
 8025adc:	f003 ffca 	bl	8029a74 <__mdiff>
 8025ae0:	4604      	mov	r4, r0
 8025ae2:	2800      	cmp	r0, #0
 8025ae4:	f43f ae3d 	beq.w	8025762 <_strtod_l+0x442>
 8025ae8:	68c3      	ldr	r3, [r0, #12]
 8025aea:	4641      	mov	r1, r8
 8025aec:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025aee:	2300      	movs	r3, #0
 8025af0:	60c3      	str	r3, [r0, #12]
 8025af2:	f003 ffa3 	bl	8029a3c <__mcmp>
 8025af6:	2800      	cmp	r0, #0
 8025af8:	da46      	bge.n	8025b88 <_strtod_l+0x868>
 8025afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025afc:	ea53 030a 	orrs.w	r3, r3, sl
 8025b00:	d16c      	bne.n	8025bdc <_strtod_l+0x8bc>
 8025b02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025b06:	2b00      	cmp	r3, #0
 8025b08:	d168      	bne.n	8025bdc <_strtod_l+0x8bc>
 8025b0a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025b0e:	0d1b      	lsrs	r3, r3, #20
 8025b10:	051b      	lsls	r3, r3, #20
 8025b12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8025b16:	d961      	bls.n	8025bdc <_strtod_l+0x8bc>
 8025b18:	6963      	ldr	r3, [r4, #20]
 8025b1a:	b913      	cbnz	r3, 8025b22 <_strtod_l+0x802>
 8025b1c:	6923      	ldr	r3, [r4, #16]
 8025b1e:	2b01      	cmp	r3, #1
 8025b20:	dd5c      	ble.n	8025bdc <_strtod_l+0x8bc>
 8025b22:	4621      	mov	r1, r4
 8025b24:	2201      	movs	r2, #1
 8025b26:	9805      	ldr	r0, [sp, #20]
 8025b28:	f003 ff1c 	bl	8029964 <__lshift>
 8025b2c:	4641      	mov	r1, r8
 8025b2e:	4604      	mov	r4, r0
 8025b30:	f003 ff84 	bl	8029a3c <__mcmp>
 8025b34:	2800      	cmp	r0, #0
 8025b36:	dd51      	ble.n	8025bdc <_strtod_l+0x8bc>
 8025b38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025b3c:	9a08      	ldr	r2, [sp, #32]
 8025b3e:	0d1b      	lsrs	r3, r3, #20
 8025b40:	051b      	lsls	r3, r3, #20
 8025b42:	2a00      	cmp	r2, #0
 8025b44:	d06b      	beq.n	8025c1e <_strtod_l+0x8fe>
 8025b46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8025b4a:	d868      	bhi.n	8025c1e <_strtod_l+0x8fe>
 8025b4c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8025b50:	f67f ae9d 	bls.w	802588e <_strtod_l+0x56e>
 8025b54:	4b0a      	ldr	r3, [pc, #40]	@ (8025b80 <_strtod_l+0x860>)
 8025b56:	4650      	mov	r0, sl
 8025b58:	4659      	mov	r1, fp
 8025b5a:	2200      	movs	r2, #0
 8025b5c:	f7da fd5a 	bl	8000614 <__aeabi_dmul>
 8025b60:	4b08      	ldr	r3, [pc, #32]	@ (8025b84 <_strtod_l+0x864>)
 8025b62:	4682      	mov	sl, r0
 8025b64:	468b      	mov	fp, r1
 8025b66:	400b      	ands	r3, r1
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	f47f ae05 	bne.w	8025778 <_strtod_l+0x458>
 8025b6e:	2322      	movs	r3, #34	@ 0x22
 8025b70:	9a05      	ldr	r2, [sp, #20]
 8025b72:	6013      	str	r3, [r2, #0]
 8025b74:	e600      	b.n	8025778 <_strtod_l+0x458>
 8025b76:	bf00      	nop
 8025b78:	080302d0 	.word	0x080302d0
 8025b7c:	fffffc02 	.word	0xfffffc02
 8025b80:	39500000 	.word	0x39500000
 8025b84:	7ff00000 	.word	0x7ff00000
 8025b88:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8025b8c:	d165      	bne.n	8025c5a <_strtod_l+0x93a>
 8025b8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025b90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025b94:	b35a      	cbz	r2, 8025bee <_strtod_l+0x8ce>
 8025b96:	4a9e      	ldr	r2, [pc, #632]	@ (8025e10 <_strtod_l+0xaf0>)
 8025b98:	4293      	cmp	r3, r2
 8025b9a:	d12b      	bne.n	8025bf4 <_strtod_l+0x8d4>
 8025b9c:	9b08      	ldr	r3, [sp, #32]
 8025b9e:	4651      	mov	r1, sl
 8025ba0:	b303      	cbz	r3, 8025be4 <_strtod_l+0x8c4>
 8025ba2:	465a      	mov	r2, fp
 8025ba4:	4b9b      	ldr	r3, [pc, #620]	@ (8025e14 <_strtod_l+0xaf4>)
 8025ba6:	4013      	ands	r3, r2
 8025ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8025bac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8025bb0:	d81b      	bhi.n	8025bea <_strtod_l+0x8ca>
 8025bb2:	0d1b      	lsrs	r3, r3, #20
 8025bb4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8025bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8025bbc:	4299      	cmp	r1, r3
 8025bbe:	d119      	bne.n	8025bf4 <_strtod_l+0x8d4>
 8025bc0:	4b95      	ldr	r3, [pc, #596]	@ (8025e18 <_strtod_l+0xaf8>)
 8025bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025bc4:	429a      	cmp	r2, r3
 8025bc6:	d102      	bne.n	8025bce <_strtod_l+0x8ae>
 8025bc8:	3101      	adds	r1, #1
 8025bca:	f43f adca 	beq.w	8025762 <_strtod_l+0x442>
 8025bce:	4b91      	ldr	r3, [pc, #580]	@ (8025e14 <_strtod_l+0xaf4>)
 8025bd0:	f04f 0a00 	mov.w	sl, #0
 8025bd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025bd6:	401a      	ands	r2, r3
 8025bd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8025bdc:	9b08      	ldr	r3, [sp, #32]
 8025bde:	2b00      	cmp	r3, #0
 8025be0:	d1b8      	bne.n	8025b54 <_strtod_l+0x834>
 8025be2:	e5c9      	b.n	8025778 <_strtod_l+0x458>
 8025be4:	f04f 33ff 	mov.w	r3, #4294967295
 8025be8:	e7e8      	b.n	8025bbc <_strtod_l+0x89c>
 8025bea:	4613      	mov	r3, r2
 8025bec:	e7e6      	b.n	8025bbc <_strtod_l+0x89c>
 8025bee:	ea53 030a 	orrs.w	r3, r3, sl
 8025bf2:	d0a1      	beq.n	8025b38 <_strtod_l+0x818>
 8025bf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025bf6:	b1db      	cbz	r3, 8025c30 <_strtod_l+0x910>
 8025bf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025bfa:	4213      	tst	r3, r2
 8025bfc:	d0ee      	beq.n	8025bdc <_strtod_l+0x8bc>
 8025bfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c00:	4650      	mov	r0, sl
 8025c02:	9a08      	ldr	r2, [sp, #32]
 8025c04:	4659      	mov	r1, fp
 8025c06:	b1bb      	cbz	r3, 8025c38 <_strtod_l+0x918>
 8025c08:	f7ff fb6c 	bl	80252e4 <sulp>
 8025c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025c10:	ec53 2b10 	vmov	r2, r3, d0
 8025c14:	f7da fb48 	bl	80002a8 <__adddf3>
 8025c18:	4682      	mov	sl, r0
 8025c1a:	468b      	mov	fp, r1
 8025c1c:	e7de      	b.n	8025bdc <_strtod_l+0x8bc>
 8025c1e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8025c22:	f04f 3aff 	mov.w	sl, #4294967295
 8025c26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8025c2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8025c2e:	e7d5      	b.n	8025bdc <_strtod_l+0x8bc>
 8025c30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025c32:	ea13 0f0a 	tst.w	r3, sl
 8025c36:	e7e1      	b.n	8025bfc <_strtod_l+0x8dc>
 8025c38:	f7ff fb54 	bl	80252e4 <sulp>
 8025c3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025c40:	ec53 2b10 	vmov	r2, r3, d0
 8025c44:	f7da fb2e 	bl	80002a4 <__aeabi_dsub>
 8025c48:	2200      	movs	r2, #0
 8025c4a:	2300      	movs	r3, #0
 8025c4c:	4682      	mov	sl, r0
 8025c4e:	468b      	mov	fp, r1
 8025c50:	f7da ff48 	bl	8000ae4 <__aeabi_dcmpeq>
 8025c54:	2800      	cmp	r0, #0
 8025c56:	d0c1      	beq.n	8025bdc <_strtod_l+0x8bc>
 8025c58:	e619      	b.n	802588e <_strtod_l+0x56e>
 8025c5a:	4641      	mov	r1, r8
 8025c5c:	4620      	mov	r0, r4
 8025c5e:	f004 f86d 	bl	8029d3c <__ratio>
 8025c62:	2200      	movs	r2, #0
 8025c64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8025c68:	ec57 6b10 	vmov	r6, r7, d0
 8025c6c:	4630      	mov	r0, r6
 8025c6e:	4639      	mov	r1, r7
 8025c70:	f7da ff4c 	bl	8000b0c <__aeabi_dcmple>
 8025c74:	2800      	cmp	r0, #0
 8025c76:	d06f      	beq.n	8025d58 <_strtod_l+0xa38>
 8025c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c7a:	2b00      	cmp	r3, #0
 8025c7c:	d17a      	bne.n	8025d74 <_strtod_l+0xa54>
 8025c7e:	f1ba 0f00 	cmp.w	sl, #0
 8025c82:	d158      	bne.n	8025d36 <_strtod_l+0xa16>
 8025c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025c8a:	2b00      	cmp	r3, #0
 8025c8c:	d15a      	bne.n	8025d44 <_strtod_l+0xa24>
 8025c8e:	2200      	movs	r2, #0
 8025c90:	4b62      	ldr	r3, [pc, #392]	@ (8025e1c <_strtod_l+0xafc>)
 8025c92:	4630      	mov	r0, r6
 8025c94:	4639      	mov	r1, r7
 8025c96:	f7da ff2f 	bl	8000af8 <__aeabi_dcmplt>
 8025c9a:	2800      	cmp	r0, #0
 8025c9c:	d159      	bne.n	8025d52 <_strtod_l+0xa32>
 8025c9e:	4630      	mov	r0, r6
 8025ca0:	4639      	mov	r1, r7
 8025ca2:	2200      	movs	r2, #0
 8025ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8025e20 <_strtod_l+0xb00>)
 8025ca6:	f7da fcb5 	bl	8000614 <__aeabi_dmul>
 8025caa:	4606      	mov	r6, r0
 8025cac:	460f      	mov	r7, r1
 8025cae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8025cb2:	9606      	str	r6, [sp, #24]
 8025cb4:	9307      	str	r3, [sp, #28]
 8025cb6:	4d57      	ldr	r5, [pc, #348]	@ (8025e14 <_strtod_l+0xaf4>)
 8025cb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8025cbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8025cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025cc2:	401d      	ands	r5, r3
 8025cc4:	4b57      	ldr	r3, [pc, #348]	@ (8025e24 <_strtod_l+0xb04>)
 8025cc6:	429d      	cmp	r5, r3
 8025cc8:	f040 80b0 	bne.w	8025e2c <_strtod_l+0xb0c>
 8025ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025cce:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8025cd2:	ec4b ab10 	vmov	d0, sl, fp
 8025cd6:	f003 ff65 	bl	8029ba4 <__ulp>
 8025cda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8025cde:	ec51 0b10 	vmov	r0, r1, d0
 8025ce2:	f7da fc97 	bl	8000614 <__aeabi_dmul>
 8025ce6:	4652      	mov	r2, sl
 8025ce8:	465b      	mov	r3, fp
 8025cea:	f7da fadd 	bl	80002a8 <__adddf3>
 8025cee:	460b      	mov	r3, r1
 8025cf0:	4948      	ldr	r1, [pc, #288]	@ (8025e14 <_strtod_l+0xaf4>)
 8025cf2:	4682      	mov	sl, r0
 8025cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8025e28 <_strtod_l+0xb08>)
 8025cf6:	4019      	ands	r1, r3
 8025cf8:	4291      	cmp	r1, r2
 8025cfa:	d942      	bls.n	8025d82 <_strtod_l+0xa62>
 8025cfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025cfe:	4b46      	ldr	r3, [pc, #280]	@ (8025e18 <_strtod_l+0xaf8>)
 8025d00:	429a      	cmp	r2, r3
 8025d02:	d103      	bne.n	8025d0c <_strtod_l+0x9ec>
 8025d04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d06:	3301      	adds	r3, #1
 8025d08:	f43f ad2b 	beq.w	8025762 <_strtod_l+0x442>
 8025d0c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8025e18 <_strtod_l+0xaf8>
 8025d10:	f04f 3aff 	mov.w	sl, #4294967295
 8025d14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8025d16:	9805      	ldr	r0, [sp, #20]
 8025d18:	f003 fc0a 	bl	8029530 <_Bfree>
 8025d1c:	4649      	mov	r1, r9
 8025d1e:	9805      	ldr	r0, [sp, #20]
 8025d20:	f003 fc06 	bl	8029530 <_Bfree>
 8025d24:	4641      	mov	r1, r8
 8025d26:	9805      	ldr	r0, [sp, #20]
 8025d28:	f003 fc02 	bl	8029530 <_Bfree>
 8025d2c:	4621      	mov	r1, r4
 8025d2e:	9805      	ldr	r0, [sp, #20]
 8025d30:	f003 fbfe 	bl	8029530 <_Bfree>
 8025d34:	e618      	b.n	8025968 <_strtod_l+0x648>
 8025d36:	f1ba 0f01 	cmp.w	sl, #1
 8025d3a:	d103      	bne.n	8025d44 <_strtod_l+0xa24>
 8025d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	f43f ada5 	beq.w	802588e <_strtod_l+0x56e>
 8025d44:	2600      	movs	r6, #0
 8025d46:	4f35      	ldr	r7, [pc, #212]	@ (8025e1c <_strtod_l+0xafc>)
 8025d48:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8025df0 <_strtod_l+0xad0>
 8025d4c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8025d50:	e7b1      	b.n	8025cb6 <_strtod_l+0x996>
 8025d52:	2600      	movs	r6, #0
 8025d54:	4f32      	ldr	r7, [pc, #200]	@ (8025e20 <_strtod_l+0xb00>)
 8025d56:	e7aa      	b.n	8025cae <_strtod_l+0x98e>
 8025d58:	4b31      	ldr	r3, [pc, #196]	@ (8025e20 <_strtod_l+0xb00>)
 8025d5a:	4630      	mov	r0, r6
 8025d5c:	4639      	mov	r1, r7
 8025d5e:	2200      	movs	r2, #0
 8025d60:	f7da fc58 	bl	8000614 <__aeabi_dmul>
 8025d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025d66:	4606      	mov	r6, r0
 8025d68:	460f      	mov	r7, r1
 8025d6a:	2b00      	cmp	r3, #0
 8025d6c:	d09f      	beq.n	8025cae <_strtod_l+0x98e>
 8025d6e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8025d72:	e7a0      	b.n	8025cb6 <_strtod_l+0x996>
 8025d74:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8025df8 <_strtod_l+0xad8>
 8025d78:	ec57 6b17 	vmov	r6, r7, d7
 8025d7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8025d80:	e799      	b.n	8025cb6 <_strtod_l+0x996>
 8025d82:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8025d86:	9b08      	ldr	r3, [sp, #32]
 8025d88:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8025d8c:	2b00      	cmp	r3, #0
 8025d8e:	d1c1      	bne.n	8025d14 <_strtod_l+0x9f4>
 8025d90:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8025d94:	0d1b      	lsrs	r3, r3, #20
 8025d96:	051b      	lsls	r3, r3, #20
 8025d98:	429d      	cmp	r5, r3
 8025d9a:	d1bb      	bne.n	8025d14 <_strtod_l+0x9f4>
 8025d9c:	4630      	mov	r0, r6
 8025d9e:	4639      	mov	r1, r7
 8025da0:	f7da ff98 	bl	8000cd4 <__aeabi_d2lz>
 8025da4:	f7da fc08 	bl	80005b8 <__aeabi_l2d>
 8025da8:	4602      	mov	r2, r0
 8025daa:	460b      	mov	r3, r1
 8025dac:	4630      	mov	r0, r6
 8025dae:	4639      	mov	r1, r7
 8025db0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8025db4:	f7da fa76 	bl	80002a4 <__aeabi_dsub>
 8025db8:	460b      	mov	r3, r1
 8025dba:	4602      	mov	r2, r0
 8025dbc:	ea46 060a 	orr.w	r6, r6, sl
 8025dc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8025dc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025dc6:	431e      	orrs	r6, r3
 8025dc8:	d06d      	beq.n	8025ea6 <_strtod_l+0xb86>
 8025dca:	a30d      	add	r3, pc, #52	@ (adr r3, 8025e00 <_strtod_l+0xae0>)
 8025dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025dd0:	f7da fe92 	bl	8000af8 <__aeabi_dcmplt>
 8025dd4:	2800      	cmp	r0, #0
 8025dd6:	f47f accf 	bne.w	8025778 <_strtod_l+0x458>
 8025dda:	a30b      	add	r3, pc, #44	@ (adr r3, 8025e08 <_strtod_l+0xae8>)
 8025ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025de4:	f7da fea6 	bl	8000b34 <__aeabi_dcmpgt>
 8025de8:	2800      	cmp	r0, #0
 8025dea:	d093      	beq.n	8025d14 <_strtod_l+0x9f4>
 8025dec:	e4c4      	b.n	8025778 <_strtod_l+0x458>
 8025dee:	bf00      	nop
 8025df0:	00000000 	.word	0x00000000
 8025df4:	bff00000 	.word	0xbff00000
 8025df8:	00000000 	.word	0x00000000
 8025dfc:	3ff00000 	.word	0x3ff00000
 8025e00:	94a03595 	.word	0x94a03595
 8025e04:	3fdfffff 	.word	0x3fdfffff
 8025e08:	35afe535 	.word	0x35afe535
 8025e0c:	3fe00000 	.word	0x3fe00000
 8025e10:	000fffff 	.word	0x000fffff
 8025e14:	7ff00000 	.word	0x7ff00000
 8025e18:	7fefffff 	.word	0x7fefffff
 8025e1c:	3ff00000 	.word	0x3ff00000
 8025e20:	3fe00000 	.word	0x3fe00000
 8025e24:	7fe00000 	.word	0x7fe00000
 8025e28:	7c9fffff 	.word	0x7c9fffff
 8025e2c:	9b08      	ldr	r3, [sp, #32]
 8025e2e:	b323      	cbz	r3, 8025e7a <_strtod_l+0xb5a>
 8025e30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8025e34:	d821      	bhi.n	8025e7a <_strtod_l+0xb5a>
 8025e36:	4630      	mov	r0, r6
 8025e38:	4639      	mov	r1, r7
 8025e3a:	a327      	add	r3, pc, #156	@ (adr r3, 8025ed8 <_strtod_l+0xbb8>)
 8025e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e40:	f7da fe64 	bl	8000b0c <__aeabi_dcmple>
 8025e44:	b1a0      	cbz	r0, 8025e70 <_strtod_l+0xb50>
 8025e46:	4639      	mov	r1, r7
 8025e48:	4630      	mov	r0, r6
 8025e4a:	f7da febb 	bl	8000bc4 <__aeabi_d2uiz>
 8025e4e:	2801      	cmp	r0, #1
 8025e50:	bf38      	it	cc
 8025e52:	2001      	movcc	r0, #1
 8025e54:	f7da fb64 	bl	8000520 <__aeabi_ui2d>
 8025e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e5a:	4606      	mov	r6, r0
 8025e5c:	460f      	mov	r7, r1
 8025e5e:	b9fb      	cbnz	r3, 8025ea0 <_strtod_l+0xb80>
 8025e60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8025e64:	9014      	str	r0, [sp, #80]	@ 0x50
 8025e66:	9315      	str	r3, [sp, #84]	@ 0x54
 8025e68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8025e6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8025e70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025e72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8025e76:	1b5b      	subs	r3, r3, r5
 8025e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8025e7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8025e7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8025e82:	f003 fe8f 	bl	8029ba4 <__ulp>
 8025e86:	4650      	mov	r0, sl
 8025e88:	4659      	mov	r1, fp
 8025e8a:	ec53 2b10 	vmov	r2, r3, d0
 8025e8e:	f7da fbc1 	bl	8000614 <__aeabi_dmul>
 8025e92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8025e96:	f7da fa07 	bl	80002a8 <__adddf3>
 8025e9a:	4682      	mov	sl, r0
 8025e9c:	468b      	mov	fp, r1
 8025e9e:	e772      	b.n	8025d86 <_strtod_l+0xa66>
 8025ea0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8025ea4:	e7e0      	b.n	8025e68 <_strtod_l+0xb48>
 8025ea6:	a30e      	add	r3, pc, #56	@ (adr r3, 8025ee0 <_strtod_l+0xbc0>)
 8025ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025eac:	f7da fe24 	bl	8000af8 <__aeabi_dcmplt>
 8025eb0:	e79a      	b.n	8025de8 <_strtod_l+0xac8>
 8025eb2:	2300      	movs	r3, #0
 8025eb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025eb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025eb8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8025eba:	6013      	str	r3, [r2, #0]
 8025ebc:	f7ff ba6d 	b.w	802539a <_strtod_l+0x7a>
 8025ec0:	2a65      	cmp	r2, #101	@ 0x65
 8025ec2:	f43f ab67 	beq.w	8025594 <_strtod_l+0x274>
 8025ec6:	2a45      	cmp	r2, #69	@ 0x45
 8025ec8:	f43f ab64 	beq.w	8025594 <_strtod_l+0x274>
 8025ecc:	2301      	movs	r3, #1
 8025ece:	f7ff bba0 	b.w	8025612 <_strtod_l+0x2f2>
 8025ed2:	bf00      	nop
 8025ed4:	f3af 8000 	nop.w
 8025ed8:	ffc00000 	.word	0xffc00000
 8025edc:	41dfffff 	.word	0x41dfffff
 8025ee0:	94a03595 	.word	0x94a03595
 8025ee4:	3fcfffff 	.word	0x3fcfffff

08025ee8 <_strtod_r>:
 8025ee8:	4b01      	ldr	r3, [pc, #4]	@ (8025ef0 <_strtod_r+0x8>)
 8025eea:	f7ff ba19 	b.w	8025320 <_strtod_l>
 8025eee:	bf00      	nop
 8025ef0:	2000039c 	.word	0x2000039c

08025ef4 <strtof>:
 8025ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ef8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8025fb8 <strtof+0xc4>
 8025efc:	460a      	mov	r2, r1
 8025efe:	4b29      	ldr	r3, [pc, #164]	@ (8025fa4 <strtof+0xb0>)
 8025f00:	4601      	mov	r1, r0
 8025f02:	f8d8 0000 	ldr.w	r0, [r8]
 8025f06:	ed2d 8b02 	vpush	{d8}
 8025f0a:	f7ff fa09 	bl	8025320 <_strtod_l>
 8025f0e:	ec55 4b10 	vmov	r4, r5, d0
 8025f12:	4622      	mov	r2, r4
 8025f14:	462b      	mov	r3, r5
 8025f16:	4620      	mov	r0, r4
 8025f18:	4629      	mov	r1, r5
 8025f1a:	f7da fe15 	bl	8000b48 <__aeabi_dcmpun>
 8025f1e:	b190      	cbz	r0, 8025f46 <strtof+0x52>
 8025f20:	2d00      	cmp	r5, #0
 8025f22:	4821      	ldr	r0, [pc, #132]	@ (8025fa8 <strtof+0xb4>)
 8025f24:	da09      	bge.n	8025f3a <strtof+0x46>
 8025f26:	f001 ffcf 	bl	8027ec8 <nanf>
 8025f2a:	eeb1 8a40 	vneg.f32	s16, s0
 8025f2e:	eeb0 0a48 	vmov.f32	s0, s16
 8025f32:	ecbd 8b02 	vpop	{d8}
 8025f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f3a:	ecbd 8b02 	vpop	{d8}
 8025f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025f42:	f001 bfc1 	b.w	8027ec8 <nanf>
 8025f46:	4620      	mov	r0, r4
 8025f48:	4629      	mov	r1, r5
 8025f4a:	f7da fe5b 	bl	8000c04 <__aeabi_d2f>
 8025f4e:	ee08 0a10 	vmov	s16, r0
 8025f52:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8025fac <strtof+0xb8>
 8025f56:	eeb0 7ac8 	vabs.f32	s14, s16
 8025f5a:	eeb4 7a67 	vcmp.f32	s14, s15
 8025f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f62:	dd11      	ble.n	8025f88 <strtof+0x94>
 8025f64:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8025f68:	f04f 32ff 	mov.w	r2, #4294967295
 8025f6c:	4b10      	ldr	r3, [pc, #64]	@ (8025fb0 <strtof+0xbc>)
 8025f6e:	4620      	mov	r0, r4
 8025f70:	4639      	mov	r1, r7
 8025f72:	f7da fde9 	bl	8000b48 <__aeabi_dcmpun>
 8025f76:	b980      	cbnz	r0, 8025f9a <strtof+0xa6>
 8025f78:	f04f 32ff 	mov.w	r2, #4294967295
 8025f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8025fb0 <strtof+0xbc>)
 8025f7e:	4620      	mov	r0, r4
 8025f80:	4639      	mov	r1, r7
 8025f82:	f7da fdc3 	bl	8000b0c <__aeabi_dcmple>
 8025f86:	b940      	cbnz	r0, 8025f9a <strtof+0xa6>
 8025f88:	ee18 3a10 	vmov	r3, s16
 8025f8c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8025f90:	d1cd      	bne.n	8025f2e <strtof+0x3a>
 8025f92:	4b08      	ldr	r3, [pc, #32]	@ (8025fb4 <strtof+0xc0>)
 8025f94:	402b      	ands	r3, r5
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	d0c9      	beq.n	8025f2e <strtof+0x3a>
 8025f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8025f9e:	2222      	movs	r2, #34	@ 0x22
 8025fa0:	601a      	str	r2, [r3, #0]
 8025fa2:	e7c4      	b.n	8025f2e <strtof+0x3a>
 8025fa4:	2000039c 	.word	0x2000039c
 8025fa8:	080307ff 	.word	0x080307ff
 8025fac:	7f7fffff 	.word	0x7f7fffff
 8025fb0:	7fefffff 	.word	0x7fefffff
 8025fb4:	7ff00000 	.word	0x7ff00000
 8025fb8:	20000508 	.word	0x20000508

08025fbc <_strtol_l.constprop.0>:
 8025fbc:	2b24      	cmp	r3, #36	@ 0x24
 8025fbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025fc2:	4686      	mov	lr, r0
 8025fc4:	4690      	mov	r8, r2
 8025fc6:	d801      	bhi.n	8025fcc <_strtol_l.constprop.0+0x10>
 8025fc8:	2b01      	cmp	r3, #1
 8025fca:	d106      	bne.n	8025fda <_strtol_l.constprop.0+0x1e>
 8025fcc:	f001 ff22 	bl	8027e14 <__errno>
 8025fd0:	2316      	movs	r3, #22
 8025fd2:	6003      	str	r3, [r0, #0]
 8025fd4:	2000      	movs	r0, #0
 8025fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025fda:	460d      	mov	r5, r1
 8025fdc:	4833      	ldr	r0, [pc, #204]	@ (80260ac <_strtol_l.constprop.0+0xf0>)
 8025fde:	462a      	mov	r2, r5
 8025fe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025fe4:	5d06      	ldrb	r6, [r0, r4]
 8025fe6:	f016 0608 	ands.w	r6, r6, #8
 8025fea:	d1f8      	bne.n	8025fde <_strtol_l.constprop.0+0x22>
 8025fec:	2c2d      	cmp	r4, #45	@ 0x2d
 8025fee:	d12d      	bne.n	802604c <_strtol_l.constprop.0+0x90>
 8025ff0:	782c      	ldrb	r4, [r5, #0]
 8025ff2:	2601      	movs	r6, #1
 8025ff4:	1c95      	adds	r5, r2, #2
 8025ff6:	f033 0210 	bics.w	r2, r3, #16
 8025ffa:	d109      	bne.n	8026010 <_strtol_l.constprop.0+0x54>
 8025ffc:	2c30      	cmp	r4, #48	@ 0x30
 8025ffe:	d12a      	bne.n	8026056 <_strtol_l.constprop.0+0x9a>
 8026000:	782a      	ldrb	r2, [r5, #0]
 8026002:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8026006:	2a58      	cmp	r2, #88	@ 0x58
 8026008:	d125      	bne.n	8026056 <_strtol_l.constprop.0+0x9a>
 802600a:	786c      	ldrb	r4, [r5, #1]
 802600c:	2310      	movs	r3, #16
 802600e:	3502      	adds	r5, #2
 8026010:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8026014:	2200      	movs	r2, #0
 8026016:	f10c 3cff 	add.w	ip, ip, #4294967295
 802601a:	4610      	mov	r0, r2
 802601c:	fbbc f9f3 	udiv	r9, ip, r3
 8026020:	fb03 ca19 	mls	sl, r3, r9, ip
 8026024:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8026028:	2f09      	cmp	r7, #9
 802602a:	d81b      	bhi.n	8026064 <_strtol_l.constprop.0+0xa8>
 802602c:	463c      	mov	r4, r7
 802602e:	42a3      	cmp	r3, r4
 8026030:	dd27      	ble.n	8026082 <_strtol_l.constprop.0+0xc6>
 8026032:	1c57      	adds	r7, r2, #1
 8026034:	d007      	beq.n	8026046 <_strtol_l.constprop.0+0x8a>
 8026036:	4581      	cmp	r9, r0
 8026038:	d320      	bcc.n	802607c <_strtol_l.constprop.0+0xc0>
 802603a:	d101      	bne.n	8026040 <_strtol_l.constprop.0+0x84>
 802603c:	45a2      	cmp	sl, r4
 802603e:	db1d      	blt.n	802607c <_strtol_l.constprop.0+0xc0>
 8026040:	fb00 4003 	mla	r0, r0, r3, r4
 8026044:	2201      	movs	r2, #1
 8026046:	f815 4b01 	ldrb.w	r4, [r5], #1
 802604a:	e7eb      	b.n	8026024 <_strtol_l.constprop.0+0x68>
 802604c:	2c2b      	cmp	r4, #43	@ 0x2b
 802604e:	bf04      	itt	eq
 8026050:	782c      	ldrbeq	r4, [r5, #0]
 8026052:	1c95      	addeq	r5, r2, #2
 8026054:	e7cf      	b.n	8025ff6 <_strtol_l.constprop.0+0x3a>
 8026056:	2b00      	cmp	r3, #0
 8026058:	d1da      	bne.n	8026010 <_strtol_l.constprop.0+0x54>
 802605a:	2c30      	cmp	r4, #48	@ 0x30
 802605c:	bf0c      	ite	eq
 802605e:	2308      	moveq	r3, #8
 8026060:	230a      	movne	r3, #10
 8026062:	e7d5      	b.n	8026010 <_strtol_l.constprop.0+0x54>
 8026064:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8026068:	2f19      	cmp	r7, #25
 802606a:	d801      	bhi.n	8026070 <_strtol_l.constprop.0+0xb4>
 802606c:	3c37      	subs	r4, #55	@ 0x37
 802606e:	e7de      	b.n	802602e <_strtol_l.constprop.0+0x72>
 8026070:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8026074:	2f19      	cmp	r7, #25
 8026076:	d804      	bhi.n	8026082 <_strtol_l.constprop.0+0xc6>
 8026078:	3c57      	subs	r4, #87	@ 0x57
 802607a:	e7d8      	b.n	802602e <_strtol_l.constprop.0+0x72>
 802607c:	f04f 32ff 	mov.w	r2, #4294967295
 8026080:	e7e1      	b.n	8026046 <_strtol_l.constprop.0+0x8a>
 8026082:	1c53      	adds	r3, r2, #1
 8026084:	d108      	bne.n	8026098 <_strtol_l.constprop.0+0xdc>
 8026086:	2322      	movs	r3, #34	@ 0x22
 8026088:	4660      	mov	r0, ip
 802608a:	f8ce 3000 	str.w	r3, [lr]
 802608e:	f1b8 0f00 	cmp.w	r8, #0
 8026092:	d0a0      	beq.n	8025fd6 <_strtol_l.constprop.0+0x1a>
 8026094:	1e69      	subs	r1, r5, #1
 8026096:	e006      	b.n	80260a6 <_strtol_l.constprop.0+0xea>
 8026098:	b106      	cbz	r6, 802609c <_strtol_l.constprop.0+0xe0>
 802609a:	4240      	negs	r0, r0
 802609c:	f1b8 0f00 	cmp.w	r8, #0
 80260a0:	d099      	beq.n	8025fd6 <_strtol_l.constprop.0+0x1a>
 80260a2:	2a00      	cmp	r2, #0
 80260a4:	d1f6      	bne.n	8026094 <_strtol_l.constprop.0+0xd8>
 80260a6:	f8c8 1000 	str.w	r1, [r8]
 80260aa:	e794      	b.n	8025fd6 <_strtol_l.constprop.0+0x1a>
 80260ac:	0803031e 	.word	0x0803031e

080260b0 <_strtol_r>:
 80260b0:	f7ff bf84 	b.w	8025fbc <_strtol_l.constprop.0>

080260b4 <strtol>:
 80260b4:	4613      	mov	r3, r2
 80260b6:	460a      	mov	r2, r1
 80260b8:	4601      	mov	r1, r0
 80260ba:	4802      	ldr	r0, [pc, #8]	@ (80260c4 <strtol+0x10>)
 80260bc:	6800      	ldr	r0, [r0, #0]
 80260be:	f7ff bf7d 	b.w	8025fbc <_strtol_l.constprop.0>
 80260c2:	bf00      	nop
 80260c4:	20000508 	.word	0x20000508

080260c8 <__utoa>:
 80260c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80260ca:	4c1f      	ldr	r4, [pc, #124]	@ (8026148 <__utoa+0x80>)
 80260cc:	b08b      	sub	sp, #44	@ 0x2c
 80260ce:	4605      	mov	r5, r0
 80260d0:	460b      	mov	r3, r1
 80260d2:	466e      	mov	r6, sp
 80260d4:	f104 0c20 	add.w	ip, r4, #32
 80260d8:	6820      	ldr	r0, [r4, #0]
 80260da:	3408      	adds	r4, #8
 80260dc:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80260e0:	4637      	mov	r7, r6
 80260e2:	4564      	cmp	r4, ip
 80260e4:	c703      	stmia	r7!, {r0, r1}
 80260e6:	463e      	mov	r6, r7
 80260e8:	d1f6      	bne.n	80260d8 <__utoa+0x10>
 80260ea:	7921      	ldrb	r1, [r4, #4]
 80260ec:	6820      	ldr	r0, [r4, #0]
 80260ee:	7139      	strb	r1, [r7, #4]
 80260f0:	1e91      	subs	r1, r2, #2
 80260f2:	6038      	str	r0, [r7, #0]
 80260f4:	2922      	cmp	r1, #34	@ 0x22
 80260f6:	f04f 0100 	mov.w	r1, #0
 80260fa:	d904      	bls.n	8026106 <__utoa+0x3e>
 80260fc:	7019      	strb	r1, [r3, #0]
 80260fe:	460b      	mov	r3, r1
 8026100:	4618      	mov	r0, r3
 8026102:	b00b      	add	sp, #44	@ 0x2c
 8026104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026106:	1e58      	subs	r0, r3, #1
 8026108:	4684      	mov	ip, r0
 802610a:	460c      	mov	r4, r1
 802610c:	3101      	adds	r1, #1
 802610e:	fbb5 f7f2 	udiv	r7, r5, r2
 8026112:	fb02 5617 	mls	r6, r2, r7, r5
 8026116:	3628      	adds	r6, #40	@ 0x28
 8026118:	446e      	add	r6, sp
 802611a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 802611e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8026122:	462e      	mov	r6, r5
 8026124:	463d      	mov	r5, r7
 8026126:	42b2      	cmp	r2, r6
 8026128:	d9ef      	bls.n	802610a <__utoa+0x42>
 802612a:	2200      	movs	r2, #0
 802612c:	545a      	strb	r2, [r3, r1]
 802612e:	1919      	adds	r1, r3, r4
 8026130:	1aa5      	subs	r5, r4, r2
 8026132:	42aa      	cmp	r2, r5
 8026134:	dae4      	bge.n	8026100 <__utoa+0x38>
 8026136:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 802613a:	3201      	adds	r2, #1
 802613c:	780e      	ldrb	r6, [r1, #0]
 802613e:	7006      	strb	r6, [r0, #0]
 8026140:	f801 5901 	strb.w	r5, [r1], #-1
 8026144:	e7f4      	b.n	8026130 <__utoa+0x68>
 8026146:	bf00      	nop
 8026148:	080302f8 	.word	0x080302f8

0802614c <utoa>:
 802614c:	f7ff bfbc 	b.w	80260c8 <__utoa>

08026150 <__cvt>:
 8026150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026154:	ec57 6b10 	vmov	r6, r7, d0
 8026158:	2f00      	cmp	r7, #0
 802615a:	460c      	mov	r4, r1
 802615c:	4619      	mov	r1, r3
 802615e:	463b      	mov	r3, r7
 8026160:	bfb4      	ite	lt
 8026162:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8026166:	2300      	movge	r3, #0
 8026168:	4691      	mov	r9, r2
 802616a:	bfbf      	itttt	lt
 802616c:	4632      	movlt	r2, r6
 802616e:	461f      	movlt	r7, r3
 8026170:	232d      	movlt	r3, #45	@ 0x2d
 8026172:	4616      	movlt	r6, r2
 8026174:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8026178:	700b      	strb	r3, [r1, #0]
 802617a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802617c:	f023 0820 	bic.w	r8, r3, #32
 8026180:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8026184:	d005      	beq.n	8026192 <__cvt+0x42>
 8026186:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 802618a:	d100      	bne.n	802618e <__cvt+0x3e>
 802618c:	3401      	adds	r4, #1
 802618e:	2102      	movs	r1, #2
 8026190:	e000      	b.n	8026194 <__cvt+0x44>
 8026192:	2103      	movs	r1, #3
 8026194:	ab03      	add	r3, sp, #12
 8026196:	4622      	mov	r2, r4
 8026198:	9301      	str	r3, [sp, #4]
 802619a:	ab02      	add	r3, sp, #8
 802619c:	ec47 6b10 	vmov	d0, r6, r7
 80261a0:	9300      	str	r3, [sp, #0]
 80261a2:	4653      	mov	r3, sl
 80261a4:	f001 ff2c 	bl	8028000 <_dtoa_r>
 80261a8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80261ac:	4605      	mov	r5, r0
 80261ae:	d119      	bne.n	80261e4 <__cvt+0x94>
 80261b0:	f019 0f01 	tst.w	r9, #1
 80261b4:	d00e      	beq.n	80261d4 <__cvt+0x84>
 80261b6:	eb00 0904 	add.w	r9, r0, r4
 80261ba:	2200      	movs	r2, #0
 80261bc:	2300      	movs	r3, #0
 80261be:	4630      	mov	r0, r6
 80261c0:	4639      	mov	r1, r7
 80261c2:	f7da fc8f 	bl	8000ae4 <__aeabi_dcmpeq>
 80261c6:	b108      	cbz	r0, 80261cc <__cvt+0x7c>
 80261c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80261cc:	2230      	movs	r2, #48	@ 0x30
 80261ce:	9b03      	ldr	r3, [sp, #12]
 80261d0:	454b      	cmp	r3, r9
 80261d2:	d31e      	bcc.n	8026212 <__cvt+0xc2>
 80261d4:	9b03      	ldr	r3, [sp, #12]
 80261d6:	4628      	mov	r0, r5
 80261d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80261da:	1b5b      	subs	r3, r3, r5
 80261dc:	6013      	str	r3, [r2, #0]
 80261de:	b004      	add	sp, #16
 80261e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80261e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80261e8:	eb00 0904 	add.w	r9, r0, r4
 80261ec:	d1e5      	bne.n	80261ba <__cvt+0x6a>
 80261ee:	7803      	ldrb	r3, [r0, #0]
 80261f0:	2b30      	cmp	r3, #48	@ 0x30
 80261f2:	d10a      	bne.n	802620a <__cvt+0xba>
 80261f4:	2200      	movs	r2, #0
 80261f6:	2300      	movs	r3, #0
 80261f8:	4630      	mov	r0, r6
 80261fa:	4639      	mov	r1, r7
 80261fc:	f7da fc72 	bl	8000ae4 <__aeabi_dcmpeq>
 8026200:	b918      	cbnz	r0, 802620a <__cvt+0xba>
 8026202:	f1c4 0401 	rsb	r4, r4, #1
 8026206:	f8ca 4000 	str.w	r4, [sl]
 802620a:	f8da 3000 	ldr.w	r3, [sl]
 802620e:	4499      	add	r9, r3
 8026210:	e7d3      	b.n	80261ba <__cvt+0x6a>
 8026212:	1c59      	adds	r1, r3, #1
 8026214:	9103      	str	r1, [sp, #12]
 8026216:	701a      	strb	r2, [r3, #0]
 8026218:	e7d9      	b.n	80261ce <__cvt+0x7e>

0802621a <__exponent>:
 802621a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802621c:	2900      	cmp	r1, #0
 802621e:	7002      	strb	r2, [r0, #0]
 8026220:	bfba      	itte	lt
 8026222:	4249      	neglt	r1, r1
 8026224:	232d      	movlt	r3, #45	@ 0x2d
 8026226:	232b      	movge	r3, #43	@ 0x2b
 8026228:	2909      	cmp	r1, #9
 802622a:	7043      	strb	r3, [r0, #1]
 802622c:	dd28      	ble.n	8026280 <__exponent+0x66>
 802622e:	f10d 0307 	add.w	r3, sp, #7
 8026232:	270a      	movs	r7, #10
 8026234:	461d      	mov	r5, r3
 8026236:	461a      	mov	r2, r3
 8026238:	3b01      	subs	r3, #1
 802623a:	fbb1 f6f7 	udiv	r6, r1, r7
 802623e:	fb07 1416 	mls	r4, r7, r6, r1
 8026242:	3430      	adds	r4, #48	@ 0x30
 8026244:	f802 4c01 	strb.w	r4, [r2, #-1]
 8026248:	460c      	mov	r4, r1
 802624a:	4631      	mov	r1, r6
 802624c:	2c63      	cmp	r4, #99	@ 0x63
 802624e:	dcf2      	bgt.n	8026236 <__exponent+0x1c>
 8026250:	3130      	adds	r1, #48	@ 0x30
 8026252:	1e94      	subs	r4, r2, #2
 8026254:	f803 1c01 	strb.w	r1, [r3, #-1]
 8026258:	1c41      	adds	r1, r0, #1
 802625a:	4623      	mov	r3, r4
 802625c:	42ab      	cmp	r3, r5
 802625e:	d30a      	bcc.n	8026276 <__exponent+0x5c>
 8026260:	f10d 0309 	add.w	r3, sp, #9
 8026264:	1a9b      	subs	r3, r3, r2
 8026266:	42ac      	cmp	r4, r5
 8026268:	bf88      	it	hi
 802626a:	2300      	movhi	r3, #0
 802626c:	3302      	adds	r3, #2
 802626e:	4403      	add	r3, r0
 8026270:	1a18      	subs	r0, r3, r0
 8026272:	b003      	add	sp, #12
 8026274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026276:	f813 6b01 	ldrb.w	r6, [r3], #1
 802627a:	f801 6f01 	strb.w	r6, [r1, #1]!
 802627e:	e7ed      	b.n	802625c <__exponent+0x42>
 8026280:	2330      	movs	r3, #48	@ 0x30
 8026282:	3130      	adds	r1, #48	@ 0x30
 8026284:	7083      	strb	r3, [r0, #2]
 8026286:	1d03      	adds	r3, r0, #4
 8026288:	70c1      	strb	r1, [r0, #3]
 802628a:	e7f1      	b.n	8026270 <__exponent+0x56>

0802628c <_printf_float>:
 802628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026290:	b08d      	sub	sp, #52	@ 0x34
 8026292:	460c      	mov	r4, r1
 8026294:	4616      	mov	r6, r2
 8026296:	461f      	mov	r7, r3
 8026298:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 802629c:	4605      	mov	r5, r0
 802629e:	f001 fd6f 	bl	8027d80 <_localeconv_r>
 80262a2:	6803      	ldr	r3, [r0, #0]
 80262a4:	4618      	mov	r0, r3
 80262a6:	9304      	str	r3, [sp, #16]
 80262a8:	f7d9 fff0 	bl	800028c <strlen>
 80262ac:	2300      	movs	r3, #0
 80262ae:	9005      	str	r0, [sp, #20]
 80262b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80262b2:	f8d8 3000 	ldr.w	r3, [r8]
 80262b6:	f894 a018 	ldrb.w	sl, [r4, #24]
 80262ba:	3307      	adds	r3, #7
 80262bc:	f8d4 b000 	ldr.w	fp, [r4]
 80262c0:	f023 0307 	bic.w	r3, r3, #7
 80262c4:	f103 0208 	add.w	r2, r3, #8
 80262c8:	f8c8 2000 	str.w	r2, [r8]
 80262cc:	f04f 32ff 	mov.w	r2, #4294967295
 80262d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80262d4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80262d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80262dc:	9307      	str	r3, [sp, #28]
 80262de:	4b9d      	ldr	r3, [pc, #628]	@ (8026554 <_printf_float+0x2c8>)
 80262e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80262e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80262e8:	f7da fc2e 	bl	8000b48 <__aeabi_dcmpun>
 80262ec:	bb70      	cbnz	r0, 802634c <_printf_float+0xc0>
 80262ee:	f04f 32ff 	mov.w	r2, #4294967295
 80262f2:	4b98      	ldr	r3, [pc, #608]	@ (8026554 <_printf_float+0x2c8>)
 80262f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80262f8:	f7da fc08 	bl	8000b0c <__aeabi_dcmple>
 80262fc:	bb30      	cbnz	r0, 802634c <_printf_float+0xc0>
 80262fe:	2200      	movs	r2, #0
 8026300:	2300      	movs	r3, #0
 8026302:	4640      	mov	r0, r8
 8026304:	4649      	mov	r1, r9
 8026306:	f7da fbf7 	bl	8000af8 <__aeabi_dcmplt>
 802630a:	b110      	cbz	r0, 8026312 <_printf_float+0x86>
 802630c:	232d      	movs	r3, #45	@ 0x2d
 802630e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026312:	4a91      	ldr	r2, [pc, #580]	@ (8026558 <_printf_float+0x2cc>)
 8026314:	4b91      	ldr	r3, [pc, #580]	@ (802655c <_printf_float+0x2d0>)
 8026316:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802631a:	bf94      	ite	ls
 802631c:	4690      	movls	r8, r2
 802631e:	4698      	movhi	r8, r3
 8026320:	2303      	movs	r3, #3
 8026322:	f04f 0900 	mov.w	r9, #0
 8026326:	6123      	str	r3, [r4, #16]
 8026328:	f02b 0304 	bic.w	r3, fp, #4
 802632c:	6023      	str	r3, [r4, #0]
 802632e:	4633      	mov	r3, r6
 8026330:	aa0b      	add	r2, sp, #44	@ 0x2c
 8026332:	4621      	mov	r1, r4
 8026334:	4628      	mov	r0, r5
 8026336:	9700      	str	r7, [sp, #0]
 8026338:	f000 f9d2 	bl	80266e0 <_printf_common>
 802633c:	3001      	adds	r0, #1
 802633e:	f040 808d 	bne.w	802645c <_printf_float+0x1d0>
 8026342:	f04f 30ff 	mov.w	r0, #4294967295
 8026346:	b00d      	add	sp, #52	@ 0x34
 8026348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802634c:	4642      	mov	r2, r8
 802634e:	464b      	mov	r3, r9
 8026350:	4640      	mov	r0, r8
 8026352:	4649      	mov	r1, r9
 8026354:	f7da fbf8 	bl	8000b48 <__aeabi_dcmpun>
 8026358:	b140      	cbz	r0, 802636c <_printf_float+0xe0>
 802635a:	464b      	mov	r3, r9
 802635c:	4a80      	ldr	r2, [pc, #512]	@ (8026560 <_printf_float+0x2d4>)
 802635e:	2b00      	cmp	r3, #0
 8026360:	bfbc      	itt	lt
 8026362:	232d      	movlt	r3, #45	@ 0x2d
 8026364:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8026368:	4b7e      	ldr	r3, [pc, #504]	@ (8026564 <_printf_float+0x2d8>)
 802636a:	e7d4      	b.n	8026316 <_printf_float+0x8a>
 802636c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8026370:	6863      	ldr	r3, [r4, #4]
 8026372:	9206      	str	r2, [sp, #24]
 8026374:	1c5a      	adds	r2, r3, #1
 8026376:	d13b      	bne.n	80263f0 <_printf_float+0x164>
 8026378:	2306      	movs	r3, #6
 802637a:	6063      	str	r3, [r4, #4]
 802637c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8026380:	2300      	movs	r3, #0
 8026382:	4628      	mov	r0, r5
 8026384:	6022      	str	r2, [r4, #0]
 8026386:	9303      	str	r3, [sp, #12]
 8026388:	ab0a      	add	r3, sp, #40	@ 0x28
 802638a:	e9cd a301 	strd	sl, r3, [sp, #4]
 802638e:	ab09      	add	r3, sp, #36	@ 0x24
 8026390:	ec49 8b10 	vmov	d0, r8, r9
 8026394:	9300      	str	r3, [sp, #0]
 8026396:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 802639a:	6861      	ldr	r1, [r4, #4]
 802639c:	f7ff fed8 	bl	8026150 <__cvt>
 80263a0:	9b06      	ldr	r3, [sp, #24]
 80263a2:	4680      	mov	r8, r0
 80263a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80263a6:	2b47      	cmp	r3, #71	@ 0x47
 80263a8:	d129      	bne.n	80263fe <_printf_float+0x172>
 80263aa:	1cc8      	adds	r0, r1, #3
 80263ac:	db02      	blt.n	80263b4 <_printf_float+0x128>
 80263ae:	6863      	ldr	r3, [r4, #4]
 80263b0:	4299      	cmp	r1, r3
 80263b2:	dd41      	ble.n	8026438 <_printf_float+0x1ac>
 80263b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80263b8:	fa5f fa8a 	uxtb.w	sl, sl
 80263bc:	3901      	subs	r1, #1
 80263be:	4652      	mov	r2, sl
 80263c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80263c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80263c6:	f7ff ff28 	bl	802621a <__exponent>
 80263ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80263cc:	4681      	mov	r9, r0
 80263ce:	1813      	adds	r3, r2, r0
 80263d0:	2a01      	cmp	r2, #1
 80263d2:	6123      	str	r3, [r4, #16]
 80263d4:	dc02      	bgt.n	80263dc <_printf_float+0x150>
 80263d6:	6822      	ldr	r2, [r4, #0]
 80263d8:	07d2      	lsls	r2, r2, #31
 80263da:	d501      	bpl.n	80263e0 <_printf_float+0x154>
 80263dc:	3301      	adds	r3, #1
 80263de:	6123      	str	r3, [r4, #16]
 80263e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80263e4:	2b00      	cmp	r3, #0
 80263e6:	d0a2      	beq.n	802632e <_printf_float+0xa2>
 80263e8:	232d      	movs	r3, #45	@ 0x2d
 80263ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80263ee:	e79e      	b.n	802632e <_printf_float+0xa2>
 80263f0:	9a06      	ldr	r2, [sp, #24]
 80263f2:	2a47      	cmp	r2, #71	@ 0x47
 80263f4:	d1c2      	bne.n	802637c <_printf_float+0xf0>
 80263f6:	2b00      	cmp	r3, #0
 80263f8:	d1c0      	bne.n	802637c <_printf_float+0xf0>
 80263fa:	2301      	movs	r3, #1
 80263fc:	e7bd      	b.n	802637a <_printf_float+0xee>
 80263fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8026402:	d9db      	bls.n	80263bc <_printf_float+0x130>
 8026404:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8026408:	d118      	bne.n	802643c <_printf_float+0x1b0>
 802640a:	2900      	cmp	r1, #0
 802640c:	6863      	ldr	r3, [r4, #4]
 802640e:	dd0b      	ble.n	8026428 <_printf_float+0x19c>
 8026410:	6121      	str	r1, [r4, #16]
 8026412:	b913      	cbnz	r3, 802641a <_printf_float+0x18e>
 8026414:	6822      	ldr	r2, [r4, #0]
 8026416:	07d0      	lsls	r0, r2, #31
 8026418:	d502      	bpl.n	8026420 <_printf_float+0x194>
 802641a:	3301      	adds	r3, #1
 802641c:	440b      	add	r3, r1
 802641e:	6123      	str	r3, [r4, #16]
 8026420:	f04f 0900 	mov.w	r9, #0
 8026424:	65a1      	str	r1, [r4, #88]	@ 0x58
 8026426:	e7db      	b.n	80263e0 <_printf_float+0x154>
 8026428:	b913      	cbnz	r3, 8026430 <_printf_float+0x1a4>
 802642a:	6822      	ldr	r2, [r4, #0]
 802642c:	07d2      	lsls	r2, r2, #31
 802642e:	d501      	bpl.n	8026434 <_printf_float+0x1a8>
 8026430:	3302      	adds	r3, #2
 8026432:	e7f4      	b.n	802641e <_printf_float+0x192>
 8026434:	2301      	movs	r3, #1
 8026436:	e7f2      	b.n	802641e <_printf_float+0x192>
 8026438:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 802643c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802643e:	4299      	cmp	r1, r3
 8026440:	db05      	blt.n	802644e <_printf_float+0x1c2>
 8026442:	6823      	ldr	r3, [r4, #0]
 8026444:	6121      	str	r1, [r4, #16]
 8026446:	07d8      	lsls	r0, r3, #31
 8026448:	d5ea      	bpl.n	8026420 <_printf_float+0x194>
 802644a:	1c4b      	adds	r3, r1, #1
 802644c:	e7e7      	b.n	802641e <_printf_float+0x192>
 802644e:	2900      	cmp	r1, #0
 8026450:	bfd4      	ite	le
 8026452:	f1c1 0202 	rsble	r2, r1, #2
 8026456:	2201      	movgt	r2, #1
 8026458:	4413      	add	r3, r2
 802645a:	e7e0      	b.n	802641e <_printf_float+0x192>
 802645c:	6823      	ldr	r3, [r4, #0]
 802645e:	055a      	lsls	r2, r3, #21
 8026460:	d407      	bmi.n	8026472 <_printf_float+0x1e6>
 8026462:	6923      	ldr	r3, [r4, #16]
 8026464:	4642      	mov	r2, r8
 8026466:	4631      	mov	r1, r6
 8026468:	4628      	mov	r0, r5
 802646a:	47b8      	blx	r7
 802646c:	3001      	adds	r0, #1
 802646e:	d12b      	bne.n	80264c8 <_printf_float+0x23c>
 8026470:	e767      	b.n	8026342 <_printf_float+0xb6>
 8026472:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8026476:	f240 80dd 	bls.w	8026634 <_printf_float+0x3a8>
 802647a:	2200      	movs	r2, #0
 802647c:	2300      	movs	r3, #0
 802647e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8026482:	f7da fb2f 	bl	8000ae4 <__aeabi_dcmpeq>
 8026486:	2800      	cmp	r0, #0
 8026488:	d033      	beq.n	80264f2 <_printf_float+0x266>
 802648a:	2301      	movs	r3, #1
 802648c:	4a36      	ldr	r2, [pc, #216]	@ (8026568 <_printf_float+0x2dc>)
 802648e:	4631      	mov	r1, r6
 8026490:	4628      	mov	r0, r5
 8026492:	47b8      	blx	r7
 8026494:	3001      	adds	r0, #1
 8026496:	f43f af54 	beq.w	8026342 <_printf_float+0xb6>
 802649a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 802649e:	4543      	cmp	r3, r8
 80264a0:	db02      	blt.n	80264a8 <_printf_float+0x21c>
 80264a2:	6823      	ldr	r3, [r4, #0]
 80264a4:	07d8      	lsls	r0, r3, #31
 80264a6:	d50f      	bpl.n	80264c8 <_printf_float+0x23c>
 80264a8:	4631      	mov	r1, r6
 80264aa:	4628      	mov	r0, r5
 80264ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80264b0:	47b8      	blx	r7
 80264b2:	3001      	adds	r0, #1
 80264b4:	f43f af45 	beq.w	8026342 <_printf_float+0xb6>
 80264b8:	f04f 0900 	mov.w	r9, #0
 80264bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80264c0:	f104 0a1a 	add.w	sl, r4, #26
 80264c4:	45c8      	cmp	r8, r9
 80264c6:	dc09      	bgt.n	80264dc <_printf_float+0x250>
 80264c8:	6823      	ldr	r3, [r4, #0]
 80264ca:	079b      	lsls	r3, r3, #30
 80264cc:	f100 8103 	bmi.w	80266d6 <_printf_float+0x44a>
 80264d0:	68e0      	ldr	r0, [r4, #12]
 80264d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80264d4:	4298      	cmp	r0, r3
 80264d6:	bfb8      	it	lt
 80264d8:	4618      	movlt	r0, r3
 80264da:	e734      	b.n	8026346 <_printf_float+0xba>
 80264dc:	2301      	movs	r3, #1
 80264de:	4652      	mov	r2, sl
 80264e0:	4631      	mov	r1, r6
 80264e2:	4628      	mov	r0, r5
 80264e4:	47b8      	blx	r7
 80264e6:	3001      	adds	r0, #1
 80264e8:	f43f af2b 	beq.w	8026342 <_printf_float+0xb6>
 80264ec:	f109 0901 	add.w	r9, r9, #1
 80264f0:	e7e8      	b.n	80264c4 <_printf_float+0x238>
 80264f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264f4:	2b00      	cmp	r3, #0
 80264f6:	dc39      	bgt.n	802656c <_printf_float+0x2e0>
 80264f8:	2301      	movs	r3, #1
 80264fa:	4a1b      	ldr	r2, [pc, #108]	@ (8026568 <_printf_float+0x2dc>)
 80264fc:	4631      	mov	r1, r6
 80264fe:	4628      	mov	r0, r5
 8026500:	47b8      	blx	r7
 8026502:	3001      	adds	r0, #1
 8026504:	f43f af1d 	beq.w	8026342 <_printf_float+0xb6>
 8026508:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 802650c:	ea59 0303 	orrs.w	r3, r9, r3
 8026510:	d102      	bne.n	8026518 <_printf_float+0x28c>
 8026512:	6823      	ldr	r3, [r4, #0]
 8026514:	07d9      	lsls	r1, r3, #31
 8026516:	d5d7      	bpl.n	80264c8 <_printf_float+0x23c>
 8026518:	4631      	mov	r1, r6
 802651a:	4628      	mov	r0, r5
 802651c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026520:	47b8      	blx	r7
 8026522:	3001      	adds	r0, #1
 8026524:	f43f af0d 	beq.w	8026342 <_printf_float+0xb6>
 8026528:	f04f 0a00 	mov.w	sl, #0
 802652c:	f104 0b1a 	add.w	fp, r4, #26
 8026530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026532:	425b      	negs	r3, r3
 8026534:	4553      	cmp	r3, sl
 8026536:	dc01      	bgt.n	802653c <_printf_float+0x2b0>
 8026538:	464b      	mov	r3, r9
 802653a:	e793      	b.n	8026464 <_printf_float+0x1d8>
 802653c:	2301      	movs	r3, #1
 802653e:	465a      	mov	r2, fp
 8026540:	4631      	mov	r1, r6
 8026542:	4628      	mov	r0, r5
 8026544:	47b8      	blx	r7
 8026546:	3001      	adds	r0, #1
 8026548:	f43f aefb 	beq.w	8026342 <_printf_float+0xb6>
 802654c:	f10a 0a01 	add.w	sl, sl, #1
 8026550:	e7ee      	b.n	8026530 <_printf_float+0x2a4>
 8026552:	bf00      	nop
 8026554:	7fefffff 	.word	0x7fefffff
 8026558:	0803041e 	.word	0x0803041e
 802655c:	08030422 	.word	0x08030422
 8026560:	08030426 	.word	0x08030426
 8026564:	0803042a 	.word	0x0803042a
 8026568:	08030816 	.word	0x08030816
 802656c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802656e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026572:	4553      	cmp	r3, sl
 8026574:	bfa8      	it	ge
 8026576:	4653      	movge	r3, sl
 8026578:	2b00      	cmp	r3, #0
 802657a:	4699      	mov	r9, r3
 802657c:	dc36      	bgt.n	80265ec <_printf_float+0x360>
 802657e:	f04f 0b00 	mov.w	fp, #0
 8026582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026586:	f104 021a 	add.w	r2, r4, #26
 802658a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802658c:	9306      	str	r3, [sp, #24]
 802658e:	eba3 0309 	sub.w	r3, r3, r9
 8026592:	455b      	cmp	r3, fp
 8026594:	dc31      	bgt.n	80265fa <_printf_float+0x36e>
 8026596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026598:	459a      	cmp	sl, r3
 802659a:	dc3a      	bgt.n	8026612 <_printf_float+0x386>
 802659c:	6823      	ldr	r3, [r4, #0]
 802659e:	07da      	lsls	r2, r3, #31
 80265a0:	d437      	bmi.n	8026612 <_printf_float+0x386>
 80265a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265a4:	ebaa 0903 	sub.w	r9, sl, r3
 80265a8:	9b06      	ldr	r3, [sp, #24]
 80265aa:	ebaa 0303 	sub.w	r3, sl, r3
 80265ae:	4599      	cmp	r9, r3
 80265b0:	bfa8      	it	ge
 80265b2:	4699      	movge	r9, r3
 80265b4:	f1b9 0f00 	cmp.w	r9, #0
 80265b8:	dc33      	bgt.n	8026622 <_printf_float+0x396>
 80265ba:	f04f 0800 	mov.w	r8, #0
 80265be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80265c2:	f104 0b1a 	add.w	fp, r4, #26
 80265c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80265c8:	ebaa 0303 	sub.w	r3, sl, r3
 80265cc:	eba3 0309 	sub.w	r3, r3, r9
 80265d0:	4543      	cmp	r3, r8
 80265d2:	f77f af79 	ble.w	80264c8 <_printf_float+0x23c>
 80265d6:	2301      	movs	r3, #1
 80265d8:	465a      	mov	r2, fp
 80265da:	4631      	mov	r1, r6
 80265dc:	4628      	mov	r0, r5
 80265de:	47b8      	blx	r7
 80265e0:	3001      	adds	r0, #1
 80265e2:	f43f aeae 	beq.w	8026342 <_printf_float+0xb6>
 80265e6:	f108 0801 	add.w	r8, r8, #1
 80265ea:	e7ec      	b.n	80265c6 <_printf_float+0x33a>
 80265ec:	4642      	mov	r2, r8
 80265ee:	4631      	mov	r1, r6
 80265f0:	4628      	mov	r0, r5
 80265f2:	47b8      	blx	r7
 80265f4:	3001      	adds	r0, #1
 80265f6:	d1c2      	bne.n	802657e <_printf_float+0x2f2>
 80265f8:	e6a3      	b.n	8026342 <_printf_float+0xb6>
 80265fa:	2301      	movs	r3, #1
 80265fc:	4631      	mov	r1, r6
 80265fe:	4628      	mov	r0, r5
 8026600:	9206      	str	r2, [sp, #24]
 8026602:	47b8      	blx	r7
 8026604:	3001      	adds	r0, #1
 8026606:	f43f ae9c 	beq.w	8026342 <_printf_float+0xb6>
 802660a:	f10b 0b01 	add.w	fp, fp, #1
 802660e:	9a06      	ldr	r2, [sp, #24]
 8026610:	e7bb      	b.n	802658a <_printf_float+0x2fe>
 8026612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026616:	4631      	mov	r1, r6
 8026618:	4628      	mov	r0, r5
 802661a:	47b8      	blx	r7
 802661c:	3001      	adds	r0, #1
 802661e:	d1c0      	bne.n	80265a2 <_printf_float+0x316>
 8026620:	e68f      	b.n	8026342 <_printf_float+0xb6>
 8026622:	9a06      	ldr	r2, [sp, #24]
 8026624:	464b      	mov	r3, r9
 8026626:	4631      	mov	r1, r6
 8026628:	4628      	mov	r0, r5
 802662a:	4442      	add	r2, r8
 802662c:	47b8      	blx	r7
 802662e:	3001      	adds	r0, #1
 8026630:	d1c3      	bne.n	80265ba <_printf_float+0x32e>
 8026632:	e686      	b.n	8026342 <_printf_float+0xb6>
 8026634:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8026638:	f1ba 0f01 	cmp.w	sl, #1
 802663c:	dc01      	bgt.n	8026642 <_printf_float+0x3b6>
 802663e:	07db      	lsls	r3, r3, #31
 8026640:	d536      	bpl.n	80266b0 <_printf_float+0x424>
 8026642:	2301      	movs	r3, #1
 8026644:	4642      	mov	r2, r8
 8026646:	4631      	mov	r1, r6
 8026648:	4628      	mov	r0, r5
 802664a:	47b8      	blx	r7
 802664c:	3001      	adds	r0, #1
 802664e:	f43f ae78 	beq.w	8026342 <_printf_float+0xb6>
 8026652:	4631      	mov	r1, r6
 8026654:	4628      	mov	r0, r5
 8026656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802665a:	47b8      	blx	r7
 802665c:	3001      	adds	r0, #1
 802665e:	f43f ae70 	beq.w	8026342 <_printf_float+0xb6>
 8026662:	2200      	movs	r2, #0
 8026664:	2300      	movs	r3, #0
 8026666:	f10a 3aff 	add.w	sl, sl, #4294967295
 802666a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802666e:	f7da fa39 	bl	8000ae4 <__aeabi_dcmpeq>
 8026672:	b9c0      	cbnz	r0, 80266a6 <_printf_float+0x41a>
 8026674:	4653      	mov	r3, sl
 8026676:	f108 0201 	add.w	r2, r8, #1
 802667a:	4631      	mov	r1, r6
 802667c:	4628      	mov	r0, r5
 802667e:	47b8      	blx	r7
 8026680:	3001      	adds	r0, #1
 8026682:	d10c      	bne.n	802669e <_printf_float+0x412>
 8026684:	e65d      	b.n	8026342 <_printf_float+0xb6>
 8026686:	2301      	movs	r3, #1
 8026688:	465a      	mov	r2, fp
 802668a:	4631      	mov	r1, r6
 802668c:	4628      	mov	r0, r5
 802668e:	47b8      	blx	r7
 8026690:	3001      	adds	r0, #1
 8026692:	f43f ae56 	beq.w	8026342 <_printf_float+0xb6>
 8026696:	f108 0801 	add.w	r8, r8, #1
 802669a:	45d0      	cmp	r8, sl
 802669c:	dbf3      	blt.n	8026686 <_printf_float+0x3fa>
 802669e:	464b      	mov	r3, r9
 80266a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80266a4:	e6df      	b.n	8026466 <_printf_float+0x1da>
 80266a6:	f04f 0800 	mov.w	r8, #0
 80266aa:	f104 0b1a 	add.w	fp, r4, #26
 80266ae:	e7f4      	b.n	802669a <_printf_float+0x40e>
 80266b0:	2301      	movs	r3, #1
 80266b2:	4642      	mov	r2, r8
 80266b4:	e7e1      	b.n	802667a <_printf_float+0x3ee>
 80266b6:	2301      	movs	r3, #1
 80266b8:	464a      	mov	r2, r9
 80266ba:	4631      	mov	r1, r6
 80266bc:	4628      	mov	r0, r5
 80266be:	47b8      	blx	r7
 80266c0:	3001      	adds	r0, #1
 80266c2:	f43f ae3e 	beq.w	8026342 <_printf_float+0xb6>
 80266c6:	f108 0801 	add.w	r8, r8, #1
 80266ca:	68e3      	ldr	r3, [r4, #12]
 80266cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80266ce:	1a5b      	subs	r3, r3, r1
 80266d0:	4543      	cmp	r3, r8
 80266d2:	dcf0      	bgt.n	80266b6 <_printf_float+0x42a>
 80266d4:	e6fc      	b.n	80264d0 <_printf_float+0x244>
 80266d6:	f04f 0800 	mov.w	r8, #0
 80266da:	f104 0919 	add.w	r9, r4, #25
 80266de:	e7f4      	b.n	80266ca <_printf_float+0x43e>

080266e0 <_printf_common>:
 80266e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80266e4:	4616      	mov	r6, r2
 80266e6:	4698      	mov	r8, r3
 80266e8:	688a      	ldr	r2, [r1, #8]
 80266ea:	4607      	mov	r7, r0
 80266ec:	690b      	ldr	r3, [r1, #16]
 80266ee:	460c      	mov	r4, r1
 80266f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80266f4:	4293      	cmp	r3, r2
 80266f6:	bfb8      	it	lt
 80266f8:	4613      	movlt	r3, r2
 80266fa:	6033      	str	r3, [r6, #0]
 80266fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8026700:	b10a      	cbz	r2, 8026706 <_printf_common+0x26>
 8026702:	3301      	adds	r3, #1
 8026704:	6033      	str	r3, [r6, #0]
 8026706:	6823      	ldr	r3, [r4, #0]
 8026708:	0699      	lsls	r1, r3, #26
 802670a:	bf42      	ittt	mi
 802670c:	6833      	ldrmi	r3, [r6, #0]
 802670e:	3302      	addmi	r3, #2
 8026710:	6033      	strmi	r3, [r6, #0]
 8026712:	6825      	ldr	r5, [r4, #0]
 8026714:	f015 0506 	ands.w	r5, r5, #6
 8026718:	d106      	bne.n	8026728 <_printf_common+0x48>
 802671a:	f104 0a19 	add.w	sl, r4, #25
 802671e:	68e3      	ldr	r3, [r4, #12]
 8026720:	6832      	ldr	r2, [r6, #0]
 8026722:	1a9b      	subs	r3, r3, r2
 8026724:	42ab      	cmp	r3, r5
 8026726:	dc2b      	bgt.n	8026780 <_printf_common+0xa0>
 8026728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802672c:	6822      	ldr	r2, [r4, #0]
 802672e:	3b00      	subs	r3, #0
 8026730:	bf18      	it	ne
 8026732:	2301      	movne	r3, #1
 8026734:	0692      	lsls	r2, r2, #26
 8026736:	d430      	bmi.n	802679a <_printf_common+0xba>
 8026738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802673c:	4641      	mov	r1, r8
 802673e:	4638      	mov	r0, r7
 8026740:	47c8      	blx	r9
 8026742:	3001      	adds	r0, #1
 8026744:	d023      	beq.n	802678e <_printf_common+0xae>
 8026746:	6823      	ldr	r3, [r4, #0]
 8026748:	341a      	adds	r4, #26
 802674a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802674e:	f003 0306 	and.w	r3, r3, #6
 8026752:	2b04      	cmp	r3, #4
 8026754:	bf0a      	itet	eq
 8026756:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802675a:	2500      	movne	r5, #0
 802675c:	6833      	ldreq	r3, [r6, #0]
 802675e:	f04f 0600 	mov.w	r6, #0
 8026762:	bf08      	it	eq
 8026764:	1aed      	subeq	r5, r5, r3
 8026766:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802676a:	bf08      	it	eq
 802676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026770:	4293      	cmp	r3, r2
 8026772:	bfc4      	itt	gt
 8026774:	1a9b      	subgt	r3, r3, r2
 8026776:	18ed      	addgt	r5, r5, r3
 8026778:	42b5      	cmp	r5, r6
 802677a:	d11a      	bne.n	80267b2 <_printf_common+0xd2>
 802677c:	2000      	movs	r0, #0
 802677e:	e008      	b.n	8026792 <_printf_common+0xb2>
 8026780:	2301      	movs	r3, #1
 8026782:	4652      	mov	r2, sl
 8026784:	4641      	mov	r1, r8
 8026786:	4638      	mov	r0, r7
 8026788:	47c8      	blx	r9
 802678a:	3001      	adds	r0, #1
 802678c:	d103      	bne.n	8026796 <_printf_common+0xb6>
 802678e:	f04f 30ff 	mov.w	r0, #4294967295
 8026792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026796:	3501      	adds	r5, #1
 8026798:	e7c1      	b.n	802671e <_printf_common+0x3e>
 802679a:	18e1      	adds	r1, r4, r3
 802679c:	1c5a      	adds	r2, r3, #1
 802679e:	2030      	movs	r0, #48	@ 0x30
 80267a0:	3302      	adds	r3, #2
 80267a2:	4422      	add	r2, r4
 80267a4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80267a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80267ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80267b0:	e7c2      	b.n	8026738 <_printf_common+0x58>
 80267b2:	2301      	movs	r3, #1
 80267b4:	4622      	mov	r2, r4
 80267b6:	4641      	mov	r1, r8
 80267b8:	4638      	mov	r0, r7
 80267ba:	47c8      	blx	r9
 80267bc:	3001      	adds	r0, #1
 80267be:	d0e6      	beq.n	802678e <_printf_common+0xae>
 80267c0:	3601      	adds	r6, #1
 80267c2:	e7d9      	b.n	8026778 <_printf_common+0x98>

080267c4 <_printf_i>:
 80267c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80267c8:	7e0f      	ldrb	r7, [r1, #24]
 80267ca:	4691      	mov	r9, r2
 80267cc:	4680      	mov	r8, r0
 80267ce:	460c      	mov	r4, r1
 80267d0:	2f78      	cmp	r7, #120	@ 0x78
 80267d2:	469a      	mov	sl, r3
 80267d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80267d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80267da:	d807      	bhi.n	80267ec <_printf_i+0x28>
 80267dc:	2f62      	cmp	r7, #98	@ 0x62
 80267de:	d80a      	bhi.n	80267f6 <_printf_i+0x32>
 80267e0:	2f00      	cmp	r7, #0
 80267e2:	f000 80d2 	beq.w	802698a <_printf_i+0x1c6>
 80267e6:	2f58      	cmp	r7, #88	@ 0x58
 80267e8:	f000 80b9 	beq.w	802695e <_printf_i+0x19a>
 80267ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80267f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80267f4:	e03a      	b.n	802686c <_printf_i+0xa8>
 80267f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80267fa:	2b15      	cmp	r3, #21
 80267fc:	d8f6      	bhi.n	80267ec <_printf_i+0x28>
 80267fe:	a101      	add	r1, pc, #4	@ (adr r1, 8026804 <_printf_i+0x40>)
 8026800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026804:	0802685d 	.word	0x0802685d
 8026808:	08026871 	.word	0x08026871
 802680c:	080267ed 	.word	0x080267ed
 8026810:	080267ed 	.word	0x080267ed
 8026814:	080267ed 	.word	0x080267ed
 8026818:	080267ed 	.word	0x080267ed
 802681c:	08026871 	.word	0x08026871
 8026820:	080267ed 	.word	0x080267ed
 8026824:	080267ed 	.word	0x080267ed
 8026828:	080267ed 	.word	0x080267ed
 802682c:	080267ed 	.word	0x080267ed
 8026830:	08026971 	.word	0x08026971
 8026834:	0802689b 	.word	0x0802689b
 8026838:	0802692b 	.word	0x0802692b
 802683c:	080267ed 	.word	0x080267ed
 8026840:	080267ed 	.word	0x080267ed
 8026844:	08026993 	.word	0x08026993
 8026848:	080267ed 	.word	0x080267ed
 802684c:	0802689b 	.word	0x0802689b
 8026850:	080267ed 	.word	0x080267ed
 8026854:	080267ed 	.word	0x080267ed
 8026858:	08026933 	.word	0x08026933
 802685c:	6833      	ldr	r3, [r6, #0]
 802685e:	1d1a      	adds	r2, r3, #4
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	6032      	str	r2, [r6, #0]
 8026864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8026868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802686c:	2301      	movs	r3, #1
 802686e:	e09d      	b.n	80269ac <_printf_i+0x1e8>
 8026870:	6833      	ldr	r3, [r6, #0]
 8026872:	6820      	ldr	r0, [r4, #0]
 8026874:	1d19      	adds	r1, r3, #4
 8026876:	6031      	str	r1, [r6, #0]
 8026878:	0606      	lsls	r6, r0, #24
 802687a:	d501      	bpl.n	8026880 <_printf_i+0xbc>
 802687c:	681d      	ldr	r5, [r3, #0]
 802687e:	e003      	b.n	8026888 <_printf_i+0xc4>
 8026880:	0645      	lsls	r5, r0, #25
 8026882:	d5fb      	bpl.n	802687c <_printf_i+0xb8>
 8026884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8026888:	2d00      	cmp	r5, #0
 802688a:	da03      	bge.n	8026894 <_printf_i+0xd0>
 802688c:	232d      	movs	r3, #45	@ 0x2d
 802688e:	426d      	negs	r5, r5
 8026890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8026894:	4859      	ldr	r0, [pc, #356]	@ (80269fc <_printf_i+0x238>)
 8026896:	230a      	movs	r3, #10
 8026898:	e011      	b.n	80268be <_printf_i+0xfa>
 802689a:	6821      	ldr	r1, [r4, #0]
 802689c:	6833      	ldr	r3, [r6, #0]
 802689e:	0608      	lsls	r0, r1, #24
 80268a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80268a4:	d402      	bmi.n	80268ac <_printf_i+0xe8>
 80268a6:	0649      	lsls	r1, r1, #25
 80268a8:	bf48      	it	mi
 80268aa:	b2ad      	uxthmi	r5, r5
 80268ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80268ae:	6033      	str	r3, [r6, #0]
 80268b0:	4852      	ldr	r0, [pc, #328]	@ (80269fc <_printf_i+0x238>)
 80268b2:	bf14      	ite	ne
 80268b4:	230a      	movne	r3, #10
 80268b6:	2308      	moveq	r3, #8
 80268b8:	2100      	movs	r1, #0
 80268ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80268be:	6866      	ldr	r6, [r4, #4]
 80268c0:	2e00      	cmp	r6, #0
 80268c2:	60a6      	str	r6, [r4, #8]
 80268c4:	bfa2      	ittt	ge
 80268c6:	6821      	ldrge	r1, [r4, #0]
 80268c8:	f021 0104 	bicge.w	r1, r1, #4
 80268cc:	6021      	strge	r1, [r4, #0]
 80268ce:	b90d      	cbnz	r5, 80268d4 <_printf_i+0x110>
 80268d0:	2e00      	cmp	r6, #0
 80268d2:	d04b      	beq.n	802696c <_printf_i+0x1a8>
 80268d4:	4616      	mov	r6, r2
 80268d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80268da:	fb03 5711 	mls	r7, r3, r1, r5
 80268de:	5dc7      	ldrb	r7, [r0, r7]
 80268e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80268e4:	462f      	mov	r7, r5
 80268e6:	460d      	mov	r5, r1
 80268e8:	42bb      	cmp	r3, r7
 80268ea:	d9f4      	bls.n	80268d6 <_printf_i+0x112>
 80268ec:	2b08      	cmp	r3, #8
 80268ee:	d10b      	bne.n	8026908 <_printf_i+0x144>
 80268f0:	6823      	ldr	r3, [r4, #0]
 80268f2:	07df      	lsls	r7, r3, #31
 80268f4:	d508      	bpl.n	8026908 <_printf_i+0x144>
 80268f6:	6923      	ldr	r3, [r4, #16]
 80268f8:	6861      	ldr	r1, [r4, #4]
 80268fa:	4299      	cmp	r1, r3
 80268fc:	bfde      	ittt	le
 80268fe:	2330      	movle	r3, #48	@ 0x30
 8026900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8026904:	f106 36ff 	addle.w	r6, r6, #4294967295
 8026908:	1b92      	subs	r2, r2, r6
 802690a:	6122      	str	r2, [r4, #16]
 802690c:	464b      	mov	r3, r9
 802690e:	aa03      	add	r2, sp, #12
 8026910:	4621      	mov	r1, r4
 8026912:	4640      	mov	r0, r8
 8026914:	f8cd a000 	str.w	sl, [sp]
 8026918:	f7ff fee2 	bl	80266e0 <_printf_common>
 802691c:	3001      	adds	r0, #1
 802691e:	d14a      	bne.n	80269b6 <_printf_i+0x1f2>
 8026920:	f04f 30ff 	mov.w	r0, #4294967295
 8026924:	b004      	add	sp, #16
 8026926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802692a:	6823      	ldr	r3, [r4, #0]
 802692c:	f043 0320 	orr.w	r3, r3, #32
 8026930:	6023      	str	r3, [r4, #0]
 8026932:	2778      	movs	r7, #120	@ 0x78
 8026934:	4832      	ldr	r0, [pc, #200]	@ (8026a00 <_printf_i+0x23c>)
 8026936:	6823      	ldr	r3, [r4, #0]
 8026938:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802693c:	061f      	lsls	r7, r3, #24
 802693e:	6831      	ldr	r1, [r6, #0]
 8026940:	f851 5b04 	ldr.w	r5, [r1], #4
 8026944:	d402      	bmi.n	802694c <_printf_i+0x188>
 8026946:	065f      	lsls	r7, r3, #25
 8026948:	bf48      	it	mi
 802694a:	b2ad      	uxthmi	r5, r5
 802694c:	6031      	str	r1, [r6, #0]
 802694e:	07d9      	lsls	r1, r3, #31
 8026950:	bf44      	itt	mi
 8026952:	f043 0320 	orrmi.w	r3, r3, #32
 8026956:	6023      	strmi	r3, [r4, #0]
 8026958:	b11d      	cbz	r5, 8026962 <_printf_i+0x19e>
 802695a:	2310      	movs	r3, #16
 802695c:	e7ac      	b.n	80268b8 <_printf_i+0xf4>
 802695e:	4827      	ldr	r0, [pc, #156]	@ (80269fc <_printf_i+0x238>)
 8026960:	e7e9      	b.n	8026936 <_printf_i+0x172>
 8026962:	6823      	ldr	r3, [r4, #0]
 8026964:	f023 0320 	bic.w	r3, r3, #32
 8026968:	6023      	str	r3, [r4, #0]
 802696a:	e7f6      	b.n	802695a <_printf_i+0x196>
 802696c:	4616      	mov	r6, r2
 802696e:	e7bd      	b.n	80268ec <_printf_i+0x128>
 8026970:	6833      	ldr	r3, [r6, #0]
 8026972:	6825      	ldr	r5, [r4, #0]
 8026974:	1d18      	adds	r0, r3, #4
 8026976:	6961      	ldr	r1, [r4, #20]
 8026978:	6030      	str	r0, [r6, #0]
 802697a:	062e      	lsls	r6, r5, #24
 802697c:	681b      	ldr	r3, [r3, #0]
 802697e:	d501      	bpl.n	8026984 <_printf_i+0x1c0>
 8026980:	6019      	str	r1, [r3, #0]
 8026982:	e002      	b.n	802698a <_printf_i+0x1c6>
 8026984:	0668      	lsls	r0, r5, #25
 8026986:	d5fb      	bpl.n	8026980 <_printf_i+0x1bc>
 8026988:	8019      	strh	r1, [r3, #0]
 802698a:	2300      	movs	r3, #0
 802698c:	4616      	mov	r6, r2
 802698e:	6123      	str	r3, [r4, #16]
 8026990:	e7bc      	b.n	802690c <_printf_i+0x148>
 8026992:	6833      	ldr	r3, [r6, #0]
 8026994:	2100      	movs	r1, #0
 8026996:	1d1a      	adds	r2, r3, #4
 8026998:	6032      	str	r2, [r6, #0]
 802699a:	681e      	ldr	r6, [r3, #0]
 802699c:	6862      	ldr	r2, [r4, #4]
 802699e:	4630      	mov	r0, r6
 80269a0:	f001 fa6f 	bl	8027e82 <memchr>
 80269a4:	b108      	cbz	r0, 80269aa <_printf_i+0x1e6>
 80269a6:	1b80      	subs	r0, r0, r6
 80269a8:	6060      	str	r0, [r4, #4]
 80269aa:	6863      	ldr	r3, [r4, #4]
 80269ac:	6123      	str	r3, [r4, #16]
 80269ae:	2300      	movs	r3, #0
 80269b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80269b4:	e7aa      	b.n	802690c <_printf_i+0x148>
 80269b6:	6923      	ldr	r3, [r4, #16]
 80269b8:	4632      	mov	r2, r6
 80269ba:	4649      	mov	r1, r9
 80269bc:	4640      	mov	r0, r8
 80269be:	47d0      	blx	sl
 80269c0:	3001      	adds	r0, #1
 80269c2:	d0ad      	beq.n	8026920 <_printf_i+0x15c>
 80269c4:	6823      	ldr	r3, [r4, #0]
 80269c6:	079b      	lsls	r3, r3, #30
 80269c8:	d413      	bmi.n	80269f2 <_printf_i+0x22e>
 80269ca:	68e0      	ldr	r0, [r4, #12]
 80269cc:	9b03      	ldr	r3, [sp, #12]
 80269ce:	4298      	cmp	r0, r3
 80269d0:	bfb8      	it	lt
 80269d2:	4618      	movlt	r0, r3
 80269d4:	e7a6      	b.n	8026924 <_printf_i+0x160>
 80269d6:	2301      	movs	r3, #1
 80269d8:	4632      	mov	r2, r6
 80269da:	4649      	mov	r1, r9
 80269dc:	4640      	mov	r0, r8
 80269de:	47d0      	blx	sl
 80269e0:	3001      	adds	r0, #1
 80269e2:	d09d      	beq.n	8026920 <_printf_i+0x15c>
 80269e4:	3501      	adds	r5, #1
 80269e6:	68e3      	ldr	r3, [r4, #12]
 80269e8:	9903      	ldr	r1, [sp, #12]
 80269ea:	1a5b      	subs	r3, r3, r1
 80269ec:	42ab      	cmp	r3, r5
 80269ee:	dcf2      	bgt.n	80269d6 <_printf_i+0x212>
 80269f0:	e7eb      	b.n	80269ca <_printf_i+0x206>
 80269f2:	2500      	movs	r5, #0
 80269f4:	f104 0619 	add.w	r6, r4, #25
 80269f8:	e7f5      	b.n	80269e6 <_printf_i+0x222>
 80269fa:	bf00      	nop
 80269fc:	0803042e 	.word	0x0803042e
 8026a00:	0803043f 	.word	0x0803043f

08026a04 <_scanf_float>:
 8026a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a08:	b087      	sub	sp, #28
 8026a0a:	4617      	mov	r7, r2
 8026a0c:	4680      	mov	r8, r0
 8026a0e:	460c      	mov	r4, r1
 8026a10:	9303      	str	r3, [sp, #12]
 8026a12:	688b      	ldr	r3, [r1, #8]
 8026a14:	1e5a      	subs	r2, r3, #1
 8026a16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8026a1a:	460a      	mov	r2, r1
 8026a1c:	bf89      	itett	hi
 8026a1e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8026a22:	f04f 0b00 	movls.w	fp, #0
 8026a26:	eb03 0b05 	addhi.w	fp, r3, r5
 8026a2a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8026a2e:	f04f 0500 	mov.w	r5, #0
 8026a32:	bf88      	it	hi
 8026a34:	608b      	strhi	r3, [r1, #8]
 8026a36:	680b      	ldr	r3, [r1, #0]
 8026a38:	46aa      	mov	sl, r5
 8026a3a:	46a9      	mov	r9, r5
 8026a3c:	9502      	str	r5, [sp, #8]
 8026a3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8026a42:	f842 3b1c 	str.w	r3, [r2], #28
 8026a46:	4616      	mov	r6, r2
 8026a48:	9201      	str	r2, [sp, #4]
 8026a4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8026a4e:	68a2      	ldr	r2, [r4, #8]
 8026a50:	b152      	cbz	r2, 8026a68 <_scanf_float+0x64>
 8026a52:	683b      	ldr	r3, [r7, #0]
 8026a54:	781b      	ldrb	r3, [r3, #0]
 8026a56:	2b4e      	cmp	r3, #78	@ 0x4e
 8026a58:	d864      	bhi.n	8026b24 <_scanf_float+0x120>
 8026a5a:	2b40      	cmp	r3, #64	@ 0x40
 8026a5c:	d83c      	bhi.n	8026ad8 <_scanf_float+0xd4>
 8026a5e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8026a62:	b2c8      	uxtb	r0, r1
 8026a64:	280e      	cmp	r0, #14
 8026a66:	d93a      	bls.n	8026ade <_scanf_float+0xda>
 8026a68:	f1b9 0f00 	cmp.w	r9, #0
 8026a6c:	d003      	beq.n	8026a76 <_scanf_float+0x72>
 8026a6e:	6823      	ldr	r3, [r4, #0]
 8026a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8026a74:	6023      	str	r3, [r4, #0]
 8026a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026a7a:	f1ba 0f01 	cmp.w	sl, #1
 8026a7e:	f200 8117 	bhi.w	8026cb0 <_scanf_float+0x2ac>
 8026a82:	9b01      	ldr	r3, [sp, #4]
 8026a84:	429e      	cmp	r6, r3
 8026a86:	f200 8108 	bhi.w	8026c9a <_scanf_float+0x296>
 8026a8a:	2001      	movs	r0, #1
 8026a8c:	b007      	add	sp, #28
 8026a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a92:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8026a96:	2a0d      	cmp	r2, #13
 8026a98:	d8e6      	bhi.n	8026a68 <_scanf_float+0x64>
 8026a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8026aa0 <_scanf_float+0x9c>)
 8026a9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8026aa0:	08026be7 	.word	0x08026be7
 8026aa4:	08026a69 	.word	0x08026a69
 8026aa8:	08026a69 	.word	0x08026a69
 8026aac:	08026a69 	.word	0x08026a69
 8026ab0:	08026c47 	.word	0x08026c47
 8026ab4:	08026c1f 	.word	0x08026c1f
 8026ab8:	08026a69 	.word	0x08026a69
 8026abc:	08026a69 	.word	0x08026a69
 8026ac0:	08026bf5 	.word	0x08026bf5
 8026ac4:	08026a69 	.word	0x08026a69
 8026ac8:	08026a69 	.word	0x08026a69
 8026acc:	08026a69 	.word	0x08026a69
 8026ad0:	08026a69 	.word	0x08026a69
 8026ad4:	08026bad 	.word	0x08026bad
 8026ad8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8026adc:	e7db      	b.n	8026a96 <_scanf_float+0x92>
 8026ade:	290e      	cmp	r1, #14
 8026ae0:	d8c2      	bhi.n	8026a68 <_scanf_float+0x64>
 8026ae2:	a001      	add	r0, pc, #4	@ (adr r0, 8026ae8 <_scanf_float+0xe4>)
 8026ae4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8026ae8:	08026b9d 	.word	0x08026b9d
 8026aec:	08026a69 	.word	0x08026a69
 8026af0:	08026b9d 	.word	0x08026b9d
 8026af4:	08026c33 	.word	0x08026c33
 8026af8:	08026a69 	.word	0x08026a69
 8026afc:	08026b45 	.word	0x08026b45
 8026b00:	08026b83 	.word	0x08026b83
 8026b04:	08026b83 	.word	0x08026b83
 8026b08:	08026b83 	.word	0x08026b83
 8026b0c:	08026b83 	.word	0x08026b83
 8026b10:	08026b83 	.word	0x08026b83
 8026b14:	08026b83 	.word	0x08026b83
 8026b18:	08026b83 	.word	0x08026b83
 8026b1c:	08026b83 	.word	0x08026b83
 8026b20:	08026b83 	.word	0x08026b83
 8026b24:	2b6e      	cmp	r3, #110	@ 0x6e
 8026b26:	d809      	bhi.n	8026b3c <_scanf_float+0x138>
 8026b28:	2b60      	cmp	r3, #96	@ 0x60
 8026b2a:	d8b2      	bhi.n	8026a92 <_scanf_float+0x8e>
 8026b2c:	2b54      	cmp	r3, #84	@ 0x54
 8026b2e:	d07b      	beq.n	8026c28 <_scanf_float+0x224>
 8026b30:	2b59      	cmp	r3, #89	@ 0x59
 8026b32:	d199      	bne.n	8026a68 <_scanf_float+0x64>
 8026b34:	2d07      	cmp	r5, #7
 8026b36:	d197      	bne.n	8026a68 <_scanf_float+0x64>
 8026b38:	2508      	movs	r5, #8
 8026b3a:	e02c      	b.n	8026b96 <_scanf_float+0x192>
 8026b3c:	2b74      	cmp	r3, #116	@ 0x74
 8026b3e:	d073      	beq.n	8026c28 <_scanf_float+0x224>
 8026b40:	2b79      	cmp	r3, #121	@ 0x79
 8026b42:	e7f6      	b.n	8026b32 <_scanf_float+0x12e>
 8026b44:	6821      	ldr	r1, [r4, #0]
 8026b46:	05c8      	lsls	r0, r1, #23
 8026b48:	d51b      	bpl.n	8026b82 <_scanf_float+0x17e>
 8026b4a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8026b4e:	f109 0901 	add.w	r9, r9, #1
 8026b52:	6021      	str	r1, [r4, #0]
 8026b54:	f1bb 0f00 	cmp.w	fp, #0
 8026b58:	d003      	beq.n	8026b62 <_scanf_float+0x15e>
 8026b5a:	3201      	adds	r2, #1
 8026b5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026b60:	60a2      	str	r2, [r4, #8]
 8026b62:	68a3      	ldr	r3, [r4, #8]
 8026b64:	3b01      	subs	r3, #1
 8026b66:	60a3      	str	r3, [r4, #8]
 8026b68:	6923      	ldr	r3, [r4, #16]
 8026b6a:	3301      	adds	r3, #1
 8026b6c:	6123      	str	r3, [r4, #16]
 8026b6e:	687b      	ldr	r3, [r7, #4]
 8026b70:	3b01      	subs	r3, #1
 8026b72:	2b00      	cmp	r3, #0
 8026b74:	607b      	str	r3, [r7, #4]
 8026b76:	f340 8087 	ble.w	8026c88 <_scanf_float+0x284>
 8026b7a:	683b      	ldr	r3, [r7, #0]
 8026b7c:	3301      	adds	r3, #1
 8026b7e:	603b      	str	r3, [r7, #0]
 8026b80:	e765      	b.n	8026a4e <_scanf_float+0x4a>
 8026b82:	eb1a 0105 	adds.w	r1, sl, r5
 8026b86:	f47f af6f 	bne.w	8026a68 <_scanf_float+0x64>
 8026b8a:	6822      	ldr	r2, [r4, #0]
 8026b8c:	460d      	mov	r5, r1
 8026b8e:	468a      	mov	sl, r1
 8026b90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8026b94:	6022      	str	r2, [r4, #0]
 8026b96:	f806 3b01 	strb.w	r3, [r6], #1
 8026b9a:	e7e2      	b.n	8026b62 <_scanf_float+0x15e>
 8026b9c:	6822      	ldr	r2, [r4, #0]
 8026b9e:	0610      	lsls	r0, r2, #24
 8026ba0:	f57f af62 	bpl.w	8026a68 <_scanf_float+0x64>
 8026ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8026ba8:	6022      	str	r2, [r4, #0]
 8026baa:	e7f4      	b.n	8026b96 <_scanf_float+0x192>
 8026bac:	f1ba 0f00 	cmp.w	sl, #0
 8026bb0:	d10e      	bne.n	8026bd0 <_scanf_float+0x1cc>
 8026bb2:	f1b9 0f00 	cmp.w	r9, #0
 8026bb6:	d10e      	bne.n	8026bd6 <_scanf_float+0x1d2>
 8026bb8:	6822      	ldr	r2, [r4, #0]
 8026bba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8026bbe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8026bc2:	d108      	bne.n	8026bd6 <_scanf_float+0x1d2>
 8026bc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8026bc8:	f04f 0a01 	mov.w	sl, #1
 8026bcc:	6022      	str	r2, [r4, #0]
 8026bce:	e7e2      	b.n	8026b96 <_scanf_float+0x192>
 8026bd0:	f1ba 0f02 	cmp.w	sl, #2
 8026bd4:	d055      	beq.n	8026c82 <_scanf_float+0x27e>
 8026bd6:	2d01      	cmp	r5, #1
 8026bd8:	d002      	beq.n	8026be0 <_scanf_float+0x1dc>
 8026bda:	2d04      	cmp	r5, #4
 8026bdc:	f47f af44 	bne.w	8026a68 <_scanf_float+0x64>
 8026be0:	3501      	adds	r5, #1
 8026be2:	b2ed      	uxtb	r5, r5
 8026be4:	e7d7      	b.n	8026b96 <_scanf_float+0x192>
 8026be6:	f1ba 0f01 	cmp.w	sl, #1
 8026bea:	f47f af3d 	bne.w	8026a68 <_scanf_float+0x64>
 8026bee:	f04f 0a02 	mov.w	sl, #2
 8026bf2:	e7d0      	b.n	8026b96 <_scanf_float+0x192>
 8026bf4:	b97d      	cbnz	r5, 8026c16 <_scanf_float+0x212>
 8026bf6:	f1b9 0f00 	cmp.w	r9, #0
 8026bfa:	f47f af38 	bne.w	8026a6e <_scanf_float+0x6a>
 8026bfe:	6822      	ldr	r2, [r4, #0]
 8026c00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8026c04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8026c08:	f040 8107 	bne.w	8026e1a <_scanf_float+0x416>
 8026c0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8026c10:	2501      	movs	r5, #1
 8026c12:	6022      	str	r2, [r4, #0]
 8026c14:	e7bf      	b.n	8026b96 <_scanf_float+0x192>
 8026c16:	2d03      	cmp	r5, #3
 8026c18:	d0e2      	beq.n	8026be0 <_scanf_float+0x1dc>
 8026c1a:	2d05      	cmp	r5, #5
 8026c1c:	e7de      	b.n	8026bdc <_scanf_float+0x1d8>
 8026c1e:	2d02      	cmp	r5, #2
 8026c20:	f47f af22 	bne.w	8026a68 <_scanf_float+0x64>
 8026c24:	2503      	movs	r5, #3
 8026c26:	e7b6      	b.n	8026b96 <_scanf_float+0x192>
 8026c28:	2d06      	cmp	r5, #6
 8026c2a:	f47f af1d 	bne.w	8026a68 <_scanf_float+0x64>
 8026c2e:	2507      	movs	r5, #7
 8026c30:	e7b1      	b.n	8026b96 <_scanf_float+0x192>
 8026c32:	6822      	ldr	r2, [r4, #0]
 8026c34:	0591      	lsls	r1, r2, #22
 8026c36:	f57f af17 	bpl.w	8026a68 <_scanf_float+0x64>
 8026c3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8026c3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8026c42:	6022      	str	r2, [r4, #0]
 8026c44:	e7a7      	b.n	8026b96 <_scanf_float+0x192>
 8026c46:	6822      	ldr	r2, [r4, #0]
 8026c48:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8026c4c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8026c50:	d006      	beq.n	8026c60 <_scanf_float+0x25c>
 8026c52:	0550      	lsls	r0, r2, #21
 8026c54:	f57f af08 	bpl.w	8026a68 <_scanf_float+0x64>
 8026c58:	f1b9 0f00 	cmp.w	r9, #0
 8026c5c:	f000 80dd 	beq.w	8026e1a <_scanf_float+0x416>
 8026c60:	0591      	lsls	r1, r2, #22
 8026c62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8026c66:	bf58      	it	pl
 8026c68:	9902      	ldrpl	r1, [sp, #8]
 8026c6a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8026c6e:	bf58      	it	pl
 8026c70:	eba9 0101 	subpl.w	r1, r9, r1
 8026c74:	6022      	str	r2, [r4, #0]
 8026c76:	f04f 0900 	mov.w	r9, #0
 8026c7a:	bf58      	it	pl
 8026c7c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8026c80:	e789      	b.n	8026b96 <_scanf_float+0x192>
 8026c82:	f04f 0a03 	mov.w	sl, #3
 8026c86:	e786      	b.n	8026b96 <_scanf_float+0x192>
 8026c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8026c8c:	4639      	mov	r1, r7
 8026c8e:	4640      	mov	r0, r8
 8026c90:	4798      	blx	r3
 8026c92:	2800      	cmp	r0, #0
 8026c94:	f43f aedb 	beq.w	8026a4e <_scanf_float+0x4a>
 8026c98:	e6e6      	b.n	8026a68 <_scanf_float+0x64>
 8026c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8026c9e:	463a      	mov	r2, r7
 8026ca0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8026ca4:	4640      	mov	r0, r8
 8026ca6:	4798      	blx	r3
 8026ca8:	6923      	ldr	r3, [r4, #16]
 8026caa:	3b01      	subs	r3, #1
 8026cac:	6123      	str	r3, [r4, #16]
 8026cae:	e6e8      	b.n	8026a82 <_scanf_float+0x7e>
 8026cb0:	1e6b      	subs	r3, r5, #1
 8026cb2:	2b06      	cmp	r3, #6
 8026cb4:	d824      	bhi.n	8026d00 <_scanf_float+0x2fc>
 8026cb6:	2d02      	cmp	r5, #2
 8026cb8:	d836      	bhi.n	8026d28 <_scanf_float+0x324>
 8026cba:	9b01      	ldr	r3, [sp, #4]
 8026cbc:	429e      	cmp	r6, r3
 8026cbe:	f67f aee4 	bls.w	8026a8a <_scanf_float+0x86>
 8026cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8026cc6:	463a      	mov	r2, r7
 8026cc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8026ccc:	4640      	mov	r0, r8
 8026cce:	4798      	blx	r3
 8026cd0:	6923      	ldr	r3, [r4, #16]
 8026cd2:	3b01      	subs	r3, #1
 8026cd4:	6123      	str	r3, [r4, #16]
 8026cd6:	e7f0      	b.n	8026cba <_scanf_float+0x2b6>
 8026cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8026cdc:	463a      	mov	r2, r7
 8026cde:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8026ce2:	4640      	mov	r0, r8
 8026ce4:	4798      	blx	r3
 8026ce6:	6923      	ldr	r3, [r4, #16]
 8026ce8:	3b01      	subs	r3, #1
 8026cea:	6123      	str	r3, [r4, #16]
 8026cec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026cf0:	fa5f fa8a 	uxtb.w	sl, sl
 8026cf4:	f1ba 0f02 	cmp.w	sl, #2
 8026cf8:	d1ee      	bne.n	8026cd8 <_scanf_float+0x2d4>
 8026cfa:	3d03      	subs	r5, #3
 8026cfc:	b2ed      	uxtb	r5, r5
 8026cfe:	1b76      	subs	r6, r6, r5
 8026d00:	6823      	ldr	r3, [r4, #0]
 8026d02:	05da      	lsls	r2, r3, #23
 8026d04:	d52f      	bpl.n	8026d66 <_scanf_float+0x362>
 8026d06:	055b      	lsls	r3, r3, #21
 8026d08:	d511      	bpl.n	8026d2e <_scanf_float+0x32a>
 8026d0a:	9b01      	ldr	r3, [sp, #4]
 8026d0c:	429e      	cmp	r6, r3
 8026d0e:	f67f aebc 	bls.w	8026a8a <_scanf_float+0x86>
 8026d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8026d16:	463a      	mov	r2, r7
 8026d18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8026d1c:	4640      	mov	r0, r8
 8026d1e:	4798      	blx	r3
 8026d20:	6923      	ldr	r3, [r4, #16]
 8026d22:	3b01      	subs	r3, #1
 8026d24:	6123      	str	r3, [r4, #16]
 8026d26:	e7f0      	b.n	8026d0a <_scanf_float+0x306>
 8026d28:	46aa      	mov	sl, r5
 8026d2a:	46b3      	mov	fp, r6
 8026d2c:	e7de      	b.n	8026cec <_scanf_float+0x2e8>
 8026d2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8026d32:	1e75      	subs	r5, r6, #1
 8026d34:	6923      	ldr	r3, [r4, #16]
 8026d36:	2965      	cmp	r1, #101	@ 0x65
 8026d38:	f103 33ff 	add.w	r3, r3, #4294967295
 8026d3c:	6123      	str	r3, [r4, #16]
 8026d3e:	d00c      	beq.n	8026d5a <_scanf_float+0x356>
 8026d40:	2945      	cmp	r1, #69	@ 0x45
 8026d42:	d00a      	beq.n	8026d5a <_scanf_float+0x356>
 8026d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8026d48:	463a      	mov	r2, r7
 8026d4a:	4640      	mov	r0, r8
 8026d4c:	1eb5      	subs	r5, r6, #2
 8026d4e:	4798      	blx	r3
 8026d50:	6923      	ldr	r3, [r4, #16]
 8026d52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8026d56:	3b01      	subs	r3, #1
 8026d58:	6123      	str	r3, [r4, #16]
 8026d5a:	462e      	mov	r6, r5
 8026d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8026d60:	463a      	mov	r2, r7
 8026d62:	4640      	mov	r0, r8
 8026d64:	4798      	blx	r3
 8026d66:	6822      	ldr	r2, [r4, #0]
 8026d68:	f012 0210 	ands.w	r2, r2, #16
 8026d6c:	d001      	beq.n	8026d72 <_scanf_float+0x36e>
 8026d6e:	2000      	movs	r0, #0
 8026d70:	e68c      	b.n	8026a8c <_scanf_float+0x88>
 8026d72:	7032      	strb	r2, [r6, #0]
 8026d74:	6823      	ldr	r3, [r4, #0]
 8026d76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8026d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8026d7e:	d11c      	bne.n	8026dba <_scanf_float+0x3b6>
 8026d80:	9b02      	ldr	r3, [sp, #8]
 8026d82:	454b      	cmp	r3, r9
 8026d84:	eba3 0209 	sub.w	r2, r3, r9
 8026d88:	d123      	bne.n	8026dd2 <_scanf_float+0x3ce>
 8026d8a:	2200      	movs	r2, #0
 8026d8c:	9901      	ldr	r1, [sp, #4]
 8026d8e:	4640      	mov	r0, r8
 8026d90:	f7ff f8aa 	bl	8025ee8 <_strtod_r>
 8026d94:	6821      	ldr	r1, [r4, #0]
 8026d96:	9b03      	ldr	r3, [sp, #12]
 8026d98:	f011 0f02 	tst.w	r1, #2
 8026d9c:	681b      	ldr	r3, [r3, #0]
 8026d9e:	ec57 6b10 	vmov	r6, r7, d0
 8026da2:	f103 0204 	add.w	r2, r3, #4
 8026da6:	d01f      	beq.n	8026de8 <_scanf_float+0x3e4>
 8026da8:	9903      	ldr	r1, [sp, #12]
 8026daa:	600a      	str	r2, [r1, #0]
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	e9c3 6700 	strd	r6, r7, [r3]
 8026db2:	68e3      	ldr	r3, [r4, #12]
 8026db4:	3301      	adds	r3, #1
 8026db6:	60e3      	str	r3, [r4, #12]
 8026db8:	e7d9      	b.n	8026d6e <_scanf_float+0x36a>
 8026dba:	9b04      	ldr	r3, [sp, #16]
 8026dbc:	2b00      	cmp	r3, #0
 8026dbe:	d0e4      	beq.n	8026d8a <_scanf_float+0x386>
 8026dc0:	9905      	ldr	r1, [sp, #20]
 8026dc2:	230a      	movs	r3, #10
 8026dc4:	4640      	mov	r0, r8
 8026dc6:	3101      	adds	r1, #1
 8026dc8:	f7ff f972 	bl	80260b0 <_strtol_r>
 8026dcc:	9b04      	ldr	r3, [sp, #16]
 8026dce:	9e05      	ldr	r6, [sp, #20]
 8026dd0:	1ac2      	subs	r2, r0, r3
 8026dd2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8026dd6:	4912      	ldr	r1, [pc, #72]	@ (8026e20 <_scanf_float+0x41c>)
 8026dd8:	429e      	cmp	r6, r3
 8026dda:	bf28      	it	cs
 8026ddc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8026de0:	4630      	mov	r0, r6
 8026de2:	f000 f917 	bl	8027014 <siprintf>
 8026de6:	e7d0      	b.n	8026d8a <_scanf_float+0x386>
 8026de8:	f011 0f04 	tst.w	r1, #4
 8026dec:	9903      	ldr	r1, [sp, #12]
 8026dee:	600a      	str	r2, [r1, #0]
 8026df0:	d1dc      	bne.n	8026dac <_scanf_float+0x3a8>
 8026df2:	681d      	ldr	r5, [r3, #0]
 8026df4:	4632      	mov	r2, r6
 8026df6:	463b      	mov	r3, r7
 8026df8:	4630      	mov	r0, r6
 8026dfa:	4639      	mov	r1, r7
 8026dfc:	f7d9 fea4 	bl	8000b48 <__aeabi_dcmpun>
 8026e00:	b128      	cbz	r0, 8026e0e <_scanf_float+0x40a>
 8026e02:	4808      	ldr	r0, [pc, #32]	@ (8026e24 <_scanf_float+0x420>)
 8026e04:	f001 f860 	bl	8027ec8 <nanf>
 8026e08:	ed85 0a00 	vstr	s0, [r5]
 8026e0c:	e7d1      	b.n	8026db2 <_scanf_float+0x3ae>
 8026e0e:	4630      	mov	r0, r6
 8026e10:	4639      	mov	r1, r7
 8026e12:	f7d9 fef7 	bl	8000c04 <__aeabi_d2f>
 8026e16:	6028      	str	r0, [r5, #0]
 8026e18:	e7cb      	b.n	8026db2 <_scanf_float+0x3ae>
 8026e1a:	f04f 0900 	mov.w	r9, #0
 8026e1e:	e62a      	b.n	8026a76 <_scanf_float+0x72>
 8026e20:	08030450 	.word	0x08030450
 8026e24:	080307ff 	.word	0x080307ff

08026e28 <std>:
 8026e28:	2300      	movs	r3, #0
 8026e2a:	b510      	push	{r4, lr}
 8026e2c:	4604      	mov	r4, r0
 8026e2e:	6083      	str	r3, [r0, #8]
 8026e30:	8181      	strh	r1, [r0, #12]
 8026e32:	4619      	mov	r1, r3
 8026e34:	6643      	str	r3, [r0, #100]	@ 0x64
 8026e36:	81c2      	strh	r2, [r0, #14]
 8026e38:	2208      	movs	r2, #8
 8026e3a:	6183      	str	r3, [r0, #24]
 8026e3c:	e9c0 3300 	strd	r3, r3, [r0]
 8026e40:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026e44:	305c      	adds	r0, #92	@ 0x5c
 8026e46:	f000 f993 	bl	8027170 <memset>
 8026e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8026e80 <std+0x58>)
 8026e4c:	6224      	str	r4, [r4, #32]
 8026e4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8026e50:	4b0c      	ldr	r3, [pc, #48]	@ (8026e84 <std+0x5c>)
 8026e52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8026e54:	4b0c      	ldr	r3, [pc, #48]	@ (8026e88 <std+0x60>)
 8026e56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8026e58:	4b0c      	ldr	r3, [pc, #48]	@ (8026e8c <std+0x64>)
 8026e5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8026e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8026e90 <std+0x68>)
 8026e5e:	429c      	cmp	r4, r3
 8026e60:	d006      	beq.n	8026e70 <std+0x48>
 8026e62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8026e66:	4294      	cmp	r4, r2
 8026e68:	d002      	beq.n	8026e70 <std+0x48>
 8026e6a:	33d0      	adds	r3, #208	@ 0xd0
 8026e6c:	429c      	cmp	r4, r3
 8026e6e:	d105      	bne.n	8026e7c <std+0x54>
 8026e70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8026e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026e78:	f000 bff6 	b.w	8027e68 <__retarget_lock_init_recursive>
 8026e7c:	bd10      	pop	{r4, pc}
 8026e7e:	bf00      	nop
 8026e80:	08027055 	.word	0x08027055
 8026e84:	0802707b 	.word	0x0802707b
 8026e88:	080270b3 	.word	0x080270b3
 8026e8c:	080270d7 	.word	0x080270d7
 8026e90:	200bbb8c 	.word	0x200bbb8c

08026e94 <stdio_exit_handler>:
 8026e94:	4a02      	ldr	r2, [pc, #8]	@ (8026ea0 <stdio_exit_handler+0xc>)
 8026e96:	4903      	ldr	r1, [pc, #12]	@ (8026ea4 <stdio_exit_handler+0x10>)
 8026e98:	4803      	ldr	r0, [pc, #12]	@ (8026ea8 <stdio_exit_handler+0x14>)
 8026e9a:	f000 b869 	b.w	8026f70 <_fwalk_sglue>
 8026e9e:	bf00      	nop
 8026ea0:	20000388 	.word	0x20000388
 8026ea4:	0802a2ed 	.word	0x0802a2ed
 8026ea8:	2000050c 	.word	0x2000050c

08026eac <cleanup_stdio>:
 8026eac:	6841      	ldr	r1, [r0, #4]
 8026eae:	4b0c      	ldr	r3, [pc, #48]	@ (8026ee0 <cleanup_stdio+0x34>)
 8026eb0:	4299      	cmp	r1, r3
 8026eb2:	b510      	push	{r4, lr}
 8026eb4:	4604      	mov	r4, r0
 8026eb6:	d001      	beq.n	8026ebc <cleanup_stdio+0x10>
 8026eb8:	f003 fa18 	bl	802a2ec <_fflush_r>
 8026ebc:	68a1      	ldr	r1, [r4, #8]
 8026ebe:	4b09      	ldr	r3, [pc, #36]	@ (8026ee4 <cleanup_stdio+0x38>)
 8026ec0:	4299      	cmp	r1, r3
 8026ec2:	d002      	beq.n	8026eca <cleanup_stdio+0x1e>
 8026ec4:	4620      	mov	r0, r4
 8026ec6:	f003 fa11 	bl	802a2ec <_fflush_r>
 8026eca:	68e1      	ldr	r1, [r4, #12]
 8026ecc:	4b06      	ldr	r3, [pc, #24]	@ (8026ee8 <cleanup_stdio+0x3c>)
 8026ece:	4299      	cmp	r1, r3
 8026ed0:	d004      	beq.n	8026edc <cleanup_stdio+0x30>
 8026ed2:	4620      	mov	r0, r4
 8026ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026ed8:	f003 ba08 	b.w	802a2ec <_fflush_r>
 8026edc:	bd10      	pop	{r4, pc}
 8026ede:	bf00      	nop
 8026ee0:	200bbb8c 	.word	0x200bbb8c
 8026ee4:	200bbbf4 	.word	0x200bbbf4
 8026ee8:	200bbc5c 	.word	0x200bbc5c

08026eec <global_stdio_init.part.0>:
 8026eec:	b510      	push	{r4, lr}
 8026eee:	4b0b      	ldr	r3, [pc, #44]	@ (8026f1c <global_stdio_init.part.0+0x30>)
 8026ef0:	2104      	movs	r1, #4
 8026ef2:	4c0b      	ldr	r4, [pc, #44]	@ (8026f20 <global_stdio_init.part.0+0x34>)
 8026ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8026f24 <global_stdio_init.part.0+0x38>)
 8026ef6:	4620      	mov	r0, r4
 8026ef8:	601a      	str	r2, [r3, #0]
 8026efa:	2200      	movs	r2, #0
 8026efc:	f7ff ff94 	bl	8026e28 <std>
 8026f00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8026f04:	2201      	movs	r2, #1
 8026f06:	2109      	movs	r1, #9
 8026f08:	f7ff ff8e 	bl	8026e28 <std>
 8026f0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8026f10:	2202      	movs	r2, #2
 8026f12:	2112      	movs	r1, #18
 8026f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026f18:	f7ff bf86 	b.w	8026e28 <std>
 8026f1c:	200bbcc4 	.word	0x200bbcc4
 8026f20:	200bbb8c 	.word	0x200bbb8c
 8026f24:	08026e95 	.word	0x08026e95

08026f28 <__sfp_lock_acquire>:
 8026f28:	4801      	ldr	r0, [pc, #4]	@ (8026f30 <__sfp_lock_acquire+0x8>)
 8026f2a:	f000 bf9f 	b.w	8027e6c <__retarget_lock_acquire_recursive>
 8026f2e:	bf00      	nop
 8026f30:	200bbcf3 	.word	0x200bbcf3

08026f34 <__sfp_lock_release>:
 8026f34:	4801      	ldr	r0, [pc, #4]	@ (8026f3c <__sfp_lock_release+0x8>)
 8026f36:	f000 bf9b 	b.w	8027e70 <__retarget_lock_release_recursive>
 8026f3a:	bf00      	nop
 8026f3c:	200bbcf3 	.word	0x200bbcf3

08026f40 <__sinit>:
 8026f40:	b510      	push	{r4, lr}
 8026f42:	4604      	mov	r4, r0
 8026f44:	f7ff fff0 	bl	8026f28 <__sfp_lock_acquire>
 8026f48:	6a23      	ldr	r3, [r4, #32]
 8026f4a:	b11b      	cbz	r3, 8026f54 <__sinit+0x14>
 8026f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026f50:	f7ff bff0 	b.w	8026f34 <__sfp_lock_release>
 8026f54:	4b04      	ldr	r3, [pc, #16]	@ (8026f68 <__sinit+0x28>)
 8026f56:	6223      	str	r3, [r4, #32]
 8026f58:	4b04      	ldr	r3, [pc, #16]	@ (8026f6c <__sinit+0x2c>)
 8026f5a:	681b      	ldr	r3, [r3, #0]
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d1f5      	bne.n	8026f4c <__sinit+0xc>
 8026f60:	f7ff ffc4 	bl	8026eec <global_stdio_init.part.0>
 8026f64:	e7f2      	b.n	8026f4c <__sinit+0xc>
 8026f66:	bf00      	nop
 8026f68:	08026ead 	.word	0x08026ead
 8026f6c:	200bbcc4 	.word	0x200bbcc4

08026f70 <_fwalk_sglue>:
 8026f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026f74:	4607      	mov	r7, r0
 8026f76:	4688      	mov	r8, r1
 8026f78:	4614      	mov	r4, r2
 8026f7a:	2600      	movs	r6, #0
 8026f7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026f80:	f1b9 0901 	subs.w	r9, r9, #1
 8026f84:	d505      	bpl.n	8026f92 <_fwalk_sglue+0x22>
 8026f86:	6824      	ldr	r4, [r4, #0]
 8026f88:	2c00      	cmp	r4, #0
 8026f8a:	d1f7      	bne.n	8026f7c <_fwalk_sglue+0xc>
 8026f8c:	4630      	mov	r0, r6
 8026f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026f92:	89ab      	ldrh	r3, [r5, #12]
 8026f94:	2b01      	cmp	r3, #1
 8026f96:	d907      	bls.n	8026fa8 <_fwalk_sglue+0x38>
 8026f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026f9c:	3301      	adds	r3, #1
 8026f9e:	d003      	beq.n	8026fa8 <_fwalk_sglue+0x38>
 8026fa0:	4629      	mov	r1, r5
 8026fa2:	4638      	mov	r0, r7
 8026fa4:	47c0      	blx	r8
 8026fa6:	4306      	orrs	r6, r0
 8026fa8:	3568      	adds	r5, #104	@ 0x68
 8026faa:	e7e9      	b.n	8026f80 <_fwalk_sglue+0x10>

08026fac <sniprintf>:
 8026fac:	b40c      	push	{r2, r3}
 8026fae:	4b18      	ldr	r3, [pc, #96]	@ (8027010 <sniprintf+0x64>)
 8026fb0:	b530      	push	{r4, r5, lr}
 8026fb2:	1e0c      	subs	r4, r1, #0
 8026fb4:	b09d      	sub	sp, #116	@ 0x74
 8026fb6:	681d      	ldr	r5, [r3, #0]
 8026fb8:	da08      	bge.n	8026fcc <sniprintf+0x20>
 8026fba:	238b      	movs	r3, #139	@ 0x8b
 8026fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8026fc0:	602b      	str	r3, [r5, #0]
 8026fc2:	b01d      	add	sp, #116	@ 0x74
 8026fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026fc8:	b002      	add	sp, #8
 8026fca:	4770      	bx	lr
 8026fcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8026fd0:	9002      	str	r0, [sp, #8]
 8026fd2:	9006      	str	r0, [sp, #24]
 8026fd4:	a902      	add	r1, sp, #8
 8026fd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8026fda:	bf14      	ite	ne
 8026fdc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8026fe0:	4623      	moveq	r3, r4
 8026fe2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8026fe4:	4628      	mov	r0, r5
 8026fe6:	9304      	str	r3, [sp, #16]
 8026fe8:	9307      	str	r3, [sp, #28]
 8026fea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8026fee:	f8ad 3016 	strh.w	r3, [sp, #22]
 8026ff2:	ab21      	add	r3, sp, #132	@ 0x84
 8026ff4:	9301      	str	r3, [sp, #4]
 8026ff6:	f002 fff9 	bl	8029fec <_svfiprintf_r>
 8026ffa:	1c43      	adds	r3, r0, #1
 8026ffc:	bfbc      	itt	lt
 8026ffe:	238b      	movlt	r3, #139	@ 0x8b
 8027000:	602b      	strlt	r3, [r5, #0]
 8027002:	2c00      	cmp	r4, #0
 8027004:	d0dd      	beq.n	8026fc2 <sniprintf+0x16>
 8027006:	9b02      	ldr	r3, [sp, #8]
 8027008:	2200      	movs	r2, #0
 802700a:	701a      	strb	r2, [r3, #0]
 802700c:	e7d9      	b.n	8026fc2 <sniprintf+0x16>
 802700e:	bf00      	nop
 8027010:	20000508 	.word	0x20000508

08027014 <siprintf>:
 8027014:	b40e      	push	{r1, r2, r3}
 8027016:	b500      	push	{lr}
 8027018:	b09c      	sub	sp, #112	@ 0x70
 802701a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 802701e:	ab1d      	add	r3, sp, #116	@ 0x74
 8027020:	9002      	str	r0, [sp, #8]
 8027022:	9006      	str	r0, [sp, #24]
 8027024:	9107      	str	r1, [sp, #28]
 8027026:	9104      	str	r1, [sp, #16]
 8027028:	4808      	ldr	r0, [pc, #32]	@ (802704c <siprintf+0x38>)
 802702a:	4909      	ldr	r1, [pc, #36]	@ (8027050 <siprintf+0x3c>)
 802702c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027030:	9105      	str	r1, [sp, #20]
 8027032:	a902      	add	r1, sp, #8
 8027034:	6800      	ldr	r0, [r0, #0]
 8027036:	9301      	str	r3, [sp, #4]
 8027038:	f002 ffd8 	bl	8029fec <_svfiprintf_r>
 802703c:	9b02      	ldr	r3, [sp, #8]
 802703e:	2200      	movs	r2, #0
 8027040:	701a      	strb	r2, [r3, #0]
 8027042:	b01c      	add	sp, #112	@ 0x70
 8027044:	f85d eb04 	ldr.w	lr, [sp], #4
 8027048:	b003      	add	sp, #12
 802704a:	4770      	bx	lr
 802704c:	20000508 	.word	0x20000508
 8027050:	ffff0208 	.word	0xffff0208

08027054 <__sread>:
 8027054:	b510      	push	{r4, lr}
 8027056:	460c      	mov	r4, r1
 8027058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802705c:	f000 feb6 	bl	8027dcc <_read_r>
 8027060:	2800      	cmp	r0, #0
 8027062:	bfab      	itete	ge
 8027064:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8027066:	89a3      	ldrhlt	r3, [r4, #12]
 8027068:	181b      	addge	r3, r3, r0
 802706a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802706e:	bfac      	ite	ge
 8027070:	6563      	strge	r3, [r4, #84]	@ 0x54
 8027072:	81a3      	strhlt	r3, [r4, #12]
 8027074:	bd10      	pop	{r4, pc}

08027076 <__seofread>:
 8027076:	2000      	movs	r0, #0
 8027078:	4770      	bx	lr

0802707a <__swrite>:
 802707a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802707e:	461f      	mov	r7, r3
 8027080:	898b      	ldrh	r3, [r1, #12]
 8027082:	4605      	mov	r5, r0
 8027084:	460c      	mov	r4, r1
 8027086:	05db      	lsls	r3, r3, #23
 8027088:	4616      	mov	r6, r2
 802708a:	d505      	bpl.n	8027098 <__swrite+0x1e>
 802708c:	2302      	movs	r3, #2
 802708e:	2200      	movs	r2, #0
 8027090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027094:	f000 fe88 	bl	8027da8 <_lseek_r>
 8027098:	89a3      	ldrh	r3, [r4, #12]
 802709a:	4632      	mov	r2, r6
 802709c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80270a0:	4628      	mov	r0, r5
 80270a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80270a6:	81a3      	strh	r3, [r4, #12]
 80270a8:	463b      	mov	r3, r7
 80270aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80270ae:	f000 be9f 	b.w	8027df0 <_write_r>

080270b2 <__sseek>:
 80270b2:	b510      	push	{r4, lr}
 80270b4:	460c      	mov	r4, r1
 80270b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80270ba:	f000 fe75 	bl	8027da8 <_lseek_r>
 80270be:	1c43      	adds	r3, r0, #1
 80270c0:	89a3      	ldrh	r3, [r4, #12]
 80270c2:	bf15      	itete	ne
 80270c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80270c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80270ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80270ce:	81a3      	strheq	r3, [r4, #12]
 80270d0:	bf18      	it	ne
 80270d2:	81a3      	strhne	r3, [r4, #12]
 80270d4:	bd10      	pop	{r4, pc}

080270d6 <__sclose>:
 80270d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80270da:	f000 be55 	b.w	8027d88 <_close_r>

080270de <_vsniprintf_r>:
 80270de:	b530      	push	{r4, r5, lr}
 80270e0:	4614      	mov	r4, r2
 80270e2:	b09b      	sub	sp, #108	@ 0x6c
 80270e4:	4605      	mov	r5, r0
 80270e6:	461a      	mov	r2, r3
 80270e8:	2c00      	cmp	r4, #0
 80270ea:	da05      	bge.n	80270f8 <_vsniprintf_r+0x1a>
 80270ec:	238b      	movs	r3, #139	@ 0x8b
 80270ee:	6003      	str	r3, [r0, #0]
 80270f0:	f04f 30ff 	mov.w	r0, #4294967295
 80270f4:	b01b      	add	sp, #108	@ 0x6c
 80270f6:	bd30      	pop	{r4, r5, pc}
 80270f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80270fc:	9100      	str	r1, [sp, #0]
 80270fe:	9104      	str	r1, [sp, #16]
 8027100:	4669      	mov	r1, sp
 8027102:	f8ad 300c 	strh.w	r3, [sp, #12]
 8027106:	bf14      	ite	ne
 8027108:	f104 33ff 	addne.w	r3, r4, #4294967295
 802710c:	4623      	moveq	r3, r4
 802710e:	9302      	str	r3, [sp, #8]
 8027110:	9305      	str	r3, [sp, #20]
 8027112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8027116:	f8ad 300e 	strh.w	r3, [sp, #14]
 802711a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802711c:	f002 ff66 	bl	8029fec <_svfiprintf_r>
 8027120:	1c43      	adds	r3, r0, #1
 8027122:	bfbc      	itt	lt
 8027124:	238b      	movlt	r3, #139	@ 0x8b
 8027126:	602b      	strlt	r3, [r5, #0]
 8027128:	2c00      	cmp	r4, #0
 802712a:	d0e3      	beq.n	80270f4 <_vsniprintf_r+0x16>
 802712c:	9b00      	ldr	r3, [sp, #0]
 802712e:	2200      	movs	r2, #0
 8027130:	701a      	strb	r2, [r3, #0]
 8027132:	e7df      	b.n	80270f4 <_vsniprintf_r+0x16>

08027134 <vsniprintf>:
 8027134:	b507      	push	{r0, r1, r2, lr}
 8027136:	9300      	str	r3, [sp, #0]
 8027138:	4613      	mov	r3, r2
 802713a:	460a      	mov	r2, r1
 802713c:	4601      	mov	r1, r0
 802713e:	4803      	ldr	r0, [pc, #12]	@ (802714c <vsniprintf+0x18>)
 8027140:	6800      	ldr	r0, [r0, #0]
 8027142:	f7ff ffcc 	bl	80270de <_vsniprintf_r>
 8027146:	b003      	add	sp, #12
 8027148:	f85d fb04 	ldr.w	pc, [sp], #4
 802714c:	20000508 	.word	0x20000508

08027150 <memcmp>:
 8027150:	3901      	subs	r1, #1
 8027152:	4402      	add	r2, r0
 8027154:	b510      	push	{r4, lr}
 8027156:	4290      	cmp	r0, r2
 8027158:	d101      	bne.n	802715e <memcmp+0xe>
 802715a:	2000      	movs	r0, #0
 802715c:	e005      	b.n	802716a <memcmp+0x1a>
 802715e:	7803      	ldrb	r3, [r0, #0]
 8027160:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8027164:	42a3      	cmp	r3, r4
 8027166:	d001      	beq.n	802716c <memcmp+0x1c>
 8027168:	1b18      	subs	r0, r3, r4
 802716a:	bd10      	pop	{r4, pc}
 802716c:	3001      	adds	r0, #1
 802716e:	e7f2      	b.n	8027156 <memcmp+0x6>

08027170 <memset>:
 8027170:	4402      	add	r2, r0
 8027172:	4603      	mov	r3, r0
 8027174:	4293      	cmp	r3, r2
 8027176:	d100      	bne.n	802717a <memset+0xa>
 8027178:	4770      	bx	lr
 802717a:	f803 1b01 	strb.w	r1, [r3], #1
 802717e:	e7f9      	b.n	8027174 <memset+0x4>

08027180 <strcat>:
 8027180:	4602      	mov	r2, r0
 8027182:	b510      	push	{r4, lr}
 8027184:	7814      	ldrb	r4, [r2, #0]
 8027186:	4613      	mov	r3, r2
 8027188:	3201      	adds	r2, #1
 802718a:	2c00      	cmp	r4, #0
 802718c:	d1fa      	bne.n	8027184 <strcat+0x4>
 802718e:	3b01      	subs	r3, #1
 8027190:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027194:	f803 2f01 	strb.w	r2, [r3, #1]!
 8027198:	2a00      	cmp	r2, #0
 802719a:	d1f9      	bne.n	8027190 <strcat+0x10>
 802719c:	bd10      	pop	{r4, pc}

0802719e <strchr>:
 802719e:	b2c9      	uxtb	r1, r1
 80271a0:	4603      	mov	r3, r0
 80271a2:	4618      	mov	r0, r3
 80271a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80271a8:	b112      	cbz	r2, 80271b0 <strchr+0x12>
 80271aa:	428a      	cmp	r2, r1
 80271ac:	d1f9      	bne.n	80271a2 <strchr+0x4>
 80271ae:	4770      	bx	lr
 80271b0:	2900      	cmp	r1, #0
 80271b2:	bf18      	it	ne
 80271b4:	2000      	movne	r0, #0
 80271b6:	4770      	bx	lr

080271b8 <strcspn>:
 80271b8:	4603      	mov	r3, r0
 80271ba:	b570      	push	{r4, r5, r6, lr}
 80271bc:	461e      	mov	r6, r3
 80271be:	f813 4b01 	ldrb.w	r4, [r3], #1
 80271c2:	b144      	cbz	r4, 80271d6 <strcspn+0x1e>
 80271c4:	1e4a      	subs	r2, r1, #1
 80271c6:	e001      	b.n	80271cc <strcspn+0x14>
 80271c8:	42a5      	cmp	r5, r4
 80271ca:	d004      	beq.n	80271d6 <strcspn+0x1e>
 80271cc:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80271d0:	2d00      	cmp	r5, #0
 80271d2:	d1f9      	bne.n	80271c8 <strcspn+0x10>
 80271d4:	e7f2      	b.n	80271bc <strcspn+0x4>
 80271d6:	1a30      	subs	r0, r6, r0
 80271d8:	bd70      	pop	{r4, r5, r6, pc}

080271da <strncmp>:
 80271da:	b510      	push	{r4, lr}
 80271dc:	b16a      	cbz	r2, 80271fa <strncmp+0x20>
 80271de:	3901      	subs	r1, #1
 80271e0:	1884      	adds	r4, r0, r2
 80271e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80271e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80271ea:	429a      	cmp	r2, r3
 80271ec:	d103      	bne.n	80271f6 <strncmp+0x1c>
 80271ee:	42a0      	cmp	r0, r4
 80271f0:	d001      	beq.n	80271f6 <strncmp+0x1c>
 80271f2:	2a00      	cmp	r2, #0
 80271f4:	d1f5      	bne.n	80271e2 <strncmp+0x8>
 80271f6:	1ad0      	subs	r0, r2, r3
 80271f8:	bd10      	pop	{r4, pc}
 80271fa:	4610      	mov	r0, r2
 80271fc:	e7fc      	b.n	80271f8 <strncmp+0x1e>

080271fe <strncpy>:
 80271fe:	3901      	subs	r1, #1
 8027200:	4603      	mov	r3, r0
 8027202:	b510      	push	{r4, lr}
 8027204:	b132      	cbz	r2, 8027214 <strncpy+0x16>
 8027206:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802720a:	3a01      	subs	r2, #1
 802720c:	f803 4b01 	strb.w	r4, [r3], #1
 8027210:	2c00      	cmp	r4, #0
 8027212:	d1f7      	bne.n	8027204 <strncpy+0x6>
 8027214:	441a      	add	r2, r3
 8027216:	2100      	movs	r1, #0
 8027218:	4293      	cmp	r3, r2
 802721a:	d100      	bne.n	802721e <strncpy+0x20>
 802721c:	bd10      	pop	{r4, pc}
 802721e:	f803 1b01 	strb.w	r1, [r3], #1
 8027222:	e7f9      	b.n	8027218 <strncpy+0x1a>

08027224 <__strtok_r>:
 8027224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027226:	4604      	mov	r4, r0
 8027228:	b908      	cbnz	r0, 802722e <__strtok_r+0xa>
 802722a:	6814      	ldr	r4, [r2, #0]
 802722c:	b144      	cbz	r4, 8027240 <__strtok_r+0x1c>
 802722e:	4620      	mov	r0, r4
 8027230:	460f      	mov	r7, r1
 8027232:	f814 5b01 	ldrb.w	r5, [r4], #1
 8027236:	f817 6b01 	ldrb.w	r6, [r7], #1
 802723a:	b91e      	cbnz	r6, 8027244 <__strtok_r+0x20>
 802723c:	b965      	cbnz	r5, 8027258 <__strtok_r+0x34>
 802723e:	6015      	str	r5, [r2, #0]
 8027240:	2000      	movs	r0, #0
 8027242:	e005      	b.n	8027250 <__strtok_r+0x2c>
 8027244:	42b5      	cmp	r5, r6
 8027246:	d1f6      	bne.n	8027236 <__strtok_r+0x12>
 8027248:	2b00      	cmp	r3, #0
 802724a:	d1f0      	bne.n	802722e <__strtok_r+0xa>
 802724c:	6014      	str	r4, [r2, #0]
 802724e:	7003      	strb	r3, [r0, #0]
 8027250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027252:	461c      	mov	r4, r3
 8027254:	e00c      	b.n	8027270 <__strtok_r+0x4c>
 8027256:	b915      	cbnz	r5, 802725e <__strtok_r+0x3a>
 8027258:	f814 3b01 	ldrb.w	r3, [r4], #1
 802725c:	460e      	mov	r6, r1
 802725e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8027262:	42ab      	cmp	r3, r5
 8027264:	d1f7      	bne.n	8027256 <__strtok_r+0x32>
 8027266:	2b00      	cmp	r3, #0
 8027268:	d0f3      	beq.n	8027252 <__strtok_r+0x2e>
 802726a:	2300      	movs	r3, #0
 802726c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8027270:	6014      	str	r4, [r2, #0]
 8027272:	e7ed      	b.n	8027250 <__strtok_r+0x2c>

08027274 <strtok_r>:
 8027274:	2301      	movs	r3, #1
 8027276:	f7ff bfd5 	b.w	8027224 <__strtok_r>

0802727a <strstr>:
 802727a:	780a      	ldrb	r2, [r1, #0]
 802727c:	b570      	push	{r4, r5, r6, lr}
 802727e:	b96a      	cbnz	r2, 802729c <strstr+0x22>
 8027280:	bd70      	pop	{r4, r5, r6, pc}
 8027282:	429a      	cmp	r2, r3
 8027284:	d109      	bne.n	802729a <strstr+0x20>
 8027286:	460c      	mov	r4, r1
 8027288:	4605      	mov	r5, r0
 802728a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802728e:	2b00      	cmp	r3, #0
 8027290:	d0f6      	beq.n	8027280 <strstr+0x6>
 8027292:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8027296:	429e      	cmp	r6, r3
 8027298:	d0f7      	beq.n	802728a <strstr+0x10>
 802729a:	3001      	adds	r0, #1
 802729c:	7803      	ldrb	r3, [r0, #0]
 802729e:	2b00      	cmp	r3, #0
 80272a0:	d1ef      	bne.n	8027282 <strstr+0x8>
 80272a2:	4618      	mov	r0, r3
 80272a4:	e7ec      	b.n	8027280 <strstr+0x6>

080272a6 <difftime>:
 80272a6:	1a80      	subs	r0, r0, r2
 80272a8:	b508      	push	{r3, lr}
 80272aa:	eb61 0103 	sbc.w	r1, r1, r3
 80272ae:	f7d9 f983 	bl	80005b8 <__aeabi_l2d>
 80272b2:	ec41 0b10 	vmov	d0, r0, r1
 80272b6:	bd08      	pop	{r3, pc}

080272b8 <validate_structure>:
 80272b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80272ba:	6801      	ldr	r1, [r0, #0]
 80272bc:	4604      	mov	r4, r0
 80272be:	293b      	cmp	r1, #59	@ 0x3b
 80272c0:	d911      	bls.n	80272e6 <validate_structure+0x2e>
 80272c2:	223c      	movs	r2, #60	@ 0x3c
 80272c4:	4668      	mov	r0, sp
 80272c6:	f000 fe05 	bl	8027ed4 <div>
 80272ca:	9a01      	ldr	r2, [sp, #4]
 80272cc:	6863      	ldr	r3, [r4, #4]
 80272ce:	9900      	ldr	r1, [sp, #0]
 80272d0:	2a00      	cmp	r2, #0
 80272d2:	440b      	add	r3, r1
 80272d4:	bfb4      	ite	lt
 80272d6:	323c      	addlt	r2, #60	@ 0x3c
 80272d8:	6022      	strge	r2, [r4, #0]
 80272da:	6063      	str	r3, [r4, #4]
 80272dc:	bfbe      	ittt	lt
 80272de:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80272e2:	6022      	strlt	r2, [r4, #0]
 80272e4:	6063      	strlt	r3, [r4, #4]
 80272e6:	6861      	ldr	r1, [r4, #4]
 80272e8:	293b      	cmp	r1, #59	@ 0x3b
 80272ea:	d911      	bls.n	8027310 <validate_structure+0x58>
 80272ec:	223c      	movs	r2, #60	@ 0x3c
 80272ee:	4668      	mov	r0, sp
 80272f0:	f000 fdf0 	bl	8027ed4 <div>
 80272f4:	9a01      	ldr	r2, [sp, #4]
 80272f6:	68a3      	ldr	r3, [r4, #8]
 80272f8:	9900      	ldr	r1, [sp, #0]
 80272fa:	2a00      	cmp	r2, #0
 80272fc:	440b      	add	r3, r1
 80272fe:	bfb4      	ite	lt
 8027300:	323c      	addlt	r2, #60	@ 0x3c
 8027302:	6062      	strge	r2, [r4, #4]
 8027304:	60a3      	str	r3, [r4, #8]
 8027306:	bfbe      	ittt	lt
 8027308:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802730c:	6062      	strlt	r2, [r4, #4]
 802730e:	60a3      	strlt	r3, [r4, #8]
 8027310:	68a1      	ldr	r1, [r4, #8]
 8027312:	2917      	cmp	r1, #23
 8027314:	d911      	bls.n	802733a <validate_structure+0x82>
 8027316:	2218      	movs	r2, #24
 8027318:	4668      	mov	r0, sp
 802731a:	f000 fddb 	bl	8027ed4 <div>
 802731e:	9a01      	ldr	r2, [sp, #4]
 8027320:	68e3      	ldr	r3, [r4, #12]
 8027322:	9900      	ldr	r1, [sp, #0]
 8027324:	2a00      	cmp	r2, #0
 8027326:	440b      	add	r3, r1
 8027328:	bfb4      	ite	lt
 802732a:	3218      	addlt	r2, #24
 802732c:	60a2      	strge	r2, [r4, #8]
 802732e:	60e3      	str	r3, [r4, #12]
 8027330:	bfbe      	ittt	lt
 8027332:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8027336:	60a2      	strlt	r2, [r4, #8]
 8027338:	60e3      	strlt	r3, [r4, #12]
 802733a:	6921      	ldr	r1, [r4, #16]
 802733c:	290b      	cmp	r1, #11
 802733e:	d911      	bls.n	8027364 <validate_structure+0xac>
 8027340:	220c      	movs	r2, #12
 8027342:	4668      	mov	r0, sp
 8027344:	f000 fdc6 	bl	8027ed4 <div>
 8027348:	9a01      	ldr	r2, [sp, #4]
 802734a:	6963      	ldr	r3, [r4, #20]
 802734c:	9900      	ldr	r1, [sp, #0]
 802734e:	2a00      	cmp	r2, #0
 8027350:	440b      	add	r3, r1
 8027352:	bfb4      	ite	lt
 8027354:	320c      	addlt	r2, #12
 8027356:	6122      	strge	r2, [r4, #16]
 8027358:	6163      	str	r3, [r4, #20]
 802735a:	bfbe      	ittt	lt
 802735c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8027360:	6122      	strlt	r2, [r4, #16]
 8027362:	6163      	strlt	r3, [r4, #20]
 8027364:	6963      	ldr	r3, [r4, #20]
 8027366:	079a      	lsls	r2, r3, #30
 8027368:	d11c      	bne.n	80273a4 <validate_structure+0xec>
 802736a:	2164      	movs	r1, #100	@ 0x64
 802736c:	fb93 f2f1 	sdiv	r2, r3, r1
 8027370:	fb01 3212 	mls	r2, r1, r2, r3
 8027374:	b9c2      	cbnz	r2, 80273a8 <validate_structure+0xf0>
 8027376:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 802737a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802737e:	fb93 f1f2 	sdiv	r1, r3, r2
 8027382:	fb02 3311 	mls	r3, r2, r1, r3
 8027386:	2b00      	cmp	r3, #0
 8027388:	bf14      	ite	ne
 802738a:	231c      	movne	r3, #28
 802738c:	231d      	moveq	r3, #29
 802738e:	68e2      	ldr	r2, [r4, #12]
 8027390:	2a00      	cmp	r2, #0
 8027392:	dc0b      	bgt.n	80273ac <validate_structure+0xf4>
 8027394:	200b      	movs	r0, #11
 8027396:	2164      	movs	r1, #100	@ 0x64
 8027398:	4d30      	ldr	r5, [pc, #192]	@ (802745c <validate_structure+0x1a4>)
 802739a:	68e6      	ldr	r6, [r4, #12]
 802739c:	2e00      	cmp	r6, #0
 802739e:	dd30      	ble.n	8027402 <validate_structure+0x14a>
 80273a0:	b003      	add	sp, #12
 80273a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80273a4:	231c      	movs	r3, #28
 80273a6:	e7f2      	b.n	802738e <validate_structure+0xd6>
 80273a8:	231d      	movs	r3, #29
 80273aa:	e7f0      	b.n	802738e <validate_structure+0xd6>
 80273ac:	4d2b      	ldr	r5, [pc, #172]	@ (802745c <validate_structure+0x1a4>)
 80273ae:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80273b2:	2a01      	cmp	r2, #1
 80273b4:	bf14      	ite	ne
 80273b6:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 80273ba:	4618      	moveq	r0, r3
 80273bc:	4281      	cmp	r1, r0
 80273be:	ddef      	ble.n	80273a0 <validate_structure+0xe8>
 80273c0:	3201      	adds	r2, #1
 80273c2:	1a09      	subs	r1, r1, r0
 80273c4:	2a0c      	cmp	r2, #12
 80273c6:	60e1      	str	r1, [r4, #12]
 80273c8:	6122      	str	r2, [r4, #16]
 80273ca:	d1f0      	bne.n	80273ae <validate_structure+0xf6>
 80273cc:	6963      	ldr	r3, [r4, #20]
 80273ce:	2100      	movs	r1, #0
 80273d0:	1c5a      	adds	r2, r3, #1
 80273d2:	6121      	str	r1, [r4, #16]
 80273d4:	0791      	lsls	r1, r2, #30
 80273d6:	6162      	str	r2, [r4, #20]
 80273d8:	d13c      	bne.n	8027454 <validate_structure+0x19c>
 80273da:	2164      	movs	r1, #100	@ 0x64
 80273dc:	fb92 f0f1 	sdiv	r0, r2, r1
 80273e0:	fb01 2210 	mls	r2, r1, r0, r2
 80273e4:	2a00      	cmp	r2, #0
 80273e6:	d137      	bne.n	8027458 <validate_structure+0x1a0>
 80273e8:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 80273ec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80273f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80273f4:	fb02 3311 	mls	r3, r2, r1, r3
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	bf14      	ite	ne
 80273fc:	231c      	movne	r3, #28
 80273fe:	231d      	moveq	r3, #29
 8027400:	e7d5      	b.n	80273ae <validate_structure+0xf6>
 8027402:	6922      	ldr	r2, [r4, #16]
 8027404:	3a01      	subs	r2, #1
 8027406:	6122      	str	r2, [r4, #16]
 8027408:	3201      	adds	r2, #1
 802740a:	d116      	bne.n	802743a <validate_structure+0x182>
 802740c:	6963      	ldr	r3, [r4, #20]
 802740e:	1e5a      	subs	r2, r3, #1
 8027410:	0797      	lsls	r7, r2, #30
 8027412:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8027416:	d119      	bne.n	802744c <validate_structure+0x194>
 8027418:	fb92 f7f1 	sdiv	r7, r2, r1
 802741c:	fb01 2217 	mls	r2, r1, r7, r2
 8027420:	b9b2      	cbnz	r2, 8027450 <validate_structure+0x198>
 8027422:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8027426:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 802742a:	fb93 f7f2 	sdiv	r7, r3, r2
 802742e:	fb02 3317 	mls	r3, r2, r7, r3
 8027432:	2b00      	cmp	r3, #0
 8027434:	bf14      	ite	ne
 8027436:	231c      	movne	r3, #28
 8027438:	231d      	moveq	r3, #29
 802743a:	6922      	ldr	r2, [r4, #16]
 802743c:	2a01      	cmp	r2, #1
 802743e:	bf14      	ite	ne
 8027440:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8027444:	461a      	moveq	r2, r3
 8027446:	4432      	add	r2, r6
 8027448:	60e2      	str	r2, [r4, #12]
 802744a:	e7a6      	b.n	802739a <validate_structure+0xe2>
 802744c:	231c      	movs	r3, #28
 802744e:	e7f4      	b.n	802743a <validate_structure+0x182>
 8027450:	231d      	movs	r3, #29
 8027452:	e7f2      	b.n	802743a <validate_structure+0x182>
 8027454:	231c      	movs	r3, #28
 8027456:	e7aa      	b.n	80273ae <validate_structure+0xf6>
 8027458:	231d      	movs	r3, #29
 802745a:	e7a8      	b.n	80273ae <validate_structure+0xf6>
 802745c:	08030488 	.word	0x08030488

08027460 <mktime>:
 8027460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027464:	4607      	mov	r7, r0
 8027466:	b085      	sub	sp, #20
 8027468:	f002 ffac 	bl	802a3c4 <__gettzinfo>
 802746c:	4681      	mov	r9, r0
 802746e:	4638      	mov	r0, r7
 8027470:	f7ff ff22 	bl	80272b8 <validate_structure>
 8027474:	223c      	movs	r2, #60	@ 0x3c
 8027476:	697d      	ldr	r5, [r7, #20]
 8027478:	e9d7 4300 	ldrd	r4, r3, [r7]
 802747c:	fb02 4403 	mla	r4, r2, r3, r4
 8027480:	68bb      	ldr	r3, [r7, #8]
 8027482:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8027486:	fb02 4403 	mla	r4, r2, r3, r4
 802748a:	4ac1      	ldr	r2, [pc, #772]	@ (8027790 <mktime+0x330>)
 802748c:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8027490:	3e01      	subs	r6, #1
 8027492:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8027496:	2b01      	cmp	r3, #1
 8027498:	4416      	add	r6, r2
 802749a:	dd11      	ble.n	80274c0 <mktime+0x60>
 802749c:	07a9      	lsls	r1, r5, #30
 802749e:	d10f      	bne.n	80274c0 <mktime+0x60>
 80274a0:	2264      	movs	r2, #100	@ 0x64
 80274a2:	fb95 f3f2 	sdiv	r3, r5, r2
 80274a6:	fb02 5313 	mls	r3, r2, r3, r5
 80274aa:	b943      	cbnz	r3, 80274be <mktime+0x5e>
 80274ac:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80274b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80274b4:	fb93 f1f2 	sdiv	r1, r3, r2
 80274b8:	fb02 3311 	mls	r3, r2, r1, r3
 80274bc:	b903      	cbnz	r3, 80274c0 <mktime+0x60>
 80274be:	3601      	adds	r6, #1
 80274c0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 80274c4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80274c8:	61fe      	str	r6, [r7, #28]
 80274ca:	3310      	adds	r3, #16
 80274cc:	4293      	cmp	r3, r2
 80274ce:	f200 8167 	bhi.w	80277a0 <mktime+0x340>
 80274d2:	2d46      	cmp	r5, #70	@ 0x46
 80274d4:	f340 808e 	ble.w	80275f4 <mktime+0x194>
 80274d8:	2346      	movs	r3, #70	@ 0x46
 80274da:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80274de:	2164      	movs	r1, #100	@ 0x64
 80274e0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80274e4:	079a      	lsls	r2, r3, #30
 80274e6:	d17f      	bne.n	80275e8 <mktime+0x188>
 80274e8:	fb93 f2f1 	sdiv	r2, r3, r1
 80274ec:	fb01 3212 	mls	r2, r1, r2, r3
 80274f0:	2a00      	cmp	r2, #0
 80274f2:	d17c      	bne.n	80275ee <mktime+0x18e>
 80274f4:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 80274f8:	fb92 fef0 	sdiv	lr, r2, r0
 80274fc:	fb00 221e 	mls	r2, r0, lr, r2
 8027500:	2a00      	cmp	r2, #0
 8027502:	bf14      	ite	ne
 8027504:	4662      	movne	r2, ip
 8027506:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 802750a:	3301      	adds	r3, #1
 802750c:	4416      	add	r6, r2
 802750e:	429d      	cmp	r5, r3
 8027510:	d1e8      	bne.n	80274e4 <mktime+0x84>
 8027512:	4ba0      	ldr	r3, [pc, #640]	@ (8027794 <mktime+0x334>)
 8027514:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8027518:	fbc6 4803 	smlal	r4, r8, r6, r3
 802751c:	f000 f9fa 	bl	8027914 <__tz_lock>
 8027520:	f000 fa04 	bl	802792c <_tzset_unlocked>
 8027524:	4b9c      	ldr	r3, [pc, #624]	@ (8027798 <mktime+0x338>)
 8027526:	681b      	ldr	r3, [r3, #0]
 8027528:	2b00      	cmp	r3, #0
 802752a:	f000 8140 	beq.w	80277ae <mktime+0x34e>
 802752e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8027532:	6978      	ldr	r0, [r7, #20]
 8027534:	4653      	mov	r3, sl
 8027536:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 802753a:	2b01      	cmp	r3, #1
 802753c:	bfa8      	it	ge
 802753e:	2301      	movge	r3, #1
 8027540:	9301      	str	r3, [sp, #4]
 8027542:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8027546:	4283      	cmp	r3, r0
 8027548:	f040 8096 	bne.w	8027678 <mktime+0x218>
 802754c:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8027550:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8027554:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8027558:	1a13      	subs	r3, r2, r0
 802755a:	9303      	str	r3, [sp, #12]
 802755c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8027560:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8027564:	9302      	str	r3, [sp, #8]
 8027566:	9a02      	ldr	r2, [sp, #8]
 8027568:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 802756c:	ebb2 0e03 	subs.w	lr, r2, r3
 8027570:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8027574:	4574      	cmp	r4, lr
 8027576:	eb78 0201 	sbcs.w	r2, r8, r1
 802757a:	f280 8085 	bge.w	8027688 <mktime+0x228>
 802757e:	f8d9 2000 	ldr.w	r2, [r9]
 8027582:	2a00      	cmp	r2, #0
 8027584:	f000 808d 	beq.w	80276a2 <mktime+0x242>
 8027588:	9a03      	ldr	r2, [sp, #12]
 802758a:	4294      	cmp	r4, r2
 802758c:	eb78 020b 	sbcs.w	r2, r8, fp
 8027590:	f2c0 810a 	blt.w	80277a8 <mktime+0x348>
 8027594:	4574      	cmp	r4, lr
 8027596:	eb78 0101 	sbcs.w	r1, r8, r1
 802759a:	bfb4      	ite	lt
 802759c:	f04f 0b01 	movlt.w	fp, #1
 80275a0:	f04f 0b00 	movge.w	fp, #0
 80275a4:	f1ba 0f00 	cmp.w	sl, #0
 80275a8:	f280 8087 	bge.w	80276ba <mktime+0x25a>
 80275ac:	f1bb 0f01 	cmp.w	fp, #1
 80275b0:	f040 80ff 	bne.w	80277b2 <mktime+0x352>
 80275b4:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 80275b8:	f04f 0b01 	mov.w	fp, #1
 80275bc:	191c      	adds	r4, r3, r4
 80275be:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80275c2:	f000 f9ad 	bl	8027920 <__tz_unlock>
 80275c6:	3604      	adds	r6, #4
 80275c8:	2307      	movs	r3, #7
 80275ca:	fb96 f3f3 	sdiv	r3, r6, r3
 80275ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80275d2:	1af6      	subs	r6, r6, r3
 80275d4:	f100 80e2 	bmi.w	802779c <mktime+0x33c>
 80275d8:	f8c7 b020 	str.w	fp, [r7, #32]
 80275dc:	61be      	str	r6, [r7, #24]
 80275de:	4620      	mov	r0, r4
 80275e0:	4641      	mov	r1, r8
 80275e2:	b005      	add	sp, #20
 80275e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275e8:	f240 126d 	movw	r2, #365	@ 0x16d
 80275ec:	e78d      	b.n	802750a <mktime+0xaa>
 80275ee:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80275f2:	e78a      	b.n	802750a <mktime+0xaa>
 80275f4:	d08d      	beq.n	8027512 <mktime+0xb2>
 80275f6:	2345      	movs	r3, #69	@ 0x45
 80275f8:	f240 1c6d 	movw	ip, #365	@ 0x16d
 80275fc:	2164      	movs	r1, #100	@ 0x64
 80275fe:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8027602:	e012      	b.n	802762a <mktime+0x1ca>
 8027604:	bb62      	cbnz	r2, 8027660 <mktime+0x200>
 8027606:	fb93 f2f1 	sdiv	r2, r3, r1
 802760a:	fb01 3212 	mls	r2, r1, r2, r3
 802760e:	bb52      	cbnz	r2, 8027666 <mktime+0x206>
 8027610:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8027614:	fb92 fef0 	sdiv	lr, r2, r0
 8027618:	fb00 221e 	mls	r2, r0, lr, r2
 802761c:	2a00      	cmp	r2, #0
 802761e:	bf14      	ite	ne
 8027620:	4662      	movne	r2, ip
 8027622:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8027626:	1ab6      	subs	r6, r6, r2
 8027628:	3b01      	subs	r3, #1
 802762a:	429d      	cmp	r5, r3
 802762c:	f003 0203 	and.w	r2, r3, #3
 8027630:	dbe8      	blt.n	8027604 <mktime+0x1a4>
 8027632:	b9da      	cbnz	r2, 802766c <mktime+0x20c>
 8027634:	2264      	movs	r2, #100	@ 0x64
 8027636:	fb95 f3f2 	sdiv	r3, r5, r2
 802763a:	fb02 5313 	mls	r3, r2, r3, r5
 802763e:	b9c3      	cbnz	r3, 8027672 <mktime+0x212>
 8027640:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8027644:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8027648:	fb93 f1f2 	sdiv	r1, r3, r2
 802764c:	fb02 3311 	mls	r3, r2, r1, r3
 8027650:	2b00      	cmp	r3, #0
 8027652:	f240 136d 	movw	r3, #365	@ 0x16d
 8027656:	bf08      	it	eq
 8027658:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 802765c:	1af6      	subs	r6, r6, r3
 802765e:	e758      	b.n	8027512 <mktime+0xb2>
 8027660:	f240 126d 	movw	r2, #365	@ 0x16d
 8027664:	e7df      	b.n	8027626 <mktime+0x1c6>
 8027666:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 802766a:	e7dc      	b.n	8027626 <mktime+0x1c6>
 802766c:	f240 136d 	movw	r3, #365	@ 0x16d
 8027670:	e7f4      	b.n	802765c <mktime+0x1fc>
 8027672:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8027676:	e7f1      	b.n	802765c <mktime+0x1fc>
 8027678:	f000 f8a2 	bl	80277c0 <__tzcalc_limits>
 802767c:	2800      	cmp	r0, #0
 802767e:	f47f af65 	bne.w	802754c <mktime+0xec>
 8027682:	f8dd b004 	ldr.w	fp, [sp, #4]
 8027686:	e791      	b.n	80275ac <mktime+0x14c>
 8027688:	9a02      	ldr	r2, [sp, #8]
 802768a:	1a12      	subs	r2, r2, r0
 802768c:	9202      	str	r2, [sp, #8]
 802768e:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8027692:	eb6c 0c02 	sbc.w	ip, ip, r2
 8027696:	9a02      	ldr	r2, [sp, #8]
 8027698:	4294      	cmp	r4, r2
 802769a:	eb78 0c0c 	sbcs.w	ip, r8, ip
 802769e:	dbf0      	blt.n	8027682 <mktime+0x222>
 80276a0:	e76d      	b.n	802757e <mktime+0x11e>
 80276a2:	9a03      	ldr	r2, [sp, #12]
 80276a4:	4294      	cmp	r4, r2
 80276a6:	eb78 020b 	sbcs.w	r2, r8, fp
 80276aa:	f6ff af73 	blt.w	8027594 <mktime+0x134>
 80276ae:	f1ba 0f00 	cmp.w	sl, #0
 80276b2:	f6ff af7f 	blt.w	80275b4 <mktime+0x154>
 80276b6:	f04f 0b01 	mov.w	fp, #1
 80276ba:	9a01      	ldr	r2, [sp, #4]
 80276bc:	ea82 020b 	eor.w	r2, r2, fp
 80276c0:	2a01      	cmp	r2, #1
 80276c2:	f47f af73 	bne.w	80275ac <mktime+0x14c>
 80276c6:	f1bb 0f00 	cmp.w	fp, #0
 80276ca:	d035      	beq.n	8027738 <mktime+0x2d8>
 80276cc:	1a1b      	subs	r3, r3, r0
 80276ce:	683a      	ldr	r2, [r7, #0]
 80276d0:	191c      	adds	r4, r3, r4
 80276d2:	4638      	mov	r0, r7
 80276d4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80276d8:	441a      	add	r2, r3
 80276da:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80276de:	603a      	str	r2, [r7, #0]
 80276e0:	f7ff fdea 	bl	80272b8 <validate_structure>
 80276e4:	68fa      	ldr	r2, [r7, #12]
 80276e6:	ebb2 020a 	subs.w	r2, r2, sl
 80276ea:	f43f af5f 	beq.w	80275ac <mktime+0x14c>
 80276ee:	2a01      	cmp	r2, #1
 80276f0:	dc24      	bgt.n	802773c <mktime+0x2dc>
 80276f2:	1c93      	adds	r3, r2, #2
 80276f4:	bfd8      	it	le
 80276f6:	2201      	movle	r2, #1
 80276f8:	69fb      	ldr	r3, [r7, #28]
 80276fa:	18d3      	adds	r3, r2, r3
 80276fc:	d527      	bpl.n	802774e <mktime+0x2ee>
 80276fe:	1e6b      	subs	r3, r5, #1
 8027700:	0798      	lsls	r0, r3, #30
 8027702:	d11e      	bne.n	8027742 <mktime+0x2e2>
 8027704:	2164      	movs	r1, #100	@ 0x64
 8027706:	fb93 f0f1 	sdiv	r0, r3, r1
 802770a:	fb01 3310 	mls	r3, r1, r0, r3
 802770e:	b9db      	cbnz	r3, 8027748 <mktime+0x2e8>
 8027710:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8027714:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8027718:	fb95 f1f3 	sdiv	r1, r5, r3
 802771c:	fb03 5511 	mls	r5, r3, r1, r5
 8027720:	f240 136d 	movw	r3, #365	@ 0x16d
 8027724:	2d00      	cmp	r5, #0
 8027726:	bf18      	it	ne
 8027728:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 802772c:	4416      	add	r6, r2
 802772e:	61fb      	str	r3, [r7, #28]
 8027730:	e73c      	b.n	80275ac <mktime+0x14c>
 8027732:	f04f 0b00 	mov.w	fp, #0
 8027736:	e7c0      	b.n	80276ba <mktime+0x25a>
 8027738:	1ac3      	subs	r3, r0, r3
 802773a:	e7c8      	b.n	80276ce <mktime+0x26e>
 802773c:	f04f 32ff 	mov.w	r2, #4294967295
 8027740:	e7da      	b.n	80276f8 <mktime+0x298>
 8027742:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8027746:	e7f1      	b.n	802772c <mktime+0x2cc>
 8027748:	f240 136d 	movw	r3, #365	@ 0x16d
 802774c:	e7ee      	b.n	802772c <mktime+0x2cc>
 802774e:	07a9      	lsls	r1, r5, #30
 8027750:	d117      	bne.n	8027782 <mktime+0x322>
 8027752:	2064      	movs	r0, #100	@ 0x64
 8027754:	fb95 f1f0 	sdiv	r1, r5, r0
 8027758:	fb00 5111 	mls	r1, r0, r1, r5
 802775c:	b9a1      	cbnz	r1, 8027788 <mktime+0x328>
 802775e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8027762:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 8027766:	fb95 f0f1 	sdiv	r0, r5, r1
 802776a:	fb01 5510 	mls	r5, r1, r0, r5
 802776e:	f240 116d 	movw	r1, #365	@ 0x16d
 8027772:	2d00      	cmp	r5, #0
 8027774:	bf08      	it	eq
 8027776:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 802777a:	428b      	cmp	r3, r1
 802777c:	bfa8      	it	ge
 802777e:	1a5b      	subge	r3, r3, r1
 8027780:	e7d4      	b.n	802772c <mktime+0x2cc>
 8027782:	f240 116d 	movw	r1, #365	@ 0x16d
 8027786:	e7f8      	b.n	802777a <mktime+0x31a>
 8027788:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 802778c:	e7f5      	b.n	802777a <mktime+0x31a>
 802778e:	bf00      	nop
 8027790:	08030458 	.word	0x08030458
 8027794:	00015180 	.word	0x00015180
 8027798:	200bbce8 	.word	0x200bbce8
 802779c:	3607      	adds	r6, #7
 802779e:	e71b      	b.n	80275d8 <mktime+0x178>
 80277a0:	f04f 34ff 	mov.w	r4, #4294967295
 80277a4:	46a0      	mov	r8, r4
 80277a6:	e71a      	b.n	80275de <mktime+0x17e>
 80277a8:	f1ba 0f00 	cmp.w	sl, #0
 80277ac:	dac1      	bge.n	8027732 <mktime+0x2d2>
 80277ae:	f04f 0b00 	mov.w	fp, #0
 80277b2:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80277b6:	191c      	adds	r4, r3, r4
 80277b8:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80277bc:	e701      	b.n	80275c2 <mktime+0x162>
 80277be:	bf00      	nop

080277c0 <__tzcalc_limits>:
 80277c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80277c4:	4604      	mov	r4, r0
 80277c6:	f002 fdfd 	bl	802a3c4 <__gettzinfo>
 80277ca:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 80277ce:	429c      	cmp	r4, r3
 80277d0:	f340 8099 	ble.w	8027906 <__tzcalc_limits+0x146>
 80277d4:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 80277d8:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 80277dc:	f240 126d 	movw	r2, #365	@ 0x16d
 80277e0:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 80277e4:	19e5      	adds	r5, r4, r7
 80277e6:	4601      	mov	r1, r0
 80277e8:	4f48      	ldr	r7, [pc, #288]	@ (802790c <__tzcalc_limits+0x14c>)
 80277ea:	10ad      	asrs	r5, r5, #2
 80277ec:	6044      	str	r4, [r0, #4]
 80277ee:	fb02 5503 	mla	r5, r2, r3, r5
 80277f2:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 80277f6:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 80277fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80277fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8027802:	441d      	add	r5, r3
 8027804:	eb04 030c 	add.w	r3, r4, ip
 8027808:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 802780c:	fbb3 f3f2 	udiv	r3, r3, r2
 8027810:	441d      	add	r5, r3
 8027812:	7a0b      	ldrb	r3, [r1, #8]
 8027814:	694a      	ldr	r2, [r1, #20]
 8027816:	2b4a      	cmp	r3, #74	@ 0x4a
 8027818:	d133      	bne.n	8027882 <__tzcalc_limits+0xc2>
 802781a:	07a6      	lsls	r6, r4, #30
 802781c:	eb05 0302 	add.w	r3, r5, r2
 8027820:	d106      	bne.n	8027830 <__tzcalc_limits+0x70>
 8027822:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8027826:	fb94 f6fe 	sdiv	r6, r4, lr
 802782a:	fb0e 4616 	mls	r6, lr, r6, r4
 802782e:	b936      	cbnz	r6, 802783e <__tzcalc_limits+0x7e>
 8027830:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8027834:	fb94 f6fe 	sdiv	r6, r4, lr
 8027838:	fb0e 4616 	mls	r6, lr, r6, r4
 802783c:	b9fe      	cbnz	r6, 802787e <__tzcalc_limits+0xbe>
 802783e:	2a3b      	cmp	r2, #59	@ 0x3b
 8027840:	bfd4      	ite	le
 8027842:	2200      	movle	r2, #0
 8027844:	2201      	movgt	r2, #1
 8027846:	4413      	add	r3, r2
 8027848:	3b01      	subs	r3, #1
 802784a:	698a      	ldr	r2, [r1, #24]
 802784c:	17d6      	asrs	r6, r2, #31
 802784e:	fbc3 2607 	smlal	r2, r6, r3, r7
 8027852:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8027854:	18d2      	adds	r2, r2, r3
 8027856:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 802785a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 802785e:	3128      	adds	r1, #40	@ 0x28
 8027860:	458c      	cmp	ip, r1
 8027862:	d1d6      	bne.n	8027812 <__tzcalc_limits+0x52>
 8027864:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8027868:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 802786c:	428c      	cmp	r4, r1
 802786e:	4193      	sbcs	r3, r2
 8027870:	bfb4      	ite	lt
 8027872:	2301      	movlt	r3, #1
 8027874:	2300      	movge	r3, #0
 8027876:	6003      	str	r3, [r0, #0]
 8027878:	2001      	movs	r0, #1
 802787a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802787e:	2200      	movs	r2, #0
 8027880:	e7e1      	b.n	8027846 <__tzcalc_limits+0x86>
 8027882:	2b44      	cmp	r3, #68	@ 0x44
 8027884:	d101      	bne.n	802788a <__tzcalc_limits+0xca>
 8027886:	18ab      	adds	r3, r5, r2
 8027888:	e7df      	b.n	802784a <__tzcalc_limits+0x8a>
 802788a:	07a3      	lsls	r3, r4, #30
 802788c:	d105      	bne.n	802789a <__tzcalc_limits+0xda>
 802788e:	2664      	movs	r6, #100	@ 0x64
 8027890:	fb94 f3f6 	sdiv	r3, r4, r6
 8027894:	fb06 4313 	mls	r3, r6, r3, r4
 8027898:	bb7b      	cbnz	r3, 80278fa <__tzcalc_limits+0x13a>
 802789a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 802789e:	fb94 f6f3 	sdiv	r6, r4, r3
 80278a2:	fb03 4616 	mls	r6, r3, r6, r4
 80278a6:	fab6 f686 	clz	r6, r6
 80278aa:	0976      	lsrs	r6, r6, #5
 80278ac:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 80278b0:	f8df e05c 	ldr.w	lr, [pc, #92]	@ 8027910 <__tzcalc_limits+0x150>
 80278b4:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80278b8:	462b      	mov	r3, r5
 80278ba:	f04f 0800 	mov.w	r8, #0
 80278be:	fb0a e606 	mla	r6, sl, r6, lr
 80278c2:	f108 0801 	add.w	r8, r8, #1
 80278c6:	45c1      	cmp	r9, r8
 80278c8:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 80278cc:	dc17      	bgt.n	80278fe <__tzcalc_limits+0x13e>
 80278ce:	f103 0804 	add.w	r8, r3, #4
 80278d2:	2607      	movs	r6, #7
 80278d4:	fb98 f6f6 	sdiv	r6, r8, r6
 80278d8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80278dc:	eba8 0606 	sub.w	r6, r8, r6
 80278e0:	1b92      	subs	r2, r2, r6
 80278e2:	690e      	ldr	r6, [r1, #16]
 80278e4:	f106 36ff 	add.w	r6, r6, #4294967295
 80278e8:	bf48      	it	mi
 80278ea:	3207      	addmi	r2, #7
 80278ec:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80278f0:	4432      	add	r2, r6
 80278f2:	4572      	cmp	r2, lr
 80278f4:	da05      	bge.n	8027902 <__tzcalc_limits+0x142>
 80278f6:	4413      	add	r3, r2
 80278f8:	e7a7      	b.n	802784a <__tzcalc_limits+0x8a>
 80278fa:	2601      	movs	r6, #1
 80278fc:	e7d6      	b.n	80278ac <__tzcalc_limits+0xec>
 80278fe:	4473      	add	r3, lr
 8027900:	e7df      	b.n	80278c2 <__tzcalc_limits+0x102>
 8027902:	3a07      	subs	r2, #7
 8027904:	e7f5      	b.n	80278f2 <__tzcalc_limits+0x132>
 8027906:	2000      	movs	r0, #0
 8027908:	e7b7      	b.n	802787a <__tzcalc_limits+0xba>
 802790a:	bf00      	nop
 802790c:	00015180 	.word	0x00015180
 8027910:	08030760 	.word	0x08030760

08027914 <__tz_lock>:
 8027914:	4801      	ldr	r0, [pc, #4]	@ (802791c <__tz_lock+0x8>)
 8027916:	f000 baa8 	b.w	8027e6a <__retarget_lock_acquire>
 802791a:	bf00      	nop
 802791c:	200bbcf0 	.word	0x200bbcf0

08027920 <__tz_unlock>:
 8027920:	4801      	ldr	r0, [pc, #4]	@ (8027928 <__tz_unlock+0x8>)
 8027922:	f000 baa4 	b.w	8027e6e <__retarget_lock_release>
 8027926:	bf00      	nop
 8027928:	200bbcf0 	.word	0x200bbcf0

0802792c <_tzset_unlocked>:
 802792c:	4b01      	ldr	r3, [pc, #4]	@ (8027934 <_tzset_unlocked+0x8>)
 802792e:	6818      	ldr	r0, [r3, #0]
 8027930:	f000 b802 	b.w	8027938 <_tzset_unlocked_r>
 8027934:	20000508 	.word	0x20000508

08027938 <_tzset_unlocked_r>:
 8027938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802793c:	4607      	mov	r7, r0
 802793e:	b08d      	sub	sp, #52	@ 0x34
 8027940:	f002 fd40 	bl	802a3c4 <__gettzinfo>
 8027944:	49bc      	ldr	r1, [pc, #752]	@ (8027c38 <_tzset_unlocked_r+0x300>)
 8027946:	4604      	mov	r4, r0
 8027948:	4638      	mov	r0, r7
 802794a:	f001 fcd9 	bl	8029300 <_getenv_r>
 802794e:	4dbb      	ldr	r5, [pc, #748]	@ (8027c3c <_tzset_unlocked_r+0x304>)
 8027950:	4606      	mov	r6, r0
 8027952:	bb10      	cbnz	r0, 802799a <_tzset_unlocked_r+0x62>
 8027954:	4bba      	ldr	r3, [pc, #744]	@ (8027c40 <_tzset_unlocked_r+0x308>)
 8027956:	214a      	movs	r1, #74	@ 0x4a
 8027958:	4aba      	ldr	r2, [pc, #744]	@ (8027c44 <_tzset_unlocked_r+0x30c>)
 802795a:	6018      	str	r0, [r3, #0]
 802795c:	4bba      	ldr	r3, [pc, #744]	@ (8027c48 <_tzset_unlocked_r+0x310>)
 802795e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8027960:	6018      	str	r0, [r3, #0]
 8027962:	4bba      	ldr	r3, [pc, #744]	@ (8027c4c <_tzset_unlocked_r+0x314>)
 8027964:	6520      	str	r0, [r4, #80]	@ 0x50
 8027966:	7221      	strb	r1, [r4, #8]
 8027968:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 802796c:	e9c3 2200 	strd	r2, r2, [r3]
 8027970:	2200      	movs	r2, #0
 8027972:	2300      	movs	r3, #0
 8027974:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8027978:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802797c:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 8027980:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8027984:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8027988:	6828      	ldr	r0, [r5, #0]
 802798a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 802798e:	f001 fcc7 	bl	8029320 <free>
 8027992:	602e      	str	r6, [r5, #0]
 8027994:	b00d      	add	sp, #52	@ 0x34
 8027996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802799a:	6829      	ldr	r1, [r5, #0]
 802799c:	2900      	cmp	r1, #0
 802799e:	f040 808e 	bne.w	8027abe <_tzset_unlocked_r+0x186>
 80279a2:	6828      	ldr	r0, [r5, #0]
 80279a4:	f001 fcbc 	bl	8029320 <free>
 80279a8:	4630      	mov	r0, r6
 80279aa:	f7d8 fc6f 	bl	800028c <strlen>
 80279ae:	1c41      	adds	r1, r0, #1
 80279b0:	4638      	mov	r0, r7
 80279b2:	f001 fcdf 	bl	8029374 <_malloc_r>
 80279b6:	6028      	str	r0, [r5, #0]
 80279b8:	2800      	cmp	r0, #0
 80279ba:	f040 8086 	bne.w	8027aca <_tzset_unlocked_r+0x192>
 80279be:	2300      	movs	r3, #0
 80279c0:	4aa1      	ldr	r2, [pc, #644]	@ (8027c48 <_tzset_unlocked_r+0x310>)
 80279c2:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8027c4c <_tzset_unlocked_r+0x314>
 80279c6:	2000      	movs	r0, #0
 80279c8:	6013      	str	r3, [r2, #0]
 80279ca:	2100      	movs	r1, #0
 80279cc:	4aa0      	ldr	r2, [pc, #640]	@ (8027c50 <_tzset_unlocked_r+0x318>)
 80279ce:	f8df a270 	ldr.w	sl, [pc, #624]	@ 8027c40 <_tzset_unlocked_r+0x308>
 80279d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80279d4:	f8ca 3000 	str.w	r3, [sl]
 80279d8:	6523      	str	r3, [r4, #80]	@ 0x50
 80279da:	e9c8 2200 	strd	r2, r2, [r8]
 80279de:	224a      	movs	r2, #74	@ 0x4a
 80279e0:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80279e4:	7222      	strb	r2, [r4, #8]
 80279e6:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 80279ea:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80279ee:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80279f2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80279f6:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 80279fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 80279fe:	7833      	ldrb	r3, [r6, #0]
 8027a00:	2b3a      	cmp	r3, #58	@ 0x3a
 8027a02:	bf08      	it	eq
 8027a04:	3601      	addeq	r6, #1
 8027a06:	7833      	ldrb	r3, [r6, #0]
 8027a08:	2b3c      	cmp	r3, #60	@ 0x3c
 8027a0a:	d162      	bne.n	8027ad2 <_tzset_unlocked_r+0x19a>
 8027a0c:	1c75      	adds	r5, r6, #1
 8027a0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8027a10:	4a90      	ldr	r2, [pc, #576]	@ (8027c54 <_tzset_unlocked_r+0x31c>)
 8027a12:	4991      	ldr	r1, [pc, #580]	@ (8027c58 <_tzset_unlocked_r+0x320>)
 8027a14:	4628      	mov	r0, r5
 8027a16:	f002 fc91 	bl	802a33c <siscanf>
 8027a1a:	2800      	cmp	r0, #0
 8027a1c:	ddba      	ble.n	8027994 <_tzset_unlocked_r+0x5c>
 8027a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a20:	1eda      	subs	r2, r3, #3
 8027a22:	2a07      	cmp	r2, #7
 8027a24:	d8b6      	bhi.n	8027994 <_tzset_unlocked_r+0x5c>
 8027a26:	5ceb      	ldrb	r3, [r5, r3]
 8027a28:	2b3e      	cmp	r3, #62	@ 0x3e
 8027a2a:	d1b3      	bne.n	8027994 <_tzset_unlocked_r+0x5c>
 8027a2c:	3602      	adds	r6, #2
 8027a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a30:	18f5      	adds	r5, r6, r3
 8027a32:	5cf3      	ldrb	r3, [r6, r3]
 8027a34:	2b2d      	cmp	r3, #45	@ 0x2d
 8027a36:	d15a      	bne.n	8027aee <_tzset_unlocked_r+0x1b6>
 8027a38:	3501      	adds	r5, #1
 8027a3a:	f04f 39ff 	mov.w	r9, #4294967295
 8027a3e:	2300      	movs	r3, #0
 8027a40:	af08      	add	r7, sp, #32
 8027a42:	aa07      	add	r2, sp, #28
 8027a44:	4985      	ldr	r1, [pc, #532]	@ (8027c5c <_tzset_unlocked_r+0x324>)
 8027a46:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027a4a:	4628      	mov	r0, r5
 8027a4c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027a50:	ab0a      	add	r3, sp, #40	@ 0x28
 8027a52:	9303      	str	r3, [sp, #12]
 8027a54:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8027a58:	f10d 031e 	add.w	r3, sp, #30
 8027a5c:	9300      	str	r3, [sp, #0]
 8027a5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8027a60:	f002 fc6c 	bl	802a33c <siscanf>
 8027a64:	2800      	cmp	r0, #0
 8027a66:	dd95      	ble.n	8027994 <_tzset_unlocked_r+0x5c>
 8027a68:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8027a6c:	223c      	movs	r2, #60	@ 0x3c
 8027a6e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8027a72:	fb02 6603 	mla	r6, r2, r3, r6
 8027a76:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8027a7a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8027a7e:	fb02 6603 	mla	r6, r2, r3, r6
 8027a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027a84:	fb09 f606 	mul.w	r6, r9, r6
 8027a88:	eb05 0903 	add.w	r9, r5, r3
 8027a8c:	5ceb      	ldrb	r3, [r5, r3]
 8027a8e:	2b3c      	cmp	r3, #60	@ 0x3c
 8027a90:	f040 80ee 	bne.w	8027c70 <_tzset_unlocked_r+0x338>
 8027a94:	f109 0501 	add.w	r5, r9, #1
 8027a98:	ab0a      	add	r3, sp, #40	@ 0x28
 8027a9a:	4a71      	ldr	r2, [pc, #452]	@ (8027c60 <_tzset_unlocked_r+0x328>)
 8027a9c:	496e      	ldr	r1, [pc, #440]	@ (8027c58 <_tzset_unlocked_r+0x320>)
 8027a9e:	4628      	mov	r0, r5
 8027aa0:	f002 fc4c 	bl	802a33c <siscanf>
 8027aa4:	2800      	cmp	r0, #0
 8027aa6:	dc28      	bgt.n	8027afa <_tzset_unlocked_r+0x1c2>
 8027aa8:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027aac:	2b3e      	cmp	r3, #62	@ 0x3e
 8027aae:	d124      	bne.n	8027afa <_tzset_unlocked_r+0x1c2>
 8027ab0:	4b68      	ldr	r3, [pc, #416]	@ (8027c54 <_tzset_unlocked_r+0x31c>)
 8027ab2:	62a6      	str	r6, [r4, #40]	@ 0x28
 8027ab4:	f8ca 6000 	str.w	r6, [sl]
 8027ab8:	e9c8 3300 	strd	r3, r3, [r8]
 8027abc:	e76a      	b.n	8027994 <_tzset_unlocked_r+0x5c>
 8027abe:	f7d8 fbdb 	bl	8000278 <strcmp>
 8027ac2:	2800      	cmp	r0, #0
 8027ac4:	f47f af6d 	bne.w	80279a2 <_tzset_unlocked_r+0x6a>
 8027ac8:	e764      	b.n	8027994 <_tzset_unlocked_r+0x5c>
 8027aca:	4631      	mov	r1, r6
 8027acc:	f000 f9d1 	bl	8027e72 <strcpy>
 8027ad0:	e775      	b.n	80279be <_tzset_unlocked_r+0x86>
 8027ad2:	ab0a      	add	r3, sp, #40	@ 0x28
 8027ad4:	4a5f      	ldr	r2, [pc, #380]	@ (8027c54 <_tzset_unlocked_r+0x31c>)
 8027ad6:	4963      	ldr	r1, [pc, #396]	@ (8027c64 <_tzset_unlocked_r+0x32c>)
 8027ad8:	4630      	mov	r0, r6
 8027ada:	f002 fc2f 	bl	802a33c <siscanf>
 8027ade:	2800      	cmp	r0, #0
 8027ae0:	f77f af58 	ble.w	8027994 <_tzset_unlocked_r+0x5c>
 8027ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027ae6:	3b03      	subs	r3, #3
 8027ae8:	2b07      	cmp	r3, #7
 8027aea:	d9a0      	bls.n	8027a2e <_tzset_unlocked_r+0xf6>
 8027aec:	e752      	b.n	8027994 <_tzset_unlocked_r+0x5c>
 8027aee:	2b2b      	cmp	r3, #43	@ 0x2b
 8027af0:	f04f 0901 	mov.w	r9, #1
 8027af4:	bf08      	it	eq
 8027af6:	3501      	addeq	r5, #1
 8027af8:	e7a1      	b.n	8027a3e <_tzset_unlocked_r+0x106>
 8027afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027afc:	1eda      	subs	r2, r3, #3
 8027afe:	2a07      	cmp	r2, #7
 8027b00:	f63f af48 	bhi.w	8027994 <_tzset_unlocked_r+0x5c>
 8027b04:	5ceb      	ldrb	r3, [r5, r3]
 8027b06:	2b3e      	cmp	r3, #62	@ 0x3e
 8027b08:	f47f af44 	bne.w	8027994 <_tzset_unlocked_r+0x5c>
 8027b0c:	f109 0902 	add.w	r9, r9, #2
 8027b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027b12:	eb09 0503 	add.w	r5, r9, r3
 8027b16:	f819 3003 	ldrb.w	r3, [r9, r3]
 8027b1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8027b1c:	f040 80b7 	bne.w	8027c8e <_tzset_unlocked_r+0x356>
 8027b20:	3501      	adds	r5, #1
 8027b22:	f04f 39ff 	mov.w	r9, #4294967295
 8027b26:	2300      	movs	r3, #0
 8027b28:	aa07      	add	r2, sp, #28
 8027b2a:	494c      	ldr	r1, [pc, #304]	@ (8027c5c <_tzset_unlocked_r+0x324>)
 8027b2c:	4628      	mov	r0, r5
 8027b2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027b32:	f8ad 301e 	strh.w	r3, [sp, #30]
 8027b36:	f8ad 3020 	strh.w	r3, [sp, #32]
 8027b3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8027b3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8027b3e:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8027b42:	9301      	str	r3, [sp, #4]
 8027b44:	f10d 031e 	add.w	r3, sp, #30
 8027b48:	9300      	str	r3, [sp, #0]
 8027b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8027b4c:	f002 fbf6 	bl	802a33c <siscanf>
 8027b50:	2800      	cmp	r0, #0
 8027b52:	f300 80a2 	bgt.w	8027c9a <_tzset_unlocked_r+0x362>
 8027b56:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8027b5a:	9304      	str	r3, [sp, #16]
 8027b5c:	4627      	mov	r7, r4
 8027b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027b60:	f04f 0b00 	mov.w	fp, #0
 8027b64:	441d      	add	r5, r3
 8027b66:	782b      	ldrb	r3, [r5, #0]
 8027b68:	2b2c      	cmp	r3, #44	@ 0x2c
 8027b6a:	bf08      	it	eq
 8027b6c:	3501      	addeq	r5, #1
 8027b6e:	f895 9000 	ldrb.w	r9, [r5]
 8027b72:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8027b76:	f040 80a3 	bne.w	8027cc0 <_tzset_unlocked_r+0x388>
 8027b7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8027b7c:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8027b80:	4939      	ldr	r1, [pc, #228]	@ (8027c68 <_tzset_unlocked_r+0x330>)
 8027b82:	4628      	mov	r0, r5
 8027b84:	9303      	str	r3, [sp, #12]
 8027b86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8027b8a:	aa09      	add	r2, sp, #36	@ 0x24
 8027b8c:	9200      	str	r2, [sp, #0]
 8027b8e:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8027b92:	f002 fbd3 	bl	802a33c <siscanf>
 8027b96:	2803      	cmp	r0, #3
 8027b98:	f47f aefc 	bne.w	8027994 <_tzset_unlocked_r+0x5c>
 8027b9c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8027ba0:	1e4b      	subs	r3, r1, #1
 8027ba2:	2b0b      	cmp	r3, #11
 8027ba4:	f63f aef6 	bhi.w	8027994 <_tzset_unlocked_r+0x5c>
 8027ba8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8027bac:	1e53      	subs	r3, r2, #1
 8027bae:	2b04      	cmp	r3, #4
 8027bb0:	f63f aef0 	bhi.w	8027994 <_tzset_unlocked_r+0x5c>
 8027bb4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8027bb8:	2b06      	cmp	r3, #6
 8027bba:	f63f aeeb 	bhi.w	8027994 <_tzset_unlocked_r+0x5c>
 8027bbe:	f887 9008 	strb.w	r9, [r7, #8]
 8027bc2:	617b      	str	r3, [r7, #20]
 8027bc4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8027bc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027bca:	eb05 0903 	add.w	r9, r5, r3
 8027bce:	2500      	movs	r5, #0
 8027bd0:	f04f 0302 	mov.w	r3, #2
 8027bd4:	f8ad 501e 	strh.w	r5, [sp, #30]
 8027bd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8027bdc:	f8ad 5020 	strh.w	r5, [sp, #32]
 8027be0:	950a      	str	r5, [sp, #40]	@ 0x28
 8027be2:	f899 3000 	ldrb.w	r3, [r9]
 8027be6:	2b2f      	cmp	r3, #47	@ 0x2f
 8027be8:	f040 8097 	bne.w	8027d1a <_tzset_unlocked_r+0x3e2>
 8027bec:	ab0a      	add	r3, sp, #40	@ 0x28
 8027bee:	aa08      	add	r2, sp, #32
 8027bf0:	491e      	ldr	r1, [pc, #120]	@ (8027c6c <_tzset_unlocked_r+0x334>)
 8027bf2:	4648      	mov	r0, r9
 8027bf4:	9303      	str	r3, [sp, #12]
 8027bf6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8027bfa:	f10d 021e 	add.w	r2, sp, #30
 8027bfe:	9200      	str	r2, [sp, #0]
 8027c00:	aa07      	add	r2, sp, #28
 8027c02:	f002 fb9b 	bl	802a33c <siscanf>
 8027c06:	42a8      	cmp	r0, r5
 8027c08:	f300 8087 	bgt.w	8027d1a <_tzset_unlocked_r+0x3e2>
 8027c0c:	214a      	movs	r1, #74	@ 0x4a
 8027c0e:	2200      	movs	r2, #0
 8027c10:	2300      	movs	r3, #0
 8027c12:	62a5      	str	r5, [r4, #40]	@ 0x28
 8027c14:	7221      	strb	r1, [r4, #8]
 8027c16:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8027c1a:	6525      	str	r5, [r4, #80]	@ 0x50
 8027c1c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8027c20:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8027c24:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8027c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8027c2c:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8027c30:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8027c34:	e6ae      	b.n	8027994 <_tzset_unlocked_r+0x5c>
 8027c36:	bf00      	nop
 8027c38:	080304b8 	.word	0x080304b8
 8027c3c:	200bbcc8 	.word	0x200bbcc8
 8027c40:	200bbce4 	.word	0x200bbce4
 8027c44:	080304bb 	.word	0x080304bb
 8027c48:	200bbce8 	.word	0x200bbce8
 8027c4c:	20000394 	.word	0x20000394
 8027c50:	080307ff 	.word	0x080307ff
 8027c54:	200bbcd8 	.word	0x200bbcd8
 8027c58:	080304bf 	.word	0x080304bf
 8027c5c:	080304f4 	.word	0x080304f4
 8027c60:	200bbccc 	.word	0x200bbccc
 8027c64:	080304d2 	.word	0x080304d2
 8027c68:	080304e0 	.word	0x080304e0
 8027c6c:	080304f3 	.word	0x080304f3
 8027c70:	ab0a      	add	r3, sp, #40	@ 0x28
 8027c72:	4a3f      	ldr	r2, [pc, #252]	@ (8027d70 <_tzset_unlocked_r+0x438>)
 8027c74:	493f      	ldr	r1, [pc, #252]	@ (8027d74 <_tzset_unlocked_r+0x43c>)
 8027c76:	4648      	mov	r0, r9
 8027c78:	f002 fb60 	bl	802a33c <siscanf>
 8027c7c:	2800      	cmp	r0, #0
 8027c7e:	f77f af17 	ble.w	8027ab0 <_tzset_unlocked_r+0x178>
 8027c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8027c84:	3b03      	subs	r3, #3
 8027c86:	2b07      	cmp	r3, #7
 8027c88:	f67f af42 	bls.w	8027b10 <_tzset_unlocked_r+0x1d8>
 8027c8c:	e682      	b.n	8027994 <_tzset_unlocked_r+0x5c>
 8027c8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8027c90:	f04f 0901 	mov.w	r9, #1
 8027c94:	bf08      	it	eq
 8027c96:	3501      	addeq	r5, #1
 8027c98:	e745      	b.n	8027b26 <_tzset_unlocked_r+0x1ee>
 8027c9a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027c9e:	213c      	movs	r1, #60	@ 0x3c
 8027ca0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027ca4:	fb01 3302 	mla	r3, r1, r2, r3
 8027ca8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027cac:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8027cb0:	fb01 3302 	mla	r3, r1, r2, r3
 8027cb4:	fb09 f303 	mul.w	r3, r9, r3
 8027cb8:	e74f      	b.n	8027b5a <_tzset_unlocked_r+0x222>
 8027cba:	f04f 0b01 	mov.w	fp, #1
 8027cbe:	e752      	b.n	8027b66 <_tzset_unlocked_r+0x22e>
 8027cc0:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8027cc4:	f04f 020a 	mov.w	r2, #10
 8027cc8:	a90b      	add	r1, sp, #44	@ 0x2c
 8027cca:	bf06      	itte	eq
 8027ccc:	3501      	addeq	r5, #1
 8027cce:	464b      	moveq	r3, r9
 8027cd0:	2344      	movne	r3, #68	@ 0x44
 8027cd2:	4628      	mov	r0, r5
 8027cd4:	9305      	str	r3, [sp, #20]
 8027cd6:	f002 f917 	bl	8029f08 <strtoul>
 8027cda:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8027cde:	9b05      	ldr	r3, [sp, #20]
 8027ce0:	45a9      	cmp	r9, r5
 8027ce2:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8027ce6:	d114      	bne.n	8027d12 <_tzset_unlocked_r+0x3da>
 8027ce8:	234d      	movs	r3, #77	@ 0x4d
 8027cea:	f1bb 0f00 	cmp.w	fp, #0
 8027cee:	d107      	bne.n	8027d00 <_tzset_unlocked_r+0x3c8>
 8027cf0:	2103      	movs	r1, #3
 8027cf2:	7223      	strb	r3, [r4, #8]
 8027cf4:	2302      	movs	r3, #2
 8027cf6:	f8c4 b014 	str.w	fp, [r4, #20]
 8027cfa:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8027cfe:	e766      	b.n	8027bce <_tzset_unlocked_r+0x296>
 8027d00:	220b      	movs	r2, #11
 8027d02:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8027d06:	2301      	movs	r3, #1
 8027d08:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8027d0c:	2300      	movs	r3, #0
 8027d0e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8027d10:	e75d      	b.n	8027bce <_tzset_unlocked_r+0x296>
 8027d12:	b280      	uxth	r0, r0
 8027d14:	723b      	strb	r3, [r7, #8]
 8027d16:	6178      	str	r0, [r7, #20]
 8027d18:	e759      	b.n	8027bce <_tzset_unlocked_r+0x296>
 8027d1a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8027d1e:	213c      	movs	r1, #60	@ 0x3c
 8027d20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8027d24:	3728      	adds	r7, #40	@ 0x28
 8027d26:	fb01 3302 	mla	r3, r1, r2, r3
 8027d2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8027d2e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8027d32:	fb01 3302 	mla	r3, r1, r2, r3
 8027d36:	f847 3c10 	str.w	r3, [r7, #-16]
 8027d3a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8027d3c:	444d      	add	r5, r9
 8027d3e:	f1bb 0f00 	cmp.w	fp, #0
 8027d42:	d0ba      	beq.n	8027cba <_tzset_unlocked_r+0x382>
 8027d44:	9b04      	ldr	r3, [sp, #16]
 8027d46:	6860      	ldr	r0, [r4, #4]
 8027d48:	6523      	str	r3, [r4, #80]	@ 0x50
 8027d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8027d78 <_tzset_unlocked_r+0x440>)
 8027d4c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8027d4e:	f8c8 3000 	str.w	r3, [r8]
 8027d52:	4b07      	ldr	r3, [pc, #28]	@ (8027d70 <_tzset_unlocked_r+0x438>)
 8027d54:	f8c8 3004 	str.w	r3, [r8, #4]
 8027d58:	f7ff fd32 	bl	80277c0 <__tzcalc_limits>
 8027d5c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8027d5e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8027d60:	f8ca 2000 	str.w	r2, [sl]
 8027d64:	1a9b      	subs	r3, r3, r2
 8027d66:	4a05      	ldr	r2, [pc, #20]	@ (8027d7c <_tzset_unlocked_r+0x444>)
 8027d68:	bf18      	it	ne
 8027d6a:	2301      	movne	r3, #1
 8027d6c:	6013      	str	r3, [r2, #0]
 8027d6e:	e611      	b.n	8027994 <_tzset_unlocked_r+0x5c>
 8027d70:	200bbccc 	.word	0x200bbccc
 8027d74:	080304d2 	.word	0x080304d2
 8027d78:	200bbcd8 	.word	0x200bbcd8
 8027d7c:	200bbce8 	.word	0x200bbce8

08027d80 <_localeconv_r>:
 8027d80:	4800      	ldr	r0, [pc, #0]	@ (8027d84 <_localeconv_r+0x4>)
 8027d82:	4770      	bx	lr
 8027d84:	2000048c 	.word	0x2000048c

08027d88 <_close_r>:
 8027d88:	b538      	push	{r3, r4, r5, lr}
 8027d8a:	2300      	movs	r3, #0
 8027d8c:	4d05      	ldr	r5, [pc, #20]	@ (8027da4 <_close_r+0x1c>)
 8027d8e:	4604      	mov	r4, r0
 8027d90:	4608      	mov	r0, r1
 8027d92:	602b      	str	r3, [r5, #0]
 8027d94:	f7ee fa26 	bl	80161e4 <_close>
 8027d98:	1c43      	adds	r3, r0, #1
 8027d9a:	d102      	bne.n	8027da2 <_close_r+0x1a>
 8027d9c:	682b      	ldr	r3, [r5, #0]
 8027d9e:	b103      	cbz	r3, 8027da2 <_close_r+0x1a>
 8027da0:	6023      	str	r3, [r4, #0]
 8027da2:	bd38      	pop	{r3, r4, r5, pc}
 8027da4:	200bbcec 	.word	0x200bbcec

08027da8 <_lseek_r>:
 8027da8:	b538      	push	{r3, r4, r5, lr}
 8027daa:	4604      	mov	r4, r0
 8027dac:	4d06      	ldr	r5, [pc, #24]	@ (8027dc8 <_lseek_r+0x20>)
 8027dae:	4608      	mov	r0, r1
 8027db0:	4611      	mov	r1, r2
 8027db2:	2200      	movs	r2, #0
 8027db4:	602a      	str	r2, [r5, #0]
 8027db6:	461a      	mov	r2, r3
 8027db8:	f7ee fa3b 	bl	8016232 <_lseek>
 8027dbc:	1c43      	adds	r3, r0, #1
 8027dbe:	d102      	bne.n	8027dc6 <_lseek_r+0x1e>
 8027dc0:	682b      	ldr	r3, [r5, #0]
 8027dc2:	b103      	cbz	r3, 8027dc6 <_lseek_r+0x1e>
 8027dc4:	6023      	str	r3, [r4, #0]
 8027dc6:	bd38      	pop	{r3, r4, r5, pc}
 8027dc8:	200bbcec 	.word	0x200bbcec

08027dcc <_read_r>:
 8027dcc:	b538      	push	{r3, r4, r5, lr}
 8027dce:	4604      	mov	r4, r0
 8027dd0:	4d06      	ldr	r5, [pc, #24]	@ (8027dec <_read_r+0x20>)
 8027dd2:	4608      	mov	r0, r1
 8027dd4:	4611      	mov	r1, r2
 8027dd6:	2200      	movs	r2, #0
 8027dd8:	602a      	str	r2, [r5, #0]
 8027dda:	461a      	mov	r2, r3
 8027ddc:	f7ee f9c9 	bl	8016172 <_read>
 8027de0:	1c43      	adds	r3, r0, #1
 8027de2:	d102      	bne.n	8027dea <_read_r+0x1e>
 8027de4:	682b      	ldr	r3, [r5, #0]
 8027de6:	b103      	cbz	r3, 8027dea <_read_r+0x1e>
 8027de8:	6023      	str	r3, [r4, #0]
 8027dea:	bd38      	pop	{r3, r4, r5, pc}
 8027dec:	200bbcec 	.word	0x200bbcec

08027df0 <_write_r>:
 8027df0:	b538      	push	{r3, r4, r5, lr}
 8027df2:	4604      	mov	r4, r0
 8027df4:	4d06      	ldr	r5, [pc, #24]	@ (8027e10 <_write_r+0x20>)
 8027df6:	4608      	mov	r0, r1
 8027df8:	4611      	mov	r1, r2
 8027dfa:	2200      	movs	r2, #0
 8027dfc:	602a      	str	r2, [r5, #0]
 8027dfe:	461a      	mov	r2, r3
 8027e00:	f7ee f9d4 	bl	80161ac <_write>
 8027e04:	1c43      	adds	r3, r0, #1
 8027e06:	d102      	bne.n	8027e0e <_write_r+0x1e>
 8027e08:	682b      	ldr	r3, [r5, #0]
 8027e0a:	b103      	cbz	r3, 8027e0e <_write_r+0x1e>
 8027e0c:	6023      	str	r3, [r4, #0]
 8027e0e:	bd38      	pop	{r3, r4, r5, pc}
 8027e10:	200bbcec 	.word	0x200bbcec

08027e14 <__errno>:
 8027e14:	4b01      	ldr	r3, [pc, #4]	@ (8027e1c <__errno+0x8>)
 8027e16:	6818      	ldr	r0, [r3, #0]
 8027e18:	4770      	bx	lr
 8027e1a:	bf00      	nop
 8027e1c:	20000508 	.word	0x20000508

08027e20 <__libc_init_array>:
 8027e20:	b570      	push	{r4, r5, r6, lr}
 8027e22:	4d0d      	ldr	r5, [pc, #52]	@ (8027e58 <__libc_init_array+0x38>)
 8027e24:	2600      	movs	r6, #0
 8027e26:	4c0d      	ldr	r4, [pc, #52]	@ (8027e5c <__libc_init_array+0x3c>)
 8027e28:	1b64      	subs	r4, r4, r5
 8027e2a:	10a4      	asrs	r4, r4, #2
 8027e2c:	42a6      	cmp	r6, r4
 8027e2e:	d109      	bne.n	8027e44 <__libc_init_array+0x24>
 8027e30:	4d0b      	ldr	r5, [pc, #44]	@ (8027e60 <__libc_init_array+0x40>)
 8027e32:	2600      	movs	r6, #0
 8027e34:	4c0b      	ldr	r4, [pc, #44]	@ (8027e64 <__libc_init_array+0x44>)
 8027e36:	f003 f98b 	bl	802b150 <_init>
 8027e3a:	1b64      	subs	r4, r4, r5
 8027e3c:	10a4      	asrs	r4, r4, #2
 8027e3e:	42a6      	cmp	r6, r4
 8027e40:	d105      	bne.n	8027e4e <__libc_init_array+0x2e>
 8027e42:	bd70      	pop	{r4, r5, r6, pc}
 8027e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8027e48:	3601      	adds	r6, #1
 8027e4a:	4798      	blx	r3
 8027e4c:	e7ee      	b.n	8027e2c <__libc_init_array+0xc>
 8027e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8027e52:	3601      	adds	r6, #1
 8027e54:	4798      	blx	r3
 8027e56:	e7f2      	b.n	8027e3e <__libc_init_array+0x1e>
 8027e58:	08030824 	.word	0x08030824
 8027e5c:	08030824 	.word	0x08030824
 8027e60:	08030824 	.word	0x08030824
 8027e64:	08030828 	.word	0x08030828

08027e68 <__retarget_lock_init_recursive>:
 8027e68:	4770      	bx	lr

08027e6a <__retarget_lock_acquire>:
 8027e6a:	4770      	bx	lr

08027e6c <__retarget_lock_acquire_recursive>:
 8027e6c:	4770      	bx	lr

08027e6e <__retarget_lock_release>:
 8027e6e:	4770      	bx	lr

08027e70 <__retarget_lock_release_recursive>:
 8027e70:	4770      	bx	lr

08027e72 <strcpy>:
 8027e72:	4603      	mov	r3, r0
 8027e74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8027e78:	f803 2b01 	strb.w	r2, [r3], #1
 8027e7c:	2a00      	cmp	r2, #0
 8027e7e:	d1f9      	bne.n	8027e74 <strcpy+0x2>
 8027e80:	4770      	bx	lr

08027e82 <memchr>:
 8027e82:	b2c9      	uxtb	r1, r1
 8027e84:	4603      	mov	r3, r0
 8027e86:	4402      	add	r2, r0
 8027e88:	b510      	push	{r4, lr}
 8027e8a:	4293      	cmp	r3, r2
 8027e8c:	4618      	mov	r0, r3
 8027e8e:	d101      	bne.n	8027e94 <memchr+0x12>
 8027e90:	2000      	movs	r0, #0
 8027e92:	e003      	b.n	8027e9c <memchr+0x1a>
 8027e94:	7804      	ldrb	r4, [r0, #0]
 8027e96:	3301      	adds	r3, #1
 8027e98:	428c      	cmp	r4, r1
 8027e9a:	d1f6      	bne.n	8027e8a <memchr+0x8>
 8027e9c:	bd10      	pop	{r4, pc}

08027e9e <memcpy>:
 8027e9e:	440a      	add	r2, r1
 8027ea0:	1e43      	subs	r3, r0, #1
 8027ea2:	4291      	cmp	r1, r2
 8027ea4:	d100      	bne.n	8027ea8 <memcpy+0xa>
 8027ea6:	4770      	bx	lr
 8027ea8:	b510      	push	{r4, lr}
 8027eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8027eae:	4291      	cmp	r1, r2
 8027eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8027eb4:	d1f9      	bne.n	8027eaa <memcpy+0xc>
 8027eb6:	bd10      	pop	{r4, pc}

08027eb8 <nan>:
 8027eb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8027ec0 <nan+0x8>
 8027ebc:	4770      	bx	lr
 8027ebe:	bf00      	nop
 8027ec0:	00000000 	.word	0x00000000
 8027ec4:	7ff80000 	.word	0x7ff80000

08027ec8 <nanf>:
 8027ec8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8027ed0 <nanf+0x8>
 8027ecc:	4770      	bx	lr
 8027ece:	bf00      	nop
 8027ed0:	7fc00000 	.word	0x7fc00000

08027ed4 <div>:
 8027ed4:	b510      	push	{r4, lr}
 8027ed6:	fb91 f4f2 	sdiv	r4, r1, r2
 8027eda:	fb02 1114 	mls	r1, r2, r4, r1
 8027ede:	6004      	str	r4, [r0, #0]
 8027ee0:	6041      	str	r1, [r0, #4]
 8027ee2:	bd10      	pop	{r4, pc}

08027ee4 <quorem>:
 8027ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ee8:	6903      	ldr	r3, [r0, #16]
 8027eea:	4607      	mov	r7, r0
 8027eec:	690c      	ldr	r4, [r1, #16]
 8027eee:	42a3      	cmp	r3, r4
 8027ef0:	f2c0 8083 	blt.w	8027ffa <quorem+0x116>
 8027ef4:	3c01      	subs	r4, #1
 8027ef6:	f100 0514 	add.w	r5, r0, #20
 8027efa:	f101 0814 	add.w	r8, r1, #20
 8027efe:	00a3      	lsls	r3, r4, #2
 8027f00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027f04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8027f08:	9300      	str	r3, [sp, #0]
 8027f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027f0e:	9301      	str	r3, [sp, #4]
 8027f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8027f14:	3301      	adds	r3, #1
 8027f16:	429a      	cmp	r2, r3
 8027f18:	fbb2 f6f3 	udiv	r6, r2, r3
 8027f1c:	d331      	bcc.n	8027f82 <quorem+0x9e>
 8027f1e:	f04f 0a00 	mov.w	sl, #0
 8027f22:	46c4      	mov	ip, r8
 8027f24:	46ae      	mov	lr, r5
 8027f26:	46d3      	mov	fp, sl
 8027f28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8027f2c:	b298      	uxth	r0, r3
 8027f2e:	45e1      	cmp	r9, ip
 8027f30:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8027f34:	fb06 a000 	mla	r0, r6, r0, sl
 8027f38:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8027f3c:	b280      	uxth	r0, r0
 8027f3e:	fb06 2303 	mla	r3, r6, r3, r2
 8027f42:	f8de 2000 	ldr.w	r2, [lr]
 8027f46:	b292      	uxth	r2, r2
 8027f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8027f4c:	eba2 0200 	sub.w	r2, r2, r0
 8027f50:	b29b      	uxth	r3, r3
 8027f52:	f8de 0000 	ldr.w	r0, [lr]
 8027f56:	445a      	add	r2, fp
 8027f58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8027f5c:	b292      	uxth	r2, r2
 8027f5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8027f62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8027f66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8027f6a:	f84e 2b04 	str.w	r2, [lr], #4
 8027f6e:	d2db      	bcs.n	8027f28 <quorem+0x44>
 8027f70:	9b00      	ldr	r3, [sp, #0]
 8027f72:	58eb      	ldr	r3, [r5, r3]
 8027f74:	b92b      	cbnz	r3, 8027f82 <quorem+0x9e>
 8027f76:	9b01      	ldr	r3, [sp, #4]
 8027f78:	3b04      	subs	r3, #4
 8027f7a:	429d      	cmp	r5, r3
 8027f7c:	461a      	mov	r2, r3
 8027f7e:	d330      	bcc.n	8027fe2 <quorem+0xfe>
 8027f80:	613c      	str	r4, [r7, #16]
 8027f82:	4638      	mov	r0, r7
 8027f84:	f001 fd5a 	bl	8029a3c <__mcmp>
 8027f88:	2800      	cmp	r0, #0
 8027f8a:	db26      	blt.n	8027fda <quorem+0xf6>
 8027f8c:	4629      	mov	r1, r5
 8027f8e:	2000      	movs	r0, #0
 8027f90:	f858 2b04 	ldr.w	r2, [r8], #4
 8027f94:	f8d1 c000 	ldr.w	ip, [r1]
 8027f98:	fa1f fe82 	uxth.w	lr, r2
 8027f9c:	45c1      	cmp	r9, r8
 8027f9e:	fa1f f38c 	uxth.w	r3, ip
 8027fa2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8027fa6:	eba3 030e 	sub.w	r3, r3, lr
 8027faa:	4403      	add	r3, r0
 8027fac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8027fb0:	b29b      	uxth	r3, r3
 8027fb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8027fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027fba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8027fbe:	f841 3b04 	str.w	r3, [r1], #4
 8027fc2:	d2e5      	bcs.n	8027f90 <quorem+0xac>
 8027fc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8027fc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8027fcc:	b922      	cbnz	r2, 8027fd8 <quorem+0xf4>
 8027fce:	3b04      	subs	r3, #4
 8027fd0:	429d      	cmp	r5, r3
 8027fd2:	461a      	mov	r2, r3
 8027fd4:	d30b      	bcc.n	8027fee <quorem+0x10a>
 8027fd6:	613c      	str	r4, [r7, #16]
 8027fd8:	3601      	adds	r6, #1
 8027fda:	4630      	mov	r0, r6
 8027fdc:	b003      	add	sp, #12
 8027fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027fe2:	6812      	ldr	r2, [r2, #0]
 8027fe4:	3b04      	subs	r3, #4
 8027fe6:	2a00      	cmp	r2, #0
 8027fe8:	d1ca      	bne.n	8027f80 <quorem+0x9c>
 8027fea:	3c01      	subs	r4, #1
 8027fec:	e7c5      	b.n	8027f7a <quorem+0x96>
 8027fee:	6812      	ldr	r2, [r2, #0]
 8027ff0:	3b04      	subs	r3, #4
 8027ff2:	2a00      	cmp	r2, #0
 8027ff4:	d1ef      	bne.n	8027fd6 <quorem+0xf2>
 8027ff6:	3c01      	subs	r4, #1
 8027ff8:	e7ea      	b.n	8027fd0 <quorem+0xec>
 8027ffa:	2000      	movs	r0, #0
 8027ffc:	e7ee      	b.n	8027fdc <quorem+0xf8>
	...

08028000 <_dtoa_r>:
 8028000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028004:	69c7      	ldr	r7, [r0, #28]
 8028006:	b099      	sub	sp, #100	@ 0x64
 8028008:	4683      	mov	fp, r0
 802800a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 802800c:	9109      	str	r1, [sp, #36]	@ 0x24
 802800e:	920e      	str	r2, [sp, #56]	@ 0x38
 8028010:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028012:	ec55 4b10 	vmov	r4, r5, d0
 8028016:	ed8d 0b02 	vstr	d0, [sp, #8]
 802801a:	b97f      	cbnz	r7, 802803c <_dtoa_r+0x3c>
 802801c:	2010      	movs	r0, #16
 802801e:	f001 f977 	bl	8029310 <malloc>
 8028022:	4602      	mov	r2, r0
 8028024:	f8cb 001c 	str.w	r0, [fp, #28]
 8028028:	b920      	cbnz	r0, 8028034 <_dtoa_r+0x34>
 802802a:	4ba7      	ldr	r3, [pc, #668]	@ (80282c8 <_dtoa_r+0x2c8>)
 802802c:	21ef      	movs	r1, #239	@ 0xef
 802802e:	48a7      	ldr	r0, [pc, #668]	@ (80282cc <_dtoa_r+0x2cc>)
 8028030:	f002 f9dc 	bl	802a3ec <__assert_func>
 8028034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8028038:	6007      	str	r7, [r0, #0]
 802803a:	60c7      	str	r7, [r0, #12]
 802803c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8028040:	6819      	ldr	r1, [r3, #0]
 8028042:	b159      	cbz	r1, 802805c <_dtoa_r+0x5c>
 8028044:	685a      	ldr	r2, [r3, #4]
 8028046:	2301      	movs	r3, #1
 8028048:	4658      	mov	r0, fp
 802804a:	4093      	lsls	r3, r2
 802804c:	604a      	str	r2, [r1, #4]
 802804e:	608b      	str	r3, [r1, #8]
 8028050:	f001 fa6e 	bl	8029530 <_Bfree>
 8028054:	f8db 301c 	ldr.w	r3, [fp, #28]
 8028058:	2200      	movs	r2, #0
 802805a:	601a      	str	r2, [r3, #0]
 802805c:	1e2b      	subs	r3, r5, #0
 802805e:	bfb7      	itett	lt
 8028060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8028064:	2300      	movge	r3, #0
 8028066:	2201      	movlt	r2, #1
 8028068:	9303      	strlt	r3, [sp, #12]
 802806a:	bfa8      	it	ge
 802806c:	6033      	strge	r3, [r6, #0]
 802806e:	9f03      	ldr	r7, [sp, #12]
 8028070:	4b97      	ldr	r3, [pc, #604]	@ (80282d0 <_dtoa_r+0x2d0>)
 8028072:	bfb8      	it	lt
 8028074:	6032      	strlt	r2, [r6, #0]
 8028076:	43bb      	bics	r3, r7
 8028078:	d112      	bne.n	80280a0 <_dtoa_r+0xa0>
 802807a:	f242 730f 	movw	r3, #9999	@ 0x270f
 802807e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8028080:	6013      	str	r3, [r2, #0]
 8028082:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8028086:	4323      	orrs	r3, r4
 8028088:	f000 854c 	beq.w	8028b24 <_dtoa_r+0xb24>
 802808c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802808e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80282e4 <_dtoa_r+0x2e4>
 8028092:	2b00      	cmp	r3, #0
 8028094:	f000 854e 	beq.w	8028b34 <_dtoa_r+0xb34>
 8028098:	f10a 0303 	add.w	r3, sl, #3
 802809c:	f000 bd48 	b.w	8028b30 <_dtoa_r+0xb30>
 80280a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80280a4:	2200      	movs	r2, #0
 80280a6:	2300      	movs	r3, #0
 80280a8:	ec51 0b17 	vmov	r0, r1, d7
 80280ac:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80280b0:	f7d8 fd18 	bl	8000ae4 <__aeabi_dcmpeq>
 80280b4:	4680      	mov	r8, r0
 80280b6:	b158      	cbz	r0, 80280d0 <_dtoa_r+0xd0>
 80280b8:	2301      	movs	r3, #1
 80280ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80280bc:	6013      	str	r3, [r2, #0]
 80280be:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80280c0:	b113      	cbz	r3, 80280c8 <_dtoa_r+0xc8>
 80280c2:	4b84      	ldr	r3, [pc, #528]	@ (80282d4 <_dtoa_r+0x2d4>)
 80280c4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80280c6:	6013      	str	r3, [r2, #0]
 80280c8:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80282e8 <_dtoa_r+0x2e8>
 80280cc:	f000 bd32 	b.w	8028b34 <_dtoa_r+0xb34>
 80280d0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80280d4:	aa16      	add	r2, sp, #88	@ 0x58
 80280d6:	a917      	add	r1, sp, #92	@ 0x5c
 80280d8:	4658      	mov	r0, fp
 80280da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80280de:	f001 fdd5 	bl	8029c8c <__d2b>
 80280e2:	4681      	mov	r9, r0
 80280e4:	2e00      	cmp	r6, #0
 80280e6:	d075      	beq.n	80281d4 <_dtoa_r+0x1d4>
 80280e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80280ea:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80280ee:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80280f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80280f6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80280fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80280fe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8028102:	4619      	mov	r1, r3
 8028104:	2200      	movs	r2, #0
 8028106:	4b74      	ldr	r3, [pc, #464]	@ (80282d8 <_dtoa_r+0x2d8>)
 8028108:	f7d8 f8cc 	bl	80002a4 <__aeabi_dsub>
 802810c:	a368      	add	r3, pc, #416	@ (adr r3, 80282b0 <_dtoa_r+0x2b0>)
 802810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028112:	f7d8 fa7f 	bl	8000614 <__aeabi_dmul>
 8028116:	a368      	add	r3, pc, #416	@ (adr r3, 80282b8 <_dtoa_r+0x2b8>)
 8028118:	e9d3 2300 	ldrd	r2, r3, [r3]
 802811c:	f7d8 f8c4 	bl	80002a8 <__adddf3>
 8028120:	4604      	mov	r4, r0
 8028122:	460d      	mov	r5, r1
 8028124:	4630      	mov	r0, r6
 8028126:	f7d8 fa0b 	bl	8000540 <__aeabi_i2d>
 802812a:	a365      	add	r3, pc, #404	@ (adr r3, 80282c0 <_dtoa_r+0x2c0>)
 802812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028130:	f7d8 fa70 	bl	8000614 <__aeabi_dmul>
 8028134:	4602      	mov	r2, r0
 8028136:	460b      	mov	r3, r1
 8028138:	4620      	mov	r0, r4
 802813a:	4629      	mov	r1, r5
 802813c:	f7d8 f8b4 	bl	80002a8 <__adddf3>
 8028140:	4604      	mov	r4, r0
 8028142:	460d      	mov	r5, r1
 8028144:	f7d8 fd16 	bl	8000b74 <__aeabi_d2iz>
 8028148:	2200      	movs	r2, #0
 802814a:	4607      	mov	r7, r0
 802814c:	2300      	movs	r3, #0
 802814e:	4620      	mov	r0, r4
 8028150:	4629      	mov	r1, r5
 8028152:	f7d8 fcd1 	bl	8000af8 <__aeabi_dcmplt>
 8028156:	b140      	cbz	r0, 802816a <_dtoa_r+0x16a>
 8028158:	4638      	mov	r0, r7
 802815a:	f7d8 f9f1 	bl	8000540 <__aeabi_i2d>
 802815e:	4622      	mov	r2, r4
 8028160:	462b      	mov	r3, r5
 8028162:	f7d8 fcbf 	bl	8000ae4 <__aeabi_dcmpeq>
 8028166:	b900      	cbnz	r0, 802816a <_dtoa_r+0x16a>
 8028168:	3f01      	subs	r7, #1
 802816a:	2f16      	cmp	r7, #22
 802816c:	d851      	bhi.n	8028212 <_dtoa_r+0x212>
 802816e:	4b5b      	ldr	r3, [pc, #364]	@ (80282dc <_dtoa_r+0x2dc>)
 8028170:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8028174:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8028178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802817c:	f7d8 fcbc 	bl	8000af8 <__aeabi_dcmplt>
 8028180:	2800      	cmp	r0, #0
 8028182:	d048      	beq.n	8028216 <_dtoa_r+0x216>
 8028184:	3f01      	subs	r7, #1
 8028186:	2300      	movs	r3, #0
 8028188:	9312      	str	r3, [sp, #72]	@ 0x48
 802818a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802818c:	1b9b      	subs	r3, r3, r6
 802818e:	1e5a      	subs	r2, r3, #1
 8028190:	bf46      	itte	mi
 8028192:	f1c3 0801 	rsbmi	r8, r3, #1
 8028196:	2300      	movmi	r3, #0
 8028198:	f04f 0800 	movpl.w	r8, #0
 802819c:	9208      	str	r2, [sp, #32]
 802819e:	bf48      	it	mi
 80281a0:	9308      	strmi	r3, [sp, #32]
 80281a2:	2f00      	cmp	r7, #0
 80281a4:	db39      	blt.n	802821a <_dtoa_r+0x21a>
 80281a6:	9b08      	ldr	r3, [sp, #32]
 80281a8:	970f      	str	r7, [sp, #60]	@ 0x3c
 80281aa:	443b      	add	r3, r7
 80281ac:	9308      	str	r3, [sp, #32]
 80281ae:	2300      	movs	r3, #0
 80281b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80281b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281b4:	2b09      	cmp	r3, #9
 80281b6:	d864      	bhi.n	8028282 <_dtoa_r+0x282>
 80281b8:	2b05      	cmp	r3, #5
 80281ba:	bfc5      	ittet	gt
 80281bc:	3b04      	subgt	r3, #4
 80281be:	2400      	movgt	r4, #0
 80281c0:	2401      	movle	r4, #1
 80281c2:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80281c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281c6:	3b02      	subs	r3, #2
 80281c8:	2b03      	cmp	r3, #3
 80281ca:	d865      	bhi.n	8028298 <_dtoa_r+0x298>
 80281cc:	e8df f003 	tbb	[pc, r3]
 80281d0:	5737392c 	.word	0x5737392c
 80281d4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80281d8:	441e      	add	r6, r3
 80281da:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80281de:	2b20      	cmp	r3, #32
 80281e0:	bfc9      	itett	gt
 80281e2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80281e6:	f1c3 0320 	rsble	r3, r3, #32
 80281ea:	409f      	lslgt	r7, r3
 80281ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80281f0:	bfd8      	it	le
 80281f2:	fa04 f003 	lslle.w	r0, r4, r3
 80281f6:	f106 36ff 	add.w	r6, r6, #4294967295
 80281fa:	bfc4      	itt	gt
 80281fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8028200:	ea47 0003 	orrgt.w	r0, r7, r3
 8028204:	f7d8 f98c 	bl	8000520 <__aeabi_ui2d>
 8028208:	2201      	movs	r2, #1
 802820a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802820e:	9214      	str	r2, [sp, #80]	@ 0x50
 8028210:	e777      	b.n	8028102 <_dtoa_r+0x102>
 8028212:	2301      	movs	r3, #1
 8028214:	e7b8      	b.n	8028188 <_dtoa_r+0x188>
 8028216:	9012      	str	r0, [sp, #72]	@ 0x48
 8028218:	e7b7      	b.n	802818a <_dtoa_r+0x18a>
 802821a:	427b      	negs	r3, r7
 802821c:	eba8 0807 	sub.w	r8, r8, r7
 8028220:	930a      	str	r3, [sp, #40]	@ 0x28
 8028222:	2300      	movs	r3, #0
 8028224:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028226:	e7c4      	b.n	80281b2 <_dtoa_r+0x1b2>
 8028228:	2300      	movs	r3, #0
 802822a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802822c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802822e:	2b00      	cmp	r3, #0
 8028230:	dc35      	bgt.n	802829e <_dtoa_r+0x29e>
 8028232:	2301      	movs	r3, #1
 8028234:	461a      	mov	r2, r3
 8028236:	9300      	str	r3, [sp, #0]
 8028238:	9307      	str	r3, [sp, #28]
 802823a:	920e      	str	r2, [sp, #56]	@ 0x38
 802823c:	e00b      	b.n	8028256 <_dtoa_r+0x256>
 802823e:	2301      	movs	r3, #1
 8028240:	e7f3      	b.n	802822a <_dtoa_r+0x22a>
 8028242:	2300      	movs	r3, #0
 8028244:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028248:	18fb      	adds	r3, r7, r3
 802824a:	9300      	str	r3, [sp, #0]
 802824c:	3301      	adds	r3, #1
 802824e:	2b01      	cmp	r3, #1
 8028250:	9307      	str	r3, [sp, #28]
 8028252:	bfb8      	it	lt
 8028254:	2301      	movlt	r3, #1
 8028256:	f8db 001c 	ldr.w	r0, [fp, #28]
 802825a:	2100      	movs	r1, #0
 802825c:	2204      	movs	r2, #4
 802825e:	f102 0514 	add.w	r5, r2, #20
 8028262:	429d      	cmp	r5, r3
 8028264:	d91f      	bls.n	80282a6 <_dtoa_r+0x2a6>
 8028266:	6041      	str	r1, [r0, #4]
 8028268:	4658      	mov	r0, fp
 802826a:	f001 f921 	bl	80294b0 <_Balloc>
 802826e:	4682      	mov	sl, r0
 8028270:	2800      	cmp	r0, #0
 8028272:	d13b      	bne.n	80282ec <_dtoa_r+0x2ec>
 8028274:	4b1a      	ldr	r3, [pc, #104]	@ (80282e0 <_dtoa_r+0x2e0>)
 8028276:	4602      	mov	r2, r0
 8028278:	f240 11af 	movw	r1, #431	@ 0x1af
 802827c:	e6d7      	b.n	802802e <_dtoa_r+0x2e>
 802827e:	2301      	movs	r3, #1
 8028280:	e7e0      	b.n	8028244 <_dtoa_r+0x244>
 8028282:	2401      	movs	r4, #1
 8028284:	2300      	movs	r3, #0
 8028286:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028288:	9309      	str	r3, [sp, #36]	@ 0x24
 802828a:	f04f 33ff 	mov.w	r3, #4294967295
 802828e:	2200      	movs	r2, #0
 8028290:	9300      	str	r3, [sp, #0]
 8028292:	9307      	str	r3, [sp, #28]
 8028294:	2312      	movs	r3, #18
 8028296:	e7d0      	b.n	802823a <_dtoa_r+0x23a>
 8028298:	2301      	movs	r3, #1
 802829a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802829c:	e7f5      	b.n	802828a <_dtoa_r+0x28a>
 802829e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80282a0:	9300      	str	r3, [sp, #0]
 80282a2:	9307      	str	r3, [sp, #28]
 80282a4:	e7d7      	b.n	8028256 <_dtoa_r+0x256>
 80282a6:	3101      	adds	r1, #1
 80282a8:	0052      	lsls	r2, r2, #1
 80282aa:	e7d8      	b.n	802825e <_dtoa_r+0x25e>
 80282ac:	f3af 8000 	nop.w
 80282b0:	636f4361 	.word	0x636f4361
 80282b4:	3fd287a7 	.word	0x3fd287a7
 80282b8:	8b60c8b3 	.word	0x8b60c8b3
 80282bc:	3fc68a28 	.word	0x3fc68a28
 80282c0:	509f79fb 	.word	0x509f79fb
 80282c4:	3fd34413 	.word	0x3fd34413
 80282c8:	0803051b 	.word	0x0803051b
 80282cc:	08030532 	.word	0x08030532
 80282d0:	7ff00000 	.word	0x7ff00000
 80282d4:	08030817 	.word	0x08030817
 80282d8:	3ff80000 	.word	0x3ff80000
 80282dc:	08030688 	.word	0x08030688
 80282e0:	0803058a 	.word	0x0803058a
 80282e4:	08030517 	.word	0x08030517
 80282e8:	08030816 	.word	0x08030816
 80282ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80282f0:	6018      	str	r0, [r3, #0]
 80282f2:	9b07      	ldr	r3, [sp, #28]
 80282f4:	2b0e      	cmp	r3, #14
 80282f6:	f200 80a4 	bhi.w	8028442 <_dtoa_r+0x442>
 80282fa:	2c00      	cmp	r4, #0
 80282fc:	f000 80a1 	beq.w	8028442 <_dtoa_r+0x442>
 8028300:	2f00      	cmp	r7, #0
 8028302:	dd33      	ble.n	802836c <_dtoa_r+0x36c>
 8028304:	f007 020f 	and.w	r2, r7, #15
 8028308:	4bac      	ldr	r3, [pc, #688]	@ (80285bc <_dtoa_r+0x5bc>)
 802830a:	05f8      	lsls	r0, r7, #23
 802830c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8028310:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028314:	ed93 7b00 	vldr	d7, [r3]
 8028318:	ed8d 7b04 	vstr	d7, [sp, #16]
 802831c:	d516      	bpl.n	802834c <_dtoa_r+0x34c>
 802831e:	4ba8      	ldr	r3, [pc, #672]	@ (80285c0 <_dtoa_r+0x5c0>)
 8028320:	f004 040f 	and.w	r4, r4, #15
 8028324:	2603      	movs	r6, #3
 8028326:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802832a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 802832e:	f7d8 fa9b 	bl	8000868 <__aeabi_ddiv>
 8028332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028336:	4da2      	ldr	r5, [pc, #648]	@ (80285c0 <_dtoa_r+0x5c0>)
 8028338:	b954      	cbnz	r4, 8028350 <_dtoa_r+0x350>
 802833a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028342:	f7d8 fa91 	bl	8000868 <__aeabi_ddiv>
 8028346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802834a:	e028      	b.n	802839e <_dtoa_r+0x39e>
 802834c:	2602      	movs	r6, #2
 802834e:	e7f2      	b.n	8028336 <_dtoa_r+0x336>
 8028350:	07e1      	lsls	r1, r4, #31
 8028352:	d508      	bpl.n	8028366 <_dtoa_r+0x366>
 8028354:	3601      	adds	r6, #1
 8028356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802835a:	e9d5 2300 	ldrd	r2, r3, [r5]
 802835e:	f7d8 f959 	bl	8000614 <__aeabi_dmul>
 8028362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8028366:	1064      	asrs	r4, r4, #1
 8028368:	3508      	adds	r5, #8
 802836a:	e7e5      	b.n	8028338 <_dtoa_r+0x338>
 802836c:	f000 80d2 	beq.w	8028514 <_dtoa_r+0x514>
 8028370:	427c      	negs	r4, r7
 8028372:	4b92      	ldr	r3, [pc, #584]	@ (80285bc <_dtoa_r+0x5bc>)
 8028374:	4d92      	ldr	r5, [pc, #584]	@ (80285c0 <_dtoa_r+0x5c0>)
 8028376:	2602      	movs	r6, #2
 8028378:	f004 020f 	and.w	r2, r4, #15
 802837c:	1124      	asrs	r4, r4, #4
 802837e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028382:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8028386:	e9d3 2300 	ldrd	r2, r3, [r3]
 802838a:	f7d8 f943 	bl	8000614 <__aeabi_dmul>
 802838e:	2300      	movs	r3, #0
 8028390:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8028394:	2c00      	cmp	r4, #0
 8028396:	f040 80b2 	bne.w	80284fe <_dtoa_r+0x4fe>
 802839a:	2b00      	cmp	r3, #0
 802839c:	d1d3      	bne.n	8028346 <_dtoa_r+0x346>
 802839e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80283a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80283a4:	2b00      	cmp	r3, #0
 80283a6:	f000 80b7 	beq.w	8028518 <_dtoa_r+0x518>
 80283aa:	2200      	movs	r2, #0
 80283ac:	4b85      	ldr	r3, [pc, #532]	@ (80285c4 <_dtoa_r+0x5c4>)
 80283ae:	4620      	mov	r0, r4
 80283b0:	4629      	mov	r1, r5
 80283b2:	f7d8 fba1 	bl	8000af8 <__aeabi_dcmplt>
 80283b6:	2800      	cmp	r0, #0
 80283b8:	f000 80ae 	beq.w	8028518 <_dtoa_r+0x518>
 80283bc:	9b07      	ldr	r3, [sp, #28]
 80283be:	2b00      	cmp	r3, #0
 80283c0:	f000 80aa 	beq.w	8028518 <_dtoa_r+0x518>
 80283c4:	9b00      	ldr	r3, [sp, #0]
 80283c6:	2b00      	cmp	r3, #0
 80283c8:	dd37      	ble.n	802843a <_dtoa_r+0x43a>
 80283ca:	1e7b      	subs	r3, r7, #1
 80283cc:	4620      	mov	r0, r4
 80283ce:	2200      	movs	r2, #0
 80283d0:	4629      	mov	r1, r5
 80283d2:	9304      	str	r3, [sp, #16]
 80283d4:	3601      	adds	r6, #1
 80283d6:	4b7c      	ldr	r3, [pc, #496]	@ (80285c8 <_dtoa_r+0x5c8>)
 80283d8:	f7d8 f91c 	bl	8000614 <__aeabi_dmul>
 80283dc:	9c00      	ldr	r4, [sp, #0]
 80283de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80283e2:	4630      	mov	r0, r6
 80283e4:	f7d8 f8ac 	bl	8000540 <__aeabi_i2d>
 80283e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80283ec:	f7d8 f912 	bl	8000614 <__aeabi_dmul>
 80283f0:	2200      	movs	r2, #0
 80283f2:	4b76      	ldr	r3, [pc, #472]	@ (80285cc <_dtoa_r+0x5cc>)
 80283f4:	f7d7 ff58 	bl	80002a8 <__adddf3>
 80283f8:	4605      	mov	r5, r0
 80283fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80283fe:	2c00      	cmp	r4, #0
 8028400:	f040 808d 	bne.w	802851e <_dtoa_r+0x51e>
 8028404:	2200      	movs	r2, #0
 8028406:	4b72      	ldr	r3, [pc, #456]	@ (80285d0 <_dtoa_r+0x5d0>)
 8028408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802840c:	f7d7 ff4a 	bl	80002a4 <__aeabi_dsub>
 8028410:	4602      	mov	r2, r0
 8028412:	460b      	mov	r3, r1
 8028414:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8028418:	462a      	mov	r2, r5
 802841a:	4633      	mov	r3, r6
 802841c:	f7d8 fb8a 	bl	8000b34 <__aeabi_dcmpgt>
 8028420:	2800      	cmp	r0, #0
 8028422:	f040 828b 	bne.w	802893c <_dtoa_r+0x93c>
 8028426:	462a      	mov	r2, r5
 8028428:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 802842c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028430:	f7d8 fb62 	bl	8000af8 <__aeabi_dcmplt>
 8028434:	2800      	cmp	r0, #0
 8028436:	f040 8128 	bne.w	802868a <_dtoa_r+0x68a>
 802843a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802843e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8028442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028444:	2b00      	cmp	r3, #0
 8028446:	f2c0 815a 	blt.w	80286fe <_dtoa_r+0x6fe>
 802844a:	2f0e      	cmp	r7, #14
 802844c:	f300 8157 	bgt.w	80286fe <_dtoa_r+0x6fe>
 8028450:	4b5a      	ldr	r3, [pc, #360]	@ (80285bc <_dtoa_r+0x5bc>)
 8028452:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8028456:	ed93 7b00 	vldr	d7, [r3]
 802845a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802845c:	2b00      	cmp	r3, #0
 802845e:	ed8d 7b00 	vstr	d7, [sp]
 8028462:	da03      	bge.n	802846c <_dtoa_r+0x46c>
 8028464:	9b07      	ldr	r3, [sp, #28]
 8028466:	2b00      	cmp	r3, #0
 8028468:	f340 8101 	ble.w	802866e <_dtoa_r+0x66e>
 802846c:	4656      	mov	r6, sl
 802846e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8028472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028476:	4620      	mov	r0, r4
 8028478:	4629      	mov	r1, r5
 802847a:	f7d8 f9f5 	bl	8000868 <__aeabi_ddiv>
 802847e:	f7d8 fb79 	bl	8000b74 <__aeabi_d2iz>
 8028482:	4680      	mov	r8, r0
 8028484:	f7d8 f85c 	bl	8000540 <__aeabi_i2d>
 8028488:	e9dd 2300 	ldrd	r2, r3, [sp]
 802848c:	f7d8 f8c2 	bl	8000614 <__aeabi_dmul>
 8028490:	4602      	mov	r2, r0
 8028492:	4620      	mov	r0, r4
 8028494:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8028498:	460b      	mov	r3, r1
 802849a:	4629      	mov	r1, r5
 802849c:	f7d7 ff02 	bl	80002a4 <__aeabi_dsub>
 80284a0:	9d07      	ldr	r5, [sp, #28]
 80284a2:	f806 4b01 	strb.w	r4, [r6], #1
 80284a6:	eba6 040a 	sub.w	r4, r6, sl
 80284aa:	4602      	mov	r2, r0
 80284ac:	460b      	mov	r3, r1
 80284ae:	42a5      	cmp	r5, r4
 80284b0:	f040 8117 	bne.w	80286e2 <_dtoa_r+0x6e2>
 80284b4:	f7d7 fef8 	bl	80002a8 <__adddf3>
 80284b8:	4604      	mov	r4, r0
 80284ba:	460d      	mov	r5, r1
 80284bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80284c0:	f7d8 fb38 	bl	8000b34 <__aeabi_dcmpgt>
 80284c4:	2800      	cmp	r0, #0
 80284c6:	f040 80f9 	bne.w	80286bc <_dtoa_r+0x6bc>
 80284ca:	4620      	mov	r0, r4
 80284cc:	4629      	mov	r1, r5
 80284ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80284d2:	f7d8 fb07 	bl	8000ae4 <__aeabi_dcmpeq>
 80284d6:	b118      	cbz	r0, 80284e0 <_dtoa_r+0x4e0>
 80284d8:	f018 0f01 	tst.w	r8, #1
 80284dc:	f040 80ee 	bne.w	80286bc <_dtoa_r+0x6bc>
 80284e0:	4649      	mov	r1, r9
 80284e2:	4658      	mov	r0, fp
 80284e4:	f001 f824 	bl	8029530 <_Bfree>
 80284e8:	2300      	movs	r3, #0
 80284ea:	3701      	adds	r7, #1
 80284ec:	7033      	strb	r3, [r6, #0]
 80284ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80284f0:	601f      	str	r7, [r3, #0]
 80284f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80284f4:	2b00      	cmp	r3, #0
 80284f6:	f000 831d 	beq.w	8028b34 <_dtoa_r+0xb34>
 80284fa:	601e      	str	r6, [r3, #0]
 80284fc:	e31a      	b.n	8028b34 <_dtoa_r+0xb34>
 80284fe:	07e2      	lsls	r2, r4, #31
 8028500:	d505      	bpl.n	802850e <_dtoa_r+0x50e>
 8028502:	3601      	adds	r6, #1
 8028504:	e9d5 2300 	ldrd	r2, r3, [r5]
 8028508:	f7d8 f884 	bl	8000614 <__aeabi_dmul>
 802850c:	2301      	movs	r3, #1
 802850e:	1064      	asrs	r4, r4, #1
 8028510:	3508      	adds	r5, #8
 8028512:	e73f      	b.n	8028394 <_dtoa_r+0x394>
 8028514:	2602      	movs	r6, #2
 8028516:	e742      	b.n	802839e <_dtoa_r+0x39e>
 8028518:	9c07      	ldr	r4, [sp, #28]
 802851a:	9704      	str	r7, [sp, #16]
 802851c:	e761      	b.n	80283e2 <_dtoa_r+0x3e2>
 802851e:	4b27      	ldr	r3, [pc, #156]	@ (80285bc <_dtoa_r+0x5bc>)
 8028520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8028526:	4454      	add	r4, sl
 8028528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802852c:	2900      	cmp	r1, #0
 802852e:	d053      	beq.n	80285d8 <_dtoa_r+0x5d8>
 8028530:	2000      	movs	r0, #0
 8028532:	4928      	ldr	r1, [pc, #160]	@ (80285d4 <_dtoa_r+0x5d4>)
 8028534:	f7d8 f998 	bl	8000868 <__aeabi_ddiv>
 8028538:	4633      	mov	r3, r6
 802853a:	4656      	mov	r6, sl
 802853c:	462a      	mov	r2, r5
 802853e:	f7d7 feb1 	bl	80002a4 <__aeabi_dsub>
 8028542:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8028546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802854a:	f7d8 fb13 	bl	8000b74 <__aeabi_d2iz>
 802854e:	4605      	mov	r5, r0
 8028550:	f7d7 fff6 	bl	8000540 <__aeabi_i2d>
 8028554:	4602      	mov	r2, r0
 8028556:	460b      	mov	r3, r1
 8028558:	3530      	adds	r5, #48	@ 0x30
 802855a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802855e:	f7d7 fea1 	bl	80002a4 <__aeabi_dsub>
 8028562:	4602      	mov	r2, r0
 8028564:	460b      	mov	r3, r1
 8028566:	f806 5b01 	strb.w	r5, [r6], #1
 802856a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802856e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8028572:	f7d8 fac1 	bl	8000af8 <__aeabi_dcmplt>
 8028576:	2800      	cmp	r0, #0
 8028578:	d171      	bne.n	802865e <_dtoa_r+0x65e>
 802857a:	2000      	movs	r0, #0
 802857c:	4911      	ldr	r1, [pc, #68]	@ (80285c4 <_dtoa_r+0x5c4>)
 802857e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028582:	f7d7 fe8f 	bl	80002a4 <__aeabi_dsub>
 8028586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802858a:	f7d8 fab5 	bl	8000af8 <__aeabi_dcmplt>
 802858e:	2800      	cmp	r0, #0
 8028590:	f040 8095 	bne.w	80286be <_dtoa_r+0x6be>
 8028594:	42a6      	cmp	r6, r4
 8028596:	f43f af50 	beq.w	802843a <_dtoa_r+0x43a>
 802859a:	2200      	movs	r2, #0
 802859c:	4b0a      	ldr	r3, [pc, #40]	@ (80285c8 <_dtoa_r+0x5c8>)
 802859e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80285a2:	f7d8 f837 	bl	8000614 <__aeabi_dmul>
 80285a6:	2200      	movs	r2, #0
 80285a8:	4b07      	ldr	r3, [pc, #28]	@ (80285c8 <_dtoa_r+0x5c8>)
 80285aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80285ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80285b2:	f7d8 f82f 	bl	8000614 <__aeabi_dmul>
 80285b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80285ba:	e7c4      	b.n	8028546 <_dtoa_r+0x546>
 80285bc:	08030688 	.word	0x08030688
 80285c0:	08030660 	.word	0x08030660
 80285c4:	3ff00000 	.word	0x3ff00000
 80285c8:	40240000 	.word	0x40240000
 80285cc:	401c0000 	.word	0x401c0000
 80285d0:	40140000 	.word	0x40140000
 80285d4:	3fe00000 	.word	0x3fe00000
 80285d8:	4631      	mov	r1, r6
 80285da:	4656      	mov	r6, sl
 80285dc:	4628      	mov	r0, r5
 80285de:	f7d8 f819 	bl	8000614 <__aeabi_dmul>
 80285e2:	9415      	str	r4, [sp, #84]	@ 0x54
 80285e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80285e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80285ec:	f7d8 fac2 	bl	8000b74 <__aeabi_d2iz>
 80285f0:	4605      	mov	r5, r0
 80285f2:	f7d7 ffa5 	bl	8000540 <__aeabi_i2d>
 80285f6:	4602      	mov	r2, r0
 80285f8:	3530      	adds	r5, #48	@ 0x30
 80285fa:	460b      	mov	r3, r1
 80285fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028600:	f7d7 fe50 	bl	80002a4 <__aeabi_dsub>
 8028604:	f806 5b01 	strb.w	r5, [r6], #1
 8028608:	4602      	mov	r2, r0
 802860a:	460b      	mov	r3, r1
 802860c:	42a6      	cmp	r6, r4
 802860e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8028612:	f04f 0200 	mov.w	r2, #0
 8028616:	d124      	bne.n	8028662 <_dtoa_r+0x662>
 8028618:	4bac      	ldr	r3, [pc, #688]	@ (80288cc <_dtoa_r+0x8cc>)
 802861a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802861e:	f7d7 fe43 	bl	80002a8 <__adddf3>
 8028622:	4602      	mov	r2, r0
 8028624:	460b      	mov	r3, r1
 8028626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802862a:	f7d8 fa83 	bl	8000b34 <__aeabi_dcmpgt>
 802862e:	2800      	cmp	r0, #0
 8028630:	d145      	bne.n	80286be <_dtoa_r+0x6be>
 8028632:	2000      	movs	r0, #0
 8028634:	49a5      	ldr	r1, [pc, #660]	@ (80288cc <_dtoa_r+0x8cc>)
 8028636:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 802863a:	f7d7 fe33 	bl	80002a4 <__aeabi_dsub>
 802863e:	4602      	mov	r2, r0
 8028640:	460b      	mov	r3, r1
 8028642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8028646:	f7d8 fa57 	bl	8000af8 <__aeabi_dcmplt>
 802864a:	2800      	cmp	r0, #0
 802864c:	f43f aef5 	beq.w	802843a <_dtoa_r+0x43a>
 8028650:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8028652:	1e73      	subs	r3, r6, #1
 8028654:	9315      	str	r3, [sp, #84]	@ 0x54
 8028656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802865a:	2b30      	cmp	r3, #48	@ 0x30
 802865c:	d0f8      	beq.n	8028650 <_dtoa_r+0x650>
 802865e:	9f04      	ldr	r7, [sp, #16]
 8028660:	e73e      	b.n	80284e0 <_dtoa_r+0x4e0>
 8028662:	4b9b      	ldr	r3, [pc, #620]	@ (80288d0 <_dtoa_r+0x8d0>)
 8028664:	f7d7 ffd6 	bl	8000614 <__aeabi_dmul>
 8028668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802866c:	e7bc      	b.n	80285e8 <_dtoa_r+0x5e8>
 802866e:	d10c      	bne.n	802868a <_dtoa_r+0x68a>
 8028670:	2200      	movs	r2, #0
 8028672:	4b98      	ldr	r3, [pc, #608]	@ (80288d4 <_dtoa_r+0x8d4>)
 8028674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028678:	f7d7 ffcc 	bl	8000614 <__aeabi_dmul>
 802867c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028680:	f7d8 fa4e 	bl	8000b20 <__aeabi_dcmpge>
 8028684:	2800      	cmp	r0, #0
 8028686:	f000 8157 	beq.w	8028938 <_dtoa_r+0x938>
 802868a:	2400      	movs	r4, #0
 802868c:	4625      	mov	r5, r4
 802868e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028690:	4656      	mov	r6, sl
 8028692:	43db      	mvns	r3, r3
 8028694:	9304      	str	r3, [sp, #16]
 8028696:	2700      	movs	r7, #0
 8028698:	4621      	mov	r1, r4
 802869a:	4658      	mov	r0, fp
 802869c:	f000 ff48 	bl	8029530 <_Bfree>
 80286a0:	2d00      	cmp	r5, #0
 80286a2:	d0dc      	beq.n	802865e <_dtoa_r+0x65e>
 80286a4:	b12f      	cbz	r7, 80286b2 <_dtoa_r+0x6b2>
 80286a6:	42af      	cmp	r7, r5
 80286a8:	d003      	beq.n	80286b2 <_dtoa_r+0x6b2>
 80286aa:	4639      	mov	r1, r7
 80286ac:	4658      	mov	r0, fp
 80286ae:	f000 ff3f 	bl	8029530 <_Bfree>
 80286b2:	4629      	mov	r1, r5
 80286b4:	4658      	mov	r0, fp
 80286b6:	f000 ff3b 	bl	8029530 <_Bfree>
 80286ba:	e7d0      	b.n	802865e <_dtoa_r+0x65e>
 80286bc:	9704      	str	r7, [sp, #16]
 80286be:	4633      	mov	r3, r6
 80286c0:	461e      	mov	r6, r3
 80286c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80286c6:	2a39      	cmp	r2, #57	@ 0x39
 80286c8:	d107      	bne.n	80286da <_dtoa_r+0x6da>
 80286ca:	459a      	cmp	sl, r3
 80286cc:	d1f8      	bne.n	80286c0 <_dtoa_r+0x6c0>
 80286ce:	9a04      	ldr	r2, [sp, #16]
 80286d0:	3201      	adds	r2, #1
 80286d2:	9204      	str	r2, [sp, #16]
 80286d4:	2230      	movs	r2, #48	@ 0x30
 80286d6:	f88a 2000 	strb.w	r2, [sl]
 80286da:	781a      	ldrb	r2, [r3, #0]
 80286dc:	3201      	adds	r2, #1
 80286de:	701a      	strb	r2, [r3, #0]
 80286e0:	e7bd      	b.n	802865e <_dtoa_r+0x65e>
 80286e2:	2200      	movs	r2, #0
 80286e4:	4b7a      	ldr	r3, [pc, #488]	@ (80288d0 <_dtoa_r+0x8d0>)
 80286e6:	f7d7 ff95 	bl	8000614 <__aeabi_dmul>
 80286ea:	2200      	movs	r2, #0
 80286ec:	2300      	movs	r3, #0
 80286ee:	4604      	mov	r4, r0
 80286f0:	460d      	mov	r5, r1
 80286f2:	f7d8 f9f7 	bl	8000ae4 <__aeabi_dcmpeq>
 80286f6:	2800      	cmp	r0, #0
 80286f8:	f43f aebb 	beq.w	8028472 <_dtoa_r+0x472>
 80286fc:	e6f0      	b.n	80284e0 <_dtoa_r+0x4e0>
 80286fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028700:	2a00      	cmp	r2, #0
 8028702:	f000 80db 	beq.w	80288bc <_dtoa_r+0x8bc>
 8028706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028708:	2a01      	cmp	r2, #1
 802870a:	f300 80bf 	bgt.w	802888c <_dtoa_r+0x88c>
 802870e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8028710:	2a00      	cmp	r2, #0
 8028712:	f000 80b7 	beq.w	8028884 <_dtoa_r+0x884>
 8028716:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802871a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802871c:	4646      	mov	r6, r8
 802871e:	9a08      	ldr	r2, [sp, #32]
 8028720:	2101      	movs	r1, #1
 8028722:	4658      	mov	r0, fp
 8028724:	4498      	add	r8, r3
 8028726:	441a      	add	r2, r3
 8028728:	9208      	str	r2, [sp, #32]
 802872a:	f001 f801 	bl	8029730 <__i2b>
 802872e:	4605      	mov	r5, r0
 8028730:	b15e      	cbz	r6, 802874a <_dtoa_r+0x74a>
 8028732:	9b08      	ldr	r3, [sp, #32]
 8028734:	2b00      	cmp	r3, #0
 8028736:	dd08      	ble.n	802874a <_dtoa_r+0x74a>
 8028738:	42b3      	cmp	r3, r6
 802873a:	9a08      	ldr	r2, [sp, #32]
 802873c:	bfa8      	it	ge
 802873e:	4633      	movge	r3, r6
 8028740:	eba8 0803 	sub.w	r8, r8, r3
 8028744:	1af6      	subs	r6, r6, r3
 8028746:	1ad3      	subs	r3, r2, r3
 8028748:	9308      	str	r3, [sp, #32]
 802874a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802874c:	b1f3      	cbz	r3, 802878c <_dtoa_r+0x78c>
 802874e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028750:	2b00      	cmp	r3, #0
 8028752:	f000 80b7 	beq.w	80288c4 <_dtoa_r+0x8c4>
 8028756:	b18c      	cbz	r4, 802877c <_dtoa_r+0x77c>
 8028758:	4629      	mov	r1, r5
 802875a:	4622      	mov	r2, r4
 802875c:	4658      	mov	r0, fp
 802875e:	f001 f8a7 	bl	80298b0 <__pow5mult>
 8028762:	464a      	mov	r2, r9
 8028764:	4601      	mov	r1, r0
 8028766:	4605      	mov	r5, r0
 8028768:	4658      	mov	r0, fp
 802876a:	f000 fff7 	bl	802975c <__multiply>
 802876e:	4649      	mov	r1, r9
 8028770:	9004      	str	r0, [sp, #16]
 8028772:	4658      	mov	r0, fp
 8028774:	f000 fedc 	bl	8029530 <_Bfree>
 8028778:	9b04      	ldr	r3, [sp, #16]
 802877a:	4699      	mov	r9, r3
 802877c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802877e:	1b1a      	subs	r2, r3, r4
 8028780:	d004      	beq.n	802878c <_dtoa_r+0x78c>
 8028782:	4649      	mov	r1, r9
 8028784:	4658      	mov	r0, fp
 8028786:	f001 f893 	bl	80298b0 <__pow5mult>
 802878a:	4681      	mov	r9, r0
 802878c:	2101      	movs	r1, #1
 802878e:	4658      	mov	r0, fp
 8028790:	f000 ffce 	bl	8029730 <__i2b>
 8028794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028796:	4604      	mov	r4, r0
 8028798:	2b00      	cmp	r3, #0
 802879a:	f000 81cf 	beq.w	8028b3c <_dtoa_r+0xb3c>
 802879e:	461a      	mov	r2, r3
 80287a0:	4601      	mov	r1, r0
 80287a2:	4658      	mov	r0, fp
 80287a4:	f001 f884 	bl	80298b0 <__pow5mult>
 80287a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80287aa:	4604      	mov	r4, r0
 80287ac:	2b01      	cmp	r3, #1
 80287ae:	f300 8095 	bgt.w	80288dc <_dtoa_r+0x8dc>
 80287b2:	9b02      	ldr	r3, [sp, #8]
 80287b4:	2b00      	cmp	r3, #0
 80287b6:	f040 8087 	bne.w	80288c8 <_dtoa_r+0x8c8>
 80287ba:	9b03      	ldr	r3, [sp, #12]
 80287bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80287c0:	2b00      	cmp	r3, #0
 80287c2:	f040 8089 	bne.w	80288d8 <_dtoa_r+0x8d8>
 80287c6:	9b03      	ldr	r3, [sp, #12]
 80287c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80287cc:	0d1b      	lsrs	r3, r3, #20
 80287ce:	051b      	lsls	r3, r3, #20
 80287d0:	b12b      	cbz	r3, 80287de <_dtoa_r+0x7de>
 80287d2:	9b08      	ldr	r3, [sp, #32]
 80287d4:	f108 0801 	add.w	r8, r8, #1
 80287d8:	3301      	adds	r3, #1
 80287da:	9308      	str	r3, [sp, #32]
 80287dc:	2301      	movs	r3, #1
 80287de:	930a      	str	r3, [sp, #40]	@ 0x28
 80287e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	f000 81b0 	beq.w	8028b48 <_dtoa_r+0xb48>
 80287e8:	6923      	ldr	r3, [r4, #16]
 80287ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80287ee:	6918      	ldr	r0, [r3, #16]
 80287f0:	f000 ff52 	bl	8029698 <__hi0bits>
 80287f4:	f1c0 0020 	rsb	r0, r0, #32
 80287f8:	9b08      	ldr	r3, [sp, #32]
 80287fa:	4418      	add	r0, r3
 80287fc:	f010 001f 	ands.w	r0, r0, #31
 8028800:	d077      	beq.n	80288f2 <_dtoa_r+0x8f2>
 8028802:	f1c0 0320 	rsb	r3, r0, #32
 8028806:	2b04      	cmp	r3, #4
 8028808:	dd6b      	ble.n	80288e2 <_dtoa_r+0x8e2>
 802880a:	f1c0 001c 	rsb	r0, r0, #28
 802880e:	9b08      	ldr	r3, [sp, #32]
 8028810:	4480      	add	r8, r0
 8028812:	4403      	add	r3, r0
 8028814:	4406      	add	r6, r0
 8028816:	9308      	str	r3, [sp, #32]
 8028818:	f1b8 0f00 	cmp.w	r8, #0
 802881c:	dd05      	ble.n	802882a <_dtoa_r+0x82a>
 802881e:	4649      	mov	r1, r9
 8028820:	4642      	mov	r2, r8
 8028822:	4658      	mov	r0, fp
 8028824:	f001 f89e 	bl	8029964 <__lshift>
 8028828:	4681      	mov	r9, r0
 802882a:	9b08      	ldr	r3, [sp, #32]
 802882c:	2b00      	cmp	r3, #0
 802882e:	dd05      	ble.n	802883c <_dtoa_r+0x83c>
 8028830:	4621      	mov	r1, r4
 8028832:	461a      	mov	r2, r3
 8028834:	4658      	mov	r0, fp
 8028836:	f001 f895 	bl	8029964 <__lshift>
 802883a:	4604      	mov	r4, r0
 802883c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802883e:	2b00      	cmp	r3, #0
 8028840:	d059      	beq.n	80288f6 <_dtoa_r+0x8f6>
 8028842:	4621      	mov	r1, r4
 8028844:	4648      	mov	r0, r9
 8028846:	f001 f8f9 	bl	8029a3c <__mcmp>
 802884a:	2800      	cmp	r0, #0
 802884c:	da53      	bge.n	80288f6 <_dtoa_r+0x8f6>
 802884e:	1e7b      	subs	r3, r7, #1
 8028850:	4649      	mov	r1, r9
 8028852:	220a      	movs	r2, #10
 8028854:	4658      	mov	r0, fp
 8028856:	9304      	str	r3, [sp, #16]
 8028858:	2300      	movs	r3, #0
 802885a:	f000 fe8b 	bl	8029574 <__multadd>
 802885e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028860:	4681      	mov	r9, r0
 8028862:	2b00      	cmp	r3, #0
 8028864:	f000 8172 	beq.w	8028b4c <_dtoa_r+0xb4c>
 8028868:	2300      	movs	r3, #0
 802886a:	4629      	mov	r1, r5
 802886c:	220a      	movs	r2, #10
 802886e:	4658      	mov	r0, fp
 8028870:	f000 fe80 	bl	8029574 <__multadd>
 8028874:	9b00      	ldr	r3, [sp, #0]
 8028876:	4605      	mov	r5, r0
 8028878:	2b00      	cmp	r3, #0
 802887a:	dc67      	bgt.n	802894c <_dtoa_r+0x94c>
 802887c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802887e:	2b02      	cmp	r3, #2
 8028880:	dc41      	bgt.n	8028906 <_dtoa_r+0x906>
 8028882:	e063      	b.n	802894c <_dtoa_r+0x94c>
 8028884:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8028886:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 802888a:	e746      	b.n	802871a <_dtoa_r+0x71a>
 802888c:	9b07      	ldr	r3, [sp, #28]
 802888e:	1e5c      	subs	r4, r3, #1
 8028890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028892:	42a3      	cmp	r3, r4
 8028894:	bfb7      	itett	lt
 8028896:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8028898:	1b1c      	subge	r4, r3, r4
 802889a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 802889c:	1ae3      	sublt	r3, r4, r3
 802889e:	bfbe      	ittt	lt
 80288a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80288a2:	2400      	movlt	r4, #0
 80288a4:	18d2      	addlt	r2, r2, r3
 80288a6:	9b07      	ldr	r3, [sp, #28]
 80288a8:	bfb8      	it	lt
 80288aa:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80288ac:	2b00      	cmp	r3, #0
 80288ae:	bfb5      	itete	lt
 80288b0:	eba8 0603 	sublt.w	r6, r8, r3
 80288b4:	4646      	movge	r6, r8
 80288b6:	2300      	movlt	r3, #0
 80288b8:	9b07      	ldrge	r3, [sp, #28]
 80288ba:	e730      	b.n	802871e <_dtoa_r+0x71e>
 80288bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80288be:	4646      	mov	r6, r8
 80288c0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80288c2:	e735      	b.n	8028730 <_dtoa_r+0x730>
 80288c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80288c6:	e75c      	b.n	8028782 <_dtoa_r+0x782>
 80288c8:	2300      	movs	r3, #0
 80288ca:	e788      	b.n	80287de <_dtoa_r+0x7de>
 80288cc:	3fe00000 	.word	0x3fe00000
 80288d0:	40240000 	.word	0x40240000
 80288d4:	40140000 	.word	0x40140000
 80288d8:	9b02      	ldr	r3, [sp, #8]
 80288da:	e780      	b.n	80287de <_dtoa_r+0x7de>
 80288dc:	2300      	movs	r3, #0
 80288de:	930a      	str	r3, [sp, #40]	@ 0x28
 80288e0:	e782      	b.n	80287e8 <_dtoa_r+0x7e8>
 80288e2:	d099      	beq.n	8028818 <_dtoa_r+0x818>
 80288e4:	331c      	adds	r3, #28
 80288e6:	9a08      	ldr	r2, [sp, #32]
 80288e8:	441a      	add	r2, r3
 80288ea:	4498      	add	r8, r3
 80288ec:	441e      	add	r6, r3
 80288ee:	9208      	str	r2, [sp, #32]
 80288f0:	e792      	b.n	8028818 <_dtoa_r+0x818>
 80288f2:	4603      	mov	r3, r0
 80288f4:	e7f6      	b.n	80288e4 <_dtoa_r+0x8e4>
 80288f6:	9b07      	ldr	r3, [sp, #28]
 80288f8:	9704      	str	r7, [sp, #16]
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	dc20      	bgt.n	8028940 <_dtoa_r+0x940>
 80288fe:	9300      	str	r3, [sp, #0]
 8028900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028902:	2b02      	cmp	r3, #2
 8028904:	dd1e      	ble.n	8028944 <_dtoa_r+0x944>
 8028906:	9b00      	ldr	r3, [sp, #0]
 8028908:	2b00      	cmp	r3, #0
 802890a:	f47f aec0 	bne.w	802868e <_dtoa_r+0x68e>
 802890e:	4621      	mov	r1, r4
 8028910:	2205      	movs	r2, #5
 8028912:	4658      	mov	r0, fp
 8028914:	f000 fe2e 	bl	8029574 <__multadd>
 8028918:	4601      	mov	r1, r0
 802891a:	4604      	mov	r4, r0
 802891c:	4648      	mov	r0, r9
 802891e:	f001 f88d 	bl	8029a3c <__mcmp>
 8028922:	2800      	cmp	r0, #0
 8028924:	f77f aeb3 	ble.w	802868e <_dtoa_r+0x68e>
 8028928:	2331      	movs	r3, #49	@ 0x31
 802892a:	4656      	mov	r6, sl
 802892c:	f806 3b01 	strb.w	r3, [r6], #1
 8028930:	9b04      	ldr	r3, [sp, #16]
 8028932:	3301      	adds	r3, #1
 8028934:	9304      	str	r3, [sp, #16]
 8028936:	e6ae      	b.n	8028696 <_dtoa_r+0x696>
 8028938:	9c07      	ldr	r4, [sp, #28]
 802893a:	9704      	str	r7, [sp, #16]
 802893c:	4625      	mov	r5, r4
 802893e:	e7f3      	b.n	8028928 <_dtoa_r+0x928>
 8028940:	9b07      	ldr	r3, [sp, #28]
 8028942:	9300      	str	r3, [sp, #0]
 8028944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028946:	2b00      	cmp	r3, #0
 8028948:	f000 8104 	beq.w	8028b54 <_dtoa_r+0xb54>
 802894c:	2e00      	cmp	r6, #0
 802894e:	dd05      	ble.n	802895c <_dtoa_r+0x95c>
 8028950:	4629      	mov	r1, r5
 8028952:	4632      	mov	r2, r6
 8028954:	4658      	mov	r0, fp
 8028956:	f001 f805 	bl	8029964 <__lshift>
 802895a:	4605      	mov	r5, r0
 802895c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802895e:	2b00      	cmp	r3, #0
 8028960:	d05a      	beq.n	8028a18 <_dtoa_r+0xa18>
 8028962:	6869      	ldr	r1, [r5, #4]
 8028964:	4658      	mov	r0, fp
 8028966:	f000 fda3 	bl	80294b0 <_Balloc>
 802896a:	4606      	mov	r6, r0
 802896c:	b928      	cbnz	r0, 802897a <_dtoa_r+0x97a>
 802896e:	4b84      	ldr	r3, [pc, #528]	@ (8028b80 <_dtoa_r+0xb80>)
 8028970:	4602      	mov	r2, r0
 8028972:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8028976:	f7ff bb5a 	b.w	802802e <_dtoa_r+0x2e>
 802897a:	692a      	ldr	r2, [r5, #16]
 802897c:	f105 010c 	add.w	r1, r5, #12
 8028980:	300c      	adds	r0, #12
 8028982:	3202      	adds	r2, #2
 8028984:	0092      	lsls	r2, r2, #2
 8028986:	f7ff fa8a 	bl	8027e9e <memcpy>
 802898a:	2201      	movs	r2, #1
 802898c:	4631      	mov	r1, r6
 802898e:	4658      	mov	r0, fp
 8028990:	f000 ffe8 	bl	8029964 <__lshift>
 8028994:	f10a 0301 	add.w	r3, sl, #1
 8028998:	462f      	mov	r7, r5
 802899a:	4605      	mov	r5, r0
 802899c:	9307      	str	r3, [sp, #28]
 802899e:	9b00      	ldr	r3, [sp, #0]
 80289a0:	4453      	add	r3, sl
 80289a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80289a4:	9b02      	ldr	r3, [sp, #8]
 80289a6:	f003 0301 	and.w	r3, r3, #1
 80289aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80289ac:	9b07      	ldr	r3, [sp, #28]
 80289ae:	4621      	mov	r1, r4
 80289b0:	4648      	mov	r0, r9
 80289b2:	3b01      	subs	r3, #1
 80289b4:	9300      	str	r3, [sp, #0]
 80289b6:	f7ff fa95 	bl	8027ee4 <quorem>
 80289ba:	4639      	mov	r1, r7
 80289bc:	9002      	str	r0, [sp, #8]
 80289be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80289c2:	4648      	mov	r0, r9
 80289c4:	f001 f83a 	bl	8029a3c <__mcmp>
 80289c8:	462a      	mov	r2, r5
 80289ca:	9008      	str	r0, [sp, #32]
 80289cc:	4621      	mov	r1, r4
 80289ce:	4658      	mov	r0, fp
 80289d0:	f001 f850 	bl	8029a74 <__mdiff>
 80289d4:	68c2      	ldr	r2, [r0, #12]
 80289d6:	4606      	mov	r6, r0
 80289d8:	bb02      	cbnz	r2, 8028a1c <_dtoa_r+0xa1c>
 80289da:	4601      	mov	r1, r0
 80289dc:	4648      	mov	r0, r9
 80289de:	f001 f82d 	bl	8029a3c <__mcmp>
 80289e2:	4602      	mov	r2, r0
 80289e4:	4631      	mov	r1, r6
 80289e6:	4658      	mov	r0, fp
 80289e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80289ea:	f000 fda1 	bl	8029530 <_Bfree>
 80289ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80289f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80289f2:	9e07      	ldr	r6, [sp, #28]
 80289f4:	ea43 0102 	orr.w	r1, r3, r2
 80289f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80289fa:	4319      	orrs	r1, r3
 80289fc:	d110      	bne.n	8028a20 <_dtoa_r+0xa20>
 80289fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8028a02:	d029      	beq.n	8028a58 <_dtoa_r+0xa58>
 8028a04:	9b08      	ldr	r3, [sp, #32]
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	dd02      	ble.n	8028a10 <_dtoa_r+0xa10>
 8028a0a:	9b02      	ldr	r3, [sp, #8]
 8028a0c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8028a10:	9b00      	ldr	r3, [sp, #0]
 8028a12:	f883 8000 	strb.w	r8, [r3]
 8028a16:	e63f      	b.n	8028698 <_dtoa_r+0x698>
 8028a18:	4628      	mov	r0, r5
 8028a1a:	e7bb      	b.n	8028994 <_dtoa_r+0x994>
 8028a1c:	2201      	movs	r2, #1
 8028a1e:	e7e1      	b.n	80289e4 <_dtoa_r+0x9e4>
 8028a20:	9b08      	ldr	r3, [sp, #32]
 8028a22:	2b00      	cmp	r3, #0
 8028a24:	db04      	blt.n	8028a30 <_dtoa_r+0xa30>
 8028a26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028a28:	430b      	orrs	r3, r1
 8028a2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8028a2c:	430b      	orrs	r3, r1
 8028a2e:	d120      	bne.n	8028a72 <_dtoa_r+0xa72>
 8028a30:	2a00      	cmp	r2, #0
 8028a32:	dded      	ble.n	8028a10 <_dtoa_r+0xa10>
 8028a34:	4649      	mov	r1, r9
 8028a36:	2201      	movs	r2, #1
 8028a38:	4658      	mov	r0, fp
 8028a3a:	f000 ff93 	bl	8029964 <__lshift>
 8028a3e:	4621      	mov	r1, r4
 8028a40:	4681      	mov	r9, r0
 8028a42:	f000 fffb 	bl	8029a3c <__mcmp>
 8028a46:	2800      	cmp	r0, #0
 8028a48:	dc03      	bgt.n	8028a52 <_dtoa_r+0xa52>
 8028a4a:	d1e1      	bne.n	8028a10 <_dtoa_r+0xa10>
 8028a4c:	f018 0f01 	tst.w	r8, #1
 8028a50:	d0de      	beq.n	8028a10 <_dtoa_r+0xa10>
 8028a52:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8028a56:	d1d8      	bne.n	8028a0a <_dtoa_r+0xa0a>
 8028a58:	2339      	movs	r3, #57	@ 0x39
 8028a5a:	9a00      	ldr	r2, [sp, #0]
 8028a5c:	7013      	strb	r3, [r2, #0]
 8028a5e:	4633      	mov	r3, r6
 8028a60:	461e      	mov	r6, r3
 8028a62:	3b01      	subs	r3, #1
 8028a64:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8028a68:	2a39      	cmp	r2, #57	@ 0x39
 8028a6a:	d052      	beq.n	8028b12 <_dtoa_r+0xb12>
 8028a6c:	3201      	adds	r2, #1
 8028a6e:	701a      	strb	r2, [r3, #0]
 8028a70:	e612      	b.n	8028698 <_dtoa_r+0x698>
 8028a72:	2a00      	cmp	r2, #0
 8028a74:	dd07      	ble.n	8028a86 <_dtoa_r+0xa86>
 8028a76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8028a7a:	d0ed      	beq.n	8028a58 <_dtoa_r+0xa58>
 8028a7c:	f108 0301 	add.w	r3, r8, #1
 8028a80:	9a00      	ldr	r2, [sp, #0]
 8028a82:	7013      	strb	r3, [r2, #0]
 8028a84:	e608      	b.n	8028698 <_dtoa_r+0x698>
 8028a86:	9b07      	ldr	r3, [sp, #28]
 8028a88:	9a07      	ldr	r2, [sp, #28]
 8028a8a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8028a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028a90:	4293      	cmp	r3, r2
 8028a92:	d028      	beq.n	8028ae6 <_dtoa_r+0xae6>
 8028a94:	4649      	mov	r1, r9
 8028a96:	2300      	movs	r3, #0
 8028a98:	220a      	movs	r2, #10
 8028a9a:	4658      	mov	r0, fp
 8028a9c:	f000 fd6a 	bl	8029574 <__multadd>
 8028aa0:	42af      	cmp	r7, r5
 8028aa2:	4681      	mov	r9, r0
 8028aa4:	f04f 0300 	mov.w	r3, #0
 8028aa8:	f04f 020a 	mov.w	r2, #10
 8028aac:	4639      	mov	r1, r7
 8028aae:	4658      	mov	r0, fp
 8028ab0:	d107      	bne.n	8028ac2 <_dtoa_r+0xac2>
 8028ab2:	f000 fd5f 	bl	8029574 <__multadd>
 8028ab6:	4607      	mov	r7, r0
 8028ab8:	4605      	mov	r5, r0
 8028aba:	9b07      	ldr	r3, [sp, #28]
 8028abc:	3301      	adds	r3, #1
 8028abe:	9307      	str	r3, [sp, #28]
 8028ac0:	e774      	b.n	80289ac <_dtoa_r+0x9ac>
 8028ac2:	f000 fd57 	bl	8029574 <__multadd>
 8028ac6:	4629      	mov	r1, r5
 8028ac8:	4607      	mov	r7, r0
 8028aca:	2300      	movs	r3, #0
 8028acc:	220a      	movs	r2, #10
 8028ace:	4658      	mov	r0, fp
 8028ad0:	f000 fd50 	bl	8029574 <__multadd>
 8028ad4:	4605      	mov	r5, r0
 8028ad6:	e7f0      	b.n	8028aba <_dtoa_r+0xaba>
 8028ad8:	9b00      	ldr	r3, [sp, #0]
 8028ada:	2700      	movs	r7, #0
 8028adc:	2b00      	cmp	r3, #0
 8028ade:	bfcc      	ite	gt
 8028ae0:	461e      	movgt	r6, r3
 8028ae2:	2601      	movle	r6, #1
 8028ae4:	4456      	add	r6, sl
 8028ae6:	4649      	mov	r1, r9
 8028ae8:	2201      	movs	r2, #1
 8028aea:	4658      	mov	r0, fp
 8028aec:	f000 ff3a 	bl	8029964 <__lshift>
 8028af0:	4621      	mov	r1, r4
 8028af2:	4681      	mov	r9, r0
 8028af4:	f000 ffa2 	bl	8029a3c <__mcmp>
 8028af8:	2800      	cmp	r0, #0
 8028afa:	dcb0      	bgt.n	8028a5e <_dtoa_r+0xa5e>
 8028afc:	d102      	bne.n	8028b04 <_dtoa_r+0xb04>
 8028afe:	f018 0f01 	tst.w	r8, #1
 8028b02:	d1ac      	bne.n	8028a5e <_dtoa_r+0xa5e>
 8028b04:	4633      	mov	r3, r6
 8028b06:	461e      	mov	r6, r3
 8028b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8028b0c:	2a30      	cmp	r2, #48	@ 0x30
 8028b0e:	d0fa      	beq.n	8028b06 <_dtoa_r+0xb06>
 8028b10:	e5c2      	b.n	8028698 <_dtoa_r+0x698>
 8028b12:	459a      	cmp	sl, r3
 8028b14:	d1a4      	bne.n	8028a60 <_dtoa_r+0xa60>
 8028b16:	9b04      	ldr	r3, [sp, #16]
 8028b18:	3301      	adds	r3, #1
 8028b1a:	9304      	str	r3, [sp, #16]
 8028b1c:	2331      	movs	r3, #49	@ 0x31
 8028b1e:	f88a 3000 	strb.w	r3, [sl]
 8028b22:	e5b9      	b.n	8028698 <_dtoa_r+0x698>
 8028b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028b26:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8028b84 <_dtoa_r+0xb84>
 8028b2a:	b11b      	cbz	r3, 8028b34 <_dtoa_r+0xb34>
 8028b2c:	f10a 0308 	add.w	r3, sl, #8
 8028b30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8028b32:	6013      	str	r3, [r2, #0]
 8028b34:	4650      	mov	r0, sl
 8028b36:	b019      	add	sp, #100	@ 0x64
 8028b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028b3e:	2b01      	cmp	r3, #1
 8028b40:	f77f ae37 	ble.w	80287b2 <_dtoa_r+0x7b2>
 8028b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028b46:	930a      	str	r3, [sp, #40]	@ 0x28
 8028b48:	2001      	movs	r0, #1
 8028b4a:	e655      	b.n	80287f8 <_dtoa_r+0x7f8>
 8028b4c:	9b00      	ldr	r3, [sp, #0]
 8028b4e:	2b00      	cmp	r3, #0
 8028b50:	f77f aed6 	ble.w	8028900 <_dtoa_r+0x900>
 8028b54:	4656      	mov	r6, sl
 8028b56:	4621      	mov	r1, r4
 8028b58:	4648      	mov	r0, r9
 8028b5a:	f7ff f9c3 	bl	8027ee4 <quorem>
 8028b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8028b62:	9b00      	ldr	r3, [sp, #0]
 8028b64:	f806 8b01 	strb.w	r8, [r6], #1
 8028b68:	eba6 020a 	sub.w	r2, r6, sl
 8028b6c:	4293      	cmp	r3, r2
 8028b6e:	ddb3      	ble.n	8028ad8 <_dtoa_r+0xad8>
 8028b70:	4649      	mov	r1, r9
 8028b72:	2300      	movs	r3, #0
 8028b74:	220a      	movs	r2, #10
 8028b76:	4658      	mov	r0, fp
 8028b78:	f000 fcfc 	bl	8029574 <__multadd>
 8028b7c:	4681      	mov	r9, r0
 8028b7e:	e7ea      	b.n	8028b56 <_dtoa_r+0xb56>
 8028b80:	0803058a 	.word	0x0803058a
 8028b84:	0803050e 	.word	0x0803050e

08028b88 <_free_r>:
 8028b88:	b538      	push	{r3, r4, r5, lr}
 8028b8a:	4605      	mov	r5, r0
 8028b8c:	2900      	cmp	r1, #0
 8028b8e:	d041      	beq.n	8028c14 <_free_r+0x8c>
 8028b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028b94:	1f0c      	subs	r4, r1, #4
 8028b96:	2b00      	cmp	r3, #0
 8028b98:	bfb8      	it	lt
 8028b9a:	18e4      	addlt	r4, r4, r3
 8028b9c:	f000 fc7c 	bl	8029498 <__malloc_lock>
 8028ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8028c18 <_free_r+0x90>)
 8028ba2:	6813      	ldr	r3, [r2, #0]
 8028ba4:	b933      	cbnz	r3, 8028bb4 <_free_r+0x2c>
 8028ba6:	6063      	str	r3, [r4, #4]
 8028ba8:	6014      	str	r4, [r2, #0]
 8028baa:	4628      	mov	r0, r5
 8028bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028bb0:	f000 bc78 	b.w	80294a4 <__malloc_unlock>
 8028bb4:	42a3      	cmp	r3, r4
 8028bb6:	d908      	bls.n	8028bca <_free_r+0x42>
 8028bb8:	6820      	ldr	r0, [r4, #0]
 8028bba:	1821      	adds	r1, r4, r0
 8028bbc:	428b      	cmp	r3, r1
 8028bbe:	bf01      	itttt	eq
 8028bc0:	6819      	ldreq	r1, [r3, #0]
 8028bc2:	685b      	ldreq	r3, [r3, #4]
 8028bc4:	1809      	addeq	r1, r1, r0
 8028bc6:	6021      	streq	r1, [r4, #0]
 8028bc8:	e7ed      	b.n	8028ba6 <_free_r+0x1e>
 8028bca:	461a      	mov	r2, r3
 8028bcc:	685b      	ldr	r3, [r3, #4]
 8028bce:	b10b      	cbz	r3, 8028bd4 <_free_r+0x4c>
 8028bd0:	42a3      	cmp	r3, r4
 8028bd2:	d9fa      	bls.n	8028bca <_free_r+0x42>
 8028bd4:	6811      	ldr	r1, [r2, #0]
 8028bd6:	1850      	adds	r0, r2, r1
 8028bd8:	42a0      	cmp	r0, r4
 8028bda:	d10b      	bne.n	8028bf4 <_free_r+0x6c>
 8028bdc:	6820      	ldr	r0, [r4, #0]
 8028bde:	4401      	add	r1, r0
 8028be0:	1850      	adds	r0, r2, r1
 8028be2:	6011      	str	r1, [r2, #0]
 8028be4:	4283      	cmp	r3, r0
 8028be6:	d1e0      	bne.n	8028baa <_free_r+0x22>
 8028be8:	6818      	ldr	r0, [r3, #0]
 8028bea:	685b      	ldr	r3, [r3, #4]
 8028bec:	4408      	add	r0, r1
 8028bee:	6053      	str	r3, [r2, #4]
 8028bf0:	6010      	str	r0, [r2, #0]
 8028bf2:	e7da      	b.n	8028baa <_free_r+0x22>
 8028bf4:	d902      	bls.n	8028bfc <_free_r+0x74>
 8028bf6:	230c      	movs	r3, #12
 8028bf8:	602b      	str	r3, [r5, #0]
 8028bfa:	e7d6      	b.n	8028baa <_free_r+0x22>
 8028bfc:	6820      	ldr	r0, [r4, #0]
 8028bfe:	1821      	adds	r1, r4, r0
 8028c00:	428b      	cmp	r3, r1
 8028c02:	bf02      	ittt	eq
 8028c04:	6819      	ldreq	r1, [r3, #0]
 8028c06:	685b      	ldreq	r3, [r3, #4]
 8028c08:	1809      	addeq	r1, r1, r0
 8028c0a:	6063      	str	r3, [r4, #4]
 8028c0c:	bf08      	it	eq
 8028c0e:	6021      	streq	r1, [r4, #0]
 8028c10:	6054      	str	r4, [r2, #4]
 8028c12:	e7ca      	b.n	8028baa <_free_r+0x22>
 8028c14:	bd38      	pop	{r3, r4, r5, pc}
 8028c16:	bf00      	nop
 8028c18:	200bbcf8 	.word	0x200bbcf8

08028c1c <rshift>:
 8028c1c:	6903      	ldr	r3, [r0, #16]
 8028c1e:	114a      	asrs	r2, r1, #5
 8028c20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8028c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028c28:	f100 0414 	add.w	r4, r0, #20
 8028c2c:	dd45      	ble.n	8028cba <rshift+0x9e>
 8028c2e:	f011 011f 	ands.w	r1, r1, #31
 8028c32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8028c36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8028c3a:	d10c      	bne.n	8028c56 <rshift+0x3a>
 8028c3c:	f100 0710 	add.w	r7, r0, #16
 8028c40:	4629      	mov	r1, r5
 8028c42:	42b1      	cmp	r1, r6
 8028c44:	d334      	bcc.n	8028cb0 <rshift+0x94>
 8028c46:	1a9b      	subs	r3, r3, r2
 8028c48:	1eea      	subs	r2, r5, #3
 8028c4a:	009b      	lsls	r3, r3, #2
 8028c4c:	4296      	cmp	r6, r2
 8028c4e:	bf38      	it	cc
 8028c50:	2300      	movcc	r3, #0
 8028c52:	4423      	add	r3, r4
 8028c54:	e015      	b.n	8028c82 <rshift+0x66>
 8028c56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028c5a:	f1c1 0820 	rsb	r8, r1, #32
 8028c5e:	f105 0e04 	add.w	lr, r5, #4
 8028c62:	46a1      	mov	r9, r4
 8028c64:	40cf      	lsrs	r7, r1
 8028c66:	4576      	cmp	r6, lr
 8028c68:	46f4      	mov	ip, lr
 8028c6a:	d815      	bhi.n	8028c98 <rshift+0x7c>
 8028c6c:	1a9a      	subs	r2, r3, r2
 8028c6e:	3501      	adds	r5, #1
 8028c70:	0092      	lsls	r2, r2, #2
 8028c72:	3a04      	subs	r2, #4
 8028c74:	42ae      	cmp	r6, r5
 8028c76:	bf38      	it	cc
 8028c78:	2200      	movcc	r2, #0
 8028c7a:	18a3      	adds	r3, r4, r2
 8028c7c:	50a7      	str	r7, [r4, r2]
 8028c7e:	b107      	cbz	r7, 8028c82 <rshift+0x66>
 8028c80:	3304      	adds	r3, #4
 8028c82:	1b1a      	subs	r2, r3, r4
 8028c84:	42a3      	cmp	r3, r4
 8028c86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8028c8a:	bf08      	it	eq
 8028c8c:	2300      	moveq	r3, #0
 8028c8e:	6102      	str	r2, [r0, #16]
 8028c90:	bf08      	it	eq
 8028c92:	6143      	streq	r3, [r0, #20]
 8028c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028c98:	f8dc c000 	ldr.w	ip, [ip]
 8028c9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8028ca0:	ea4c 0707 	orr.w	r7, ip, r7
 8028ca4:	f849 7b04 	str.w	r7, [r9], #4
 8028ca8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8028cac:	40cf      	lsrs	r7, r1
 8028cae:	e7da      	b.n	8028c66 <rshift+0x4a>
 8028cb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8028cb4:	f847 cf04 	str.w	ip, [r7, #4]!
 8028cb8:	e7c3      	b.n	8028c42 <rshift+0x26>
 8028cba:	4623      	mov	r3, r4
 8028cbc:	e7e1      	b.n	8028c82 <rshift+0x66>

08028cbe <__hexdig_fun>:
 8028cbe:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8028cc2:	2b09      	cmp	r3, #9
 8028cc4:	d802      	bhi.n	8028ccc <__hexdig_fun+0xe>
 8028cc6:	3820      	subs	r0, #32
 8028cc8:	b2c0      	uxtb	r0, r0
 8028cca:	4770      	bx	lr
 8028ccc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8028cd0:	2b05      	cmp	r3, #5
 8028cd2:	d801      	bhi.n	8028cd8 <__hexdig_fun+0x1a>
 8028cd4:	3847      	subs	r0, #71	@ 0x47
 8028cd6:	e7f7      	b.n	8028cc8 <__hexdig_fun+0xa>
 8028cd8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8028cdc:	2b05      	cmp	r3, #5
 8028cde:	d801      	bhi.n	8028ce4 <__hexdig_fun+0x26>
 8028ce0:	3827      	subs	r0, #39	@ 0x27
 8028ce2:	e7f1      	b.n	8028cc8 <__hexdig_fun+0xa>
 8028ce4:	2000      	movs	r0, #0
 8028ce6:	4770      	bx	lr

08028ce8 <__gethex>:
 8028ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cec:	b085      	sub	sp, #20
 8028cee:	468a      	mov	sl, r1
 8028cf0:	4690      	mov	r8, r2
 8028cf2:	9302      	str	r3, [sp, #8]
 8028cf4:	680b      	ldr	r3, [r1, #0]
 8028cf6:	9001      	str	r0, [sp, #4]
 8028cf8:	1c9c      	adds	r4, r3, #2
 8028cfa:	46a1      	mov	r9, r4
 8028cfc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8028d00:	2830      	cmp	r0, #48	@ 0x30
 8028d02:	d0fa      	beq.n	8028cfa <__gethex+0x12>
 8028d04:	eba9 0303 	sub.w	r3, r9, r3
 8028d08:	f1a3 0b02 	sub.w	fp, r3, #2
 8028d0c:	f7ff ffd7 	bl	8028cbe <__hexdig_fun>
 8028d10:	4605      	mov	r5, r0
 8028d12:	2800      	cmp	r0, #0
 8028d14:	d166      	bne.n	8028de4 <__gethex+0xfc>
 8028d16:	2201      	movs	r2, #1
 8028d18:	499e      	ldr	r1, [pc, #632]	@ (8028f94 <__gethex+0x2ac>)
 8028d1a:	4648      	mov	r0, r9
 8028d1c:	f7fe fa5d 	bl	80271da <strncmp>
 8028d20:	4607      	mov	r7, r0
 8028d22:	2800      	cmp	r0, #0
 8028d24:	d165      	bne.n	8028df2 <__gethex+0x10a>
 8028d26:	f899 0001 	ldrb.w	r0, [r9, #1]
 8028d2a:	4626      	mov	r6, r4
 8028d2c:	f7ff ffc7 	bl	8028cbe <__hexdig_fun>
 8028d30:	2800      	cmp	r0, #0
 8028d32:	d060      	beq.n	8028df6 <__gethex+0x10e>
 8028d34:	4623      	mov	r3, r4
 8028d36:	7818      	ldrb	r0, [r3, #0]
 8028d38:	4699      	mov	r9, r3
 8028d3a:	3301      	adds	r3, #1
 8028d3c:	2830      	cmp	r0, #48	@ 0x30
 8028d3e:	d0fa      	beq.n	8028d36 <__gethex+0x4e>
 8028d40:	f7ff ffbd 	bl	8028cbe <__hexdig_fun>
 8028d44:	fab0 f580 	clz	r5, r0
 8028d48:	f04f 0b01 	mov.w	fp, #1
 8028d4c:	096d      	lsrs	r5, r5, #5
 8028d4e:	464a      	mov	r2, r9
 8028d50:	4616      	mov	r6, r2
 8028d52:	3201      	adds	r2, #1
 8028d54:	7830      	ldrb	r0, [r6, #0]
 8028d56:	f7ff ffb2 	bl	8028cbe <__hexdig_fun>
 8028d5a:	2800      	cmp	r0, #0
 8028d5c:	d1f8      	bne.n	8028d50 <__gethex+0x68>
 8028d5e:	2201      	movs	r2, #1
 8028d60:	498c      	ldr	r1, [pc, #560]	@ (8028f94 <__gethex+0x2ac>)
 8028d62:	4630      	mov	r0, r6
 8028d64:	f7fe fa39 	bl	80271da <strncmp>
 8028d68:	2800      	cmp	r0, #0
 8028d6a:	d13e      	bne.n	8028dea <__gethex+0x102>
 8028d6c:	b944      	cbnz	r4, 8028d80 <__gethex+0x98>
 8028d6e:	1c74      	adds	r4, r6, #1
 8028d70:	4622      	mov	r2, r4
 8028d72:	4616      	mov	r6, r2
 8028d74:	3201      	adds	r2, #1
 8028d76:	7830      	ldrb	r0, [r6, #0]
 8028d78:	f7ff ffa1 	bl	8028cbe <__hexdig_fun>
 8028d7c:	2800      	cmp	r0, #0
 8028d7e:	d1f8      	bne.n	8028d72 <__gethex+0x8a>
 8028d80:	1ba4      	subs	r4, r4, r6
 8028d82:	00a7      	lsls	r7, r4, #2
 8028d84:	7833      	ldrb	r3, [r6, #0]
 8028d86:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8028d8a:	2b50      	cmp	r3, #80	@ 0x50
 8028d8c:	d13d      	bne.n	8028e0a <__gethex+0x122>
 8028d8e:	7873      	ldrb	r3, [r6, #1]
 8028d90:	2b2b      	cmp	r3, #43	@ 0x2b
 8028d92:	d032      	beq.n	8028dfa <__gethex+0x112>
 8028d94:	2b2d      	cmp	r3, #45	@ 0x2d
 8028d96:	d033      	beq.n	8028e00 <__gethex+0x118>
 8028d98:	1c71      	adds	r1, r6, #1
 8028d9a:	2400      	movs	r4, #0
 8028d9c:	7808      	ldrb	r0, [r1, #0]
 8028d9e:	f7ff ff8e 	bl	8028cbe <__hexdig_fun>
 8028da2:	1e43      	subs	r3, r0, #1
 8028da4:	b2db      	uxtb	r3, r3
 8028da6:	2b18      	cmp	r3, #24
 8028da8:	d82f      	bhi.n	8028e0a <__gethex+0x122>
 8028daa:	f1a0 0210 	sub.w	r2, r0, #16
 8028dae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028db2:	f7ff ff84 	bl	8028cbe <__hexdig_fun>
 8028db6:	f100 3cff 	add.w	ip, r0, #4294967295
 8028dba:	230a      	movs	r3, #10
 8028dbc:	fa5f fc8c 	uxtb.w	ip, ip
 8028dc0:	f1bc 0f18 	cmp.w	ip, #24
 8028dc4:	d91e      	bls.n	8028e04 <__gethex+0x11c>
 8028dc6:	b104      	cbz	r4, 8028dca <__gethex+0xe2>
 8028dc8:	4252      	negs	r2, r2
 8028dca:	4417      	add	r7, r2
 8028dcc:	f8ca 1000 	str.w	r1, [sl]
 8028dd0:	b1ed      	cbz	r5, 8028e0e <__gethex+0x126>
 8028dd2:	f1bb 0f00 	cmp.w	fp, #0
 8028dd6:	bf0c      	ite	eq
 8028dd8:	2506      	moveq	r5, #6
 8028dda:	2500      	movne	r5, #0
 8028ddc:	4628      	mov	r0, r5
 8028dde:	b005      	add	sp, #20
 8028de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028de4:	2500      	movs	r5, #0
 8028de6:	462c      	mov	r4, r5
 8028de8:	e7b1      	b.n	8028d4e <__gethex+0x66>
 8028dea:	2c00      	cmp	r4, #0
 8028dec:	d1c8      	bne.n	8028d80 <__gethex+0x98>
 8028dee:	4627      	mov	r7, r4
 8028df0:	e7c8      	b.n	8028d84 <__gethex+0x9c>
 8028df2:	464e      	mov	r6, r9
 8028df4:	462f      	mov	r7, r5
 8028df6:	2501      	movs	r5, #1
 8028df8:	e7c4      	b.n	8028d84 <__gethex+0x9c>
 8028dfa:	2400      	movs	r4, #0
 8028dfc:	1cb1      	adds	r1, r6, #2
 8028dfe:	e7cd      	b.n	8028d9c <__gethex+0xb4>
 8028e00:	2401      	movs	r4, #1
 8028e02:	e7fb      	b.n	8028dfc <__gethex+0x114>
 8028e04:	fb03 0002 	mla	r0, r3, r2, r0
 8028e08:	e7cf      	b.n	8028daa <__gethex+0xc2>
 8028e0a:	4631      	mov	r1, r6
 8028e0c:	e7de      	b.n	8028dcc <__gethex+0xe4>
 8028e0e:	eba6 0309 	sub.w	r3, r6, r9
 8028e12:	4629      	mov	r1, r5
 8028e14:	3b01      	subs	r3, #1
 8028e16:	2b07      	cmp	r3, #7
 8028e18:	dc0a      	bgt.n	8028e30 <__gethex+0x148>
 8028e1a:	9801      	ldr	r0, [sp, #4]
 8028e1c:	f000 fb48 	bl	80294b0 <_Balloc>
 8028e20:	4604      	mov	r4, r0
 8028e22:	b940      	cbnz	r0, 8028e36 <__gethex+0x14e>
 8028e24:	4b5c      	ldr	r3, [pc, #368]	@ (8028f98 <__gethex+0x2b0>)
 8028e26:	4602      	mov	r2, r0
 8028e28:	21e4      	movs	r1, #228	@ 0xe4
 8028e2a:	485c      	ldr	r0, [pc, #368]	@ (8028f9c <__gethex+0x2b4>)
 8028e2c:	f001 fade 	bl	802a3ec <__assert_func>
 8028e30:	3101      	adds	r1, #1
 8028e32:	105b      	asrs	r3, r3, #1
 8028e34:	e7ef      	b.n	8028e16 <__gethex+0x12e>
 8028e36:	f100 0a14 	add.w	sl, r0, #20
 8028e3a:	2300      	movs	r3, #0
 8028e3c:	4655      	mov	r5, sl
 8028e3e:	469b      	mov	fp, r3
 8028e40:	45b1      	cmp	r9, r6
 8028e42:	d337      	bcc.n	8028eb4 <__gethex+0x1cc>
 8028e44:	f845 bb04 	str.w	fp, [r5], #4
 8028e48:	eba5 050a 	sub.w	r5, r5, sl
 8028e4c:	4658      	mov	r0, fp
 8028e4e:	10ad      	asrs	r5, r5, #2
 8028e50:	6125      	str	r5, [r4, #16]
 8028e52:	016d      	lsls	r5, r5, #5
 8028e54:	f000 fc20 	bl	8029698 <__hi0bits>
 8028e58:	f8d8 6000 	ldr.w	r6, [r8]
 8028e5c:	1a2d      	subs	r5, r5, r0
 8028e5e:	42b5      	cmp	r5, r6
 8028e60:	dd54      	ble.n	8028f0c <__gethex+0x224>
 8028e62:	1bad      	subs	r5, r5, r6
 8028e64:	4620      	mov	r0, r4
 8028e66:	4629      	mov	r1, r5
 8028e68:	f000 ffbd 	bl	8029de6 <__any_on>
 8028e6c:	4681      	mov	r9, r0
 8028e6e:	b178      	cbz	r0, 8028e90 <__gethex+0x1a8>
 8028e70:	1e6b      	subs	r3, r5, #1
 8028e72:	f04f 0901 	mov.w	r9, #1
 8028e76:	1159      	asrs	r1, r3, #5
 8028e78:	f003 021f 	and.w	r2, r3, #31
 8028e7c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8028e80:	fa09 f202 	lsl.w	r2, r9, r2
 8028e84:	420a      	tst	r2, r1
 8028e86:	d003      	beq.n	8028e90 <__gethex+0x1a8>
 8028e88:	454b      	cmp	r3, r9
 8028e8a:	dc36      	bgt.n	8028efa <__gethex+0x212>
 8028e8c:	f04f 0902 	mov.w	r9, #2
 8028e90:	442f      	add	r7, r5
 8028e92:	4629      	mov	r1, r5
 8028e94:	4620      	mov	r0, r4
 8028e96:	f7ff fec1 	bl	8028c1c <rshift>
 8028e9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028e9e:	42bb      	cmp	r3, r7
 8028ea0:	da42      	bge.n	8028f28 <__gethex+0x240>
 8028ea2:	4621      	mov	r1, r4
 8028ea4:	9801      	ldr	r0, [sp, #4]
 8028ea6:	f000 fb43 	bl	8029530 <_Bfree>
 8028eaa:	2300      	movs	r3, #0
 8028eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028eae:	25a3      	movs	r5, #163	@ 0xa3
 8028eb0:	6013      	str	r3, [r2, #0]
 8028eb2:	e793      	b.n	8028ddc <__gethex+0xf4>
 8028eb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8028eb8:	2a2e      	cmp	r2, #46	@ 0x2e
 8028eba:	d012      	beq.n	8028ee2 <__gethex+0x1fa>
 8028ebc:	2b20      	cmp	r3, #32
 8028ebe:	d104      	bne.n	8028eca <__gethex+0x1e2>
 8028ec0:	f845 bb04 	str.w	fp, [r5], #4
 8028ec4:	f04f 0b00 	mov.w	fp, #0
 8028ec8:	465b      	mov	r3, fp
 8028eca:	7830      	ldrb	r0, [r6, #0]
 8028ecc:	9303      	str	r3, [sp, #12]
 8028ece:	f7ff fef6 	bl	8028cbe <__hexdig_fun>
 8028ed2:	9b03      	ldr	r3, [sp, #12]
 8028ed4:	f000 000f 	and.w	r0, r0, #15
 8028ed8:	4098      	lsls	r0, r3
 8028eda:	3304      	adds	r3, #4
 8028edc:	ea4b 0b00 	orr.w	fp, fp, r0
 8028ee0:	e7ae      	b.n	8028e40 <__gethex+0x158>
 8028ee2:	45b1      	cmp	r9, r6
 8028ee4:	d8ea      	bhi.n	8028ebc <__gethex+0x1d4>
 8028ee6:	2201      	movs	r2, #1
 8028ee8:	492a      	ldr	r1, [pc, #168]	@ (8028f94 <__gethex+0x2ac>)
 8028eea:	4630      	mov	r0, r6
 8028eec:	9303      	str	r3, [sp, #12]
 8028eee:	f7fe f974 	bl	80271da <strncmp>
 8028ef2:	9b03      	ldr	r3, [sp, #12]
 8028ef4:	2800      	cmp	r0, #0
 8028ef6:	d1e1      	bne.n	8028ebc <__gethex+0x1d4>
 8028ef8:	e7a2      	b.n	8028e40 <__gethex+0x158>
 8028efa:	1ea9      	subs	r1, r5, #2
 8028efc:	4620      	mov	r0, r4
 8028efe:	f000 ff72 	bl	8029de6 <__any_on>
 8028f02:	2800      	cmp	r0, #0
 8028f04:	d0c2      	beq.n	8028e8c <__gethex+0x1a4>
 8028f06:	f04f 0903 	mov.w	r9, #3
 8028f0a:	e7c1      	b.n	8028e90 <__gethex+0x1a8>
 8028f0c:	da09      	bge.n	8028f22 <__gethex+0x23a>
 8028f0e:	1b75      	subs	r5, r6, r5
 8028f10:	4621      	mov	r1, r4
 8028f12:	9801      	ldr	r0, [sp, #4]
 8028f14:	462a      	mov	r2, r5
 8028f16:	1b7f      	subs	r7, r7, r5
 8028f18:	f000 fd24 	bl	8029964 <__lshift>
 8028f1c:	4604      	mov	r4, r0
 8028f1e:	f100 0a14 	add.w	sl, r0, #20
 8028f22:	f04f 0900 	mov.w	r9, #0
 8028f26:	e7b8      	b.n	8028e9a <__gethex+0x1b2>
 8028f28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028f2c:	42bd      	cmp	r5, r7
 8028f2e:	dd6f      	ble.n	8029010 <__gethex+0x328>
 8028f30:	1bed      	subs	r5, r5, r7
 8028f32:	42ae      	cmp	r6, r5
 8028f34:	dc34      	bgt.n	8028fa0 <__gethex+0x2b8>
 8028f36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028f3a:	2b02      	cmp	r3, #2
 8028f3c:	d022      	beq.n	8028f84 <__gethex+0x29c>
 8028f3e:	2b03      	cmp	r3, #3
 8028f40:	d024      	beq.n	8028f8c <__gethex+0x2a4>
 8028f42:	2b01      	cmp	r3, #1
 8028f44:	d115      	bne.n	8028f72 <__gethex+0x28a>
 8028f46:	42ae      	cmp	r6, r5
 8028f48:	d113      	bne.n	8028f72 <__gethex+0x28a>
 8028f4a:	2e01      	cmp	r6, #1
 8028f4c:	d10b      	bne.n	8028f66 <__gethex+0x27e>
 8028f4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028f52:	2562      	movs	r5, #98	@ 0x62
 8028f54:	9a02      	ldr	r2, [sp, #8]
 8028f56:	6013      	str	r3, [r2, #0]
 8028f58:	2301      	movs	r3, #1
 8028f5a:	6123      	str	r3, [r4, #16]
 8028f5c:	f8ca 3000 	str.w	r3, [sl]
 8028f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028f62:	601c      	str	r4, [r3, #0]
 8028f64:	e73a      	b.n	8028ddc <__gethex+0xf4>
 8028f66:	1e71      	subs	r1, r6, #1
 8028f68:	4620      	mov	r0, r4
 8028f6a:	f000 ff3c 	bl	8029de6 <__any_on>
 8028f6e:	2800      	cmp	r0, #0
 8028f70:	d1ed      	bne.n	8028f4e <__gethex+0x266>
 8028f72:	4621      	mov	r1, r4
 8028f74:	9801      	ldr	r0, [sp, #4]
 8028f76:	f000 fadb 	bl	8029530 <_Bfree>
 8028f7a:	2300      	movs	r3, #0
 8028f7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028f7e:	2550      	movs	r5, #80	@ 0x50
 8028f80:	6013      	str	r3, [r2, #0]
 8028f82:	e72b      	b.n	8028ddc <__gethex+0xf4>
 8028f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028f86:	2b00      	cmp	r3, #0
 8028f88:	d1f3      	bne.n	8028f72 <__gethex+0x28a>
 8028f8a:	e7e0      	b.n	8028f4e <__gethex+0x266>
 8028f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	d1dd      	bne.n	8028f4e <__gethex+0x266>
 8028f92:	e7ee      	b.n	8028f72 <__gethex+0x28a>
 8028f94:	080302a0 	.word	0x080302a0
 8028f98:	0803058a 	.word	0x0803058a
 8028f9c:	0803059b 	.word	0x0803059b
 8028fa0:	1e6f      	subs	r7, r5, #1
 8028fa2:	f1b9 0f00 	cmp.w	r9, #0
 8028fa6:	d130      	bne.n	802900a <__gethex+0x322>
 8028fa8:	b127      	cbz	r7, 8028fb4 <__gethex+0x2cc>
 8028faa:	4639      	mov	r1, r7
 8028fac:	4620      	mov	r0, r4
 8028fae:	f000 ff1a 	bl	8029de6 <__any_on>
 8028fb2:	4681      	mov	r9, r0
 8028fb4:	117a      	asrs	r2, r7, #5
 8028fb6:	2301      	movs	r3, #1
 8028fb8:	f007 071f 	and.w	r7, r7, #31
 8028fbc:	4629      	mov	r1, r5
 8028fbe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028fc2:	4620      	mov	r0, r4
 8028fc4:	40bb      	lsls	r3, r7
 8028fc6:	1b76      	subs	r6, r6, r5
 8028fc8:	2502      	movs	r5, #2
 8028fca:	4213      	tst	r3, r2
 8028fcc:	bf18      	it	ne
 8028fce:	f049 0902 	orrne.w	r9, r9, #2
 8028fd2:	f7ff fe23 	bl	8028c1c <rshift>
 8028fd6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8028fda:	f1b9 0f00 	cmp.w	r9, #0
 8028fde:	d047      	beq.n	8029070 <__gethex+0x388>
 8028fe0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028fe4:	2b02      	cmp	r3, #2
 8028fe6:	d015      	beq.n	8029014 <__gethex+0x32c>
 8028fe8:	2b03      	cmp	r3, #3
 8028fea:	d017      	beq.n	802901c <__gethex+0x334>
 8028fec:	2b01      	cmp	r3, #1
 8028fee:	d109      	bne.n	8029004 <__gethex+0x31c>
 8028ff0:	f019 0f02 	tst.w	r9, #2
 8028ff4:	d006      	beq.n	8029004 <__gethex+0x31c>
 8028ff6:	f8da 3000 	ldr.w	r3, [sl]
 8028ffa:	ea49 0903 	orr.w	r9, r9, r3
 8028ffe:	f019 0f01 	tst.w	r9, #1
 8029002:	d10e      	bne.n	8029022 <__gethex+0x33a>
 8029004:	f045 0510 	orr.w	r5, r5, #16
 8029008:	e032      	b.n	8029070 <__gethex+0x388>
 802900a:	f04f 0901 	mov.w	r9, #1
 802900e:	e7d1      	b.n	8028fb4 <__gethex+0x2cc>
 8029010:	2501      	movs	r5, #1
 8029012:	e7e2      	b.n	8028fda <__gethex+0x2f2>
 8029014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8029016:	f1c3 0301 	rsb	r3, r3, #1
 802901a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802901c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802901e:	2b00      	cmp	r3, #0
 8029020:	d0f0      	beq.n	8029004 <__gethex+0x31c>
 8029022:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8029026:	f104 0314 	add.w	r3, r4, #20
 802902a:	f04f 0c00 	mov.w	ip, #0
 802902e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029032:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8029036:	4618      	mov	r0, r3
 8029038:	f853 2b04 	ldr.w	r2, [r3], #4
 802903c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029040:	d01b      	beq.n	802907a <__gethex+0x392>
 8029042:	3201      	adds	r2, #1
 8029044:	6002      	str	r2, [r0, #0]
 8029046:	2d02      	cmp	r5, #2
 8029048:	f104 0314 	add.w	r3, r4, #20
 802904c:	d13c      	bne.n	80290c8 <__gethex+0x3e0>
 802904e:	f8d8 2000 	ldr.w	r2, [r8]
 8029052:	3a01      	subs	r2, #1
 8029054:	42b2      	cmp	r2, r6
 8029056:	d109      	bne.n	802906c <__gethex+0x384>
 8029058:	1171      	asrs	r1, r6, #5
 802905a:	2201      	movs	r2, #1
 802905c:	f006 061f 	and.w	r6, r6, #31
 8029060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8029064:	fa02 f606 	lsl.w	r6, r2, r6
 8029068:	421e      	tst	r6, r3
 802906a:	d13a      	bne.n	80290e2 <__gethex+0x3fa>
 802906c:	f045 0520 	orr.w	r5, r5, #32
 8029070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029072:	601c      	str	r4, [r3, #0]
 8029074:	9b02      	ldr	r3, [sp, #8]
 8029076:	601f      	str	r7, [r3, #0]
 8029078:	e6b0      	b.n	8028ddc <__gethex+0xf4>
 802907a:	4299      	cmp	r1, r3
 802907c:	f843 cc04 	str.w	ip, [r3, #-4]
 8029080:	d8d9      	bhi.n	8029036 <__gethex+0x34e>
 8029082:	68a3      	ldr	r3, [r4, #8]
 8029084:	459b      	cmp	fp, r3
 8029086:	db17      	blt.n	80290b8 <__gethex+0x3d0>
 8029088:	6861      	ldr	r1, [r4, #4]
 802908a:	9801      	ldr	r0, [sp, #4]
 802908c:	3101      	adds	r1, #1
 802908e:	f000 fa0f 	bl	80294b0 <_Balloc>
 8029092:	4681      	mov	r9, r0
 8029094:	b918      	cbnz	r0, 802909e <__gethex+0x3b6>
 8029096:	4b1a      	ldr	r3, [pc, #104]	@ (8029100 <__gethex+0x418>)
 8029098:	4602      	mov	r2, r0
 802909a:	2184      	movs	r1, #132	@ 0x84
 802909c:	e6c5      	b.n	8028e2a <__gethex+0x142>
 802909e:	6922      	ldr	r2, [r4, #16]
 80290a0:	f104 010c 	add.w	r1, r4, #12
 80290a4:	300c      	adds	r0, #12
 80290a6:	3202      	adds	r2, #2
 80290a8:	0092      	lsls	r2, r2, #2
 80290aa:	f7fe fef8 	bl	8027e9e <memcpy>
 80290ae:	4621      	mov	r1, r4
 80290b0:	464c      	mov	r4, r9
 80290b2:	9801      	ldr	r0, [sp, #4]
 80290b4:	f000 fa3c 	bl	8029530 <_Bfree>
 80290b8:	6923      	ldr	r3, [r4, #16]
 80290ba:	1c5a      	adds	r2, r3, #1
 80290bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80290c0:	6122      	str	r2, [r4, #16]
 80290c2:	2201      	movs	r2, #1
 80290c4:	615a      	str	r2, [r3, #20]
 80290c6:	e7be      	b.n	8029046 <__gethex+0x35e>
 80290c8:	6922      	ldr	r2, [r4, #16]
 80290ca:	455a      	cmp	r2, fp
 80290cc:	dd0b      	ble.n	80290e6 <__gethex+0x3fe>
 80290ce:	2101      	movs	r1, #1
 80290d0:	4620      	mov	r0, r4
 80290d2:	f7ff fda3 	bl	8028c1c <rshift>
 80290d6:	3701      	adds	r7, #1
 80290d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80290dc:	42bb      	cmp	r3, r7
 80290de:	f6ff aee0 	blt.w	8028ea2 <__gethex+0x1ba>
 80290e2:	2501      	movs	r5, #1
 80290e4:	e7c2      	b.n	802906c <__gethex+0x384>
 80290e6:	f016 061f 	ands.w	r6, r6, #31
 80290ea:	d0fa      	beq.n	80290e2 <__gethex+0x3fa>
 80290ec:	4453      	add	r3, sl
 80290ee:	f1c6 0620 	rsb	r6, r6, #32
 80290f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80290f6:	f000 facf 	bl	8029698 <__hi0bits>
 80290fa:	42b0      	cmp	r0, r6
 80290fc:	dbe7      	blt.n	80290ce <__gethex+0x3e6>
 80290fe:	e7f0      	b.n	80290e2 <__gethex+0x3fa>
 8029100:	0803058a 	.word	0x0803058a

08029104 <L_shift>:
 8029104:	f1c2 0208 	rsb	r2, r2, #8
 8029108:	0092      	lsls	r2, r2, #2
 802910a:	b570      	push	{r4, r5, r6, lr}
 802910c:	f1c2 0620 	rsb	r6, r2, #32
 8029110:	6843      	ldr	r3, [r0, #4]
 8029112:	6804      	ldr	r4, [r0, #0]
 8029114:	fa03 f506 	lsl.w	r5, r3, r6
 8029118:	40d3      	lsrs	r3, r2
 802911a:	432c      	orrs	r4, r5
 802911c:	6004      	str	r4, [r0, #0]
 802911e:	f840 3f04 	str.w	r3, [r0, #4]!
 8029122:	4288      	cmp	r0, r1
 8029124:	d3f4      	bcc.n	8029110 <L_shift+0xc>
 8029126:	bd70      	pop	{r4, r5, r6, pc}

08029128 <__match>:
 8029128:	6803      	ldr	r3, [r0, #0]
 802912a:	3301      	adds	r3, #1
 802912c:	b530      	push	{r4, r5, lr}
 802912e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029132:	b914      	cbnz	r4, 802913a <__match+0x12>
 8029134:	6003      	str	r3, [r0, #0]
 8029136:	2001      	movs	r0, #1
 8029138:	bd30      	pop	{r4, r5, pc}
 802913a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802913e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8029142:	2d19      	cmp	r5, #25
 8029144:	bf98      	it	ls
 8029146:	3220      	addls	r2, #32
 8029148:	42a2      	cmp	r2, r4
 802914a:	d0f0      	beq.n	802912e <__match+0x6>
 802914c:	2000      	movs	r0, #0
 802914e:	e7f3      	b.n	8029138 <__match+0x10>

08029150 <__hexnan>:
 8029150:	680b      	ldr	r3, [r1, #0]
 8029152:	6801      	ldr	r1, [r0, #0]
 8029154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029158:	115e      	asrs	r6, r3, #5
 802915a:	f013 031f 	ands.w	r3, r3, #31
 802915e:	f04f 0500 	mov.w	r5, #0
 8029162:	b087      	sub	sp, #28
 8029164:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8029168:	4682      	mov	sl, r0
 802916a:	4690      	mov	r8, r2
 802916c:	46ab      	mov	fp, r5
 802916e:	bf18      	it	ne
 8029170:	3604      	addne	r6, #4
 8029172:	9301      	str	r3, [sp, #4]
 8029174:	9502      	str	r5, [sp, #8]
 8029176:	1f37      	subs	r7, r6, #4
 8029178:	f846 5c04 	str.w	r5, [r6, #-4]
 802917c:	46b9      	mov	r9, r7
 802917e:	463c      	mov	r4, r7
 8029180:	1c4b      	adds	r3, r1, #1
 8029182:	784a      	ldrb	r2, [r1, #1]
 8029184:	9303      	str	r3, [sp, #12]
 8029186:	b342      	cbz	r2, 80291da <__hexnan+0x8a>
 8029188:	4610      	mov	r0, r2
 802918a:	9105      	str	r1, [sp, #20]
 802918c:	9204      	str	r2, [sp, #16]
 802918e:	f7ff fd96 	bl	8028cbe <__hexdig_fun>
 8029192:	2800      	cmp	r0, #0
 8029194:	d151      	bne.n	802923a <__hexnan+0xea>
 8029196:	9a04      	ldr	r2, [sp, #16]
 8029198:	9905      	ldr	r1, [sp, #20]
 802919a:	2a20      	cmp	r2, #32
 802919c:	d818      	bhi.n	80291d0 <__hexnan+0x80>
 802919e:	9b02      	ldr	r3, [sp, #8]
 80291a0:	459b      	cmp	fp, r3
 80291a2:	dd13      	ble.n	80291cc <__hexnan+0x7c>
 80291a4:	454c      	cmp	r4, r9
 80291a6:	d206      	bcs.n	80291b6 <__hexnan+0x66>
 80291a8:	2d07      	cmp	r5, #7
 80291aa:	dc04      	bgt.n	80291b6 <__hexnan+0x66>
 80291ac:	462a      	mov	r2, r5
 80291ae:	4649      	mov	r1, r9
 80291b0:	4620      	mov	r0, r4
 80291b2:	f7ff ffa7 	bl	8029104 <L_shift>
 80291b6:	4544      	cmp	r4, r8
 80291b8:	d951      	bls.n	802925e <__hexnan+0x10e>
 80291ba:	2300      	movs	r3, #0
 80291bc:	f1a4 0904 	sub.w	r9, r4, #4
 80291c0:	f8cd b008 	str.w	fp, [sp, #8]
 80291c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80291c8:	461d      	mov	r5, r3
 80291ca:	464c      	mov	r4, r9
 80291cc:	9903      	ldr	r1, [sp, #12]
 80291ce:	e7d7      	b.n	8029180 <__hexnan+0x30>
 80291d0:	2a29      	cmp	r2, #41	@ 0x29
 80291d2:	d156      	bne.n	8029282 <__hexnan+0x132>
 80291d4:	3102      	adds	r1, #2
 80291d6:	f8ca 1000 	str.w	r1, [sl]
 80291da:	f1bb 0f00 	cmp.w	fp, #0
 80291de:	d050      	beq.n	8029282 <__hexnan+0x132>
 80291e0:	454c      	cmp	r4, r9
 80291e2:	d206      	bcs.n	80291f2 <__hexnan+0xa2>
 80291e4:	2d07      	cmp	r5, #7
 80291e6:	dc04      	bgt.n	80291f2 <__hexnan+0xa2>
 80291e8:	462a      	mov	r2, r5
 80291ea:	4649      	mov	r1, r9
 80291ec:	4620      	mov	r0, r4
 80291ee:	f7ff ff89 	bl	8029104 <L_shift>
 80291f2:	4544      	cmp	r4, r8
 80291f4:	d935      	bls.n	8029262 <__hexnan+0x112>
 80291f6:	f1a8 0204 	sub.w	r2, r8, #4
 80291fa:	4623      	mov	r3, r4
 80291fc:	f853 1b04 	ldr.w	r1, [r3], #4
 8029200:	429f      	cmp	r7, r3
 8029202:	f842 1f04 	str.w	r1, [r2, #4]!
 8029206:	d2f9      	bcs.n	80291fc <__hexnan+0xac>
 8029208:	1b3b      	subs	r3, r7, r4
 802920a:	3e03      	subs	r6, #3
 802920c:	3401      	adds	r4, #1
 802920e:	2200      	movs	r2, #0
 8029210:	f023 0303 	bic.w	r3, r3, #3
 8029214:	3304      	adds	r3, #4
 8029216:	42b4      	cmp	r4, r6
 8029218:	bf88      	it	hi
 802921a:	2304      	movhi	r3, #4
 802921c:	4443      	add	r3, r8
 802921e:	f843 2b04 	str.w	r2, [r3], #4
 8029222:	429f      	cmp	r7, r3
 8029224:	d2fb      	bcs.n	802921e <__hexnan+0xce>
 8029226:	683b      	ldr	r3, [r7, #0]
 8029228:	b91b      	cbnz	r3, 8029232 <__hexnan+0xe2>
 802922a:	4547      	cmp	r7, r8
 802922c:	d127      	bne.n	802927e <__hexnan+0x12e>
 802922e:	2301      	movs	r3, #1
 8029230:	603b      	str	r3, [r7, #0]
 8029232:	2005      	movs	r0, #5
 8029234:	b007      	add	sp, #28
 8029236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802923a:	3501      	adds	r5, #1
 802923c:	f10b 0b01 	add.w	fp, fp, #1
 8029240:	2d08      	cmp	r5, #8
 8029242:	dd05      	ble.n	8029250 <__hexnan+0x100>
 8029244:	4544      	cmp	r4, r8
 8029246:	d9c1      	bls.n	80291cc <__hexnan+0x7c>
 8029248:	2300      	movs	r3, #0
 802924a:	3c04      	subs	r4, #4
 802924c:	2501      	movs	r5, #1
 802924e:	6023      	str	r3, [r4, #0]
 8029250:	6822      	ldr	r2, [r4, #0]
 8029252:	f000 000f 	and.w	r0, r0, #15
 8029256:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 802925a:	6020      	str	r0, [r4, #0]
 802925c:	e7b6      	b.n	80291cc <__hexnan+0x7c>
 802925e:	2508      	movs	r5, #8
 8029260:	e7b4      	b.n	80291cc <__hexnan+0x7c>
 8029262:	9b01      	ldr	r3, [sp, #4]
 8029264:	2b00      	cmp	r3, #0
 8029266:	d0de      	beq.n	8029226 <__hexnan+0xd6>
 8029268:	f1c3 0320 	rsb	r3, r3, #32
 802926c:	f04f 32ff 	mov.w	r2, #4294967295
 8029270:	40da      	lsrs	r2, r3
 8029272:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8029276:	4013      	ands	r3, r2
 8029278:	f846 3c04 	str.w	r3, [r6, #-4]
 802927c:	e7d3      	b.n	8029226 <__hexnan+0xd6>
 802927e:	3f04      	subs	r7, #4
 8029280:	e7d1      	b.n	8029226 <__hexnan+0xd6>
 8029282:	2004      	movs	r0, #4
 8029284:	e7d6      	b.n	8029234 <__hexnan+0xe4>
	...

08029288 <_findenv_r>:
 8029288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802928c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80292fc <_findenv_r+0x74>
 8029290:	4606      	mov	r6, r0
 8029292:	4689      	mov	r9, r1
 8029294:	4617      	mov	r7, r2
 8029296:	f001 f8db 	bl	802a450 <__env_lock>
 802929a:	f8da 4000 	ldr.w	r4, [sl]
 802929e:	b134      	cbz	r4, 80292ae <_findenv_r+0x26>
 80292a0:	464b      	mov	r3, r9
 80292a2:	4698      	mov	r8, r3
 80292a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80292a8:	b13a      	cbz	r2, 80292ba <_findenv_r+0x32>
 80292aa:	2a3d      	cmp	r2, #61	@ 0x3d
 80292ac:	d1f9      	bne.n	80292a2 <_findenv_r+0x1a>
 80292ae:	4630      	mov	r0, r6
 80292b0:	f001 f8d4 	bl	802a45c <__env_unlock>
 80292b4:	2000      	movs	r0, #0
 80292b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80292ba:	eba8 0809 	sub.w	r8, r8, r9
 80292be:	46a3      	mov	fp, r4
 80292c0:	f854 0b04 	ldr.w	r0, [r4], #4
 80292c4:	2800      	cmp	r0, #0
 80292c6:	d0f2      	beq.n	80292ae <_findenv_r+0x26>
 80292c8:	4642      	mov	r2, r8
 80292ca:	4649      	mov	r1, r9
 80292cc:	f7fd ff85 	bl	80271da <strncmp>
 80292d0:	2800      	cmp	r0, #0
 80292d2:	d1f4      	bne.n	80292be <_findenv_r+0x36>
 80292d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80292d8:	eb03 0508 	add.w	r5, r3, r8
 80292dc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80292e0:	2b3d      	cmp	r3, #61	@ 0x3d
 80292e2:	d1ec      	bne.n	80292be <_findenv_r+0x36>
 80292e4:	f8da 3000 	ldr.w	r3, [sl]
 80292e8:	4630      	mov	r0, r6
 80292ea:	ebab 0303 	sub.w	r3, fp, r3
 80292ee:	109b      	asrs	r3, r3, #2
 80292f0:	603b      	str	r3, [r7, #0]
 80292f2:	f001 f8b3 	bl	802a45c <__env_unlock>
 80292f6:	1c68      	adds	r0, r5, #1
 80292f8:	e7dd      	b.n	80292b6 <_findenv_r+0x2e>
 80292fa:	bf00      	nop
 80292fc:	2000035c 	.word	0x2000035c

08029300 <_getenv_r>:
 8029300:	b507      	push	{r0, r1, r2, lr}
 8029302:	aa01      	add	r2, sp, #4
 8029304:	f7ff ffc0 	bl	8029288 <_findenv_r>
 8029308:	b003      	add	sp, #12
 802930a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08029310 <malloc>:
 8029310:	4b02      	ldr	r3, [pc, #8]	@ (802931c <malloc+0xc>)
 8029312:	4601      	mov	r1, r0
 8029314:	6818      	ldr	r0, [r3, #0]
 8029316:	f000 b82d 	b.w	8029374 <_malloc_r>
 802931a:	bf00      	nop
 802931c:	20000508 	.word	0x20000508

08029320 <free>:
 8029320:	4b02      	ldr	r3, [pc, #8]	@ (802932c <free+0xc>)
 8029322:	4601      	mov	r1, r0
 8029324:	6818      	ldr	r0, [r3, #0]
 8029326:	f7ff bc2f 	b.w	8028b88 <_free_r>
 802932a:	bf00      	nop
 802932c:	20000508 	.word	0x20000508

08029330 <sbrk_aligned>:
 8029330:	b570      	push	{r4, r5, r6, lr}
 8029332:	4e0f      	ldr	r6, [pc, #60]	@ (8029370 <sbrk_aligned+0x40>)
 8029334:	460c      	mov	r4, r1
 8029336:	4605      	mov	r5, r0
 8029338:	6831      	ldr	r1, [r6, #0]
 802933a:	b911      	cbnz	r1, 8029342 <sbrk_aligned+0x12>
 802933c:	f001 f846 	bl	802a3cc <_sbrk_r>
 8029340:	6030      	str	r0, [r6, #0]
 8029342:	4621      	mov	r1, r4
 8029344:	4628      	mov	r0, r5
 8029346:	f001 f841 	bl	802a3cc <_sbrk_r>
 802934a:	1c43      	adds	r3, r0, #1
 802934c:	d103      	bne.n	8029356 <sbrk_aligned+0x26>
 802934e:	f04f 34ff 	mov.w	r4, #4294967295
 8029352:	4620      	mov	r0, r4
 8029354:	bd70      	pop	{r4, r5, r6, pc}
 8029356:	1cc4      	adds	r4, r0, #3
 8029358:	f024 0403 	bic.w	r4, r4, #3
 802935c:	42a0      	cmp	r0, r4
 802935e:	d0f8      	beq.n	8029352 <sbrk_aligned+0x22>
 8029360:	1a21      	subs	r1, r4, r0
 8029362:	4628      	mov	r0, r5
 8029364:	f001 f832 	bl	802a3cc <_sbrk_r>
 8029368:	3001      	adds	r0, #1
 802936a:	d1f2      	bne.n	8029352 <sbrk_aligned+0x22>
 802936c:	e7ef      	b.n	802934e <sbrk_aligned+0x1e>
 802936e:	bf00      	nop
 8029370:	200bbcf4 	.word	0x200bbcf4

08029374 <_malloc_r>:
 8029374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029378:	1ccd      	adds	r5, r1, #3
 802937a:	4606      	mov	r6, r0
 802937c:	f025 0503 	bic.w	r5, r5, #3
 8029380:	3508      	adds	r5, #8
 8029382:	2d0c      	cmp	r5, #12
 8029384:	bf38      	it	cc
 8029386:	250c      	movcc	r5, #12
 8029388:	2d00      	cmp	r5, #0
 802938a:	db01      	blt.n	8029390 <_malloc_r+0x1c>
 802938c:	42a9      	cmp	r1, r5
 802938e:	d904      	bls.n	802939a <_malloc_r+0x26>
 8029390:	230c      	movs	r3, #12
 8029392:	6033      	str	r3, [r6, #0]
 8029394:	2000      	movs	r0, #0
 8029396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802939a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8029470 <_malloc_r+0xfc>
 802939e:	f000 f87b 	bl	8029498 <__malloc_lock>
 80293a2:	f8d8 3000 	ldr.w	r3, [r8]
 80293a6:	461c      	mov	r4, r3
 80293a8:	bb44      	cbnz	r4, 80293fc <_malloc_r+0x88>
 80293aa:	4629      	mov	r1, r5
 80293ac:	4630      	mov	r0, r6
 80293ae:	f7ff ffbf 	bl	8029330 <sbrk_aligned>
 80293b2:	1c43      	adds	r3, r0, #1
 80293b4:	4604      	mov	r4, r0
 80293b6:	d158      	bne.n	802946a <_malloc_r+0xf6>
 80293b8:	f8d8 4000 	ldr.w	r4, [r8]
 80293bc:	4627      	mov	r7, r4
 80293be:	2f00      	cmp	r7, #0
 80293c0:	d143      	bne.n	802944a <_malloc_r+0xd6>
 80293c2:	2c00      	cmp	r4, #0
 80293c4:	d04b      	beq.n	802945e <_malloc_r+0xea>
 80293c6:	6823      	ldr	r3, [r4, #0]
 80293c8:	4639      	mov	r1, r7
 80293ca:	4630      	mov	r0, r6
 80293cc:	eb04 0903 	add.w	r9, r4, r3
 80293d0:	f000 fffc 	bl	802a3cc <_sbrk_r>
 80293d4:	4581      	cmp	r9, r0
 80293d6:	d142      	bne.n	802945e <_malloc_r+0xea>
 80293d8:	6821      	ldr	r1, [r4, #0]
 80293da:	4630      	mov	r0, r6
 80293dc:	1a6d      	subs	r5, r5, r1
 80293de:	4629      	mov	r1, r5
 80293e0:	f7ff ffa6 	bl	8029330 <sbrk_aligned>
 80293e4:	3001      	adds	r0, #1
 80293e6:	d03a      	beq.n	802945e <_malloc_r+0xea>
 80293e8:	6823      	ldr	r3, [r4, #0]
 80293ea:	442b      	add	r3, r5
 80293ec:	6023      	str	r3, [r4, #0]
 80293ee:	f8d8 3000 	ldr.w	r3, [r8]
 80293f2:	685a      	ldr	r2, [r3, #4]
 80293f4:	bb62      	cbnz	r2, 8029450 <_malloc_r+0xdc>
 80293f6:	f8c8 7000 	str.w	r7, [r8]
 80293fa:	e00f      	b.n	802941c <_malloc_r+0xa8>
 80293fc:	6822      	ldr	r2, [r4, #0]
 80293fe:	1b52      	subs	r2, r2, r5
 8029400:	d420      	bmi.n	8029444 <_malloc_r+0xd0>
 8029402:	2a0b      	cmp	r2, #11
 8029404:	d917      	bls.n	8029436 <_malloc_r+0xc2>
 8029406:	1961      	adds	r1, r4, r5
 8029408:	42a3      	cmp	r3, r4
 802940a:	6025      	str	r5, [r4, #0]
 802940c:	bf18      	it	ne
 802940e:	6059      	strne	r1, [r3, #4]
 8029410:	6863      	ldr	r3, [r4, #4]
 8029412:	bf08      	it	eq
 8029414:	f8c8 1000 	streq.w	r1, [r8]
 8029418:	5162      	str	r2, [r4, r5]
 802941a:	604b      	str	r3, [r1, #4]
 802941c:	4630      	mov	r0, r6
 802941e:	f000 f841 	bl	80294a4 <__malloc_unlock>
 8029422:	f104 000b 	add.w	r0, r4, #11
 8029426:	1d23      	adds	r3, r4, #4
 8029428:	f020 0007 	bic.w	r0, r0, #7
 802942c:	1ac2      	subs	r2, r0, r3
 802942e:	bf1c      	itt	ne
 8029430:	1a1b      	subne	r3, r3, r0
 8029432:	50a3      	strne	r3, [r4, r2]
 8029434:	e7af      	b.n	8029396 <_malloc_r+0x22>
 8029436:	6862      	ldr	r2, [r4, #4]
 8029438:	42a3      	cmp	r3, r4
 802943a:	bf0c      	ite	eq
 802943c:	f8c8 2000 	streq.w	r2, [r8]
 8029440:	605a      	strne	r2, [r3, #4]
 8029442:	e7eb      	b.n	802941c <_malloc_r+0xa8>
 8029444:	4623      	mov	r3, r4
 8029446:	6864      	ldr	r4, [r4, #4]
 8029448:	e7ae      	b.n	80293a8 <_malloc_r+0x34>
 802944a:	463c      	mov	r4, r7
 802944c:	687f      	ldr	r7, [r7, #4]
 802944e:	e7b6      	b.n	80293be <_malloc_r+0x4a>
 8029450:	461a      	mov	r2, r3
 8029452:	685b      	ldr	r3, [r3, #4]
 8029454:	42a3      	cmp	r3, r4
 8029456:	d1fb      	bne.n	8029450 <_malloc_r+0xdc>
 8029458:	2300      	movs	r3, #0
 802945a:	6053      	str	r3, [r2, #4]
 802945c:	e7de      	b.n	802941c <_malloc_r+0xa8>
 802945e:	230c      	movs	r3, #12
 8029460:	4630      	mov	r0, r6
 8029462:	6033      	str	r3, [r6, #0]
 8029464:	f000 f81e 	bl	80294a4 <__malloc_unlock>
 8029468:	e794      	b.n	8029394 <_malloc_r+0x20>
 802946a:	6005      	str	r5, [r0, #0]
 802946c:	e7d6      	b.n	802941c <_malloc_r+0xa8>
 802946e:	bf00      	nop
 8029470:	200bbcf8 	.word	0x200bbcf8

08029474 <__ascii_mbtowc>:
 8029474:	b082      	sub	sp, #8
 8029476:	b901      	cbnz	r1, 802947a <__ascii_mbtowc+0x6>
 8029478:	a901      	add	r1, sp, #4
 802947a:	b142      	cbz	r2, 802948e <__ascii_mbtowc+0x1a>
 802947c:	b14b      	cbz	r3, 8029492 <__ascii_mbtowc+0x1e>
 802947e:	7813      	ldrb	r3, [r2, #0]
 8029480:	600b      	str	r3, [r1, #0]
 8029482:	7812      	ldrb	r2, [r2, #0]
 8029484:	1e10      	subs	r0, r2, #0
 8029486:	bf18      	it	ne
 8029488:	2001      	movne	r0, #1
 802948a:	b002      	add	sp, #8
 802948c:	4770      	bx	lr
 802948e:	4610      	mov	r0, r2
 8029490:	e7fb      	b.n	802948a <__ascii_mbtowc+0x16>
 8029492:	f06f 0001 	mvn.w	r0, #1
 8029496:	e7f8      	b.n	802948a <__ascii_mbtowc+0x16>

08029498 <__malloc_lock>:
 8029498:	4801      	ldr	r0, [pc, #4]	@ (80294a0 <__malloc_lock+0x8>)
 802949a:	f7fe bce7 	b.w	8027e6c <__retarget_lock_acquire_recursive>
 802949e:	bf00      	nop
 80294a0:	200bbcf2 	.word	0x200bbcf2

080294a4 <__malloc_unlock>:
 80294a4:	4801      	ldr	r0, [pc, #4]	@ (80294ac <__malloc_unlock+0x8>)
 80294a6:	f7fe bce3 	b.w	8027e70 <__retarget_lock_release_recursive>
 80294aa:	bf00      	nop
 80294ac:	200bbcf2 	.word	0x200bbcf2

080294b0 <_Balloc>:
 80294b0:	b570      	push	{r4, r5, r6, lr}
 80294b2:	69c6      	ldr	r6, [r0, #28]
 80294b4:	4604      	mov	r4, r0
 80294b6:	460d      	mov	r5, r1
 80294b8:	b976      	cbnz	r6, 80294d8 <_Balloc+0x28>
 80294ba:	2010      	movs	r0, #16
 80294bc:	f7ff ff28 	bl	8029310 <malloc>
 80294c0:	4602      	mov	r2, r0
 80294c2:	61e0      	str	r0, [r4, #28]
 80294c4:	b920      	cbnz	r0, 80294d0 <_Balloc+0x20>
 80294c6:	4b18      	ldr	r3, [pc, #96]	@ (8029528 <_Balloc+0x78>)
 80294c8:	216b      	movs	r1, #107	@ 0x6b
 80294ca:	4818      	ldr	r0, [pc, #96]	@ (802952c <_Balloc+0x7c>)
 80294cc:	f000 ff8e 	bl	802a3ec <__assert_func>
 80294d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80294d4:	6006      	str	r6, [r0, #0]
 80294d6:	60c6      	str	r6, [r0, #12]
 80294d8:	69e6      	ldr	r6, [r4, #28]
 80294da:	68f3      	ldr	r3, [r6, #12]
 80294dc:	b183      	cbz	r3, 8029500 <_Balloc+0x50>
 80294de:	69e3      	ldr	r3, [r4, #28]
 80294e0:	68db      	ldr	r3, [r3, #12]
 80294e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80294e6:	b9b8      	cbnz	r0, 8029518 <_Balloc+0x68>
 80294e8:	2101      	movs	r1, #1
 80294ea:	4620      	mov	r0, r4
 80294ec:	fa01 f605 	lsl.w	r6, r1, r5
 80294f0:	1d72      	adds	r2, r6, #5
 80294f2:	0092      	lsls	r2, r2, #2
 80294f4:	f000 ff98 	bl	802a428 <_calloc_r>
 80294f8:	b160      	cbz	r0, 8029514 <_Balloc+0x64>
 80294fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80294fe:	e00e      	b.n	802951e <_Balloc+0x6e>
 8029500:	2221      	movs	r2, #33	@ 0x21
 8029502:	2104      	movs	r1, #4
 8029504:	4620      	mov	r0, r4
 8029506:	f000 ff8f 	bl	802a428 <_calloc_r>
 802950a:	69e3      	ldr	r3, [r4, #28]
 802950c:	60f0      	str	r0, [r6, #12]
 802950e:	68db      	ldr	r3, [r3, #12]
 8029510:	2b00      	cmp	r3, #0
 8029512:	d1e4      	bne.n	80294de <_Balloc+0x2e>
 8029514:	2000      	movs	r0, #0
 8029516:	bd70      	pop	{r4, r5, r6, pc}
 8029518:	6802      	ldr	r2, [r0, #0]
 802951a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802951e:	2300      	movs	r3, #0
 8029520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8029524:	e7f7      	b.n	8029516 <_Balloc+0x66>
 8029526:	bf00      	nop
 8029528:	0803051b 	.word	0x0803051b
 802952c:	080305fb 	.word	0x080305fb

08029530 <_Bfree>:
 8029530:	b570      	push	{r4, r5, r6, lr}
 8029532:	69c6      	ldr	r6, [r0, #28]
 8029534:	4605      	mov	r5, r0
 8029536:	460c      	mov	r4, r1
 8029538:	b976      	cbnz	r6, 8029558 <_Bfree+0x28>
 802953a:	2010      	movs	r0, #16
 802953c:	f7ff fee8 	bl	8029310 <malloc>
 8029540:	4602      	mov	r2, r0
 8029542:	61e8      	str	r0, [r5, #28]
 8029544:	b920      	cbnz	r0, 8029550 <_Bfree+0x20>
 8029546:	4b09      	ldr	r3, [pc, #36]	@ (802956c <_Bfree+0x3c>)
 8029548:	218f      	movs	r1, #143	@ 0x8f
 802954a:	4809      	ldr	r0, [pc, #36]	@ (8029570 <_Bfree+0x40>)
 802954c:	f000 ff4e 	bl	802a3ec <__assert_func>
 8029550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8029554:	6006      	str	r6, [r0, #0]
 8029556:	60c6      	str	r6, [r0, #12]
 8029558:	b13c      	cbz	r4, 802956a <_Bfree+0x3a>
 802955a:	69eb      	ldr	r3, [r5, #28]
 802955c:	6862      	ldr	r2, [r4, #4]
 802955e:	68db      	ldr	r3, [r3, #12]
 8029560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029564:	6021      	str	r1, [r4, #0]
 8029566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802956a:	bd70      	pop	{r4, r5, r6, pc}
 802956c:	0803051b 	.word	0x0803051b
 8029570:	080305fb 	.word	0x080305fb

08029574 <__multadd>:
 8029574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029578:	f101 0c14 	add.w	ip, r1, #20
 802957c:	4607      	mov	r7, r0
 802957e:	460c      	mov	r4, r1
 8029580:	461e      	mov	r6, r3
 8029582:	690d      	ldr	r5, [r1, #16]
 8029584:	2000      	movs	r0, #0
 8029586:	f8dc 3000 	ldr.w	r3, [ip]
 802958a:	3001      	adds	r0, #1
 802958c:	b299      	uxth	r1, r3
 802958e:	4285      	cmp	r5, r0
 8029590:	fb02 6101 	mla	r1, r2, r1, r6
 8029594:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8029598:	ea4f 4311 	mov.w	r3, r1, lsr #16
 802959c:	b289      	uxth	r1, r1
 802959e:	fb02 3306 	mla	r3, r2, r6, r3
 80295a2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80295a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80295aa:	f84c 1b04 	str.w	r1, [ip], #4
 80295ae:	dcea      	bgt.n	8029586 <__multadd+0x12>
 80295b0:	b30e      	cbz	r6, 80295f6 <__multadd+0x82>
 80295b2:	68a3      	ldr	r3, [r4, #8]
 80295b4:	42ab      	cmp	r3, r5
 80295b6:	dc19      	bgt.n	80295ec <__multadd+0x78>
 80295b8:	6861      	ldr	r1, [r4, #4]
 80295ba:	4638      	mov	r0, r7
 80295bc:	3101      	adds	r1, #1
 80295be:	f7ff ff77 	bl	80294b0 <_Balloc>
 80295c2:	4680      	mov	r8, r0
 80295c4:	b928      	cbnz	r0, 80295d2 <__multadd+0x5e>
 80295c6:	4602      	mov	r2, r0
 80295c8:	4b0c      	ldr	r3, [pc, #48]	@ (80295fc <__multadd+0x88>)
 80295ca:	21ba      	movs	r1, #186	@ 0xba
 80295cc:	480c      	ldr	r0, [pc, #48]	@ (8029600 <__multadd+0x8c>)
 80295ce:	f000 ff0d 	bl	802a3ec <__assert_func>
 80295d2:	6922      	ldr	r2, [r4, #16]
 80295d4:	f104 010c 	add.w	r1, r4, #12
 80295d8:	300c      	adds	r0, #12
 80295da:	3202      	adds	r2, #2
 80295dc:	0092      	lsls	r2, r2, #2
 80295de:	f7fe fc5e 	bl	8027e9e <memcpy>
 80295e2:	4621      	mov	r1, r4
 80295e4:	4644      	mov	r4, r8
 80295e6:	4638      	mov	r0, r7
 80295e8:	f7ff ffa2 	bl	8029530 <_Bfree>
 80295ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80295f0:	3501      	adds	r5, #1
 80295f2:	615e      	str	r6, [r3, #20]
 80295f4:	6125      	str	r5, [r4, #16]
 80295f6:	4620      	mov	r0, r4
 80295f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80295fc:	0803058a 	.word	0x0803058a
 8029600:	080305fb 	.word	0x080305fb

08029604 <__s2b>:
 8029604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029608:	4615      	mov	r5, r2
 802960a:	461f      	mov	r7, r3
 802960c:	2209      	movs	r2, #9
 802960e:	3308      	adds	r3, #8
 8029610:	460c      	mov	r4, r1
 8029612:	4606      	mov	r6, r0
 8029614:	2100      	movs	r1, #0
 8029616:	fb93 f3f2 	sdiv	r3, r3, r2
 802961a:	2201      	movs	r2, #1
 802961c:	429a      	cmp	r2, r3
 802961e:	db09      	blt.n	8029634 <__s2b+0x30>
 8029620:	4630      	mov	r0, r6
 8029622:	f7ff ff45 	bl	80294b0 <_Balloc>
 8029626:	b940      	cbnz	r0, 802963a <__s2b+0x36>
 8029628:	4602      	mov	r2, r0
 802962a:	4b19      	ldr	r3, [pc, #100]	@ (8029690 <__s2b+0x8c>)
 802962c:	21d3      	movs	r1, #211	@ 0xd3
 802962e:	4819      	ldr	r0, [pc, #100]	@ (8029694 <__s2b+0x90>)
 8029630:	f000 fedc 	bl	802a3ec <__assert_func>
 8029634:	0052      	lsls	r2, r2, #1
 8029636:	3101      	adds	r1, #1
 8029638:	e7f0      	b.n	802961c <__s2b+0x18>
 802963a:	9b08      	ldr	r3, [sp, #32]
 802963c:	2d09      	cmp	r5, #9
 802963e:	6143      	str	r3, [r0, #20]
 8029640:	f04f 0301 	mov.w	r3, #1
 8029644:	6103      	str	r3, [r0, #16]
 8029646:	dd16      	ble.n	8029676 <__s2b+0x72>
 8029648:	f104 0909 	add.w	r9, r4, #9
 802964c:	442c      	add	r4, r5
 802964e:	46c8      	mov	r8, r9
 8029650:	f818 3b01 	ldrb.w	r3, [r8], #1
 8029654:	4601      	mov	r1, r0
 8029656:	220a      	movs	r2, #10
 8029658:	4630      	mov	r0, r6
 802965a:	3b30      	subs	r3, #48	@ 0x30
 802965c:	f7ff ff8a 	bl	8029574 <__multadd>
 8029660:	45a0      	cmp	r8, r4
 8029662:	d1f5      	bne.n	8029650 <__s2b+0x4c>
 8029664:	f1a5 0408 	sub.w	r4, r5, #8
 8029668:	444c      	add	r4, r9
 802966a:	1b2d      	subs	r5, r5, r4
 802966c:	1963      	adds	r3, r4, r5
 802966e:	42bb      	cmp	r3, r7
 8029670:	db04      	blt.n	802967c <__s2b+0x78>
 8029672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029676:	340a      	adds	r4, #10
 8029678:	2509      	movs	r5, #9
 802967a:	e7f6      	b.n	802966a <__s2b+0x66>
 802967c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8029680:	4601      	mov	r1, r0
 8029682:	220a      	movs	r2, #10
 8029684:	4630      	mov	r0, r6
 8029686:	3b30      	subs	r3, #48	@ 0x30
 8029688:	f7ff ff74 	bl	8029574 <__multadd>
 802968c:	e7ee      	b.n	802966c <__s2b+0x68>
 802968e:	bf00      	nop
 8029690:	0803058a 	.word	0x0803058a
 8029694:	080305fb 	.word	0x080305fb

08029698 <__hi0bits>:
 8029698:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 802969c:	4603      	mov	r3, r0
 802969e:	bf36      	itet	cc
 80296a0:	0403      	lslcc	r3, r0, #16
 80296a2:	2000      	movcs	r0, #0
 80296a4:	2010      	movcc	r0, #16
 80296a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80296aa:	bf3c      	itt	cc
 80296ac:	021b      	lslcc	r3, r3, #8
 80296ae:	3008      	addcc	r0, #8
 80296b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80296b4:	bf3c      	itt	cc
 80296b6:	011b      	lslcc	r3, r3, #4
 80296b8:	3004      	addcc	r0, #4
 80296ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80296be:	bf3c      	itt	cc
 80296c0:	009b      	lslcc	r3, r3, #2
 80296c2:	3002      	addcc	r0, #2
 80296c4:	2b00      	cmp	r3, #0
 80296c6:	db05      	blt.n	80296d4 <__hi0bits+0x3c>
 80296c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80296cc:	f100 0001 	add.w	r0, r0, #1
 80296d0:	bf08      	it	eq
 80296d2:	2020      	moveq	r0, #32
 80296d4:	4770      	bx	lr

080296d6 <__lo0bits>:
 80296d6:	6803      	ldr	r3, [r0, #0]
 80296d8:	4602      	mov	r2, r0
 80296da:	f013 0007 	ands.w	r0, r3, #7
 80296de:	d00b      	beq.n	80296f8 <__lo0bits+0x22>
 80296e0:	07d9      	lsls	r1, r3, #31
 80296e2:	d421      	bmi.n	8029728 <__lo0bits+0x52>
 80296e4:	0798      	lsls	r0, r3, #30
 80296e6:	bf47      	ittee	mi
 80296e8:	085b      	lsrmi	r3, r3, #1
 80296ea:	2001      	movmi	r0, #1
 80296ec:	089b      	lsrpl	r3, r3, #2
 80296ee:	2002      	movpl	r0, #2
 80296f0:	bf4c      	ite	mi
 80296f2:	6013      	strmi	r3, [r2, #0]
 80296f4:	6013      	strpl	r3, [r2, #0]
 80296f6:	4770      	bx	lr
 80296f8:	b299      	uxth	r1, r3
 80296fa:	b909      	cbnz	r1, 8029700 <__lo0bits+0x2a>
 80296fc:	0c1b      	lsrs	r3, r3, #16
 80296fe:	2010      	movs	r0, #16
 8029700:	b2d9      	uxtb	r1, r3
 8029702:	b909      	cbnz	r1, 8029708 <__lo0bits+0x32>
 8029704:	3008      	adds	r0, #8
 8029706:	0a1b      	lsrs	r3, r3, #8
 8029708:	0719      	lsls	r1, r3, #28
 802970a:	bf04      	itt	eq
 802970c:	091b      	lsreq	r3, r3, #4
 802970e:	3004      	addeq	r0, #4
 8029710:	0799      	lsls	r1, r3, #30
 8029712:	bf04      	itt	eq
 8029714:	089b      	lsreq	r3, r3, #2
 8029716:	3002      	addeq	r0, #2
 8029718:	07d9      	lsls	r1, r3, #31
 802971a:	d403      	bmi.n	8029724 <__lo0bits+0x4e>
 802971c:	085b      	lsrs	r3, r3, #1
 802971e:	f100 0001 	add.w	r0, r0, #1
 8029722:	d003      	beq.n	802972c <__lo0bits+0x56>
 8029724:	6013      	str	r3, [r2, #0]
 8029726:	4770      	bx	lr
 8029728:	2000      	movs	r0, #0
 802972a:	4770      	bx	lr
 802972c:	2020      	movs	r0, #32
 802972e:	4770      	bx	lr

08029730 <__i2b>:
 8029730:	b510      	push	{r4, lr}
 8029732:	460c      	mov	r4, r1
 8029734:	2101      	movs	r1, #1
 8029736:	f7ff febb 	bl	80294b0 <_Balloc>
 802973a:	4602      	mov	r2, r0
 802973c:	b928      	cbnz	r0, 802974a <__i2b+0x1a>
 802973e:	4b05      	ldr	r3, [pc, #20]	@ (8029754 <__i2b+0x24>)
 8029740:	f240 1145 	movw	r1, #325	@ 0x145
 8029744:	4804      	ldr	r0, [pc, #16]	@ (8029758 <__i2b+0x28>)
 8029746:	f000 fe51 	bl	802a3ec <__assert_func>
 802974a:	2301      	movs	r3, #1
 802974c:	6144      	str	r4, [r0, #20]
 802974e:	6103      	str	r3, [r0, #16]
 8029750:	bd10      	pop	{r4, pc}
 8029752:	bf00      	nop
 8029754:	0803058a 	.word	0x0803058a
 8029758:	080305fb 	.word	0x080305fb

0802975c <__multiply>:
 802975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029760:	4614      	mov	r4, r2
 8029762:	690a      	ldr	r2, [r1, #16]
 8029764:	460f      	mov	r7, r1
 8029766:	b085      	sub	sp, #20
 8029768:	6923      	ldr	r3, [r4, #16]
 802976a:	429a      	cmp	r2, r3
 802976c:	bfa2      	ittt	ge
 802976e:	4623      	movge	r3, r4
 8029770:	460c      	movge	r4, r1
 8029772:	461f      	movge	r7, r3
 8029774:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8029778:	68a3      	ldr	r3, [r4, #8]
 802977a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 802977e:	6861      	ldr	r1, [r4, #4]
 8029780:	eb0a 0609 	add.w	r6, sl, r9
 8029784:	42b3      	cmp	r3, r6
 8029786:	bfb8      	it	lt
 8029788:	3101      	addlt	r1, #1
 802978a:	f7ff fe91 	bl	80294b0 <_Balloc>
 802978e:	b930      	cbnz	r0, 802979e <__multiply+0x42>
 8029790:	4602      	mov	r2, r0
 8029792:	4b45      	ldr	r3, [pc, #276]	@ (80298a8 <__multiply+0x14c>)
 8029794:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8029798:	4844      	ldr	r0, [pc, #272]	@ (80298ac <__multiply+0x150>)
 802979a:	f000 fe27 	bl	802a3ec <__assert_func>
 802979e:	f100 0514 	add.w	r5, r0, #20
 80297a2:	2200      	movs	r2, #0
 80297a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80297a8:	462b      	mov	r3, r5
 80297aa:	4543      	cmp	r3, r8
 80297ac:	d321      	bcc.n	80297f2 <__multiply+0x96>
 80297ae:	f107 0114 	add.w	r1, r7, #20
 80297b2:	f104 0214 	add.w	r2, r4, #20
 80297b6:	f104 0715 	add.w	r7, r4, #21
 80297ba:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80297be:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80297c2:	9302      	str	r3, [sp, #8]
 80297c4:	1b13      	subs	r3, r2, r4
 80297c6:	3b15      	subs	r3, #21
 80297c8:	f023 0303 	bic.w	r3, r3, #3
 80297cc:	3304      	adds	r3, #4
 80297ce:	42ba      	cmp	r2, r7
 80297d0:	bf38      	it	cc
 80297d2:	2304      	movcc	r3, #4
 80297d4:	9301      	str	r3, [sp, #4]
 80297d6:	9b02      	ldr	r3, [sp, #8]
 80297d8:	9103      	str	r1, [sp, #12]
 80297da:	428b      	cmp	r3, r1
 80297dc:	d80c      	bhi.n	80297f8 <__multiply+0x9c>
 80297de:	2e00      	cmp	r6, #0
 80297e0:	dd03      	ble.n	80297ea <__multiply+0x8e>
 80297e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80297e6:	2b00      	cmp	r3, #0
 80297e8:	d05b      	beq.n	80298a2 <__multiply+0x146>
 80297ea:	6106      	str	r6, [r0, #16]
 80297ec:	b005      	add	sp, #20
 80297ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80297f2:	f843 2b04 	str.w	r2, [r3], #4
 80297f6:	e7d8      	b.n	80297aa <__multiply+0x4e>
 80297f8:	f8b1 a000 	ldrh.w	sl, [r1]
 80297fc:	f1ba 0f00 	cmp.w	sl, #0
 8029800:	d024      	beq.n	802984c <__multiply+0xf0>
 8029802:	f104 0e14 	add.w	lr, r4, #20
 8029806:	46a9      	mov	r9, r5
 8029808:	f04f 0c00 	mov.w	ip, #0
 802980c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8029810:	f8d9 3000 	ldr.w	r3, [r9]
 8029814:	fa1f fb87 	uxth.w	fp, r7
 8029818:	4572      	cmp	r2, lr
 802981a:	b29b      	uxth	r3, r3
 802981c:	fb0a 330b 	mla	r3, sl, fp, r3
 8029820:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8029824:	f8d9 7000 	ldr.w	r7, [r9]
 8029828:	4463      	add	r3, ip
 802982a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802982e:	fb0a c70b 	mla	r7, sl, fp, ip
 8029832:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8029836:	b29b      	uxth	r3, r3
 8029838:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802983c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8029840:	f849 3b04 	str.w	r3, [r9], #4
 8029844:	d8e2      	bhi.n	802980c <__multiply+0xb0>
 8029846:	9b01      	ldr	r3, [sp, #4]
 8029848:	f845 c003 	str.w	ip, [r5, r3]
 802984c:	9b03      	ldr	r3, [sp, #12]
 802984e:	3104      	adds	r1, #4
 8029850:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8029854:	f1b9 0f00 	cmp.w	r9, #0
 8029858:	d021      	beq.n	802989e <__multiply+0x142>
 802985a:	682b      	ldr	r3, [r5, #0]
 802985c:	f104 0c14 	add.w	ip, r4, #20
 8029860:	46ae      	mov	lr, r5
 8029862:	f04f 0a00 	mov.w	sl, #0
 8029866:	f8bc b000 	ldrh.w	fp, [ip]
 802986a:	b29b      	uxth	r3, r3
 802986c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8029870:	fb09 770b 	mla	r7, r9, fp, r7
 8029874:	4457      	add	r7, sl
 8029876:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802987a:	f84e 3b04 	str.w	r3, [lr], #4
 802987e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8029882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029886:	f8be 3000 	ldrh.w	r3, [lr]
 802988a:	4562      	cmp	r2, ip
 802988c:	fb09 330a 	mla	r3, r9, sl, r3
 8029890:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8029894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8029898:	d8e5      	bhi.n	8029866 <__multiply+0x10a>
 802989a:	9f01      	ldr	r7, [sp, #4]
 802989c:	51eb      	str	r3, [r5, r7]
 802989e:	3504      	adds	r5, #4
 80298a0:	e799      	b.n	80297d6 <__multiply+0x7a>
 80298a2:	3e01      	subs	r6, #1
 80298a4:	e79b      	b.n	80297de <__multiply+0x82>
 80298a6:	bf00      	nop
 80298a8:	0803058a 	.word	0x0803058a
 80298ac:	080305fb 	.word	0x080305fb

080298b0 <__pow5mult>:
 80298b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80298b4:	4615      	mov	r5, r2
 80298b6:	f012 0203 	ands.w	r2, r2, #3
 80298ba:	4607      	mov	r7, r0
 80298bc:	460e      	mov	r6, r1
 80298be:	d007      	beq.n	80298d0 <__pow5mult+0x20>
 80298c0:	3a01      	subs	r2, #1
 80298c2:	4c25      	ldr	r4, [pc, #148]	@ (8029958 <__pow5mult+0xa8>)
 80298c4:	2300      	movs	r3, #0
 80298c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80298ca:	f7ff fe53 	bl	8029574 <__multadd>
 80298ce:	4606      	mov	r6, r0
 80298d0:	10ad      	asrs	r5, r5, #2
 80298d2:	d03d      	beq.n	8029950 <__pow5mult+0xa0>
 80298d4:	69fc      	ldr	r4, [r7, #28]
 80298d6:	b97c      	cbnz	r4, 80298f8 <__pow5mult+0x48>
 80298d8:	2010      	movs	r0, #16
 80298da:	f7ff fd19 	bl	8029310 <malloc>
 80298de:	4602      	mov	r2, r0
 80298e0:	61f8      	str	r0, [r7, #28]
 80298e2:	b928      	cbnz	r0, 80298f0 <__pow5mult+0x40>
 80298e4:	4b1d      	ldr	r3, [pc, #116]	@ (802995c <__pow5mult+0xac>)
 80298e6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80298ea:	481d      	ldr	r0, [pc, #116]	@ (8029960 <__pow5mult+0xb0>)
 80298ec:	f000 fd7e 	bl	802a3ec <__assert_func>
 80298f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80298f4:	6004      	str	r4, [r0, #0]
 80298f6:	60c4      	str	r4, [r0, #12]
 80298f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80298fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029900:	b94c      	cbnz	r4, 8029916 <__pow5mult+0x66>
 8029902:	f240 2171 	movw	r1, #625	@ 0x271
 8029906:	4638      	mov	r0, r7
 8029908:	f7ff ff12 	bl	8029730 <__i2b>
 802990c:	2300      	movs	r3, #0
 802990e:	4604      	mov	r4, r0
 8029910:	f8c8 0008 	str.w	r0, [r8, #8]
 8029914:	6003      	str	r3, [r0, #0]
 8029916:	f04f 0900 	mov.w	r9, #0
 802991a:	07eb      	lsls	r3, r5, #31
 802991c:	d50a      	bpl.n	8029934 <__pow5mult+0x84>
 802991e:	4631      	mov	r1, r6
 8029920:	4622      	mov	r2, r4
 8029922:	4638      	mov	r0, r7
 8029924:	f7ff ff1a 	bl	802975c <__multiply>
 8029928:	4680      	mov	r8, r0
 802992a:	4631      	mov	r1, r6
 802992c:	4638      	mov	r0, r7
 802992e:	4646      	mov	r6, r8
 8029930:	f7ff fdfe 	bl	8029530 <_Bfree>
 8029934:	106d      	asrs	r5, r5, #1
 8029936:	d00b      	beq.n	8029950 <__pow5mult+0xa0>
 8029938:	6820      	ldr	r0, [r4, #0]
 802993a:	b938      	cbnz	r0, 802994c <__pow5mult+0x9c>
 802993c:	4622      	mov	r2, r4
 802993e:	4621      	mov	r1, r4
 8029940:	4638      	mov	r0, r7
 8029942:	f7ff ff0b 	bl	802975c <__multiply>
 8029946:	6020      	str	r0, [r4, #0]
 8029948:	f8c0 9000 	str.w	r9, [r0]
 802994c:	4604      	mov	r4, r0
 802994e:	e7e4      	b.n	802991a <__pow5mult+0x6a>
 8029950:	4630      	mov	r0, r6
 8029952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029956:	bf00      	nop
 8029958:	08030654 	.word	0x08030654
 802995c:	0803051b 	.word	0x0803051b
 8029960:	080305fb 	.word	0x080305fb

08029964 <__lshift>:
 8029964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029968:	460c      	mov	r4, r1
 802996a:	4607      	mov	r7, r0
 802996c:	4691      	mov	r9, r2
 802996e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8029972:	6923      	ldr	r3, [r4, #16]
 8029974:	6849      	ldr	r1, [r1, #4]
 8029976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802997a:	68a3      	ldr	r3, [r4, #8]
 802997c:	f108 0601 	add.w	r6, r8, #1
 8029980:	42b3      	cmp	r3, r6
 8029982:	db0b      	blt.n	802999c <__lshift+0x38>
 8029984:	4638      	mov	r0, r7
 8029986:	f7ff fd93 	bl	80294b0 <_Balloc>
 802998a:	4605      	mov	r5, r0
 802998c:	b948      	cbnz	r0, 80299a2 <__lshift+0x3e>
 802998e:	4602      	mov	r2, r0
 8029990:	4b28      	ldr	r3, [pc, #160]	@ (8029a34 <__lshift+0xd0>)
 8029992:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8029996:	4828      	ldr	r0, [pc, #160]	@ (8029a38 <__lshift+0xd4>)
 8029998:	f000 fd28 	bl	802a3ec <__assert_func>
 802999c:	3101      	adds	r1, #1
 802999e:	005b      	lsls	r3, r3, #1
 80299a0:	e7ee      	b.n	8029980 <__lshift+0x1c>
 80299a2:	2300      	movs	r3, #0
 80299a4:	f100 0114 	add.w	r1, r0, #20
 80299a8:	f100 0210 	add.w	r2, r0, #16
 80299ac:	4618      	mov	r0, r3
 80299ae:	4553      	cmp	r3, sl
 80299b0:	db33      	blt.n	8029a1a <__lshift+0xb6>
 80299b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80299b6:	f104 0314 	add.w	r3, r4, #20
 80299ba:	6920      	ldr	r0, [r4, #16]
 80299bc:	f019 091f 	ands.w	r9, r9, #31
 80299c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80299c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80299c8:	d02b      	beq.n	8029a22 <__lshift+0xbe>
 80299ca:	f1c9 0e20 	rsb	lr, r9, #32
 80299ce:	468a      	mov	sl, r1
 80299d0:	2200      	movs	r2, #0
 80299d2:	6818      	ldr	r0, [r3, #0]
 80299d4:	fa00 f009 	lsl.w	r0, r0, r9
 80299d8:	4310      	orrs	r0, r2
 80299da:	f84a 0b04 	str.w	r0, [sl], #4
 80299de:	f853 2b04 	ldr.w	r2, [r3], #4
 80299e2:	459c      	cmp	ip, r3
 80299e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80299e8:	d8f3      	bhi.n	80299d2 <__lshift+0x6e>
 80299ea:	ebac 0304 	sub.w	r3, ip, r4
 80299ee:	f104 0015 	add.w	r0, r4, #21
 80299f2:	3b15      	subs	r3, #21
 80299f4:	f023 0303 	bic.w	r3, r3, #3
 80299f8:	3304      	adds	r3, #4
 80299fa:	4584      	cmp	ip, r0
 80299fc:	bf38      	it	cc
 80299fe:	2304      	movcc	r3, #4
 8029a00:	50ca      	str	r2, [r1, r3]
 8029a02:	b10a      	cbz	r2, 8029a08 <__lshift+0xa4>
 8029a04:	f108 0602 	add.w	r6, r8, #2
 8029a08:	3e01      	subs	r6, #1
 8029a0a:	4638      	mov	r0, r7
 8029a0c:	4621      	mov	r1, r4
 8029a0e:	612e      	str	r6, [r5, #16]
 8029a10:	f7ff fd8e 	bl	8029530 <_Bfree>
 8029a14:	4628      	mov	r0, r5
 8029a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029a1a:	3301      	adds	r3, #1
 8029a1c:	f842 0f04 	str.w	r0, [r2, #4]!
 8029a20:	e7c5      	b.n	80299ae <__lshift+0x4a>
 8029a22:	3904      	subs	r1, #4
 8029a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8029a28:	459c      	cmp	ip, r3
 8029a2a:	f841 2f04 	str.w	r2, [r1, #4]!
 8029a2e:	d8f9      	bhi.n	8029a24 <__lshift+0xc0>
 8029a30:	e7ea      	b.n	8029a08 <__lshift+0xa4>
 8029a32:	bf00      	nop
 8029a34:	0803058a 	.word	0x0803058a
 8029a38:	080305fb 	.word	0x080305fb

08029a3c <__mcmp>:
 8029a3c:	4603      	mov	r3, r0
 8029a3e:	690a      	ldr	r2, [r1, #16]
 8029a40:	6900      	ldr	r0, [r0, #16]
 8029a42:	1a80      	subs	r0, r0, r2
 8029a44:	b530      	push	{r4, r5, lr}
 8029a46:	d10e      	bne.n	8029a66 <__mcmp+0x2a>
 8029a48:	3314      	adds	r3, #20
 8029a4a:	3114      	adds	r1, #20
 8029a4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8029a50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8029a54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8029a58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8029a5c:	4295      	cmp	r5, r2
 8029a5e:	d003      	beq.n	8029a68 <__mcmp+0x2c>
 8029a60:	d205      	bcs.n	8029a6e <__mcmp+0x32>
 8029a62:	f04f 30ff 	mov.w	r0, #4294967295
 8029a66:	bd30      	pop	{r4, r5, pc}
 8029a68:	42a3      	cmp	r3, r4
 8029a6a:	d3f3      	bcc.n	8029a54 <__mcmp+0x18>
 8029a6c:	e7fb      	b.n	8029a66 <__mcmp+0x2a>
 8029a6e:	2001      	movs	r0, #1
 8029a70:	e7f9      	b.n	8029a66 <__mcmp+0x2a>
	...

08029a74 <__mdiff>:
 8029a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a78:	4689      	mov	r9, r1
 8029a7a:	4606      	mov	r6, r0
 8029a7c:	4611      	mov	r1, r2
 8029a7e:	4614      	mov	r4, r2
 8029a80:	4648      	mov	r0, r9
 8029a82:	f7ff ffdb 	bl	8029a3c <__mcmp>
 8029a86:	1e05      	subs	r5, r0, #0
 8029a88:	d112      	bne.n	8029ab0 <__mdiff+0x3c>
 8029a8a:	4629      	mov	r1, r5
 8029a8c:	4630      	mov	r0, r6
 8029a8e:	f7ff fd0f 	bl	80294b0 <_Balloc>
 8029a92:	4602      	mov	r2, r0
 8029a94:	b928      	cbnz	r0, 8029aa2 <__mdiff+0x2e>
 8029a96:	4b41      	ldr	r3, [pc, #260]	@ (8029b9c <__mdiff+0x128>)
 8029a98:	f240 2137 	movw	r1, #567	@ 0x237
 8029a9c:	4840      	ldr	r0, [pc, #256]	@ (8029ba0 <__mdiff+0x12c>)
 8029a9e:	f000 fca5 	bl	802a3ec <__assert_func>
 8029aa2:	2301      	movs	r3, #1
 8029aa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8029aa8:	4610      	mov	r0, r2
 8029aaa:	b003      	add	sp, #12
 8029aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029ab0:	bfbc      	itt	lt
 8029ab2:	464b      	movlt	r3, r9
 8029ab4:	46a1      	movlt	r9, r4
 8029ab6:	4630      	mov	r0, r6
 8029ab8:	bfb8      	it	lt
 8029aba:	2501      	movlt	r5, #1
 8029abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8029ac0:	bfb4      	ite	lt
 8029ac2:	461c      	movlt	r4, r3
 8029ac4:	2500      	movge	r5, #0
 8029ac6:	f7ff fcf3 	bl	80294b0 <_Balloc>
 8029aca:	4602      	mov	r2, r0
 8029acc:	b918      	cbnz	r0, 8029ad6 <__mdiff+0x62>
 8029ace:	4b33      	ldr	r3, [pc, #204]	@ (8029b9c <__mdiff+0x128>)
 8029ad0:	f240 2145 	movw	r1, #581	@ 0x245
 8029ad4:	e7e2      	b.n	8029a9c <__mdiff+0x28>
 8029ad6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8029ada:	f104 0e14 	add.w	lr, r4, #20
 8029ade:	6926      	ldr	r6, [r4, #16]
 8029ae0:	f100 0b14 	add.w	fp, r0, #20
 8029ae4:	60c5      	str	r5, [r0, #12]
 8029ae6:	f109 0514 	add.w	r5, r9, #20
 8029aea:	f109 0310 	add.w	r3, r9, #16
 8029aee:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8029af2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8029af6:	46d9      	mov	r9, fp
 8029af8:	f04f 0c00 	mov.w	ip, #0
 8029afc:	9301      	str	r3, [sp, #4]
 8029afe:	9b01      	ldr	r3, [sp, #4]
 8029b00:	f85e 0b04 	ldr.w	r0, [lr], #4
 8029b04:	f853 af04 	ldr.w	sl, [r3, #4]!
 8029b08:	4576      	cmp	r6, lr
 8029b0a:	9301      	str	r3, [sp, #4]
 8029b0c:	fa1f f38a 	uxth.w	r3, sl
 8029b10:	4619      	mov	r1, r3
 8029b12:	b283      	uxth	r3, r0
 8029b14:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8029b18:	eba1 0303 	sub.w	r3, r1, r3
 8029b1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8029b20:	4463      	add	r3, ip
 8029b22:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8029b26:	b29b      	uxth	r3, r3
 8029b28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8029b2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8029b30:	f849 3b04 	str.w	r3, [r9], #4
 8029b34:	d8e3      	bhi.n	8029afe <__mdiff+0x8a>
 8029b36:	1b33      	subs	r3, r6, r4
 8029b38:	3415      	adds	r4, #21
 8029b3a:	3b15      	subs	r3, #21
 8029b3c:	f023 0303 	bic.w	r3, r3, #3
 8029b40:	3304      	adds	r3, #4
 8029b42:	42a6      	cmp	r6, r4
 8029b44:	bf38      	it	cc
 8029b46:	2304      	movcc	r3, #4
 8029b48:	441d      	add	r5, r3
 8029b4a:	445b      	add	r3, fp
 8029b4c:	462c      	mov	r4, r5
 8029b4e:	461e      	mov	r6, r3
 8029b50:	4544      	cmp	r4, r8
 8029b52:	d30e      	bcc.n	8029b72 <__mdiff+0xfe>
 8029b54:	f108 0103 	add.w	r1, r8, #3
 8029b58:	1b49      	subs	r1, r1, r5
 8029b5a:	3d03      	subs	r5, #3
 8029b5c:	f021 0103 	bic.w	r1, r1, #3
 8029b60:	45a8      	cmp	r8, r5
 8029b62:	bf38      	it	cc
 8029b64:	2100      	movcc	r1, #0
 8029b66:	440b      	add	r3, r1
 8029b68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8029b6c:	b199      	cbz	r1, 8029b96 <__mdiff+0x122>
 8029b6e:	6117      	str	r7, [r2, #16]
 8029b70:	e79a      	b.n	8029aa8 <__mdiff+0x34>
 8029b72:	f854 1b04 	ldr.w	r1, [r4], #4
 8029b76:	46e6      	mov	lr, ip
 8029b78:	fa1f fc81 	uxth.w	ip, r1
 8029b7c:	0c08      	lsrs	r0, r1, #16
 8029b7e:	4471      	add	r1, lr
 8029b80:	44f4      	add	ip, lr
 8029b82:	b289      	uxth	r1, r1
 8029b84:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8029b88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8029b8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8029b90:	f846 1b04 	str.w	r1, [r6], #4
 8029b94:	e7dc      	b.n	8029b50 <__mdiff+0xdc>
 8029b96:	3f01      	subs	r7, #1
 8029b98:	e7e6      	b.n	8029b68 <__mdiff+0xf4>
 8029b9a:	bf00      	nop
 8029b9c:	0803058a 	.word	0x0803058a
 8029ba0:	080305fb 	.word	0x080305fb

08029ba4 <__ulp>:
 8029ba4:	b082      	sub	sp, #8
 8029ba6:	4b11      	ldr	r3, [pc, #68]	@ (8029bec <__ulp+0x48>)
 8029ba8:	ed8d 0b00 	vstr	d0, [sp]
 8029bac:	9a01      	ldr	r2, [sp, #4]
 8029bae:	4013      	ands	r3, r2
 8029bb0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	dc08      	bgt.n	8029bca <__ulp+0x26>
 8029bb8:	425b      	negs	r3, r3
 8029bba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8029bbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8029bc2:	da04      	bge.n	8029bce <__ulp+0x2a>
 8029bc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8029bc8:	4113      	asrs	r3, r2
 8029bca:	2200      	movs	r2, #0
 8029bcc:	e008      	b.n	8029be0 <__ulp+0x3c>
 8029bce:	f1a2 0314 	sub.w	r3, r2, #20
 8029bd2:	2b1e      	cmp	r3, #30
 8029bd4:	bfd6      	itet	le
 8029bd6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8029bda:	2201      	movgt	r2, #1
 8029bdc:	40da      	lsrle	r2, r3
 8029bde:	2300      	movs	r3, #0
 8029be0:	4619      	mov	r1, r3
 8029be2:	4610      	mov	r0, r2
 8029be4:	ec41 0b10 	vmov	d0, r0, r1
 8029be8:	b002      	add	sp, #8
 8029bea:	4770      	bx	lr
 8029bec:	7ff00000 	.word	0x7ff00000

08029bf0 <__b2d>:
 8029bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029bf4:	6906      	ldr	r6, [r0, #16]
 8029bf6:	f100 0814 	add.w	r8, r0, #20
 8029bfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8029bfe:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8029c02:	1f37      	subs	r7, r6, #4
 8029c04:	4610      	mov	r0, r2
 8029c06:	f7ff fd47 	bl	8029698 <__hi0bits>
 8029c0a:	f1c0 0320 	rsb	r3, r0, #32
 8029c0e:	280a      	cmp	r0, #10
 8029c10:	600b      	str	r3, [r1, #0]
 8029c12:	491d      	ldr	r1, [pc, #116]	@ (8029c88 <__b2d+0x98>)
 8029c14:	dc16      	bgt.n	8029c44 <__b2d+0x54>
 8029c16:	f1c0 0c0b 	rsb	ip, r0, #11
 8029c1a:	45b8      	cmp	r8, r7
 8029c1c:	f100 0015 	add.w	r0, r0, #21
 8029c20:	fa22 f30c 	lsr.w	r3, r2, ip
 8029c24:	fa02 f000 	lsl.w	r0, r2, r0
 8029c28:	ea43 0501 	orr.w	r5, r3, r1
 8029c2c:	bf34      	ite	cc
 8029c2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8029c32:	2300      	movcs	r3, #0
 8029c34:	fa23 f30c 	lsr.w	r3, r3, ip
 8029c38:	4303      	orrs	r3, r0
 8029c3a:	461c      	mov	r4, r3
 8029c3c:	ec45 4b10 	vmov	d0, r4, r5
 8029c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029c44:	45b8      	cmp	r8, r7
 8029c46:	bf3a      	itte	cc
 8029c48:	f1a6 0708 	subcc.w	r7, r6, #8
 8029c4c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8029c50:	2300      	movcs	r3, #0
 8029c52:	380b      	subs	r0, #11
 8029c54:	d014      	beq.n	8029c80 <__b2d+0x90>
 8029c56:	f1c0 0120 	rsb	r1, r0, #32
 8029c5a:	4082      	lsls	r2, r0
 8029c5c:	4547      	cmp	r7, r8
 8029c5e:	fa23 f401 	lsr.w	r4, r3, r1
 8029c62:	fa03 f300 	lsl.w	r3, r3, r0
 8029c66:	ea42 0204 	orr.w	r2, r2, r4
 8029c6a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8029c6e:	bf8c      	ite	hi
 8029c70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8029c74:	2200      	movls	r2, #0
 8029c76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8029c7a:	40ca      	lsrs	r2, r1
 8029c7c:	4313      	orrs	r3, r2
 8029c7e:	e7dc      	b.n	8029c3a <__b2d+0x4a>
 8029c80:	ea42 0501 	orr.w	r5, r2, r1
 8029c84:	e7d9      	b.n	8029c3a <__b2d+0x4a>
 8029c86:	bf00      	nop
 8029c88:	3ff00000 	.word	0x3ff00000

08029c8c <__d2b>:
 8029c8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8029c90:	460f      	mov	r7, r1
 8029c92:	2101      	movs	r1, #1
 8029c94:	4616      	mov	r6, r2
 8029c96:	ec59 8b10 	vmov	r8, r9, d0
 8029c9a:	f7ff fc09 	bl	80294b0 <_Balloc>
 8029c9e:	4604      	mov	r4, r0
 8029ca0:	b930      	cbnz	r0, 8029cb0 <__d2b+0x24>
 8029ca2:	4602      	mov	r2, r0
 8029ca4:	4b23      	ldr	r3, [pc, #140]	@ (8029d34 <__d2b+0xa8>)
 8029ca6:	f240 310f 	movw	r1, #783	@ 0x30f
 8029caa:	4823      	ldr	r0, [pc, #140]	@ (8029d38 <__d2b+0xac>)
 8029cac:	f000 fb9e 	bl	802a3ec <__assert_func>
 8029cb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8029cb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8029cb8:	b10d      	cbz	r5, 8029cbe <__d2b+0x32>
 8029cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8029cbe:	9301      	str	r3, [sp, #4]
 8029cc0:	f1b8 0300 	subs.w	r3, r8, #0
 8029cc4:	d023      	beq.n	8029d0e <__d2b+0x82>
 8029cc6:	4668      	mov	r0, sp
 8029cc8:	9300      	str	r3, [sp, #0]
 8029cca:	f7ff fd04 	bl	80296d6 <__lo0bits>
 8029cce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8029cd2:	b1d0      	cbz	r0, 8029d0a <__d2b+0x7e>
 8029cd4:	f1c0 0320 	rsb	r3, r0, #32
 8029cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8029cdc:	40c2      	lsrs	r2, r0
 8029cde:	430b      	orrs	r3, r1
 8029ce0:	9201      	str	r2, [sp, #4]
 8029ce2:	6163      	str	r3, [r4, #20]
 8029ce4:	9b01      	ldr	r3, [sp, #4]
 8029ce6:	2b00      	cmp	r3, #0
 8029ce8:	61a3      	str	r3, [r4, #24]
 8029cea:	bf0c      	ite	eq
 8029cec:	2201      	moveq	r2, #1
 8029cee:	2202      	movne	r2, #2
 8029cf0:	6122      	str	r2, [r4, #16]
 8029cf2:	b1a5      	cbz	r5, 8029d1e <__d2b+0x92>
 8029cf4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8029cf8:	4405      	add	r5, r0
 8029cfa:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8029cfe:	603d      	str	r5, [r7, #0]
 8029d00:	6030      	str	r0, [r6, #0]
 8029d02:	4620      	mov	r0, r4
 8029d04:	b003      	add	sp, #12
 8029d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029d0a:	6161      	str	r1, [r4, #20]
 8029d0c:	e7ea      	b.n	8029ce4 <__d2b+0x58>
 8029d0e:	a801      	add	r0, sp, #4
 8029d10:	f7ff fce1 	bl	80296d6 <__lo0bits>
 8029d14:	9b01      	ldr	r3, [sp, #4]
 8029d16:	3020      	adds	r0, #32
 8029d18:	2201      	movs	r2, #1
 8029d1a:	6163      	str	r3, [r4, #20]
 8029d1c:	e7e8      	b.n	8029cf0 <__d2b+0x64>
 8029d1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8029d22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8029d26:	6038      	str	r0, [r7, #0]
 8029d28:	6918      	ldr	r0, [r3, #16]
 8029d2a:	f7ff fcb5 	bl	8029698 <__hi0bits>
 8029d2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8029d32:	e7e5      	b.n	8029d00 <__d2b+0x74>
 8029d34:	0803058a 	.word	0x0803058a
 8029d38:	080305fb 	.word	0x080305fb

08029d3c <__ratio>:
 8029d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d40:	b085      	sub	sp, #20
 8029d42:	e9cd 1000 	strd	r1, r0, [sp]
 8029d46:	a902      	add	r1, sp, #8
 8029d48:	f7ff ff52 	bl	8029bf0 <__b2d>
 8029d4c:	a903      	add	r1, sp, #12
 8029d4e:	9800      	ldr	r0, [sp, #0]
 8029d50:	ec55 4b10 	vmov	r4, r5, d0
 8029d54:	f7ff ff4c 	bl	8029bf0 <__b2d>
 8029d58:	9b01      	ldr	r3, [sp, #4]
 8029d5a:	462f      	mov	r7, r5
 8029d5c:	4620      	mov	r0, r4
 8029d5e:	6919      	ldr	r1, [r3, #16]
 8029d60:	9b00      	ldr	r3, [sp, #0]
 8029d62:	691b      	ldr	r3, [r3, #16]
 8029d64:	1ac9      	subs	r1, r1, r3
 8029d66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8029d6a:	ec5b ab10 	vmov	sl, fp, d0
 8029d6e:	1a9b      	subs	r3, r3, r2
 8029d70:	46d9      	mov	r9, fp
 8029d72:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8029d76:	2b00      	cmp	r3, #0
 8029d78:	bfcd      	iteet	gt
 8029d7a:	462a      	movgt	r2, r5
 8029d7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8029d80:	465a      	movle	r2, fp
 8029d82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8029d86:	bfd8      	it	le
 8029d88:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8029d8c:	4652      	mov	r2, sl
 8029d8e:	4639      	mov	r1, r7
 8029d90:	464b      	mov	r3, r9
 8029d92:	f7d6 fd69 	bl	8000868 <__aeabi_ddiv>
 8029d96:	ec41 0b10 	vmov	d0, r0, r1
 8029d9a:	b005      	add	sp, #20
 8029d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029da0 <__copybits>:
 8029da0:	3901      	subs	r1, #1
 8029da2:	f102 0314 	add.w	r3, r2, #20
 8029da6:	1149      	asrs	r1, r1, #5
 8029da8:	b570      	push	{r4, r5, r6, lr}
 8029daa:	3101      	adds	r1, #1
 8029dac:	6914      	ldr	r4, [r2, #16]
 8029dae:	1f05      	subs	r5, r0, #4
 8029db0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8029db4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8029db8:	42a3      	cmp	r3, r4
 8029dba:	d30c      	bcc.n	8029dd6 <__copybits+0x36>
 8029dbc:	1aa3      	subs	r3, r4, r2
 8029dbe:	3211      	adds	r2, #17
 8029dc0:	3b11      	subs	r3, #17
 8029dc2:	f023 0303 	bic.w	r3, r3, #3
 8029dc6:	42a2      	cmp	r2, r4
 8029dc8:	bf88      	it	hi
 8029dca:	2300      	movhi	r3, #0
 8029dcc:	4418      	add	r0, r3
 8029dce:	2300      	movs	r3, #0
 8029dd0:	4288      	cmp	r0, r1
 8029dd2:	d305      	bcc.n	8029de0 <__copybits+0x40>
 8029dd4:	bd70      	pop	{r4, r5, r6, pc}
 8029dd6:	f853 6b04 	ldr.w	r6, [r3], #4
 8029dda:	f845 6f04 	str.w	r6, [r5, #4]!
 8029dde:	e7eb      	b.n	8029db8 <__copybits+0x18>
 8029de0:	f840 3b04 	str.w	r3, [r0], #4
 8029de4:	e7f4      	b.n	8029dd0 <__copybits+0x30>

08029de6 <__any_on>:
 8029de6:	f100 0214 	add.w	r2, r0, #20
 8029dea:	114b      	asrs	r3, r1, #5
 8029dec:	6900      	ldr	r0, [r0, #16]
 8029dee:	4298      	cmp	r0, r3
 8029df0:	b510      	push	{r4, lr}
 8029df2:	db11      	blt.n	8029e18 <__any_on+0x32>
 8029df4:	dd0a      	ble.n	8029e0c <__any_on+0x26>
 8029df6:	f011 011f 	ands.w	r1, r1, #31
 8029dfa:	d007      	beq.n	8029e0c <__any_on+0x26>
 8029dfc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8029e00:	fa24 f001 	lsr.w	r0, r4, r1
 8029e04:	fa00 f101 	lsl.w	r1, r0, r1
 8029e08:	428c      	cmp	r4, r1
 8029e0a:	d10b      	bne.n	8029e24 <__any_on+0x3e>
 8029e0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029e10:	4293      	cmp	r3, r2
 8029e12:	d803      	bhi.n	8029e1c <__any_on+0x36>
 8029e14:	2000      	movs	r0, #0
 8029e16:	bd10      	pop	{r4, pc}
 8029e18:	4603      	mov	r3, r0
 8029e1a:	e7f7      	b.n	8029e0c <__any_on+0x26>
 8029e1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8029e20:	2900      	cmp	r1, #0
 8029e22:	d0f5      	beq.n	8029e10 <__any_on+0x2a>
 8029e24:	2001      	movs	r0, #1
 8029e26:	e7f6      	b.n	8029e16 <__any_on+0x30>

08029e28 <_strtoul_l.constprop.0>:
 8029e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029e2c:	4686      	mov	lr, r0
 8029e2e:	460d      	mov	r5, r1
 8029e30:	4e33      	ldr	r6, [pc, #204]	@ (8029f00 <_strtoul_l.constprop.0+0xd8>)
 8029e32:	4628      	mov	r0, r5
 8029e34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029e38:	5d37      	ldrb	r7, [r6, r4]
 8029e3a:	f017 0708 	ands.w	r7, r7, #8
 8029e3e:	d1f8      	bne.n	8029e32 <_strtoul_l.constprop.0+0xa>
 8029e40:	2c2d      	cmp	r4, #45	@ 0x2d
 8029e42:	d12f      	bne.n	8029ea4 <_strtoul_l.constprop.0+0x7c>
 8029e44:	782c      	ldrb	r4, [r5, #0]
 8029e46:	2701      	movs	r7, #1
 8029e48:	1c85      	adds	r5, r0, #2
 8029e4a:	f033 0010 	bics.w	r0, r3, #16
 8029e4e:	d109      	bne.n	8029e64 <_strtoul_l.constprop.0+0x3c>
 8029e50:	2c30      	cmp	r4, #48	@ 0x30
 8029e52:	d12c      	bne.n	8029eae <_strtoul_l.constprop.0+0x86>
 8029e54:	7828      	ldrb	r0, [r5, #0]
 8029e56:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8029e5a:	2858      	cmp	r0, #88	@ 0x58
 8029e5c:	d127      	bne.n	8029eae <_strtoul_l.constprop.0+0x86>
 8029e5e:	786c      	ldrb	r4, [r5, #1]
 8029e60:	2310      	movs	r3, #16
 8029e62:	3502      	adds	r5, #2
 8029e64:	f04f 38ff 	mov.w	r8, #4294967295
 8029e68:	2600      	movs	r6, #0
 8029e6a:	fbb8 f8f3 	udiv	r8, r8, r3
 8029e6e:	fb03 f908 	mul.w	r9, r3, r8
 8029e72:	4630      	mov	r0, r6
 8029e74:	ea6f 0909 	mvn.w	r9, r9
 8029e78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8029e7c:	f1bc 0f09 	cmp.w	ip, #9
 8029e80:	d81c      	bhi.n	8029ebc <_strtoul_l.constprop.0+0x94>
 8029e82:	4664      	mov	r4, ip
 8029e84:	42a3      	cmp	r3, r4
 8029e86:	dd2a      	ble.n	8029ede <_strtoul_l.constprop.0+0xb6>
 8029e88:	f1b6 3fff 	cmp.w	r6, #4294967295
 8029e8c:	d007      	beq.n	8029e9e <_strtoul_l.constprop.0+0x76>
 8029e8e:	4580      	cmp	r8, r0
 8029e90:	d322      	bcc.n	8029ed8 <_strtoul_l.constprop.0+0xb0>
 8029e92:	d101      	bne.n	8029e98 <_strtoul_l.constprop.0+0x70>
 8029e94:	45a1      	cmp	r9, r4
 8029e96:	db1f      	blt.n	8029ed8 <_strtoul_l.constprop.0+0xb0>
 8029e98:	fb00 4003 	mla	r0, r0, r3, r4
 8029e9c:	2601      	movs	r6, #1
 8029e9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8029ea2:	e7e9      	b.n	8029e78 <_strtoul_l.constprop.0+0x50>
 8029ea4:	2c2b      	cmp	r4, #43	@ 0x2b
 8029ea6:	bf04      	itt	eq
 8029ea8:	782c      	ldrbeq	r4, [r5, #0]
 8029eaa:	1c85      	addeq	r5, r0, #2
 8029eac:	e7cd      	b.n	8029e4a <_strtoul_l.constprop.0+0x22>
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	d1d8      	bne.n	8029e64 <_strtoul_l.constprop.0+0x3c>
 8029eb2:	2c30      	cmp	r4, #48	@ 0x30
 8029eb4:	bf0c      	ite	eq
 8029eb6:	2308      	moveq	r3, #8
 8029eb8:	230a      	movne	r3, #10
 8029eba:	e7d3      	b.n	8029e64 <_strtoul_l.constprop.0+0x3c>
 8029ebc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8029ec0:	f1bc 0f19 	cmp.w	ip, #25
 8029ec4:	d801      	bhi.n	8029eca <_strtoul_l.constprop.0+0xa2>
 8029ec6:	3c37      	subs	r4, #55	@ 0x37
 8029ec8:	e7dc      	b.n	8029e84 <_strtoul_l.constprop.0+0x5c>
 8029eca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8029ece:	f1bc 0f19 	cmp.w	ip, #25
 8029ed2:	d804      	bhi.n	8029ede <_strtoul_l.constprop.0+0xb6>
 8029ed4:	3c57      	subs	r4, #87	@ 0x57
 8029ed6:	e7d5      	b.n	8029e84 <_strtoul_l.constprop.0+0x5c>
 8029ed8:	f04f 36ff 	mov.w	r6, #4294967295
 8029edc:	e7df      	b.n	8029e9e <_strtoul_l.constprop.0+0x76>
 8029ede:	1c73      	adds	r3, r6, #1
 8029ee0:	d106      	bne.n	8029ef0 <_strtoul_l.constprop.0+0xc8>
 8029ee2:	2322      	movs	r3, #34	@ 0x22
 8029ee4:	4630      	mov	r0, r6
 8029ee6:	f8ce 3000 	str.w	r3, [lr]
 8029eea:	b932      	cbnz	r2, 8029efa <_strtoul_l.constprop.0+0xd2>
 8029eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029ef0:	b107      	cbz	r7, 8029ef4 <_strtoul_l.constprop.0+0xcc>
 8029ef2:	4240      	negs	r0, r0
 8029ef4:	2a00      	cmp	r2, #0
 8029ef6:	d0f9      	beq.n	8029eec <_strtoul_l.constprop.0+0xc4>
 8029ef8:	b106      	cbz	r6, 8029efc <_strtoul_l.constprop.0+0xd4>
 8029efa:	1e69      	subs	r1, r5, #1
 8029efc:	6011      	str	r1, [r2, #0]
 8029efe:	e7f5      	b.n	8029eec <_strtoul_l.constprop.0+0xc4>
 8029f00:	0803031e 	.word	0x0803031e

08029f04 <_strtoul_r>:
 8029f04:	f7ff bf90 	b.w	8029e28 <_strtoul_l.constprop.0>

08029f08 <strtoul>:
 8029f08:	4613      	mov	r3, r2
 8029f0a:	460a      	mov	r2, r1
 8029f0c:	4601      	mov	r1, r0
 8029f0e:	4802      	ldr	r0, [pc, #8]	@ (8029f18 <strtoul+0x10>)
 8029f10:	6800      	ldr	r0, [r0, #0]
 8029f12:	f7ff bf89 	b.w	8029e28 <_strtoul_l.constprop.0>
 8029f16:	bf00      	nop
 8029f18:	20000508 	.word	0x20000508

08029f1c <__ascii_wctomb>:
 8029f1c:	4603      	mov	r3, r0
 8029f1e:	4608      	mov	r0, r1
 8029f20:	b141      	cbz	r1, 8029f34 <__ascii_wctomb+0x18>
 8029f22:	2aff      	cmp	r2, #255	@ 0xff
 8029f24:	d904      	bls.n	8029f30 <__ascii_wctomb+0x14>
 8029f26:	228a      	movs	r2, #138	@ 0x8a
 8029f28:	f04f 30ff 	mov.w	r0, #4294967295
 8029f2c:	601a      	str	r2, [r3, #0]
 8029f2e:	4770      	bx	lr
 8029f30:	2001      	movs	r0, #1
 8029f32:	700a      	strb	r2, [r1, #0]
 8029f34:	4770      	bx	lr

08029f36 <__ssputs_r>:
 8029f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029f3a:	461f      	mov	r7, r3
 8029f3c:	688e      	ldr	r6, [r1, #8]
 8029f3e:	4682      	mov	sl, r0
 8029f40:	460c      	mov	r4, r1
 8029f42:	42be      	cmp	r6, r7
 8029f44:	4690      	mov	r8, r2
 8029f46:	680b      	ldr	r3, [r1, #0]
 8029f48:	d82d      	bhi.n	8029fa6 <__ssputs_r+0x70>
 8029f4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8029f4e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8029f52:	d026      	beq.n	8029fa2 <__ssputs_r+0x6c>
 8029f54:	6965      	ldr	r5, [r4, #20]
 8029f56:	6909      	ldr	r1, [r1, #16]
 8029f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8029f5c:	eba3 0901 	sub.w	r9, r3, r1
 8029f60:	1c7b      	adds	r3, r7, #1
 8029f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8029f66:	444b      	add	r3, r9
 8029f68:	106d      	asrs	r5, r5, #1
 8029f6a:	429d      	cmp	r5, r3
 8029f6c:	bf38      	it	cc
 8029f6e:	461d      	movcc	r5, r3
 8029f70:	0553      	lsls	r3, r2, #21
 8029f72:	d527      	bpl.n	8029fc4 <__ssputs_r+0x8e>
 8029f74:	4629      	mov	r1, r5
 8029f76:	f7ff f9fd 	bl	8029374 <_malloc_r>
 8029f7a:	4606      	mov	r6, r0
 8029f7c:	b360      	cbz	r0, 8029fd8 <__ssputs_r+0xa2>
 8029f7e:	464a      	mov	r2, r9
 8029f80:	6921      	ldr	r1, [r4, #16]
 8029f82:	f7fd ff8c 	bl	8027e9e <memcpy>
 8029f86:	89a3      	ldrh	r3, [r4, #12]
 8029f88:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8029f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8029f90:	81a3      	strh	r3, [r4, #12]
 8029f92:	6126      	str	r6, [r4, #16]
 8029f94:	444e      	add	r6, r9
 8029f96:	6165      	str	r5, [r4, #20]
 8029f98:	eba5 0509 	sub.w	r5, r5, r9
 8029f9c:	6026      	str	r6, [r4, #0]
 8029f9e:	463e      	mov	r6, r7
 8029fa0:	60a5      	str	r5, [r4, #8]
 8029fa2:	42be      	cmp	r6, r7
 8029fa4:	d900      	bls.n	8029fa8 <__ssputs_r+0x72>
 8029fa6:	463e      	mov	r6, r7
 8029fa8:	4632      	mov	r2, r6
 8029faa:	4641      	mov	r1, r8
 8029fac:	6820      	ldr	r0, [r4, #0]
 8029fae:	f000 f9ef 	bl	802a390 <memmove>
 8029fb2:	68a3      	ldr	r3, [r4, #8]
 8029fb4:	2000      	movs	r0, #0
 8029fb6:	1b9b      	subs	r3, r3, r6
 8029fb8:	60a3      	str	r3, [r4, #8]
 8029fba:	6823      	ldr	r3, [r4, #0]
 8029fbc:	4433      	add	r3, r6
 8029fbe:	6023      	str	r3, [r4, #0]
 8029fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029fc4:	462a      	mov	r2, r5
 8029fc6:	f000 fa4f 	bl	802a468 <_realloc_r>
 8029fca:	4606      	mov	r6, r0
 8029fcc:	2800      	cmp	r0, #0
 8029fce:	d1e0      	bne.n	8029f92 <__ssputs_r+0x5c>
 8029fd0:	6921      	ldr	r1, [r4, #16]
 8029fd2:	4650      	mov	r0, sl
 8029fd4:	f7fe fdd8 	bl	8028b88 <_free_r>
 8029fd8:	230c      	movs	r3, #12
 8029fda:	f04f 30ff 	mov.w	r0, #4294967295
 8029fde:	f8ca 3000 	str.w	r3, [sl]
 8029fe2:	89a3      	ldrh	r3, [r4, #12]
 8029fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029fe8:	81a3      	strh	r3, [r4, #12]
 8029fea:	e7e9      	b.n	8029fc0 <__ssputs_r+0x8a>

08029fec <_svfiprintf_r>:
 8029fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ff0:	4698      	mov	r8, r3
 8029ff2:	898b      	ldrh	r3, [r1, #12]
 8029ff4:	b09d      	sub	sp, #116	@ 0x74
 8029ff6:	4607      	mov	r7, r0
 8029ff8:	061b      	lsls	r3, r3, #24
 8029ffa:	460d      	mov	r5, r1
 8029ffc:	4614      	mov	r4, r2
 8029ffe:	d510      	bpl.n	802a022 <_svfiprintf_r+0x36>
 802a000:	690b      	ldr	r3, [r1, #16]
 802a002:	b973      	cbnz	r3, 802a022 <_svfiprintf_r+0x36>
 802a004:	2140      	movs	r1, #64	@ 0x40
 802a006:	f7ff f9b5 	bl	8029374 <_malloc_r>
 802a00a:	6028      	str	r0, [r5, #0]
 802a00c:	6128      	str	r0, [r5, #16]
 802a00e:	b930      	cbnz	r0, 802a01e <_svfiprintf_r+0x32>
 802a010:	230c      	movs	r3, #12
 802a012:	603b      	str	r3, [r7, #0]
 802a014:	f04f 30ff 	mov.w	r0, #4294967295
 802a018:	b01d      	add	sp, #116	@ 0x74
 802a01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a01e:	2340      	movs	r3, #64	@ 0x40
 802a020:	616b      	str	r3, [r5, #20]
 802a022:	2300      	movs	r3, #0
 802a024:	f8cd 800c 	str.w	r8, [sp, #12]
 802a028:	f04f 0901 	mov.w	r9, #1
 802a02c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 802a1d0 <_svfiprintf_r+0x1e4>
 802a030:	9309      	str	r3, [sp, #36]	@ 0x24
 802a032:	2320      	movs	r3, #32
 802a034:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802a038:	2330      	movs	r3, #48	@ 0x30
 802a03a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802a03e:	4623      	mov	r3, r4
 802a040:	469a      	mov	sl, r3
 802a042:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a046:	b10a      	cbz	r2, 802a04c <_svfiprintf_r+0x60>
 802a048:	2a25      	cmp	r2, #37	@ 0x25
 802a04a:	d1f9      	bne.n	802a040 <_svfiprintf_r+0x54>
 802a04c:	ebba 0b04 	subs.w	fp, sl, r4
 802a050:	d00b      	beq.n	802a06a <_svfiprintf_r+0x7e>
 802a052:	465b      	mov	r3, fp
 802a054:	4622      	mov	r2, r4
 802a056:	4629      	mov	r1, r5
 802a058:	4638      	mov	r0, r7
 802a05a:	f7ff ff6c 	bl	8029f36 <__ssputs_r>
 802a05e:	3001      	adds	r0, #1
 802a060:	f000 80a7 	beq.w	802a1b2 <_svfiprintf_r+0x1c6>
 802a064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802a066:	445a      	add	r2, fp
 802a068:	9209      	str	r2, [sp, #36]	@ 0x24
 802a06a:	f89a 3000 	ldrb.w	r3, [sl]
 802a06e:	2b00      	cmp	r3, #0
 802a070:	f000 809f 	beq.w	802a1b2 <_svfiprintf_r+0x1c6>
 802a074:	2300      	movs	r3, #0
 802a076:	f04f 32ff 	mov.w	r2, #4294967295
 802a07a:	f10a 0a01 	add.w	sl, sl, #1
 802a07e:	9304      	str	r3, [sp, #16]
 802a080:	9307      	str	r3, [sp, #28]
 802a082:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802a086:	931a      	str	r3, [sp, #104]	@ 0x68
 802a088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a08c:	4654      	mov	r4, sl
 802a08e:	2205      	movs	r2, #5
 802a090:	484f      	ldr	r0, [pc, #316]	@ (802a1d0 <_svfiprintf_r+0x1e4>)
 802a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a096:	f7fd fef4 	bl	8027e82 <memchr>
 802a09a:	9a04      	ldr	r2, [sp, #16]
 802a09c:	b9d8      	cbnz	r0, 802a0d6 <_svfiprintf_r+0xea>
 802a09e:	06d0      	lsls	r0, r2, #27
 802a0a0:	bf44      	itt	mi
 802a0a2:	2320      	movmi	r3, #32
 802a0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a0a8:	0711      	lsls	r1, r2, #28
 802a0aa:	bf44      	itt	mi
 802a0ac:	232b      	movmi	r3, #43	@ 0x2b
 802a0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802a0b2:	f89a 3000 	ldrb.w	r3, [sl]
 802a0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 802a0b8:	d015      	beq.n	802a0e6 <_svfiprintf_r+0xfa>
 802a0ba:	9a07      	ldr	r2, [sp, #28]
 802a0bc:	4654      	mov	r4, sl
 802a0be:	2000      	movs	r0, #0
 802a0c0:	f04f 0c0a 	mov.w	ip, #10
 802a0c4:	4621      	mov	r1, r4
 802a0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a0ca:	3b30      	subs	r3, #48	@ 0x30
 802a0cc:	2b09      	cmp	r3, #9
 802a0ce:	d94b      	bls.n	802a168 <_svfiprintf_r+0x17c>
 802a0d0:	b1b0      	cbz	r0, 802a100 <_svfiprintf_r+0x114>
 802a0d2:	9207      	str	r2, [sp, #28]
 802a0d4:	e014      	b.n	802a100 <_svfiprintf_r+0x114>
 802a0d6:	eba0 0308 	sub.w	r3, r0, r8
 802a0da:	46a2      	mov	sl, r4
 802a0dc:	fa09 f303 	lsl.w	r3, r9, r3
 802a0e0:	4313      	orrs	r3, r2
 802a0e2:	9304      	str	r3, [sp, #16]
 802a0e4:	e7d2      	b.n	802a08c <_svfiprintf_r+0xa0>
 802a0e6:	9b03      	ldr	r3, [sp, #12]
 802a0e8:	1d19      	adds	r1, r3, #4
 802a0ea:	681b      	ldr	r3, [r3, #0]
 802a0ec:	2b00      	cmp	r3, #0
 802a0ee:	9103      	str	r1, [sp, #12]
 802a0f0:	bfbb      	ittet	lt
 802a0f2:	425b      	neglt	r3, r3
 802a0f4:	f042 0202 	orrlt.w	r2, r2, #2
 802a0f8:	9307      	strge	r3, [sp, #28]
 802a0fa:	9307      	strlt	r3, [sp, #28]
 802a0fc:	bfb8      	it	lt
 802a0fe:	9204      	strlt	r2, [sp, #16]
 802a100:	7823      	ldrb	r3, [r4, #0]
 802a102:	2b2e      	cmp	r3, #46	@ 0x2e
 802a104:	d10a      	bne.n	802a11c <_svfiprintf_r+0x130>
 802a106:	7863      	ldrb	r3, [r4, #1]
 802a108:	2b2a      	cmp	r3, #42	@ 0x2a
 802a10a:	d132      	bne.n	802a172 <_svfiprintf_r+0x186>
 802a10c:	9b03      	ldr	r3, [sp, #12]
 802a10e:	3402      	adds	r4, #2
 802a110:	1d1a      	adds	r2, r3, #4
 802a112:	681b      	ldr	r3, [r3, #0]
 802a114:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802a118:	9203      	str	r2, [sp, #12]
 802a11a:	9305      	str	r3, [sp, #20]
 802a11c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802a1e0 <_svfiprintf_r+0x1f4>
 802a120:	2203      	movs	r2, #3
 802a122:	7821      	ldrb	r1, [r4, #0]
 802a124:	4650      	mov	r0, sl
 802a126:	f7fd feac 	bl	8027e82 <memchr>
 802a12a:	b138      	cbz	r0, 802a13c <_svfiprintf_r+0x150>
 802a12c:	eba0 000a 	sub.w	r0, r0, sl
 802a130:	2240      	movs	r2, #64	@ 0x40
 802a132:	9b04      	ldr	r3, [sp, #16]
 802a134:	3401      	adds	r4, #1
 802a136:	4082      	lsls	r2, r0
 802a138:	4313      	orrs	r3, r2
 802a13a:	9304      	str	r3, [sp, #16]
 802a13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a140:	2206      	movs	r2, #6
 802a142:	4824      	ldr	r0, [pc, #144]	@ (802a1d4 <_svfiprintf_r+0x1e8>)
 802a144:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802a148:	f7fd fe9b 	bl	8027e82 <memchr>
 802a14c:	2800      	cmp	r0, #0
 802a14e:	d036      	beq.n	802a1be <_svfiprintf_r+0x1d2>
 802a150:	4b21      	ldr	r3, [pc, #132]	@ (802a1d8 <_svfiprintf_r+0x1ec>)
 802a152:	bb1b      	cbnz	r3, 802a19c <_svfiprintf_r+0x1b0>
 802a154:	9b03      	ldr	r3, [sp, #12]
 802a156:	3307      	adds	r3, #7
 802a158:	f023 0307 	bic.w	r3, r3, #7
 802a15c:	3308      	adds	r3, #8
 802a15e:	9303      	str	r3, [sp, #12]
 802a160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a162:	4433      	add	r3, r6
 802a164:	9309      	str	r3, [sp, #36]	@ 0x24
 802a166:	e76a      	b.n	802a03e <_svfiprintf_r+0x52>
 802a168:	fb0c 3202 	mla	r2, ip, r2, r3
 802a16c:	460c      	mov	r4, r1
 802a16e:	2001      	movs	r0, #1
 802a170:	e7a8      	b.n	802a0c4 <_svfiprintf_r+0xd8>
 802a172:	2300      	movs	r3, #0
 802a174:	3401      	adds	r4, #1
 802a176:	f04f 0c0a 	mov.w	ip, #10
 802a17a:	4619      	mov	r1, r3
 802a17c:	9305      	str	r3, [sp, #20]
 802a17e:	4620      	mov	r0, r4
 802a180:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a184:	3a30      	subs	r2, #48	@ 0x30
 802a186:	2a09      	cmp	r2, #9
 802a188:	d903      	bls.n	802a192 <_svfiprintf_r+0x1a6>
 802a18a:	2b00      	cmp	r3, #0
 802a18c:	d0c6      	beq.n	802a11c <_svfiprintf_r+0x130>
 802a18e:	9105      	str	r1, [sp, #20]
 802a190:	e7c4      	b.n	802a11c <_svfiprintf_r+0x130>
 802a192:	fb0c 2101 	mla	r1, ip, r1, r2
 802a196:	4604      	mov	r4, r0
 802a198:	2301      	movs	r3, #1
 802a19a:	e7f0      	b.n	802a17e <_svfiprintf_r+0x192>
 802a19c:	ab03      	add	r3, sp, #12
 802a19e:	462a      	mov	r2, r5
 802a1a0:	a904      	add	r1, sp, #16
 802a1a2:	4638      	mov	r0, r7
 802a1a4:	9300      	str	r3, [sp, #0]
 802a1a6:	4b0d      	ldr	r3, [pc, #52]	@ (802a1dc <_svfiprintf_r+0x1f0>)
 802a1a8:	f7fc f870 	bl	802628c <_printf_float>
 802a1ac:	1c42      	adds	r2, r0, #1
 802a1ae:	4606      	mov	r6, r0
 802a1b0:	d1d6      	bne.n	802a160 <_svfiprintf_r+0x174>
 802a1b2:	89ab      	ldrh	r3, [r5, #12]
 802a1b4:	065b      	lsls	r3, r3, #25
 802a1b6:	f53f af2d 	bmi.w	802a014 <_svfiprintf_r+0x28>
 802a1ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802a1bc:	e72c      	b.n	802a018 <_svfiprintf_r+0x2c>
 802a1be:	ab03      	add	r3, sp, #12
 802a1c0:	462a      	mov	r2, r5
 802a1c2:	a904      	add	r1, sp, #16
 802a1c4:	4638      	mov	r0, r7
 802a1c6:	9300      	str	r3, [sp, #0]
 802a1c8:	4b04      	ldr	r3, [pc, #16]	@ (802a1dc <_svfiprintf_r+0x1f0>)
 802a1ca:	f7fc fafb 	bl	80267c4 <_printf_i>
 802a1ce:	e7ed      	b.n	802a1ac <_svfiprintf_r+0x1c0>
 802a1d0:	08030750 	.word	0x08030750
 802a1d4:	0803075a 	.word	0x0803075a
 802a1d8:	0802628d 	.word	0x0802628d
 802a1dc:	08029f37 	.word	0x08029f37
 802a1e0:	08030756 	.word	0x08030756

0802a1e4 <__sflush_r>:
 802a1e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802a1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a1ec:	0716      	lsls	r6, r2, #28
 802a1ee:	4605      	mov	r5, r0
 802a1f0:	460c      	mov	r4, r1
 802a1f2:	d454      	bmi.n	802a29e <__sflush_r+0xba>
 802a1f4:	684b      	ldr	r3, [r1, #4]
 802a1f6:	2b00      	cmp	r3, #0
 802a1f8:	dc02      	bgt.n	802a200 <__sflush_r+0x1c>
 802a1fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802a1fc:	2b00      	cmp	r3, #0
 802a1fe:	dd48      	ble.n	802a292 <__sflush_r+0xae>
 802a200:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a202:	2e00      	cmp	r6, #0
 802a204:	d045      	beq.n	802a292 <__sflush_r+0xae>
 802a206:	2300      	movs	r3, #0
 802a208:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802a20c:	682f      	ldr	r7, [r5, #0]
 802a20e:	6a21      	ldr	r1, [r4, #32]
 802a210:	602b      	str	r3, [r5, #0]
 802a212:	d030      	beq.n	802a276 <__sflush_r+0x92>
 802a214:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802a216:	89a3      	ldrh	r3, [r4, #12]
 802a218:	0759      	lsls	r1, r3, #29
 802a21a:	d505      	bpl.n	802a228 <__sflush_r+0x44>
 802a21c:	6863      	ldr	r3, [r4, #4]
 802a21e:	1ad2      	subs	r2, r2, r3
 802a220:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802a222:	b10b      	cbz	r3, 802a228 <__sflush_r+0x44>
 802a224:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802a226:	1ad2      	subs	r2, r2, r3
 802a228:	2300      	movs	r3, #0
 802a22a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802a22c:	6a21      	ldr	r1, [r4, #32]
 802a22e:	4628      	mov	r0, r5
 802a230:	47b0      	blx	r6
 802a232:	1c43      	adds	r3, r0, #1
 802a234:	89a3      	ldrh	r3, [r4, #12]
 802a236:	d106      	bne.n	802a246 <__sflush_r+0x62>
 802a238:	6829      	ldr	r1, [r5, #0]
 802a23a:	291d      	cmp	r1, #29
 802a23c:	d82b      	bhi.n	802a296 <__sflush_r+0xb2>
 802a23e:	4a2a      	ldr	r2, [pc, #168]	@ (802a2e8 <__sflush_r+0x104>)
 802a240:	410a      	asrs	r2, r1
 802a242:	07d6      	lsls	r6, r2, #31
 802a244:	d427      	bmi.n	802a296 <__sflush_r+0xb2>
 802a246:	2200      	movs	r2, #0
 802a248:	04d9      	lsls	r1, r3, #19
 802a24a:	6062      	str	r2, [r4, #4]
 802a24c:	6922      	ldr	r2, [r4, #16]
 802a24e:	6022      	str	r2, [r4, #0]
 802a250:	d504      	bpl.n	802a25c <__sflush_r+0x78>
 802a252:	1c42      	adds	r2, r0, #1
 802a254:	d101      	bne.n	802a25a <__sflush_r+0x76>
 802a256:	682b      	ldr	r3, [r5, #0]
 802a258:	b903      	cbnz	r3, 802a25c <__sflush_r+0x78>
 802a25a:	6560      	str	r0, [r4, #84]	@ 0x54
 802a25c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802a25e:	602f      	str	r7, [r5, #0]
 802a260:	b1b9      	cbz	r1, 802a292 <__sflush_r+0xae>
 802a262:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a266:	4299      	cmp	r1, r3
 802a268:	d002      	beq.n	802a270 <__sflush_r+0x8c>
 802a26a:	4628      	mov	r0, r5
 802a26c:	f7fe fc8c 	bl	8028b88 <_free_r>
 802a270:	2300      	movs	r3, #0
 802a272:	6363      	str	r3, [r4, #52]	@ 0x34
 802a274:	e00d      	b.n	802a292 <__sflush_r+0xae>
 802a276:	2301      	movs	r3, #1
 802a278:	4628      	mov	r0, r5
 802a27a:	47b0      	blx	r6
 802a27c:	4602      	mov	r2, r0
 802a27e:	1c50      	adds	r0, r2, #1
 802a280:	d1c9      	bne.n	802a216 <__sflush_r+0x32>
 802a282:	682b      	ldr	r3, [r5, #0]
 802a284:	2b00      	cmp	r3, #0
 802a286:	d0c6      	beq.n	802a216 <__sflush_r+0x32>
 802a288:	2b1d      	cmp	r3, #29
 802a28a:	d001      	beq.n	802a290 <__sflush_r+0xac>
 802a28c:	2b16      	cmp	r3, #22
 802a28e:	d11d      	bne.n	802a2cc <__sflush_r+0xe8>
 802a290:	602f      	str	r7, [r5, #0]
 802a292:	2000      	movs	r0, #0
 802a294:	e021      	b.n	802a2da <__sflush_r+0xf6>
 802a296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a29a:	b21b      	sxth	r3, r3
 802a29c:	e01a      	b.n	802a2d4 <__sflush_r+0xf0>
 802a29e:	690f      	ldr	r7, [r1, #16]
 802a2a0:	2f00      	cmp	r7, #0
 802a2a2:	d0f6      	beq.n	802a292 <__sflush_r+0xae>
 802a2a4:	0793      	lsls	r3, r2, #30
 802a2a6:	680e      	ldr	r6, [r1, #0]
 802a2a8:	600f      	str	r7, [r1, #0]
 802a2aa:	bf0c      	ite	eq
 802a2ac:	694b      	ldreq	r3, [r1, #20]
 802a2ae:	2300      	movne	r3, #0
 802a2b0:	eba6 0807 	sub.w	r8, r6, r7
 802a2b4:	608b      	str	r3, [r1, #8]
 802a2b6:	f1b8 0f00 	cmp.w	r8, #0
 802a2ba:	ddea      	ble.n	802a292 <__sflush_r+0xae>
 802a2bc:	4643      	mov	r3, r8
 802a2be:	463a      	mov	r2, r7
 802a2c0:	6a21      	ldr	r1, [r4, #32]
 802a2c2:	4628      	mov	r0, r5
 802a2c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802a2c6:	47b0      	blx	r6
 802a2c8:	2800      	cmp	r0, #0
 802a2ca:	dc08      	bgt.n	802a2de <__sflush_r+0xfa>
 802a2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a2d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 802a2d8:	81a3      	strh	r3, [r4, #12]
 802a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a2de:	4407      	add	r7, r0
 802a2e0:	eba8 0800 	sub.w	r8, r8, r0
 802a2e4:	e7e7      	b.n	802a2b6 <__sflush_r+0xd2>
 802a2e6:	bf00      	nop
 802a2e8:	dfbffffe 	.word	0xdfbffffe

0802a2ec <_fflush_r>:
 802a2ec:	b538      	push	{r3, r4, r5, lr}
 802a2ee:	690b      	ldr	r3, [r1, #16]
 802a2f0:	4605      	mov	r5, r0
 802a2f2:	460c      	mov	r4, r1
 802a2f4:	b913      	cbnz	r3, 802a2fc <_fflush_r+0x10>
 802a2f6:	2500      	movs	r5, #0
 802a2f8:	4628      	mov	r0, r5
 802a2fa:	bd38      	pop	{r3, r4, r5, pc}
 802a2fc:	b118      	cbz	r0, 802a306 <_fflush_r+0x1a>
 802a2fe:	6a03      	ldr	r3, [r0, #32]
 802a300:	b90b      	cbnz	r3, 802a306 <_fflush_r+0x1a>
 802a302:	f7fc fe1d 	bl	8026f40 <__sinit>
 802a306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a30a:	2b00      	cmp	r3, #0
 802a30c:	d0f3      	beq.n	802a2f6 <_fflush_r+0xa>
 802a30e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802a310:	07d0      	lsls	r0, r2, #31
 802a312:	d404      	bmi.n	802a31e <_fflush_r+0x32>
 802a314:	0599      	lsls	r1, r3, #22
 802a316:	d402      	bmi.n	802a31e <_fflush_r+0x32>
 802a318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a31a:	f7fd fda7 	bl	8027e6c <__retarget_lock_acquire_recursive>
 802a31e:	4628      	mov	r0, r5
 802a320:	4621      	mov	r1, r4
 802a322:	f7ff ff5f 	bl	802a1e4 <__sflush_r>
 802a326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802a328:	4605      	mov	r5, r0
 802a32a:	07da      	lsls	r2, r3, #31
 802a32c:	d4e4      	bmi.n	802a2f8 <_fflush_r+0xc>
 802a32e:	89a3      	ldrh	r3, [r4, #12]
 802a330:	059b      	lsls	r3, r3, #22
 802a332:	d4e1      	bmi.n	802a2f8 <_fflush_r+0xc>
 802a334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802a336:	f7fd fd9b 	bl	8027e70 <__retarget_lock_release_recursive>
 802a33a:	e7dd      	b.n	802a2f8 <_fflush_r+0xc>

0802a33c <siscanf>:
 802a33c:	b40e      	push	{r1, r2, r3}
 802a33e:	b530      	push	{r4, r5, lr}
 802a340:	b09c      	sub	sp, #112	@ 0x70
 802a342:	f44f 7201 	mov.w	r2, #516	@ 0x204
 802a346:	ac1f      	add	r4, sp, #124	@ 0x7c
 802a348:	f8ad 2014 	strh.w	r2, [sp, #20]
 802a34c:	9002      	str	r0, [sp, #8]
 802a34e:	f854 5b04 	ldr.w	r5, [r4], #4
 802a352:	9006      	str	r0, [sp, #24]
 802a354:	f7d5 ff9a 	bl	800028c <strlen>
 802a358:	4b0b      	ldr	r3, [pc, #44]	@ (802a388 <siscanf+0x4c>)
 802a35a:	462a      	mov	r2, r5
 802a35c:	9003      	str	r0, [sp, #12]
 802a35e:	a902      	add	r1, sp, #8
 802a360:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a362:	2300      	movs	r3, #0
 802a364:	9007      	str	r0, [sp, #28]
 802a366:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a368:	9314      	str	r3, [sp, #80]	@ 0x50
 802a36a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802a36e:	4807      	ldr	r0, [pc, #28]	@ (802a38c <siscanf+0x50>)
 802a370:	f8ad 3016 	strh.w	r3, [sp, #22]
 802a374:	4623      	mov	r3, r4
 802a376:	6800      	ldr	r0, [r0, #0]
 802a378:	9401      	str	r4, [sp, #4]
 802a37a:	f000 f8fb 	bl	802a574 <__ssvfiscanf_r>
 802a37e:	b01c      	add	sp, #112	@ 0x70
 802a380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a384:	b003      	add	sp, #12
 802a386:	4770      	bx	lr
 802a388:	08027077 	.word	0x08027077
 802a38c:	20000508 	.word	0x20000508

0802a390 <memmove>:
 802a390:	4288      	cmp	r0, r1
 802a392:	b510      	push	{r4, lr}
 802a394:	eb01 0402 	add.w	r4, r1, r2
 802a398:	d902      	bls.n	802a3a0 <memmove+0x10>
 802a39a:	4284      	cmp	r4, r0
 802a39c:	4623      	mov	r3, r4
 802a39e:	d807      	bhi.n	802a3b0 <memmove+0x20>
 802a3a0:	1e43      	subs	r3, r0, #1
 802a3a2:	42a1      	cmp	r1, r4
 802a3a4:	d008      	beq.n	802a3b8 <memmove+0x28>
 802a3a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802a3aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 802a3ae:	e7f8      	b.n	802a3a2 <memmove+0x12>
 802a3b0:	4402      	add	r2, r0
 802a3b2:	4601      	mov	r1, r0
 802a3b4:	428a      	cmp	r2, r1
 802a3b6:	d100      	bne.n	802a3ba <memmove+0x2a>
 802a3b8:	bd10      	pop	{r4, pc}
 802a3ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802a3be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802a3c2:	e7f7      	b.n	802a3b4 <memmove+0x24>

0802a3c4 <__gettzinfo>:
 802a3c4:	4800      	ldr	r0, [pc, #0]	@ (802a3c8 <__gettzinfo+0x4>)
 802a3c6:	4770      	bx	lr
 802a3c8:	20000558 	.word	0x20000558

0802a3cc <_sbrk_r>:
 802a3cc:	b538      	push	{r3, r4, r5, lr}
 802a3ce:	2300      	movs	r3, #0
 802a3d0:	4d05      	ldr	r5, [pc, #20]	@ (802a3e8 <_sbrk_r+0x1c>)
 802a3d2:	4604      	mov	r4, r0
 802a3d4:	4608      	mov	r0, r1
 802a3d6:	602b      	str	r3, [r5, #0]
 802a3d8:	f7eb ff38 	bl	801624c <_sbrk>
 802a3dc:	1c43      	adds	r3, r0, #1
 802a3de:	d102      	bne.n	802a3e6 <_sbrk_r+0x1a>
 802a3e0:	682b      	ldr	r3, [r5, #0]
 802a3e2:	b103      	cbz	r3, 802a3e6 <_sbrk_r+0x1a>
 802a3e4:	6023      	str	r3, [r4, #0]
 802a3e6:	bd38      	pop	{r3, r4, r5, pc}
 802a3e8:	200bbcec 	.word	0x200bbcec

0802a3ec <__assert_func>:
 802a3ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a3ee:	4614      	mov	r4, r2
 802a3f0:	461a      	mov	r2, r3
 802a3f2:	4b09      	ldr	r3, [pc, #36]	@ (802a418 <__assert_func+0x2c>)
 802a3f4:	4605      	mov	r5, r0
 802a3f6:	681b      	ldr	r3, [r3, #0]
 802a3f8:	68d8      	ldr	r0, [r3, #12]
 802a3fa:	b954      	cbnz	r4, 802a412 <__assert_func+0x26>
 802a3fc:	4b07      	ldr	r3, [pc, #28]	@ (802a41c <__assert_func+0x30>)
 802a3fe:	461c      	mov	r4, r3
 802a400:	9100      	str	r1, [sp, #0]
 802a402:	4907      	ldr	r1, [pc, #28]	@ (802a420 <__assert_func+0x34>)
 802a404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a408:	462b      	mov	r3, r5
 802a40a:	f000 fb73 	bl	802aaf4 <fiprintf>
 802a40e:	f000 fbf3 	bl	802abf8 <abort>
 802a412:	4b04      	ldr	r3, [pc, #16]	@ (802a424 <__assert_func+0x38>)
 802a414:	e7f4      	b.n	802a400 <__assert_func+0x14>
 802a416:	bf00      	nop
 802a418:	20000508 	.word	0x20000508
 802a41c:	080307ff 	.word	0x080307ff
 802a420:	080307d1 	.word	0x080307d1
 802a424:	080307c4 	.word	0x080307c4

0802a428 <_calloc_r>:
 802a428:	b570      	push	{r4, r5, r6, lr}
 802a42a:	fba1 5402 	umull	r5, r4, r1, r2
 802a42e:	b93c      	cbnz	r4, 802a440 <_calloc_r+0x18>
 802a430:	4629      	mov	r1, r5
 802a432:	f7fe ff9f 	bl	8029374 <_malloc_r>
 802a436:	4606      	mov	r6, r0
 802a438:	b928      	cbnz	r0, 802a446 <_calloc_r+0x1e>
 802a43a:	2600      	movs	r6, #0
 802a43c:	4630      	mov	r0, r6
 802a43e:	bd70      	pop	{r4, r5, r6, pc}
 802a440:	220c      	movs	r2, #12
 802a442:	6002      	str	r2, [r0, #0]
 802a444:	e7f9      	b.n	802a43a <_calloc_r+0x12>
 802a446:	462a      	mov	r2, r5
 802a448:	4621      	mov	r1, r4
 802a44a:	f7fc fe91 	bl	8027170 <memset>
 802a44e:	e7f5      	b.n	802a43c <_calloc_r+0x14>

0802a450 <__env_lock>:
 802a450:	4801      	ldr	r0, [pc, #4]	@ (802a458 <__env_lock+0x8>)
 802a452:	f7fd bd0b 	b.w	8027e6c <__retarget_lock_acquire_recursive>
 802a456:	bf00      	nop
 802a458:	200bbcf1 	.word	0x200bbcf1

0802a45c <__env_unlock>:
 802a45c:	4801      	ldr	r0, [pc, #4]	@ (802a464 <__env_unlock+0x8>)
 802a45e:	f7fd bd07 	b.w	8027e70 <__retarget_lock_release_recursive>
 802a462:	bf00      	nop
 802a464:	200bbcf1 	.word	0x200bbcf1

0802a468 <_realloc_r>:
 802a468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a46c:	4680      	mov	r8, r0
 802a46e:	4615      	mov	r5, r2
 802a470:	460c      	mov	r4, r1
 802a472:	b921      	cbnz	r1, 802a47e <_realloc_r+0x16>
 802a474:	4611      	mov	r1, r2
 802a476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a47a:	f7fe bf7b 	b.w	8029374 <_malloc_r>
 802a47e:	b92a      	cbnz	r2, 802a48c <_realloc_r+0x24>
 802a480:	f7fe fb82 	bl	8028b88 <_free_r>
 802a484:	2400      	movs	r4, #0
 802a486:	4620      	mov	r0, r4
 802a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a48c:	f000 fbbb 	bl	802ac06 <_malloc_usable_size_r>
 802a490:	4285      	cmp	r5, r0
 802a492:	4606      	mov	r6, r0
 802a494:	d802      	bhi.n	802a49c <_realloc_r+0x34>
 802a496:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 802a49a:	d8f4      	bhi.n	802a486 <_realloc_r+0x1e>
 802a49c:	4629      	mov	r1, r5
 802a49e:	4640      	mov	r0, r8
 802a4a0:	f7fe ff68 	bl	8029374 <_malloc_r>
 802a4a4:	4607      	mov	r7, r0
 802a4a6:	2800      	cmp	r0, #0
 802a4a8:	d0ec      	beq.n	802a484 <_realloc_r+0x1c>
 802a4aa:	42b5      	cmp	r5, r6
 802a4ac:	462a      	mov	r2, r5
 802a4ae:	4621      	mov	r1, r4
 802a4b0:	bf28      	it	cs
 802a4b2:	4632      	movcs	r2, r6
 802a4b4:	f7fd fcf3 	bl	8027e9e <memcpy>
 802a4b8:	4621      	mov	r1, r4
 802a4ba:	4640      	mov	r0, r8
 802a4bc:	463c      	mov	r4, r7
 802a4be:	f7fe fb63 	bl	8028b88 <_free_r>
 802a4c2:	e7e0      	b.n	802a486 <_realloc_r+0x1e>

0802a4c4 <_sungetc_r>:
 802a4c4:	b538      	push	{r3, r4, r5, lr}
 802a4c6:	1c4b      	adds	r3, r1, #1
 802a4c8:	4614      	mov	r4, r2
 802a4ca:	d103      	bne.n	802a4d4 <_sungetc_r+0x10>
 802a4cc:	f04f 35ff 	mov.w	r5, #4294967295
 802a4d0:	4628      	mov	r0, r5
 802a4d2:	bd38      	pop	{r3, r4, r5, pc}
 802a4d4:	8993      	ldrh	r3, [r2, #12]
 802a4d6:	b2cd      	uxtb	r5, r1
 802a4d8:	f023 0320 	bic.w	r3, r3, #32
 802a4dc:	8193      	strh	r3, [r2, #12]
 802a4de:	6853      	ldr	r3, [r2, #4]
 802a4e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802a4e2:	b18a      	cbz	r2, 802a508 <_sungetc_r+0x44>
 802a4e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 802a4e6:	429a      	cmp	r2, r3
 802a4e8:	dd08      	ble.n	802a4fc <_sungetc_r+0x38>
 802a4ea:	6823      	ldr	r3, [r4, #0]
 802a4ec:	1e5a      	subs	r2, r3, #1
 802a4ee:	6022      	str	r2, [r4, #0]
 802a4f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 802a4f4:	6863      	ldr	r3, [r4, #4]
 802a4f6:	3301      	adds	r3, #1
 802a4f8:	6063      	str	r3, [r4, #4]
 802a4fa:	e7e9      	b.n	802a4d0 <_sungetc_r+0xc>
 802a4fc:	4621      	mov	r1, r4
 802a4fe:	f000 fb44 	bl	802ab8a <__submore>
 802a502:	2800      	cmp	r0, #0
 802a504:	d0f1      	beq.n	802a4ea <_sungetc_r+0x26>
 802a506:	e7e1      	b.n	802a4cc <_sungetc_r+0x8>
 802a508:	6921      	ldr	r1, [r4, #16]
 802a50a:	6822      	ldr	r2, [r4, #0]
 802a50c:	b141      	cbz	r1, 802a520 <_sungetc_r+0x5c>
 802a50e:	4291      	cmp	r1, r2
 802a510:	d206      	bcs.n	802a520 <_sungetc_r+0x5c>
 802a512:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 802a516:	42a9      	cmp	r1, r5
 802a518:	d102      	bne.n	802a520 <_sungetc_r+0x5c>
 802a51a:	3a01      	subs	r2, #1
 802a51c:	6022      	str	r2, [r4, #0]
 802a51e:	e7ea      	b.n	802a4f6 <_sungetc_r+0x32>
 802a520:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 802a524:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a528:	6363      	str	r3, [r4, #52]	@ 0x34
 802a52a:	2303      	movs	r3, #3
 802a52c:	63a3      	str	r3, [r4, #56]	@ 0x38
 802a52e:	4623      	mov	r3, r4
 802a530:	f803 5f46 	strb.w	r5, [r3, #70]!
 802a534:	6023      	str	r3, [r4, #0]
 802a536:	2301      	movs	r3, #1
 802a538:	e7de      	b.n	802a4f8 <_sungetc_r+0x34>

0802a53a <__ssrefill_r>:
 802a53a:	b510      	push	{r4, lr}
 802a53c:	460c      	mov	r4, r1
 802a53e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802a540:	b169      	cbz	r1, 802a55e <__ssrefill_r+0x24>
 802a542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802a546:	4299      	cmp	r1, r3
 802a548:	d001      	beq.n	802a54e <__ssrefill_r+0x14>
 802a54a:	f7fe fb1d 	bl	8028b88 <_free_r>
 802a54e:	2000      	movs	r0, #0
 802a550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802a552:	6360      	str	r0, [r4, #52]	@ 0x34
 802a554:	6063      	str	r3, [r4, #4]
 802a556:	b113      	cbz	r3, 802a55e <__ssrefill_r+0x24>
 802a558:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 802a55a:	6023      	str	r3, [r4, #0]
 802a55c:	bd10      	pop	{r4, pc}
 802a55e:	6923      	ldr	r3, [r4, #16]
 802a560:	f04f 30ff 	mov.w	r0, #4294967295
 802a564:	6023      	str	r3, [r4, #0]
 802a566:	2300      	movs	r3, #0
 802a568:	6063      	str	r3, [r4, #4]
 802a56a:	89a3      	ldrh	r3, [r4, #12]
 802a56c:	f043 0320 	orr.w	r3, r3, #32
 802a570:	81a3      	strh	r3, [r4, #12]
 802a572:	e7f3      	b.n	802a55c <__ssrefill_r+0x22>

0802a574 <__ssvfiscanf_r>:
 802a574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a578:	460c      	mov	r4, r1
 802a57a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 802a57e:	2100      	movs	r1, #0
 802a580:	4606      	mov	r6, r0
 802a582:	f10d 0804 	add.w	r8, sp, #4
 802a586:	4fa5      	ldr	r7, [pc, #660]	@ (802a81c <__ssvfiscanf_r+0x2a8>)
 802a588:	9300      	str	r3, [sp, #0]
 802a58a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 802a58e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 802a592:	49a3      	ldr	r1, [pc, #652]	@ (802a820 <__ssvfiscanf_r+0x2ac>)
 802a594:	91a0      	str	r1, [sp, #640]	@ 0x280
 802a596:	49a3      	ldr	r1, [pc, #652]	@ (802a824 <__ssvfiscanf_r+0x2b0>)
 802a598:	91a1      	str	r1, [sp, #644]	@ 0x284
 802a59a:	7813      	ldrb	r3, [r2, #0]
 802a59c:	2b00      	cmp	r3, #0
 802a59e:	f000 8158 	beq.w	802a852 <__ssvfiscanf_r+0x2de>
 802a5a2:	5cf9      	ldrb	r1, [r7, r3]
 802a5a4:	1c55      	adds	r5, r2, #1
 802a5a6:	f011 0108 	ands.w	r1, r1, #8
 802a5aa:	d019      	beq.n	802a5e0 <__ssvfiscanf_r+0x6c>
 802a5ac:	6863      	ldr	r3, [r4, #4]
 802a5ae:	2b00      	cmp	r3, #0
 802a5b0:	dd0f      	ble.n	802a5d2 <__ssvfiscanf_r+0x5e>
 802a5b2:	6823      	ldr	r3, [r4, #0]
 802a5b4:	781a      	ldrb	r2, [r3, #0]
 802a5b6:	5cba      	ldrb	r2, [r7, r2]
 802a5b8:	0712      	lsls	r2, r2, #28
 802a5ba:	d401      	bmi.n	802a5c0 <__ssvfiscanf_r+0x4c>
 802a5bc:	462a      	mov	r2, r5
 802a5be:	e7ec      	b.n	802a59a <__ssvfiscanf_r+0x26>
 802a5c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802a5c2:	3301      	adds	r3, #1
 802a5c4:	3201      	adds	r2, #1
 802a5c6:	6023      	str	r3, [r4, #0]
 802a5c8:	9245      	str	r2, [sp, #276]	@ 0x114
 802a5ca:	6862      	ldr	r2, [r4, #4]
 802a5cc:	3a01      	subs	r2, #1
 802a5ce:	6062      	str	r2, [r4, #4]
 802a5d0:	e7ec      	b.n	802a5ac <__ssvfiscanf_r+0x38>
 802a5d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802a5d4:	4621      	mov	r1, r4
 802a5d6:	4630      	mov	r0, r6
 802a5d8:	4798      	blx	r3
 802a5da:	2800      	cmp	r0, #0
 802a5dc:	d0e9      	beq.n	802a5b2 <__ssvfiscanf_r+0x3e>
 802a5de:	e7ed      	b.n	802a5bc <__ssvfiscanf_r+0x48>
 802a5e0:	2b25      	cmp	r3, #37	@ 0x25
 802a5e2:	d012      	beq.n	802a60a <__ssvfiscanf_r+0x96>
 802a5e4:	4699      	mov	r9, r3
 802a5e6:	6863      	ldr	r3, [r4, #4]
 802a5e8:	2b00      	cmp	r3, #0
 802a5ea:	f340 8094 	ble.w	802a716 <__ssvfiscanf_r+0x1a2>
 802a5ee:	6822      	ldr	r2, [r4, #0]
 802a5f0:	7813      	ldrb	r3, [r2, #0]
 802a5f2:	454b      	cmp	r3, r9
 802a5f4:	f040 812d 	bne.w	802a852 <__ssvfiscanf_r+0x2de>
 802a5f8:	6863      	ldr	r3, [r4, #4]
 802a5fa:	3201      	adds	r2, #1
 802a5fc:	3b01      	subs	r3, #1
 802a5fe:	6022      	str	r2, [r4, #0]
 802a600:	6063      	str	r3, [r4, #4]
 802a602:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 802a604:	3301      	adds	r3, #1
 802a606:	9345      	str	r3, [sp, #276]	@ 0x114
 802a608:	e7d8      	b.n	802a5bc <__ssvfiscanf_r+0x48>
 802a60a:	9141      	str	r1, [sp, #260]	@ 0x104
 802a60c:	9143      	str	r1, [sp, #268]	@ 0x10c
 802a60e:	7853      	ldrb	r3, [r2, #1]
 802a610:	2b2a      	cmp	r3, #42	@ 0x2a
 802a612:	bf04      	itt	eq
 802a614:	2310      	moveq	r3, #16
 802a616:	1c95      	addeq	r5, r2, #2
 802a618:	f04f 020a 	mov.w	r2, #10
 802a61c:	bf08      	it	eq
 802a61e:	9341      	streq	r3, [sp, #260]	@ 0x104
 802a620:	46a9      	mov	r9, r5
 802a622:	f819 1b01 	ldrb.w	r1, [r9], #1
 802a626:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 802a62a:	2b09      	cmp	r3, #9
 802a62c:	d91e      	bls.n	802a66c <__ssvfiscanf_r+0xf8>
 802a62e:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 802a828 <__ssvfiscanf_r+0x2b4>
 802a632:	2203      	movs	r2, #3
 802a634:	4650      	mov	r0, sl
 802a636:	f7fd fc24 	bl	8027e82 <memchr>
 802a63a:	b138      	cbz	r0, 802a64c <__ssvfiscanf_r+0xd8>
 802a63c:	eba0 000a 	sub.w	r0, r0, sl
 802a640:	2301      	movs	r3, #1
 802a642:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802a644:	464d      	mov	r5, r9
 802a646:	4083      	lsls	r3, r0
 802a648:	4313      	orrs	r3, r2
 802a64a:	9341      	str	r3, [sp, #260]	@ 0x104
 802a64c:	f815 3b01 	ldrb.w	r3, [r5], #1
 802a650:	2b78      	cmp	r3, #120	@ 0x78
 802a652:	d806      	bhi.n	802a662 <__ssvfiscanf_r+0xee>
 802a654:	2b57      	cmp	r3, #87	@ 0x57
 802a656:	d810      	bhi.n	802a67a <__ssvfiscanf_r+0x106>
 802a658:	2b25      	cmp	r3, #37	@ 0x25
 802a65a:	d0c3      	beq.n	802a5e4 <__ssvfiscanf_r+0x70>
 802a65c:	d856      	bhi.n	802a70c <__ssvfiscanf_r+0x198>
 802a65e:	2b00      	cmp	r3, #0
 802a660:	d064      	beq.n	802a72c <__ssvfiscanf_r+0x1b8>
 802a662:	2303      	movs	r3, #3
 802a664:	9347      	str	r3, [sp, #284]	@ 0x11c
 802a666:	230a      	movs	r3, #10
 802a668:	9342      	str	r3, [sp, #264]	@ 0x108
 802a66a:	e077      	b.n	802a75c <__ssvfiscanf_r+0x1e8>
 802a66c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 802a66e:	464d      	mov	r5, r9
 802a670:	fb02 1103 	mla	r1, r2, r3, r1
 802a674:	3930      	subs	r1, #48	@ 0x30
 802a676:	9143      	str	r1, [sp, #268]	@ 0x10c
 802a678:	e7d2      	b.n	802a620 <__ssvfiscanf_r+0xac>
 802a67a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 802a67e:	2a20      	cmp	r2, #32
 802a680:	d8ef      	bhi.n	802a662 <__ssvfiscanf_r+0xee>
 802a682:	a101      	add	r1, pc, #4	@ (adr r1, 802a688 <__ssvfiscanf_r+0x114>)
 802a684:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802a688:	0802a73b 	.word	0x0802a73b
 802a68c:	0802a663 	.word	0x0802a663
 802a690:	0802a663 	.word	0x0802a663
 802a694:	0802a795 	.word	0x0802a795
 802a698:	0802a663 	.word	0x0802a663
 802a69c:	0802a663 	.word	0x0802a663
 802a6a0:	0802a663 	.word	0x0802a663
 802a6a4:	0802a663 	.word	0x0802a663
 802a6a8:	0802a663 	.word	0x0802a663
 802a6ac:	0802a663 	.word	0x0802a663
 802a6b0:	0802a663 	.word	0x0802a663
 802a6b4:	0802a7ab 	.word	0x0802a7ab
 802a6b8:	0802a791 	.word	0x0802a791
 802a6bc:	0802a713 	.word	0x0802a713
 802a6c0:	0802a713 	.word	0x0802a713
 802a6c4:	0802a713 	.word	0x0802a713
 802a6c8:	0802a663 	.word	0x0802a663
 802a6cc:	0802a74d 	.word	0x0802a74d
 802a6d0:	0802a663 	.word	0x0802a663
 802a6d4:	0802a663 	.word	0x0802a663
 802a6d8:	0802a663 	.word	0x0802a663
 802a6dc:	0802a663 	.word	0x0802a663
 802a6e0:	0802a7bb 	.word	0x0802a7bb
 802a6e4:	0802a755 	.word	0x0802a755
 802a6e8:	0802a733 	.word	0x0802a733
 802a6ec:	0802a663 	.word	0x0802a663
 802a6f0:	0802a663 	.word	0x0802a663
 802a6f4:	0802a7b7 	.word	0x0802a7b7
 802a6f8:	0802a663 	.word	0x0802a663
 802a6fc:	0802a791 	.word	0x0802a791
 802a700:	0802a663 	.word	0x0802a663
 802a704:	0802a663 	.word	0x0802a663
 802a708:	0802a73b 	.word	0x0802a73b
 802a70c:	3b45      	subs	r3, #69	@ 0x45
 802a70e:	2b02      	cmp	r3, #2
 802a710:	d8a7      	bhi.n	802a662 <__ssvfiscanf_r+0xee>
 802a712:	2305      	movs	r3, #5
 802a714:	e021      	b.n	802a75a <__ssvfiscanf_r+0x1e6>
 802a716:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802a718:	4621      	mov	r1, r4
 802a71a:	4630      	mov	r0, r6
 802a71c:	4798      	blx	r3
 802a71e:	2800      	cmp	r0, #0
 802a720:	f43f af65 	beq.w	802a5ee <__ssvfiscanf_r+0x7a>
 802a724:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802a726:	2800      	cmp	r0, #0
 802a728:	f040 808b 	bne.w	802a842 <__ssvfiscanf_r+0x2ce>
 802a72c:	f04f 30ff 	mov.w	r0, #4294967295
 802a730:	e08b      	b.n	802a84a <__ssvfiscanf_r+0x2d6>
 802a732:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802a734:	f042 0220 	orr.w	r2, r2, #32
 802a738:	9241      	str	r2, [sp, #260]	@ 0x104
 802a73a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 802a73c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802a740:	9241      	str	r2, [sp, #260]	@ 0x104
 802a742:	2210      	movs	r2, #16
 802a744:	2b6e      	cmp	r3, #110	@ 0x6e
 802a746:	9242      	str	r2, [sp, #264]	@ 0x108
 802a748:	d902      	bls.n	802a750 <__ssvfiscanf_r+0x1dc>
 802a74a:	e005      	b.n	802a758 <__ssvfiscanf_r+0x1e4>
 802a74c:	2300      	movs	r3, #0
 802a74e:	9342      	str	r3, [sp, #264]	@ 0x108
 802a750:	2303      	movs	r3, #3
 802a752:	e002      	b.n	802a75a <__ssvfiscanf_r+0x1e6>
 802a754:	2308      	movs	r3, #8
 802a756:	9342      	str	r3, [sp, #264]	@ 0x108
 802a758:	2304      	movs	r3, #4
 802a75a:	9347      	str	r3, [sp, #284]	@ 0x11c
 802a75c:	6863      	ldr	r3, [r4, #4]
 802a75e:	2b00      	cmp	r3, #0
 802a760:	dd3a      	ble.n	802a7d8 <__ssvfiscanf_r+0x264>
 802a762:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802a764:	0659      	lsls	r1, r3, #25
 802a766:	d404      	bmi.n	802a772 <__ssvfiscanf_r+0x1fe>
 802a768:	6823      	ldr	r3, [r4, #0]
 802a76a:	781a      	ldrb	r2, [r3, #0]
 802a76c:	5cba      	ldrb	r2, [r7, r2]
 802a76e:	0712      	lsls	r2, r2, #28
 802a770:	d439      	bmi.n	802a7e6 <__ssvfiscanf_r+0x272>
 802a772:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 802a774:	2b02      	cmp	r3, #2
 802a776:	dc48      	bgt.n	802a80a <__ssvfiscanf_r+0x296>
 802a778:	466b      	mov	r3, sp
 802a77a:	4622      	mov	r2, r4
 802a77c:	a941      	add	r1, sp, #260	@ 0x104
 802a77e:	4630      	mov	r0, r6
 802a780:	f000 f86c 	bl	802a85c <_scanf_chars>
 802a784:	2801      	cmp	r0, #1
 802a786:	d064      	beq.n	802a852 <__ssvfiscanf_r+0x2de>
 802a788:	2802      	cmp	r0, #2
 802a78a:	f47f af17 	bne.w	802a5bc <__ssvfiscanf_r+0x48>
 802a78e:	e7c9      	b.n	802a724 <__ssvfiscanf_r+0x1b0>
 802a790:	220a      	movs	r2, #10
 802a792:	e7d7      	b.n	802a744 <__ssvfiscanf_r+0x1d0>
 802a794:	4629      	mov	r1, r5
 802a796:	4640      	mov	r0, r8
 802a798:	f000 f9be 	bl	802ab18 <__sccl>
 802a79c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802a79e:	4605      	mov	r5, r0
 802a7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a7a4:	9341      	str	r3, [sp, #260]	@ 0x104
 802a7a6:	2301      	movs	r3, #1
 802a7a8:	e7d7      	b.n	802a75a <__ssvfiscanf_r+0x1e6>
 802a7aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 802a7ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802a7b0:	9341      	str	r3, [sp, #260]	@ 0x104
 802a7b2:	2300      	movs	r3, #0
 802a7b4:	e7d1      	b.n	802a75a <__ssvfiscanf_r+0x1e6>
 802a7b6:	2302      	movs	r3, #2
 802a7b8:	e7cf      	b.n	802a75a <__ssvfiscanf_r+0x1e6>
 802a7ba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 802a7bc:	06c3      	lsls	r3, r0, #27
 802a7be:	f53f aefd 	bmi.w	802a5bc <__ssvfiscanf_r+0x48>
 802a7c2:	9b00      	ldr	r3, [sp, #0]
 802a7c4:	07c0      	lsls	r0, r0, #31
 802a7c6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802a7c8:	f103 0104 	add.w	r1, r3, #4
 802a7cc:	9100      	str	r1, [sp, #0]
 802a7ce:	681b      	ldr	r3, [r3, #0]
 802a7d0:	bf4c      	ite	mi
 802a7d2:	801a      	strhmi	r2, [r3, #0]
 802a7d4:	601a      	strpl	r2, [r3, #0]
 802a7d6:	e6f1      	b.n	802a5bc <__ssvfiscanf_r+0x48>
 802a7d8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802a7da:	4621      	mov	r1, r4
 802a7dc:	4630      	mov	r0, r6
 802a7de:	4798      	blx	r3
 802a7e0:	2800      	cmp	r0, #0
 802a7e2:	d0be      	beq.n	802a762 <__ssvfiscanf_r+0x1ee>
 802a7e4:	e79e      	b.n	802a724 <__ssvfiscanf_r+0x1b0>
 802a7e6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 802a7e8:	3201      	adds	r2, #1
 802a7ea:	9245      	str	r2, [sp, #276]	@ 0x114
 802a7ec:	6862      	ldr	r2, [r4, #4]
 802a7ee:	3a01      	subs	r2, #1
 802a7f0:	2a00      	cmp	r2, #0
 802a7f2:	6062      	str	r2, [r4, #4]
 802a7f4:	dd02      	ble.n	802a7fc <__ssvfiscanf_r+0x288>
 802a7f6:	3301      	adds	r3, #1
 802a7f8:	6023      	str	r3, [r4, #0]
 802a7fa:	e7b5      	b.n	802a768 <__ssvfiscanf_r+0x1f4>
 802a7fc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 802a7fe:	4621      	mov	r1, r4
 802a800:	4630      	mov	r0, r6
 802a802:	4798      	blx	r3
 802a804:	2800      	cmp	r0, #0
 802a806:	d0af      	beq.n	802a768 <__ssvfiscanf_r+0x1f4>
 802a808:	e78c      	b.n	802a724 <__ssvfiscanf_r+0x1b0>
 802a80a:	2b04      	cmp	r3, #4
 802a80c:	dc0e      	bgt.n	802a82c <__ssvfiscanf_r+0x2b8>
 802a80e:	466b      	mov	r3, sp
 802a810:	4622      	mov	r2, r4
 802a812:	a941      	add	r1, sp, #260	@ 0x104
 802a814:	4630      	mov	r0, r6
 802a816:	f000 f87b 	bl	802a910 <_scanf_i>
 802a81a:	e7b3      	b.n	802a784 <__ssvfiscanf_r+0x210>
 802a81c:	0803031e 	.word	0x0803031e
 802a820:	0802a4c5 	.word	0x0802a4c5
 802a824:	0802a53b 	.word	0x0802a53b
 802a828:	08030756 	.word	0x08030756
 802a82c:	4b0a      	ldr	r3, [pc, #40]	@ (802a858 <__ssvfiscanf_r+0x2e4>)
 802a82e:	2b00      	cmp	r3, #0
 802a830:	f43f aec4 	beq.w	802a5bc <__ssvfiscanf_r+0x48>
 802a834:	466b      	mov	r3, sp
 802a836:	4622      	mov	r2, r4
 802a838:	a941      	add	r1, sp, #260	@ 0x104
 802a83a:	4630      	mov	r0, r6
 802a83c:	f7fc f8e2 	bl	8026a04 <_scanf_float>
 802a840:	e7a0      	b.n	802a784 <__ssvfiscanf_r+0x210>
 802a842:	89a3      	ldrh	r3, [r4, #12]
 802a844:	065b      	lsls	r3, r3, #25
 802a846:	f53f af71 	bmi.w	802a72c <__ssvfiscanf_r+0x1b8>
 802a84a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 802a84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a852:	9844      	ldr	r0, [sp, #272]	@ 0x110
 802a854:	e7f9      	b.n	802a84a <__ssvfiscanf_r+0x2d6>
 802a856:	bf00      	nop
 802a858:	08026a05 	.word	0x08026a05

0802a85c <_scanf_chars>:
 802a85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a860:	4615      	mov	r5, r2
 802a862:	688a      	ldr	r2, [r1, #8]
 802a864:	4680      	mov	r8, r0
 802a866:	460c      	mov	r4, r1
 802a868:	b932      	cbnz	r2, 802a878 <_scanf_chars+0x1c>
 802a86a:	698a      	ldr	r2, [r1, #24]
 802a86c:	2a00      	cmp	r2, #0
 802a86e:	bf14      	ite	ne
 802a870:	f04f 32ff 	movne.w	r2, #4294967295
 802a874:	2201      	moveq	r2, #1
 802a876:	608a      	str	r2, [r1, #8]
 802a878:	6822      	ldr	r2, [r4, #0]
 802a87a:	2700      	movs	r7, #0
 802a87c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 802a90c <_scanf_chars+0xb0>
 802a880:	06d1      	lsls	r1, r2, #27
 802a882:	bf5f      	itttt	pl
 802a884:	681a      	ldrpl	r2, [r3, #0]
 802a886:	1d11      	addpl	r1, r2, #4
 802a888:	6019      	strpl	r1, [r3, #0]
 802a88a:	6816      	ldrpl	r6, [r2, #0]
 802a88c:	69a0      	ldr	r0, [r4, #24]
 802a88e:	b188      	cbz	r0, 802a8b4 <_scanf_chars+0x58>
 802a890:	2801      	cmp	r0, #1
 802a892:	d107      	bne.n	802a8a4 <_scanf_chars+0x48>
 802a894:	682b      	ldr	r3, [r5, #0]
 802a896:	781a      	ldrb	r2, [r3, #0]
 802a898:	6963      	ldr	r3, [r4, #20]
 802a89a:	5c9b      	ldrb	r3, [r3, r2]
 802a89c:	b953      	cbnz	r3, 802a8b4 <_scanf_chars+0x58>
 802a89e:	2f00      	cmp	r7, #0
 802a8a0:	d031      	beq.n	802a906 <_scanf_chars+0xaa>
 802a8a2:	e022      	b.n	802a8ea <_scanf_chars+0x8e>
 802a8a4:	2802      	cmp	r0, #2
 802a8a6:	d120      	bne.n	802a8ea <_scanf_chars+0x8e>
 802a8a8:	682b      	ldr	r3, [r5, #0]
 802a8aa:	781b      	ldrb	r3, [r3, #0]
 802a8ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 802a8b0:	071b      	lsls	r3, r3, #28
 802a8b2:	d41a      	bmi.n	802a8ea <_scanf_chars+0x8e>
 802a8b4:	6823      	ldr	r3, [r4, #0]
 802a8b6:	3701      	adds	r7, #1
 802a8b8:	06da      	lsls	r2, r3, #27
 802a8ba:	bf5e      	ittt	pl
 802a8bc:	682b      	ldrpl	r3, [r5, #0]
 802a8be:	781b      	ldrbpl	r3, [r3, #0]
 802a8c0:	f806 3b01 	strbpl.w	r3, [r6], #1
 802a8c4:	682a      	ldr	r2, [r5, #0]
 802a8c6:	686b      	ldr	r3, [r5, #4]
 802a8c8:	3201      	adds	r2, #1
 802a8ca:	3b01      	subs	r3, #1
 802a8cc:	602a      	str	r2, [r5, #0]
 802a8ce:	68a2      	ldr	r2, [r4, #8]
 802a8d0:	606b      	str	r3, [r5, #4]
 802a8d2:	3a01      	subs	r2, #1
 802a8d4:	60a2      	str	r2, [r4, #8]
 802a8d6:	b142      	cbz	r2, 802a8ea <_scanf_chars+0x8e>
 802a8d8:	2b00      	cmp	r3, #0
 802a8da:	dcd7      	bgt.n	802a88c <_scanf_chars+0x30>
 802a8dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802a8e0:	4629      	mov	r1, r5
 802a8e2:	4640      	mov	r0, r8
 802a8e4:	4798      	blx	r3
 802a8e6:	2800      	cmp	r0, #0
 802a8e8:	d0d0      	beq.n	802a88c <_scanf_chars+0x30>
 802a8ea:	6823      	ldr	r3, [r4, #0]
 802a8ec:	f013 0310 	ands.w	r3, r3, #16
 802a8f0:	d105      	bne.n	802a8fe <_scanf_chars+0xa2>
 802a8f2:	68e2      	ldr	r2, [r4, #12]
 802a8f4:	3201      	adds	r2, #1
 802a8f6:	60e2      	str	r2, [r4, #12]
 802a8f8:	69a2      	ldr	r2, [r4, #24]
 802a8fa:	b102      	cbz	r2, 802a8fe <_scanf_chars+0xa2>
 802a8fc:	7033      	strb	r3, [r6, #0]
 802a8fe:	6923      	ldr	r3, [r4, #16]
 802a900:	2000      	movs	r0, #0
 802a902:	443b      	add	r3, r7
 802a904:	6123      	str	r3, [r4, #16]
 802a906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a90a:	bf00      	nop
 802a90c:	0803031e 	.word	0x0803031e

0802a910 <_scanf_i>:
 802a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a914:	4698      	mov	r8, r3
 802a916:	b087      	sub	sp, #28
 802a918:	4b72      	ldr	r3, [pc, #456]	@ (802aae4 <_scanf_i+0x1d4>)
 802a91a:	460c      	mov	r4, r1
 802a91c:	4682      	mov	sl, r0
 802a91e:	4616      	mov	r6, r2
 802a920:	4627      	mov	r7, r4
 802a922:	f04f 0b00 	mov.w	fp, #0
 802a926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802a92a:	ab03      	add	r3, sp, #12
 802a92c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802a930:	4b6d      	ldr	r3, [pc, #436]	@ (802aae8 <_scanf_i+0x1d8>)
 802a932:	69a1      	ldr	r1, [r4, #24]
 802a934:	4a6d      	ldr	r2, [pc, #436]	@ (802aaec <_scanf_i+0x1dc>)
 802a936:	2903      	cmp	r1, #3
 802a938:	bf08      	it	eq
 802a93a:	461a      	moveq	r2, r3
 802a93c:	68a3      	ldr	r3, [r4, #8]
 802a93e:	9201      	str	r2, [sp, #4]
 802a940:	1e5a      	subs	r2, r3, #1
 802a942:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 802a946:	bf89      	itett	hi
 802a948:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 802a94c:	f04f 0900 	movls.w	r9, #0
 802a950:	eb03 0905 	addhi.w	r9, r3, r5
 802a954:	f240 135d 	movwhi	r3, #349	@ 0x15d
 802a958:	bf88      	it	hi
 802a95a:	60a3      	strhi	r3, [r4, #8]
 802a95c:	f857 3b1c 	ldr.w	r3, [r7], #28
 802a960:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 802a964:	463d      	mov	r5, r7
 802a966:	6023      	str	r3, [r4, #0]
 802a968:	6831      	ldr	r1, [r6, #0]
 802a96a:	ab03      	add	r3, sp, #12
 802a96c:	2202      	movs	r2, #2
 802a96e:	7809      	ldrb	r1, [r1, #0]
 802a970:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802a974:	f7fd fa85 	bl	8027e82 <memchr>
 802a978:	b328      	cbz	r0, 802a9c6 <_scanf_i+0xb6>
 802a97a:	f1bb 0f01 	cmp.w	fp, #1
 802a97e:	d159      	bne.n	802aa34 <_scanf_i+0x124>
 802a980:	6862      	ldr	r2, [r4, #4]
 802a982:	b92a      	cbnz	r2, 802a990 <_scanf_i+0x80>
 802a984:	6822      	ldr	r2, [r4, #0]
 802a986:	2108      	movs	r1, #8
 802a988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802a98c:	6061      	str	r1, [r4, #4]
 802a98e:	6022      	str	r2, [r4, #0]
 802a990:	6822      	ldr	r2, [r4, #0]
 802a992:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 802a996:	6022      	str	r2, [r4, #0]
 802a998:	68a2      	ldr	r2, [r4, #8]
 802a99a:	1e51      	subs	r1, r2, #1
 802a99c:	60a1      	str	r1, [r4, #8]
 802a99e:	b192      	cbz	r2, 802a9c6 <_scanf_i+0xb6>
 802a9a0:	6832      	ldr	r2, [r6, #0]
 802a9a2:	1c51      	adds	r1, r2, #1
 802a9a4:	6031      	str	r1, [r6, #0]
 802a9a6:	7812      	ldrb	r2, [r2, #0]
 802a9a8:	f805 2b01 	strb.w	r2, [r5], #1
 802a9ac:	6872      	ldr	r2, [r6, #4]
 802a9ae:	3a01      	subs	r2, #1
 802a9b0:	2a00      	cmp	r2, #0
 802a9b2:	6072      	str	r2, [r6, #4]
 802a9b4:	dc07      	bgt.n	802a9c6 <_scanf_i+0xb6>
 802a9b6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 802a9ba:	4631      	mov	r1, r6
 802a9bc:	4650      	mov	r0, sl
 802a9be:	4790      	blx	r2
 802a9c0:	2800      	cmp	r0, #0
 802a9c2:	f040 8085 	bne.w	802aad0 <_scanf_i+0x1c0>
 802a9c6:	f10b 0b01 	add.w	fp, fp, #1
 802a9ca:	f1bb 0f03 	cmp.w	fp, #3
 802a9ce:	d1cb      	bne.n	802a968 <_scanf_i+0x58>
 802a9d0:	6863      	ldr	r3, [r4, #4]
 802a9d2:	b90b      	cbnz	r3, 802a9d8 <_scanf_i+0xc8>
 802a9d4:	230a      	movs	r3, #10
 802a9d6:	6063      	str	r3, [r4, #4]
 802a9d8:	6863      	ldr	r3, [r4, #4]
 802a9da:	f04f 0b00 	mov.w	fp, #0
 802a9de:	4944      	ldr	r1, [pc, #272]	@ (802aaf0 <_scanf_i+0x1e0>)
 802a9e0:	6960      	ldr	r0, [r4, #20]
 802a9e2:	1ac9      	subs	r1, r1, r3
 802a9e4:	f000 f898 	bl	802ab18 <__sccl>
 802a9e8:	68a3      	ldr	r3, [r4, #8]
 802a9ea:	6822      	ldr	r2, [r4, #0]
 802a9ec:	2b00      	cmp	r3, #0
 802a9ee:	d03d      	beq.n	802aa6c <_scanf_i+0x15c>
 802a9f0:	6831      	ldr	r1, [r6, #0]
 802a9f2:	6960      	ldr	r0, [r4, #20]
 802a9f4:	f891 c000 	ldrb.w	ip, [r1]
 802a9f8:	f810 000c 	ldrb.w	r0, [r0, ip]
 802a9fc:	2800      	cmp	r0, #0
 802a9fe:	d035      	beq.n	802aa6c <_scanf_i+0x15c>
 802aa00:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 802aa04:	d124      	bne.n	802aa50 <_scanf_i+0x140>
 802aa06:	0510      	lsls	r0, r2, #20
 802aa08:	d522      	bpl.n	802aa50 <_scanf_i+0x140>
 802aa0a:	f10b 0b01 	add.w	fp, fp, #1
 802aa0e:	f1b9 0f00 	cmp.w	r9, #0
 802aa12:	d003      	beq.n	802aa1c <_scanf_i+0x10c>
 802aa14:	3301      	adds	r3, #1
 802aa16:	f109 39ff 	add.w	r9, r9, #4294967295
 802aa1a:	60a3      	str	r3, [r4, #8]
 802aa1c:	6873      	ldr	r3, [r6, #4]
 802aa1e:	3b01      	subs	r3, #1
 802aa20:	2b00      	cmp	r3, #0
 802aa22:	6073      	str	r3, [r6, #4]
 802aa24:	dd1b      	ble.n	802aa5e <_scanf_i+0x14e>
 802aa26:	6833      	ldr	r3, [r6, #0]
 802aa28:	3301      	adds	r3, #1
 802aa2a:	6033      	str	r3, [r6, #0]
 802aa2c:	68a3      	ldr	r3, [r4, #8]
 802aa2e:	3b01      	subs	r3, #1
 802aa30:	60a3      	str	r3, [r4, #8]
 802aa32:	e7d9      	b.n	802a9e8 <_scanf_i+0xd8>
 802aa34:	f1bb 0f02 	cmp.w	fp, #2
 802aa38:	d1ae      	bne.n	802a998 <_scanf_i+0x88>
 802aa3a:	6822      	ldr	r2, [r4, #0]
 802aa3c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 802aa40:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802aa44:	d1bf      	bne.n	802a9c6 <_scanf_i+0xb6>
 802aa46:	2110      	movs	r1, #16
 802aa48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 802aa4c:	6061      	str	r1, [r4, #4]
 802aa4e:	e7a2      	b.n	802a996 <_scanf_i+0x86>
 802aa50:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 802aa54:	6022      	str	r2, [r4, #0]
 802aa56:	780b      	ldrb	r3, [r1, #0]
 802aa58:	f805 3b01 	strb.w	r3, [r5], #1
 802aa5c:	e7de      	b.n	802aa1c <_scanf_i+0x10c>
 802aa5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 802aa62:	4631      	mov	r1, r6
 802aa64:	4650      	mov	r0, sl
 802aa66:	4798      	blx	r3
 802aa68:	2800      	cmp	r0, #0
 802aa6a:	d0df      	beq.n	802aa2c <_scanf_i+0x11c>
 802aa6c:	6823      	ldr	r3, [r4, #0]
 802aa6e:	05d9      	lsls	r1, r3, #23
 802aa70:	d50d      	bpl.n	802aa8e <_scanf_i+0x17e>
 802aa72:	42bd      	cmp	r5, r7
 802aa74:	d909      	bls.n	802aa8a <_scanf_i+0x17a>
 802aa76:	f105 39ff 	add.w	r9, r5, #4294967295
 802aa7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802aa7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 802aa82:	4632      	mov	r2, r6
 802aa84:	464d      	mov	r5, r9
 802aa86:	4650      	mov	r0, sl
 802aa88:	4798      	blx	r3
 802aa8a:	42bd      	cmp	r5, r7
 802aa8c:	d028      	beq.n	802aae0 <_scanf_i+0x1d0>
 802aa8e:	6822      	ldr	r2, [r4, #0]
 802aa90:	f012 0210 	ands.w	r2, r2, #16
 802aa94:	d113      	bne.n	802aabe <_scanf_i+0x1ae>
 802aa96:	702a      	strb	r2, [r5, #0]
 802aa98:	4639      	mov	r1, r7
 802aa9a:	6863      	ldr	r3, [r4, #4]
 802aa9c:	4650      	mov	r0, sl
 802aa9e:	9e01      	ldr	r6, [sp, #4]
 802aaa0:	47b0      	blx	r6
 802aaa2:	f8d8 3000 	ldr.w	r3, [r8]
 802aaa6:	6821      	ldr	r1, [r4, #0]
 802aaa8:	1d1a      	adds	r2, r3, #4
 802aaaa:	f011 0f20 	tst.w	r1, #32
 802aaae:	f8c8 2000 	str.w	r2, [r8]
 802aab2:	681b      	ldr	r3, [r3, #0]
 802aab4:	d00f      	beq.n	802aad6 <_scanf_i+0x1c6>
 802aab6:	6018      	str	r0, [r3, #0]
 802aab8:	68e3      	ldr	r3, [r4, #12]
 802aaba:	3301      	adds	r3, #1
 802aabc:	60e3      	str	r3, [r4, #12]
 802aabe:	1bed      	subs	r5, r5, r7
 802aac0:	6923      	ldr	r3, [r4, #16]
 802aac2:	2000      	movs	r0, #0
 802aac4:	445d      	add	r5, fp
 802aac6:	442b      	add	r3, r5
 802aac8:	6123      	str	r3, [r4, #16]
 802aaca:	b007      	add	sp, #28
 802aacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aad0:	f04f 0b00 	mov.w	fp, #0
 802aad4:	e7ca      	b.n	802aa6c <_scanf_i+0x15c>
 802aad6:	07ca      	lsls	r2, r1, #31
 802aad8:	bf4c      	ite	mi
 802aada:	8018      	strhmi	r0, [r3, #0]
 802aadc:	6018      	strpl	r0, [r3, #0]
 802aade:	e7eb      	b.n	802aab8 <_scanf_i+0x1a8>
 802aae0:	2001      	movs	r0, #1
 802aae2:	e7f2      	b.n	802aaca <_scanf_i+0x1ba>
 802aae4:	08030068 	.word	0x08030068
 802aae8:	080260b1 	.word	0x080260b1
 802aaec:	08029f05 	.word	0x08029f05
 802aaf0:	08030810 	.word	0x08030810

0802aaf4 <fiprintf>:
 802aaf4:	b40e      	push	{r1, r2, r3}
 802aaf6:	b503      	push	{r0, r1, lr}
 802aaf8:	ab03      	add	r3, sp, #12
 802aafa:	4601      	mov	r1, r0
 802aafc:	4805      	ldr	r0, [pc, #20]	@ (802ab14 <fiprintf+0x20>)
 802aafe:	f853 2b04 	ldr.w	r2, [r3], #4
 802ab02:	6800      	ldr	r0, [r0, #0]
 802ab04:	9301      	str	r3, [sp, #4]
 802ab06:	f000 f8af 	bl	802ac68 <_vfiprintf_r>
 802ab0a:	b002      	add	sp, #8
 802ab0c:	f85d eb04 	ldr.w	lr, [sp], #4
 802ab10:	b003      	add	sp, #12
 802ab12:	4770      	bx	lr
 802ab14:	20000508 	.word	0x20000508

0802ab18 <__sccl>:
 802ab18:	b570      	push	{r4, r5, r6, lr}
 802ab1a:	780b      	ldrb	r3, [r1, #0]
 802ab1c:	4604      	mov	r4, r0
 802ab1e:	3801      	subs	r0, #1
 802ab20:	2b5e      	cmp	r3, #94	@ 0x5e
 802ab22:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 802ab26:	bf13      	iteet	ne
 802ab28:	1c4a      	addne	r2, r1, #1
 802ab2a:	1c8a      	addeq	r2, r1, #2
 802ab2c:	784b      	ldrbeq	r3, [r1, #1]
 802ab2e:	2100      	movne	r1, #0
 802ab30:	bf08      	it	eq
 802ab32:	2101      	moveq	r1, #1
 802ab34:	f800 1f01 	strb.w	r1, [r0, #1]!
 802ab38:	42a8      	cmp	r0, r5
 802ab3a:	d1fb      	bne.n	802ab34 <__sccl+0x1c>
 802ab3c:	b90b      	cbnz	r3, 802ab42 <__sccl+0x2a>
 802ab3e:	1e50      	subs	r0, r2, #1
 802ab40:	bd70      	pop	{r4, r5, r6, pc}
 802ab42:	f081 0101 	eor.w	r1, r1, #1
 802ab46:	4610      	mov	r0, r2
 802ab48:	54e1      	strb	r1, [r4, r3]
 802ab4a:	4602      	mov	r2, r0
 802ab4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 802ab50:	2d2d      	cmp	r5, #45	@ 0x2d
 802ab52:	d005      	beq.n	802ab60 <__sccl+0x48>
 802ab54:	2d5d      	cmp	r5, #93	@ 0x5d
 802ab56:	d016      	beq.n	802ab86 <__sccl+0x6e>
 802ab58:	2d00      	cmp	r5, #0
 802ab5a:	d0f1      	beq.n	802ab40 <__sccl+0x28>
 802ab5c:	462b      	mov	r3, r5
 802ab5e:	e7f2      	b.n	802ab46 <__sccl+0x2e>
 802ab60:	7846      	ldrb	r6, [r0, #1]
 802ab62:	2e5d      	cmp	r6, #93	@ 0x5d
 802ab64:	d0fa      	beq.n	802ab5c <__sccl+0x44>
 802ab66:	42b3      	cmp	r3, r6
 802ab68:	dcf8      	bgt.n	802ab5c <__sccl+0x44>
 802ab6a:	3002      	adds	r0, #2
 802ab6c:	461a      	mov	r2, r3
 802ab6e:	3201      	adds	r2, #1
 802ab70:	4296      	cmp	r6, r2
 802ab72:	54a1      	strb	r1, [r4, r2]
 802ab74:	dcfb      	bgt.n	802ab6e <__sccl+0x56>
 802ab76:	1af2      	subs	r2, r6, r3
 802ab78:	1c5d      	adds	r5, r3, #1
 802ab7a:	3a01      	subs	r2, #1
 802ab7c:	42b3      	cmp	r3, r6
 802ab7e:	bfa8      	it	ge
 802ab80:	2200      	movge	r2, #0
 802ab82:	18ab      	adds	r3, r5, r2
 802ab84:	e7e1      	b.n	802ab4a <__sccl+0x32>
 802ab86:	4610      	mov	r0, r2
 802ab88:	e7da      	b.n	802ab40 <__sccl+0x28>

0802ab8a <__submore>:
 802ab8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ab8e:	460c      	mov	r4, r1
 802ab90:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 802ab92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802ab96:	4299      	cmp	r1, r3
 802ab98:	d11a      	bne.n	802abd0 <__submore+0x46>
 802ab9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 802ab9e:	f7fe fbe9 	bl	8029374 <_malloc_r>
 802aba2:	b918      	cbnz	r0, 802abac <__submore+0x22>
 802aba4:	f04f 30ff 	mov.w	r0, #4294967295
 802aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802abac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802abb0:	6360      	str	r0, [r4, #52]	@ 0x34
 802abb2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 802abb6:	63a3      	str	r3, [r4, #56]	@ 0x38
 802abb8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 802abbc:	7083      	strb	r3, [r0, #2]
 802abbe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 802abc2:	7043      	strb	r3, [r0, #1]
 802abc4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 802abc8:	7003      	strb	r3, [r0, #0]
 802abca:	6020      	str	r0, [r4, #0]
 802abcc:	2000      	movs	r0, #0
 802abce:	e7eb      	b.n	802aba8 <__submore+0x1e>
 802abd0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 802abd2:	0077      	lsls	r7, r6, #1
 802abd4:	463a      	mov	r2, r7
 802abd6:	f7ff fc47 	bl	802a468 <_realloc_r>
 802abda:	4605      	mov	r5, r0
 802abdc:	2800      	cmp	r0, #0
 802abde:	d0e1      	beq.n	802aba4 <__submore+0x1a>
 802abe0:	eb00 0806 	add.w	r8, r0, r6
 802abe4:	4601      	mov	r1, r0
 802abe6:	4632      	mov	r2, r6
 802abe8:	4640      	mov	r0, r8
 802abea:	f7fd f958 	bl	8027e9e <memcpy>
 802abee:	f8c4 8000 	str.w	r8, [r4]
 802abf2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 802abf6:	e7e9      	b.n	802abcc <__submore+0x42>

0802abf8 <abort>:
 802abf8:	2006      	movs	r0, #6
 802abfa:	b508      	push	{r3, lr}
 802abfc:	f000 fa08 	bl	802b010 <raise>
 802ac00:	2001      	movs	r0, #1
 802ac02:	f7eb faab 	bl	801615c <_exit>

0802ac06 <_malloc_usable_size_r>:
 802ac06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ac0a:	1f18      	subs	r0, r3, #4
 802ac0c:	2b00      	cmp	r3, #0
 802ac0e:	bfbc      	itt	lt
 802ac10:	580b      	ldrlt	r3, [r1, r0]
 802ac12:	18c0      	addlt	r0, r0, r3
 802ac14:	4770      	bx	lr

0802ac16 <__sfputc_r>:
 802ac16:	6893      	ldr	r3, [r2, #8]
 802ac18:	3b01      	subs	r3, #1
 802ac1a:	2b00      	cmp	r3, #0
 802ac1c:	6093      	str	r3, [r2, #8]
 802ac1e:	b410      	push	{r4}
 802ac20:	da08      	bge.n	802ac34 <__sfputc_r+0x1e>
 802ac22:	6994      	ldr	r4, [r2, #24]
 802ac24:	42a3      	cmp	r3, r4
 802ac26:	db01      	blt.n	802ac2c <__sfputc_r+0x16>
 802ac28:	290a      	cmp	r1, #10
 802ac2a:	d103      	bne.n	802ac34 <__sfputc_r+0x1e>
 802ac2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ac30:	f000 b932 	b.w	802ae98 <__swbuf_r>
 802ac34:	6813      	ldr	r3, [r2, #0]
 802ac36:	1c58      	adds	r0, r3, #1
 802ac38:	6010      	str	r0, [r2, #0]
 802ac3a:	4608      	mov	r0, r1
 802ac3c:	7019      	strb	r1, [r3, #0]
 802ac3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ac42:	4770      	bx	lr

0802ac44 <__sfputs_r>:
 802ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ac46:	4606      	mov	r6, r0
 802ac48:	460f      	mov	r7, r1
 802ac4a:	4614      	mov	r4, r2
 802ac4c:	18d5      	adds	r5, r2, r3
 802ac4e:	42ac      	cmp	r4, r5
 802ac50:	d101      	bne.n	802ac56 <__sfputs_r+0x12>
 802ac52:	2000      	movs	r0, #0
 802ac54:	e007      	b.n	802ac66 <__sfputs_r+0x22>
 802ac56:	463a      	mov	r2, r7
 802ac58:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ac5c:	4630      	mov	r0, r6
 802ac5e:	f7ff ffda 	bl	802ac16 <__sfputc_r>
 802ac62:	1c43      	adds	r3, r0, #1
 802ac64:	d1f3      	bne.n	802ac4e <__sfputs_r+0xa>
 802ac66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802ac68 <_vfiprintf_r>:
 802ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ac6c:	460d      	mov	r5, r1
 802ac6e:	b09d      	sub	sp, #116	@ 0x74
 802ac70:	4614      	mov	r4, r2
 802ac72:	4698      	mov	r8, r3
 802ac74:	4606      	mov	r6, r0
 802ac76:	b118      	cbz	r0, 802ac80 <_vfiprintf_r+0x18>
 802ac78:	6a03      	ldr	r3, [r0, #32]
 802ac7a:	b90b      	cbnz	r3, 802ac80 <_vfiprintf_r+0x18>
 802ac7c:	f7fc f960 	bl	8026f40 <__sinit>
 802ac80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ac82:	07d9      	lsls	r1, r3, #31
 802ac84:	d405      	bmi.n	802ac92 <_vfiprintf_r+0x2a>
 802ac86:	89ab      	ldrh	r3, [r5, #12]
 802ac88:	059a      	lsls	r2, r3, #22
 802ac8a:	d402      	bmi.n	802ac92 <_vfiprintf_r+0x2a>
 802ac8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ac8e:	f7fd f8ed 	bl	8027e6c <__retarget_lock_acquire_recursive>
 802ac92:	89ab      	ldrh	r3, [r5, #12]
 802ac94:	071b      	lsls	r3, r3, #28
 802ac96:	d501      	bpl.n	802ac9c <_vfiprintf_r+0x34>
 802ac98:	692b      	ldr	r3, [r5, #16]
 802ac9a:	b99b      	cbnz	r3, 802acc4 <_vfiprintf_r+0x5c>
 802ac9c:	4629      	mov	r1, r5
 802ac9e:	4630      	mov	r0, r6
 802aca0:	f000 f938 	bl	802af14 <__swsetup_r>
 802aca4:	b170      	cbz	r0, 802acc4 <_vfiprintf_r+0x5c>
 802aca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802aca8:	07dc      	lsls	r4, r3, #31
 802acaa:	d504      	bpl.n	802acb6 <_vfiprintf_r+0x4e>
 802acac:	f04f 30ff 	mov.w	r0, #4294967295
 802acb0:	b01d      	add	sp, #116	@ 0x74
 802acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acb6:	89ab      	ldrh	r3, [r5, #12]
 802acb8:	0598      	lsls	r0, r3, #22
 802acba:	d4f7      	bmi.n	802acac <_vfiprintf_r+0x44>
 802acbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802acbe:	f7fd f8d7 	bl	8027e70 <__retarget_lock_release_recursive>
 802acc2:	e7f3      	b.n	802acac <_vfiprintf_r+0x44>
 802acc4:	2300      	movs	r3, #0
 802acc6:	f8cd 800c 	str.w	r8, [sp, #12]
 802acca:	f04f 0901 	mov.w	r9, #1
 802acce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802ae84 <_vfiprintf_r+0x21c>
 802acd2:	9309      	str	r3, [sp, #36]	@ 0x24
 802acd4:	2320      	movs	r3, #32
 802acd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802acda:	2330      	movs	r3, #48	@ 0x30
 802acdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802ace0:	4623      	mov	r3, r4
 802ace2:	469a      	mov	sl, r3
 802ace4:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ace8:	b10a      	cbz	r2, 802acee <_vfiprintf_r+0x86>
 802acea:	2a25      	cmp	r2, #37	@ 0x25
 802acec:	d1f9      	bne.n	802ace2 <_vfiprintf_r+0x7a>
 802acee:	ebba 0b04 	subs.w	fp, sl, r4
 802acf2:	d00b      	beq.n	802ad0c <_vfiprintf_r+0xa4>
 802acf4:	465b      	mov	r3, fp
 802acf6:	4622      	mov	r2, r4
 802acf8:	4629      	mov	r1, r5
 802acfa:	4630      	mov	r0, r6
 802acfc:	f7ff ffa2 	bl	802ac44 <__sfputs_r>
 802ad00:	3001      	adds	r0, #1
 802ad02:	f000 80a7 	beq.w	802ae54 <_vfiprintf_r+0x1ec>
 802ad06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802ad08:	445a      	add	r2, fp
 802ad0a:	9209      	str	r2, [sp, #36]	@ 0x24
 802ad0c:	f89a 3000 	ldrb.w	r3, [sl]
 802ad10:	2b00      	cmp	r3, #0
 802ad12:	f000 809f 	beq.w	802ae54 <_vfiprintf_r+0x1ec>
 802ad16:	2300      	movs	r3, #0
 802ad18:	f04f 32ff 	mov.w	r2, #4294967295
 802ad1c:	f10a 0a01 	add.w	sl, sl, #1
 802ad20:	9304      	str	r3, [sp, #16]
 802ad22:	9307      	str	r3, [sp, #28]
 802ad24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802ad28:	931a      	str	r3, [sp, #104]	@ 0x68
 802ad2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ad2e:	4654      	mov	r4, sl
 802ad30:	2205      	movs	r2, #5
 802ad32:	4854      	ldr	r0, [pc, #336]	@ (802ae84 <_vfiprintf_r+0x21c>)
 802ad34:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ad38:	f7fd f8a3 	bl	8027e82 <memchr>
 802ad3c:	9a04      	ldr	r2, [sp, #16]
 802ad3e:	b9d8      	cbnz	r0, 802ad78 <_vfiprintf_r+0x110>
 802ad40:	06d1      	lsls	r1, r2, #27
 802ad42:	bf44      	itt	mi
 802ad44:	2320      	movmi	r3, #32
 802ad46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad4a:	0713      	lsls	r3, r2, #28
 802ad4c:	bf44      	itt	mi
 802ad4e:	232b      	movmi	r3, #43	@ 0x2b
 802ad50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802ad54:	f89a 3000 	ldrb.w	r3, [sl]
 802ad58:	2b2a      	cmp	r3, #42	@ 0x2a
 802ad5a:	d015      	beq.n	802ad88 <_vfiprintf_r+0x120>
 802ad5c:	9a07      	ldr	r2, [sp, #28]
 802ad5e:	4654      	mov	r4, sl
 802ad60:	2000      	movs	r0, #0
 802ad62:	f04f 0c0a 	mov.w	ip, #10
 802ad66:	4621      	mov	r1, r4
 802ad68:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ad6c:	3b30      	subs	r3, #48	@ 0x30
 802ad6e:	2b09      	cmp	r3, #9
 802ad70:	d94b      	bls.n	802ae0a <_vfiprintf_r+0x1a2>
 802ad72:	b1b0      	cbz	r0, 802ada2 <_vfiprintf_r+0x13a>
 802ad74:	9207      	str	r2, [sp, #28]
 802ad76:	e014      	b.n	802ada2 <_vfiprintf_r+0x13a>
 802ad78:	eba0 0308 	sub.w	r3, r0, r8
 802ad7c:	46a2      	mov	sl, r4
 802ad7e:	fa09 f303 	lsl.w	r3, r9, r3
 802ad82:	4313      	orrs	r3, r2
 802ad84:	9304      	str	r3, [sp, #16]
 802ad86:	e7d2      	b.n	802ad2e <_vfiprintf_r+0xc6>
 802ad88:	9b03      	ldr	r3, [sp, #12]
 802ad8a:	1d19      	adds	r1, r3, #4
 802ad8c:	681b      	ldr	r3, [r3, #0]
 802ad8e:	2b00      	cmp	r3, #0
 802ad90:	9103      	str	r1, [sp, #12]
 802ad92:	bfbb      	ittet	lt
 802ad94:	425b      	neglt	r3, r3
 802ad96:	f042 0202 	orrlt.w	r2, r2, #2
 802ad9a:	9307      	strge	r3, [sp, #28]
 802ad9c:	9307      	strlt	r3, [sp, #28]
 802ad9e:	bfb8      	it	lt
 802ada0:	9204      	strlt	r2, [sp, #16]
 802ada2:	7823      	ldrb	r3, [r4, #0]
 802ada4:	2b2e      	cmp	r3, #46	@ 0x2e
 802ada6:	d10a      	bne.n	802adbe <_vfiprintf_r+0x156>
 802ada8:	7863      	ldrb	r3, [r4, #1]
 802adaa:	2b2a      	cmp	r3, #42	@ 0x2a
 802adac:	d132      	bne.n	802ae14 <_vfiprintf_r+0x1ac>
 802adae:	9b03      	ldr	r3, [sp, #12]
 802adb0:	3402      	adds	r4, #2
 802adb2:	1d1a      	adds	r2, r3, #4
 802adb4:	681b      	ldr	r3, [r3, #0]
 802adb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802adba:	9203      	str	r2, [sp, #12]
 802adbc:	9305      	str	r3, [sp, #20]
 802adbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802ae94 <_vfiprintf_r+0x22c>
 802adc2:	2203      	movs	r2, #3
 802adc4:	7821      	ldrb	r1, [r4, #0]
 802adc6:	4650      	mov	r0, sl
 802adc8:	f7fd f85b 	bl	8027e82 <memchr>
 802adcc:	b138      	cbz	r0, 802adde <_vfiprintf_r+0x176>
 802adce:	eba0 000a 	sub.w	r0, r0, sl
 802add2:	2240      	movs	r2, #64	@ 0x40
 802add4:	9b04      	ldr	r3, [sp, #16]
 802add6:	3401      	adds	r4, #1
 802add8:	4082      	lsls	r2, r0
 802adda:	4313      	orrs	r3, r2
 802addc:	9304      	str	r3, [sp, #16]
 802adde:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ade2:	2206      	movs	r2, #6
 802ade4:	4828      	ldr	r0, [pc, #160]	@ (802ae88 <_vfiprintf_r+0x220>)
 802ade6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802adea:	f7fd f84a 	bl	8027e82 <memchr>
 802adee:	2800      	cmp	r0, #0
 802adf0:	d03f      	beq.n	802ae72 <_vfiprintf_r+0x20a>
 802adf2:	4b26      	ldr	r3, [pc, #152]	@ (802ae8c <_vfiprintf_r+0x224>)
 802adf4:	bb1b      	cbnz	r3, 802ae3e <_vfiprintf_r+0x1d6>
 802adf6:	9b03      	ldr	r3, [sp, #12]
 802adf8:	3307      	adds	r3, #7
 802adfa:	f023 0307 	bic.w	r3, r3, #7
 802adfe:	3308      	adds	r3, #8
 802ae00:	9303      	str	r3, [sp, #12]
 802ae02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ae04:	443b      	add	r3, r7
 802ae06:	9309      	str	r3, [sp, #36]	@ 0x24
 802ae08:	e76a      	b.n	802ace0 <_vfiprintf_r+0x78>
 802ae0a:	fb0c 3202 	mla	r2, ip, r2, r3
 802ae0e:	460c      	mov	r4, r1
 802ae10:	2001      	movs	r0, #1
 802ae12:	e7a8      	b.n	802ad66 <_vfiprintf_r+0xfe>
 802ae14:	2300      	movs	r3, #0
 802ae16:	3401      	adds	r4, #1
 802ae18:	f04f 0c0a 	mov.w	ip, #10
 802ae1c:	4619      	mov	r1, r3
 802ae1e:	9305      	str	r3, [sp, #20]
 802ae20:	4620      	mov	r0, r4
 802ae22:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ae26:	3a30      	subs	r2, #48	@ 0x30
 802ae28:	2a09      	cmp	r2, #9
 802ae2a:	d903      	bls.n	802ae34 <_vfiprintf_r+0x1cc>
 802ae2c:	2b00      	cmp	r3, #0
 802ae2e:	d0c6      	beq.n	802adbe <_vfiprintf_r+0x156>
 802ae30:	9105      	str	r1, [sp, #20]
 802ae32:	e7c4      	b.n	802adbe <_vfiprintf_r+0x156>
 802ae34:	fb0c 2101 	mla	r1, ip, r1, r2
 802ae38:	4604      	mov	r4, r0
 802ae3a:	2301      	movs	r3, #1
 802ae3c:	e7f0      	b.n	802ae20 <_vfiprintf_r+0x1b8>
 802ae3e:	ab03      	add	r3, sp, #12
 802ae40:	462a      	mov	r2, r5
 802ae42:	a904      	add	r1, sp, #16
 802ae44:	4630      	mov	r0, r6
 802ae46:	9300      	str	r3, [sp, #0]
 802ae48:	4b11      	ldr	r3, [pc, #68]	@ (802ae90 <_vfiprintf_r+0x228>)
 802ae4a:	f7fb fa1f 	bl	802628c <_printf_float>
 802ae4e:	4607      	mov	r7, r0
 802ae50:	1c78      	adds	r0, r7, #1
 802ae52:	d1d6      	bne.n	802ae02 <_vfiprintf_r+0x19a>
 802ae54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802ae56:	07d9      	lsls	r1, r3, #31
 802ae58:	d405      	bmi.n	802ae66 <_vfiprintf_r+0x1fe>
 802ae5a:	89ab      	ldrh	r3, [r5, #12]
 802ae5c:	059a      	lsls	r2, r3, #22
 802ae5e:	d402      	bmi.n	802ae66 <_vfiprintf_r+0x1fe>
 802ae60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802ae62:	f7fd f805 	bl	8027e70 <__retarget_lock_release_recursive>
 802ae66:	89ab      	ldrh	r3, [r5, #12]
 802ae68:	065b      	lsls	r3, r3, #25
 802ae6a:	f53f af1f 	bmi.w	802acac <_vfiprintf_r+0x44>
 802ae6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802ae70:	e71e      	b.n	802acb0 <_vfiprintf_r+0x48>
 802ae72:	ab03      	add	r3, sp, #12
 802ae74:	462a      	mov	r2, r5
 802ae76:	a904      	add	r1, sp, #16
 802ae78:	4630      	mov	r0, r6
 802ae7a:	9300      	str	r3, [sp, #0]
 802ae7c:	4b04      	ldr	r3, [pc, #16]	@ (802ae90 <_vfiprintf_r+0x228>)
 802ae7e:	f7fb fca1 	bl	80267c4 <_printf_i>
 802ae82:	e7e4      	b.n	802ae4e <_vfiprintf_r+0x1e6>
 802ae84:	08030750 	.word	0x08030750
 802ae88:	0803075a 	.word	0x0803075a
 802ae8c:	0802628d 	.word	0x0802628d
 802ae90:	0802ac45 	.word	0x0802ac45
 802ae94:	08030756 	.word	0x08030756

0802ae98 <__swbuf_r>:
 802ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ae9a:	460e      	mov	r6, r1
 802ae9c:	4614      	mov	r4, r2
 802ae9e:	4605      	mov	r5, r0
 802aea0:	b118      	cbz	r0, 802aeaa <__swbuf_r+0x12>
 802aea2:	6a03      	ldr	r3, [r0, #32]
 802aea4:	b90b      	cbnz	r3, 802aeaa <__swbuf_r+0x12>
 802aea6:	f7fc f84b 	bl	8026f40 <__sinit>
 802aeaa:	69a3      	ldr	r3, [r4, #24]
 802aeac:	60a3      	str	r3, [r4, #8]
 802aeae:	89a3      	ldrh	r3, [r4, #12]
 802aeb0:	071a      	lsls	r2, r3, #28
 802aeb2:	d501      	bpl.n	802aeb8 <__swbuf_r+0x20>
 802aeb4:	6923      	ldr	r3, [r4, #16]
 802aeb6:	b943      	cbnz	r3, 802aeca <__swbuf_r+0x32>
 802aeb8:	4621      	mov	r1, r4
 802aeba:	4628      	mov	r0, r5
 802aebc:	f000 f82a 	bl	802af14 <__swsetup_r>
 802aec0:	b118      	cbz	r0, 802aeca <__swbuf_r+0x32>
 802aec2:	f04f 37ff 	mov.w	r7, #4294967295
 802aec6:	4638      	mov	r0, r7
 802aec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802aeca:	6823      	ldr	r3, [r4, #0]
 802aecc:	b2f6      	uxtb	r6, r6
 802aece:	6922      	ldr	r2, [r4, #16]
 802aed0:	4637      	mov	r7, r6
 802aed2:	1a98      	subs	r0, r3, r2
 802aed4:	6963      	ldr	r3, [r4, #20]
 802aed6:	4283      	cmp	r3, r0
 802aed8:	dc05      	bgt.n	802aee6 <__swbuf_r+0x4e>
 802aeda:	4621      	mov	r1, r4
 802aedc:	4628      	mov	r0, r5
 802aede:	f7ff fa05 	bl	802a2ec <_fflush_r>
 802aee2:	2800      	cmp	r0, #0
 802aee4:	d1ed      	bne.n	802aec2 <__swbuf_r+0x2a>
 802aee6:	68a3      	ldr	r3, [r4, #8]
 802aee8:	3b01      	subs	r3, #1
 802aeea:	60a3      	str	r3, [r4, #8]
 802aeec:	6823      	ldr	r3, [r4, #0]
 802aeee:	1c5a      	adds	r2, r3, #1
 802aef0:	6022      	str	r2, [r4, #0]
 802aef2:	701e      	strb	r6, [r3, #0]
 802aef4:	1c43      	adds	r3, r0, #1
 802aef6:	6962      	ldr	r2, [r4, #20]
 802aef8:	429a      	cmp	r2, r3
 802aefa:	d004      	beq.n	802af06 <__swbuf_r+0x6e>
 802aefc:	89a3      	ldrh	r3, [r4, #12]
 802aefe:	07db      	lsls	r3, r3, #31
 802af00:	d5e1      	bpl.n	802aec6 <__swbuf_r+0x2e>
 802af02:	2e0a      	cmp	r6, #10
 802af04:	d1df      	bne.n	802aec6 <__swbuf_r+0x2e>
 802af06:	4621      	mov	r1, r4
 802af08:	4628      	mov	r0, r5
 802af0a:	f7ff f9ef 	bl	802a2ec <_fflush_r>
 802af0e:	2800      	cmp	r0, #0
 802af10:	d0d9      	beq.n	802aec6 <__swbuf_r+0x2e>
 802af12:	e7d6      	b.n	802aec2 <__swbuf_r+0x2a>

0802af14 <__swsetup_r>:
 802af14:	b538      	push	{r3, r4, r5, lr}
 802af16:	4b29      	ldr	r3, [pc, #164]	@ (802afbc <__swsetup_r+0xa8>)
 802af18:	4605      	mov	r5, r0
 802af1a:	460c      	mov	r4, r1
 802af1c:	6818      	ldr	r0, [r3, #0]
 802af1e:	b118      	cbz	r0, 802af28 <__swsetup_r+0x14>
 802af20:	6a03      	ldr	r3, [r0, #32]
 802af22:	b90b      	cbnz	r3, 802af28 <__swsetup_r+0x14>
 802af24:	f7fc f80c 	bl	8026f40 <__sinit>
 802af28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802af2c:	0719      	lsls	r1, r3, #28
 802af2e:	d422      	bmi.n	802af76 <__swsetup_r+0x62>
 802af30:	06da      	lsls	r2, r3, #27
 802af32:	d407      	bmi.n	802af44 <__swsetup_r+0x30>
 802af34:	2209      	movs	r2, #9
 802af36:	602a      	str	r2, [r5, #0]
 802af38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802af3c:	f04f 30ff 	mov.w	r0, #4294967295
 802af40:	81a3      	strh	r3, [r4, #12]
 802af42:	e033      	b.n	802afac <__swsetup_r+0x98>
 802af44:	0758      	lsls	r0, r3, #29
 802af46:	d512      	bpl.n	802af6e <__swsetup_r+0x5a>
 802af48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802af4a:	b141      	cbz	r1, 802af5e <__swsetup_r+0x4a>
 802af4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802af50:	4299      	cmp	r1, r3
 802af52:	d002      	beq.n	802af5a <__swsetup_r+0x46>
 802af54:	4628      	mov	r0, r5
 802af56:	f7fd fe17 	bl	8028b88 <_free_r>
 802af5a:	2300      	movs	r3, #0
 802af5c:	6363      	str	r3, [r4, #52]	@ 0x34
 802af5e:	89a3      	ldrh	r3, [r4, #12]
 802af60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802af64:	81a3      	strh	r3, [r4, #12]
 802af66:	2300      	movs	r3, #0
 802af68:	6063      	str	r3, [r4, #4]
 802af6a:	6923      	ldr	r3, [r4, #16]
 802af6c:	6023      	str	r3, [r4, #0]
 802af6e:	89a3      	ldrh	r3, [r4, #12]
 802af70:	f043 0308 	orr.w	r3, r3, #8
 802af74:	81a3      	strh	r3, [r4, #12]
 802af76:	6923      	ldr	r3, [r4, #16]
 802af78:	b94b      	cbnz	r3, 802af8e <__swsetup_r+0x7a>
 802af7a:	89a3      	ldrh	r3, [r4, #12]
 802af7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802af80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802af84:	d003      	beq.n	802af8e <__swsetup_r+0x7a>
 802af86:	4621      	mov	r1, r4
 802af88:	4628      	mov	r0, r5
 802af8a:	f000 f882 	bl	802b092 <__smakebuf_r>
 802af8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802af92:	f013 0201 	ands.w	r2, r3, #1
 802af96:	d00a      	beq.n	802afae <__swsetup_r+0x9a>
 802af98:	2200      	movs	r2, #0
 802af9a:	60a2      	str	r2, [r4, #8]
 802af9c:	6962      	ldr	r2, [r4, #20]
 802af9e:	4252      	negs	r2, r2
 802afa0:	61a2      	str	r2, [r4, #24]
 802afa2:	6922      	ldr	r2, [r4, #16]
 802afa4:	b942      	cbnz	r2, 802afb8 <__swsetup_r+0xa4>
 802afa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802afaa:	d1c5      	bne.n	802af38 <__swsetup_r+0x24>
 802afac:	bd38      	pop	{r3, r4, r5, pc}
 802afae:	0799      	lsls	r1, r3, #30
 802afb0:	bf58      	it	pl
 802afb2:	6962      	ldrpl	r2, [r4, #20]
 802afb4:	60a2      	str	r2, [r4, #8]
 802afb6:	e7f4      	b.n	802afa2 <__swsetup_r+0x8e>
 802afb8:	2000      	movs	r0, #0
 802afba:	e7f7      	b.n	802afac <__swsetup_r+0x98>
 802afbc:	20000508 	.word	0x20000508

0802afc0 <_raise_r>:
 802afc0:	291f      	cmp	r1, #31
 802afc2:	b538      	push	{r3, r4, r5, lr}
 802afc4:	4605      	mov	r5, r0
 802afc6:	460c      	mov	r4, r1
 802afc8:	d904      	bls.n	802afd4 <_raise_r+0x14>
 802afca:	2316      	movs	r3, #22
 802afcc:	6003      	str	r3, [r0, #0]
 802afce:	f04f 30ff 	mov.w	r0, #4294967295
 802afd2:	bd38      	pop	{r3, r4, r5, pc}
 802afd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802afd6:	b112      	cbz	r2, 802afde <_raise_r+0x1e>
 802afd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802afdc:	b94b      	cbnz	r3, 802aff2 <_raise_r+0x32>
 802afde:	4628      	mov	r0, r5
 802afe0:	f000 f830 	bl	802b044 <_getpid_r>
 802afe4:	4622      	mov	r2, r4
 802afe6:	4601      	mov	r1, r0
 802afe8:	4628      	mov	r0, r5
 802afea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802afee:	f000 b817 	b.w	802b020 <_kill_r>
 802aff2:	2b01      	cmp	r3, #1
 802aff4:	d00a      	beq.n	802b00c <_raise_r+0x4c>
 802aff6:	1c59      	adds	r1, r3, #1
 802aff8:	d103      	bne.n	802b002 <_raise_r+0x42>
 802affa:	2316      	movs	r3, #22
 802affc:	6003      	str	r3, [r0, #0]
 802affe:	2001      	movs	r0, #1
 802b000:	e7e7      	b.n	802afd2 <_raise_r+0x12>
 802b002:	2100      	movs	r1, #0
 802b004:	4620      	mov	r0, r4
 802b006:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b00a:	4798      	blx	r3
 802b00c:	2000      	movs	r0, #0
 802b00e:	e7e0      	b.n	802afd2 <_raise_r+0x12>

0802b010 <raise>:
 802b010:	4b02      	ldr	r3, [pc, #8]	@ (802b01c <raise+0xc>)
 802b012:	4601      	mov	r1, r0
 802b014:	6818      	ldr	r0, [r3, #0]
 802b016:	f7ff bfd3 	b.w	802afc0 <_raise_r>
 802b01a:	bf00      	nop
 802b01c:	20000508 	.word	0x20000508

0802b020 <_kill_r>:
 802b020:	b538      	push	{r3, r4, r5, lr}
 802b022:	2300      	movs	r3, #0
 802b024:	4d06      	ldr	r5, [pc, #24]	@ (802b040 <_kill_r+0x20>)
 802b026:	4604      	mov	r4, r0
 802b028:	4608      	mov	r0, r1
 802b02a:	4611      	mov	r1, r2
 802b02c:	602b      	str	r3, [r5, #0]
 802b02e:	f7eb f885 	bl	801613c <_kill>
 802b032:	1c43      	adds	r3, r0, #1
 802b034:	d102      	bne.n	802b03c <_kill_r+0x1c>
 802b036:	682b      	ldr	r3, [r5, #0]
 802b038:	b103      	cbz	r3, 802b03c <_kill_r+0x1c>
 802b03a:	6023      	str	r3, [r4, #0]
 802b03c:	bd38      	pop	{r3, r4, r5, pc}
 802b03e:	bf00      	nop
 802b040:	200bbcec 	.word	0x200bbcec

0802b044 <_getpid_r>:
 802b044:	f7eb b872 	b.w	801612c <_getpid>

0802b048 <__swhatbuf_r>:
 802b048:	b570      	push	{r4, r5, r6, lr}
 802b04a:	460c      	mov	r4, r1
 802b04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b050:	b096      	sub	sp, #88	@ 0x58
 802b052:	4615      	mov	r5, r2
 802b054:	2900      	cmp	r1, #0
 802b056:	461e      	mov	r6, r3
 802b058:	da0c      	bge.n	802b074 <__swhatbuf_r+0x2c>
 802b05a:	89a3      	ldrh	r3, [r4, #12]
 802b05c:	2100      	movs	r1, #0
 802b05e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802b062:	bf14      	ite	ne
 802b064:	2340      	movne	r3, #64	@ 0x40
 802b066:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802b06a:	2000      	movs	r0, #0
 802b06c:	6031      	str	r1, [r6, #0]
 802b06e:	602b      	str	r3, [r5, #0]
 802b070:	b016      	add	sp, #88	@ 0x58
 802b072:	bd70      	pop	{r4, r5, r6, pc}
 802b074:	466a      	mov	r2, sp
 802b076:	f000 f849 	bl	802b10c <_fstat_r>
 802b07a:	2800      	cmp	r0, #0
 802b07c:	dbed      	blt.n	802b05a <__swhatbuf_r+0x12>
 802b07e:	9901      	ldr	r1, [sp, #4]
 802b080:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802b084:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802b088:	4259      	negs	r1, r3
 802b08a:	4159      	adcs	r1, r3
 802b08c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802b090:	e7eb      	b.n	802b06a <__swhatbuf_r+0x22>

0802b092 <__smakebuf_r>:
 802b092:	898b      	ldrh	r3, [r1, #12]
 802b094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802b096:	079d      	lsls	r5, r3, #30
 802b098:	4606      	mov	r6, r0
 802b09a:	460c      	mov	r4, r1
 802b09c:	d507      	bpl.n	802b0ae <__smakebuf_r+0x1c>
 802b09e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802b0a2:	6023      	str	r3, [r4, #0]
 802b0a4:	6123      	str	r3, [r4, #16]
 802b0a6:	2301      	movs	r3, #1
 802b0a8:	6163      	str	r3, [r4, #20]
 802b0aa:	b003      	add	sp, #12
 802b0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b0ae:	ab01      	add	r3, sp, #4
 802b0b0:	466a      	mov	r2, sp
 802b0b2:	f7ff ffc9 	bl	802b048 <__swhatbuf_r>
 802b0b6:	9f00      	ldr	r7, [sp, #0]
 802b0b8:	4605      	mov	r5, r0
 802b0ba:	4630      	mov	r0, r6
 802b0bc:	4639      	mov	r1, r7
 802b0be:	f7fe f959 	bl	8029374 <_malloc_r>
 802b0c2:	b948      	cbnz	r0, 802b0d8 <__smakebuf_r+0x46>
 802b0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0c8:	059a      	lsls	r2, r3, #22
 802b0ca:	d4ee      	bmi.n	802b0aa <__smakebuf_r+0x18>
 802b0cc:	f023 0303 	bic.w	r3, r3, #3
 802b0d0:	f043 0302 	orr.w	r3, r3, #2
 802b0d4:	81a3      	strh	r3, [r4, #12]
 802b0d6:	e7e2      	b.n	802b09e <__smakebuf_r+0xc>
 802b0d8:	89a3      	ldrh	r3, [r4, #12]
 802b0da:	6020      	str	r0, [r4, #0]
 802b0dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802b0e0:	81a3      	strh	r3, [r4, #12]
 802b0e2:	9b01      	ldr	r3, [sp, #4]
 802b0e4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802b0e8:	b15b      	cbz	r3, 802b102 <__smakebuf_r+0x70>
 802b0ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b0ee:	4630      	mov	r0, r6
 802b0f0:	f000 f81e 	bl	802b130 <_isatty_r>
 802b0f4:	b128      	cbz	r0, 802b102 <__smakebuf_r+0x70>
 802b0f6:	89a3      	ldrh	r3, [r4, #12]
 802b0f8:	f023 0303 	bic.w	r3, r3, #3
 802b0fc:	f043 0301 	orr.w	r3, r3, #1
 802b100:	81a3      	strh	r3, [r4, #12]
 802b102:	89a3      	ldrh	r3, [r4, #12]
 802b104:	431d      	orrs	r5, r3
 802b106:	81a5      	strh	r5, [r4, #12]
 802b108:	e7cf      	b.n	802b0aa <__smakebuf_r+0x18>
	...

0802b10c <_fstat_r>:
 802b10c:	b538      	push	{r3, r4, r5, lr}
 802b10e:	2300      	movs	r3, #0
 802b110:	4d06      	ldr	r5, [pc, #24]	@ (802b12c <_fstat_r+0x20>)
 802b112:	4604      	mov	r4, r0
 802b114:	4608      	mov	r0, r1
 802b116:	4611      	mov	r1, r2
 802b118:	602b      	str	r3, [r5, #0]
 802b11a:	f7eb f86f 	bl	80161fc <_fstat>
 802b11e:	1c43      	adds	r3, r0, #1
 802b120:	d102      	bne.n	802b128 <_fstat_r+0x1c>
 802b122:	682b      	ldr	r3, [r5, #0]
 802b124:	b103      	cbz	r3, 802b128 <_fstat_r+0x1c>
 802b126:	6023      	str	r3, [r4, #0]
 802b128:	bd38      	pop	{r3, r4, r5, pc}
 802b12a:	bf00      	nop
 802b12c:	200bbcec 	.word	0x200bbcec

0802b130 <_isatty_r>:
 802b130:	b538      	push	{r3, r4, r5, lr}
 802b132:	2300      	movs	r3, #0
 802b134:	4d05      	ldr	r5, [pc, #20]	@ (802b14c <_isatty_r+0x1c>)
 802b136:	4604      	mov	r4, r0
 802b138:	4608      	mov	r0, r1
 802b13a:	602b      	str	r3, [r5, #0]
 802b13c:	f7eb f86e 	bl	801621c <_isatty>
 802b140:	1c43      	adds	r3, r0, #1
 802b142:	d102      	bne.n	802b14a <_isatty_r+0x1a>
 802b144:	682b      	ldr	r3, [r5, #0]
 802b146:	b103      	cbz	r3, 802b14a <_isatty_r+0x1a>
 802b148:	6023      	str	r3, [r4, #0]
 802b14a:	bd38      	pop	{r3, r4, r5, pc}
 802b14c:	200bbcec 	.word	0x200bbcec

0802b150 <_init>:
 802b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b152:	bf00      	nop
 802b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b156:	bc08      	pop	{r3}
 802b158:	469e      	mov	lr, r3
 802b15a:	4770      	bx	lr

0802b15c <_fini>:
 802b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b15e:	bf00      	nop
 802b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b162:	bc08      	pop	{r3}
 802b164:	469e      	mov	lr, r3
 802b166:	4770      	bx	lr
